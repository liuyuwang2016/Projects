; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	D:\USER\Desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT

PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	_hypot
PUBLIC	_cosf
PUBLIC	_sinf
PUBLIC	_sqrtf
PUBLIC	?cos@@YAMM@Z					; cos
PUBLIC	?sin@@YAMM@Z					; sin
PUBLIC	?sqrt@@YAMM@Z					; sqrt
PUBLIC	?length@?$tvec2@M$0A@@glm@@SAHXZ		; glm::tvec2<float,0>::length
PUBLIC	??A?$tvec2@M$0A@@glm@@QAEAAMH@Z			; glm::tvec2<float,0>::operator[]
PUBLIC	??A?$tvec2@M$0A@@glm@@QBEABMH@Z			; glm::tvec2<float,0>::operator[]
PUBLIC	??0?$tvec2@M$0A@@glm@@QAE@XZ			; glm::tvec2<float,0>::tvec2<float,0>
PUBLIC	??0?$tvec2@M$0A@@glm@@QAE@ABU01@@Z		; glm::tvec2<float,0>::tvec2<float,0>
PUBLIC	??0?$tvec2@M$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tvec2<float,0>::tvec2<float,0>
PUBLIC	??0?$tvec2@M$0A@@glm@@QAE@M@Z			; glm::tvec2<float,0>::tvec2<float,0>
PUBLIC	??0?$tvec2@M$0A@@glm@@QAE@MM@Z			; glm::tvec2<float,0>::tvec2<float,0>
PUBLIC	??4?$tvec2@M$0A@@glm@@QAEAAU01@ABU01@@Z		; glm::tvec2<float,0>::operator=
PUBLIC	??E?$tvec2@M$0A@@glm@@QAEAAU01@XZ		; glm::tvec2<float,0>::operator++
PUBLIC	??F?$tvec2@M$0A@@glm@@QAEAAU01@XZ		; glm::tvec2<float,0>::operator--
PUBLIC	??E?$tvec2@M$0A@@glm@@QAE?AU01@H@Z		; glm::tvec2<float,0>::operator++
PUBLIC	??F?$tvec2@M$0A@@glm@@QAE?AU01@H@Z		; glm::tvec2<float,0>::operator--
PUBLIC	?length@?$tvec2@G$0A@@glm@@SAHXZ		; glm::tvec2<unsigned short,0>::length
PUBLIC	??A?$tvec2@G$0A@@glm@@QAEAAGH@Z			; glm::tvec2<unsigned short,0>::operator[]
PUBLIC	??A?$tvec2@G$0A@@glm@@QBEABGH@Z			; glm::tvec2<unsigned short,0>::operator[]
PUBLIC	??0?$tvec2@G$0A@@glm@@QAE@XZ			; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0>
PUBLIC	??0?$tvec2@G$0A@@glm@@QAE@ABU01@@Z		; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0>
PUBLIC	??0?$tvec2@G$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0>
PUBLIC	??0?$tvec2@G$0A@@glm@@QAE@G@Z			; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0>
PUBLIC	??0?$tvec2@G$0A@@glm@@QAE@GG@Z			; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0>
PUBLIC	??4?$tvec2@G$0A@@glm@@QAEAAU01@ABU01@@Z		; glm::tvec2<unsigned short,0>::operator=
PUBLIC	??E?$tvec2@G$0A@@glm@@QAEAAU01@XZ		; glm::tvec2<unsigned short,0>::operator++
PUBLIC	??F?$tvec2@G$0A@@glm@@QAEAAU01@XZ		; glm::tvec2<unsigned short,0>::operator--
PUBLIC	??E?$tvec2@G$0A@@glm@@QAE?AU01@H@Z		; glm::tvec2<unsigned short,0>::operator++
PUBLIC	??F?$tvec2@G$0A@@glm@@QAE?AU01@H@Z		; glm::tvec2<unsigned short,0>::operator--
PUBLIC	?length@?$tvec2@F$0A@@glm@@SAHXZ		; glm::tvec2<short,0>::length
PUBLIC	??A?$tvec2@F$0A@@glm@@QAEAAFH@Z			; glm::tvec2<short,0>::operator[]
PUBLIC	??A?$tvec2@F$0A@@glm@@QBEABFH@Z			; glm::tvec2<short,0>::operator[]
PUBLIC	??0?$tvec2@F$0A@@glm@@QAE@XZ			; glm::tvec2<short,0>::tvec2<short,0>
PUBLIC	??0?$tvec2@F$0A@@glm@@QAE@ABU01@@Z		; glm::tvec2<short,0>::tvec2<short,0>
PUBLIC	??0?$tvec2@F$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tvec2<short,0>::tvec2<short,0>
PUBLIC	??0?$tvec2@F$0A@@glm@@QAE@F@Z			; glm::tvec2<short,0>::tvec2<short,0>
PUBLIC	??0?$tvec2@F$0A@@glm@@QAE@FF@Z			; glm::tvec2<short,0>::tvec2<short,0>
PUBLIC	??4?$tvec2@F$0A@@glm@@QAEAAU01@ABU01@@Z		; glm::tvec2<short,0>::operator=
PUBLIC	??E?$tvec2@F$0A@@glm@@QAEAAU01@XZ		; glm::tvec2<short,0>::operator++
PUBLIC	??F?$tvec2@F$0A@@glm@@QAEAAU01@XZ		; glm::tvec2<short,0>::operator--
PUBLIC	??E?$tvec2@F$0A@@glm@@QAE?AU01@H@Z		; glm::tvec2<short,0>::operator++
PUBLIC	??F?$tvec2@F$0A@@glm@@QAE?AU01@H@Z		; glm::tvec2<short,0>::operator--
PUBLIC	?length@?$tvec4@M$0A@@glm@@SAHXZ		; glm::tvec4<float,0>::length
PUBLIC	??A?$tvec4@M$0A@@glm@@QAEAAMH@Z			; glm::tvec4<float,0>::operator[]
PUBLIC	??A?$tvec4@M$0A@@glm@@QBEABMH@Z			; glm::tvec4<float,0>::operator[]
PUBLIC	??0?$tvec4@M$0A@@glm@@QAE@XZ			; glm::tvec4<float,0>::tvec4<float,0>
PUBLIC	??0?$tvec4@M$0A@@glm@@QAE@ABU01@@Z		; glm::tvec4<float,0>::tvec4<float,0>
PUBLIC	??0?$tvec4@M$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tvec4<float,0>::tvec4<float,0>
PUBLIC	??0?$tvec4@M$0A@@glm@@QAE@M@Z			; glm::tvec4<float,0>::tvec4<float,0>
PUBLIC	??0?$tvec4@M$0A@@glm@@QAE@MMMM@Z		; glm::tvec4<float,0>::tvec4<float,0>
PUBLIC	??4?$tvec4@M$0A@@glm@@QAEAAU01@ABU01@@Z		; glm::tvec4<float,0>::operator=
PUBLIC	??E?$tvec4@M$0A@@glm@@QAEAAU01@XZ		; glm::tvec4<float,0>::operator++
PUBLIC	??F?$tvec4@M$0A@@glm@@QAEAAU01@XZ		; glm::tvec4<float,0>::operator--
PUBLIC	??E?$tvec4@M$0A@@glm@@QAE?AU01@H@Z		; glm::tvec4<float,0>::operator++
PUBLIC	??F?$tvec4@M$0A@@glm@@QAE?AU01@H@Z		; glm::tvec4<float,0>::operator--
PUBLIC	?length@?$tvec4@E$0A@@glm@@SAHXZ		; glm::tvec4<unsigned char,0>::length
PUBLIC	??A?$tvec4@E$0A@@glm@@QAEAAEH@Z			; glm::tvec4<unsigned char,0>::operator[]
PUBLIC	??A?$tvec4@E$0A@@glm@@QBEABEH@Z			; glm::tvec4<unsigned char,0>::operator[]
PUBLIC	??0?$tvec4@E$0A@@glm@@QAE@XZ			; glm::tvec4<unsigned char,0>::tvec4<unsigned char,0>
PUBLIC	??0?$tvec4@E$0A@@glm@@QAE@ABU01@@Z		; glm::tvec4<unsigned char,0>::tvec4<unsigned char,0>
PUBLIC	??0?$tvec4@E$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tvec4<unsigned char,0>::tvec4<unsigned char,0>
PUBLIC	??0?$tvec4@E$0A@@glm@@QAE@E@Z			; glm::tvec4<unsigned char,0>::tvec4<unsigned char,0>
PUBLIC	??0?$tvec4@E$0A@@glm@@QAE@EEEE@Z		; glm::tvec4<unsigned char,0>::tvec4<unsigned char,0>
PUBLIC	??4?$tvec4@E$0A@@glm@@QAEAAU01@ABU01@@Z		; glm::tvec4<unsigned char,0>::operator=
PUBLIC	??E?$tvec4@E$0A@@glm@@QAEAAU01@XZ		; glm::tvec4<unsigned char,0>::operator++
PUBLIC	??F?$tvec4@E$0A@@glm@@QAEAAU01@XZ		; glm::tvec4<unsigned char,0>::operator--
PUBLIC	??E?$tvec4@E$0A@@glm@@QAE?AU01@H@Z		; glm::tvec4<unsigned char,0>::operator++
PUBLIC	??F?$tvec4@E$0A@@glm@@QAE?AU01@H@Z		; glm::tvec4<unsigned char,0>::operator--
PUBLIC	?length@?$tvec4@C$0A@@glm@@SAHXZ		; glm::tvec4<signed char,0>::length
PUBLIC	??A?$tvec4@C$0A@@glm@@QAEAACH@Z			; glm::tvec4<signed char,0>::operator[]
PUBLIC	??A?$tvec4@C$0A@@glm@@QBEABCH@Z			; glm::tvec4<signed char,0>::operator[]
PUBLIC	??0?$tvec4@C$0A@@glm@@QAE@XZ			; glm::tvec4<signed char,0>::tvec4<signed char,0>
PUBLIC	??0?$tvec4@C$0A@@glm@@QAE@ABU01@@Z		; glm::tvec4<signed char,0>::tvec4<signed char,0>
PUBLIC	??0?$tvec4@C$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tvec4<signed char,0>::tvec4<signed char,0>
PUBLIC	??0?$tvec4@C$0A@@glm@@QAE@C@Z			; glm::tvec4<signed char,0>::tvec4<signed char,0>
PUBLIC	??0?$tvec4@C$0A@@glm@@QAE@CCCC@Z		; glm::tvec4<signed char,0>::tvec4<signed char,0>
PUBLIC	??4?$tvec4@C$0A@@glm@@QAEAAU01@ABU01@@Z		; glm::tvec4<signed char,0>::operator=
PUBLIC	??E?$tvec4@C$0A@@glm@@QAEAAU01@XZ		; glm::tvec4<signed char,0>::operator++
PUBLIC	??F?$tvec4@C$0A@@glm@@QAEAAU01@XZ		; glm::tvec4<signed char,0>::operator--
PUBLIC	??E?$tvec4@C$0A@@glm@@QAE?AU01@H@Z		; glm::tvec4<signed char,0>::operator++
PUBLIC	??F?$tvec4@C$0A@@glm@@QAE?AU01@H@Z		; glm::tvec4<signed char,0>::operator--
PUBLIC	?length@?$tvec2@I$0A@@glm@@SAHXZ		; glm::tvec2<unsigned int,0>::length
PUBLIC	??A?$tvec2@I$0A@@glm@@QAEAAIH@Z			; glm::tvec2<unsigned int,0>::operator[]
PUBLIC	??A?$tvec2@I$0A@@glm@@QBEABIH@Z			; glm::tvec2<unsigned int,0>::operator[]
PUBLIC	??0?$tvec2@I$0A@@glm@@QAE@XZ			; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>
PUBLIC	??0?$tvec2@I$0A@@glm@@QAE@ABU01@@Z		; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>
PUBLIC	??0?$tvec2@I$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>
PUBLIC	??0?$tvec2@I$0A@@glm@@QAE@I@Z			; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>
PUBLIC	??0?$tvec2@I$0A@@glm@@QAE@II@Z			; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>
PUBLIC	??4?$tvec2@I$0A@@glm@@QAEAAU01@ABU01@@Z		; glm::tvec2<unsigned int,0>::operator=
PUBLIC	??E?$tvec2@I$0A@@glm@@QAEAAU01@XZ		; glm::tvec2<unsigned int,0>::operator++
PUBLIC	??F?$tvec2@I$0A@@glm@@QAEAAU01@XZ		; glm::tvec2<unsigned int,0>::operator--
PUBLIC	??E?$tvec2@I$0A@@glm@@QAE?AU01@H@Z		; glm::tvec2<unsigned int,0>::operator++
PUBLIC	??F?$tvec2@I$0A@@glm@@QAE?AU01@H@Z		; glm::tvec2<unsigned int,0>::operator--
PUBLIC	?length@?$tvec1@E$01@glm@@SAHXZ			; glm::tvec1<unsigned char,2>::length
PUBLIC	??A?$tvec1@E$01@glm@@QAEAAEH@Z			; glm::tvec1<unsigned char,2>::operator[]
PUBLIC	??A?$tvec1@E$01@glm@@QBEABEH@Z			; glm::tvec1<unsigned char,2>::operator[]
PUBLIC	??0?$tvec1@E$01@glm@@QAE@XZ			; glm::tvec1<unsigned char,2>::tvec1<unsigned char,2>
PUBLIC	??0?$tvec1@E$01@glm@@QAE@ABU01@@Z		; glm::tvec1<unsigned char,2>::tvec1<unsigned char,2>
PUBLIC	??0?$tvec1@E$01@glm@@QAE@W4ctor@1@@Z		; glm::tvec1<unsigned char,2>::tvec1<unsigned char,2>
PUBLIC	??0?$tvec1@E$01@glm@@QAE@E@Z			; glm::tvec1<unsigned char,2>::tvec1<unsigned char,2>
PUBLIC	??4?$tvec1@E$01@glm@@QAEAAU01@ABU01@@Z		; glm::tvec1<unsigned char,2>::operator=
PUBLIC	??E?$tvec1@E$01@glm@@QAEAAU01@XZ		; glm::tvec1<unsigned char,2>::operator++
PUBLIC	??F?$tvec1@E$01@glm@@QAEAAU01@XZ		; glm::tvec1<unsigned char,2>::operator--
PUBLIC	??E?$tvec1@E$01@glm@@QAE?AU01@H@Z		; glm::tvec1<unsigned char,2>::operator++
PUBLIC	??F?$tvec1@E$01@glm@@QAE?AU01@H@Z		; glm::tvec1<unsigned char,2>::operator--
PUBLIC	?length@?$tvec1@G$01@glm@@SAHXZ			; glm::tvec1<unsigned short,2>::length
PUBLIC	??A?$tvec1@G$01@glm@@QAEAAGH@Z			; glm::tvec1<unsigned short,2>::operator[]
PUBLIC	??A?$tvec1@G$01@glm@@QBEABGH@Z			; glm::tvec1<unsigned short,2>::operator[]
PUBLIC	??0?$tvec1@G$01@glm@@QAE@XZ			; glm::tvec1<unsigned short,2>::tvec1<unsigned short,2>
PUBLIC	??0?$tvec1@G$01@glm@@QAE@ABU01@@Z		; glm::tvec1<unsigned short,2>::tvec1<unsigned short,2>
PUBLIC	??0?$tvec1@G$01@glm@@QAE@W4ctor@1@@Z		; glm::tvec1<unsigned short,2>::tvec1<unsigned short,2>
PUBLIC	??0?$tvec1@G$01@glm@@QAE@G@Z			; glm::tvec1<unsigned short,2>::tvec1<unsigned short,2>
PUBLIC	??4?$tvec1@G$01@glm@@QAEAAU01@ABU01@@Z		; glm::tvec1<unsigned short,2>::operator=
PUBLIC	??E?$tvec1@G$01@glm@@QAEAAU01@XZ		; glm::tvec1<unsigned short,2>::operator++
PUBLIC	??F?$tvec1@G$01@glm@@QAEAAU01@XZ		; glm::tvec1<unsigned short,2>::operator--
PUBLIC	??E?$tvec1@G$01@glm@@QAE?AU01@H@Z		; glm::tvec1<unsigned short,2>::operator++
PUBLIC	??F?$tvec1@G$01@glm@@QAE?AU01@H@Z		; glm::tvec1<unsigned short,2>::operator--
PUBLIC	?length@?$tvec1@I$01@glm@@SAHXZ			; glm::tvec1<unsigned int,2>::length
PUBLIC	??A?$tvec1@I$01@glm@@QAEAAIH@Z			; glm::tvec1<unsigned int,2>::operator[]
PUBLIC	??A?$tvec1@I$01@glm@@QBEABIH@Z			; glm::tvec1<unsigned int,2>::operator[]
PUBLIC	??0?$tvec1@I$01@glm@@QAE@XZ			; glm::tvec1<unsigned int,2>::tvec1<unsigned int,2>
PUBLIC	??0?$tvec1@I$01@glm@@QAE@ABU01@@Z		; glm::tvec1<unsigned int,2>::tvec1<unsigned int,2>
PUBLIC	??0?$tvec1@I$01@glm@@QAE@W4ctor@1@@Z		; glm::tvec1<unsigned int,2>::tvec1<unsigned int,2>
PUBLIC	??0?$tvec1@I$01@glm@@QAE@I@Z			; glm::tvec1<unsigned int,2>::tvec1<unsigned int,2>
PUBLIC	??4?$tvec1@I$01@glm@@QAEAAU01@ABU01@@Z		; glm::tvec1<unsigned int,2>::operator=
PUBLIC	??E?$tvec1@I$01@glm@@QAEAAU01@XZ		; glm::tvec1<unsigned int,2>::operator++
PUBLIC	??F?$tvec1@I$01@glm@@QAEAAU01@XZ		; glm::tvec1<unsigned int,2>::operator--
PUBLIC	??E?$tvec1@I$01@glm@@QAE?AU01@H@Z		; glm::tvec1<unsigned int,2>::operator++
PUBLIC	??F?$tvec1@I$01@glm@@QAE?AU01@H@Z		; glm::tvec1<unsigned int,2>::operator--
PUBLIC	?length@?$tvec1@_K$01@glm@@SAHXZ		; glm::tvec1<unsigned __int64,2>::length
PUBLIC	??A?$tvec1@_K$01@glm@@QAEAA_KH@Z		; glm::tvec1<unsigned __int64,2>::operator[]
PUBLIC	??A?$tvec1@_K$01@glm@@QBEAB_KH@Z		; glm::tvec1<unsigned __int64,2>::operator[]
PUBLIC	??0?$tvec1@_K$01@glm@@QAE@XZ			; glm::tvec1<unsigned __int64,2>::tvec1<unsigned __int64,2>
PUBLIC	??0?$tvec1@_K$01@glm@@QAE@ABU01@@Z		; glm::tvec1<unsigned __int64,2>::tvec1<unsigned __int64,2>
PUBLIC	??0?$tvec1@_K$01@glm@@QAE@W4ctor@1@@Z		; glm::tvec1<unsigned __int64,2>::tvec1<unsigned __int64,2>
PUBLIC	??0?$tvec1@_K$01@glm@@QAE@_K@Z			; glm::tvec1<unsigned __int64,2>::tvec1<unsigned __int64,2>
PUBLIC	??4?$tvec1@_K$01@glm@@QAEAAU01@ABU01@@Z		; glm::tvec1<unsigned __int64,2>::operator=
PUBLIC	??E?$tvec1@_K$01@glm@@QAEAAU01@XZ		; glm::tvec1<unsigned __int64,2>::operator++
PUBLIC	??F?$tvec1@_K$01@glm@@QAEAAU01@XZ		; glm::tvec1<unsigned __int64,2>::operator--
PUBLIC	??E?$tvec1@_K$01@glm@@QAE?AU01@H@Z		; glm::tvec1<unsigned __int64,2>::operator++
PUBLIC	??F?$tvec1@_K$01@glm@@QAE?AU01@H@Z		; glm::tvec1<unsigned __int64,2>::operator--
PUBLIC	?length@?$tvec1@C$01@glm@@SAHXZ			; glm::tvec1<signed char,2>::length
PUBLIC	??A?$tvec1@C$01@glm@@QAEAACH@Z			; glm::tvec1<signed char,2>::operator[]
PUBLIC	??A?$tvec1@C$01@glm@@QBEABCH@Z			; glm::tvec1<signed char,2>::operator[]
PUBLIC	??0?$tvec1@C$01@glm@@QAE@XZ			; glm::tvec1<signed char,2>::tvec1<signed char,2>
PUBLIC	??0?$tvec1@C$01@glm@@QAE@ABU01@@Z		; glm::tvec1<signed char,2>::tvec1<signed char,2>
PUBLIC	??0?$tvec1@C$01@glm@@QAE@W4ctor@1@@Z		; glm::tvec1<signed char,2>::tvec1<signed char,2>
PUBLIC	??0?$tvec1@C$01@glm@@QAE@C@Z			; glm::tvec1<signed char,2>::tvec1<signed char,2>
PUBLIC	??4?$tvec1@C$01@glm@@QAEAAU01@ABU01@@Z		; glm::tvec1<signed char,2>::operator=
PUBLIC	??E?$tvec1@C$01@glm@@QAEAAU01@XZ		; glm::tvec1<signed char,2>::operator++
PUBLIC	??F?$tvec1@C$01@glm@@QAEAAU01@XZ		; glm::tvec1<signed char,2>::operator--
PUBLIC	??E?$tvec1@C$01@glm@@QAE?AU01@H@Z		; glm::tvec1<signed char,2>::operator++
PUBLIC	??F?$tvec1@C$01@glm@@QAE?AU01@H@Z		; glm::tvec1<signed char,2>::operator--
PUBLIC	?length@?$tvec1@F$01@glm@@SAHXZ			; glm::tvec1<short,2>::length
PUBLIC	??A?$tvec1@F$01@glm@@QAEAAFH@Z			; glm::tvec1<short,2>::operator[]
PUBLIC	??A?$tvec1@F$01@glm@@QBEABFH@Z			; glm::tvec1<short,2>::operator[]
PUBLIC	??0?$tvec1@F$01@glm@@QAE@XZ			; glm::tvec1<short,2>::tvec1<short,2>
PUBLIC	??0?$tvec1@F$01@glm@@QAE@ABU01@@Z		; glm::tvec1<short,2>::tvec1<short,2>
PUBLIC	??0?$tvec1@F$01@glm@@QAE@W4ctor@1@@Z		; glm::tvec1<short,2>::tvec1<short,2>
PUBLIC	??0?$tvec1@F$01@glm@@QAE@F@Z			; glm::tvec1<short,2>::tvec1<short,2>
PUBLIC	??4?$tvec1@F$01@glm@@QAEAAU01@ABU01@@Z		; glm::tvec1<short,2>::operator=
PUBLIC	??E?$tvec1@F$01@glm@@QAEAAU01@XZ		; glm::tvec1<short,2>::operator++
PUBLIC	??F?$tvec1@F$01@glm@@QAEAAU01@XZ		; glm::tvec1<short,2>::operator--
PUBLIC	??E?$tvec1@F$01@glm@@QAE?AU01@H@Z		; glm::tvec1<short,2>::operator++
PUBLIC	??F?$tvec1@F$01@glm@@QAE?AU01@H@Z		; glm::tvec1<short,2>::operator--
PUBLIC	?length@?$tvec1@H$01@glm@@SAHXZ			; glm::tvec1<int,2>::length
PUBLIC	??A?$tvec1@H$01@glm@@QAEAAHH@Z			; glm::tvec1<int,2>::operator[]
PUBLIC	??A?$tvec1@H$01@glm@@QBEABHH@Z			; glm::tvec1<int,2>::operator[]
PUBLIC	??0?$tvec1@H$01@glm@@QAE@XZ			; glm::tvec1<int,2>::tvec1<int,2>
PUBLIC	??0?$tvec1@H$01@glm@@QAE@ABU01@@Z		; glm::tvec1<int,2>::tvec1<int,2>
PUBLIC	??0?$tvec1@H$01@glm@@QAE@W4ctor@1@@Z		; glm::tvec1<int,2>::tvec1<int,2>
PUBLIC	??0?$tvec1@H$01@glm@@QAE@H@Z			; glm::tvec1<int,2>::tvec1<int,2>
PUBLIC	??4?$tvec1@H$01@glm@@QAEAAU01@ABU01@@Z		; glm::tvec1<int,2>::operator=
PUBLIC	??E?$tvec1@H$01@glm@@QAEAAU01@XZ		; glm::tvec1<int,2>::operator++
PUBLIC	??F?$tvec1@H$01@glm@@QAEAAU01@XZ		; glm::tvec1<int,2>::operator--
PUBLIC	??E?$tvec1@H$01@glm@@QAE?AU01@H@Z		; glm::tvec1<int,2>::operator++
PUBLIC	??F?$tvec1@H$01@glm@@QAE?AU01@H@Z		; glm::tvec1<int,2>::operator--
PUBLIC	?length@?$tvec1@_J$01@glm@@SAHXZ		; glm::tvec1<__int64,2>::length
PUBLIC	??A?$tvec1@_J$01@glm@@QAEAA_JH@Z		; glm::tvec1<__int64,2>::operator[]
PUBLIC	??A?$tvec1@_J$01@glm@@QBEAB_JH@Z		; glm::tvec1<__int64,2>::operator[]
PUBLIC	??0?$tvec1@_J$01@glm@@QAE@XZ			; glm::tvec1<__int64,2>::tvec1<__int64,2>
PUBLIC	??0?$tvec1@_J$01@glm@@QAE@ABU01@@Z		; glm::tvec1<__int64,2>::tvec1<__int64,2>
PUBLIC	??0?$tvec1@_J$01@glm@@QAE@W4ctor@1@@Z		; glm::tvec1<__int64,2>::tvec1<__int64,2>
PUBLIC	??0?$tvec1@_J$01@glm@@QAE@_J@Z			; glm::tvec1<__int64,2>::tvec1<__int64,2>
PUBLIC	??4?$tvec1@_J$01@glm@@QAEAAU01@ABU01@@Z		; glm::tvec1<__int64,2>::operator=
PUBLIC	??E?$tvec1@_J$01@glm@@QAEAAU01@XZ		; glm::tvec1<__int64,2>::operator++
PUBLIC	??F?$tvec1@_J$01@glm@@QAEAAU01@XZ		; glm::tvec1<__int64,2>::operator--
PUBLIC	??E?$tvec1@_J$01@glm@@QAE?AU01@H@Z		; glm::tvec1<__int64,2>::operator++
PUBLIC	??F?$tvec1@_J$01@glm@@QAE?AU01@H@Z		; glm::tvec1<__int64,2>::operator--
PUBLIC	?length@?$tvec1@M$01@glm@@SAHXZ			; glm::tvec1<float,2>::length
PUBLIC	??A?$tvec1@M$01@glm@@QAEAAMH@Z			; glm::tvec1<float,2>::operator[]
PUBLIC	??A?$tvec1@M$01@glm@@QBEABMH@Z			; glm::tvec1<float,2>::operator[]
PUBLIC	??0?$tvec1@M$01@glm@@QAE@XZ			; glm::tvec1<float,2>::tvec1<float,2>
PUBLIC	??0?$tvec1@M$01@glm@@QAE@ABU01@@Z		; glm::tvec1<float,2>::tvec1<float,2>
PUBLIC	??0?$tvec1@M$01@glm@@QAE@W4ctor@1@@Z		; glm::tvec1<float,2>::tvec1<float,2>
PUBLIC	??0?$tvec1@M$01@glm@@QAE@M@Z			; glm::tvec1<float,2>::tvec1<float,2>
PUBLIC	??4?$tvec1@M$01@glm@@QAEAAU01@ABU01@@Z		; glm::tvec1<float,2>::operator=
PUBLIC	??E?$tvec1@M$01@glm@@QAEAAU01@XZ		; glm::tvec1<float,2>::operator++
PUBLIC	??F?$tvec1@M$01@glm@@QAEAAU01@XZ		; glm::tvec1<float,2>::operator--
PUBLIC	??E?$tvec1@M$01@glm@@QAE?AU01@H@Z		; glm::tvec1<float,2>::operator++
PUBLIC	??F?$tvec1@M$01@glm@@QAE?AU01@H@Z		; glm::tvec1<float,2>::operator--
PUBLIC	?length@?$tvec1@N$01@glm@@SAHXZ			; glm::tvec1<double,2>::length
PUBLIC	??A?$tvec1@N$01@glm@@QAEAANH@Z			; glm::tvec1<double,2>::operator[]
PUBLIC	??A?$tvec1@N$01@glm@@QBEABNH@Z			; glm::tvec1<double,2>::operator[]
PUBLIC	??0?$tvec1@N$01@glm@@QAE@XZ			; glm::tvec1<double,2>::tvec1<double,2>
PUBLIC	??0?$tvec1@N$01@glm@@QAE@ABU01@@Z		; glm::tvec1<double,2>::tvec1<double,2>
PUBLIC	??0?$tvec1@N$01@glm@@QAE@W4ctor@1@@Z		; glm::tvec1<double,2>::tvec1<double,2>
PUBLIC	??0?$tvec1@N$01@glm@@QAE@N@Z			; glm::tvec1<double,2>::tvec1<double,2>
PUBLIC	??4?$tvec1@N$01@glm@@QAEAAU01@ABU01@@Z		; glm::tvec1<double,2>::operator=
PUBLIC	??E?$tvec1@N$01@glm@@QAEAAU01@XZ		; glm::tvec1<double,2>::operator++
PUBLIC	??F?$tvec1@N$01@glm@@QAEAAU01@XZ		; glm::tvec1<double,2>::operator--
PUBLIC	??E?$tvec1@N$01@glm@@QAE?AU01@H@Z		; glm::tvec1<double,2>::operator++
PUBLIC	??F?$tvec1@N$01@glm@@QAE?AU01@H@Z		; glm::tvec1<double,2>::operator--
PUBLIC	?length@?$tvec1@E$00@glm@@SAHXZ			; glm::tvec1<unsigned char,1>::length
PUBLIC	??A?$tvec1@E$00@glm@@QAEAAEH@Z			; glm::tvec1<unsigned char,1>::operator[]
PUBLIC	??A?$tvec1@E$00@glm@@QBEABEH@Z			; glm::tvec1<unsigned char,1>::operator[]
PUBLIC	??0?$tvec1@E$00@glm@@QAE@XZ			; glm::tvec1<unsigned char,1>::tvec1<unsigned char,1>
PUBLIC	??0?$tvec1@E$00@glm@@QAE@ABU01@@Z		; glm::tvec1<unsigned char,1>::tvec1<unsigned char,1>
PUBLIC	??0?$tvec1@E$00@glm@@QAE@W4ctor@1@@Z		; glm::tvec1<unsigned char,1>::tvec1<unsigned char,1>
PUBLIC	??0?$tvec1@E$00@glm@@QAE@E@Z			; glm::tvec1<unsigned char,1>::tvec1<unsigned char,1>
PUBLIC	??4?$tvec1@E$00@glm@@QAEAAU01@ABU01@@Z		; glm::tvec1<unsigned char,1>::operator=
PUBLIC	??E?$tvec1@E$00@glm@@QAEAAU01@XZ		; glm::tvec1<unsigned char,1>::operator++
PUBLIC	??F?$tvec1@E$00@glm@@QAEAAU01@XZ		; glm::tvec1<unsigned char,1>::operator--
PUBLIC	??E?$tvec1@E$00@glm@@QAE?AU01@H@Z		; glm::tvec1<unsigned char,1>::operator++
PUBLIC	??F?$tvec1@E$00@glm@@QAE?AU01@H@Z		; glm::tvec1<unsigned char,1>::operator--
PUBLIC	?length@?$tvec1@G$00@glm@@SAHXZ			; glm::tvec1<unsigned short,1>::length
PUBLIC	??A?$tvec1@G$00@glm@@QAEAAGH@Z			; glm::tvec1<unsigned short,1>::operator[]
PUBLIC	??A?$tvec1@G$00@glm@@QBEABGH@Z			; glm::tvec1<unsigned short,1>::operator[]
PUBLIC	??0?$tvec1@G$00@glm@@QAE@XZ			; glm::tvec1<unsigned short,1>::tvec1<unsigned short,1>
PUBLIC	??0?$tvec1@G$00@glm@@QAE@ABU01@@Z		; glm::tvec1<unsigned short,1>::tvec1<unsigned short,1>
PUBLIC	??0?$tvec1@G$00@glm@@QAE@W4ctor@1@@Z		; glm::tvec1<unsigned short,1>::tvec1<unsigned short,1>
PUBLIC	??0?$tvec1@G$00@glm@@QAE@G@Z			; glm::tvec1<unsigned short,1>::tvec1<unsigned short,1>
PUBLIC	??4?$tvec1@G$00@glm@@QAEAAU01@ABU01@@Z		; glm::tvec1<unsigned short,1>::operator=
PUBLIC	??E?$tvec1@G$00@glm@@QAEAAU01@XZ		; glm::tvec1<unsigned short,1>::operator++
PUBLIC	??F?$tvec1@G$00@glm@@QAEAAU01@XZ		; glm::tvec1<unsigned short,1>::operator--
PUBLIC	??E?$tvec1@G$00@glm@@QAE?AU01@H@Z		; glm::tvec1<unsigned short,1>::operator++
PUBLIC	??F?$tvec1@G$00@glm@@QAE?AU01@H@Z		; glm::tvec1<unsigned short,1>::operator--
PUBLIC	?length@?$tvec1@I$00@glm@@SAHXZ			; glm::tvec1<unsigned int,1>::length
PUBLIC	??A?$tvec1@I$00@glm@@QAEAAIH@Z			; glm::tvec1<unsigned int,1>::operator[]
PUBLIC	??A?$tvec1@I$00@glm@@QBEABIH@Z			; glm::tvec1<unsigned int,1>::operator[]
PUBLIC	??0?$tvec1@I$00@glm@@QAE@XZ			; glm::tvec1<unsigned int,1>::tvec1<unsigned int,1>
PUBLIC	??0?$tvec1@I$00@glm@@QAE@ABU01@@Z		; glm::tvec1<unsigned int,1>::tvec1<unsigned int,1>
PUBLIC	??0?$tvec1@I$00@glm@@QAE@W4ctor@1@@Z		; glm::tvec1<unsigned int,1>::tvec1<unsigned int,1>
PUBLIC	??0?$tvec1@I$00@glm@@QAE@I@Z			; glm::tvec1<unsigned int,1>::tvec1<unsigned int,1>
PUBLIC	??4?$tvec1@I$00@glm@@QAEAAU01@ABU01@@Z		; glm::tvec1<unsigned int,1>::operator=
PUBLIC	??E?$tvec1@I$00@glm@@QAEAAU01@XZ		; glm::tvec1<unsigned int,1>::operator++
PUBLIC	??F?$tvec1@I$00@glm@@QAEAAU01@XZ		; glm::tvec1<unsigned int,1>::operator--
PUBLIC	??E?$tvec1@I$00@glm@@QAE?AU01@H@Z		; glm::tvec1<unsigned int,1>::operator++
PUBLIC	??F?$tvec1@I$00@glm@@QAE?AU01@H@Z		; glm::tvec1<unsigned int,1>::operator--
PUBLIC	?length@?$tvec1@_K$00@glm@@SAHXZ		; glm::tvec1<unsigned __int64,1>::length
PUBLIC	??A?$tvec1@_K$00@glm@@QAEAA_KH@Z		; glm::tvec1<unsigned __int64,1>::operator[]
PUBLIC	??A?$tvec1@_K$00@glm@@QBEAB_KH@Z		; glm::tvec1<unsigned __int64,1>::operator[]
PUBLIC	??0?$tvec1@_K$00@glm@@QAE@XZ			; glm::tvec1<unsigned __int64,1>::tvec1<unsigned __int64,1>
PUBLIC	??0?$tvec1@_K$00@glm@@QAE@ABU01@@Z		; glm::tvec1<unsigned __int64,1>::tvec1<unsigned __int64,1>
PUBLIC	??0?$tvec1@_K$00@glm@@QAE@W4ctor@1@@Z		; glm::tvec1<unsigned __int64,1>::tvec1<unsigned __int64,1>
PUBLIC	??0?$tvec1@_K$00@glm@@QAE@_K@Z			; glm::tvec1<unsigned __int64,1>::tvec1<unsigned __int64,1>
PUBLIC	??4?$tvec1@_K$00@glm@@QAEAAU01@ABU01@@Z		; glm::tvec1<unsigned __int64,1>::operator=
PUBLIC	??E?$tvec1@_K$00@glm@@QAEAAU01@XZ		; glm::tvec1<unsigned __int64,1>::operator++
PUBLIC	??F?$tvec1@_K$00@glm@@QAEAAU01@XZ		; glm::tvec1<unsigned __int64,1>::operator--
PUBLIC	??E?$tvec1@_K$00@glm@@QAE?AU01@H@Z		; glm::tvec1<unsigned __int64,1>::operator++
PUBLIC	??F?$tvec1@_K$00@glm@@QAE?AU01@H@Z		; glm::tvec1<unsigned __int64,1>::operator--
PUBLIC	?length@?$tvec1@C$00@glm@@SAHXZ			; glm::tvec1<signed char,1>::length
PUBLIC	??A?$tvec1@C$00@glm@@QAEAACH@Z			; glm::tvec1<signed char,1>::operator[]
PUBLIC	??A?$tvec1@C$00@glm@@QBEABCH@Z			; glm::tvec1<signed char,1>::operator[]
PUBLIC	??0?$tvec1@C$00@glm@@QAE@XZ			; glm::tvec1<signed char,1>::tvec1<signed char,1>
PUBLIC	??0?$tvec1@C$00@glm@@QAE@ABU01@@Z		; glm::tvec1<signed char,1>::tvec1<signed char,1>
PUBLIC	??0?$tvec1@C$00@glm@@QAE@W4ctor@1@@Z		; glm::tvec1<signed char,1>::tvec1<signed char,1>
PUBLIC	??0?$tvec1@C$00@glm@@QAE@C@Z			; glm::tvec1<signed char,1>::tvec1<signed char,1>
PUBLIC	??4?$tvec1@C$00@glm@@QAEAAU01@ABU01@@Z		; glm::tvec1<signed char,1>::operator=
PUBLIC	??E?$tvec1@C$00@glm@@QAEAAU01@XZ		; glm::tvec1<signed char,1>::operator++
PUBLIC	??F?$tvec1@C$00@glm@@QAEAAU01@XZ		; glm::tvec1<signed char,1>::operator--
PUBLIC	??E?$tvec1@C$00@glm@@QAE?AU01@H@Z		; glm::tvec1<signed char,1>::operator++
PUBLIC	??F?$tvec1@C$00@glm@@QAE?AU01@H@Z		; glm::tvec1<signed char,1>::operator--
PUBLIC	?length@?$tvec1@F$00@glm@@SAHXZ			; glm::tvec1<short,1>::length
PUBLIC	??A?$tvec1@F$00@glm@@QAEAAFH@Z			; glm::tvec1<short,1>::operator[]
PUBLIC	??A?$tvec1@F$00@glm@@QBEABFH@Z			; glm::tvec1<short,1>::operator[]
PUBLIC	??0?$tvec1@F$00@glm@@QAE@XZ			; glm::tvec1<short,1>::tvec1<short,1>
PUBLIC	??0?$tvec1@F$00@glm@@QAE@ABU01@@Z		; glm::tvec1<short,1>::tvec1<short,1>
PUBLIC	??0?$tvec1@F$00@glm@@QAE@W4ctor@1@@Z		; glm::tvec1<short,1>::tvec1<short,1>
PUBLIC	??0?$tvec1@F$00@glm@@QAE@F@Z			; glm::tvec1<short,1>::tvec1<short,1>
PUBLIC	??4?$tvec1@F$00@glm@@QAEAAU01@ABU01@@Z		; glm::tvec1<short,1>::operator=
PUBLIC	??E?$tvec1@F$00@glm@@QAEAAU01@XZ		; glm::tvec1<short,1>::operator++
PUBLIC	??F?$tvec1@F$00@glm@@QAEAAU01@XZ		; glm::tvec1<short,1>::operator--
PUBLIC	??E?$tvec1@F$00@glm@@QAE?AU01@H@Z		; glm::tvec1<short,1>::operator++
PUBLIC	??F?$tvec1@F$00@glm@@QAE?AU01@H@Z		; glm::tvec1<short,1>::operator--
PUBLIC	?length@?$tvec1@H$00@glm@@SAHXZ			; glm::tvec1<int,1>::length
PUBLIC	??A?$tvec1@H$00@glm@@QAEAAHH@Z			; glm::tvec1<int,1>::operator[]
PUBLIC	??A?$tvec1@H$00@glm@@QBEABHH@Z			; glm::tvec1<int,1>::operator[]
PUBLIC	??0?$tvec1@H$00@glm@@QAE@XZ			; glm::tvec1<int,1>::tvec1<int,1>
PUBLIC	??0?$tvec1@H$00@glm@@QAE@ABU01@@Z		; glm::tvec1<int,1>::tvec1<int,1>
PUBLIC	??0?$tvec1@H$00@glm@@QAE@W4ctor@1@@Z		; glm::tvec1<int,1>::tvec1<int,1>
PUBLIC	??0?$tvec1@H$00@glm@@QAE@H@Z			; glm::tvec1<int,1>::tvec1<int,1>
PUBLIC	??4?$tvec1@H$00@glm@@QAEAAU01@ABU01@@Z		; glm::tvec1<int,1>::operator=
PUBLIC	??E?$tvec1@H$00@glm@@QAEAAU01@XZ		; glm::tvec1<int,1>::operator++
PUBLIC	??F?$tvec1@H$00@glm@@QAEAAU01@XZ		; glm::tvec1<int,1>::operator--
PUBLIC	??E?$tvec1@H$00@glm@@QAE?AU01@H@Z		; glm::tvec1<int,1>::operator++
PUBLIC	??F?$tvec1@H$00@glm@@QAE?AU01@H@Z		; glm::tvec1<int,1>::operator--
PUBLIC	?length@?$tvec1@_J$00@glm@@SAHXZ		; glm::tvec1<__int64,1>::length
PUBLIC	??A?$tvec1@_J$00@glm@@QAEAA_JH@Z		; glm::tvec1<__int64,1>::operator[]
PUBLIC	??A?$tvec1@_J$00@glm@@QBEAB_JH@Z		; glm::tvec1<__int64,1>::operator[]
PUBLIC	??0?$tvec1@_J$00@glm@@QAE@XZ			; glm::tvec1<__int64,1>::tvec1<__int64,1>
PUBLIC	??0?$tvec1@_J$00@glm@@QAE@ABU01@@Z		; glm::tvec1<__int64,1>::tvec1<__int64,1>
PUBLIC	??0?$tvec1@_J$00@glm@@QAE@W4ctor@1@@Z		; glm::tvec1<__int64,1>::tvec1<__int64,1>
PUBLIC	??0?$tvec1@_J$00@glm@@QAE@_J@Z			; glm::tvec1<__int64,1>::tvec1<__int64,1>
PUBLIC	??4?$tvec1@_J$00@glm@@QAEAAU01@ABU01@@Z		; glm::tvec1<__int64,1>::operator=
PUBLIC	??E?$tvec1@_J$00@glm@@QAEAAU01@XZ		; glm::tvec1<__int64,1>::operator++
PUBLIC	??F?$tvec1@_J$00@glm@@QAEAAU01@XZ		; glm::tvec1<__int64,1>::operator--
PUBLIC	??E?$tvec1@_J$00@glm@@QAE?AU01@H@Z		; glm::tvec1<__int64,1>::operator++
PUBLIC	??F?$tvec1@_J$00@glm@@QAE?AU01@H@Z		; glm::tvec1<__int64,1>::operator--
PUBLIC	?length@?$tvec1@M$00@glm@@SAHXZ			; glm::tvec1<float,1>::length
PUBLIC	??A?$tvec1@M$00@glm@@QAEAAMH@Z			; glm::tvec1<float,1>::operator[]
PUBLIC	??A?$tvec1@M$00@glm@@QBEABMH@Z			; glm::tvec1<float,1>::operator[]
PUBLIC	??0?$tvec1@M$00@glm@@QAE@XZ			; glm::tvec1<float,1>::tvec1<float,1>
PUBLIC	??0?$tvec1@M$00@glm@@QAE@ABU01@@Z		; glm::tvec1<float,1>::tvec1<float,1>
PUBLIC	??0?$tvec1@M$00@glm@@QAE@W4ctor@1@@Z		; glm::tvec1<float,1>::tvec1<float,1>
PUBLIC	??0?$tvec1@M$00@glm@@QAE@M@Z			; glm::tvec1<float,1>::tvec1<float,1>
PUBLIC	??4?$tvec1@M$00@glm@@QAEAAU01@ABU01@@Z		; glm::tvec1<float,1>::operator=
PUBLIC	??E?$tvec1@M$00@glm@@QAEAAU01@XZ		; glm::tvec1<float,1>::operator++
PUBLIC	??F?$tvec1@M$00@glm@@QAEAAU01@XZ		; glm::tvec1<float,1>::operator--
PUBLIC	??E?$tvec1@M$00@glm@@QAE?AU01@H@Z		; glm::tvec1<float,1>::operator++
PUBLIC	??F?$tvec1@M$00@glm@@QAE?AU01@H@Z		; glm::tvec1<float,1>::operator--
PUBLIC	?length@?$tvec1@N$00@glm@@SAHXZ			; glm::tvec1<double,1>::length
PUBLIC	??A?$tvec1@N$00@glm@@QAEAANH@Z			; glm::tvec1<double,1>::operator[]
PUBLIC	??A?$tvec1@N$00@glm@@QBEABNH@Z			; glm::tvec1<double,1>::operator[]
PUBLIC	??0?$tvec1@N$00@glm@@QAE@XZ			; glm::tvec1<double,1>::tvec1<double,1>
PUBLIC	??0?$tvec1@N$00@glm@@QAE@ABU01@@Z		; glm::tvec1<double,1>::tvec1<double,1>
PUBLIC	??0?$tvec1@N$00@glm@@QAE@W4ctor@1@@Z		; glm::tvec1<double,1>::tvec1<double,1>
PUBLIC	??0?$tvec1@N$00@glm@@QAE@N@Z			; glm::tvec1<double,1>::tvec1<double,1>
PUBLIC	??4?$tvec1@N$00@glm@@QAEAAU01@ABU01@@Z		; glm::tvec1<double,1>::operator=
PUBLIC	??E?$tvec1@N$00@glm@@QAEAAU01@XZ		; glm::tvec1<double,1>::operator++
PUBLIC	??F?$tvec1@N$00@glm@@QAEAAU01@XZ		; glm::tvec1<double,1>::operator--
PUBLIC	??E?$tvec1@N$00@glm@@QAE?AU01@H@Z		; glm::tvec1<double,1>::operator++
PUBLIC	??F?$tvec1@N$00@glm@@QAE?AU01@H@Z		; glm::tvec1<double,1>::operator--
PUBLIC	?length@?$tvec1@E$0A@@glm@@SAHXZ		; glm::tvec1<unsigned char,0>::length
PUBLIC	??A?$tvec1@E$0A@@glm@@QAEAAEH@Z			; glm::tvec1<unsigned char,0>::operator[]
PUBLIC	??A?$tvec1@E$0A@@glm@@QBEABEH@Z			; glm::tvec1<unsigned char,0>::operator[]
PUBLIC	??0?$tvec1@E$0A@@glm@@QAE@XZ			; glm::tvec1<unsigned char,0>::tvec1<unsigned char,0>
PUBLIC	??0?$tvec1@E$0A@@glm@@QAE@ABU01@@Z		; glm::tvec1<unsigned char,0>::tvec1<unsigned char,0>
PUBLIC	??0?$tvec1@E$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tvec1<unsigned char,0>::tvec1<unsigned char,0>
PUBLIC	??0?$tvec1@E$0A@@glm@@QAE@E@Z			; glm::tvec1<unsigned char,0>::tvec1<unsigned char,0>
PUBLIC	??4?$tvec1@E$0A@@glm@@QAEAAU01@ABU01@@Z		; glm::tvec1<unsigned char,0>::operator=
PUBLIC	??E?$tvec1@E$0A@@glm@@QAEAAU01@XZ		; glm::tvec1<unsigned char,0>::operator++
PUBLIC	??F?$tvec1@E$0A@@glm@@QAEAAU01@XZ		; glm::tvec1<unsigned char,0>::operator--
PUBLIC	??E?$tvec1@E$0A@@glm@@QAE?AU01@H@Z		; glm::tvec1<unsigned char,0>::operator++
PUBLIC	??F?$tvec1@E$0A@@glm@@QAE?AU01@H@Z		; glm::tvec1<unsigned char,0>::operator--
PUBLIC	?length@?$tvec1@G$0A@@glm@@SAHXZ		; glm::tvec1<unsigned short,0>::length
PUBLIC	??A?$tvec1@G$0A@@glm@@QAEAAGH@Z			; glm::tvec1<unsigned short,0>::operator[]
PUBLIC	??A?$tvec1@G$0A@@glm@@QBEABGH@Z			; glm::tvec1<unsigned short,0>::operator[]
PUBLIC	??0?$tvec1@G$0A@@glm@@QAE@XZ			; glm::tvec1<unsigned short,0>::tvec1<unsigned short,0>
PUBLIC	??0?$tvec1@G$0A@@glm@@QAE@ABU01@@Z		; glm::tvec1<unsigned short,0>::tvec1<unsigned short,0>
PUBLIC	??0?$tvec1@G$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tvec1<unsigned short,0>::tvec1<unsigned short,0>
PUBLIC	??0?$tvec1@G$0A@@glm@@QAE@G@Z			; glm::tvec1<unsigned short,0>::tvec1<unsigned short,0>
PUBLIC	??4?$tvec1@G$0A@@glm@@QAEAAU01@ABU01@@Z		; glm::tvec1<unsigned short,0>::operator=
PUBLIC	??E?$tvec1@G$0A@@glm@@QAEAAU01@XZ		; glm::tvec1<unsigned short,0>::operator++
PUBLIC	??F?$tvec1@G$0A@@glm@@QAEAAU01@XZ		; glm::tvec1<unsigned short,0>::operator--
PUBLIC	??E?$tvec1@G$0A@@glm@@QAE?AU01@H@Z		; glm::tvec1<unsigned short,0>::operator++
PUBLIC	??F?$tvec1@G$0A@@glm@@QAE?AU01@H@Z		; glm::tvec1<unsigned short,0>::operator--
PUBLIC	?length@?$tvec1@I$0A@@glm@@SAHXZ		; glm::tvec1<unsigned int,0>::length
PUBLIC	??A?$tvec1@I$0A@@glm@@QAEAAIH@Z			; glm::tvec1<unsigned int,0>::operator[]
PUBLIC	??A?$tvec1@I$0A@@glm@@QBEABIH@Z			; glm::tvec1<unsigned int,0>::operator[]
PUBLIC	??0?$tvec1@I$0A@@glm@@QAE@XZ			; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>
PUBLIC	??0?$tvec1@I$0A@@glm@@QAE@ABU01@@Z		; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>
PUBLIC	??0?$tvec1@I$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>
PUBLIC	??0?$tvec1@I$0A@@glm@@QAE@I@Z			; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>
PUBLIC	??4?$tvec1@I$0A@@glm@@QAEAAU01@ABU01@@Z		; glm::tvec1<unsigned int,0>::operator=
PUBLIC	??E?$tvec1@I$0A@@glm@@QAEAAU01@XZ		; glm::tvec1<unsigned int,0>::operator++
PUBLIC	??F?$tvec1@I$0A@@glm@@QAEAAU01@XZ		; glm::tvec1<unsigned int,0>::operator--
PUBLIC	??E?$tvec1@I$0A@@glm@@QAE?AU01@H@Z		; glm::tvec1<unsigned int,0>::operator++
PUBLIC	??F?$tvec1@I$0A@@glm@@QAE?AU01@H@Z		; glm::tvec1<unsigned int,0>::operator--
PUBLIC	?length@?$tvec1@_K$0A@@glm@@SAHXZ		; glm::tvec1<unsigned __int64,0>::length
PUBLIC	??A?$tvec1@_K$0A@@glm@@QAEAA_KH@Z		; glm::tvec1<unsigned __int64,0>::operator[]
PUBLIC	??A?$tvec1@_K$0A@@glm@@QBEAB_KH@Z		; glm::tvec1<unsigned __int64,0>::operator[]
PUBLIC	??0?$tvec1@_K$0A@@glm@@QAE@XZ			; glm::tvec1<unsigned __int64,0>::tvec1<unsigned __int64,0>
PUBLIC	??0?$tvec1@_K$0A@@glm@@QAE@ABU01@@Z		; glm::tvec1<unsigned __int64,0>::tvec1<unsigned __int64,0>
PUBLIC	??0?$tvec1@_K$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tvec1<unsigned __int64,0>::tvec1<unsigned __int64,0>
PUBLIC	??0?$tvec1@_K$0A@@glm@@QAE@_K@Z			; glm::tvec1<unsigned __int64,0>::tvec1<unsigned __int64,0>
PUBLIC	??4?$tvec1@_K$0A@@glm@@QAEAAU01@ABU01@@Z	; glm::tvec1<unsigned __int64,0>::operator=
PUBLIC	??E?$tvec1@_K$0A@@glm@@QAEAAU01@XZ		; glm::tvec1<unsigned __int64,0>::operator++
PUBLIC	??F?$tvec1@_K$0A@@glm@@QAEAAU01@XZ		; glm::tvec1<unsigned __int64,0>::operator--
PUBLIC	??E?$tvec1@_K$0A@@glm@@QAE?AU01@H@Z		; glm::tvec1<unsigned __int64,0>::operator++
PUBLIC	??F?$tvec1@_K$0A@@glm@@QAE?AU01@H@Z		; glm::tvec1<unsigned __int64,0>::operator--
PUBLIC	?length@?$tvec1@C$0A@@glm@@SAHXZ		; glm::tvec1<signed char,0>::length
PUBLIC	??A?$tvec1@C$0A@@glm@@QAEAACH@Z			; glm::tvec1<signed char,0>::operator[]
PUBLIC	??A?$tvec1@C$0A@@glm@@QBEABCH@Z			; glm::tvec1<signed char,0>::operator[]
PUBLIC	??0?$tvec1@C$0A@@glm@@QAE@XZ			; glm::tvec1<signed char,0>::tvec1<signed char,0>
PUBLIC	??0?$tvec1@C$0A@@glm@@QAE@ABU01@@Z		; glm::tvec1<signed char,0>::tvec1<signed char,0>
PUBLIC	??0?$tvec1@C$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tvec1<signed char,0>::tvec1<signed char,0>
PUBLIC	??0?$tvec1@C$0A@@glm@@QAE@C@Z			; glm::tvec1<signed char,0>::tvec1<signed char,0>
PUBLIC	??4?$tvec1@C$0A@@glm@@QAEAAU01@ABU01@@Z		; glm::tvec1<signed char,0>::operator=
PUBLIC	??E?$tvec1@C$0A@@glm@@QAEAAU01@XZ		; glm::tvec1<signed char,0>::operator++
PUBLIC	??F?$tvec1@C$0A@@glm@@QAEAAU01@XZ		; glm::tvec1<signed char,0>::operator--
PUBLIC	??E?$tvec1@C$0A@@glm@@QAE?AU01@H@Z		; glm::tvec1<signed char,0>::operator++
PUBLIC	??F?$tvec1@C$0A@@glm@@QAE?AU01@H@Z		; glm::tvec1<signed char,0>::operator--
PUBLIC	?length@?$tvec1@F$0A@@glm@@SAHXZ		; glm::tvec1<short,0>::length
PUBLIC	??A?$tvec1@F$0A@@glm@@QAEAAFH@Z			; glm::tvec1<short,0>::operator[]
PUBLIC	??A?$tvec1@F$0A@@glm@@QBEABFH@Z			; glm::tvec1<short,0>::operator[]
PUBLIC	??0?$tvec1@F$0A@@glm@@QAE@XZ			; glm::tvec1<short,0>::tvec1<short,0>
PUBLIC	??0?$tvec1@F$0A@@glm@@QAE@ABU01@@Z		; glm::tvec1<short,0>::tvec1<short,0>
PUBLIC	??0?$tvec1@F$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tvec1<short,0>::tvec1<short,0>
PUBLIC	??0?$tvec1@F$0A@@glm@@QAE@F@Z			; glm::tvec1<short,0>::tvec1<short,0>
PUBLIC	??4?$tvec1@F$0A@@glm@@QAEAAU01@ABU01@@Z		; glm::tvec1<short,0>::operator=
PUBLIC	??E?$tvec1@F$0A@@glm@@QAEAAU01@XZ		; glm::tvec1<short,0>::operator++
PUBLIC	??F?$tvec1@F$0A@@glm@@QAEAAU01@XZ		; glm::tvec1<short,0>::operator--
PUBLIC	??E?$tvec1@F$0A@@glm@@QAE?AU01@H@Z		; glm::tvec1<short,0>::operator++
PUBLIC	??F?$tvec1@F$0A@@glm@@QAE?AU01@H@Z		; glm::tvec1<short,0>::operator--
PUBLIC	?length@?$tvec1@H$0A@@glm@@SAHXZ		; glm::tvec1<int,0>::length
PUBLIC	??A?$tvec1@H$0A@@glm@@QAEAAHH@Z			; glm::tvec1<int,0>::operator[]
PUBLIC	??A?$tvec1@H$0A@@glm@@QBEABHH@Z			; glm::tvec1<int,0>::operator[]
PUBLIC	??0?$tvec1@H$0A@@glm@@QAE@XZ			; glm::tvec1<int,0>::tvec1<int,0>
PUBLIC	??0?$tvec1@H$0A@@glm@@QAE@ABU01@@Z		; glm::tvec1<int,0>::tvec1<int,0>
PUBLIC	??0?$tvec1@H$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tvec1<int,0>::tvec1<int,0>
PUBLIC	??0?$tvec1@H$0A@@glm@@QAE@H@Z			; glm::tvec1<int,0>::tvec1<int,0>
PUBLIC	??4?$tvec1@H$0A@@glm@@QAEAAU01@ABU01@@Z		; glm::tvec1<int,0>::operator=
PUBLIC	??E?$tvec1@H$0A@@glm@@QAEAAU01@XZ		; glm::tvec1<int,0>::operator++
PUBLIC	??F?$tvec1@H$0A@@glm@@QAEAAU01@XZ		; glm::tvec1<int,0>::operator--
PUBLIC	??E?$tvec1@H$0A@@glm@@QAE?AU01@H@Z		; glm::tvec1<int,0>::operator++
PUBLIC	??F?$tvec1@H$0A@@glm@@QAE?AU01@H@Z		; glm::tvec1<int,0>::operator--
PUBLIC	?length@?$tvec1@_J$0A@@glm@@SAHXZ		; glm::tvec1<__int64,0>::length
PUBLIC	??A?$tvec1@_J$0A@@glm@@QAEAA_JH@Z		; glm::tvec1<__int64,0>::operator[]
PUBLIC	??A?$tvec1@_J$0A@@glm@@QBEAB_JH@Z		; glm::tvec1<__int64,0>::operator[]
PUBLIC	??0?$tvec1@_J$0A@@glm@@QAE@XZ			; glm::tvec1<__int64,0>::tvec1<__int64,0>
PUBLIC	??0?$tvec1@_J$0A@@glm@@QAE@ABU01@@Z		; glm::tvec1<__int64,0>::tvec1<__int64,0>
PUBLIC	??0?$tvec1@_J$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tvec1<__int64,0>::tvec1<__int64,0>
PUBLIC	??0?$tvec1@_J$0A@@glm@@QAE@_J@Z			; glm::tvec1<__int64,0>::tvec1<__int64,0>
PUBLIC	??4?$tvec1@_J$0A@@glm@@QAEAAU01@ABU01@@Z	; glm::tvec1<__int64,0>::operator=
PUBLIC	??E?$tvec1@_J$0A@@glm@@QAEAAU01@XZ		; glm::tvec1<__int64,0>::operator++
PUBLIC	??F?$tvec1@_J$0A@@glm@@QAEAAU01@XZ		; glm::tvec1<__int64,0>::operator--
PUBLIC	??E?$tvec1@_J$0A@@glm@@QAE?AU01@H@Z		; glm::tvec1<__int64,0>::operator++
PUBLIC	??F?$tvec1@_J$0A@@glm@@QAE?AU01@H@Z		; glm::tvec1<__int64,0>::operator--
PUBLIC	?length@?$tvec1@M$0A@@glm@@SAHXZ		; glm::tvec1<float,0>::length
PUBLIC	??A?$tvec1@M$0A@@glm@@QAEAAMH@Z			; glm::tvec1<float,0>::operator[]
PUBLIC	??A?$tvec1@M$0A@@glm@@QBEABMH@Z			; glm::tvec1<float,0>::operator[]
PUBLIC	??0?$tvec1@M$0A@@glm@@QAE@XZ			; glm::tvec1<float,0>::tvec1<float,0>
PUBLIC	??0?$tvec1@M$0A@@glm@@QAE@ABU01@@Z		; glm::tvec1<float,0>::tvec1<float,0>
PUBLIC	??0?$tvec1@M$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tvec1<float,0>::tvec1<float,0>
PUBLIC	??0?$tvec1@M$0A@@glm@@QAE@M@Z			; glm::tvec1<float,0>::tvec1<float,0>
PUBLIC	??4?$tvec1@M$0A@@glm@@QAEAAU01@ABU01@@Z		; glm::tvec1<float,0>::operator=
PUBLIC	??E?$tvec1@M$0A@@glm@@QAEAAU01@XZ		; glm::tvec1<float,0>::operator++
PUBLIC	??F?$tvec1@M$0A@@glm@@QAEAAU01@XZ		; glm::tvec1<float,0>::operator--
PUBLIC	??E?$tvec1@M$0A@@glm@@QAE?AU01@H@Z		; glm::tvec1<float,0>::operator++
PUBLIC	??F?$tvec1@M$0A@@glm@@QAE?AU01@H@Z		; glm::tvec1<float,0>::operator--
PUBLIC	?length@?$tvec1@N$0A@@glm@@SAHXZ		; glm::tvec1<double,0>::length
PUBLIC	??A?$tvec1@N$0A@@glm@@QAEAANH@Z			; glm::tvec1<double,0>::operator[]
PUBLIC	??A?$tvec1@N$0A@@glm@@QBEABNH@Z			; glm::tvec1<double,0>::operator[]
PUBLIC	??0?$tvec1@N$0A@@glm@@QAE@XZ			; glm::tvec1<double,0>::tvec1<double,0>
PUBLIC	??0?$tvec1@N$0A@@glm@@QAE@ABU01@@Z		; glm::tvec1<double,0>::tvec1<double,0>
PUBLIC	??0?$tvec1@N$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tvec1<double,0>::tvec1<double,0>
PUBLIC	??0?$tvec1@N$0A@@glm@@QAE@N@Z			; glm::tvec1<double,0>::tvec1<double,0>
PUBLIC	??4?$tvec1@N$0A@@glm@@QAEAAU01@ABU01@@Z		; glm::tvec1<double,0>::operator=
PUBLIC	??E?$tvec1@N$0A@@glm@@QAEAAU01@XZ		; glm::tvec1<double,0>::operator++
PUBLIC	??F?$tvec1@N$0A@@glm@@QAEAAU01@XZ		; glm::tvec1<double,0>::operator--
PUBLIC	??E?$tvec1@N$0A@@glm@@QAE?AU01@H@Z		; glm::tvec1<double,0>::operator++
PUBLIC	??F?$tvec1@N$0A@@glm@@QAE?AU01@H@Z		; glm::tvec1<double,0>::operator--
PUBLIC	?length@?$tvec2@E$01@glm@@SAHXZ			; glm::tvec2<unsigned char,2>::length
PUBLIC	??A?$tvec2@E$01@glm@@QAEAAEH@Z			; glm::tvec2<unsigned char,2>::operator[]
PUBLIC	??A?$tvec2@E$01@glm@@QBEABEH@Z			; glm::tvec2<unsigned char,2>::operator[]
PUBLIC	??0?$tvec2@E$01@glm@@QAE@XZ			; glm::tvec2<unsigned char,2>::tvec2<unsigned char,2>
PUBLIC	??0?$tvec2@E$01@glm@@QAE@ABU01@@Z		; glm::tvec2<unsigned char,2>::tvec2<unsigned char,2>
PUBLIC	??0?$tvec2@E$01@glm@@QAE@W4ctor@1@@Z		; glm::tvec2<unsigned char,2>::tvec2<unsigned char,2>
PUBLIC	??0?$tvec2@E$01@glm@@QAE@E@Z			; glm::tvec2<unsigned char,2>::tvec2<unsigned char,2>
PUBLIC	??0?$tvec2@E$01@glm@@QAE@EE@Z			; glm::tvec2<unsigned char,2>::tvec2<unsigned char,2>
PUBLIC	??4?$tvec2@E$01@glm@@QAEAAU01@ABU01@@Z		; glm::tvec2<unsigned char,2>::operator=
PUBLIC	??E?$tvec2@E$01@glm@@QAEAAU01@XZ		; glm::tvec2<unsigned char,2>::operator++
PUBLIC	??F?$tvec2@E$01@glm@@QAEAAU01@XZ		; glm::tvec2<unsigned char,2>::operator--
PUBLIC	??E?$tvec2@E$01@glm@@QAE?AU01@H@Z		; glm::tvec2<unsigned char,2>::operator++
PUBLIC	??F?$tvec2@E$01@glm@@QAE?AU01@H@Z		; glm::tvec2<unsigned char,2>::operator--
PUBLIC	?length@?$tvec2@G$01@glm@@SAHXZ			; glm::tvec2<unsigned short,2>::length
PUBLIC	??A?$tvec2@G$01@glm@@QAEAAGH@Z			; glm::tvec2<unsigned short,2>::operator[]
PUBLIC	??A?$tvec2@G$01@glm@@QBEABGH@Z			; glm::tvec2<unsigned short,2>::operator[]
PUBLIC	??0?$tvec2@G$01@glm@@QAE@XZ			; glm::tvec2<unsigned short,2>::tvec2<unsigned short,2>
PUBLIC	??0?$tvec2@G$01@glm@@QAE@ABU01@@Z		; glm::tvec2<unsigned short,2>::tvec2<unsigned short,2>
PUBLIC	??0?$tvec2@G$01@glm@@QAE@W4ctor@1@@Z		; glm::tvec2<unsigned short,2>::tvec2<unsigned short,2>
PUBLIC	??0?$tvec2@G$01@glm@@QAE@G@Z			; glm::tvec2<unsigned short,2>::tvec2<unsigned short,2>
PUBLIC	??0?$tvec2@G$01@glm@@QAE@GG@Z			; glm::tvec2<unsigned short,2>::tvec2<unsigned short,2>
PUBLIC	??4?$tvec2@G$01@glm@@QAEAAU01@ABU01@@Z		; glm::tvec2<unsigned short,2>::operator=
PUBLIC	??E?$tvec2@G$01@glm@@QAEAAU01@XZ		; glm::tvec2<unsigned short,2>::operator++
PUBLIC	??F?$tvec2@G$01@glm@@QAEAAU01@XZ		; glm::tvec2<unsigned short,2>::operator--
PUBLIC	??E?$tvec2@G$01@glm@@QAE?AU01@H@Z		; glm::tvec2<unsigned short,2>::operator++
PUBLIC	??F?$tvec2@G$01@glm@@QAE?AU01@H@Z		; glm::tvec2<unsigned short,2>::operator--
PUBLIC	?length@?$tvec2@I$01@glm@@SAHXZ			; glm::tvec2<unsigned int,2>::length
PUBLIC	??A?$tvec2@I$01@glm@@QAEAAIH@Z			; glm::tvec2<unsigned int,2>::operator[]
PUBLIC	??A?$tvec2@I$01@glm@@QBEABIH@Z			; glm::tvec2<unsigned int,2>::operator[]
PUBLIC	??0?$tvec2@I$01@glm@@QAE@XZ			; glm::tvec2<unsigned int,2>::tvec2<unsigned int,2>
PUBLIC	??0?$tvec2@I$01@glm@@QAE@ABU01@@Z		; glm::tvec2<unsigned int,2>::tvec2<unsigned int,2>
PUBLIC	??0?$tvec2@I$01@glm@@QAE@W4ctor@1@@Z		; glm::tvec2<unsigned int,2>::tvec2<unsigned int,2>
PUBLIC	??0?$tvec2@I$01@glm@@QAE@I@Z			; glm::tvec2<unsigned int,2>::tvec2<unsigned int,2>
PUBLIC	??0?$tvec2@I$01@glm@@QAE@II@Z			; glm::tvec2<unsigned int,2>::tvec2<unsigned int,2>
PUBLIC	??4?$tvec2@I$01@glm@@QAEAAU01@ABU01@@Z		; glm::tvec2<unsigned int,2>::operator=
PUBLIC	??E?$tvec2@I$01@glm@@QAEAAU01@XZ		; glm::tvec2<unsigned int,2>::operator++
PUBLIC	??F?$tvec2@I$01@glm@@QAEAAU01@XZ		; glm::tvec2<unsigned int,2>::operator--
PUBLIC	??E?$tvec2@I$01@glm@@QAE?AU01@H@Z		; glm::tvec2<unsigned int,2>::operator++
PUBLIC	??F?$tvec2@I$01@glm@@QAE?AU01@H@Z		; glm::tvec2<unsigned int,2>::operator--
PUBLIC	?length@?$tvec2@_K$01@glm@@SAHXZ		; glm::tvec2<unsigned __int64,2>::length
PUBLIC	??A?$tvec2@_K$01@glm@@QAEAA_KH@Z		; glm::tvec2<unsigned __int64,2>::operator[]
PUBLIC	??A?$tvec2@_K$01@glm@@QBEAB_KH@Z		; glm::tvec2<unsigned __int64,2>::operator[]
PUBLIC	??0?$tvec2@_K$01@glm@@QAE@XZ			; glm::tvec2<unsigned __int64,2>::tvec2<unsigned __int64,2>
PUBLIC	??0?$tvec2@_K$01@glm@@QAE@ABU01@@Z		; glm::tvec2<unsigned __int64,2>::tvec2<unsigned __int64,2>
PUBLIC	??0?$tvec2@_K$01@glm@@QAE@W4ctor@1@@Z		; glm::tvec2<unsigned __int64,2>::tvec2<unsigned __int64,2>
PUBLIC	??0?$tvec2@_K$01@glm@@QAE@_K@Z			; glm::tvec2<unsigned __int64,2>::tvec2<unsigned __int64,2>
PUBLIC	??0?$tvec2@_K$01@glm@@QAE@_K0@Z			; glm::tvec2<unsigned __int64,2>::tvec2<unsigned __int64,2>
PUBLIC	??4?$tvec2@_K$01@glm@@QAEAAU01@ABU01@@Z		; glm::tvec2<unsigned __int64,2>::operator=
PUBLIC	??E?$tvec2@_K$01@glm@@QAEAAU01@XZ		; glm::tvec2<unsigned __int64,2>::operator++
PUBLIC	??F?$tvec2@_K$01@glm@@QAEAAU01@XZ		; glm::tvec2<unsigned __int64,2>::operator--
PUBLIC	??E?$tvec2@_K$01@glm@@QAE?AU01@H@Z		; glm::tvec2<unsigned __int64,2>::operator++
PUBLIC	??F?$tvec2@_K$01@glm@@QAE?AU01@H@Z		; glm::tvec2<unsigned __int64,2>::operator--
PUBLIC	?length@?$tvec2@C$01@glm@@SAHXZ			; glm::tvec2<signed char,2>::length
PUBLIC	??A?$tvec2@C$01@glm@@QAEAACH@Z			; glm::tvec2<signed char,2>::operator[]
PUBLIC	??A?$tvec2@C$01@glm@@QBEABCH@Z			; glm::tvec2<signed char,2>::operator[]
PUBLIC	??0?$tvec2@C$01@glm@@QAE@XZ			; glm::tvec2<signed char,2>::tvec2<signed char,2>
PUBLIC	??0?$tvec2@C$01@glm@@QAE@ABU01@@Z		; glm::tvec2<signed char,2>::tvec2<signed char,2>
PUBLIC	??0?$tvec2@C$01@glm@@QAE@W4ctor@1@@Z		; glm::tvec2<signed char,2>::tvec2<signed char,2>
PUBLIC	??0?$tvec2@C$01@glm@@QAE@C@Z			; glm::tvec2<signed char,2>::tvec2<signed char,2>
PUBLIC	??0?$tvec2@C$01@glm@@QAE@CC@Z			; glm::tvec2<signed char,2>::tvec2<signed char,2>
PUBLIC	??4?$tvec2@C$01@glm@@QAEAAU01@ABU01@@Z		; glm::tvec2<signed char,2>::operator=
PUBLIC	??E?$tvec2@C$01@glm@@QAEAAU01@XZ		; glm::tvec2<signed char,2>::operator++
PUBLIC	??F?$tvec2@C$01@glm@@QAEAAU01@XZ		; glm::tvec2<signed char,2>::operator--
PUBLIC	??E?$tvec2@C$01@glm@@QAE?AU01@H@Z		; glm::tvec2<signed char,2>::operator++
PUBLIC	??F?$tvec2@C$01@glm@@QAE?AU01@H@Z		; glm::tvec2<signed char,2>::operator--
PUBLIC	?length@?$tvec2@F$01@glm@@SAHXZ			; glm::tvec2<short,2>::length
PUBLIC	??A?$tvec2@F$01@glm@@QAEAAFH@Z			; glm::tvec2<short,2>::operator[]
PUBLIC	??A?$tvec2@F$01@glm@@QBEABFH@Z			; glm::tvec2<short,2>::operator[]
PUBLIC	??0?$tvec2@F$01@glm@@QAE@XZ			; glm::tvec2<short,2>::tvec2<short,2>
PUBLIC	??0?$tvec2@F$01@glm@@QAE@ABU01@@Z		; glm::tvec2<short,2>::tvec2<short,2>
PUBLIC	??0?$tvec2@F$01@glm@@QAE@W4ctor@1@@Z		; glm::tvec2<short,2>::tvec2<short,2>
PUBLIC	??0?$tvec2@F$01@glm@@QAE@F@Z			; glm::tvec2<short,2>::tvec2<short,2>
PUBLIC	??0?$tvec2@F$01@glm@@QAE@FF@Z			; glm::tvec2<short,2>::tvec2<short,2>
PUBLIC	??4?$tvec2@F$01@glm@@QAEAAU01@ABU01@@Z		; glm::tvec2<short,2>::operator=
PUBLIC	??E?$tvec2@F$01@glm@@QAEAAU01@XZ		; glm::tvec2<short,2>::operator++
PUBLIC	??F?$tvec2@F$01@glm@@QAEAAU01@XZ		; glm::tvec2<short,2>::operator--
PUBLIC	??E?$tvec2@F$01@glm@@QAE?AU01@H@Z		; glm::tvec2<short,2>::operator++
PUBLIC	??F?$tvec2@F$01@glm@@QAE?AU01@H@Z		; glm::tvec2<short,2>::operator--
PUBLIC	?length@?$tvec2@H$01@glm@@SAHXZ			; glm::tvec2<int,2>::length
PUBLIC	??A?$tvec2@H$01@glm@@QAEAAHH@Z			; glm::tvec2<int,2>::operator[]
PUBLIC	??A?$tvec2@H$01@glm@@QBEABHH@Z			; glm::tvec2<int,2>::operator[]
PUBLIC	??0?$tvec2@H$01@glm@@QAE@XZ			; glm::tvec2<int,2>::tvec2<int,2>
PUBLIC	??0?$tvec2@H$01@glm@@QAE@ABU01@@Z		; glm::tvec2<int,2>::tvec2<int,2>
PUBLIC	??0?$tvec2@H$01@glm@@QAE@W4ctor@1@@Z		; glm::tvec2<int,2>::tvec2<int,2>
PUBLIC	??0?$tvec2@H$01@glm@@QAE@H@Z			; glm::tvec2<int,2>::tvec2<int,2>
PUBLIC	??0?$tvec2@H$01@glm@@QAE@HH@Z			; glm::tvec2<int,2>::tvec2<int,2>
PUBLIC	??4?$tvec2@H$01@glm@@QAEAAU01@ABU01@@Z		; glm::tvec2<int,2>::operator=
PUBLIC	??E?$tvec2@H$01@glm@@QAEAAU01@XZ		; glm::tvec2<int,2>::operator++
PUBLIC	??F?$tvec2@H$01@glm@@QAEAAU01@XZ		; glm::tvec2<int,2>::operator--
PUBLIC	??E?$tvec2@H$01@glm@@QAE?AU01@H@Z		; glm::tvec2<int,2>::operator++
PUBLIC	??F?$tvec2@H$01@glm@@QAE?AU01@H@Z		; glm::tvec2<int,2>::operator--
PUBLIC	?length@?$tvec2@_J$01@glm@@SAHXZ		; glm::tvec2<__int64,2>::length
PUBLIC	??A?$tvec2@_J$01@glm@@QAEAA_JH@Z		; glm::tvec2<__int64,2>::operator[]
PUBLIC	??A?$tvec2@_J$01@glm@@QBEAB_JH@Z		; glm::tvec2<__int64,2>::operator[]
PUBLIC	??0?$tvec2@_J$01@glm@@QAE@XZ			; glm::tvec2<__int64,2>::tvec2<__int64,2>
PUBLIC	??0?$tvec2@_J$01@glm@@QAE@ABU01@@Z		; glm::tvec2<__int64,2>::tvec2<__int64,2>
PUBLIC	??0?$tvec2@_J$01@glm@@QAE@W4ctor@1@@Z		; glm::tvec2<__int64,2>::tvec2<__int64,2>
PUBLIC	??0?$tvec2@_J$01@glm@@QAE@_J@Z			; glm::tvec2<__int64,2>::tvec2<__int64,2>
PUBLIC	??0?$tvec2@_J$01@glm@@QAE@_J0@Z			; glm::tvec2<__int64,2>::tvec2<__int64,2>
PUBLIC	??4?$tvec2@_J$01@glm@@QAEAAU01@ABU01@@Z		; glm::tvec2<__int64,2>::operator=
PUBLIC	??E?$tvec2@_J$01@glm@@QAEAAU01@XZ		; glm::tvec2<__int64,2>::operator++
PUBLIC	??F?$tvec2@_J$01@glm@@QAEAAU01@XZ		; glm::tvec2<__int64,2>::operator--
PUBLIC	??E?$tvec2@_J$01@glm@@QAE?AU01@H@Z		; glm::tvec2<__int64,2>::operator++
PUBLIC	??F?$tvec2@_J$01@glm@@QAE?AU01@H@Z		; glm::tvec2<__int64,2>::operator--
PUBLIC	?length@?$tvec2@M$01@glm@@SAHXZ			; glm::tvec2<float,2>::length
PUBLIC	??A?$tvec2@M$01@glm@@QAEAAMH@Z			; glm::tvec2<float,2>::operator[]
PUBLIC	??A?$tvec2@M$01@glm@@QBEABMH@Z			; glm::tvec2<float,2>::operator[]
PUBLIC	??0?$tvec2@M$01@glm@@QAE@XZ			; glm::tvec2<float,2>::tvec2<float,2>
PUBLIC	??0?$tvec2@M$01@glm@@QAE@ABU01@@Z		; glm::tvec2<float,2>::tvec2<float,2>
PUBLIC	??0?$tvec2@M$01@glm@@QAE@W4ctor@1@@Z		; glm::tvec2<float,2>::tvec2<float,2>
PUBLIC	??0?$tvec2@M$01@glm@@QAE@M@Z			; glm::tvec2<float,2>::tvec2<float,2>
PUBLIC	??0?$tvec2@M$01@glm@@QAE@MM@Z			; glm::tvec2<float,2>::tvec2<float,2>
PUBLIC	??4?$tvec2@M$01@glm@@QAEAAU01@ABU01@@Z		; glm::tvec2<float,2>::operator=
PUBLIC	??E?$tvec2@M$01@glm@@QAEAAU01@XZ		; glm::tvec2<float,2>::operator++
PUBLIC	??F?$tvec2@M$01@glm@@QAEAAU01@XZ		; glm::tvec2<float,2>::operator--
PUBLIC	??E?$tvec2@M$01@glm@@QAE?AU01@H@Z		; glm::tvec2<float,2>::operator++
PUBLIC	??F?$tvec2@M$01@glm@@QAE?AU01@H@Z		; glm::tvec2<float,2>::operator--
PUBLIC	?length@?$tvec2@N$01@glm@@SAHXZ			; glm::tvec2<double,2>::length
PUBLIC	??A?$tvec2@N$01@glm@@QAEAANH@Z			; glm::tvec2<double,2>::operator[]
PUBLIC	??A?$tvec2@N$01@glm@@QBEABNH@Z			; glm::tvec2<double,2>::operator[]
PUBLIC	??0?$tvec2@N$01@glm@@QAE@XZ			; glm::tvec2<double,2>::tvec2<double,2>
PUBLIC	??0?$tvec2@N$01@glm@@QAE@ABU01@@Z		; glm::tvec2<double,2>::tvec2<double,2>
PUBLIC	??0?$tvec2@N$01@glm@@QAE@W4ctor@1@@Z		; glm::tvec2<double,2>::tvec2<double,2>
PUBLIC	??0?$tvec2@N$01@glm@@QAE@N@Z			; glm::tvec2<double,2>::tvec2<double,2>
PUBLIC	??0?$tvec2@N$01@glm@@QAE@NN@Z			; glm::tvec2<double,2>::tvec2<double,2>
PUBLIC	??4?$tvec2@N$01@glm@@QAEAAU01@ABU01@@Z		; glm::tvec2<double,2>::operator=
PUBLIC	??E?$tvec2@N$01@glm@@QAEAAU01@XZ		; glm::tvec2<double,2>::operator++
PUBLIC	??F?$tvec2@N$01@glm@@QAEAAU01@XZ		; glm::tvec2<double,2>::operator--
PUBLIC	??E?$tvec2@N$01@glm@@QAE?AU01@H@Z		; glm::tvec2<double,2>::operator++
PUBLIC	??F?$tvec2@N$01@glm@@QAE?AU01@H@Z		; glm::tvec2<double,2>::operator--
PUBLIC	?length@?$tvec2@E$00@glm@@SAHXZ			; glm::tvec2<unsigned char,1>::length
PUBLIC	??A?$tvec2@E$00@glm@@QAEAAEH@Z			; glm::tvec2<unsigned char,1>::operator[]
PUBLIC	??A?$tvec2@E$00@glm@@QBEABEH@Z			; glm::tvec2<unsigned char,1>::operator[]
PUBLIC	??0?$tvec2@E$00@glm@@QAE@XZ			; glm::tvec2<unsigned char,1>::tvec2<unsigned char,1>
PUBLIC	??0?$tvec2@E$00@glm@@QAE@ABU01@@Z		; glm::tvec2<unsigned char,1>::tvec2<unsigned char,1>
PUBLIC	??0?$tvec2@E$00@glm@@QAE@W4ctor@1@@Z		; glm::tvec2<unsigned char,1>::tvec2<unsigned char,1>
PUBLIC	??0?$tvec2@E$00@glm@@QAE@E@Z			; glm::tvec2<unsigned char,1>::tvec2<unsigned char,1>
PUBLIC	??0?$tvec2@E$00@glm@@QAE@EE@Z			; glm::tvec2<unsigned char,1>::tvec2<unsigned char,1>
PUBLIC	??4?$tvec2@E$00@glm@@QAEAAU01@ABU01@@Z		; glm::tvec2<unsigned char,1>::operator=
PUBLIC	??E?$tvec2@E$00@glm@@QAEAAU01@XZ		; glm::tvec2<unsigned char,1>::operator++
PUBLIC	??F?$tvec2@E$00@glm@@QAEAAU01@XZ		; glm::tvec2<unsigned char,1>::operator--
PUBLIC	??E?$tvec2@E$00@glm@@QAE?AU01@H@Z		; glm::tvec2<unsigned char,1>::operator++
PUBLIC	??F?$tvec2@E$00@glm@@QAE?AU01@H@Z		; glm::tvec2<unsigned char,1>::operator--
PUBLIC	?length@?$tvec2@G$00@glm@@SAHXZ			; glm::tvec2<unsigned short,1>::length
PUBLIC	??A?$tvec2@G$00@glm@@QAEAAGH@Z			; glm::tvec2<unsigned short,1>::operator[]
PUBLIC	??A?$tvec2@G$00@glm@@QBEABGH@Z			; glm::tvec2<unsigned short,1>::operator[]
PUBLIC	??0?$tvec2@G$00@glm@@QAE@XZ			; glm::tvec2<unsigned short,1>::tvec2<unsigned short,1>
PUBLIC	??0?$tvec2@G$00@glm@@QAE@ABU01@@Z		; glm::tvec2<unsigned short,1>::tvec2<unsigned short,1>
PUBLIC	??0?$tvec2@G$00@glm@@QAE@W4ctor@1@@Z		; glm::tvec2<unsigned short,1>::tvec2<unsigned short,1>
PUBLIC	??0?$tvec2@G$00@glm@@QAE@G@Z			; glm::tvec2<unsigned short,1>::tvec2<unsigned short,1>
PUBLIC	??0?$tvec2@G$00@glm@@QAE@GG@Z			; glm::tvec2<unsigned short,1>::tvec2<unsigned short,1>
PUBLIC	??4?$tvec2@G$00@glm@@QAEAAU01@ABU01@@Z		; glm::tvec2<unsigned short,1>::operator=
PUBLIC	??E?$tvec2@G$00@glm@@QAEAAU01@XZ		; glm::tvec2<unsigned short,1>::operator++
PUBLIC	??F?$tvec2@G$00@glm@@QAEAAU01@XZ		; glm::tvec2<unsigned short,1>::operator--
PUBLIC	??E?$tvec2@G$00@glm@@QAE?AU01@H@Z		; glm::tvec2<unsigned short,1>::operator++
PUBLIC	??F?$tvec2@G$00@glm@@QAE?AU01@H@Z		; glm::tvec2<unsigned short,1>::operator--
PUBLIC	?length@?$tvec2@I$00@glm@@SAHXZ			; glm::tvec2<unsigned int,1>::length
PUBLIC	??A?$tvec2@I$00@glm@@QAEAAIH@Z			; glm::tvec2<unsigned int,1>::operator[]
PUBLIC	??A?$tvec2@I$00@glm@@QBEABIH@Z			; glm::tvec2<unsigned int,1>::operator[]
PUBLIC	??0?$tvec2@I$00@glm@@QAE@XZ			; glm::tvec2<unsigned int,1>::tvec2<unsigned int,1>
PUBLIC	??0?$tvec2@I$00@glm@@QAE@ABU01@@Z		; glm::tvec2<unsigned int,1>::tvec2<unsigned int,1>
PUBLIC	??0?$tvec2@I$00@glm@@QAE@W4ctor@1@@Z		; glm::tvec2<unsigned int,1>::tvec2<unsigned int,1>
PUBLIC	??0?$tvec2@I$00@glm@@QAE@I@Z			; glm::tvec2<unsigned int,1>::tvec2<unsigned int,1>
PUBLIC	??0?$tvec2@I$00@glm@@QAE@II@Z			; glm::tvec2<unsigned int,1>::tvec2<unsigned int,1>
PUBLIC	??4?$tvec2@I$00@glm@@QAEAAU01@ABU01@@Z		; glm::tvec2<unsigned int,1>::operator=
PUBLIC	??E?$tvec2@I$00@glm@@QAEAAU01@XZ		; glm::tvec2<unsigned int,1>::operator++
PUBLIC	??F?$tvec2@I$00@glm@@QAEAAU01@XZ		; glm::tvec2<unsigned int,1>::operator--
PUBLIC	??E?$tvec2@I$00@glm@@QAE?AU01@H@Z		; glm::tvec2<unsigned int,1>::operator++
PUBLIC	??F?$tvec2@I$00@glm@@QAE?AU01@H@Z		; glm::tvec2<unsigned int,1>::operator--
PUBLIC	?length@?$tvec2@_K$00@glm@@SAHXZ		; glm::tvec2<unsigned __int64,1>::length
PUBLIC	??A?$tvec2@_K$00@glm@@QAEAA_KH@Z		; glm::tvec2<unsigned __int64,1>::operator[]
PUBLIC	??A?$tvec2@_K$00@glm@@QBEAB_KH@Z		; glm::tvec2<unsigned __int64,1>::operator[]
PUBLIC	??0?$tvec2@_K$00@glm@@QAE@XZ			; glm::tvec2<unsigned __int64,1>::tvec2<unsigned __int64,1>
PUBLIC	??0?$tvec2@_K$00@glm@@QAE@ABU01@@Z		; glm::tvec2<unsigned __int64,1>::tvec2<unsigned __int64,1>
PUBLIC	??0?$tvec2@_K$00@glm@@QAE@W4ctor@1@@Z		; glm::tvec2<unsigned __int64,1>::tvec2<unsigned __int64,1>
PUBLIC	??0?$tvec2@_K$00@glm@@QAE@_K@Z			; glm::tvec2<unsigned __int64,1>::tvec2<unsigned __int64,1>
PUBLIC	??0?$tvec2@_K$00@glm@@QAE@_K0@Z			; glm::tvec2<unsigned __int64,1>::tvec2<unsigned __int64,1>
PUBLIC	??4?$tvec2@_K$00@glm@@QAEAAU01@ABU01@@Z		; glm::tvec2<unsigned __int64,1>::operator=
PUBLIC	??E?$tvec2@_K$00@glm@@QAEAAU01@XZ		; glm::tvec2<unsigned __int64,1>::operator++
PUBLIC	??F?$tvec2@_K$00@glm@@QAEAAU01@XZ		; glm::tvec2<unsigned __int64,1>::operator--
PUBLIC	??E?$tvec2@_K$00@glm@@QAE?AU01@H@Z		; glm::tvec2<unsigned __int64,1>::operator++
PUBLIC	??F?$tvec2@_K$00@glm@@QAE?AU01@H@Z		; glm::tvec2<unsigned __int64,1>::operator--
PUBLIC	?length@?$tvec2@C$00@glm@@SAHXZ			; glm::tvec2<signed char,1>::length
PUBLIC	??A?$tvec2@C$00@glm@@QAEAACH@Z			; glm::tvec2<signed char,1>::operator[]
PUBLIC	??A?$tvec2@C$00@glm@@QBEABCH@Z			; glm::tvec2<signed char,1>::operator[]
PUBLIC	??0?$tvec2@C$00@glm@@QAE@XZ			; glm::tvec2<signed char,1>::tvec2<signed char,1>
PUBLIC	??0?$tvec2@C$00@glm@@QAE@ABU01@@Z		; glm::tvec2<signed char,1>::tvec2<signed char,1>
PUBLIC	??0?$tvec2@C$00@glm@@QAE@W4ctor@1@@Z		; glm::tvec2<signed char,1>::tvec2<signed char,1>
PUBLIC	??0?$tvec2@C$00@glm@@QAE@C@Z			; glm::tvec2<signed char,1>::tvec2<signed char,1>
PUBLIC	??0?$tvec2@C$00@glm@@QAE@CC@Z			; glm::tvec2<signed char,1>::tvec2<signed char,1>
PUBLIC	??4?$tvec2@C$00@glm@@QAEAAU01@ABU01@@Z		; glm::tvec2<signed char,1>::operator=
PUBLIC	??E?$tvec2@C$00@glm@@QAEAAU01@XZ		; glm::tvec2<signed char,1>::operator++
PUBLIC	??F?$tvec2@C$00@glm@@QAEAAU01@XZ		; glm::tvec2<signed char,1>::operator--
PUBLIC	??E?$tvec2@C$00@glm@@QAE?AU01@H@Z		; glm::tvec2<signed char,1>::operator++
PUBLIC	??F?$tvec2@C$00@glm@@QAE?AU01@H@Z		; glm::tvec2<signed char,1>::operator--
PUBLIC	?length@?$tvec2@F$00@glm@@SAHXZ			; glm::tvec2<short,1>::length
PUBLIC	??A?$tvec2@F$00@glm@@QAEAAFH@Z			; glm::tvec2<short,1>::operator[]
PUBLIC	??A?$tvec2@F$00@glm@@QBEABFH@Z			; glm::tvec2<short,1>::operator[]
PUBLIC	??0?$tvec2@F$00@glm@@QAE@XZ			; glm::tvec2<short,1>::tvec2<short,1>
PUBLIC	??0?$tvec2@F$00@glm@@QAE@ABU01@@Z		; glm::tvec2<short,1>::tvec2<short,1>
PUBLIC	??0?$tvec2@F$00@glm@@QAE@W4ctor@1@@Z		; glm::tvec2<short,1>::tvec2<short,1>
PUBLIC	??0?$tvec2@F$00@glm@@QAE@F@Z			; glm::tvec2<short,1>::tvec2<short,1>
PUBLIC	??0?$tvec2@F$00@glm@@QAE@FF@Z			; glm::tvec2<short,1>::tvec2<short,1>
PUBLIC	??4?$tvec2@F$00@glm@@QAEAAU01@ABU01@@Z		; glm::tvec2<short,1>::operator=
PUBLIC	??E?$tvec2@F$00@glm@@QAEAAU01@XZ		; glm::tvec2<short,1>::operator++
PUBLIC	??F?$tvec2@F$00@glm@@QAEAAU01@XZ		; glm::tvec2<short,1>::operator--
PUBLIC	??E?$tvec2@F$00@glm@@QAE?AU01@H@Z		; glm::tvec2<short,1>::operator++
PUBLIC	??F?$tvec2@F$00@glm@@QAE?AU01@H@Z		; glm::tvec2<short,1>::operator--
PUBLIC	?length@?$tvec2@H$00@glm@@SAHXZ			; glm::tvec2<int,1>::length
PUBLIC	??A?$tvec2@H$00@glm@@QAEAAHH@Z			; glm::tvec2<int,1>::operator[]
PUBLIC	??A?$tvec2@H$00@glm@@QBEABHH@Z			; glm::tvec2<int,1>::operator[]
PUBLIC	??0?$tvec2@H$00@glm@@QAE@XZ			; glm::tvec2<int,1>::tvec2<int,1>
PUBLIC	??0?$tvec2@H$00@glm@@QAE@ABU01@@Z		; glm::tvec2<int,1>::tvec2<int,1>
PUBLIC	??0?$tvec2@H$00@glm@@QAE@W4ctor@1@@Z		; glm::tvec2<int,1>::tvec2<int,1>
PUBLIC	??0?$tvec2@H$00@glm@@QAE@H@Z			; glm::tvec2<int,1>::tvec2<int,1>
PUBLIC	??0?$tvec2@H$00@glm@@QAE@HH@Z			; glm::tvec2<int,1>::tvec2<int,1>
PUBLIC	??4?$tvec2@H$00@glm@@QAEAAU01@ABU01@@Z		; glm::tvec2<int,1>::operator=
PUBLIC	??E?$tvec2@H$00@glm@@QAEAAU01@XZ		; glm::tvec2<int,1>::operator++
PUBLIC	??F?$tvec2@H$00@glm@@QAEAAU01@XZ		; glm::tvec2<int,1>::operator--
PUBLIC	??E?$tvec2@H$00@glm@@QAE?AU01@H@Z		; glm::tvec2<int,1>::operator++
PUBLIC	??F?$tvec2@H$00@glm@@QAE?AU01@H@Z		; glm::tvec2<int,1>::operator--
PUBLIC	?length@?$tvec2@_J$00@glm@@SAHXZ		; glm::tvec2<__int64,1>::length
PUBLIC	??A?$tvec2@_J$00@glm@@QAEAA_JH@Z		; glm::tvec2<__int64,1>::operator[]
PUBLIC	??A?$tvec2@_J$00@glm@@QBEAB_JH@Z		; glm::tvec2<__int64,1>::operator[]
PUBLIC	??0?$tvec2@_J$00@glm@@QAE@XZ			; glm::tvec2<__int64,1>::tvec2<__int64,1>
PUBLIC	??0?$tvec2@_J$00@glm@@QAE@ABU01@@Z		; glm::tvec2<__int64,1>::tvec2<__int64,1>
PUBLIC	??0?$tvec2@_J$00@glm@@QAE@W4ctor@1@@Z		; glm::tvec2<__int64,1>::tvec2<__int64,1>
PUBLIC	??0?$tvec2@_J$00@glm@@QAE@_J@Z			; glm::tvec2<__int64,1>::tvec2<__int64,1>
PUBLIC	??0?$tvec2@_J$00@glm@@QAE@_J0@Z			; glm::tvec2<__int64,1>::tvec2<__int64,1>
PUBLIC	??4?$tvec2@_J$00@glm@@QAEAAU01@ABU01@@Z		; glm::tvec2<__int64,1>::operator=
PUBLIC	??E?$tvec2@_J$00@glm@@QAEAAU01@XZ		; glm::tvec2<__int64,1>::operator++
PUBLIC	??F?$tvec2@_J$00@glm@@QAEAAU01@XZ		; glm::tvec2<__int64,1>::operator--
PUBLIC	??E?$tvec2@_J$00@glm@@QAE?AU01@H@Z		; glm::tvec2<__int64,1>::operator++
PUBLIC	??F?$tvec2@_J$00@glm@@QAE?AU01@H@Z		; glm::tvec2<__int64,1>::operator--
PUBLIC	?length@?$tvec2@M$00@glm@@SAHXZ			; glm::tvec2<float,1>::length
PUBLIC	??A?$tvec2@M$00@glm@@QAEAAMH@Z			; glm::tvec2<float,1>::operator[]
PUBLIC	??A?$tvec2@M$00@glm@@QBEABMH@Z			; glm::tvec2<float,1>::operator[]
PUBLIC	??0?$tvec2@M$00@glm@@QAE@XZ			; glm::tvec2<float,1>::tvec2<float,1>
PUBLIC	??0?$tvec2@M$00@glm@@QAE@ABU01@@Z		; glm::tvec2<float,1>::tvec2<float,1>
PUBLIC	??0?$tvec2@M$00@glm@@QAE@W4ctor@1@@Z		; glm::tvec2<float,1>::tvec2<float,1>
PUBLIC	??0?$tvec2@M$00@glm@@QAE@M@Z			; glm::tvec2<float,1>::tvec2<float,1>
PUBLIC	??0?$tvec2@M$00@glm@@QAE@MM@Z			; glm::tvec2<float,1>::tvec2<float,1>
PUBLIC	??4?$tvec2@M$00@glm@@QAEAAU01@ABU01@@Z		; glm::tvec2<float,1>::operator=
PUBLIC	??E?$tvec2@M$00@glm@@QAEAAU01@XZ		; glm::tvec2<float,1>::operator++
PUBLIC	??F?$tvec2@M$00@glm@@QAEAAU01@XZ		; glm::tvec2<float,1>::operator--
PUBLIC	??E?$tvec2@M$00@glm@@QAE?AU01@H@Z		; glm::tvec2<float,1>::operator++
PUBLIC	??F?$tvec2@M$00@glm@@QAE?AU01@H@Z		; glm::tvec2<float,1>::operator--
PUBLIC	?length@?$tvec2@N$00@glm@@SAHXZ			; glm::tvec2<double,1>::length
PUBLIC	??A?$tvec2@N$00@glm@@QAEAANH@Z			; glm::tvec2<double,1>::operator[]
PUBLIC	??A?$tvec2@N$00@glm@@QBEABNH@Z			; glm::tvec2<double,1>::operator[]
PUBLIC	??0?$tvec2@N$00@glm@@QAE@XZ			; glm::tvec2<double,1>::tvec2<double,1>
PUBLIC	??0?$tvec2@N$00@glm@@QAE@ABU01@@Z		; glm::tvec2<double,1>::tvec2<double,1>
PUBLIC	??0?$tvec2@N$00@glm@@QAE@W4ctor@1@@Z		; glm::tvec2<double,1>::tvec2<double,1>
PUBLIC	??0?$tvec2@N$00@glm@@QAE@N@Z			; glm::tvec2<double,1>::tvec2<double,1>
PUBLIC	??0?$tvec2@N$00@glm@@QAE@NN@Z			; glm::tvec2<double,1>::tvec2<double,1>
PUBLIC	??4?$tvec2@N$00@glm@@QAEAAU01@ABU01@@Z		; glm::tvec2<double,1>::operator=
PUBLIC	??E?$tvec2@N$00@glm@@QAEAAU01@XZ		; glm::tvec2<double,1>::operator++
PUBLIC	??F?$tvec2@N$00@glm@@QAEAAU01@XZ		; glm::tvec2<double,1>::operator--
PUBLIC	??E?$tvec2@N$00@glm@@QAE?AU01@H@Z		; glm::tvec2<double,1>::operator++
PUBLIC	??F?$tvec2@N$00@glm@@QAE?AU01@H@Z		; glm::tvec2<double,1>::operator--
PUBLIC	?length@?$tvec2@E$0A@@glm@@SAHXZ		; glm::tvec2<unsigned char,0>::length
PUBLIC	??A?$tvec2@E$0A@@glm@@QAEAAEH@Z			; glm::tvec2<unsigned char,0>::operator[]
PUBLIC	??A?$tvec2@E$0A@@glm@@QBEABEH@Z			; glm::tvec2<unsigned char,0>::operator[]
PUBLIC	??0?$tvec2@E$0A@@glm@@QAE@XZ			; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0>
PUBLIC	??0?$tvec2@E$0A@@glm@@QAE@ABU01@@Z		; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0>
PUBLIC	??0?$tvec2@E$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0>
PUBLIC	??0?$tvec2@E$0A@@glm@@QAE@E@Z			; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0>
PUBLIC	??0?$tvec2@E$0A@@glm@@QAE@EE@Z			; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0>
PUBLIC	??4?$tvec2@E$0A@@glm@@QAEAAU01@ABU01@@Z		; glm::tvec2<unsigned char,0>::operator=
PUBLIC	??E?$tvec2@E$0A@@glm@@QAEAAU01@XZ		; glm::tvec2<unsigned char,0>::operator++
PUBLIC	??F?$tvec2@E$0A@@glm@@QAEAAU01@XZ		; glm::tvec2<unsigned char,0>::operator--
PUBLIC	??E?$tvec2@E$0A@@glm@@QAE?AU01@H@Z		; glm::tvec2<unsigned char,0>::operator++
PUBLIC	??F?$tvec2@E$0A@@glm@@QAE?AU01@H@Z		; glm::tvec2<unsigned char,0>::operator--
PUBLIC	?length@?$tvec2@_K$0A@@glm@@SAHXZ		; glm::tvec2<unsigned __int64,0>::length
PUBLIC	??A?$tvec2@_K$0A@@glm@@QAEAA_KH@Z		; glm::tvec2<unsigned __int64,0>::operator[]
PUBLIC	??A?$tvec2@_K$0A@@glm@@QBEAB_KH@Z		; glm::tvec2<unsigned __int64,0>::operator[]
PUBLIC	??0?$tvec2@_K$0A@@glm@@QAE@XZ			; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0>
PUBLIC	??0?$tvec2@_K$0A@@glm@@QAE@ABU01@@Z		; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0>
PUBLIC	??0?$tvec2@_K$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0>
PUBLIC	??0?$tvec2@_K$0A@@glm@@QAE@_K@Z			; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0>
PUBLIC	??0?$tvec2@_K$0A@@glm@@QAE@_K0@Z		; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0>
PUBLIC	??4?$tvec2@_K$0A@@glm@@QAEAAU01@ABU01@@Z	; glm::tvec2<unsigned __int64,0>::operator=
PUBLIC	??E?$tvec2@_K$0A@@glm@@QAEAAU01@XZ		; glm::tvec2<unsigned __int64,0>::operator++
PUBLIC	??F?$tvec2@_K$0A@@glm@@QAEAAU01@XZ		; glm::tvec2<unsigned __int64,0>::operator--
PUBLIC	??E?$tvec2@_K$0A@@glm@@QAE?AU01@H@Z		; glm::tvec2<unsigned __int64,0>::operator++
PUBLIC	??F?$tvec2@_K$0A@@glm@@QAE?AU01@H@Z		; glm::tvec2<unsigned __int64,0>::operator--
PUBLIC	?length@?$tvec2@C$0A@@glm@@SAHXZ		; glm::tvec2<signed char,0>::length
PUBLIC	??A?$tvec2@C$0A@@glm@@QAEAACH@Z			; glm::tvec2<signed char,0>::operator[]
PUBLIC	??A?$tvec2@C$0A@@glm@@QBEABCH@Z			; glm::tvec2<signed char,0>::operator[]
PUBLIC	??0?$tvec2@C$0A@@glm@@QAE@XZ			; glm::tvec2<signed char,0>::tvec2<signed char,0>
PUBLIC	??0?$tvec2@C$0A@@glm@@QAE@ABU01@@Z		; glm::tvec2<signed char,0>::tvec2<signed char,0>
PUBLIC	??0?$tvec2@C$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tvec2<signed char,0>::tvec2<signed char,0>
PUBLIC	??0?$tvec2@C$0A@@glm@@QAE@C@Z			; glm::tvec2<signed char,0>::tvec2<signed char,0>
PUBLIC	??0?$tvec2@C$0A@@glm@@QAE@CC@Z			; glm::tvec2<signed char,0>::tvec2<signed char,0>
PUBLIC	??4?$tvec2@C$0A@@glm@@QAEAAU01@ABU01@@Z		; glm::tvec2<signed char,0>::operator=
PUBLIC	??E?$tvec2@C$0A@@glm@@QAEAAU01@XZ		; glm::tvec2<signed char,0>::operator++
PUBLIC	??F?$tvec2@C$0A@@glm@@QAEAAU01@XZ		; glm::tvec2<signed char,0>::operator--
PUBLIC	??E?$tvec2@C$0A@@glm@@QAE?AU01@H@Z		; glm::tvec2<signed char,0>::operator++
PUBLIC	??F?$tvec2@C$0A@@glm@@QAE?AU01@H@Z		; glm::tvec2<signed char,0>::operator--
PUBLIC	?length@?$tvec2@H$0A@@glm@@SAHXZ		; glm::tvec2<int,0>::length
PUBLIC	??A?$tvec2@H$0A@@glm@@QAEAAHH@Z			; glm::tvec2<int,0>::operator[]
PUBLIC	??A?$tvec2@H$0A@@glm@@QBEABHH@Z			; glm::tvec2<int,0>::operator[]
PUBLIC	??0?$tvec2@H$0A@@glm@@QAE@XZ			; glm::tvec2<int,0>::tvec2<int,0>
PUBLIC	??0?$tvec2@H$0A@@glm@@QAE@ABU01@@Z		; glm::tvec2<int,0>::tvec2<int,0>
PUBLIC	??0?$tvec2@H$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tvec2<int,0>::tvec2<int,0>
PUBLIC	??0?$tvec2@H$0A@@glm@@QAE@H@Z			; glm::tvec2<int,0>::tvec2<int,0>
PUBLIC	??0?$tvec2@H$0A@@glm@@QAE@HH@Z			; glm::tvec2<int,0>::tvec2<int,0>
PUBLIC	??4?$tvec2@H$0A@@glm@@QAEAAU01@ABU01@@Z		; glm::tvec2<int,0>::operator=
PUBLIC	??E?$tvec2@H$0A@@glm@@QAEAAU01@XZ		; glm::tvec2<int,0>::operator++
PUBLIC	??F?$tvec2@H$0A@@glm@@QAEAAU01@XZ		; glm::tvec2<int,0>::operator--
PUBLIC	??E?$tvec2@H$0A@@glm@@QAE?AU01@H@Z		; glm::tvec2<int,0>::operator++
PUBLIC	??F?$tvec2@H$0A@@glm@@QAE?AU01@H@Z		; glm::tvec2<int,0>::operator--
PUBLIC	?length@?$tvec2@_J$0A@@glm@@SAHXZ		; glm::tvec2<__int64,0>::length
PUBLIC	??A?$tvec2@_J$0A@@glm@@QAEAA_JH@Z		; glm::tvec2<__int64,0>::operator[]
PUBLIC	??A?$tvec2@_J$0A@@glm@@QBEAB_JH@Z		; glm::tvec2<__int64,0>::operator[]
PUBLIC	??0?$tvec2@_J$0A@@glm@@QAE@XZ			; glm::tvec2<__int64,0>::tvec2<__int64,0>
PUBLIC	??0?$tvec2@_J$0A@@glm@@QAE@ABU01@@Z		; glm::tvec2<__int64,0>::tvec2<__int64,0>
PUBLIC	??0?$tvec2@_J$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tvec2<__int64,0>::tvec2<__int64,0>
PUBLIC	??0?$tvec2@_J$0A@@glm@@QAE@_J@Z			; glm::tvec2<__int64,0>::tvec2<__int64,0>
PUBLIC	??0?$tvec2@_J$0A@@glm@@QAE@_J0@Z		; glm::tvec2<__int64,0>::tvec2<__int64,0>
PUBLIC	??4?$tvec2@_J$0A@@glm@@QAEAAU01@ABU01@@Z	; glm::tvec2<__int64,0>::operator=
PUBLIC	??E?$tvec2@_J$0A@@glm@@QAEAAU01@XZ		; glm::tvec2<__int64,0>::operator++
PUBLIC	??F?$tvec2@_J$0A@@glm@@QAEAAU01@XZ		; glm::tvec2<__int64,0>::operator--
PUBLIC	??E?$tvec2@_J$0A@@glm@@QAE?AU01@H@Z		; glm::tvec2<__int64,0>::operator++
PUBLIC	??F?$tvec2@_J$0A@@glm@@QAE?AU01@H@Z		; glm::tvec2<__int64,0>::operator--
PUBLIC	?length@?$tvec2@N$0A@@glm@@SAHXZ		; glm::tvec2<double,0>::length
PUBLIC	??A?$tvec2@N$0A@@glm@@QAEAANH@Z			; glm::tvec2<double,0>::operator[]
PUBLIC	??A?$tvec2@N$0A@@glm@@QBEABNH@Z			; glm::tvec2<double,0>::operator[]
PUBLIC	??0?$tvec2@N$0A@@glm@@QAE@XZ			; glm::tvec2<double,0>::tvec2<double,0>
PUBLIC	??0?$tvec2@N$0A@@glm@@QAE@ABU01@@Z		; glm::tvec2<double,0>::tvec2<double,0>
PUBLIC	??0?$tvec2@N$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tvec2<double,0>::tvec2<double,0>
PUBLIC	??0?$tvec2@N$0A@@glm@@QAE@N@Z			; glm::tvec2<double,0>::tvec2<double,0>
PUBLIC	??0?$tvec2@N$0A@@glm@@QAE@NN@Z			; glm::tvec2<double,0>::tvec2<double,0>
PUBLIC	??4?$tvec2@N$0A@@glm@@QAEAAU01@ABU01@@Z		; glm::tvec2<double,0>::operator=
PUBLIC	??E?$tvec2@N$0A@@glm@@QAEAAU01@XZ		; glm::tvec2<double,0>::operator++
PUBLIC	??F?$tvec2@N$0A@@glm@@QAEAAU01@XZ		; glm::tvec2<double,0>::operator--
PUBLIC	??E?$tvec2@N$0A@@glm@@QAE?AU01@H@Z		; glm::tvec2<double,0>::operator++
PUBLIC	??F?$tvec2@N$0A@@glm@@QAE?AU01@H@Z		; glm::tvec2<double,0>::operator--
PUBLIC	?length@?$tvec3@E$01@glm@@SAHXZ			; glm::tvec3<unsigned char,2>::length
PUBLIC	??A?$tvec3@E$01@glm@@QAEAAEH@Z			; glm::tvec3<unsigned char,2>::operator[]
PUBLIC	??A?$tvec3@E$01@glm@@QBEABEH@Z			; glm::tvec3<unsigned char,2>::operator[]
PUBLIC	??0?$tvec3@E$01@glm@@QAE@XZ			; glm::tvec3<unsigned char,2>::tvec3<unsigned char,2>
PUBLIC	??0?$tvec3@E$01@glm@@QAE@ABU01@@Z		; glm::tvec3<unsigned char,2>::tvec3<unsigned char,2>
PUBLIC	??0?$tvec3@E$01@glm@@QAE@W4ctor@1@@Z		; glm::tvec3<unsigned char,2>::tvec3<unsigned char,2>
PUBLIC	??0?$tvec3@E$01@glm@@QAE@E@Z			; glm::tvec3<unsigned char,2>::tvec3<unsigned char,2>
PUBLIC	??0?$tvec3@E$01@glm@@QAE@EEE@Z			; glm::tvec3<unsigned char,2>::tvec3<unsigned char,2>
PUBLIC	??4?$tvec3@E$01@glm@@QAEAAU01@ABU01@@Z		; glm::tvec3<unsigned char,2>::operator=
PUBLIC	??E?$tvec3@E$01@glm@@QAEAAU01@XZ		; glm::tvec3<unsigned char,2>::operator++
PUBLIC	??F?$tvec3@E$01@glm@@QAEAAU01@XZ		; glm::tvec3<unsigned char,2>::operator--
PUBLIC	??E?$tvec3@E$01@glm@@QAE?AU01@H@Z		; glm::tvec3<unsigned char,2>::operator++
PUBLIC	??F?$tvec3@E$01@glm@@QAE?AU01@H@Z		; glm::tvec3<unsigned char,2>::operator--
PUBLIC	?length@?$tvec3@G$01@glm@@SAHXZ			; glm::tvec3<unsigned short,2>::length
PUBLIC	??A?$tvec3@G$01@glm@@QAEAAGH@Z			; glm::tvec3<unsigned short,2>::operator[]
PUBLIC	??A?$tvec3@G$01@glm@@QBEABGH@Z			; glm::tvec3<unsigned short,2>::operator[]
PUBLIC	??0?$tvec3@G$01@glm@@QAE@XZ			; glm::tvec3<unsigned short,2>::tvec3<unsigned short,2>
PUBLIC	??0?$tvec3@G$01@glm@@QAE@ABU01@@Z		; glm::tvec3<unsigned short,2>::tvec3<unsigned short,2>
PUBLIC	??0?$tvec3@G$01@glm@@QAE@W4ctor@1@@Z		; glm::tvec3<unsigned short,2>::tvec3<unsigned short,2>
PUBLIC	??0?$tvec3@G$01@glm@@QAE@G@Z			; glm::tvec3<unsigned short,2>::tvec3<unsigned short,2>
PUBLIC	??0?$tvec3@G$01@glm@@QAE@GGG@Z			; glm::tvec3<unsigned short,2>::tvec3<unsigned short,2>
PUBLIC	??4?$tvec3@G$01@glm@@QAEAAU01@ABU01@@Z		; glm::tvec3<unsigned short,2>::operator=
PUBLIC	??E?$tvec3@G$01@glm@@QAEAAU01@XZ		; glm::tvec3<unsigned short,2>::operator++
PUBLIC	??F?$tvec3@G$01@glm@@QAEAAU01@XZ		; glm::tvec3<unsigned short,2>::operator--
PUBLIC	??E?$tvec3@G$01@glm@@QAE?AU01@H@Z		; glm::tvec3<unsigned short,2>::operator++
PUBLIC	??F?$tvec3@G$01@glm@@QAE?AU01@H@Z		; glm::tvec3<unsigned short,2>::operator--
PUBLIC	?length@?$tvec3@I$01@glm@@SAHXZ			; glm::tvec3<unsigned int,2>::length
PUBLIC	??A?$tvec3@I$01@glm@@QAEAAIH@Z			; glm::tvec3<unsigned int,2>::operator[]
PUBLIC	??A?$tvec3@I$01@glm@@QBEABIH@Z			; glm::tvec3<unsigned int,2>::operator[]
PUBLIC	??0?$tvec3@I$01@glm@@QAE@XZ			; glm::tvec3<unsigned int,2>::tvec3<unsigned int,2>
PUBLIC	??0?$tvec3@I$01@glm@@QAE@ABU01@@Z		; glm::tvec3<unsigned int,2>::tvec3<unsigned int,2>
PUBLIC	??0?$tvec3@I$01@glm@@QAE@W4ctor@1@@Z		; glm::tvec3<unsigned int,2>::tvec3<unsigned int,2>
PUBLIC	??0?$tvec3@I$01@glm@@QAE@I@Z			; glm::tvec3<unsigned int,2>::tvec3<unsigned int,2>
PUBLIC	??0?$tvec3@I$01@glm@@QAE@III@Z			; glm::tvec3<unsigned int,2>::tvec3<unsigned int,2>
PUBLIC	??4?$tvec3@I$01@glm@@QAEAAU01@ABU01@@Z		; glm::tvec3<unsigned int,2>::operator=
PUBLIC	??E?$tvec3@I$01@glm@@QAEAAU01@XZ		; glm::tvec3<unsigned int,2>::operator++
PUBLIC	??F?$tvec3@I$01@glm@@QAEAAU01@XZ		; glm::tvec3<unsigned int,2>::operator--
PUBLIC	??E?$tvec3@I$01@glm@@QAE?AU01@H@Z		; glm::tvec3<unsigned int,2>::operator++
PUBLIC	??F?$tvec3@I$01@glm@@QAE?AU01@H@Z		; glm::tvec3<unsigned int,2>::operator--
PUBLIC	?length@?$tvec3@_K$01@glm@@SAHXZ		; glm::tvec3<unsigned __int64,2>::length
PUBLIC	??A?$tvec3@_K$01@glm@@QAEAA_KH@Z		; glm::tvec3<unsigned __int64,2>::operator[]
PUBLIC	??A?$tvec3@_K$01@glm@@QBEAB_KH@Z		; glm::tvec3<unsigned __int64,2>::operator[]
PUBLIC	??0?$tvec3@_K$01@glm@@QAE@XZ			; glm::tvec3<unsigned __int64,2>::tvec3<unsigned __int64,2>
PUBLIC	??0?$tvec3@_K$01@glm@@QAE@ABU01@@Z		; glm::tvec3<unsigned __int64,2>::tvec3<unsigned __int64,2>
PUBLIC	??0?$tvec3@_K$01@glm@@QAE@W4ctor@1@@Z		; glm::tvec3<unsigned __int64,2>::tvec3<unsigned __int64,2>
PUBLIC	??0?$tvec3@_K$01@glm@@QAE@_K@Z			; glm::tvec3<unsigned __int64,2>::tvec3<unsigned __int64,2>
PUBLIC	??0?$tvec3@_K$01@glm@@QAE@_K00@Z		; glm::tvec3<unsigned __int64,2>::tvec3<unsigned __int64,2>
PUBLIC	??4?$tvec3@_K$01@glm@@QAEAAU01@ABU01@@Z		; glm::tvec3<unsigned __int64,2>::operator=
PUBLIC	??E?$tvec3@_K$01@glm@@QAEAAU01@XZ		; glm::tvec3<unsigned __int64,2>::operator++
PUBLIC	??F?$tvec3@_K$01@glm@@QAEAAU01@XZ		; glm::tvec3<unsigned __int64,2>::operator--
PUBLIC	??E?$tvec3@_K$01@glm@@QAE?AU01@H@Z		; glm::tvec3<unsigned __int64,2>::operator++
PUBLIC	??F?$tvec3@_K$01@glm@@QAE?AU01@H@Z		; glm::tvec3<unsigned __int64,2>::operator--
PUBLIC	?length@?$tvec3@C$01@glm@@SAHXZ			; glm::tvec3<signed char,2>::length
PUBLIC	??A?$tvec3@C$01@glm@@QAEAACH@Z			; glm::tvec3<signed char,2>::operator[]
PUBLIC	??A?$tvec3@C$01@glm@@QBEABCH@Z			; glm::tvec3<signed char,2>::operator[]
PUBLIC	??0?$tvec3@C$01@glm@@QAE@XZ			; glm::tvec3<signed char,2>::tvec3<signed char,2>
PUBLIC	??0?$tvec3@C$01@glm@@QAE@ABU01@@Z		; glm::tvec3<signed char,2>::tvec3<signed char,2>
PUBLIC	??0?$tvec3@C$01@glm@@QAE@W4ctor@1@@Z		; glm::tvec3<signed char,2>::tvec3<signed char,2>
PUBLIC	??0?$tvec3@C$01@glm@@QAE@C@Z			; glm::tvec3<signed char,2>::tvec3<signed char,2>
PUBLIC	??0?$tvec3@C$01@glm@@QAE@CCC@Z			; glm::tvec3<signed char,2>::tvec3<signed char,2>
PUBLIC	??4?$tvec3@C$01@glm@@QAEAAU01@ABU01@@Z		; glm::tvec3<signed char,2>::operator=
PUBLIC	??E?$tvec3@C$01@glm@@QAEAAU01@XZ		; glm::tvec3<signed char,2>::operator++
PUBLIC	??F?$tvec3@C$01@glm@@QAEAAU01@XZ		; glm::tvec3<signed char,2>::operator--
PUBLIC	??E?$tvec3@C$01@glm@@QAE?AU01@H@Z		; glm::tvec3<signed char,2>::operator++
PUBLIC	??F?$tvec3@C$01@glm@@QAE?AU01@H@Z		; glm::tvec3<signed char,2>::operator--
PUBLIC	?length@?$tvec3@F$01@glm@@SAHXZ			; glm::tvec3<short,2>::length
PUBLIC	??A?$tvec3@F$01@glm@@QAEAAFH@Z			; glm::tvec3<short,2>::operator[]
PUBLIC	??A?$tvec3@F$01@glm@@QBEABFH@Z			; glm::tvec3<short,2>::operator[]
PUBLIC	??0?$tvec3@F$01@glm@@QAE@XZ			; glm::tvec3<short,2>::tvec3<short,2>
PUBLIC	??0?$tvec3@F$01@glm@@QAE@ABU01@@Z		; glm::tvec3<short,2>::tvec3<short,2>
PUBLIC	??0?$tvec3@F$01@glm@@QAE@W4ctor@1@@Z		; glm::tvec3<short,2>::tvec3<short,2>
PUBLIC	??0?$tvec3@F$01@glm@@QAE@F@Z			; glm::tvec3<short,2>::tvec3<short,2>
PUBLIC	??0?$tvec3@F$01@glm@@QAE@FFF@Z			; glm::tvec3<short,2>::tvec3<short,2>
PUBLIC	??4?$tvec3@F$01@glm@@QAEAAU01@ABU01@@Z		; glm::tvec3<short,2>::operator=
PUBLIC	??E?$tvec3@F$01@glm@@QAEAAU01@XZ		; glm::tvec3<short,2>::operator++
PUBLIC	??F?$tvec3@F$01@glm@@QAEAAU01@XZ		; glm::tvec3<short,2>::operator--
PUBLIC	??E?$tvec3@F$01@glm@@QAE?AU01@H@Z		; glm::tvec3<short,2>::operator++
PUBLIC	??F?$tvec3@F$01@glm@@QAE?AU01@H@Z		; glm::tvec3<short,2>::operator--
PUBLIC	?length@?$tvec3@H$01@glm@@SAHXZ			; glm::tvec3<int,2>::length
PUBLIC	??A?$tvec3@H$01@glm@@QAEAAHH@Z			; glm::tvec3<int,2>::operator[]
PUBLIC	??A?$tvec3@H$01@glm@@QBEABHH@Z			; glm::tvec3<int,2>::operator[]
PUBLIC	??0?$tvec3@H$01@glm@@QAE@XZ			; glm::tvec3<int,2>::tvec3<int,2>
PUBLIC	??0?$tvec3@H$01@glm@@QAE@ABU01@@Z		; glm::tvec3<int,2>::tvec3<int,2>
PUBLIC	??0?$tvec3@H$01@glm@@QAE@W4ctor@1@@Z		; glm::tvec3<int,2>::tvec3<int,2>
PUBLIC	??0?$tvec3@H$01@glm@@QAE@H@Z			; glm::tvec3<int,2>::tvec3<int,2>
PUBLIC	??0?$tvec3@H$01@glm@@QAE@HHH@Z			; glm::tvec3<int,2>::tvec3<int,2>
PUBLIC	??4?$tvec3@H$01@glm@@QAEAAU01@ABU01@@Z		; glm::tvec3<int,2>::operator=
PUBLIC	??E?$tvec3@H$01@glm@@QAEAAU01@XZ		; glm::tvec3<int,2>::operator++
PUBLIC	??F?$tvec3@H$01@glm@@QAEAAU01@XZ		; glm::tvec3<int,2>::operator--
PUBLIC	??E?$tvec3@H$01@glm@@QAE?AU01@H@Z		; glm::tvec3<int,2>::operator++
PUBLIC	??F?$tvec3@H$01@glm@@QAE?AU01@H@Z		; glm::tvec3<int,2>::operator--
PUBLIC	?length@?$tvec3@_J$01@glm@@SAHXZ		; glm::tvec3<__int64,2>::length
PUBLIC	??A?$tvec3@_J$01@glm@@QAEAA_JH@Z		; glm::tvec3<__int64,2>::operator[]
PUBLIC	??A?$tvec3@_J$01@glm@@QBEAB_JH@Z		; glm::tvec3<__int64,2>::operator[]
PUBLIC	??0?$tvec3@_J$01@glm@@QAE@XZ			; glm::tvec3<__int64,2>::tvec3<__int64,2>
PUBLIC	??0?$tvec3@_J$01@glm@@QAE@ABU01@@Z		; glm::tvec3<__int64,2>::tvec3<__int64,2>
PUBLIC	??0?$tvec3@_J$01@glm@@QAE@W4ctor@1@@Z		; glm::tvec3<__int64,2>::tvec3<__int64,2>
PUBLIC	??0?$tvec3@_J$01@glm@@QAE@_J@Z			; glm::tvec3<__int64,2>::tvec3<__int64,2>
PUBLIC	??0?$tvec3@_J$01@glm@@QAE@_J00@Z		; glm::tvec3<__int64,2>::tvec3<__int64,2>
PUBLIC	??4?$tvec3@_J$01@glm@@QAEAAU01@ABU01@@Z		; glm::tvec3<__int64,2>::operator=
PUBLIC	??E?$tvec3@_J$01@glm@@QAEAAU01@XZ		; glm::tvec3<__int64,2>::operator++
PUBLIC	??F?$tvec3@_J$01@glm@@QAEAAU01@XZ		; glm::tvec3<__int64,2>::operator--
PUBLIC	??E?$tvec3@_J$01@glm@@QAE?AU01@H@Z		; glm::tvec3<__int64,2>::operator++
PUBLIC	??F?$tvec3@_J$01@glm@@QAE?AU01@H@Z		; glm::tvec3<__int64,2>::operator--
PUBLIC	?length@?$tvec3@M$01@glm@@SAHXZ			; glm::tvec3<float,2>::length
PUBLIC	??A?$tvec3@M$01@glm@@QAEAAMH@Z			; glm::tvec3<float,2>::operator[]
PUBLIC	??A?$tvec3@M$01@glm@@QBEABMH@Z			; glm::tvec3<float,2>::operator[]
PUBLIC	??0?$tvec3@M$01@glm@@QAE@XZ			; glm::tvec3<float,2>::tvec3<float,2>
PUBLIC	??0?$tvec3@M$01@glm@@QAE@ABU01@@Z		; glm::tvec3<float,2>::tvec3<float,2>
PUBLIC	??0?$tvec3@M$01@glm@@QAE@W4ctor@1@@Z		; glm::tvec3<float,2>::tvec3<float,2>
PUBLIC	??0?$tvec3@M$01@glm@@QAE@M@Z			; glm::tvec3<float,2>::tvec3<float,2>
PUBLIC	??0?$tvec3@M$01@glm@@QAE@MMM@Z			; glm::tvec3<float,2>::tvec3<float,2>
PUBLIC	??4?$tvec3@M$01@glm@@QAEAAU01@ABU01@@Z		; glm::tvec3<float,2>::operator=
PUBLIC	??E?$tvec3@M$01@glm@@QAEAAU01@XZ		; glm::tvec3<float,2>::operator++
PUBLIC	??F?$tvec3@M$01@glm@@QAEAAU01@XZ		; glm::tvec3<float,2>::operator--
PUBLIC	??E?$tvec3@M$01@glm@@QAE?AU01@H@Z		; glm::tvec3<float,2>::operator++
PUBLIC	??F?$tvec3@M$01@glm@@QAE?AU01@H@Z		; glm::tvec3<float,2>::operator--
PUBLIC	?length@?$tvec3@N$01@glm@@SAHXZ			; glm::tvec3<double,2>::length
PUBLIC	??A?$tvec3@N$01@glm@@QAEAANH@Z			; glm::tvec3<double,2>::operator[]
PUBLIC	??A?$tvec3@N$01@glm@@QBEABNH@Z			; glm::tvec3<double,2>::operator[]
PUBLIC	??0?$tvec3@N$01@glm@@QAE@XZ			; glm::tvec3<double,2>::tvec3<double,2>
PUBLIC	??0?$tvec3@N$01@glm@@QAE@ABU01@@Z		; glm::tvec3<double,2>::tvec3<double,2>
PUBLIC	??0?$tvec3@N$01@glm@@QAE@W4ctor@1@@Z		; glm::tvec3<double,2>::tvec3<double,2>
PUBLIC	??0?$tvec3@N$01@glm@@QAE@N@Z			; glm::tvec3<double,2>::tvec3<double,2>
PUBLIC	??0?$tvec3@N$01@glm@@QAE@NNN@Z			; glm::tvec3<double,2>::tvec3<double,2>
PUBLIC	??4?$tvec3@N$01@glm@@QAEAAU01@ABU01@@Z		; glm::tvec3<double,2>::operator=
PUBLIC	??E?$tvec3@N$01@glm@@QAEAAU01@XZ		; glm::tvec3<double,2>::operator++
PUBLIC	??F?$tvec3@N$01@glm@@QAEAAU01@XZ		; glm::tvec3<double,2>::operator--
PUBLIC	??E?$tvec3@N$01@glm@@QAE?AU01@H@Z		; glm::tvec3<double,2>::operator++
PUBLIC	??F?$tvec3@N$01@glm@@QAE?AU01@H@Z		; glm::tvec3<double,2>::operator--
PUBLIC	?length@?$tvec3@E$00@glm@@SAHXZ			; glm::tvec3<unsigned char,1>::length
PUBLIC	??A?$tvec3@E$00@glm@@QAEAAEH@Z			; glm::tvec3<unsigned char,1>::operator[]
PUBLIC	??A?$tvec3@E$00@glm@@QBEABEH@Z			; glm::tvec3<unsigned char,1>::operator[]
PUBLIC	??0?$tvec3@E$00@glm@@QAE@XZ			; glm::tvec3<unsigned char,1>::tvec3<unsigned char,1>
PUBLIC	??0?$tvec3@E$00@glm@@QAE@ABU01@@Z		; glm::tvec3<unsigned char,1>::tvec3<unsigned char,1>
PUBLIC	??0?$tvec3@E$00@glm@@QAE@W4ctor@1@@Z		; glm::tvec3<unsigned char,1>::tvec3<unsigned char,1>
PUBLIC	??0?$tvec3@E$00@glm@@QAE@E@Z			; glm::tvec3<unsigned char,1>::tvec3<unsigned char,1>
PUBLIC	??0?$tvec3@E$00@glm@@QAE@EEE@Z			; glm::tvec3<unsigned char,1>::tvec3<unsigned char,1>
PUBLIC	??4?$tvec3@E$00@glm@@QAEAAU01@ABU01@@Z		; glm::tvec3<unsigned char,1>::operator=
PUBLIC	??E?$tvec3@E$00@glm@@QAEAAU01@XZ		; glm::tvec3<unsigned char,1>::operator++
PUBLIC	??F?$tvec3@E$00@glm@@QAEAAU01@XZ		; glm::tvec3<unsigned char,1>::operator--
PUBLIC	??E?$tvec3@E$00@glm@@QAE?AU01@H@Z		; glm::tvec3<unsigned char,1>::operator++
PUBLIC	??F?$tvec3@E$00@glm@@QAE?AU01@H@Z		; glm::tvec3<unsigned char,1>::operator--
PUBLIC	?length@?$tvec3@G$00@glm@@SAHXZ			; glm::tvec3<unsigned short,1>::length
PUBLIC	??A?$tvec3@G$00@glm@@QAEAAGH@Z			; glm::tvec3<unsigned short,1>::operator[]
PUBLIC	??A?$tvec3@G$00@glm@@QBEABGH@Z			; glm::tvec3<unsigned short,1>::operator[]
PUBLIC	??0?$tvec3@G$00@glm@@QAE@XZ			; glm::tvec3<unsigned short,1>::tvec3<unsigned short,1>
PUBLIC	??0?$tvec3@G$00@glm@@QAE@ABU01@@Z		; glm::tvec3<unsigned short,1>::tvec3<unsigned short,1>
PUBLIC	??0?$tvec3@G$00@glm@@QAE@W4ctor@1@@Z		; glm::tvec3<unsigned short,1>::tvec3<unsigned short,1>
PUBLIC	??0?$tvec3@G$00@glm@@QAE@G@Z			; glm::tvec3<unsigned short,1>::tvec3<unsigned short,1>
PUBLIC	??0?$tvec3@G$00@glm@@QAE@GGG@Z			; glm::tvec3<unsigned short,1>::tvec3<unsigned short,1>
PUBLIC	??4?$tvec3@G$00@glm@@QAEAAU01@ABU01@@Z		; glm::tvec3<unsigned short,1>::operator=
PUBLIC	??E?$tvec3@G$00@glm@@QAEAAU01@XZ		; glm::tvec3<unsigned short,1>::operator++
PUBLIC	??F?$tvec3@G$00@glm@@QAEAAU01@XZ		; glm::tvec3<unsigned short,1>::operator--
PUBLIC	??E?$tvec3@G$00@glm@@QAE?AU01@H@Z		; glm::tvec3<unsigned short,1>::operator++
PUBLIC	??F?$tvec3@G$00@glm@@QAE?AU01@H@Z		; glm::tvec3<unsigned short,1>::operator--
PUBLIC	?length@?$tvec3@I$00@glm@@SAHXZ			; glm::tvec3<unsigned int,1>::length
PUBLIC	??A?$tvec3@I$00@glm@@QAEAAIH@Z			; glm::tvec3<unsigned int,1>::operator[]
PUBLIC	??A?$tvec3@I$00@glm@@QBEABIH@Z			; glm::tvec3<unsigned int,1>::operator[]
PUBLIC	??0?$tvec3@I$00@glm@@QAE@XZ			; glm::tvec3<unsigned int,1>::tvec3<unsigned int,1>
PUBLIC	??0?$tvec3@I$00@glm@@QAE@ABU01@@Z		; glm::tvec3<unsigned int,1>::tvec3<unsigned int,1>
PUBLIC	??0?$tvec3@I$00@glm@@QAE@W4ctor@1@@Z		; glm::tvec3<unsigned int,1>::tvec3<unsigned int,1>
PUBLIC	??0?$tvec3@I$00@glm@@QAE@I@Z			; glm::tvec3<unsigned int,1>::tvec3<unsigned int,1>
PUBLIC	??0?$tvec3@I$00@glm@@QAE@III@Z			; glm::tvec3<unsigned int,1>::tvec3<unsigned int,1>
PUBLIC	??4?$tvec3@I$00@glm@@QAEAAU01@ABU01@@Z		; glm::tvec3<unsigned int,1>::operator=
PUBLIC	??E?$tvec3@I$00@glm@@QAEAAU01@XZ		; glm::tvec3<unsigned int,1>::operator++
PUBLIC	??F?$tvec3@I$00@glm@@QAEAAU01@XZ		; glm::tvec3<unsigned int,1>::operator--
PUBLIC	??E?$tvec3@I$00@glm@@QAE?AU01@H@Z		; glm::tvec3<unsigned int,1>::operator++
PUBLIC	??F?$tvec3@I$00@glm@@QAE?AU01@H@Z		; glm::tvec3<unsigned int,1>::operator--
PUBLIC	?length@?$tvec3@_K$00@glm@@SAHXZ		; glm::tvec3<unsigned __int64,1>::length
PUBLIC	??A?$tvec3@_K$00@glm@@QAEAA_KH@Z		; glm::tvec3<unsigned __int64,1>::operator[]
PUBLIC	??A?$tvec3@_K$00@glm@@QBEAB_KH@Z		; glm::tvec3<unsigned __int64,1>::operator[]
PUBLIC	??0?$tvec3@_K$00@glm@@QAE@XZ			; glm::tvec3<unsigned __int64,1>::tvec3<unsigned __int64,1>
PUBLIC	??0?$tvec3@_K$00@glm@@QAE@ABU01@@Z		; glm::tvec3<unsigned __int64,1>::tvec3<unsigned __int64,1>
PUBLIC	??0?$tvec3@_K$00@glm@@QAE@W4ctor@1@@Z		; glm::tvec3<unsigned __int64,1>::tvec3<unsigned __int64,1>
PUBLIC	??0?$tvec3@_K$00@glm@@QAE@_K@Z			; glm::tvec3<unsigned __int64,1>::tvec3<unsigned __int64,1>
PUBLIC	??0?$tvec3@_K$00@glm@@QAE@_K00@Z		; glm::tvec3<unsigned __int64,1>::tvec3<unsigned __int64,1>
PUBLIC	??4?$tvec3@_K$00@glm@@QAEAAU01@ABU01@@Z		; glm::tvec3<unsigned __int64,1>::operator=
PUBLIC	??E?$tvec3@_K$00@glm@@QAEAAU01@XZ		; glm::tvec3<unsigned __int64,1>::operator++
PUBLIC	??F?$tvec3@_K$00@glm@@QAEAAU01@XZ		; glm::tvec3<unsigned __int64,1>::operator--
PUBLIC	??E?$tvec3@_K$00@glm@@QAE?AU01@H@Z		; glm::tvec3<unsigned __int64,1>::operator++
PUBLIC	??F?$tvec3@_K$00@glm@@QAE?AU01@H@Z		; glm::tvec3<unsigned __int64,1>::operator--
PUBLIC	?length@?$tvec3@C$00@glm@@SAHXZ			; glm::tvec3<signed char,1>::length
PUBLIC	??A?$tvec3@C$00@glm@@QAEAACH@Z			; glm::tvec3<signed char,1>::operator[]
PUBLIC	??A?$tvec3@C$00@glm@@QBEABCH@Z			; glm::tvec3<signed char,1>::operator[]
PUBLIC	??0?$tvec3@C$00@glm@@QAE@XZ			; glm::tvec3<signed char,1>::tvec3<signed char,1>
PUBLIC	??0?$tvec3@C$00@glm@@QAE@ABU01@@Z		; glm::tvec3<signed char,1>::tvec3<signed char,1>
PUBLIC	??0?$tvec3@C$00@glm@@QAE@W4ctor@1@@Z		; glm::tvec3<signed char,1>::tvec3<signed char,1>
PUBLIC	??0?$tvec3@C$00@glm@@QAE@C@Z			; glm::tvec3<signed char,1>::tvec3<signed char,1>
PUBLIC	??0?$tvec3@C$00@glm@@QAE@CCC@Z			; glm::tvec3<signed char,1>::tvec3<signed char,1>
PUBLIC	??4?$tvec3@C$00@glm@@QAEAAU01@ABU01@@Z		; glm::tvec3<signed char,1>::operator=
PUBLIC	??E?$tvec3@C$00@glm@@QAEAAU01@XZ		; glm::tvec3<signed char,1>::operator++
PUBLIC	??F?$tvec3@C$00@glm@@QAEAAU01@XZ		; glm::tvec3<signed char,1>::operator--
PUBLIC	??E?$tvec3@C$00@glm@@QAE?AU01@H@Z		; glm::tvec3<signed char,1>::operator++
PUBLIC	??F?$tvec3@C$00@glm@@QAE?AU01@H@Z		; glm::tvec3<signed char,1>::operator--
PUBLIC	?length@?$tvec3@F$00@glm@@SAHXZ			; glm::tvec3<short,1>::length
PUBLIC	??A?$tvec3@F$00@glm@@QAEAAFH@Z			; glm::tvec3<short,1>::operator[]
PUBLIC	??A?$tvec3@F$00@glm@@QBEABFH@Z			; glm::tvec3<short,1>::operator[]
PUBLIC	??0?$tvec3@F$00@glm@@QAE@XZ			; glm::tvec3<short,1>::tvec3<short,1>
PUBLIC	??0?$tvec3@F$00@glm@@QAE@ABU01@@Z		; glm::tvec3<short,1>::tvec3<short,1>
PUBLIC	??0?$tvec3@F$00@glm@@QAE@W4ctor@1@@Z		; glm::tvec3<short,1>::tvec3<short,1>
PUBLIC	??0?$tvec3@F$00@glm@@QAE@F@Z			; glm::tvec3<short,1>::tvec3<short,1>
PUBLIC	??0?$tvec3@F$00@glm@@QAE@FFF@Z			; glm::tvec3<short,1>::tvec3<short,1>
PUBLIC	??4?$tvec3@F$00@glm@@QAEAAU01@ABU01@@Z		; glm::tvec3<short,1>::operator=
PUBLIC	??E?$tvec3@F$00@glm@@QAEAAU01@XZ		; glm::tvec3<short,1>::operator++
PUBLIC	??F?$tvec3@F$00@glm@@QAEAAU01@XZ		; glm::tvec3<short,1>::operator--
PUBLIC	??E?$tvec3@F$00@glm@@QAE?AU01@H@Z		; glm::tvec3<short,1>::operator++
PUBLIC	??F?$tvec3@F$00@glm@@QAE?AU01@H@Z		; glm::tvec3<short,1>::operator--
PUBLIC	?length@?$tvec3@H$00@glm@@SAHXZ			; glm::tvec3<int,1>::length
PUBLIC	??A?$tvec3@H$00@glm@@QAEAAHH@Z			; glm::tvec3<int,1>::operator[]
PUBLIC	??A?$tvec3@H$00@glm@@QBEABHH@Z			; glm::tvec3<int,1>::operator[]
PUBLIC	??0?$tvec3@H$00@glm@@QAE@XZ			; glm::tvec3<int,1>::tvec3<int,1>
PUBLIC	??0?$tvec3@H$00@glm@@QAE@ABU01@@Z		; glm::tvec3<int,1>::tvec3<int,1>
PUBLIC	??0?$tvec3@H$00@glm@@QAE@W4ctor@1@@Z		; glm::tvec3<int,1>::tvec3<int,1>
PUBLIC	??0?$tvec3@H$00@glm@@QAE@H@Z			; glm::tvec3<int,1>::tvec3<int,1>
PUBLIC	??0?$tvec3@H$00@glm@@QAE@HHH@Z			; glm::tvec3<int,1>::tvec3<int,1>
PUBLIC	??4?$tvec3@H$00@glm@@QAEAAU01@ABU01@@Z		; glm::tvec3<int,1>::operator=
PUBLIC	??E?$tvec3@H$00@glm@@QAEAAU01@XZ		; glm::tvec3<int,1>::operator++
PUBLIC	??F?$tvec3@H$00@glm@@QAEAAU01@XZ		; glm::tvec3<int,1>::operator--
PUBLIC	??E?$tvec3@H$00@glm@@QAE?AU01@H@Z		; glm::tvec3<int,1>::operator++
PUBLIC	??F?$tvec3@H$00@glm@@QAE?AU01@H@Z		; glm::tvec3<int,1>::operator--
PUBLIC	?length@?$tvec3@_J$00@glm@@SAHXZ		; glm::tvec3<__int64,1>::length
PUBLIC	??A?$tvec3@_J$00@glm@@QAEAA_JH@Z		; glm::tvec3<__int64,1>::operator[]
PUBLIC	??A?$tvec3@_J$00@glm@@QBEAB_JH@Z		; glm::tvec3<__int64,1>::operator[]
PUBLIC	??0?$tvec3@_J$00@glm@@QAE@XZ			; glm::tvec3<__int64,1>::tvec3<__int64,1>
PUBLIC	??0?$tvec3@_J$00@glm@@QAE@ABU01@@Z		; glm::tvec3<__int64,1>::tvec3<__int64,1>
PUBLIC	??0?$tvec3@_J$00@glm@@QAE@W4ctor@1@@Z		; glm::tvec3<__int64,1>::tvec3<__int64,1>
PUBLIC	??0?$tvec3@_J$00@glm@@QAE@_J@Z			; glm::tvec3<__int64,1>::tvec3<__int64,1>
PUBLIC	??0?$tvec3@_J$00@glm@@QAE@_J00@Z		; glm::tvec3<__int64,1>::tvec3<__int64,1>
PUBLIC	??4?$tvec3@_J$00@glm@@QAEAAU01@ABU01@@Z		; glm::tvec3<__int64,1>::operator=
PUBLIC	??E?$tvec3@_J$00@glm@@QAEAAU01@XZ		; glm::tvec3<__int64,1>::operator++
PUBLIC	??F?$tvec3@_J$00@glm@@QAEAAU01@XZ		; glm::tvec3<__int64,1>::operator--
PUBLIC	??E?$tvec3@_J$00@glm@@QAE?AU01@H@Z		; glm::tvec3<__int64,1>::operator++
PUBLIC	??F?$tvec3@_J$00@glm@@QAE?AU01@H@Z		; glm::tvec3<__int64,1>::operator--
PUBLIC	?length@?$tvec3@M$00@glm@@SAHXZ			; glm::tvec3<float,1>::length
PUBLIC	??A?$tvec3@M$00@glm@@QAEAAMH@Z			; glm::tvec3<float,1>::operator[]
PUBLIC	??A?$tvec3@M$00@glm@@QBEABMH@Z			; glm::tvec3<float,1>::operator[]
PUBLIC	??0?$tvec3@M$00@glm@@QAE@XZ			; glm::tvec3<float,1>::tvec3<float,1>
PUBLIC	??0?$tvec3@M$00@glm@@QAE@ABU01@@Z		; glm::tvec3<float,1>::tvec3<float,1>
PUBLIC	??0?$tvec3@M$00@glm@@QAE@W4ctor@1@@Z		; glm::tvec3<float,1>::tvec3<float,1>
PUBLIC	??0?$tvec3@M$00@glm@@QAE@M@Z			; glm::tvec3<float,1>::tvec3<float,1>
PUBLIC	??0?$tvec3@M$00@glm@@QAE@MMM@Z			; glm::tvec3<float,1>::tvec3<float,1>
PUBLIC	??4?$tvec3@M$00@glm@@QAEAAU01@ABU01@@Z		; glm::tvec3<float,1>::operator=
PUBLIC	??E?$tvec3@M$00@glm@@QAEAAU01@XZ		; glm::tvec3<float,1>::operator++
PUBLIC	??F?$tvec3@M$00@glm@@QAEAAU01@XZ		; glm::tvec3<float,1>::operator--
PUBLIC	??E?$tvec3@M$00@glm@@QAE?AU01@H@Z		; glm::tvec3<float,1>::operator++
PUBLIC	??F?$tvec3@M$00@glm@@QAE?AU01@H@Z		; glm::tvec3<float,1>::operator--
PUBLIC	?length@?$tvec3@N$00@glm@@SAHXZ			; glm::tvec3<double,1>::length
PUBLIC	??A?$tvec3@N$00@glm@@QAEAANH@Z			; glm::tvec3<double,1>::operator[]
PUBLIC	??A?$tvec3@N$00@glm@@QBEABNH@Z			; glm::tvec3<double,1>::operator[]
PUBLIC	??0?$tvec3@N$00@glm@@QAE@XZ			; glm::tvec3<double,1>::tvec3<double,1>
PUBLIC	??0?$tvec3@N$00@glm@@QAE@ABU01@@Z		; glm::tvec3<double,1>::tvec3<double,1>
PUBLIC	??0?$tvec3@N$00@glm@@QAE@W4ctor@1@@Z		; glm::tvec3<double,1>::tvec3<double,1>
PUBLIC	??0?$tvec3@N$00@glm@@QAE@N@Z			; glm::tvec3<double,1>::tvec3<double,1>
PUBLIC	??0?$tvec3@N$00@glm@@QAE@NNN@Z			; glm::tvec3<double,1>::tvec3<double,1>
PUBLIC	??4?$tvec3@N$00@glm@@QAEAAU01@ABU01@@Z		; glm::tvec3<double,1>::operator=
PUBLIC	??E?$tvec3@N$00@glm@@QAEAAU01@XZ		; glm::tvec3<double,1>::operator++
PUBLIC	??F?$tvec3@N$00@glm@@QAEAAU01@XZ		; glm::tvec3<double,1>::operator--
PUBLIC	??E?$tvec3@N$00@glm@@QAE?AU01@H@Z		; glm::tvec3<double,1>::operator++
PUBLIC	??F?$tvec3@N$00@glm@@QAE?AU01@H@Z		; glm::tvec3<double,1>::operator--
PUBLIC	?length@?$tvec3@E$0A@@glm@@SAHXZ		; glm::tvec3<unsigned char,0>::length
PUBLIC	??A?$tvec3@E$0A@@glm@@QAEAAEH@Z			; glm::tvec3<unsigned char,0>::operator[]
PUBLIC	??A?$tvec3@E$0A@@glm@@QBEABEH@Z			; glm::tvec3<unsigned char,0>::operator[]
PUBLIC	??0?$tvec3@E$0A@@glm@@QAE@XZ			; glm::tvec3<unsigned char,0>::tvec3<unsigned char,0>
PUBLIC	??0?$tvec3@E$0A@@glm@@QAE@ABU01@@Z		; glm::tvec3<unsigned char,0>::tvec3<unsigned char,0>
PUBLIC	??0?$tvec3@E$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tvec3<unsigned char,0>::tvec3<unsigned char,0>
PUBLIC	??0?$tvec3@E$0A@@glm@@QAE@E@Z			; glm::tvec3<unsigned char,0>::tvec3<unsigned char,0>
PUBLIC	??0?$tvec3@E$0A@@glm@@QAE@EEE@Z			; glm::tvec3<unsigned char,0>::tvec3<unsigned char,0>
PUBLIC	??4?$tvec3@E$0A@@glm@@QAEAAU01@ABU01@@Z		; glm::tvec3<unsigned char,0>::operator=
PUBLIC	??E?$tvec3@E$0A@@glm@@QAEAAU01@XZ		; glm::tvec3<unsigned char,0>::operator++
PUBLIC	??F?$tvec3@E$0A@@glm@@QAEAAU01@XZ		; glm::tvec3<unsigned char,0>::operator--
PUBLIC	??E?$tvec3@E$0A@@glm@@QAE?AU01@H@Z		; glm::tvec3<unsigned char,0>::operator++
PUBLIC	??F?$tvec3@E$0A@@glm@@QAE?AU01@H@Z		; glm::tvec3<unsigned char,0>::operator--
PUBLIC	?length@?$tvec3@G$0A@@glm@@SAHXZ		; glm::tvec3<unsigned short,0>::length
PUBLIC	??A?$tvec3@G$0A@@glm@@QAEAAGH@Z			; glm::tvec3<unsigned short,0>::operator[]
PUBLIC	??A?$tvec3@G$0A@@glm@@QBEABGH@Z			; glm::tvec3<unsigned short,0>::operator[]
PUBLIC	??0?$tvec3@G$0A@@glm@@QAE@XZ			; glm::tvec3<unsigned short,0>::tvec3<unsigned short,0>
PUBLIC	??0?$tvec3@G$0A@@glm@@QAE@ABU01@@Z		; glm::tvec3<unsigned short,0>::tvec3<unsigned short,0>
PUBLIC	??0?$tvec3@G$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tvec3<unsigned short,0>::tvec3<unsigned short,0>
PUBLIC	??0?$tvec3@G$0A@@glm@@QAE@G@Z			; glm::tvec3<unsigned short,0>::tvec3<unsigned short,0>
PUBLIC	??0?$tvec3@G$0A@@glm@@QAE@GGG@Z			; glm::tvec3<unsigned short,0>::tvec3<unsigned short,0>
PUBLIC	??4?$tvec3@G$0A@@glm@@QAEAAU01@ABU01@@Z		; glm::tvec3<unsigned short,0>::operator=
PUBLIC	??E?$tvec3@G$0A@@glm@@QAEAAU01@XZ		; glm::tvec3<unsigned short,0>::operator++
PUBLIC	??F?$tvec3@G$0A@@glm@@QAEAAU01@XZ		; glm::tvec3<unsigned short,0>::operator--
PUBLIC	??E?$tvec3@G$0A@@glm@@QAE?AU01@H@Z		; glm::tvec3<unsigned short,0>::operator++
PUBLIC	??F?$tvec3@G$0A@@glm@@QAE?AU01@H@Z		; glm::tvec3<unsigned short,0>::operator--
PUBLIC	?length@?$tvec3@I$0A@@glm@@SAHXZ		; glm::tvec3<unsigned int,0>::length
PUBLIC	??A?$tvec3@I$0A@@glm@@QAEAAIH@Z			; glm::tvec3<unsigned int,0>::operator[]
PUBLIC	??A?$tvec3@I$0A@@glm@@QBEABIH@Z			; glm::tvec3<unsigned int,0>::operator[]
PUBLIC	??0?$tvec3@I$0A@@glm@@QAE@XZ			; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0>
PUBLIC	??0?$tvec3@I$0A@@glm@@QAE@ABU01@@Z		; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0>
PUBLIC	??0?$tvec3@I$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0>
PUBLIC	??0?$tvec3@I$0A@@glm@@QAE@I@Z			; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0>
PUBLIC	??0?$tvec3@I$0A@@glm@@QAE@III@Z			; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0>
PUBLIC	??4?$tvec3@I$0A@@glm@@QAEAAU01@ABU01@@Z		; glm::tvec3<unsigned int,0>::operator=
PUBLIC	??E?$tvec3@I$0A@@glm@@QAEAAU01@XZ		; glm::tvec3<unsigned int,0>::operator++
PUBLIC	??F?$tvec3@I$0A@@glm@@QAEAAU01@XZ		; glm::tvec3<unsigned int,0>::operator--
PUBLIC	??E?$tvec3@I$0A@@glm@@QAE?AU01@H@Z		; glm::tvec3<unsigned int,0>::operator++
PUBLIC	??F?$tvec3@I$0A@@glm@@QAE?AU01@H@Z		; glm::tvec3<unsigned int,0>::operator--
PUBLIC	?length@?$tvec3@_K$0A@@glm@@SAHXZ		; glm::tvec3<unsigned __int64,0>::length
PUBLIC	??A?$tvec3@_K$0A@@glm@@QAEAA_KH@Z		; glm::tvec3<unsigned __int64,0>::operator[]
PUBLIC	??A?$tvec3@_K$0A@@glm@@QBEAB_KH@Z		; glm::tvec3<unsigned __int64,0>::operator[]
PUBLIC	??0?$tvec3@_K$0A@@glm@@QAE@XZ			; glm::tvec3<unsigned __int64,0>::tvec3<unsigned __int64,0>
PUBLIC	??0?$tvec3@_K$0A@@glm@@QAE@ABU01@@Z		; glm::tvec3<unsigned __int64,0>::tvec3<unsigned __int64,0>
PUBLIC	??0?$tvec3@_K$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tvec3<unsigned __int64,0>::tvec3<unsigned __int64,0>
PUBLIC	??0?$tvec3@_K$0A@@glm@@QAE@_K@Z			; glm::tvec3<unsigned __int64,0>::tvec3<unsigned __int64,0>
PUBLIC	??0?$tvec3@_K$0A@@glm@@QAE@_K00@Z		; glm::tvec3<unsigned __int64,0>::tvec3<unsigned __int64,0>
PUBLIC	??4?$tvec3@_K$0A@@glm@@QAEAAU01@ABU01@@Z	; glm::tvec3<unsigned __int64,0>::operator=
PUBLIC	??E?$tvec3@_K$0A@@glm@@QAEAAU01@XZ		; glm::tvec3<unsigned __int64,0>::operator++
PUBLIC	??F?$tvec3@_K$0A@@glm@@QAEAAU01@XZ		; glm::tvec3<unsigned __int64,0>::operator--
PUBLIC	??E?$tvec3@_K$0A@@glm@@QAE?AU01@H@Z		; glm::tvec3<unsigned __int64,0>::operator++
PUBLIC	??F?$tvec3@_K$0A@@glm@@QAE?AU01@H@Z		; glm::tvec3<unsigned __int64,0>::operator--
PUBLIC	?length@?$tvec3@C$0A@@glm@@SAHXZ		; glm::tvec3<signed char,0>::length
PUBLIC	??A?$tvec3@C$0A@@glm@@QAEAACH@Z			; glm::tvec3<signed char,0>::operator[]
PUBLIC	??A?$tvec3@C$0A@@glm@@QBEABCH@Z			; glm::tvec3<signed char,0>::operator[]
PUBLIC	??0?$tvec3@C$0A@@glm@@QAE@XZ			; glm::tvec3<signed char,0>::tvec3<signed char,0>
PUBLIC	??0?$tvec3@C$0A@@glm@@QAE@ABU01@@Z		; glm::tvec3<signed char,0>::tvec3<signed char,0>
PUBLIC	??0?$tvec3@C$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tvec3<signed char,0>::tvec3<signed char,0>
PUBLIC	??0?$tvec3@C$0A@@glm@@QAE@C@Z			; glm::tvec3<signed char,0>::tvec3<signed char,0>
PUBLIC	??0?$tvec3@C$0A@@glm@@QAE@CCC@Z			; glm::tvec3<signed char,0>::tvec3<signed char,0>
PUBLIC	??4?$tvec3@C$0A@@glm@@QAEAAU01@ABU01@@Z		; glm::tvec3<signed char,0>::operator=
PUBLIC	??E?$tvec3@C$0A@@glm@@QAEAAU01@XZ		; glm::tvec3<signed char,0>::operator++
PUBLIC	??F?$tvec3@C$0A@@glm@@QAEAAU01@XZ		; glm::tvec3<signed char,0>::operator--
PUBLIC	??E?$tvec3@C$0A@@glm@@QAE?AU01@H@Z		; glm::tvec3<signed char,0>::operator++
PUBLIC	??F?$tvec3@C$0A@@glm@@QAE?AU01@H@Z		; glm::tvec3<signed char,0>::operator--
PUBLIC	?length@?$tvec3@F$0A@@glm@@SAHXZ		; glm::tvec3<short,0>::length
PUBLIC	??A?$tvec3@F$0A@@glm@@QAEAAFH@Z			; glm::tvec3<short,0>::operator[]
PUBLIC	??A?$tvec3@F$0A@@glm@@QBEABFH@Z			; glm::tvec3<short,0>::operator[]
PUBLIC	??0?$tvec3@F$0A@@glm@@QAE@XZ			; glm::tvec3<short,0>::tvec3<short,0>
PUBLIC	??0?$tvec3@F$0A@@glm@@QAE@ABU01@@Z		; glm::tvec3<short,0>::tvec3<short,0>
PUBLIC	??0?$tvec3@F$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tvec3<short,0>::tvec3<short,0>
PUBLIC	??0?$tvec3@F$0A@@glm@@QAE@F@Z			; glm::tvec3<short,0>::tvec3<short,0>
PUBLIC	??0?$tvec3@F$0A@@glm@@QAE@FFF@Z			; glm::tvec3<short,0>::tvec3<short,0>
PUBLIC	??4?$tvec3@F$0A@@glm@@QAEAAU01@ABU01@@Z		; glm::tvec3<short,0>::operator=
PUBLIC	??E?$tvec3@F$0A@@glm@@QAEAAU01@XZ		; glm::tvec3<short,0>::operator++
PUBLIC	??F?$tvec3@F$0A@@glm@@QAEAAU01@XZ		; glm::tvec3<short,0>::operator--
PUBLIC	??E?$tvec3@F$0A@@glm@@QAE?AU01@H@Z		; glm::tvec3<short,0>::operator++
PUBLIC	??F?$tvec3@F$0A@@glm@@QAE?AU01@H@Z		; glm::tvec3<short,0>::operator--
PUBLIC	?length@?$tvec3@H$0A@@glm@@SAHXZ		; glm::tvec3<int,0>::length
PUBLIC	??A?$tvec3@H$0A@@glm@@QAEAAHH@Z			; glm::tvec3<int,0>::operator[]
PUBLIC	??A?$tvec3@H$0A@@glm@@QBEABHH@Z			; glm::tvec3<int,0>::operator[]
PUBLIC	??0?$tvec3@H$0A@@glm@@QAE@XZ			; glm::tvec3<int,0>::tvec3<int,0>
PUBLIC	??0?$tvec3@H$0A@@glm@@QAE@ABU01@@Z		; glm::tvec3<int,0>::tvec3<int,0>
PUBLIC	??0?$tvec3@H$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tvec3<int,0>::tvec3<int,0>
PUBLIC	??0?$tvec3@H$0A@@glm@@QAE@H@Z			; glm::tvec3<int,0>::tvec3<int,0>
PUBLIC	??0?$tvec3@H$0A@@glm@@QAE@HHH@Z			; glm::tvec3<int,0>::tvec3<int,0>
PUBLIC	??4?$tvec3@H$0A@@glm@@QAEAAU01@ABU01@@Z		; glm::tvec3<int,0>::operator=
PUBLIC	??E?$tvec3@H$0A@@glm@@QAEAAU01@XZ		; glm::tvec3<int,0>::operator++
PUBLIC	??F?$tvec3@H$0A@@glm@@QAEAAU01@XZ		; glm::tvec3<int,0>::operator--
PUBLIC	??E?$tvec3@H$0A@@glm@@QAE?AU01@H@Z		; glm::tvec3<int,0>::operator++
PUBLIC	??F?$tvec3@H$0A@@glm@@QAE?AU01@H@Z		; glm::tvec3<int,0>::operator--
PUBLIC	?length@?$tvec3@_J$0A@@glm@@SAHXZ		; glm::tvec3<__int64,0>::length
PUBLIC	??A?$tvec3@_J$0A@@glm@@QAEAA_JH@Z		; glm::tvec3<__int64,0>::operator[]
PUBLIC	??A?$tvec3@_J$0A@@glm@@QBEAB_JH@Z		; glm::tvec3<__int64,0>::operator[]
PUBLIC	??0?$tvec3@_J$0A@@glm@@QAE@XZ			; glm::tvec3<__int64,0>::tvec3<__int64,0>
PUBLIC	??0?$tvec3@_J$0A@@glm@@QAE@ABU01@@Z		; glm::tvec3<__int64,0>::tvec3<__int64,0>
PUBLIC	??0?$tvec3@_J$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tvec3<__int64,0>::tvec3<__int64,0>
PUBLIC	??0?$tvec3@_J$0A@@glm@@QAE@_J@Z			; glm::tvec3<__int64,0>::tvec3<__int64,0>
PUBLIC	??0?$tvec3@_J$0A@@glm@@QAE@_J00@Z		; glm::tvec3<__int64,0>::tvec3<__int64,0>
PUBLIC	??4?$tvec3@_J$0A@@glm@@QAEAAU01@ABU01@@Z	; glm::tvec3<__int64,0>::operator=
PUBLIC	??E?$tvec3@_J$0A@@glm@@QAEAAU01@XZ		; glm::tvec3<__int64,0>::operator++
PUBLIC	??F?$tvec3@_J$0A@@glm@@QAEAAU01@XZ		; glm::tvec3<__int64,0>::operator--
PUBLIC	??E?$tvec3@_J$0A@@glm@@QAE?AU01@H@Z		; glm::tvec3<__int64,0>::operator++
PUBLIC	??F?$tvec3@_J$0A@@glm@@QAE?AU01@H@Z		; glm::tvec3<__int64,0>::operator--
PUBLIC	?length@?$tvec3@M$0A@@glm@@SAHXZ		; glm::tvec3<float,0>::length
PUBLIC	??A?$tvec3@M$0A@@glm@@QAEAAMH@Z			; glm::tvec3<float,0>::operator[]
PUBLIC	??A?$tvec3@M$0A@@glm@@QBEABMH@Z			; glm::tvec3<float,0>::operator[]
PUBLIC	??0?$tvec3@M$0A@@glm@@QAE@XZ			; glm::tvec3<float,0>::tvec3<float,0>
PUBLIC	??0?$tvec3@M$0A@@glm@@QAE@ABU01@@Z		; glm::tvec3<float,0>::tvec3<float,0>
PUBLIC	??0?$tvec3@M$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tvec3<float,0>::tvec3<float,0>
PUBLIC	??0?$tvec3@M$0A@@glm@@QAE@M@Z			; glm::tvec3<float,0>::tvec3<float,0>
PUBLIC	??0?$tvec3@M$0A@@glm@@QAE@MMM@Z			; glm::tvec3<float,0>::tvec3<float,0>
PUBLIC	??4?$tvec3@M$0A@@glm@@QAEAAU01@ABU01@@Z		; glm::tvec3<float,0>::operator=
PUBLIC	??E?$tvec3@M$0A@@glm@@QAEAAU01@XZ		; glm::tvec3<float,0>::operator++
PUBLIC	??F?$tvec3@M$0A@@glm@@QAEAAU01@XZ		; glm::tvec3<float,0>::operator--
PUBLIC	??E?$tvec3@M$0A@@glm@@QAE?AU01@H@Z		; glm::tvec3<float,0>::operator++
PUBLIC	??F?$tvec3@M$0A@@glm@@QAE?AU01@H@Z		; glm::tvec3<float,0>::operator--
PUBLIC	?length@?$tvec3@N$0A@@glm@@SAHXZ		; glm::tvec3<double,0>::length
PUBLIC	??A?$tvec3@N$0A@@glm@@QAEAANH@Z			; glm::tvec3<double,0>::operator[]
PUBLIC	??A?$tvec3@N$0A@@glm@@QBEABNH@Z			; glm::tvec3<double,0>::operator[]
PUBLIC	??0?$tvec3@N$0A@@glm@@QAE@XZ			; glm::tvec3<double,0>::tvec3<double,0>
PUBLIC	??0?$tvec3@N$0A@@glm@@QAE@ABU01@@Z		; glm::tvec3<double,0>::tvec3<double,0>
PUBLIC	??0?$tvec3@N$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tvec3<double,0>::tvec3<double,0>
PUBLIC	??0?$tvec3@N$0A@@glm@@QAE@N@Z			; glm::tvec3<double,0>::tvec3<double,0>
PUBLIC	??0?$tvec3@N$0A@@glm@@QAE@NNN@Z			; glm::tvec3<double,0>::tvec3<double,0>
PUBLIC	??4?$tvec3@N$0A@@glm@@QAEAAU01@ABU01@@Z		; glm::tvec3<double,0>::operator=
PUBLIC	??E?$tvec3@N$0A@@glm@@QAEAAU01@XZ		; glm::tvec3<double,0>::operator++
PUBLIC	??F?$tvec3@N$0A@@glm@@QAEAAU01@XZ		; glm::tvec3<double,0>::operator--
PUBLIC	??E?$tvec3@N$0A@@glm@@QAE?AU01@H@Z		; glm::tvec3<double,0>::operator++
PUBLIC	??F?$tvec3@N$0A@@glm@@QAE?AU01@H@Z		; glm::tvec3<double,0>::operator--
PUBLIC	?length@?$tvec4@E$01@glm@@SAHXZ			; glm::tvec4<unsigned char,2>::length
PUBLIC	??A?$tvec4@E$01@glm@@QAEAAEH@Z			; glm::tvec4<unsigned char,2>::operator[]
PUBLIC	??A?$tvec4@E$01@glm@@QBEABEH@Z			; glm::tvec4<unsigned char,2>::operator[]
PUBLIC	??0?$tvec4@E$01@glm@@QAE@XZ			; glm::tvec4<unsigned char,2>::tvec4<unsigned char,2>
PUBLIC	??0?$tvec4@E$01@glm@@QAE@ABU01@@Z		; glm::tvec4<unsigned char,2>::tvec4<unsigned char,2>
PUBLIC	??0?$tvec4@E$01@glm@@QAE@W4ctor@1@@Z		; glm::tvec4<unsigned char,2>::tvec4<unsigned char,2>
PUBLIC	??0?$tvec4@E$01@glm@@QAE@E@Z			; glm::tvec4<unsigned char,2>::tvec4<unsigned char,2>
PUBLIC	??0?$tvec4@E$01@glm@@QAE@EEEE@Z			; glm::tvec4<unsigned char,2>::tvec4<unsigned char,2>
PUBLIC	??4?$tvec4@E$01@glm@@QAEAAU01@ABU01@@Z		; glm::tvec4<unsigned char,2>::operator=
PUBLIC	??E?$tvec4@E$01@glm@@QAEAAU01@XZ		; glm::tvec4<unsigned char,2>::operator++
PUBLIC	??F?$tvec4@E$01@glm@@QAEAAU01@XZ		; glm::tvec4<unsigned char,2>::operator--
PUBLIC	??E?$tvec4@E$01@glm@@QAE?AU01@H@Z		; glm::tvec4<unsigned char,2>::operator++
PUBLIC	??F?$tvec4@E$01@glm@@QAE?AU01@H@Z		; glm::tvec4<unsigned char,2>::operator--
PUBLIC	?length@?$tvec4@G$01@glm@@SAHXZ			; glm::tvec4<unsigned short,2>::length
PUBLIC	??A?$tvec4@G$01@glm@@QAEAAGH@Z			; glm::tvec4<unsigned short,2>::operator[]
PUBLIC	??A?$tvec4@G$01@glm@@QBEABGH@Z			; glm::tvec4<unsigned short,2>::operator[]
PUBLIC	??0?$tvec4@G$01@glm@@QAE@XZ			; glm::tvec4<unsigned short,2>::tvec4<unsigned short,2>
PUBLIC	??0?$tvec4@G$01@glm@@QAE@ABU01@@Z		; glm::tvec4<unsigned short,2>::tvec4<unsigned short,2>
PUBLIC	??0?$tvec4@G$01@glm@@QAE@W4ctor@1@@Z		; glm::tvec4<unsigned short,2>::tvec4<unsigned short,2>
PUBLIC	??0?$tvec4@G$01@glm@@QAE@G@Z			; glm::tvec4<unsigned short,2>::tvec4<unsigned short,2>
PUBLIC	??0?$tvec4@G$01@glm@@QAE@GGGG@Z			; glm::tvec4<unsigned short,2>::tvec4<unsigned short,2>
PUBLIC	??4?$tvec4@G$01@glm@@QAEAAU01@ABU01@@Z		; glm::tvec4<unsigned short,2>::operator=
PUBLIC	??E?$tvec4@G$01@glm@@QAEAAU01@XZ		; glm::tvec4<unsigned short,2>::operator++
PUBLIC	??F?$tvec4@G$01@glm@@QAEAAU01@XZ		; glm::tvec4<unsigned short,2>::operator--
PUBLIC	??E?$tvec4@G$01@glm@@QAE?AU01@H@Z		; glm::tvec4<unsigned short,2>::operator++
PUBLIC	??F?$tvec4@G$01@glm@@QAE?AU01@H@Z		; glm::tvec4<unsigned short,2>::operator--
PUBLIC	?length@?$tvec4@I$01@glm@@SAHXZ			; glm::tvec4<unsigned int,2>::length
PUBLIC	??A?$tvec4@I$01@glm@@QAEAAIH@Z			; glm::tvec4<unsigned int,2>::operator[]
PUBLIC	??A?$tvec4@I$01@glm@@QBEABIH@Z			; glm::tvec4<unsigned int,2>::operator[]
PUBLIC	??0?$tvec4@I$01@glm@@QAE@XZ			; glm::tvec4<unsigned int,2>::tvec4<unsigned int,2>
PUBLIC	??0?$tvec4@I$01@glm@@QAE@ABU01@@Z		; glm::tvec4<unsigned int,2>::tvec4<unsigned int,2>
PUBLIC	??0?$tvec4@I$01@glm@@QAE@W4ctor@1@@Z		; glm::tvec4<unsigned int,2>::tvec4<unsigned int,2>
PUBLIC	??0?$tvec4@I$01@glm@@QAE@I@Z			; glm::tvec4<unsigned int,2>::tvec4<unsigned int,2>
PUBLIC	??0?$tvec4@I$01@glm@@QAE@IIII@Z			; glm::tvec4<unsigned int,2>::tvec4<unsigned int,2>
PUBLIC	??4?$tvec4@I$01@glm@@QAEAAU01@ABU01@@Z		; glm::tvec4<unsigned int,2>::operator=
PUBLIC	??E?$tvec4@I$01@glm@@QAEAAU01@XZ		; glm::tvec4<unsigned int,2>::operator++
PUBLIC	??F?$tvec4@I$01@glm@@QAEAAU01@XZ		; glm::tvec4<unsigned int,2>::operator--
PUBLIC	??E?$tvec4@I$01@glm@@QAE?AU01@H@Z		; glm::tvec4<unsigned int,2>::operator++
PUBLIC	??F?$tvec4@I$01@glm@@QAE?AU01@H@Z		; glm::tvec4<unsigned int,2>::operator--
PUBLIC	?length@?$tvec4@_K$01@glm@@SAHXZ		; glm::tvec4<unsigned __int64,2>::length
PUBLIC	??A?$tvec4@_K$01@glm@@QAEAA_KH@Z		; glm::tvec4<unsigned __int64,2>::operator[]
PUBLIC	??A?$tvec4@_K$01@glm@@QBEAB_KH@Z		; glm::tvec4<unsigned __int64,2>::operator[]
PUBLIC	??0?$tvec4@_K$01@glm@@QAE@XZ			; glm::tvec4<unsigned __int64,2>::tvec4<unsigned __int64,2>
PUBLIC	??0?$tvec4@_K$01@glm@@QAE@ABU01@@Z		; glm::tvec4<unsigned __int64,2>::tvec4<unsigned __int64,2>
PUBLIC	??0?$tvec4@_K$01@glm@@QAE@W4ctor@1@@Z		; glm::tvec4<unsigned __int64,2>::tvec4<unsigned __int64,2>
PUBLIC	??0?$tvec4@_K$01@glm@@QAE@_K@Z			; glm::tvec4<unsigned __int64,2>::tvec4<unsigned __int64,2>
PUBLIC	??0?$tvec4@_K$01@glm@@QAE@_K000@Z		; glm::tvec4<unsigned __int64,2>::tvec4<unsigned __int64,2>
PUBLIC	??4?$tvec4@_K$01@glm@@QAEAAU01@ABU01@@Z		; glm::tvec4<unsigned __int64,2>::operator=
PUBLIC	??E?$tvec4@_K$01@glm@@QAEAAU01@XZ		; glm::tvec4<unsigned __int64,2>::operator++
PUBLIC	??F?$tvec4@_K$01@glm@@QAEAAU01@XZ		; glm::tvec4<unsigned __int64,2>::operator--
PUBLIC	??E?$tvec4@_K$01@glm@@QAE?AU01@H@Z		; glm::tvec4<unsigned __int64,2>::operator++
PUBLIC	??F?$tvec4@_K$01@glm@@QAE?AU01@H@Z		; glm::tvec4<unsigned __int64,2>::operator--
PUBLIC	?length@?$tvec4@C$01@glm@@SAHXZ			; glm::tvec4<signed char,2>::length
PUBLIC	??A?$tvec4@C$01@glm@@QAEAACH@Z			; glm::tvec4<signed char,2>::operator[]
PUBLIC	??A?$tvec4@C$01@glm@@QBEABCH@Z			; glm::tvec4<signed char,2>::operator[]
PUBLIC	??0?$tvec4@C$01@glm@@QAE@XZ			; glm::tvec4<signed char,2>::tvec4<signed char,2>
PUBLIC	??0?$tvec4@C$01@glm@@QAE@ABU01@@Z		; glm::tvec4<signed char,2>::tvec4<signed char,2>
PUBLIC	??0?$tvec4@C$01@glm@@QAE@W4ctor@1@@Z		; glm::tvec4<signed char,2>::tvec4<signed char,2>
PUBLIC	??0?$tvec4@C$01@glm@@QAE@C@Z			; glm::tvec4<signed char,2>::tvec4<signed char,2>
PUBLIC	??0?$tvec4@C$01@glm@@QAE@CCCC@Z			; glm::tvec4<signed char,2>::tvec4<signed char,2>
PUBLIC	??4?$tvec4@C$01@glm@@QAEAAU01@ABU01@@Z		; glm::tvec4<signed char,2>::operator=
PUBLIC	??E?$tvec4@C$01@glm@@QAEAAU01@XZ		; glm::tvec4<signed char,2>::operator++
PUBLIC	??F?$tvec4@C$01@glm@@QAEAAU01@XZ		; glm::tvec4<signed char,2>::operator--
PUBLIC	??E?$tvec4@C$01@glm@@QAE?AU01@H@Z		; glm::tvec4<signed char,2>::operator++
PUBLIC	??F?$tvec4@C$01@glm@@QAE?AU01@H@Z		; glm::tvec4<signed char,2>::operator--
PUBLIC	?length@?$tvec4@F$01@glm@@SAHXZ			; glm::tvec4<short,2>::length
PUBLIC	??A?$tvec4@F$01@glm@@QAEAAFH@Z			; glm::tvec4<short,2>::operator[]
PUBLIC	??A?$tvec4@F$01@glm@@QBEABFH@Z			; glm::tvec4<short,2>::operator[]
PUBLIC	??0?$tvec4@F$01@glm@@QAE@XZ			; glm::tvec4<short,2>::tvec4<short,2>
PUBLIC	??0?$tvec4@F$01@glm@@QAE@ABU01@@Z		; glm::tvec4<short,2>::tvec4<short,2>
PUBLIC	??0?$tvec4@F$01@glm@@QAE@W4ctor@1@@Z		; glm::tvec4<short,2>::tvec4<short,2>
PUBLIC	??0?$tvec4@F$01@glm@@QAE@F@Z			; glm::tvec4<short,2>::tvec4<short,2>
PUBLIC	??0?$tvec4@F$01@glm@@QAE@FFFF@Z			; glm::tvec4<short,2>::tvec4<short,2>
PUBLIC	??4?$tvec4@F$01@glm@@QAEAAU01@ABU01@@Z		; glm::tvec4<short,2>::operator=
PUBLIC	??E?$tvec4@F$01@glm@@QAEAAU01@XZ		; glm::tvec4<short,2>::operator++
PUBLIC	??F?$tvec4@F$01@glm@@QAEAAU01@XZ		; glm::tvec4<short,2>::operator--
PUBLIC	??E?$tvec4@F$01@glm@@QAE?AU01@H@Z		; glm::tvec4<short,2>::operator++
PUBLIC	??F?$tvec4@F$01@glm@@QAE?AU01@H@Z		; glm::tvec4<short,2>::operator--
PUBLIC	?length@?$tvec4@H$01@glm@@SAHXZ			; glm::tvec4<int,2>::length
PUBLIC	??A?$tvec4@H$01@glm@@QAEAAHH@Z			; glm::tvec4<int,2>::operator[]
PUBLIC	??A?$tvec4@H$01@glm@@QBEABHH@Z			; glm::tvec4<int,2>::operator[]
PUBLIC	??0?$tvec4@H$01@glm@@QAE@XZ			; glm::tvec4<int,2>::tvec4<int,2>
PUBLIC	??0?$tvec4@H$01@glm@@QAE@ABU01@@Z		; glm::tvec4<int,2>::tvec4<int,2>
PUBLIC	??0?$tvec4@H$01@glm@@QAE@W4ctor@1@@Z		; glm::tvec4<int,2>::tvec4<int,2>
PUBLIC	??0?$tvec4@H$01@glm@@QAE@H@Z			; glm::tvec4<int,2>::tvec4<int,2>
PUBLIC	??0?$tvec4@H$01@glm@@QAE@HHHH@Z			; glm::tvec4<int,2>::tvec4<int,2>
PUBLIC	??4?$tvec4@H$01@glm@@QAEAAU01@ABU01@@Z		; glm::tvec4<int,2>::operator=
PUBLIC	??E?$tvec4@H$01@glm@@QAEAAU01@XZ		; glm::tvec4<int,2>::operator++
PUBLIC	??F?$tvec4@H$01@glm@@QAEAAU01@XZ		; glm::tvec4<int,2>::operator--
PUBLIC	??E?$tvec4@H$01@glm@@QAE?AU01@H@Z		; glm::tvec4<int,2>::operator++
PUBLIC	??F?$tvec4@H$01@glm@@QAE?AU01@H@Z		; glm::tvec4<int,2>::operator--
PUBLIC	?length@?$tvec4@_J$01@glm@@SAHXZ		; glm::tvec4<__int64,2>::length
PUBLIC	??A?$tvec4@_J$01@glm@@QAEAA_JH@Z		; glm::tvec4<__int64,2>::operator[]
PUBLIC	??A?$tvec4@_J$01@glm@@QBEAB_JH@Z		; glm::tvec4<__int64,2>::operator[]
PUBLIC	??0?$tvec4@_J$01@glm@@QAE@XZ			; glm::tvec4<__int64,2>::tvec4<__int64,2>
PUBLIC	??0?$tvec4@_J$01@glm@@QAE@ABU01@@Z		; glm::tvec4<__int64,2>::tvec4<__int64,2>
PUBLIC	??0?$tvec4@_J$01@glm@@QAE@W4ctor@1@@Z		; glm::tvec4<__int64,2>::tvec4<__int64,2>
PUBLIC	??0?$tvec4@_J$01@glm@@QAE@_J@Z			; glm::tvec4<__int64,2>::tvec4<__int64,2>
PUBLIC	??0?$tvec4@_J$01@glm@@QAE@_J000@Z		; glm::tvec4<__int64,2>::tvec4<__int64,2>
PUBLIC	??4?$tvec4@_J$01@glm@@QAEAAU01@ABU01@@Z		; glm::tvec4<__int64,2>::operator=
PUBLIC	??E?$tvec4@_J$01@glm@@QAEAAU01@XZ		; glm::tvec4<__int64,2>::operator++
PUBLIC	??F?$tvec4@_J$01@glm@@QAEAAU01@XZ		; glm::tvec4<__int64,2>::operator--
PUBLIC	??E?$tvec4@_J$01@glm@@QAE?AU01@H@Z		; glm::tvec4<__int64,2>::operator++
PUBLIC	??F?$tvec4@_J$01@glm@@QAE?AU01@H@Z		; glm::tvec4<__int64,2>::operator--
PUBLIC	?length@?$tvec4@M$01@glm@@SAHXZ			; glm::tvec4<float,2>::length
PUBLIC	??A?$tvec4@M$01@glm@@QAEAAMH@Z			; glm::tvec4<float,2>::operator[]
PUBLIC	??A?$tvec4@M$01@glm@@QBEABMH@Z			; glm::tvec4<float,2>::operator[]
PUBLIC	??0?$tvec4@M$01@glm@@QAE@XZ			; glm::tvec4<float,2>::tvec4<float,2>
PUBLIC	??0?$tvec4@M$01@glm@@QAE@ABU01@@Z		; glm::tvec4<float,2>::tvec4<float,2>
PUBLIC	??0?$tvec4@M$01@glm@@QAE@W4ctor@1@@Z		; glm::tvec4<float,2>::tvec4<float,2>
PUBLIC	??0?$tvec4@M$01@glm@@QAE@M@Z			; glm::tvec4<float,2>::tvec4<float,2>
PUBLIC	??0?$tvec4@M$01@glm@@QAE@MMMM@Z			; glm::tvec4<float,2>::tvec4<float,2>
PUBLIC	??4?$tvec4@M$01@glm@@QAEAAU01@ABU01@@Z		; glm::tvec4<float,2>::operator=
PUBLIC	??E?$tvec4@M$01@glm@@QAEAAU01@XZ		; glm::tvec4<float,2>::operator++
PUBLIC	??F?$tvec4@M$01@glm@@QAEAAU01@XZ		; glm::tvec4<float,2>::operator--
PUBLIC	??E?$tvec4@M$01@glm@@QAE?AU01@H@Z		; glm::tvec4<float,2>::operator++
PUBLIC	??F?$tvec4@M$01@glm@@QAE?AU01@H@Z		; glm::tvec4<float,2>::operator--
PUBLIC	?length@?$tvec4@N$01@glm@@SAHXZ			; glm::tvec4<double,2>::length
PUBLIC	??A?$tvec4@N$01@glm@@QAEAANH@Z			; glm::tvec4<double,2>::operator[]
PUBLIC	??A?$tvec4@N$01@glm@@QBEABNH@Z			; glm::tvec4<double,2>::operator[]
PUBLIC	??0?$tvec4@N$01@glm@@QAE@XZ			; glm::tvec4<double,2>::tvec4<double,2>
PUBLIC	??0?$tvec4@N$01@glm@@QAE@ABU01@@Z		; glm::tvec4<double,2>::tvec4<double,2>
PUBLIC	??0?$tvec4@N$01@glm@@QAE@W4ctor@1@@Z		; glm::tvec4<double,2>::tvec4<double,2>
PUBLIC	??0?$tvec4@N$01@glm@@QAE@N@Z			; glm::tvec4<double,2>::tvec4<double,2>
PUBLIC	??0?$tvec4@N$01@glm@@QAE@NNNN@Z			; glm::tvec4<double,2>::tvec4<double,2>
PUBLIC	??4?$tvec4@N$01@glm@@QAEAAU01@ABU01@@Z		; glm::tvec4<double,2>::operator=
PUBLIC	??E?$tvec4@N$01@glm@@QAEAAU01@XZ		; glm::tvec4<double,2>::operator++
PUBLIC	??F?$tvec4@N$01@glm@@QAEAAU01@XZ		; glm::tvec4<double,2>::operator--
PUBLIC	??E?$tvec4@N$01@glm@@QAE?AU01@H@Z		; glm::tvec4<double,2>::operator++
PUBLIC	??F?$tvec4@N$01@glm@@QAE?AU01@H@Z		; glm::tvec4<double,2>::operator--
PUBLIC	?length@?$tvec4@E$00@glm@@SAHXZ			; glm::tvec4<unsigned char,1>::length
PUBLIC	??A?$tvec4@E$00@glm@@QAEAAEH@Z			; glm::tvec4<unsigned char,1>::operator[]
PUBLIC	??A?$tvec4@E$00@glm@@QBEABEH@Z			; glm::tvec4<unsigned char,1>::operator[]
PUBLIC	??0?$tvec4@E$00@glm@@QAE@XZ			; glm::tvec4<unsigned char,1>::tvec4<unsigned char,1>
PUBLIC	??0?$tvec4@E$00@glm@@QAE@ABU01@@Z		; glm::tvec4<unsigned char,1>::tvec4<unsigned char,1>
PUBLIC	??0?$tvec4@E$00@glm@@QAE@W4ctor@1@@Z		; glm::tvec4<unsigned char,1>::tvec4<unsigned char,1>
PUBLIC	??0?$tvec4@E$00@glm@@QAE@E@Z			; glm::tvec4<unsigned char,1>::tvec4<unsigned char,1>
PUBLIC	??0?$tvec4@E$00@glm@@QAE@EEEE@Z			; glm::tvec4<unsigned char,1>::tvec4<unsigned char,1>
PUBLIC	??4?$tvec4@E$00@glm@@QAEAAU01@ABU01@@Z		; glm::tvec4<unsigned char,1>::operator=
PUBLIC	??E?$tvec4@E$00@glm@@QAEAAU01@XZ		; glm::tvec4<unsigned char,1>::operator++
PUBLIC	??F?$tvec4@E$00@glm@@QAEAAU01@XZ		; glm::tvec4<unsigned char,1>::operator--
PUBLIC	??E?$tvec4@E$00@glm@@QAE?AU01@H@Z		; glm::tvec4<unsigned char,1>::operator++
PUBLIC	??F?$tvec4@E$00@glm@@QAE?AU01@H@Z		; glm::tvec4<unsigned char,1>::operator--
PUBLIC	?length@?$tvec4@G$00@glm@@SAHXZ			; glm::tvec4<unsigned short,1>::length
PUBLIC	??A?$tvec4@G$00@glm@@QAEAAGH@Z			; glm::tvec4<unsigned short,1>::operator[]
PUBLIC	??A?$tvec4@G$00@glm@@QBEABGH@Z			; glm::tvec4<unsigned short,1>::operator[]
PUBLIC	??0?$tvec4@G$00@glm@@QAE@XZ			; glm::tvec4<unsigned short,1>::tvec4<unsigned short,1>
PUBLIC	??0?$tvec4@G$00@glm@@QAE@ABU01@@Z		; glm::tvec4<unsigned short,1>::tvec4<unsigned short,1>
PUBLIC	??0?$tvec4@G$00@glm@@QAE@W4ctor@1@@Z		; glm::tvec4<unsigned short,1>::tvec4<unsigned short,1>
PUBLIC	??0?$tvec4@G$00@glm@@QAE@G@Z			; glm::tvec4<unsigned short,1>::tvec4<unsigned short,1>
PUBLIC	??0?$tvec4@G$00@glm@@QAE@GGGG@Z			; glm::tvec4<unsigned short,1>::tvec4<unsigned short,1>
PUBLIC	??4?$tvec4@G$00@glm@@QAEAAU01@ABU01@@Z		; glm::tvec4<unsigned short,1>::operator=
PUBLIC	??E?$tvec4@G$00@glm@@QAEAAU01@XZ		; glm::tvec4<unsigned short,1>::operator++
PUBLIC	??F?$tvec4@G$00@glm@@QAEAAU01@XZ		; glm::tvec4<unsigned short,1>::operator--
PUBLIC	??E?$tvec4@G$00@glm@@QAE?AU01@H@Z		; glm::tvec4<unsigned short,1>::operator++
PUBLIC	??F?$tvec4@G$00@glm@@QAE?AU01@H@Z		; glm::tvec4<unsigned short,1>::operator--
PUBLIC	?length@?$tvec4@I$00@glm@@SAHXZ			; glm::tvec4<unsigned int,1>::length
PUBLIC	??A?$tvec4@I$00@glm@@QAEAAIH@Z			; glm::tvec4<unsigned int,1>::operator[]
PUBLIC	??A?$tvec4@I$00@glm@@QBEABIH@Z			; glm::tvec4<unsigned int,1>::operator[]
PUBLIC	??0?$tvec4@I$00@glm@@QAE@XZ			; glm::tvec4<unsigned int,1>::tvec4<unsigned int,1>
PUBLIC	??0?$tvec4@I$00@glm@@QAE@ABU01@@Z		; glm::tvec4<unsigned int,1>::tvec4<unsigned int,1>
PUBLIC	??0?$tvec4@I$00@glm@@QAE@W4ctor@1@@Z		; glm::tvec4<unsigned int,1>::tvec4<unsigned int,1>
PUBLIC	??0?$tvec4@I$00@glm@@QAE@I@Z			; glm::tvec4<unsigned int,1>::tvec4<unsigned int,1>
PUBLIC	??0?$tvec4@I$00@glm@@QAE@IIII@Z			; glm::tvec4<unsigned int,1>::tvec4<unsigned int,1>
PUBLIC	??4?$tvec4@I$00@glm@@QAEAAU01@ABU01@@Z		; glm::tvec4<unsigned int,1>::operator=
PUBLIC	??E?$tvec4@I$00@glm@@QAEAAU01@XZ		; glm::tvec4<unsigned int,1>::operator++
PUBLIC	??F?$tvec4@I$00@glm@@QAEAAU01@XZ		; glm::tvec4<unsigned int,1>::operator--
PUBLIC	??E?$tvec4@I$00@glm@@QAE?AU01@H@Z		; glm::tvec4<unsigned int,1>::operator++
PUBLIC	??F?$tvec4@I$00@glm@@QAE?AU01@H@Z		; glm::tvec4<unsigned int,1>::operator--
PUBLIC	?length@?$tvec4@_K$00@glm@@SAHXZ		; glm::tvec4<unsigned __int64,1>::length
PUBLIC	??A?$tvec4@_K$00@glm@@QAEAA_KH@Z		; glm::tvec4<unsigned __int64,1>::operator[]
PUBLIC	??A?$tvec4@_K$00@glm@@QBEAB_KH@Z		; glm::tvec4<unsigned __int64,1>::operator[]
PUBLIC	??0?$tvec4@_K$00@glm@@QAE@XZ			; glm::tvec4<unsigned __int64,1>::tvec4<unsigned __int64,1>
PUBLIC	??0?$tvec4@_K$00@glm@@QAE@ABU01@@Z		; glm::tvec4<unsigned __int64,1>::tvec4<unsigned __int64,1>
PUBLIC	??0?$tvec4@_K$00@glm@@QAE@W4ctor@1@@Z		; glm::tvec4<unsigned __int64,1>::tvec4<unsigned __int64,1>
PUBLIC	??0?$tvec4@_K$00@glm@@QAE@_K@Z			; glm::tvec4<unsigned __int64,1>::tvec4<unsigned __int64,1>
PUBLIC	??0?$tvec4@_K$00@glm@@QAE@_K000@Z		; glm::tvec4<unsigned __int64,1>::tvec4<unsigned __int64,1>
PUBLIC	??4?$tvec4@_K$00@glm@@QAEAAU01@ABU01@@Z		; glm::tvec4<unsigned __int64,1>::operator=
PUBLIC	??E?$tvec4@_K$00@glm@@QAEAAU01@XZ		; glm::tvec4<unsigned __int64,1>::operator++
PUBLIC	??F?$tvec4@_K$00@glm@@QAEAAU01@XZ		; glm::tvec4<unsigned __int64,1>::operator--
PUBLIC	??E?$tvec4@_K$00@glm@@QAE?AU01@H@Z		; glm::tvec4<unsigned __int64,1>::operator++
PUBLIC	??F?$tvec4@_K$00@glm@@QAE?AU01@H@Z		; glm::tvec4<unsigned __int64,1>::operator--
PUBLIC	?length@?$tvec4@C$00@glm@@SAHXZ			; glm::tvec4<signed char,1>::length
PUBLIC	??A?$tvec4@C$00@glm@@QAEAACH@Z			; glm::tvec4<signed char,1>::operator[]
PUBLIC	??A?$tvec4@C$00@glm@@QBEABCH@Z			; glm::tvec4<signed char,1>::operator[]
PUBLIC	??0?$tvec4@C$00@glm@@QAE@XZ			; glm::tvec4<signed char,1>::tvec4<signed char,1>
PUBLIC	??0?$tvec4@C$00@glm@@QAE@ABU01@@Z		; glm::tvec4<signed char,1>::tvec4<signed char,1>
PUBLIC	??0?$tvec4@C$00@glm@@QAE@W4ctor@1@@Z		; glm::tvec4<signed char,1>::tvec4<signed char,1>
PUBLIC	??0?$tvec4@C$00@glm@@QAE@C@Z			; glm::tvec4<signed char,1>::tvec4<signed char,1>
PUBLIC	??0?$tvec4@C$00@glm@@QAE@CCCC@Z			; glm::tvec4<signed char,1>::tvec4<signed char,1>
PUBLIC	??4?$tvec4@C$00@glm@@QAEAAU01@ABU01@@Z		; glm::tvec4<signed char,1>::operator=
PUBLIC	??E?$tvec4@C$00@glm@@QAEAAU01@XZ		; glm::tvec4<signed char,1>::operator++
PUBLIC	??F?$tvec4@C$00@glm@@QAEAAU01@XZ		; glm::tvec4<signed char,1>::operator--
PUBLIC	??E?$tvec4@C$00@glm@@QAE?AU01@H@Z		; glm::tvec4<signed char,1>::operator++
PUBLIC	??F?$tvec4@C$00@glm@@QAE?AU01@H@Z		; glm::tvec4<signed char,1>::operator--
PUBLIC	?length@?$tvec4@F$00@glm@@SAHXZ			; glm::tvec4<short,1>::length
PUBLIC	??A?$tvec4@F$00@glm@@QAEAAFH@Z			; glm::tvec4<short,1>::operator[]
PUBLIC	??A?$tvec4@F$00@glm@@QBEABFH@Z			; glm::tvec4<short,1>::operator[]
PUBLIC	??0?$tvec4@F$00@glm@@QAE@XZ			; glm::tvec4<short,1>::tvec4<short,1>
PUBLIC	??0?$tvec4@F$00@glm@@QAE@ABU01@@Z		; glm::tvec4<short,1>::tvec4<short,1>
PUBLIC	??0?$tvec4@F$00@glm@@QAE@W4ctor@1@@Z		; glm::tvec4<short,1>::tvec4<short,1>
PUBLIC	??0?$tvec4@F$00@glm@@QAE@F@Z			; glm::tvec4<short,1>::tvec4<short,1>
PUBLIC	??0?$tvec4@F$00@glm@@QAE@FFFF@Z			; glm::tvec4<short,1>::tvec4<short,1>
PUBLIC	??4?$tvec4@F$00@glm@@QAEAAU01@ABU01@@Z		; glm::tvec4<short,1>::operator=
PUBLIC	??E?$tvec4@F$00@glm@@QAEAAU01@XZ		; glm::tvec4<short,1>::operator++
PUBLIC	??F?$tvec4@F$00@glm@@QAEAAU01@XZ		; glm::tvec4<short,1>::operator--
PUBLIC	??E?$tvec4@F$00@glm@@QAE?AU01@H@Z		; glm::tvec4<short,1>::operator++
PUBLIC	??F?$tvec4@F$00@glm@@QAE?AU01@H@Z		; glm::tvec4<short,1>::operator--
PUBLIC	?length@?$tvec4@H$00@glm@@SAHXZ			; glm::tvec4<int,1>::length
PUBLIC	??A?$tvec4@H$00@glm@@QAEAAHH@Z			; glm::tvec4<int,1>::operator[]
PUBLIC	??A?$tvec4@H$00@glm@@QBEABHH@Z			; glm::tvec4<int,1>::operator[]
PUBLIC	??0?$tvec4@H$00@glm@@QAE@XZ			; glm::tvec4<int,1>::tvec4<int,1>
PUBLIC	??0?$tvec4@H$00@glm@@QAE@ABU01@@Z		; glm::tvec4<int,1>::tvec4<int,1>
PUBLIC	??0?$tvec4@H$00@glm@@QAE@W4ctor@1@@Z		; glm::tvec4<int,1>::tvec4<int,1>
PUBLIC	??0?$tvec4@H$00@glm@@QAE@H@Z			; glm::tvec4<int,1>::tvec4<int,1>
PUBLIC	??0?$tvec4@H$00@glm@@QAE@HHHH@Z			; glm::tvec4<int,1>::tvec4<int,1>
PUBLIC	??4?$tvec4@H$00@glm@@QAEAAU01@ABU01@@Z		; glm::tvec4<int,1>::operator=
PUBLIC	??E?$tvec4@H$00@glm@@QAEAAU01@XZ		; glm::tvec4<int,1>::operator++
PUBLIC	??F?$tvec4@H$00@glm@@QAEAAU01@XZ		; glm::tvec4<int,1>::operator--
PUBLIC	??E?$tvec4@H$00@glm@@QAE?AU01@H@Z		; glm::tvec4<int,1>::operator++
PUBLIC	??F?$tvec4@H$00@glm@@QAE?AU01@H@Z		; glm::tvec4<int,1>::operator--
PUBLIC	?length@?$tvec4@_J$00@glm@@SAHXZ		; glm::tvec4<__int64,1>::length
PUBLIC	??A?$tvec4@_J$00@glm@@QAEAA_JH@Z		; glm::tvec4<__int64,1>::operator[]
PUBLIC	??A?$tvec4@_J$00@glm@@QBEAB_JH@Z		; glm::tvec4<__int64,1>::operator[]
PUBLIC	??0?$tvec4@_J$00@glm@@QAE@XZ			; glm::tvec4<__int64,1>::tvec4<__int64,1>
PUBLIC	??0?$tvec4@_J$00@glm@@QAE@ABU01@@Z		; glm::tvec4<__int64,1>::tvec4<__int64,1>
PUBLIC	??0?$tvec4@_J$00@glm@@QAE@W4ctor@1@@Z		; glm::tvec4<__int64,1>::tvec4<__int64,1>
PUBLIC	??0?$tvec4@_J$00@glm@@QAE@_J@Z			; glm::tvec4<__int64,1>::tvec4<__int64,1>
PUBLIC	??0?$tvec4@_J$00@glm@@QAE@_J000@Z		; glm::tvec4<__int64,1>::tvec4<__int64,1>
PUBLIC	??4?$tvec4@_J$00@glm@@QAEAAU01@ABU01@@Z		; glm::tvec4<__int64,1>::operator=
PUBLIC	??E?$tvec4@_J$00@glm@@QAEAAU01@XZ		; glm::tvec4<__int64,1>::operator++
PUBLIC	??F?$tvec4@_J$00@glm@@QAEAAU01@XZ		; glm::tvec4<__int64,1>::operator--
PUBLIC	??E?$tvec4@_J$00@glm@@QAE?AU01@H@Z		; glm::tvec4<__int64,1>::operator++
PUBLIC	??F?$tvec4@_J$00@glm@@QAE?AU01@H@Z		; glm::tvec4<__int64,1>::operator--
PUBLIC	?length@?$tvec4@M$00@glm@@SAHXZ			; glm::tvec4<float,1>::length
PUBLIC	??A?$tvec4@M$00@glm@@QAEAAMH@Z			; glm::tvec4<float,1>::operator[]
PUBLIC	??A?$tvec4@M$00@glm@@QBEABMH@Z			; glm::tvec4<float,1>::operator[]
PUBLIC	??0?$tvec4@M$00@glm@@QAE@XZ			; glm::tvec4<float,1>::tvec4<float,1>
PUBLIC	??0?$tvec4@M$00@glm@@QAE@ABU01@@Z		; glm::tvec4<float,1>::tvec4<float,1>
PUBLIC	??0?$tvec4@M$00@glm@@QAE@W4ctor@1@@Z		; glm::tvec4<float,1>::tvec4<float,1>
PUBLIC	??0?$tvec4@M$00@glm@@QAE@M@Z			; glm::tvec4<float,1>::tvec4<float,1>
PUBLIC	??0?$tvec4@M$00@glm@@QAE@MMMM@Z			; glm::tvec4<float,1>::tvec4<float,1>
PUBLIC	??4?$tvec4@M$00@glm@@QAEAAU01@ABU01@@Z		; glm::tvec4<float,1>::operator=
PUBLIC	??E?$tvec4@M$00@glm@@QAEAAU01@XZ		; glm::tvec4<float,1>::operator++
PUBLIC	??F?$tvec4@M$00@glm@@QAEAAU01@XZ		; glm::tvec4<float,1>::operator--
PUBLIC	??E?$tvec4@M$00@glm@@QAE?AU01@H@Z		; glm::tvec4<float,1>::operator++
PUBLIC	??F?$tvec4@M$00@glm@@QAE?AU01@H@Z		; glm::tvec4<float,1>::operator--
PUBLIC	?length@?$tvec4@N$00@glm@@SAHXZ			; glm::tvec4<double,1>::length
PUBLIC	??A?$tvec4@N$00@glm@@QAEAANH@Z			; glm::tvec4<double,1>::operator[]
PUBLIC	??A?$tvec4@N$00@glm@@QBEABNH@Z			; glm::tvec4<double,1>::operator[]
PUBLIC	??0?$tvec4@N$00@glm@@QAE@XZ			; glm::tvec4<double,1>::tvec4<double,1>
PUBLIC	??0?$tvec4@N$00@glm@@QAE@ABU01@@Z		; glm::tvec4<double,1>::tvec4<double,1>
PUBLIC	??0?$tvec4@N$00@glm@@QAE@W4ctor@1@@Z		; glm::tvec4<double,1>::tvec4<double,1>
PUBLIC	??0?$tvec4@N$00@glm@@QAE@N@Z			; glm::tvec4<double,1>::tvec4<double,1>
PUBLIC	??0?$tvec4@N$00@glm@@QAE@NNNN@Z			; glm::tvec4<double,1>::tvec4<double,1>
PUBLIC	??4?$tvec4@N$00@glm@@QAEAAU01@ABU01@@Z		; glm::tvec4<double,1>::operator=
PUBLIC	??E?$tvec4@N$00@glm@@QAEAAU01@XZ		; glm::tvec4<double,1>::operator++
PUBLIC	??F?$tvec4@N$00@glm@@QAEAAU01@XZ		; glm::tvec4<double,1>::operator--
PUBLIC	??E?$tvec4@N$00@glm@@QAE?AU01@H@Z		; glm::tvec4<double,1>::operator++
PUBLIC	??F?$tvec4@N$00@glm@@QAE?AU01@H@Z		; glm::tvec4<double,1>::operator--
PUBLIC	?length@?$tvec4@G$0A@@glm@@SAHXZ		; glm::tvec4<unsigned short,0>::length
PUBLIC	??A?$tvec4@G$0A@@glm@@QAEAAGH@Z			; glm::tvec4<unsigned short,0>::operator[]
PUBLIC	??A?$tvec4@G$0A@@glm@@QBEABGH@Z			; glm::tvec4<unsigned short,0>::operator[]
PUBLIC	??0?$tvec4@G$0A@@glm@@QAE@XZ			; glm::tvec4<unsigned short,0>::tvec4<unsigned short,0>
PUBLIC	??0?$tvec4@G$0A@@glm@@QAE@ABU01@@Z		; glm::tvec4<unsigned short,0>::tvec4<unsigned short,0>
PUBLIC	??0?$tvec4@G$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tvec4<unsigned short,0>::tvec4<unsigned short,0>
PUBLIC	??0?$tvec4@G$0A@@glm@@QAE@G@Z			; glm::tvec4<unsigned short,0>::tvec4<unsigned short,0>
PUBLIC	??0?$tvec4@G$0A@@glm@@QAE@GGGG@Z		; glm::tvec4<unsigned short,0>::tvec4<unsigned short,0>
PUBLIC	??4?$tvec4@G$0A@@glm@@QAEAAU01@ABU01@@Z		; glm::tvec4<unsigned short,0>::operator=
PUBLIC	??E?$tvec4@G$0A@@glm@@QAEAAU01@XZ		; glm::tvec4<unsigned short,0>::operator++
PUBLIC	??F?$tvec4@G$0A@@glm@@QAEAAU01@XZ		; glm::tvec4<unsigned short,0>::operator--
PUBLIC	??E?$tvec4@G$0A@@glm@@QAE?AU01@H@Z		; glm::tvec4<unsigned short,0>::operator++
PUBLIC	??F?$tvec4@G$0A@@glm@@QAE?AU01@H@Z		; glm::tvec4<unsigned short,0>::operator--
PUBLIC	?length@?$tvec4@I$0A@@glm@@SAHXZ		; glm::tvec4<unsigned int,0>::length
PUBLIC	??A?$tvec4@I$0A@@glm@@QAEAAIH@Z			; glm::tvec4<unsigned int,0>::operator[]
PUBLIC	??A?$tvec4@I$0A@@glm@@QBEABIH@Z			; glm::tvec4<unsigned int,0>::operator[]
PUBLIC	??0?$tvec4@I$0A@@glm@@QAE@XZ			; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>
PUBLIC	??0?$tvec4@I$0A@@glm@@QAE@ABU01@@Z		; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>
PUBLIC	??0?$tvec4@I$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>
PUBLIC	??0?$tvec4@I$0A@@glm@@QAE@I@Z			; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>
PUBLIC	??0?$tvec4@I$0A@@glm@@QAE@IIII@Z		; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>
PUBLIC	??4?$tvec4@I$0A@@glm@@QAEAAU01@ABU01@@Z		; glm::tvec4<unsigned int,0>::operator=
PUBLIC	??E?$tvec4@I$0A@@glm@@QAEAAU01@XZ		; glm::tvec4<unsigned int,0>::operator++
PUBLIC	??F?$tvec4@I$0A@@glm@@QAEAAU01@XZ		; glm::tvec4<unsigned int,0>::operator--
PUBLIC	??E?$tvec4@I$0A@@glm@@QAE?AU01@H@Z		; glm::tvec4<unsigned int,0>::operator++
PUBLIC	??F?$tvec4@I$0A@@glm@@QAE?AU01@H@Z		; glm::tvec4<unsigned int,0>::operator--
PUBLIC	?length@?$tvec4@_K$0A@@glm@@SAHXZ		; glm::tvec4<unsigned __int64,0>::length
PUBLIC	??A?$tvec4@_K$0A@@glm@@QAEAA_KH@Z		; glm::tvec4<unsigned __int64,0>::operator[]
PUBLIC	??A?$tvec4@_K$0A@@glm@@QBEAB_KH@Z		; glm::tvec4<unsigned __int64,0>::operator[]
PUBLIC	??0?$tvec4@_K$0A@@glm@@QAE@XZ			; glm::tvec4<unsigned __int64,0>::tvec4<unsigned __int64,0>
PUBLIC	??0?$tvec4@_K$0A@@glm@@QAE@ABU01@@Z		; glm::tvec4<unsigned __int64,0>::tvec4<unsigned __int64,0>
PUBLIC	??0?$tvec4@_K$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tvec4<unsigned __int64,0>::tvec4<unsigned __int64,0>
PUBLIC	??0?$tvec4@_K$0A@@glm@@QAE@_K@Z			; glm::tvec4<unsigned __int64,0>::tvec4<unsigned __int64,0>
PUBLIC	??0?$tvec4@_K$0A@@glm@@QAE@_K000@Z		; glm::tvec4<unsigned __int64,0>::tvec4<unsigned __int64,0>
PUBLIC	??4?$tvec4@_K$0A@@glm@@QAEAAU01@ABU01@@Z	; glm::tvec4<unsigned __int64,0>::operator=
PUBLIC	??E?$tvec4@_K$0A@@glm@@QAEAAU01@XZ		; glm::tvec4<unsigned __int64,0>::operator++
PUBLIC	??F?$tvec4@_K$0A@@glm@@QAEAAU01@XZ		; glm::tvec4<unsigned __int64,0>::operator--
PUBLIC	??E?$tvec4@_K$0A@@glm@@QAE?AU01@H@Z		; glm::tvec4<unsigned __int64,0>::operator++
PUBLIC	??F?$tvec4@_K$0A@@glm@@QAE?AU01@H@Z		; glm::tvec4<unsigned __int64,0>::operator--
PUBLIC	?length@?$tvec4@F$0A@@glm@@SAHXZ		; glm::tvec4<short,0>::length
PUBLIC	??A?$tvec4@F$0A@@glm@@QAEAAFH@Z			; glm::tvec4<short,0>::operator[]
PUBLIC	??A?$tvec4@F$0A@@glm@@QBEABFH@Z			; glm::tvec4<short,0>::operator[]
PUBLIC	??0?$tvec4@F$0A@@glm@@QAE@XZ			; glm::tvec4<short,0>::tvec4<short,0>
PUBLIC	??0?$tvec4@F$0A@@glm@@QAE@ABU01@@Z		; glm::tvec4<short,0>::tvec4<short,0>
PUBLIC	??0?$tvec4@F$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tvec4<short,0>::tvec4<short,0>
PUBLIC	??0?$tvec4@F$0A@@glm@@QAE@F@Z			; glm::tvec4<short,0>::tvec4<short,0>
PUBLIC	??0?$tvec4@F$0A@@glm@@QAE@FFFF@Z		; glm::tvec4<short,0>::tvec4<short,0>
PUBLIC	??4?$tvec4@F$0A@@glm@@QAEAAU01@ABU01@@Z		; glm::tvec4<short,0>::operator=
PUBLIC	??E?$tvec4@F$0A@@glm@@QAEAAU01@XZ		; glm::tvec4<short,0>::operator++
PUBLIC	??F?$tvec4@F$0A@@glm@@QAEAAU01@XZ		; glm::tvec4<short,0>::operator--
PUBLIC	??E?$tvec4@F$0A@@glm@@QAE?AU01@H@Z		; glm::tvec4<short,0>::operator++
PUBLIC	??F?$tvec4@F$0A@@glm@@QAE?AU01@H@Z		; glm::tvec4<short,0>::operator--
PUBLIC	?length@?$tvec4@H$0A@@glm@@SAHXZ		; glm::tvec4<int,0>::length
PUBLIC	??A?$tvec4@H$0A@@glm@@QAEAAHH@Z			; glm::tvec4<int,0>::operator[]
PUBLIC	??A?$tvec4@H$0A@@glm@@QBEABHH@Z			; glm::tvec4<int,0>::operator[]
PUBLIC	??0?$tvec4@H$0A@@glm@@QAE@XZ			; glm::tvec4<int,0>::tvec4<int,0>
PUBLIC	??0?$tvec4@H$0A@@glm@@QAE@ABU01@@Z		; glm::tvec4<int,0>::tvec4<int,0>
PUBLIC	??0?$tvec4@H$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tvec4<int,0>::tvec4<int,0>
PUBLIC	??0?$tvec4@H$0A@@glm@@QAE@H@Z			; glm::tvec4<int,0>::tvec4<int,0>
PUBLIC	??0?$tvec4@H$0A@@glm@@QAE@HHHH@Z		; glm::tvec4<int,0>::tvec4<int,0>
PUBLIC	??4?$tvec4@H$0A@@glm@@QAEAAU01@ABU01@@Z		; glm::tvec4<int,0>::operator=
PUBLIC	??E?$tvec4@H$0A@@glm@@QAEAAU01@XZ		; glm::tvec4<int,0>::operator++
PUBLIC	??F?$tvec4@H$0A@@glm@@QAEAAU01@XZ		; glm::tvec4<int,0>::operator--
PUBLIC	??E?$tvec4@H$0A@@glm@@QAE?AU01@H@Z		; glm::tvec4<int,0>::operator++
PUBLIC	??F?$tvec4@H$0A@@glm@@QAE?AU01@H@Z		; glm::tvec4<int,0>::operator--
PUBLIC	?length@?$tvec4@_J$0A@@glm@@SAHXZ		; glm::tvec4<__int64,0>::length
PUBLIC	??A?$tvec4@_J$0A@@glm@@QAEAA_JH@Z		; glm::tvec4<__int64,0>::operator[]
PUBLIC	??A?$tvec4@_J$0A@@glm@@QBEAB_JH@Z		; glm::tvec4<__int64,0>::operator[]
PUBLIC	??0?$tvec4@_J$0A@@glm@@QAE@XZ			; glm::tvec4<__int64,0>::tvec4<__int64,0>
PUBLIC	??0?$tvec4@_J$0A@@glm@@QAE@ABU01@@Z		; glm::tvec4<__int64,0>::tvec4<__int64,0>
PUBLIC	??0?$tvec4@_J$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tvec4<__int64,0>::tvec4<__int64,0>
PUBLIC	??0?$tvec4@_J$0A@@glm@@QAE@_J@Z			; glm::tvec4<__int64,0>::tvec4<__int64,0>
PUBLIC	??0?$tvec4@_J$0A@@glm@@QAE@_J000@Z		; glm::tvec4<__int64,0>::tvec4<__int64,0>
PUBLIC	??4?$tvec4@_J$0A@@glm@@QAEAAU01@ABU01@@Z	; glm::tvec4<__int64,0>::operator=
PUBLIC	??E?$tvec4@_J$0A@@glm@@QAEAAU01@XZ		; glm::tvec4<__int64,0>::operator++
PUBLIC	??F?$tvec4@_J$0A@@glm@@QAEAAU01@XZ		; glm::tvec4<__int64,0>::operator--
PUBLIC	??E?$tvec4@_J$0A@@glm@@QAE?AU01@H@Z		; glm::tvec4<__int64,0>::operator++
PUBLIC	??F?$tvec4@_J$0A@@glm@@QAE?AU01@H@Z		; glm::tvec4<__int64,0>::operator--
PUBLIC	?length@?$tvec4@N$0A@@glm@@SAHXZ		; glm::tvec4<double,0>::length
PUBLIC	??A?$tvec4@N$0A@@glm@@QAEAANH@Z			; glm::tvec4<double,0>::operator[]
PUBLIC	??A?$tvec4@N$0A@@glm@@QBEABNH@Z			; glm::tvec4<double,0>::operator[]
PUBLIC	??0?$tvec4@N$0A@@glm@@QAE@XZ			; glm::tvec4<double,0>::tvec4<double,0>
PUBLIC	??0?$tvec4@N$0A@@glm@@QAE@ABU01@@Z		; glm::tvec4<double,0>::tvec4<double,0>
PUBLIC	??0?$tvec4@N$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tvec4<double,0>::tvec4<double,0>
PUBLIC	??0?$tvec4@N$0A@@glm@@QAE@N@Z			; glm::tvec4<double,0>::tvec4<double,0>
PUBLIC	??0?$tvec4@N$0A@@glm@@QAE@NNNN@Z		; glm::tvec4<double,0>::tvec4<double,0>
PUBLIC	??4?$tvec4@N$0A@@glm@@QAEAAU01@ABU01@@Z		; glm::tvec4<double,0>::operator=
PUBLIC	??E?$tvec4@N$0A@@glm@@QAEAAU01@XZ		; glm::tvec4<double,0>::operator++
PUBLIC	??F?$tvec4@N$0A@@glm@@QAEAAU01@XZ		; glm::tvec4<double,0>::operator--
PUBLIC	??E?$tvec4@N$0A@@glm@@QAE?AU01@H@Z		; glm::tvec4<double,0>::operator++
PUBLIC	??F?$tvec4@N$0A@@glm@@QAE?AU01@H@Z		; glm::tvec4<double,0>::operator--
PUBLIC	??0?$tmat2x2@M$01@glm@@QAE@XZ			; glm::tmat2x2<float,2>::tmat2x2<float,2>
PUBLIC	??0?$tmat2x2@M$01@glm@@QAE@ABU01@@Z		; glm::tmat2x2<float,2>::tmat2x2<float,2>
PUBLIC	??0?$tmat2x2@M$01@glm@@QAE@W4ctor@1@@Z		; glm::tmat2x2<float,2>::tmat2x2<float,2>
PUBLIC	??0?$tmat2x2@M$01@glm@@QAE@M@Z			; glm::tmat2x2<float,2>::tmat2x2<float,2>
PUBLIC	??0?$tmat2x2@M$01@glm@@QAE@ABM000@Z		; glm::tmat2x2<float,2>::tmat2x2<float,2>
PUBLIC	??0?$tmat2x2@M$01@glm@@QAE@ABU?$tvec2@M$01@1@0@Z ; glm::tmat2x2<float,2>::tmat2x2<float,2>
PUBLIC	??0?$tmat2x2@M$01@glm@@QAE@ABU?$tmat3x3@M$01@1@@Z ; glm::tmat2x2<float,2>::tmat2x2<float,2>
PUBLIC	??0?$tmat2x2@M$01@glm@@QAE@ABU?$tmat4x4@M$01@1@@Z ; glm::tmat2x2<float,2>::tmat2x2<float,2>
PUBLIC	??0?$tmat2x2@M$01@glm@@QAE@ABU?$tmat2x3@M$01@1@@Z ; glm::tmat2x2<float,2>::tmat2x2<float,2>
PUBLIC	??0?$tmat2x2@M$01@glm@@QAE@ABU?$tmat3x2@M$01@1@@Z ; glm::tmat2x2<float,2>::tmat2x2<float,2>
PUBLIC	??0?$tmat2x2@M$01@glm@@QAE@ABU?$tmat2x4@M$01@1@@Z ; glm::tmat2x2<float,2>::tmat2x2<float,2>
PUBLIC	??0?$tmat2x2@M$01@glm@@QAE@ABU?$tmat4x2@M$01@1@@Z ; glm::tmat2x2<float,2>::tmat2x2<float,2>
PUBLIC	??0?$tmat2x2@M$01@glm@@QAE@ABU?$tmat3x4@M$01@1@@Z ; glm::tmat2x2<float,2>::tmat2x2<float,2>
PUBLIC	??0?$tmat2x2@M$01@glm@@QAE@ABU?$tmat4x3@M$01@1@@Z ; glm::tmat2x2<float,2>::tmat2x2<float,2>
PUBLIC	?length@?$tmat2x2@M$01@glm@@SAHXZ		; glm::tmat2x2<float,2>::length
PUBLIC	??A?$tmat2x2@M$01@glm@@QAEAAU?$tvec2@M$01@1@H@Z	; glm::tmat2x2<float,2>::operator[]
PUBLIC	??A?$tmat2x2@M$01@glm@@QBEABU?$tvec2@M$01@1@H@Z	; glm::tmat2x2<float,2>::operator[]
PUBLIC	??4?$tmat2x2@M$01@glm@@QAEAAU01@ABU01@@Z	; glm::tmat2x2<float,2>::operator=
PUBLIC	??E?$tmat2x2@M$01@glm@@QAEAAU01@XZ		; glm::tmat2x2<float,2>::operator++
PUBLIC	??F?$tmat2x2@M$01@glm@@QAEAAU01@XZ		; glm::tmat2x2<float,2>::operator--
PUBLIC	??E?$tmat2x2@M$01@glm@@QAE?AU01@H@Z		; glm::tmat2x2<float,2>::operator++
PUBLIC	??F?$tmat2x2@M$01@glm@@QAE?AU01@H@Z		; glm::tmat2x2<float,2>::operator--
PUBLIC	??0?$tmat2x2@N$01@glm@@QAE@XZ			; glm::tmat2x2<double,2>::tmat2x2<double,2>
PUBLIC	??0?$tmat2x2@N$01@glm@@QAE@ABU01@@Z		; glm::tmat2x2<double,2>::tmat2x2<double,2>
PUBLIC	??0?$tmat2x2@N$01@glm@@QAE@W4ctor@1@@Z		; glm::tmat2x2<double,2>::tmat2x2<double,2>
PUBLIC	??0?$tmat2x2@N$01@glm@@QAE@N@Z			; glm::tmat2x2<double,2>::tmat2x2<double,2>
PUBLIC	??0?$tmat2x2@N$01@glm@@QAE@ABN000@Z		; glm::tmat2x2<double,2>::tmat2x2<double,2>
PUBLIC	??0?$tmat2x2@N$01@glm@@QAE@ABU?$tvec2@N$01@1@0@Z ; glm::tmat2x2<double,2>::tmat2x2<double,2>
PUBLIC	??0?$tmat2x2@N$01@glm@@QAE@ABU?$tmat3x3@N$01@1@@Z ; glm::tmat2x2<double,2>::tmat2x2<double,2>
PUBLIC	??0?$tmat2x2@N$01@glm@@QAE@ABU?$tmat4x4@N$01@1@@Z ; glm::tmat2x2<double,2>::tmat2x2<double,2>
PUBLIC	??0?$tmat2x2@N$01@glm@@QAE@ABU?$tmat2x3@N$01@1@@Z ; glm::tmat2x2<double,2>::tmat2x2<double,2>
PUBLIC	??0?$tmat2x2@N$01@glm@@QAE@ABU?$tmat3x2@N$01@1@@Z ; glm::tmat2x2<double,2>::tmat2x2<double,2>
PUBLIC	??0?$tmat2x2@N$01@glm@@QAE@ABU?$tmat2x4@N$01@1@@Z ; glm::tmat2x2<double,2>::tmat2x2<double,2>
PUBLIC	??0?$tmat2x2@N$01@glm@@QAE@ABU?$tmat4x2@N$01@1@@Z ; glm::tmat2x2<double,2>::tmat2x2<double,2>
PUBLIC	??0?$tmat2x2@N$01@glm@@QAE@ABU?$tmat3x4@N$01@1@@Z ; glm::tmat2x2<double,2>::tmat2x2<double,2>
PUBLIC	??0?$tmat2x2@N$01@glm@@QAE@ABU?$tmat4x3@N$01@1@@Z ; glm::tmat2x2<double,2>::tmat2x2<double,2>
PUBLIC	?length@?$tmat2x2@N$01@glm@@SAHXZ		; glm::tmat2x2<double,2>::length
PUBLIC	??A?$tmat2x2@N$01@glm@@QAEAAU?$tvec2@N$01@1@H@Z	; glm::tmat2x2<double,2>::operator[]
PUBLIC	??A?$tmat2x2@N$01@glm@@QBEABU?$tvec2@N$01@1@H@Z	; glm::tmat2x2<double,2>::operator[]
PUBLIC	??4?$tmat2x2@N$01@glm@@QAEAAU01@ABU01@@Z	; glm::tmat2x2<double,2>::operator=
PUBLIC	??E?$tmat2x2@N$01@glm@@QAEAAU01@XZ		; glm::tmat2x2<double,2>::operator++
PUBLIC	??F?$tmat2x2@N$01@glm@@QAEAAU01@XZ		; glm::tmat2x2<double,2>::operator--
PUBLIC	??E?$tmat2x2@N$01@glm@@QAE?AU01@H@Z		; glm::tmat2x2<double,2>::operator++
PUBLIC	??F?$tmat2x2@N$01@glm@@QAE?AU01@H@Z		; glm::tmat2x2<double,2>::operator--
PUBLIC	??0?$tmat2x2@M$00@glm@@QAE@XZ			; glm::tmat2x2<float,1>::tmat2x2<float,1>
PUBLIC	??0?$tmat2x2@M$00@glm@@QAE@ABU01@@Z		; glm::tmat2x2<float,1>::tmat2x2<float,1>
PUBLIC	??0?$tmat2x2@M$00@glm@@QAE@W4ctor@1@@Z		; glm::tmat2x2<float,1>::tmat2x2<float,1>
PUBLIC	??0?$tmat2x2@M$00@glm@@QAE@M@Z			; glm::tmat2x2<float,1>::tmat2x2<float,1>
PUBLIC	??0?$tmat2x2@M$00@glm@@QAE@ABM000@Z		; glm::tmat2x2<float,1>::tmat2x2<float,1>
PUBLIC	??0?$tmat2x2@M$00@glm@@QAE@ABU?$tvec2@M$00@1@0@Z ; glm::tmat2x2<float,1>::tmat2x2<float,1>
PUBLIC	??0?$tmat2x2@M$00@glm@@QAE@ABU?$tmat3x3@M$00@1@@Z ; glm::tmat2x2<float,1>::tmat2x2<float,1>
PUBLIC	??0?$tmat2x2@M$00@glm@@QAE@ABU?$tmat4x4@M$00@1@@Z ; glm::tmat2x2<float,1>::tmat2x2<float,1>
PUBLIC	??0?$tmat2x2@M$00@glm@@QAE@ABU?$tmat2x3@M$00@1@@Z ; glm::tmat2x2<float,1>::tmat2x2<float,1>
PUBLIC	??0?$tmat2x2@M$00@glm@@QAE@ABU?$tmat3x2@M$00@1@@Z ; glm::tmat2x2<float,1>::tmat2x2<float,1>
PUBLIC	??0?$tmat2x2@M$00@glm@@QAE@ABU?$tmat2x4@M$00@1@@Z ; glm::tmat2x2<float,1>::tmat2x2<float,1>
PUBLIC	??0?$tmat2x2@M$00@glm@@QAE@ABU?$tmat4x2@M$00@1@@Z ; glm::tmat2x2<float,1>::tmat2x2<float,1>
PUBLIC	??0?$tmat2x2@M$00@glm@@QAE@ABU?$tmat3x4@M$00@1@@Z ; glm::tmat2x2<float,1>::tmat2x2<float,1>
PUBLIC	??0?$tmat2x2@M$00@glm@@QAE@ABU?$tmat4x3@M$00@1@@Z ; glm::tmat2x2<float,1>::tmat2x2<float,1>
PUBLIC	?length@?$tmat2x2@M$00@glm@@SAHXZ		; glm::tmat2x2<float,1>::length
PUBLIC	??A?$tmat2x2@M$00@glm@@QAEAAU?$tvec2@M$00@1@H@Z	; glm::tmat2x2<float,1>::operator[]
PUBLIC	??A?$tmat2x2@M$00@glm@@QBEABU?$tvec2@M$00@1@H@Z	; glm::tmat2x2<float,1>::operator[]
PUBLIC	??4?$tmat2x2@M$00@glm@@QAEAAU01@ABU01@@Z	; glm::tmat2x2<float,1>::operator=
PUBLIC	??E?$tmat2x2@M$00@glm@@QAEAAU01@XZ		; glm::tmat2x2<float,1>::operator++
PUBLIC	??F?$tmat2x2@M$00@glm@@QAEAAU01@XZ		; glm::tmat2x2<float,1>::operator--
PUBLIC	??E?$tmat2x2@M$00@glm@@QAE?AU01@H@Z		; glm::tmat2x2<float,1>::operator++
PUBLIC	??F?$tmat2x2@M$00@glm@@QAE?AU01@H@Z		; glm::tmat2x2<float,1>::operator--
PUBLIC	??0?$tmat2x2@N$00@glm@@QAE@XZ			; glm::tmat2x2<double,1>::tmat2x2<double,1>
PUBLIC	??0?$tmat2x2@N$00@glm@@QAE@ABU01@@Z		; glm::tmat2x2<double,1>::tmat2x2<double,1>
PUBLIC	??0?$tmat2x2@N$00@glm@@QAE@W4ctor@1@@Z		; glm::tmat2x2<double,1>::tmat2x2<double,1>
PUBLIC	??0?$tmat2x2@N$00@glm@@QAE@N@Z			; glm::tmat2x2<double,1>::tmat2x2<double,1>
PUBLIC	??0?$tmat2x2@N$00@glm@@QAE@ABN000@Z		; glm::tmat2x2<double,1>::tmat2x2<double,1>
PUBLIC	??0?$tmat2x2@N$00@glm@@QAE@ABU?$tvec2@N$00@1@0@Z ; glm::tmat2x2<double,1>::tmat2x2<double,1>
PUBLIC	??0?$tmat2x2@N$00@glm@@QAE@ABU?$tmat3x3@N$00@1@@Z ; glm::tmat2x2<double,1>::tmat2x2<double,1>
PUBLIC	??0?$tmat2x2@N$00@glm@@QAE@ABU?$tmat4x4@N$00@1@@Z ; glm::tmat2x2<double,1>::tmat2x2<double,1>
PUBLIC	??0?$tmat2x2@N$00@glm@@QAE@ABU?$tmat2x3@N$00@1@@Z ; glm::tmat2x2<double,1>::tmat2x2<double,1>
PUBLIC	??0?$tmat2x2@N$00@glm@@QAE@ABU?$tmat3x2@N$00@1@@Z ; glm::tmat2x2<double,1>::tmat2x2<double,1>
PUBLIC	??0?$tmat2x2@N$00@glm@@QAE@ABU?$tmat2x4@N$00@1@@Z ; glm::tmat2x2<double,1>::tmat2x2<double,1>
PUBLIC	??0?$tmat2x2@N$00@glm@@QAE@ABU?$tmat4x2@N$00@1@@Z ; glm::tmat2x2<double,1>::tmat2x2<double,1>
PUBLIC	??0?$tmat2x2@N$00@glm@@QAE@ABU?$tmat3x4@N$00@1@@Z ; glm::tmat2x2<double,1>::tmat2x2<double,1>
PUBLIC	??0?$tmat2x2@N$00@glm@@QAE@ABU?$tmat4x3@N$00@1@@Z ; glm::tmat2x2<double,1>::tmat2x2<double,1>
PUBLIC	?length@?$tmat2x2@N$00@glm@@SAHXZ		; glm::tmat2x2<double,1>::length
PUBLIC	??A?$tmat2x2@N$00@glm@@QAEAAU?$tvec2@N$00@1@H@Z	; glm::tmat2x2<double,1>::operator[]
PUBLIC	??A?$tmat2x2@N$00@glm@@QBEABU?$tvec2@N$00@1@H@Z	; glm::tmat2x2<double,1>::operator[]
PUBLIC	??4?$tmat2x2@N$00@glm@@QAEAAU01@ABU01@@Z	; glm::tmat2x2<double,1>::operator=
PUBLIC	??E?$tmat2x2@N$00@glm@@QAEAAU01@XZ		; glm::tmat2x2<double,1>::operator++
PUBLIC	??F?$tmat2x2@N$00@glm@@QAEAAU01@XZ		; glm::tmat2x2<double,1>::operator--
PUBLIC	??E?$tmat2x2@N$00@glm@@QAE?AU01@H@Z		; glm::tmat2x2<double,1>::operator++
PUBLIC	??F?$tmat2x2@N$00@glm@@QAE?AU01@H@Z		; glm::tmat2x2<double,1>::operator--
PUBLIC	??0?$tmat2x2@M$0A@@glm@@QAE@XZ			; glm::tmat2x2<float,0>::tmat2x2<float,0>
PUBLIC	??0?$tmat2x2@M$0A@@glm@@QAE@ABU01@@Z		; glm::tmat2x2<float,0>::tmat2x2<float,0>
PUBLIC	??0?$tmat2x2@M$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tmat2x2<float,0>::tmat2x2<float,0>
PUBLIC	??0?$tmat2x2@M$0A@@glm@@QAE@M@Z			; glm::tmat2x2<float,0>::tmat2x2<float,0>
PUBLIC	??0?$tmat2x2@M$0A@@glm@@QAE@ABM000@Z		; glm::tmat2x2<float,0>::tmat2x2<float,0>
PUBLIC	??0?$tmat2x2@M$0A@@glm@@QAE@ABU?$tvec2@M$0A@@1@0@Z ; glm::tmat2x2<float,0>::tmat2x2<float,0>
PUBLIC	??0?$tmat2x2@M$0A@@glm@@QAE@ABU?$tmat3x3@M$0A@@1@@Z ; glm::tmat2x2<float,0>::tmat2x2<float,0>
PUBLIC	??0?$tmat2x2@M$0A@@glm@@QAE@ABU?$tmat4x4@M$0A@@1@@Z ; glm::tmat2x2<float,0>::tmat2x2<float,0>
PUBLIC	??0?$tmat2x2@M$0A@@glm@@QAE@ABU?$tmat2x3@M$0A@@1@@Z ; glm::tmat2x2<float,0>::tmat2x2<float,0>
PUBLIC	??0?$tmat2x2@M$0A@@glm@@QAE@ABU?$tmat3x2@M$0A@@1@@Z ; glm::tmat2x2<float,0>::tmat2x2<float,0>
PUBLIC	??0?$tmat2x2@M$0A@@glm@@QAE@ABU?$tmat2x4@M$0A@@1@@Z ; glm::tmat2x2<float,0>::tmat2x2<float,0>
PUBLIC	??0?$tmat2x2@M$0A@@glm@@QAE@ABU?$tmat4x2@M$0A@@1@@Z ; glm::tmat2x2<float,0>::tmat2x2<float,0>
PUBLIC	??0?$tmat2x2@M$0A@@glm@@QAE@ABU?$tmat3x4@M$0A@@1@@Z ; glm::tmat2x2<float,0>::tmat2x2<float,0>
PUBLIC	??0?$tmat2x2@M$0A@@glm@@QAE@ABU?$tmat4x3@M$0A@@1@@Z ; glm::tmat2x2<float,0>::tmat2x2<float,0>
PUBLIC	?length@?$tmat2x2@M$0A@@glm@@SAHXZ		; glm::tmat2x2<float,0>::length
PUBLIC	??A?$tmat2x2@M$0A@@glm@@QAEAAU?$tvec2@M$0A@@1@H@Z ; glm::tmat2x2<float,0>::operator[]
PUBLIC	??A?$tmat2x2@M$0A@@glm@@QBEABU?$tvec2@M$0A@@1@H@Z ; glm::tmat2x2<float,0>::operator[]
PUBLIC	??4?$tmat2x2@M$0A@@glm@@QAEAAU01@ABU01@@Z	; glm::tmat2x2<float,0>::operator=
PUBLIC	??E?$tmat2x2@M$0A@@glm@@QAEAAU01@XZ		; glm::tmat2x2<float,0>::operator++
PUBLIC	??F?$tmat2x2@M$0A@@glm@@QAEAAU01@XZ		; glm::tmat2x2<float,0>::operator--
PUBLIC	??E?$tmat2x2@M$0A@@glm@@QAE?AU01@H@Z		; glm::tmat2x2<float,0>::operator++
PUBLIC	??F?$tmat2x2@M$0A@@glm@@QAE?AU01@H@Z		; glm::tmat2x2<float,0>::operator--
PUBLIC	??0?$tmat2x2@N$0A@@glm@@QAE@XZ			; glm::tmat2x2<double,0>::tmat2x2<double,0>
PUBLIC	??0?$tmat2x2@N$0A@@glm@@QAE@ABU01@@Z		; glm::tmat2x2<double,0>::tmat2x2<double,0>
PUBLIC	??0?$tmat2x2@N$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tmat2x2<double,0>::tmat2x2<double,0>
PUBLIC	??0?$tmat2x2@N$0A@@glm@@QAE@N@Z			; glm::tmat2x2<double,0>::tmat2x2<double,0>
PUBLIC	??0?$tmat2x2@N$0A@@glm@@QAE@ABN000@Z		; glm::tmat2x2<double,0>::tmat2x2<double,0>
PUBLIC	??0?$tmat2x2@N$0A@@glm@@QAE@ABU?$tvec2@N$0A@@1@0@Z ; glm::tmat2x2<double,0>::tmat2x2<double,0>
PUBLIC	??0?$tmat2x2@N$0A@@glm@@QAE@ABU?$tmat3x3@N$0A@@1@@Z ; glm::tmat2x2<double,0>::tmat2x2<double,0>
PUBLIC	??0?$tmat2x2@N$0A@@glm@@QAE@ABU?$tmat4x4@N$0A@@1@@Z ; glm::tmat2x2<double,0>::tmat2x2<double,0>
PUBLIC	??0?$tmat2x2@N$0A@@glm@@QAE@ABU?$tmat2x3@N$0A@@1@@Z ; glm::tmat2x2<double,0>::tmat2x2<double,0>
PUBLIC	??0?$tmat2x2@N$0A@@glm@@QAE@ABU?$tmat3x2@N$0A@@1@@Z ; glm::tmat2x2<double,0>::tmat2x2<double,0>
PUBLIC	??0?$tmat2x2@N$0A@@glm@@QAE@ABU?$tmat2x4@N$0A@@1@@Z ; glm::tmat2x2<double,0>::tmat2x2<double,0>
PUBLIC	??0?$tmat2x2@N$0A@@glm@@QAE@ABU?$tmat4x2@N$0A@@1@@Z ; glm::tmat2x2<double,0>::tmat2x2<double,0>
PUBLIC	??0?$tmat2x2@N$0A@@glm@@QAE@ABU?$tmat3x4@N$0A@@1@@Z ; glm::tmat2x2<double,0>::tmat2x2<double,0>
PUBLIC	??0?$tmat2x2@N$0A@@glm@@QAE@ABU?$tmat4x3@N$0A@@1@@Z ; glm::tmat2x2<double,0>::tmat2x2<double,0>
PUBLIC	?length@?$tmat2x2@N$0A@@glm@@SAHXZ		; glm::tmat2x2<double,0>::length
PUBLIC	??A?$tmat2x2@N$0A@@glm@@QAEAAU?$tvec2@N$0A@@1@H@Z ; glm::tmat2x2<double,0>::operator[]
PUBLIC	??A?$tmat2x2@N$0A@@glm@@QBEABU?$tvec2@N$0A@@1@H@Z ; glm::tmat2x2<double,0>::operator[]
PUBLIC	??4?$tmat2x2@N$0A@@glm@@QAEAAU01@ABU01@@Z	; glm::tmat2x2<double,0>::operator=
PUBLIC	??E?$tmat2x2@N$0A@@glm@@QAEAAU01@XZ		; glm::tmat2x2<double,0>::operator++
PUBLIC	??F?$tmat2x2@N$0A@@glm@@QAEAAU01@XZ		; glm::tmat2x2<double,0>::operator--
PUBLIC	??E?$tmat2x2@N$0A@@glm@@QAE?AU01@H@Z		; glm::tmat2x2<double,0>::operator++
PUBLIC	??F?$tmat2x2@N$0A@@glm@@QAE?AU01@H@Z		; glm::tmat2x2<double,0>::operator--
PUBLIC	??0?$tmat2x3@M$01@glm@@QAE@XZ			; glm::tmat2x3<float,2>::tmat2x3<float,2>
PUBLIC	??0?$tmat2x3@M$01@glm@@QAE@ABU01@@Z		; glm::tmat2x3<float,2>::tmat2x3<float,2>
PUBLIC	??0?$tmat2x3@M$01@glm@@QAE@W4ctor@1@@Z		; glm::tmat2x3<float,2>::tmat2x3<float,2>
PUBLIC	??0?$tmat2x3@M$01@glm@@QAE@M@Z			; glm::tmat2x3<float,2>::tmat2x3<float,2>
PUBLIC	??0?$tmat2x3@M$01@glm@@QAE@MMMMMM@Z		; glm::tmat2x3<float,2>::tmat2x3<float,2>
PUBLIC	??0?$tmat2x3@M$01@glm@@QAE@ABU?$tvec3@M$01@1@0@Z ; glm::tmat2x3<float,2>::tmat2x3<float,2>
PUBLIC	??0?$tmat2x3@M$01@glm@@QAE@ABU?$tmat2x2@M$01@1@@Z ; glm::tmat2x3<float,2>::tmat2x3<float,2>
PUBLIC	??0?$tmat2x3@M$01@glm@@QAE@ABU?$tmat3x3@M$01@1@@Z ; glm::tmat2x3<float,2>::tmat2x3<float,2>
PUBLIC	??0?$tmat2x3@M$01@glm@@QAE@ABU?$tmat4x4@M$01@1@@Z ; glm::tmat2x3<float,2>::tmat2x3<float,2>
PUBLIC	??0?$tmat2x3@M$01@glm@@QAE@ABU?$tmat2x4@M$01@1@@Z ; glm::tmat2x3<float,2>::tmat2x3<float,2>
PUBLIC	??0?$tmat2x3@M$01@glm@@QAE@ABU?$tmat3x2@M$01@1@@Z ; glm::tmat2x3<float,2>::tmat2x3<float,2>
PUBLIC	??0?$tmat2x3@M$01@glm@@QAE@ABU?$tmat3x4@M$01@1@@Z ; glm::tmat2x3<float,2>::tmat2x3<float,2>
PUBLIC	??0?$tmat2x3@M$01@glm@@QAE@ABU?$tmat4x2@M$01@1@@Z ; glm::tmat2x3<float,2>::tmat2x3<float,2>
PUBLIC	??0?$tmat2x3@M$01@glm@@QAE@ABU?$tmat4x3@M$01@1@@Z ; glm::tmat2x3<float,2>::tmat2x3<float,2>
PUBLIC	?length@?$tmat2x3@M$01@glm@@SAHXZ		; glm::tmat2x3<float,2>::length
PUBLIC	??A?$tmat2x3@M$01@glm@@QAEAAU?$tvec3@M$01@1@H@Z	; glm::tmat2x3<float,2>::operator[]
PUBLIC	??A?$tmat2x3@M$01@glm@@QBEABU?$tvec3@M$01@1@H@Z	; glm::tmat2x3<float,2>::operator[]
PUBLIC	??4?$tmat2x3@M$01@glm@@QAEAAU01@ABU01@@Z	; glm::tmat2x3<float,2>::operator=
PUBLIC	??E?$tmat2x3@M$01@glm@@QAEAAU01@XZ		; glm::tmat2x3<float,2>::operator++
PUBLIC	??F?$tmat2x3@M$01@glm@@QAEAAU01@XZ		; glm::tmat2x3<float,2>::operator--
PUBLIC	??E?$tmat2x3@M$01@glm@@QAE?AU01@H@Z		; glm::tmat2x3<float,2>::operator++
PUBLIC	??F?$tmat2x3@M$01@glm@@QAE?AU01@H@Z		; glm::tmat2x3<float,2>::operator--
PUBLIC	??0?$tmat2x3@N$01@glm@@QAE@XZ			; glm::tmat2x3<double,2>::tmat2x3<double,2>
PUBLIC	??0?$tmat2x3@N$01@glm@@QAE@ABU01@@Z		; glm::tmat2x3<double,2>::tmat2x3<double,2>
PUBLIC	??0?$tmat2x3@N$01@glm@@QAE@W4ctor@1@@Z		; glm::tmat2x3<double,2>::tmat2x3<double,2>
PUBLIC	??0?$tmat2x3@N$01@glm@@QAE@N@Z			; glm::tmat2x3<double,2>::tmat2x3<double,2>
PUBLIC	??0?$tmat2x3@N$01@glm@@QAE@NNNNNN@Z		; glm::tmat2x3<double,2>::tmat2x3<double,2>
PUBLIC	??0?$tmat2x3@N$01@glm@@QAE@ABU?$tvec3@N$01@1@0@Z ; glm::tmat2x3<double,2>::tmat2x3<double,2>
PUBLIC	??0?$tmat2x3@N$01@glm@@QAE@ABU?$tmat2x2@N$01@1@@Z ; glm::tmat2x3<double,2>::tmat2x3<double,2>
PUBLIC	??0?$tmat2x3@N$01@glm@@QAE@ABU?$tmat3x3@N$01@1@@Z ; glm::tmat2x3<double,2>::tmat2x3<double,2>
PUBLIC	??0?$tmat2x3@N$01@glm@@QAE@ABU?$tmat4x4@N$01@1@@Z ; glm::tmat2x3<double,2>::tmat2x3<double,2>
PUBLIC	??0?$tmat2x3@N$01@glm@@QAE@ABU?$tmat2x4@N$01@1@@Z ; glm::tmat2x3<double,2>::tmat2x3<double,2>
PUBLIC	??0?$tmat2x3@N$01@glm@@QAE@ABU?$tmat3x2@N$01@1@@Z ; glm::tmat2x3<double,2>::tmat2x3<double,2>
PUBLIC	??0?$tmat2x3@N$01@glm@@QAE@ABU?$tmat3x4@N$01@1@@Z ; glm::tmat2x3<double,2>::tmat2x3<double,2>
PUBLIC	??0?$tmat2x3@N$01@glm@@QAE@ABU?$tmat4x2@N$01@1@@Z ; glm::tmat2x3<double,2>::tmat2x3<double,2>
PUBLIC	??0?$tmat2x3@N$01@glm@@QAE@ABU?$tmat4x3@N$01@1@@Z ; glm::tmat2x3<double,2>::tmat2x3<double,2>
PUBLIC	?length@?$tmat2x3@N$01@glm@@SAHXZ		; glm::tmat2x3<double,2>::length
PUBLIC	??A?$tmat2x3@N$01@glm@@QAEAAU?$tvec3@N$01@1@H@Z	; glm::tmat2x3<double,2>::operator[]
PUBLIC	??A?$tmat2x3@N$01@glm@@QBEABU?$tvec3@N$01@1@H@Z	; glm::tmat2x3<double,2>::operator[]
PUBLIC	??4?$tmat2x3@N$01@glm@@QAEAAU01@ABU01@@Z	; glm::tmat2x3<double,2>::operator=
PUBLIC	??E?$tmat2x3@N$01@glm@@QAEAAU01@XZ		; glm::tmat2x3<double,2>::operator++
PUBLIC	??F?$tmat2x3@N$01@glm@@QAEAAU01@XZ		; glm::tmat2x3<double,2>::operator--
PUBLIC	??E?$tmat2x3@N$01@glm@@QAE?AU01@H@Z		; glm::tmat2x3<double,2>::operator++
PUBLIC	??F?$tmat2x3@N$01@glm@@QAE?AU01@H@Z		; glm::tmat2x3<double,2>::operator--
PUBLIC	??0?$tmat2x3@M$00@glm@@QAE@XZ			; glm::tmat2x3<float,1>::tmat2x3<float,1>
PUBLIC	??0?$tmat2x3@M$00@glm@@QAE@ABU01@@Z		; glm::tmat2x3<float,1>::tmat2x3<float,1>
PUBLIC	??0?$tmat2x3@M$00@glm@@QAE@W4ctor@1@@Z		; glm::tmat2x3<float,1>::tmat2x3<float,1>
PUBLIC	??0?$tmat2x3@M$00@glm@@QAE@M@Z			; glm::tmat2x3<float,1>::tmat2x3<float,1>
PUBLIC	??0?$tmat2x3@M$00@glm@@QAE@MMMMMM@Z		; glm::tmat2x3<float,1>::tmat2x3<float,1>
PUBLIC	??0?$tmat2x3@M$00@glm@@QAE@ABU?$tvec3@M$00@1@0@Z ; glm::tmat2x3<float,1>::tmat2x3<float,1>
PUBLIC	??0?$tmat2x3@M$00@glm@@QAE@ABU?$tmat2x2@M$00@1@@Z ; glm::tmat2x3<float,1>::tmat2x3<float,1>
PUBLIC	??0?$tmat2x3@M$00@glm@@QAE@ABU?$tmat3x3@M$00@1@@Z ; glm::tmat2x3<float,1>::tmat2x3<float,1>
PUBLIC	??0?$tmat2x3@M$00@glm@@QAE@ABU?$tmat4x4@M$00@1@@Z ; glm::tmat2x3<float,1>::tmat2x3<float,1>
PUBLIC	??0?$tmat2x3@M$00@glm@@QAE@ABU?$tmat2x4@M$00@1@@Z ; glm::tmat2x3<float,1>::tmat2x3<float,1>
PUBLIC	??0?$tmat2x3@M$00@glm@@QAE@ABU?$tmat3x2@M$00@1@@Z ; glm::tmat2x3<float,1>::tmat2x3<float,1>
PUBLIC	??0?$tmat2x3@M$00@glm@@QAE@ABU?$tmat3x4@M$00@1@@Z ; glm::tmat2x3<float,1>::tmat2x3<float,1>
PUBLIC	??0?$tmat2x3@M$00@glm@@QAE@ABU?$tmat4x2@M$00@1@@Z ; glm::tmat2x3<float,1>::tmat2x3<float,1>
PUBLIC	??0?$tmat2x3@M$00@glm@@QAE@ABU?$tmat4x3@M$00@1@@Z ; glm::tmat2x3<float,1>::tmat2x3<float,1>
PUBLIC	?length@?$tmat2x3@M$00@glm@@SAHXZ		; glm::tmat2x3<float,1>::length
PUBLIC	??A?$tmat2x3@M$00@glm@@QAEAAU?$tvec3@M$00@1@H@Z	; glm::tmat2x3<float,1>::operator[]
PUBLIC	??A?$tmat2x3@M$00@glm@@QBEABU?$tvec3@M$00@1@H@Z	; glm::tmat2x3<float,1>::operator[]
PUBLIC	??4?$tmat2x3@M$00@glm@@QAEAAU01@ABU01@@Z	; glm::tmat2x3<float,1>::operator=
PUBLIC	??E?$tmat2x3@M$00@glm@@QAEAAU01@XZ		; glm::tmat2x3<float,1>::operator++
PUBLIC	??F?$tmat2x3@M$00@glm@@QAEAAU01@XZ		; glm::tmat2x3<float,1>::operator--
PUBLIC	??E?$tmat2x3@M$00@glm@@QAE?AU01@H@Z		; glm::tmat2x3<float,1>::operator++
PUBLIC	??F?$tmat2x3@M$00@glm@@QAE?AU01@H@Z		; glm::tmat2x3<float,1>::operator--
PUBLIC	??0?$tmat2x3@N$00@glm@@QAE@XZ			; glm::tmat2x3<double,1>::tmat2x3<double,1>
PUBLIC	??0?$tmat2x3@N$00@glm@@QAE@ABU01@@Z		; glm::tmat2x3<double,1>::tmat2x3<double,1>
PUBLIC	??0?$tmat2x3@N$00@glm@@QAE@W4ctor@1@@Z		; glm::tmat2x3<double,1>::tmat2x3<double,1>
PUBLIC	??0?$tmat2x3@N$00@glm@@QAE@N@Z			; glm::tmat2x3<double,1>::tmat2x3<double,1>
PUBLIC	??0?$tmat2x3@N$00@glm@@QAE@NNNNNN@Z		; glm::tmat2x3<double,1>::tmat2x3<double,1>
PUBLIC	??0?$tmat2x3@N$00@glm@@QAE@ABU?$tvec3@N$00@1@0@Z ; glm::tmat2x3<double,1>::tmat2x3<double,1>
PUBLIC	??0?$tmat2x3@N$00@glm@@QAE@ABU?$tmat2x2@N$00@1@@Z ; glm::tmat2x3<double,1>::tmat2x3<double,1>
PUBLIC	??0?$tmat2x3@N$00@glm@@QAE@ABU?$tmat3x3@N$00@1@@Z ; glm::tmat2x3<double,1>::tmat2x3<double,1>
PUBLIC	??0?$tmat2x3@N$00@glm@@QAE@ABU?$tmat4x4@N$00@1@@Z ; glm::tmat2x3<double,1>::tmat2x3<double,1>
PUBLIC	??0?$tmat2x3@N$00@glm@@QAE@ABU?$tmat2x4@N$00@1@@Z ; glm::tmat2x3<double,1>::tmat2x3<double,1>
PUBLIC	??0?$tmat2x3@N$00@glm@@QAE@ABU?$tmat3x2@N$00@1@@Z ; glm::tmat2x3<double,1>::tmat2x3<double,1>
PUBLIC	??0?$tmat2x3@N$00@glm@@QAE@ABU?$tmat3x4@N$00@1@@Z ; glm::tmat2x3<double,1>::tmat2x3<double,1>
PUBLIC	??0?$tmat2x3@N$00@glm@@QAE@ABU?$tmat4x2@N$00@1@@Z ; glm::tmat2x3<double,1>::tmat2x3<double,1>
PUBLIC	??0?$tmat2x3@N$00@glm@@QAE@ABU?$tmat4x3@N$00@1@@Z ; glm::tmat2x3<double,1>::tmat2x3<double,1>
PUBLIC	?length@?$tmat2x3@N$00@glm@@SAHXZ		; glm::tmat2x3<double,1>::length
PUBLIC	??A?$tmat2x3@N$00@glm@@QAEAAU?$tvec3@N$00@1@H@Z	; glm::tmat2x3<double,1>::operator[]
PUBLIC	??A?$tmat2x3@N$00@glm@@QBEABU?$tvec3@N$00@1@H@Z	; glm::tmat2x3<double,1>::operator[]
PUBLIC	??4?$tmat2x3@N$00@glm@@QAEAAU01@ABU01@@Z	; glm::tmat2x3<double,1>::operator=
PUBLIC	??E?$tmat2x3@N$00@glm@@QAEAAU01@XZ		; glm::tmat2x3<double,1>::operator++
PUBLIC	??F?$tmat2x3@N$00@glm@@QAEAAU01@XZ		; glm::tmat2x3<double,1>::operator--
PUBLIC	??E?$tmat2x3@N$00@glm@@QAE?AU01@H@Z		; glm::tmat2x3<double,1>::operator++
PUBLIC	??F?$tmat2x3@N$00@glm@@QAE?AU01@H@Z		; glm::tmat2x3<double,1>::operator--
PUBLIC	??0?$tmat2x3@M$0A@@glm@@QAE@XZ			; glm::tmat2x3<float,0>::tmat2x3<float,0>
PUBLIC	??0?$tmat2x3@M$0A@@glm@@QAE@ABU01@@Z		; glm::tmat2x3<float,0>::tmat2x3<float,0>
PUBLIC	??0?$tmat2x3@M$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tmat2x3<float,0>::tmat2x3<float,0>
PUBLIC	??0?$tmat2x3@M$0A@@glm@@QAE@M@Z			; glm::tmat2x3<float,0>::tmat2x3<float,0>
PUBLIC	??0?$tmat2x3@M$0A@@glm@@QAE@MMMMMM@Z		; glm::tmat2x3<float,0>::tmat2x3<float,0>
PUBLIC	??0?$tmat2x3@M$0A@@glm@@QAE@ABU?$tvec3@M$0A@@1@0@Z ; glm::tmat2x3<float,0>::tmat2x3<float,0>
PUBLIC	??0?$tmat2x3@M$0A@@glm@@QAE@ABU?$tmat2x2@M$0A@@1@@Z ; glm::tmat2x3<float,0>::tmat2x3<float,0>
PUBLIC	??0?$tmat2x3@M$0A@@glm@@QAE@ABU?$tmat3x3@M$0A@@1@@Z ; glm::tmat2x3<float,0>::tmat2x3<float,0>
PUBLIC	??0?$tmat2x3@M$0A@@glm@@QAE@ABU?$tmat4x4@M$0A@@1@@Z ; glm::tmat2x3<float,0>::tmat2x3<float,0>
PUBLIC	??0?$tmat2x3@M$0A@@glm@@QAE@ABU?$tmat2x4@M$0A@@1@@Z ; glm::tmat2x3<float,0>::tmat2x3<float,0>
PUBLIC	??0?$tmat2x3@M$0A@@glm@@QAE@ABU?$tmat3x2@M$0A@@1@@Z ; glm::tmat2x3<float,0>::tmat2x3<float,0>
PUBLIC	??0?$tmat2x3@M$0A@@glm@@QAE@ABU?$tmat3x4@M$0A@@1@@Z ; glm::tmat2x3<float,0>::tmat2x3<float,0>
PUBLIC	??0?$tmat2x3@M$0A@@glm@@QAE@ABU?$tmat4x2@M$0A@@1@@Z ; glm::tmat2x3<float,0>::tmat2x3<float,0>
PUBLIC	??0?$tmat2x3@M$0A@@glm@@QAE@ABU?$tmat4x3@M$0A@@1@@Z ; glm::tmat2x3<float,0>::tmat2x3<float,0>
PUBLIC	?length@?$tmat2x3@M$0A@@glm@@SAHXZ		; glm::tmat2x3<float,0>::length
PUBLIC	??A?$tmat2x3@M$0A@@glm@@QAEAAU?$tvec3@M$0A@@1@H@Z ; glm::tmat2x3<float,0>::operator[]
PUBLIC	??A?$tmat2x3@M$0A@@glm@@QBEABU?$tvec3@M$0A@@1@H@Z ; glm::tmat2x3<float,0>::operator[]
PUBLIC	??4?$tmat2x3@M$0A@@glm@@QAEAAU01@ABU01@@Z	; glm::tmat2x3<float,0>::operator=
PUBLIC	??E?$tmat2x3@M$0A@@glm@@QAEAAU01@XZ		; glm::tmat2x3<float,0>::operator++
PUBLIC	??F?$tmat2x3@M$0A@@glm@@QAEAAU01@XZ		; glm::tmat2x3<float,0>::operator--
PUBLIC	??E?$tmat2x3@M$0A@@glm@@QAE?AU01@H@Z		; glm::tmat2x3<float,0>::operator++
PUBLIC	??F?$tmat2x3@M$0A@@glm@@QAE?AU01@H@Z		; glm::tmat2x3<float,0>::operator--
PUBLIC	??0?$tmat2x3@N$0A@@glm@@QAE@XZ			; glm::tmat2x3<double,0>::tmat2x3<double,0>
PUBLIC	??0?$tmat2x3@N$0A@@glm@@QAE@ABU01@@Z		; glm::tmat2x3<double,0>::tmat2x3<double,0>
PUBLIC	??0?$tmat2x3@N$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tmat2x3<double,0>::tmat2x3<double,0>
PUBLIC	??0?$tmat2x3@N$0A@@glm@@QAE@N@Z			; glm::tmat2x3<double,0>::tmat2x3<double,0>
PUBLIC	??0?$tmat2x3@N$0A@@glm@@QAE@NNNNNN@Z		; glm::tmat2x3<double,0>::tmat2x3<double,0>
PUBLIC	??0?$tmat2x3@N$0A@@glm@@QAE@ABU?$tvec3@N$0A@@1@0@Z ; glm::tmat2x3<double,0>::tmat2x3<double,0>
PUBLIC	??0?$tmat2x3@N$0A@@glm@@QAE@ABU?$tmat2x2@N$0A@@1@@Z ; glm::tmat2x3<double,0>::tmat2x3<double,0>
PUBLIC	??0?$tmat2x3@N$0A@@glm@@QAE@ABU?$tmat3x3@N$0A@@1@@Z ; glm::tmat2x3<double,0>::tmat2x3<double,0>
PUBLIC	??0?$tmat2x3@N$0A@@glm@@QAE@ABU?$tmat4x4@N$0A@@1@@Z ; glm::tmat2x3<double,0>::tmat2x3<double,0>
PUBLIC	??0?$tmat2x3@N$0A@@glm@@QAE@ABU?$tmat2x4@N$0A@@1@@Z ; glm::tmat2x3<double,0>::tmat2x3<double,0>
PUBLIC	??0?$tmat2x3@N$0A@@glm@@QAE@ABU?$tmat3x2@N$0A@@1@@Z ; glm::tmat2x3<double,0>::tmat2x3<double,0>
PUBLIC	??0?$tmat2x3@N$0A@@glm@@QAE@ABU?$tmat3x4@N$0A@@1@@Z ; glm::tmat2x3<double,0>::tmat2x3<double,0>
PUBLIC	??0?$tmat2x3@N$0A@@glm@@QAE@ABU?$tmat4x2@N$0A@@1@@Z ; glm::tmat2x3<double,0>::tmat2x3<double,0>
PUBLIC	??0?$tmat2x3@N$0A@@glm@@QAE@ABU?$tmat4x3@N$0A@@1@@Z ; glm::tmat2x3<double,0>::tmat2x3<double,0>
PUBLIC	?length@?$tmat2x3@N$0A@@glm@@SAHXZ		; glm::tmat2x3<double,0>::length
PUBLIC	??A?$tmat2x3@N$0A@@glm@@QAEAAU?$tvec3@N$0A@@1@H@Z ; glm::tmat2x3<double,0>::operator[]
PUBLIC	??A?$tmat2x3@N$0A@@glm@@QBEABU?$tvec3@N$0A@@1@H@Z ; glm::tmat2x3<double,0>::operator[]
PUBLIC	??4?$tmat2x3@N$0A@@glm@@QAEAAU01@ABU01@@Z	; glm::tmat2x3<double,0>::operator=
PUBLIC	??E?$tmat2x3@N$0A@@glm@@QAEAAU01@XZ		; glm::tmat2x3<double,0>::operator++
PUBLIC	??F?$tmat2x3@N$0A@@glm@@QAEAAU01@XZ		; glm::tmat2x3<double,0>::operator--
PUBLIC	??E?$tmat2x3@N$0A@@glm@@QAE?AU01@H@Z		; glm::tmat2x3<double,0>::operator++
PUBLIC	??F?$tmat2x3@N$0A@@glm@@QAE?AU01@H@Z		; glm::tmat2x3<double,0>::operator--
PUBLIC	??0?$tmat2x4@M$01@glm@@QAE@XZ			; glm::tmat2x4<float,2>::tmat2x4<float,2>
PUBLIC	??0?$tmat2x4@M$01@glm@@QAE@ABU01@@Z		; glm::tmat2x4<float,2>::tmat2x4<float,2>
PUBLIC	??0?$tmat2x4@M$01@glm@@QAE@W4ctor@1@@Z		; glm::tmat2x4<float,2>::tmat2x4<float,2>
PUBLIC	??0?$tmat2x4@M$01@glm@@QAE@M@Z			; glm::tmat2x4<float,2>::tmat2x4<float,2>
PUBLIC	??0?$tmat2x4@M$01@glm@@QAE@MMMMMMMM@Z		; glm::tmat2x4<float,2>::tmat2x4<float,2>
PUBLIC	??0?$tmat2x4@M$01@glm@@QAE@ABU?$tvec4@M$01@1@0@Z ; glm::tmat2x4<float,2>::tmat2x4<float,2>
PUBLIC	??0?$tmat2x4@M$01@glm@@QAE@ABU?$tmat2x2@M$01@1@@Z ; glm::tmat2x4<float,2>::tmat2x4<float,2>
PUBLIC	??0?$tmat2x4@M$01@glm@@QAE@ABU?$tmat3x3@M$01@1@@Z ; glm::tmat2x4<float,2>::tmat2x4<float,2>
PUBLIC	??0?$tmat2x4@M$01@glm@@QAE@ABU?$tmat4x4@M$01@1@@Z ; glm::tmat2x4<float,2>::tmat2x4<float,2>
PUBLIC	??0?$tmat2x4@M$01@glm@@QAE@ABU?$tmat2x3@M$01@1@@Z ; glm::tmat2x4<float,2>::tmat2x4<float,2>
PUBLIC	??0?$tmat2x4@M$01@glm@@QAE@ABU?$tmat3x2@M$01@1@@Z ; glm::tmat2x4<float,2>::tmat2x4<float,2>
PUBLIC	??0?$tmat2x4@M$01@glm@@QAE@ABU?$tmat3x4@M$01@1@@Z ; glm::tmat2x4<float,2>::tmat2x4<float,2>
PUBLIC	??0?$tmat2x4@M$01@glm@@QAE@ABU?$tmat4x2@M$01@1@@Z ; glm::tmat2x4<float,2>::tmat2x4<float,2>
PUBLIC	??0?$tmat2x4@M$01@glm@@QAE@ABU?$tmat4x3@M$01@1@@Z ; glm::tmat2x4<float,2>::tmat2x4<float,2>
PUBLIC	?length@?$tmat2x4@M$01@glm@@SAHXZ		; glm::tmat2x4<float,2>::length
PUBLIC	??A?$tmat2x4@M$01@glm@@QAEAAU?$tvec4@M$01@1@H@Z	; glm::tmat2x4<float,2>::operator[]
PUBLIC	??A?$tmat2x4@M$01@glm@@QBEABU?$tvec4@M$01@1@H@Z	; glm::tmat2x4<float,2>::operator[]
PUBLIC	??4?$tmat2x4@M$01@glm@@QAEAAU01@ABU01@@Z	; glm::tmat2x4<float,2>::operator=
PUBLIC	??E?$tmat2x4@M$01@glm@@QAEAAU01@XZ		; glm::tmat2x4<float,2>::operator++
PUBLIC	??F?$tmat2x4@M$01@glm@@QAEAAU01@XZ		; glm::tmat2x4<float,2>::operator--
PUBLIC	??E?$tmat2x4@M$01@glm@@QAE?AU01@H@Z		; glm::tmat2x4<float,2>::operator++
PUBLIC	??F?$tmat2x4@M$01@glm@@QAE?AU01@H@Z		; glm::tmat2x4<float,2>::operator--
PUBLIC	??0?$tmat2x4@N$01@glm@@QAE@XZ			; glm::tmat2x4<double,2>::tmat2x4<double,2>
PUBLIC	??0?$tmat2x4@N$01@glm@@QAE@ABU01@@Z		; glm::tmat2x4<double,2>::tmat2x4<double,2>
PUBLIC	??0?$tmat2x4@N$01@glm@@QAE@W4ctor@1@@Z		; glm::tmat2x4<double,2>::tmat2x4<double,2>
PUBLIC	??0?$tmat2x4@N$01@glm@@QAE@N@Z			; glm::tmat2x4<double,2>::tmat2x4<double,2>
PUBLIC	??0?$tmat2x4@N$01@glm@@QAE@NNNNNNNN@Z		; glm::tmat2x4<double,2>::tmat2x4<double,2>
PUBLIC	??0?$tmat2x4@N$01@glm@@QAE@ABU?$tvec4@N$01@1@0@Z ; glm::tmat2x4<double,2>::tmat2x4<double,2>
PUBLIC	??0?$tmat2x4@N$01@glm@@QAE@ABU?$tmat2x2@N$01@1@@Z ; glm::tmat2x4<double,2>::tmat2x4<double,2>
PUBLIC	??0?$tmat2x4@N$01@glm@@QAE@ABU?$tmat3x3@N$01@1@@Z ; glm::tmat2x4<double,2>::tmat2x4<double,2>
PUBLIC	??0?$tmat2x4@N$01@glm@@QAE@ABU?$tmat4x4@N$01@1@@Z ; glm::tmat2x4<double,2>::tmat2x4<double,2>
PUBLIC	??0?$tmat2x4@N$01@glm@@QAE@ABU?$tmat2x3@N$01@1@@Z ; glm::tmat2x4<double,2>::tmat2x4<double,2>
PUBLIC	??0?$tmat2x4@N$01@glm@@QAE@ABU?$tmat3x2@N$01@1@@Z ; glm::tmat2x4<double,2>::tmat2x4<double,2>
PUBLIC	??0?$tmat2x4@N$01@glm@@QAE@ABU?$tmat3x4@N$01@1@@Z ; glm::tmat2x4<double,2>::tmat2x4<double,2>
PUBLIC	??0?$tmat2x4@N$01@glm@@QAE@ABU?$tmat4x2@N$01@1@@Z ; glm::tmat2x4<double,2>::tmat2x4<double,2>
PUBLIC	??0?$tmat2x4@N$01@glm@@QAE@ABU?$tmat4x3@N$01@1@@Z ; glm::tmat2x4<double,2>::tmat2x4<double,2>
PUBLIC	?length@?$tmat2x4@N$01@glm@@SAHXZ		; glm::tmat2x4<double,2>::length
PUBLIC	??A?$tmat2x4@N$01@glm@@QAEAAU?$tvec4@N$01@1@H@Z	; glm::tmat2x4<double,2>::operator[]
PUBLIC	??A?$tmat2x4@N$01@glm@@QBEABU?$tvec4@N$01@1@H@Z	; glm::tmat2x4<double,2>::operator[]
PUBLIC	??4?$tmat2x4@N$01@glm@@QAEAAU01@ABU01@@Z	; glm::tmat2x4<double,2>::operator=
PUBLIC	??E?$tmat2x4@N$01@glm@@QAEAAU01@XZ		; glm::tmat2x4<double,2>::operator++
PUBLIC	??F?$tmat2x4@N$01@glm@@QAEAAU01@XZ		; glm::tmat2x4<double,2>::operator--
PUBLIC	??E?$tmat2x4@N$01@glm@@QAE?AU01@H@Z		; glm::tmat2x4<double,2>::operator++
PUBLIC	??F?$tmat2x4@N$01@glm@@QAE?AU01@H@Z		; glm::tmat2x4<double,2>::operator--
PUBLIC	??0?$tmat2x4@M$00@glm@@QAE@XZ			; glm::tmat2x4<float,1>::tmat2x4<float,1>
PUBLIC	??0?$tmat2x4@M$00@glm@@QAE@ABU01@@Z		; glm::tmat2x4<float,1>::tmat2x4<float,1>
PUBLIC	??0?$tmat2x4@M$00@glm@@QAE@W4ctor@1@@Z		; glm::tmat2x4<float,1>::tmat2x4<float,1>
PUBLIC	??0?$tmat2x4@M$00@glm@@QAE@M@Z			; glm::tmat2x4<float,1>::tmat2x4<float,1>
PUBLIC	??0?$tmat2x4@M$00@glm@@QAE@MMMMMMMM@Z		; glm::tmat2x4<float,1>::tmat2x4<float,1>
PUBLIC	??0?$tmat2x4@M$00@glm@@QAE@ABU?$tvec4@M$00@1@0@Z ; glm::tmat2x4<float,1>::tmat2x4<float,1>
PUBLIC	??0?$tmat2x4@M$00@glm@@QAE@ABU?$tmat2x2@M$00@1@@Z ; glm::tmat2x4<float,1>::tmat2x4<float,1>
PUBLIC	??0?$tmat2x4@M$00@glm@@QAE@ABU?$tmat3x3@M$00@1@@Z ; glm::tmat2x4<float,1>::tmat2x4<float,1>
PUBLIC	??0?$tmat2x4@M$00@glm@@QAE@ABU?$tmat4x4@M$00@1@@Z ; glm::tmat2x4<float,1>::tmat2x4<float,1>
PUBLIC	??0?$tmat2x4@M$00@glm@@QAE@ABU?$tmat2x3@M$00@1@@Z ; glm::tmat2x4<float,1>::tmat2x4<float,1>
PUBLIC	??0?$tmat2x4@M$00@glm@@QAE@ABU?$tmat3x2@M$00@1@@Z ; glm::tmat2x4<float,1>::tmat2x4<float,1>
PUBLIC	??0?$tmat2x4@M$00@glm@@QAE@ABU?$tmat3x4@M$00@1@@Z ; glm::tmat2x4<float,1>::tmat2x4<float,1>
PUBLIC	??0?$tmat2x4@M$00@glm@@QAE@ABU?$tmat4x2@M$00@1@@Z ; glm::tmat2x4<float,1>::tmat2x4<float,1>
PUBLIC	??0?$tmat2x4@M$00@glm@@QAE@ABU?$tmat4x3@M$00@1@@Z ; glm::tmat2x4<float,1>::tmat2x4<float,1>
PUBLIC	?length@?$tmat2x4@M$00@glm@@SAHXZ		; glm::tmat2x4<float,1>::length
PUBLIC	??A?$tmat2x4@M$00@glm@@QAEAAU?$tvec4@M$00@1@H@Z	; glm::tmat2x4<float,1>::operator[]
PUBLIC	??A?$tmat2x4@M$00@glm@@QBEABU?$tvec4@M$00@1@H@Z	; glm::tmat2x4<float,1>::operator[]
PUBLIC	??4?$tmat2x4@M$00@glm@@QAEAAU01@ABU01@@Z	; glm::tmat2x4<float,1>::operator=
PUBLIC	??E?$tmat2x4@M$00@glm@@QAEAAU01@XZ		; glm::tmat2x4<float,1>::operator++
PUBLIC	??F?$tmat2x4@M$00@glm@@QAEAAU01@XZ		; glm::tmat2x4<float,1>::operator--
PUBLIC	??E?$tmat2x4@M$00@glm@@QAE?AU01@H@Z		; glm::tmat2x4<float,1>::operator++
PUBLIC	??F?$tmat2x4@M$00@glm@@QAE?AU01@H@Z		; glm::tmat2x4<float,1>::operator--
PUBLIC	??0?$tmat2x4@N$00@glm@@QAE@XZ			; glm::tmat2x4<double,1>::tmat2x4<double,1>
PUBLIC	??0?$tmat2x4@N$00@glm@@QAE@ABU01@@Z		; glm::tmat2x4<double,1>::tmat2x4<double,1>
PUBLIC	??0?$tmat2x4@N$00@glm@@QAE@W4ctor@1@@Z		; glm::tmat2x4<double,1>::tmat2x4<double,1>
PUBLIC	??0?$tmat2x4@N$00@glm@@QAE@N@Z			; glm::tmat2x4<double,1>::tmat2x4<double,1>
PUBLIC	??0?$tmat2x4@N$00@glm@@QAE@NNNNNNNN@Z		; glm::tmat2x4<double,1>::tmat2x4<double,1>
PUBLIC	??0?$tmat2x4@N$00@glm@@QAE@ABU?$tvec4@N$00@1@0@Z ; glm::tmat2x4<double,1>::tmat2x4<double,1>
PUBLIC	??0?$tmat2x4@N$00@glm@@QAE@ABU?$tmat2x2@N$00@1@@Z ; glm::tmat2x4<double,1>::tmat2x4<double,1>
PUBLIC	??0?$tmat2x4@N$00@glm@@QAE@ABU?$tmat3x3@N$00@1@@Z ; glm::tmat2x4<double,1>::tmat2x4<double,1>
PUBLIC	??0?$tmat2x4@N$00@glm@@QAE@ABU?$tmat4x4@N$00@1@@Z ; glm::tmat2x4<double,1>::tmat2x4<double,1>
PUBLIC	??0?$tmat2x4@N$00@glm@@QAE@ABU?$tmat2x3@N$00@1@@Z ; glm::tmat2x4<double,1>::tmat2x4<double,1>
PUBLIC	??0?$tmat2x4@N$00@glm@@QAE@ABU?$tmat3x2@N$00@1@@Z ; glm::tmat2x4<double,1>::tmat2x4<double,1>
PUBLIC	??0?$tmat2x4@N$00@glm@@QAE@ABU?$tmat3x4@N$00@1@@Z ; glm::tmat2x4<double,1>::tmat2x4<double,1>
PUBLIC	??0?$tmat2x4@N$00@glm@@QAE@ABU?$tmat4x2@N$00@1@@Z ; glm::tmat2x4<double,1>::tmat2x4<double,1>
PUBLIC	??0?$tmat2x4@N$00@glm@@QAE@ABU?$tmat4x3@N$00@1@@Z ; glm::tmat2x4<double,1>::tmat2x4<double,1>
PUBLIC	?length@?$tmat2x4@N$00@glm@@SAHXZ		; glm::tmat2x4<double,1>::length
PUBLIC	??A?$tmat2x4@N$00@glm@@QAEAAU?$tvec4@N$00@1@H@Z	; glm::tmat2x4<double,1>::operator[]
PUBLIC	??A?$tmat2x4@N$00@glm@@QBEABU?$tvec4@N$00@1@H@Z	; glm::tmat2x4<double,1>::operator[]
PUBLIC	??4?$tmat2x4@N$00@glm@@QAEAAU01@ABU01@@Z	; glm::tmat2x4<double,1>::operator=
PUBLIC	??E?$tmat2x4@N$00@glm@@QAEAAU01@XZ		; glm::tmat2x4<double,1>::operator++
PUBLIC	??F?$tmat2x4@N$00@glm@@QAEAAU01@XZ		; glm::tmat2x4<double,1>::operator--
PUBLIC	??E?$tmat2x4@N$00@glm@@QAE?AU01@H@Z		; glm::tmat2x4<double,1>::operator++
PUBLIC	??F?$tmat2x4@N$00@glm@@QAE?AU01@H@Z		; glm::tmat2x4<double,1>::operator--
PUBLIC	??0?$tmat2x4@M$0A@@glm@@QAE@XZ			; glm::tmat2x4<float,0>::tmat2x4<float,0>
PUBLIC	??0?$tmat2x4@M$0A@@glm@@QAE@ABU01@@Z		; glm::tmat2x4<float,0>::tmat2x4<float,0>
PUBLIC	??0?$tmat2x4@M$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tmat2x4<float,0>::tmat2x4<float,0>
PUBLIC	??0?$tmat2x4@M$0A@@glm@@QAE@M@Z			; glm::tmat2x4<float,0>::tmat2x4<float,0>
PUBLIC	??0?$tmat2x4@M$0A@@glm@@QAE@MMMMMMMM@Z		; glm::tmat2x4<float,0>::tmat2x4<float,0>
PUBLIC	??0?$tmat2x4@M$0A@@glm@@QAE@ABU?$tvec4@M$0A@@1@0@Z ; glm::tmat2x4<float,0>::tmat2x4<float,0>
PUBLIC	??0?$tmat2x4@M$0A@@glm@@QAE@ABU?$tmat2x2@M$0A@@1@@Z ; glm::tmat2x4<float,0>::tmat2x4<float,0>
PUBLIC	??0?$tmat2x4@M$0A@@glm@@QAE@ABU?$tmat3x3@M$0A@@1@@Z ; glm::tmat2x4<float,0>::tmat2x4<float,0>
PUBLIC	??0?$tmat2x4@M$0A@@glm@@QAE@ABU?$tmat4x4@M$0A@@1@@Z ; glm::tmat2x4<float,0>::tmat2x4<float,0>
PUBLIC	??0?$tmat2x4@M$0A@@glm@@QAE@ABU?$tmat2x3@M$0A@@1@@Z ; glm::tmat2x4<float,0>::tmat2x4<float,0>
PUBLIC	??0?$tmat2x4@M$0A@@glm@@QAE@ABU?$tmat3x2@M$0A@@1@@Z ; glm::tmat2x4<float,0>::tmat2x4<float,0>
PUBLIC	??0?$tmat2x4@M$0A@@glm@@QAE@ABU?$tmat3x4@M$0A@@1@@Z ; glm::tmat2x4<float,0>::tmat2x4<float,0>
PUBLIC	??0?$tmat2x4@M$0A@@glm@@QAE@ABU?$tmat4x2@M$0A@@1@@Z ; glm::tmat2x4<float,0>::tmat2x4<float,0>
PUBLIC	??0?$tmat2x4@M$0A@@glm@@QAE@ABU?$tmat4x3@M$0A@@1@@Z ; glm::tmat2x4<float,0>::tmat2x4<float,0>
PUBLIC	?length@?$tmat2x4@M$0A@@glm@@SAHXZ		; glm::tmat2x4<float,0>::length
PUBLIC	??A?$tmat2x4@M$0A@@glm@@QAEAAU?$tvec4@M$0A@@1@H@Z ; glm::tmat2x4<float,0>::operator[]
PUBLIC	??A?$tmat2x4@M$0A@@glm@@QBEABU?$tvec4@M$0A@@1@H@Z ; glm::tmat2x4<float,0>::operator[]
PUBLIC	??4?$tmat2x4@M$0A@@glm@@QAEAAU01@ABU01@@Z	; glm::tmat2x4<float,0>::operator=
PUBLIC	??E?$tmat2x4@M$0A@@glm@@QAEAAU01@XZ		; glm::tmat2x4<float,0>::operator++
PUBLIC	??F?$tmat2x4@M$0A@@glm@@QAEAAU01@XZ		; glm::tmat2x4<float,0>::operator--
PUBLIC	??E?$tmat2x4@M$0A@@glm@@QAE?AU01@H@Z		; glm::tmat2x4<float,0>::operator++
PUBLIC	??F?$tmat2x4@M$0A@@glm@@QAE?AU01@H@Z		; glm::tmat2x4<float,0>::operator--
PUBLIC	??0?$tmat2x4@N$0A@@glm@@QAE@XZ			; glm::tmat2x4<double,0>::tmat2x4<double,0>
PUBLIC	??0?$tmat2x4@N$0A@@glm@@QAE@ABU01@@Z		; glm::tmat2x4<double,0>::tmat2x4<double,0>
PUBLIC	??0?$tmat2x4@N$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tmat2x4<double,0>::tmat2x4<double,0>
PUBLIC	??0?$tmat2x4@N$0A@@glm@@QAE@N@Z			; glm::tmat2x4<double,0>::tmat2x4<double,0>
PUBLIC	??0?$tmat2x4@N$0A@@glm@@QAE@NNNNNNNN@Z		; glm::tmat2x4<double,0>::tmat2x4<double,0>
PUBLIC	??0?$tmat2x4@N$0A@@glm@@QAE@ABU?$tvec4@N$0A@@1@0@Z ; glm::tmat2x4<double,0>::tmat2x4<double,0>
PUBLIC	??0?$tmat2x4@N$0A@@glm@@QAE@ABU?$tmat2x2@N$0A@@1@@Z ; glm::tmat2x4<double,0>::tmat2x4<double,0>
PUBLIC	??0?$tmat2x4@N$0A@@glm@@QAE@ABU?$tmat3x3@N$0A@@1@@Z ; glm::tmat2x4<double,0>::tmat2x4<double,0>
PUBLIC	??0?$tmat2x4@N$0A@@glm@@QAE@ABU?$tmat4x4@N$0A@@1@@Z ; glm::tmat2x4<double,0>::tmat2x4<double,0>
PUBLIC	??0?$tmat2x4@N$0A@@glm@@QAE@ABU?$tmat2x3@N$0A@@1@@Z ; glm::tmat2x4<double,0>::tmat2x4<double,0>
PUBLIC	??0?$tmat2x4@N$0A@@glm@@QAE@ABU?$tmat3x2@N$0A@@1@@Z ; glm::tmat2x4<double,0>::tmat2x4<double,0>
PUBLIC	??0?$tmat2x4@N$0A@@glm@@QAE@ABU?$tmat3x4@N$0A@@1@@Z ; glm::tmat2x4<double,0>::tmat2x4<double,0>
PUBLIC	??0?$tmat2x4@N$0A@@glm@@QAE@ABU?$tmat4x2@N$0A@@1@@Z ; glm::tmat2x4<double,0>::tmat2x4<double,0>
PUBLIC	??0?$tmat2x4@N$0A@@glm@@QAE@ABU?$tmat4x3@N$0A@@1@@Z ; glm::tmat2x4<double,0>::tmat2x4<double,0>
PUBLIC	?length@?$tmat2x4@N$0A@@glm@@SAHXZ		; glm::tmat2x4<double,0>::length
PUBLIC	??A?$tmat2x4@N$0A@@glm@@QAEAAU?$tvec4@N$0A@@1@H@Z ; glm::tmat2x4<double,0>::operator[]
PUBLIC	??A?$tmat2x4@N$0A@@glm@@QBEABU?$tvec4@N$0A@@1@H@Z ; glm::tmat2x4<double,0>::operator[]
PUBLIC	??4?$tmat2x4@N$0A@@glm@@QAEAAU01@ABU01@@Z	; glm::tmat2x4<double,0>::operator=
PUBLIC	??E?$tmat2x4@N$0A@@glm@@QAEAAU01@XZ		; glm::tmat2x4<double,0>::operator++
PUBLIC	??F?$tmat2x4@N$0A@@glm@@QAEAAU01@XZ		; glm::tmat2x4<double,0>::operator--
PUBLIC	??E?$tmat2x4@N$0A@@glm@@QAE?AU01@H@Z		; glm::tmat2x4<double,0>::operator++
PUBLIC	??F?$tmat2x4@N$0A@@glm@@QAE?AU01@H@Z		; glm::tmat2x4<double,0>::operator--
PUBLIC	??0?$tmat3x2@M$01@glm@@QAE@XZ			; glm::tmat3x2<float,2>::tmat3x2<float,2>
PUBLIC	??0?$tmat3x2@M$01@glm@@QAE@ABU01@@Z		; glm::tmat3x2<float,2>::tmat3x2<float,2>
PUBLIC	??0?$tmat3x2@M$01@glm@@QAE@W4ctor@1@@Z		; glm::tmat3x2<float,2>::tmat3x2<float,2>
PUBLIC	??0?$tmat3x2@M$01@glm@@QAE@M@Z			; glm::tmat3x2<float,2>::tmat3x2<float,2>
PUBLIC	??0?$tmat3x2@M$01@glm@@QAE@MMMMMM@Z		; glm::tmat3x2<float,2>::tmat3x2<float,2>
PUBLIC	??0?$tmat3x2@M$01@glm@@QAE@ABU?$tvec2@M$01@1@00@Z ; glm::tmat3x2<float,2>::tmat3x2<float,2>
PUBLIC	??0?$tmat3x2@M$01@glm@@QAE@ABU?$tmat2x2@M$01@1@@Z ; glm::tmat3x2<float,2>::tmat3x2<float,2>
PUBLIC	??0?$tmat3x2@M$01@glm@@QAE@ABU?$tmat3x3@M$01@1@@Z ; glm::tmat3x2<float,2>::tmat3x2<float,2>
PUBLIC	??0?$tmat3x2@M$01@glm@@QAE@ABU?$tmat4x4@M$01@1@@Z ; glm::tmat3x2<float,2>::tmat3x2<float,2>
PUBLIC	??0?$tmat3x2@M$01@glm@@QAE@ABU?$tmat2x3@M$01@1@@Z ; glm::tmat3x2<float,2>::tmat3x2<float,2>
PUBLIC	??0?$tmat3x2@M$01@glm@@QAE@ABU?$tmat2x4@M$01@1@@Z ; glm::tmat3x2<float,2>::tmat3x2<float,2>
PUBLIC	??0?$tmat3x2@M$01@glm@@QAE@ABU?$tmat3x4@M$01@1@@Z ; glm::tmat3x2<float,2>::tmat3x2<float,2>
PUBLIC	??0?$tmat3x2@M$01@glm@@QAE@ABU?$tmat4x2@M$01@1@@Z ; glm::tmat3x2<float,2>::tmat3x2<float,2>
PUBLIC	??0?$tmat3x2@M$01@glm@@QAE@ABU?$tmat4x3@M$01@1@@Z ; glm::tmat3x2<float,2>::tmat3x2<float,2>
PUBLIC	?length@?$tmat3x2@M$01@glm@@SAHXZ		; glm::tmat3x2<float,2>::length
PUBLIC	??A?$tmat3x2@M$01@glm@@QAEAAU?$tvec2@M$01@1@H@Z	; glm::tmat3x2<float,2>::operator[]
PUBLIC	??A?$tmat3x2@M$01@glm@@QBEABU?$tvec2@M$01@1@H@Z	; glm::tmat3x2<float,2>::operator[]
PUBLIC	??4?$tmat3x2@M$01@glm@@QAEAAU01@ABU01@@Z	; glm::tmat3x2<float,2>::operator=
PUBLIC	??E?$tmat3x2@M$01@glm@@QAEAAU01@XZ		; glm::tmat3x2<float,2>::operator++
PUBLIC	??F?$tmat3x2@M$01@glm@@QAEAAU01@XZ		; glm::tmat3x2<float,2>::operator--
PUBLIC	??E?$tmat3x2@M$01@glm@@QAE?AU01@H@Z		; glm::tmat3x2<float,2>::operator++
PUBLIC	??F?$tmat3x2@M$01@glm@@QAE?AU01@H@Z		; glm::tmat3x2<float,2>::operator--
PUBLIC	??0?$tmat3x2@N$01@glm@@QAE@XZ			; glm::tmat3x2<double,2>::tmat3x2<double,2>
PUBLIC	??0?$tmat3x2@N$01@glm@@QAE@ABU01@@Z		; glm::tmat3x2<double,2>::tmat3x2<double,2>
PUBLIC	??0?$tmat3x2@N$01@glm@@QAE@W4ctor@1@@Z		; glm::tmat3x2<double,2>::tmat3x2<double,2>
PUBLIC	??0?$tmat3x2@N$01@glm@@QAE@N@Z			; glm::tmat3x2<double,2>::tmat3x2<double,2>
PUBLIC	??0?$tmat3x2@N$01@glm@@QAE@NNNNNN@Z		; glm::tmat3x2<double,2>::tmat3x2<double,2>
PUBLIC	??0?$tmat3x2@N$01@glm@@QAE@ABU?$tvec2@N$01@1@00@Z ; glm::tmat3x2<double,2>::tmat3x2<double,2>
PUBLIC	??0?$tmat3x2@N$01@glm@@QAE@ABU?$tmat2x2@N$01@1@@Z ; glm::tmat3x2<double,2>::tmat3x2<double,2>
PUBLIC	??0?$tmat3x2@N$01@glm@@QAE@ABU?$tmat3x3@N$01@1@@Z ; glm::tmat3x2<double,2>::tmat3x2<double,2>
PUBLIC	??0?$tmat3x2@N$01@glm@@QAE@ABU?$tmat4x4@N$01@1@@Z ; glm::tmat3x2<double,2>::tmat3x2<double,2>
PUBLIC	??0?$tmat3x2@N$01@glm@@QAE@ABU?$tmat2x3@N$01@1@@Z ; glm::tmat3x2<double,2>::tmat3x2<double,2>
PUBLIC	??0?$tmat3x2@N$01@glm@@QAE@ABU?$tmat2x4@N$01@1@@Z ; glm::tmat3x2<double,2>::tmat3x2<double,2>
PUBLIC	??0?$tmat3x2@N$01@glm@@QAE@ABU?$tmat3x4@N$01@1@@Z ; glm::tmat3x2<double,2>::tmat3x2<double,2>
PUBLIC	??0?$tmat3x2@N$01@glm@@QAE@ABU?$tmat4x2@N$01@1@@Z ; glm::tmat3x2<double,2>::tmat3x2<double,2>
PUBLIC	??0?$tmat3x2@N$01@glm@@QAE@ABU?$tmat4x3@N$01@1@@Z ; glm::tmat3x2<double,2>::tmat3x2<double,2>
PUBLIC	?length@?$tmat3x2@N$01@glm@@SAHXZ		; glm::tmat3x2<double,2>::length
PUBLIC	??A?$tmat3x2@N$01@glm@@QAEAAU?$tvec2@N$01@1@H@Z	; glm::tmat3x2<double,2>::operator[]
PUBLIC	??A?$tmat3x2@N$01@glm@@QBEABU?$tvec2@N$01@1@H@Z	; glm::tmat3x2<double,2>::operator[]
PUBLIC	??4?$tmat3x2@N$01@glm@@QAEAAU01@ABU01@@Z	; glm::tmat3x2<double,2>::operator=
PUBLIC	??E?$tmat3x2@N$01@glm@@QAEAAU01@XZ		; glm::tmat3x2<double,2>::operator++
PUBLIC	??F?$tmat3x2@N$01@glm@@QAEAAU01@XZ		; glm::tmat3x2<double,2>::operator--
PUBLIC	??E?$tmat3x2@N$01@glm@@QAE?AU01@H@Z		; glm::tmat3x2<double,2>::operator++
PUBLIC	??F?$tmat3x2@N$01@glm@@QAE?AU01@H@Z		; glm::tmat3x2<double,2>::operator--
PUBLIC	??0?$tmat3x2@M$00@glm@@QAE@XZ			; glm::tmat3x2<float,1>::tmat3x2<float,1>
PUBLIC	??0?$tmat3x2@M$00@glm@@QAE@ABU01@@Z		; glm::tmat3x2<float,1>::tmat3x2<float,1>
PUBLIC	??0?$tmat3x2@M$00@glm@@QAE@W4ctor@1@@Z		; glm::tmat3x2<float,1>::tmat3x2<float,1>
PUBLIC	??0?$tmat3x2@M$00@glm@@QAE@M@Z			; glm::tmat3x2<float,1>::tmat3x2<float,1>
PUBLIC	??0?$tmat3x2@M$00@glm@@QAE@MMMMMM@Z		; glm::tmat3x2<float,1>::tmat3x2<float,1>
PUBLIC	??0?$tmat3x2@M$00@glm@@QAE@ABU?$tvec2@M$00@1@00@Z ; glm::tmat3x2<float,1>::tmat3x2<float,1>
PUBLIC	??0?$tmat3x2@M$00@glm@@QAE@ABU?$tmat2x2@M$00@1@@Z ; glm::tmat3x2<float,1>::tmat3x2<float,1>
PUBLIC	??0?$tmat3x2@M$00@glm@@QAE@ABU?$tmat3x3@M$00@1@@Z ; glm::tmat3x2<float,1>::tmat3x2<float,1>
PUBLIC	??0?$tmat3x2@M$00@glm@@QAE@ABU?$tmat4x4@M$00@1@@Z ; glm::tmat3x2<float,1>::tmat3x2<float,1>
PUBLIC	??0?$tmat3x2@M$00@glm@@QAE@ABU?$tmat2x3@M$00@1@@Z ; glm::tmat3x2<float,1>::tmat3x2<float,1>
PUBLIC	??0?$tmat3x2@M$00@glm@@QAE@ABU?$tmat2x4@M$00@1@@Z ; glm::tmat3x2<float,1>::tmat3x2<float,1>
PUBLIC	??0?$tmat3x2@M$00@glm@@QAE@ABU?$tmat3x4@M$00@1@@Z ; glm::tmat3x2<float,1>::tmat3x2<float,1>
PUBLIC	??0?$tmat3x2@M$00@glm@@QAE@ABU?$tmat4x2@M$00@1@@Z ; glm::tmat3x2<float,1>::tmat3x2<float,1>
PUBLIC	??0?$tmat3x2@M$00@glm@@QAE@ABU?$tmat4x3@M$00@1@@Z ; glm::tmat3x2<float,1>::tmat3x2<float,1>
PUBLIC	?length@?$tmat3x2@M$00@glm@@SAHXZ		; glm::tmat3x2<float,1>::length
PUBLIC	??A?$tmat3x2@M$00@glm@@QAEAAU?$tvec2@M$00@1@H@Z	; glm::tmat3x2<float,1>::operator[]
PUBLIC	??A?$tmat3x2@M$00@glm@@QBEABU?$tvec2@M$00@1@H@Z	; glm::tmat3x2<float,1>::operator[]
PUBLIC	??4?$tmat3x2@M$00@glm@@QAEAAU01@ABU01@@Z	; glm::tmat3x2<float,1>::operator=
PUBLIC	??E?$tmat3x2@M$00@glm@@QAEAAU01@XZ		; glm::tmat3x2<float,1>::operator++
PUBLIC	??F?$tmat3x2@M$00@glm@@QAEAAU01@XZ		; glm::tmat3x2<float,1>::operator--
PUBLIC	??E?$tmat3x2@M$00@glm@@QAE?AU01@H@Z		; glm::tmat3x2<float,1>::operator++
PUBLIC	??F?$tmat3x2@M$00@glm@@QAE?AU01@H@Z		; glm::tmat3x2<float,1>::operator--
PUBLIC	??0?$tmat3x2@N$00@glm@@QAE@XZ			; glm::tmat3x2<double,1>::tmat3x2<double,1>
PUBLIC	??0?$tmat3x2@N$00@glm@@QAE@ABU01@@Z		; glm::tmat3x2<double,1>::tmat3x2<double,1>
PUBLIC	??0?$tmat3x2@N$00@glm@@QAE@W4ctor@1@@Z		; glm::tmat3x2<double,1>::tmat3x2<double,1>
PUBLIC	??0?$tmat3x2@N$00@glm@@QAE@N@Z			; glm::tmat3x2<double,1>::tmat3x2<double,1>
PUBLIC	??0?$tmat3x2@N$00@glm@@QAE@NNNNNN@Z		; glm::tmat3x2<double,1>::tmat3x2<double,1>
PUBLIC	??0?$tmat3x2@N$00@glm@@QAE@ABU?$tvec2@N$00@1@00@Z ; glm::tmat3x2<double,1>::tmat3x2<double,1>
PUBLIC	??0?$tmat3x2@N$00@glm@@QAE@ABU?$tmat2x2@N$00@1@@Z ; glm::tmat3x2<double,1>::tmat3x2<double,1>
PUBLIC	??0?$tmat3x2@N$00@glm@@QAE@ABU?$tmat3x3@N$00@1@@Z ; glm::tmat3x2<double,1>::tmat3x2<double,1>
PUBLIC	??0?$tmat3x2@N$00@glm@@QAE@ABU?$tmat4x4@N$00@1@@Z ; glm::tmat3x2<double,1>::tmat3x2<double,1>
PUBLIC	??0?$tmat3x2@N$00@glm@@QAE@ABU?$tmat2x3@N$00@1@@Z ; glm::tmat3x2<double,1>::tmat3x2<double,1>
PUBLIC	??0?$tmat3x2@N$00@glm@@QAE@ABU?$tmat2x4@N$00@1@@Z ; glm::tmat3x2<double,1>::tmat3x2<double,1>
PUBLIC	??0?$tmat3x2@N$00@glm@@QAE@ABU?$tmat3x4@N$00@1@@Z ; glm::tmat3x2<double,1>::tmat3x2<double,1>
PUBLIC	??0?$tmat3x2@N$00@glm@@QAE@ABU?$tmat4x2@N$00@1@@Z ; glm::tmat3x2<double,1>::tmat3x2<double,1>
PUBLIC	??0?$tmat3x2@N$00@glm@@QAE@ABU?$tmat4x3@N$00@1@@Z ; glm::tmat3x2<double,1>::tmat3x2<double,1>
PUBLIC	?length@?$tmat3x2@N$00@glm@@SAHXZ		; glm::tmat3x2<double,1>::length
PUBLIC	??A?$tmat3x2@N$00@glm@@QAEAAU?$tvec2@N$00@1@H@Z	; glm::tmat3x2<double,1>::operator[]
PUBLIC	??A?$tmat3x2@N$00@glm@@QBEABU?$tvec2@N$00@1@H@Z	; glm::tmat3x2<double,1>::operator[]
PUBLIC	??4?$tmat3x2@N$00@glm@@QAEAAU01@ABU01@@Z	; glm::tmat3x2<double,1>::operator=
PUBLIC	??E?$tmat3x2@N$00@glm@@QAEAAU01@XZ		; glm::tmat3x2<double,1>::operator++
PUBLIC	??F?$tmat3x2@N$00@glm@@QAEAAU01@XZ		; glm::tmat3x2<double,1>::operator--
PUBLIC	??E?$tmat3x2@N$00@glm@@QAE?AU01@H@Z		; glm::tmat3x2<double,1>::operator++
PUBLIC	??F?$tmat3x2@N$00@glm@@QAE?AU01@H@Z		; glm::tmat3x2<double,1>::operator--
PUBLIC	??0?$tmat3x2@M$0A@@glm@@QAE@XZ			; glm::tmat3x2<float,0>::tmat3x2<float,0>
PUBLIC	??0?$tmat3x2@M$0A@@glm@@QAE@ABU01@@Z		; glm::tmat3x2<float,0>::tmat3x2<float,0>
PUBLIC	??0?$tmat3x2@M$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tmat3x2<float,0>::tmat3x2<float,0>
PUBLIC	??0?$tmat3x2@M$0A@@glm@@QAE@M@Z			; glm::tmat3x2<float,0>::tmat3x2<float,0>
PUBLIC	??0?$tmat3x2@M$0A@@glm@@QAE@MMMMMM@Z		; glm::tmat3x2<float,0>::tmat3x2<float,0>
PUBLIC	??0?$tmat3x2@M$0A@@glm@@QAE@ABU?$tvec2@M$0A@@1@00@Z ; glm::tmat3x2<float,0>::tmat3x2<float,0>
PUBLIC	??0?$tmat3x2@M$0A@@glm@@QAE@ABU?$tmat2x2@M$0A@@1@@Z ; glm::tmat3x2<float,0>::tmat3x2<float,0>
PUBLIC	??0?$tmat3x2@M$0A@@glm@@QAE@ABU?$tmat3x3@M$0A@@1@@Z ; glm::tmat3x2<float,0>::tmat3x2<float,0>
PUBLIC	??0?$tmat3x2@M$0A@@glm@@QAE@ABU?$tmat4x4@M$0A@@1@@Z ; glm::tmat3x2<float,0>::tmat3x2<float,0>
PUBLIC	??0?$tmat3x2@M$0A@@glm@@QAE@ABU?$tmat2x3@M$0A@@1@@Z ; glm::tmat3x2<float,0>::tmat3x2<float,0>
PUBLIC	??0?$tmat3x2@M$0A@@glm@@QAE@ABU?$tmat2x4@M$0A@@1@@Z ; glm::tmat3x2<float,0>::tmat3x2<float,0>
PUBLIC	??0?$tmat3x2@M$0A@@glm@@QAE@ABU?$tmat3x4@M$0A@@1@@Z ; glm::tmat3x2<float,0>::tmat3x2<float,0>
PUBLIC	??0?$tmat3x2@M$0A@@glm@@QAE@ABU?$tmat4x2@M$0A@@1@@Z ; glm::tmat3x2<float,0>::tmat3x2<float,0>
PUBLIC	??0?$tmat3x2@M$0A@@glm@@QAE@ABU?$tmat4x3@M$0A@@1@@Z ; glm::tmat3x2<float,0>::tmat3x2<float,0>
PUBLIC	?length@?$tmat3x2@M$0A@@glm@@SAHXZ		; glm::tmat3x2<float,0>::length
PUBLIC	??A?$tmat3x2@M$0A@@glm@@QAEAAU?$tvec2@M$0A@@1@H@Z ; glm::tmat3x2<float,0>::operator[]
PUBLIC	??A?$tmat3x2@M$0A@@glm@@QBEABU?$tvec2@M$0A@@1@H@Z ; glm::tmat3x2<float,0>::operator[]
PUBLIC	??4?$tmat3x2@M$0A@@glm@@QAEAAU01@ABU01@@Z	; glm::tmat3x2<float,0>::operator=
PUBLIC	??E?$tmat3x2@M$0A@@glm@@QAEAAU01@XZ		; glm::tmat3x2<float,0>::operator++
PUBLIC	??F?$tmat3x2@M$0A@@glm@@QAEAAU01@XZ		; glm::tmat3x2<float,0>::operator--
PUBLIC	??E?$tmat3x2@M$0A@@glm@@QAE?AU01@H@Z		; glm::tmat3x2<float,0>::operator++
PUBLIC	??F?$tmat3x2@M$0A@@glm@@QAE?AU01@H@Z		; glm::tmat3x2<float,0>::operator--
PUBLIC	??0?$tmat3x2@N$0A@@glm@@QAE@XZ			; glm::tmat3x2<double,0>::tmat3x2<double,0>
PUBLIC	??0?$tmat3x2@N$0A@@glm@@QAE@ABU01@@Z		; glm::tmat3x2<double,0>::tmat3x2<double,0>
PUBLIC	??0?$tmat3x2@N$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tmat3x2<double,0>::tmat3x2<double,0>
PUBLIC	??0?$tmat3x2@N$0A@@glm@@QAE@N@Z			; glm::tmat3x2<double,0>::tmat3x2<double,0>
PUBLIC	??0?$tmat3x2@N$0A@@glm@@QAE@NNNNNN@Z		; glm::tmat3x2<double,0>::tmat3x2<double,0>
PUBLIC	??0?$tmat3x2@N$0A@@glm@@QAE@ABU?$tvec2@N$0A@@1@00@Z ; glm::tmat3x2<double,0>::tmat3x2<double,0>
PUBLIC	??0?$tmat3x2@N$0A@@glm@@QAE@ABU?$tmat2x2@N$0A@@1@@Z ; glm::tmat3x2<double,0>::tmat3x2<double,0>
PUBLIC	??0?$tmat3x2@N$0A@@glm@@QAE@ABU?$tmat3x3@N$0A@@1@@Z ; glm::tmat3x2<double,0>::tmat3x2<double,0>
PUBLIC	??0?$tmat3x2@N$0A@@glm@@QAE@ABU?$tmat4x4@N$0A@@1@@Z ; glm::tmat3x2<double,0>::tmat3x2<double,0>
PUBLIC	??0?$tmat3x2@N$0A@@glm@@QAE@ABU?$tmat2x3@N$0A@@1@@Z ; glm::tmat3x2<double,0>::tmat3x2<double,0>
PUBLIC	??0?$tmat3x2@N$0A@@glm@@QAE@ABU?$tmat2x4@N$0A@@1@@Z ; glm::tmat3x2<double,0>::tmat3x2<double,0>
PUBLIC	??0?$tmat3x2@N$0A@@glm@@QAE@ABU?$tmat3x4@N$0A@@1@@Z ; glm::tmat3x2<double,0>::tmat3x2<double,0>
PUBLIC	??0?$tmat3x2@N$0A@@glm@@QAE@ABU?$tmat4x2@N$0A@@1@@Z ; glm::tmat3x2<double,0>::tmat3x2<double,0>
PUBLIC	??0?$tmat3x2@N$0A@@glm@@QAE@ABU?$tmat4x3@N$0A@@1@@Z ; glm::tmat3x2<double,0>::tmat3x2<double,0>
PUBLIC	?length@?$tmat3x2@N$0A@@glm@@SAHXZ		; glm::tmat3x2<double,0>::length
PUBLIC	??A?$tmat3x2@N$0A@@glm@@QAEAAU?$tvec2@N$0A@@1@H@Z ; glm::tmat3x2<double,0>::operator[]
PUBLIC	??A?$tmat3x2@N$0A@@glm@@QBEABU?$tvec2@N$0A@@1@H@Z ; glm::tmat3x2<double,0>::operator[]
PUBLIC	??4?$tmat3x2@N$0A@@glm@@QAEAAU01@ABU01@@Z	; glm::tmat3x2<double,0>::operator=
PUBLIC	??E?$tmat3x2@N$0A@@glm@@QAEAAU01@XZ		; glm::tmat3x2<double,0>::operator++
PUBLIC	??F?$tmat3x2@N$0A@@glm@@QAEAAU01@XZ		; glm::tmat3x2<double,0>::operator--
PUBLIC	??E?$tmat3x2@N$0A@@glm@@QAE?AU01@H@Z		; glm::tmat3x2<double,0>::operator++
PUBLIC	??F?$tmat3x2@N$0A@@glm@@QAE?AU01@H@Z		; glm::tmat3x2<double,0>::operator--
PUBLIC	??0?$tmat3x3@M$01@glm@@QAE@XZ			; glm::tmat3x3<float,2>::tmat3x3<float,2>
PUBLIC	??0?$tmat3x3@M$01@glm@@QAE@ABU01@@Z		; glm::tmat3x3<float,2>::tmat3x3<float,2>
PUBLIC	??0?$tmat3x3@M$01@glm@@QAE@W4ctor@1@@Z		; glm::tmat3x3<float,2>::tmat3x3<float,2>
PUBLIC	??0?$tmat3x3@M$01@glm@@QAE@M@Z			; glm::tmat3x3<float,2>::tmat3x3<float,2>
PUBLIC	??0?$tmat3x3@M$01@glm@@QAE@MMMMMMMMM@Z		; glm::tmat3x3<float,2>::tmat3x3<float,2>
PUBLIC	??0?$tmat3x3@M$01@glm@@QAE@ABU?$tvec3@M$01@1@00@Z ; glm::tmat3x3<float,2>::tmat3x3<float,2>
PUBLIC	??0?$tmat3x3@M$01@glm@@QAE@ABU?$tmat2x2@M$01@1@@Z ; glm::tmat3x3<float,2>::tmat3x3<float,2>
PUBLIC	??0?$tmat3x3@M$01@glm@@QAE@ABU?$tmat4x4@M$01@1@@Z ; glm::tmat3x3<float,2>::tmat3x3<float,2>
PUBLIC	??0?$tmat3x3@M$01@glm@@QAE@ABU?$tmat2x3@M$01@1@@Z ; glm::tmat3x3<float,2>::tmat3x3<float,2>
PUBLIC	??0?$tmat3x3@M$01@glm@@QAE@ABU?$tmat3x2@M$01@1@@Z ; glm::tmat3x3<float,2>::tmat3x3<float,2>
PUBLIC	??0?$tmat3x3@M$01@glm@@QAE@ABU?$tmat2x4@M$01@1@@Z ; glm::tmat3x3<float,2>::tmat3x3<float,2>
PUBLIC	??0?$tmat3x3@M$01@glm@@QAE@ABU?$tmat4x2@M$01@1@@Z ; glm::tmat3x3<float,2>::tmat3x3<float,2>
PUBLIC	??0?$tmat3x3@M$01@glm@@QAE@ABU?$tmat3x4@M$01@1@@Z ; glm::tmat3x3<float,2>::tmat3x3<float,2>
PUBLIC	??0?$tmat3x3@M$01@glm@@QAE@ABU?$tmat4x3@M$01@1@@Z ; glm::tmat3x3<float,2>::tmat3x3<float,2>
PUBLIC	?length@?$tmat3x3@M$01@glm@@SAHXZ		; glm::tmat3x3<float,2>::length
PUBLIC	??A?$tmat3x3@M$01@glm@@QAEAAU?$tvec3@M$01@1@H@Z	; glm::tmat3x3<float,2>::operator[]
PUBLIC	??A?$tmat3x3@M$01@glm@@QBEABU?$tvec3@M$01@1@H@Z	; glm::tmat3x3<float,2>::operator[]
PUBLIC	??4?$tmat3x3@M$01@glm@@QAEAAU01@ABU01@@Z	; glm::tmat3x3<float,2>::operator=
PUBLIC	??E?$tmat3x3@M$01@glm@@QAEAAU01@XZ		; glm::tmat3x3<float,2>::operator++
PUBLIC	??F?$tmat3x3@M$01@glm@@QAEAAU01@XZ		; glm::tmat3x3<float,2>::operator--
PUBLIC	??E?$tmat3x3@M$01@glm@@QAE?AU01@H@Z		; glm::tmat3x3<float,2>::operator++
PUBLIC	??F?$tmat3x3@M$01@glm@@QAE?AU01@H@Z		; glm::tmat3x3<float,2>::operator--
PUBLIC	??0?$tmat3x3@N$01@glm@@QAE@XZ			; glm::tmat3x3<double,2>::tmat3x3<double,2>
PUBLIC	??0?$tmat3x3@N$01@glm@@QAE@ABU01@@Z		; glm::tmat3x3<double,2>::tmat3x3<double,2>
PUBLIC	??0?$tmat3x3@N$01@glm@@QAE@W4ctor@1@@Z		; glm::tmat3x3<double,2>::tmat3x3<double,2>
PUBLIC	??0?$tmat3x3@N$01@glm@@QAE@N@Z			; glm::tmat3x3<double,2>::tmat3x3<double,2>
PUBLIC	??0?$tmat3x3@N$01@glm@@QAE@NNNNNNNNN@Z		; glm::tmat3x3<double,2>::tmat3x3<double,2>
PUBLIC	??0?$tmat3x3@N$01@glm@@QAE@ABU?$tvec3@N$01@1@00@Z ; glm::tmat3x3<double,2>::tmat3x3<double,2>
PUBLIC	??0?$tmat3x3@N$01@glm@@QAE@ABU?$tmat2x2@N$01@1@@Z ; glm::tmat3x3<double,2>::tmat3x3<double,2>
PUBLIC	??0?$tmat3x3@N$01@glm@@QAE@ABU?$tmat4x4@N$01@1@@Z ; glm::tmat3x3<double,2>::tmat3x3<double,2>
PUBLIC	??0?$tmat3x3@N$01@glm@@QAE@ABU?$tmat2x3@N$01@1@@Z ; glm::tmat3x3<double,2>::tmat3x3<double,2>
PUBLIC	??0?$tmat3x3@N$01@glm@@QAE@ABU?$tmat3x2@N$01@1@@Z ; glm::tmat3x3<double,2>::tmat3x3<double,2>
PUBLIC	??0?$tmat3x3@N$01@glm@@QAE@ABU?$tmat2x4@N$01@1@@Z ; glm::tmat3x3<double,2>::tmat3x3<double,2>
PUBLIC	??0?$tmat3x3@N$01@glm@@QAE@ABU?$tmat4x2@N$01@1@@Z ; glm::tmat3x3<double,2>::tmat3x3<double,2>
PUBLIC	??0?$tmat3x3@N$01@glm@@QAE@ABU?$tmat3x4@N$01@1@@Z ; glm::tmat3x3<double,2>::tmat3x3<double,2>
PUBLIC	??0?$tmat3x3@N$01@glm@@QAE@ABU?$tmat4x3@N$01@1@@Z ; glm::tmat3x3<double,2>::tmat3x3<double,2>
PUBLIC	?length@?$tmat3x3@N$01@glm@@SAHXZ		; glm::tmat3x3<double,2>::length
PUBLIC	??A?$tmat3x3@N$01@glm@@QAEAAU?$tvec3@N$01@1@H@Z	; glm::tmat3x3<double,2>::operator[]
PUBLIC	??A?$tmat3x3@N$01@glm@@QBEABU?$tvec3@N$01@1@H@Z	; glm::tmat3x3<double,2>::operator[]
PUBLIC	??4?$tmat3x3@N$01@glm@@QAEAAU01@ABU01@@Z	; glm::tmat3x3<double,2>::operator=
PUBLIC	??E?$tmat3x3@N$01@glm@@QAEAAU01@XZ		; glm::tmat3x3<double,2>::operator++
PUBLIC	??F?$tmat3x3@N$01@glm@@QAEAAU01@XZ		; glm::tmat3x3<double,2>::operator--
PUBLIC	??E?$tmat3x3@N$01@glm@@QAE?AU01@H@Z		; glm::tmat3x3<double,2>::operator++
PUBLIC	??F?$tmat3x3@N$01@glm@@QAE?AU01@H@Z		; glm::tmat3x3<double,2>::operator--
PUBLIC	??0?$tmat3x3@M$00@glm@@QAE@XZ			; glm::tmat3x3<float,1>::tmat3x3<float,1>
PUBLIC	??0?$tmat3x3@M$00@glm@@QAE@ABU01@@Z		; glm::tmat3x3<float,1>::tmat3x3<float,1>
PUBLIC	??0?$tmat3x3@M$00@glm@@QAE@W4ctor@1@@Z		; glm::tmat3x3<float,1>::tmat3x3<float,1>
PUBLIC	??0?$tmat3x3@M$00@glm@@QAE@M@Z			; glm::tmat3x3<float,1>::tmat3x3<float,1>
PUBLIC	??0?$tmat3x3@M$00@glm@@QAE@MMMMMMMMM@Z		; glm::tmat3x3<float,1>::tmat3x3<float,1>
PUBLIC	??0?$tmat3x3@M$00@glm@@QAE@ABU?$tvec3@M$00@1@00@Z ; glm::tmat3x3<float,1>::tmat3x3<float,1>
PUBLIC	??0?$tmat3x3@M$00@glm@@QAE@ABU?$tmat2x2@M$00@1@@Z ; glm::tmat3x3<float,1>::tmat3x3<float,1>
PUBLIC	??0?$tmat3x3@M$00@glm@@QAE@ABU?$tmat4x4@M$00@1@@Z ; glm::tmat3x3<float,1>::tmat3x3<float,1>
PUBLIC	??0?$tmat3x3@M$00@glm@@QAE@ABU?$tmat2x3@M$00@1@@Z ; glm::tmat3x3<float,1>::tmat3x3<float,1>
PUBLIC	??0?$tmat3x3@M$00@glm@@QAE@ABU?$tmat3x2@M$00@1@@Z ; glm::tmat3x3<float,1>::tmat3x3<float,1>
PUBLIC	??0?$tmat3x3@M$00@glm@@QAE@ABU?$tmat2x4@M$00@1@@Z ; glm::tmat3x3<float,1>::tmat3x3<float,1>
PUBLIC	??0?$tmat3x3@M$00@glm@@QAE@ABU?$tmat4x2@M$00@1@@Z ; glm::tmat3x3<float,1>::tmat3x3<float,1>
PUBLIC	??0?$tmat3x3@M$00@glm@@QAE@ABU?$tmat3x4@M$00@1@@Z ; glm::tmat3x3<float,1>::tmat3x3<float,1>
PUBLIC	??0?$tmat3x3@M$00@glm@@QAE@ABU?$tmat4x3@M$00@1@@Z ; glm::tmat3x3<float,1>::tmat3x3<float,1>
PUBLIC	?length@?$tmat3x3@M$00@glm@@SAHXZ		; glm::tmat3x3<float,1>::length
PUBLIC	??A?$tmat3x3@M$00@glm@@QAEAAU?$tvec3@M$00@1@H@Z	; glm::tmat3x3<float,1>::operator[]
PUBLIC	??A?$tmat3x3@M$00@glm@@QBEABU?$tvec3@M$00@1@H@Z	; glm::tmat3x3<float,1>::operator[]
PUBLIC	??4?$tmat3x3@M$00@glm@@QAEAAU01@ABU01@@Z	; glm::tmat3x3<float,1>::operator=
PUBLIC	??E?$tmat3x3@M$00@glm@@QAEAAU01@XZ		; glm::tmat3x3<float,1>::operator++
PUBLIC	??F?$tmat3x3@M$00@glm@@QAEAAU01@XZ		; glm::tmat3x3<float,1>::operator--
PUBLIC	??E?$tmat3x3@M$00@glm@@QAE?AU01@H@Z		; glm::tmat3x3<float,1>::operator++
PUBLIC	??F?$tmat3x3@M$00@glm@@QAE?AU01@H@Z		; glm::tmat3x3<float,1>::operator--
PUBLIC	??0?$tmat3x3@N$00@glm@@QAE@XZ			; glm::tmat3x3<double,1>::tmat3x3<double,1>
PUBLIC	??0?$tmat3x3@N$00@glm@@QAE@ABU01@@Z		; glm::tmat3x3<double,1>::tmat3x3<double,1>
PUBLIC	??0?$tmat3x3@N$00@glm@@QAE@W4ctor@1@@Z		; glm::tmat3x3<double,1>::tmat3x3<double,1>
PUBLIC	??0?$tmat3x3@N$00@glm@@QAE@N@Z			; glm::tmat3x3<double,1>::tmat3x3<double,1>
PUBLIC	??0?$tmat3x3@N$00@glm@@QAE@NNNNNNNNN@Z		; glm::tmat3x3<double,1>::tmat3x3<double,1>
PUBLIC	??0?$tmat3x3@N$00@glm@@QAE@ABU?$tvec3@N$00@1@00@Z ; glm::tmat3x3<double,1>::tmat3x3<double,1>
PUBLIC	??0?$tmat3x3@N$00@glm@@QAE@ABU?$tmat2x2@N$00@1@@Z ; glm::tmat3x3<double,1>::tmat3x3<double,1>
PUBLIC	??0?$tmat3x3@N$00@glm@@QAE@ABU?$tmat4x4@N$00@1@@Z ; glm::tmat3x3<double,1>::tmat3x3<double,1>
PUBLIC	??0?$tmat3x3@N$00@glm@@QAE@ABU?$tmat2x3@N$00@1@@Z ; glm::tmat3x3<double,1>::tmat3x3<double,1>
PUBLIC	??0?$tmat3x3@N$00@glm@@QAE@ABU?$tmat3x2@N$00@1@@Z ; glm::tmat3x3<double,1>::tmat3x3<double,1>
PUBLIC	??0?$tmat3x3@N$00@glm@@QAE@ABU?$tmat2x4@N$00@1@@Z ; glm::tmat3x3<double,1>::tmat3x3<double,1>
PUBLIC	??0?$tmat3x3@N$00@glm@@QAE@ABU?$tmat4x2@N$00@1@@Z ; glm::tmat3x3<double,1>::tmat3x3<double,1>
PUBLIC	??0?$tmat3x3@N$00@glm@@QAE@ABU?$tmat3x4@N$00@1@@Z ; glm::tmat3x3<double,1>::tmat3x3<double,1>
PUBLIC	??0?$tmat3x3@N$00@glm@@QAE@ABU?$tmat4x3@N$00@1@@Z ; glm::tmat3x3<double,1>::tmat3x3<double,1>
PUBLIC	?length@?$tmat3x3@N$00@glm@@SAHXZ		; glm::tmat3x3<double,1>::length
PUBLIC	??A?$tmat3x3@N$00@glm@@QAEAAU?$tvec3@N$00@1@H@Z	; glm::tmat3x3<double,1>::operator[]
PUBLIC	??A?$tmat3x3@N$00@glm@@QBEABU?$tvec3@N$00@1@H@Z	; glm::tmat3x3<double,1>::operator[]
PUBLIC	??4?$tmat3x3@N$00@glm@@QAEAAU01@ABU01@@Z	; glm::tmat3x3<double,1>::operator=
PUBLIC	??E?$tmat3x3@N$00@glm@@QAEAAU01@XZ		; glm::tmat3x3<double,1>::operator++
PUBLIC	??F?$tmat3x3@N$00@glm@@QAEAAU01@XZ		; glm::tmat3x3<double,1>::operator--
PUBLIC	??E?$tmat3x3@N$00@glm@@QAE?AU01@H@Z		; glm::tmat3x3<double,1>::operator++
PUBLIC	??F?$tmat3x3@N$00@glm@@QAE?AU01@H@Z		; glm::tmat3x3<double,1>::operator--
PUBLIC	??0?$tmat3x3@M$0A@@glm@@QAE@XZ			; glm::tmat3x3<float,0>::tmat3x3<float,0>
PUBLIC	??0?$tmat3x3@M$0A@@glm@@QAE@ABU01@@Z		; glm::tmat3x3<float,0>::tmat3x3<float,0>
PUBLIC	??0?$tmat3x3@M$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tmat3x3<float,0>::tmat3x3<float,0>
PUBLIC	??0?$tmat3x3@M$0A@@glm@@QAE@M@Z			; glm::tmat3x3<float,0>::tmat3x3<float,0>
PUBLIC	??0?$tmat3x3@M$0A@@glm@@QAE@MMMMMMMMM@Z		; glm::tmat3x3<float,0>::tmat3x3<float,0>
PUBLIC	??0?$tmat3x3@M$0A@@glm@@QAE@ABU?$tvec3@M$0A@@1@00@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0>
PUBLIC	??0?$tmat3x3@M$0A@@glm@@QAE@ABU?$tmat2x2@M$0A@@1@@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0>
PUBLIC	??0?$tmat3x3@M$0A@@glm@@QAE@ABU?$tmat4x4@M$0A@@1@@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0>
PUBLIC	??0?$tmat3x3@M$0A@@glm@@QAE@ABU?$tmat2x3@M$0A@@1@@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0>
PUBLIC	??0?$tmat3x3@M$0A@@glm@@QAE@ABU?$tmat3x2@M$0A@@1@@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0>
PUBLIC	??0?$tmat3x3@M$0A@@glm@@QAE@ABU?$tmat2x4@M$0A@@1@@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0>
PUBLIC	??0?$tmat3x3@M$0A@@glm@@QAE@ABU?$tmat4x2@M$0A@@1@@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0>
PUBLIC	??0?$tmat3x3@M$0A@@glm@@QAE@ABU?$tmat3x4@M$0A@@1@@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0>
PUBLIC	??0?$tmat3x3@M$0A@@glm@@QAE@ABU?$tmat4x3@M$0A@@1@@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0>
PUBLIC	?length@?$tmat3x3@M$0A@@glm@@SAHXZ		; glm::tmat3x3<float,0>::length
PUBLIC	??A?$tmat3x3@M$0A@@glm@@QAEAAU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
PUBLIC	??A?$tmat3x3@M$0A@@glm@@QBEABU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
PUBLIC	??4?$tmat3x3@M$0A@@glm@@QAEAAU01@ABU01@@Z	; glm::tmat3x3<float,0>::operator=
PUBLIC	??E?$tmat3x3@M$0A@@glm@@QAEAAU01@XZ		; glm::tmat3x3<float,0>::operator++
PUBLIC	??F?$tmat3x3@M$0A@@glm@@QAEAAU01@XZ		; glm::tmat3x3<float,0>::operator--
PUBLIC	??E?$tmat3x3@M$0A@@glm@@QAE?AU01@H@Z		; glm::tmat3x3<float,0>::operator++
PUBLIC	??F?$tmat3x3@M$0A@@glm@@QAE?AU01@H@Z		; glm::tmat3x3<float,0>::operator--
PUBLIC	??0?$tmat3x3@N$0A@@glm@@QAE@XZ			; glm::tmat3x3<double,0>::tmat3x3<double,0>
PUBLIC	??0?$tmat3x3@N$0A@@glm@@QAE@ABU01@@Z		; glm::tmat3x3<double,0>::tmat3x3<double,0>
PUBLIC	??0?$tmat3x3@N$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tmat3x3<double,0>::tmat3x3<double,0>
PUBLIC	??0?$tmat3x3@N$0A@@glm@@QAE@N@Z			; glm::tmat3x3<double,0>::tmat3x3<double,0>
PUBLIC	??0?$tmat3x3@N$0A@@glm@@QAE@NNNNNNNNN@Z		; glm::tmat3x3<double,0>::tmat3x3<double,0>
PUBLIC	??0?$tmat3x3@N$0A@@glm@@QAE@ABU?$tvec3@N$0A@@1@00@Z ; glm::tmat3x3<double,0>::tmat3x3<double,0>
PUBLIC	??0?$tmat3x3@N$0A@@glm@@QAE@ABU?$tmat2x2@N$0A@@1@@Z ; glm::tmat3x3<double,0>::tmat3x3<double,0>
PUBLIC	??0?$tmat3x3@N$0A@@glm@@QAE@ABU?$tmat4x4@N$0A@@1@@Z ; glm::tmat3x3<double,0>::tmat3x3<double,0>
PUBLIC	??0?$tmat3x3@N$0A@@glm@@QAE@ABU?$tmat2x3@N$0A@@1@@Z ; glm::tmat3x3<double,0>::tmat3x3<double,0>
PUBLIC	??0?$tmat3x3@N$0A@@glm@@QAE@ABU?$tmat3x2@N$0A@@1@@Z ; glm::tmat3x3<double,0>::tmat3x3<double,0>
PUBLIC	??0?$tmat3x3@N$0A@@glm@@QAE@ABU?$tmat2x4@N$0A@@1@@Z ; glm::tmat3x3<double,0>::tmat3x3<double,0>
PUBLIC	??0?$tmat3x3@N$0A@@glm@@QAE@ABU?$tmat4x2@N$0A@@1@@Z ; glm::tmat3x3<double,0>::tmat3x3<double,0>
PUBLIC	??0?$tmat3x3@N$0A@@glm@@QAE@ABU?$tmat3x4@N$0A@@1@@Z ; glm::tmat3x3<double,0>::tmat3x3<double,0>
PUBLIC	??0?$tmat3x3@N$0A@@glm@@QAE@ABU?$tmat4x3@N$0A@@1@@Z ; glm::tmat3x3<double,0>::tmat3x3<double,0>
PUBLIC	?length@?$tmat3x3@N$0A@@glm@@SAHXZ		; glm::tmat3x3<double,0>::length
PUBLIC	??A?$tmat3x3@N$0A@@glm@@QAEAAU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
PUBLIC	??A?$tmat3x3@N$0A@@glm@@QBEABU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
PUBLIC	??4?$tmat3x3@N$0A@@glm@@QAEAAU01@ABU01@@Z	; glm::tmat3x3<double,0>::operator=
PUBLIC	??E?$tmat3x3@N$0A@@glm@@QAEAAU01@XZ		; glm::tmat3x3<double,0>::operator++
PUBLIC	??F?$tmat3x3@N$0A@@glm@@QAEAAU01@XZ		; glm::tmat3x3<double,0>::operator--
PUBLIC	??E?$tmat3x3@N$0A@@glm@@QAE?AU01@H@Z		; glm::tmat3x3<double,0>::operator++
PUBLIC	??F?$tmat3x3@N$0A@@glm@@QAE?AU01@H@Z		; glm::tmat3x3<double,0>::operator--
PUBLIC	??0?$tmat3x4@M$01@glm@@QAE@XZ			; glm::tmat3x4<float,2>::tmat3x4<float,2>
PUBLIC	??0?$tmat3x4@M$01@glm@@QAE@ABU01@@Z		; glm::tmat3x4<float,2>::tmat3x4<float,2>
PUBLIC	??0?$tmat3x4@M$01@glm@@QAE@W4ctor@1@@Z		; glm::tmat3x4<float,2>::tmat3x4<float,2>
PUBLIC	??0?$tmat3x4@M$01@glm@@QAE@M@Z			; glm::tmat3x4<float,2>::tmat3x4<float,2>
PUBLIC	??0?$tmat3x4@M$01@glm@@QAE@MMMMMMMMMMMM@Z	; glm::tmat3x4<float,2>::tmat3x4<float,2>
PUBLIC	??0?$tmat3x4@M$01@glm@@QAE@ABU?$tvec4@M$01@1@00@Z ; glm::tmat3x4<float,2>::tmat3x4<float,2>
PUBLIC	??0?$tmat3x4@M$01@glm@@QAE@ABU?$tmat2x2@M$01@1@@Z ; glm::tmat3x4<float,2>::tmat3x4<float,2>
PUBLIC	??0?$tmat3x4@M$01@glm@@QAE@ABU?$tmat3x3@M$01@1@@Z ; glm::tmat3x4<float,2>::tmat3x4<float,2>
PUBLIC	??0?$tmat3x4@M$01@glm@@QAE@ABU?$tmat4x4@M$01@1@@Z ; glm::tmat3x4<float,2>::tmat3x4<float,2>
PUBLIC	??0?$tmat3x4@M$01@glm@@QAE@ABU?$tmat2x3@M$01@1@@Z ; glm::tmat3x4<float,2>::tmat3x4<float,2>
PUBLIC	??0?$tmat3x4@M$01@glm@@QAE@ABU?$tmat3x2@M$01@1@@Z ; glm::tmat3x4<float,2>::tmat3x4<float,2>
PUBLIC	??0?$tmat3x4@M$01@glm@@QAE@ABU?$tmat2x4@M$01@1@@Z ; glm::tmat3x4<float,2>::tmat3x4<float,2>
PUBLIC	??0?$tmat3x4@M$01@glm@@QAE@ABU?$tmat4x2@M$01@1@@Z ; glm::tmat3x4<float,2>::tmat3x4<float,2>
PUBLIC	??0?$tmat3x4@M$01@glm@@QAE@ABU?$tmat4x3@M$01@1@@Z ; glm::tmat3x4<float,2>::tmat3x4<float,2>
PUBLIC	?length@?$tmat3x4@M$01@glm@@SAHXZ		; glm::tmat3x4<float,2>::length
PUBLIC	??A?$tmat3x4@M$01@glm@@QAEAAU?$tvec4@M$01@1@H@Z	; glm::tmat3x4<float,2>::operator[]
PUBLIC	??A?$tmat3x4@M$01@glm@@QBEABU?$tvec4@M$01@1@H@Z	; glm::tmat3x4<float,2>::operator[]
PUBLIC	??4?$tmat3x4@M$01@glm@@QAEAAU01@ABU01@@Z	; glm::tmat3x4<float,2>::operator=
PUBLIC	??E?$tmat3x4@M$01@glm@@QAEAAU01@XZ		; glm::tmat3x4<float,2>::operator++
PUBLIC	??F?$tmat3x4@M$01@glm@@QAEAAU01@XZ		; glm::tmat3x4<float,2>::operator--
PUBLIC	??E?$tmat3x4@M$01@glm@@QAE?AU01@H@Z		; glm::tmat3x4<float,2>::operator++
PUBLIC	??F?$tmat3x4@M$01@glm@@QAE?AU01@H@Z		; glm::tmat3x4<float,2>::operator--
PUBLIC	??0?$tmat3x4@N$01@glm@@QAE@XZ			; glm::tmat3x4<double,2>::tmat3x4<double,2>
PUBLIC	??0?$tmat3x4@N$01@glm@@QAE@ABU01@@Z		; glm::tmat3x4<double,2>::tmat3x4<double,2>
PUBLIC	??0?$tmat3x4@N$01@glm@@QAE@W4ctor@1@@Z		; glm::tmat3x4<double,2>::tmat3x4<double,2>
PUBLIC	??0?$tmat3x4@N$01@glm@@QAE@N@Z			; glm::tmat3x4<double,2>::tmat3x4<double,2>
PUBLIC	??0?$tmat3x4@N$01@glm@@QAE@NNNNNNNNNNNN@Z	; glm::tmat3x4<double,2>::tmat3x4<double,2>
PUBLIC	??0?$tmat3x4@N$01@glm@@QAE@ABU?$tvec4@N$01@1@00@Z ; glm::tmat3x4<double,2>::tmat3x4<double,2>
PUBLIC	??0?$tmat3x4@N$01@glm@@QAE@ABU?$tmat2x2@N$01@1@@Z ; glm::tmat3x4<double,2>::tmat3x4<double,2>
PUBLIC	??0?$tmat3x4@N$01@glm@@QAE@ABU?$tmat3x3@N$01@1@@Z ; glm::tmat3x4<double,2>::tmat3x4<double,2>
PUBLIC	??0?$tmat3x4@N$01@glm@@QAE@ABU?$tmat4x4@N$01@1@@Z ; glm::tmat3x4<double,2>::tmat3x4<double,2>
PUBLIC	??0?$tmat3x4@N$01@glm@@QAE@ABU?$tmat2x3@N$01@1@@Z ; glm::tmat3x4<double,2>::tmat3x4<double,2>
PUBLIC	??0?$tmat3x4@N$01@glm@@QAE@ABU?$tmat3x2@N$01@1@@Z ; glm::tmat3x4<double,2>::tmat3x4<double,2>
PUBLIC	??0?$tmat3x4@N$01@glm@@QAE@ABU?$tmat2x4@N$01@1@@Z ; glm::tmat3x4<double,2>::tmat3x4<double,2>
PUBLIC	??0?$tmat3x4@N$01@glm@@QAE@ABU?$tmat4x2@N$01@1@@Z ; glm::tmat3x4<double,2>::tmat3x4<double,2>
PUBLIC	??0?$tmat3x4@N$01@glm@@QAE@ABU?$tmat4x3@N$01@1@@Z ; glm::tmat3x4<double,2>::tmat3x4<double,2>
PUBLIC	?length@?$tmat3x4@N$01@glm@@SAHXZ		; glm::tmat3x4<double,2>::length
PUBLIC	??A?$tmat3x4@N$01@glm@@QAEAAU?$tvec4@N$01@1@H@Z	; glm::tmat3x4<double,2>::operator[]
PUBLIC	??A?$tmat3x4@N$01@glm@@QBEABU?$tvec4@N$01@1@H@Z	; glm::tmat3x4<double,2>::operator[]
PUBLIC	??4?$tmat3x4@N$01@glm@@QAEAAU01@ABU01@@Z	; glm::tmat3x4<double,2>::operator=
PUBLIC	??E?$tmat3x4@N$01@glm@@QAEAAU01@XZ		; glm::tmat3x4<double,2>::operator++
PUBLIC	??F?$tmat3x4@N$01@glm@@QAEAAU01@XZ		; glm::tmat3x4<double,2>::operator--
PUBLIC	??E?$tmat3x4@N$01@glm@@QAE?AU01@H@Z		; glm::tmat3x4<double,2>::operator++
PUBLIC	??F?$tmat3x4@N$01@glm@@QAE?AU01@H@Z		; glm::tmat3x4<double,2>::operator--
PUBLIC	??0?$tmat3x4@M$00@glm@@QAE@XZ			; glm::tmat3x4<float,1>::tmat3x4<float,1>
PUBLIC	??0?$tmat3x4@M$00@glm@@QAE@ABU01@@Z		; glm::tmat3x4<float,1>::tmat3x4<float,1>
PUBLIC	??0?$tmat3x4@M$00@glm@@QAE@W4ctor@1@@Z		; glm::tmat3x4<float,1>::tmat3x4<float,1>
PUBLIC	??0?$tmat3x4@M$00@glm@@QAE@M@Z			; glm::tmat3x4<float,1>::tmat3x4<float,1>
PUBLIC	??0?$tmat3x4@M$00@glm@@QAE@MMMMMMMMMMMM@Z	; glm::tmat3x4<float,1>::tmat3x4<float,1>
PUBLIC	??0?$tmat3x4@M$00@glm@@QAE@ABU?$tvec4@M$00@1@00@Z ; glm::tmat3x4<float,1>::tmat3x4<float,1>
PUBLIC	??0?$tmat3x4@M$00@glm@@QAE@ABU?$tmat2x2@M$00@1@@Z ; glm::tmat3x4<float,1>::tmat3x4<float,1>
PUBLIC	??0?$tmat3x4@M$00@glm@@QAE@ABU?$tmat3x3@M$00@1@@Z ; glm::tmat3x4<float,1>::tmat3x4<float,1>
PUBLIC	??0?$tmat3x4@M$00@glm@@QAE@ABU?$tmat4x4@M$00@1@@Z ; glm::tmat3x4<float,1>::tmat3x4<float,1>
PUBLIC	??0?$tmat3x4@M$00@glm@@QAE@ABU?$tmat2x3@M$00@1@@Z ; glm::tmat3x4<float,1>::tmat3x4<float,1>
PUBLIC	??0?$tmat3x4@M$00@glm@@QAE@ABU?$tmat3x2@M$00@1@@Z ; glm::tmat3x4<float,1>::tmat3x4<float,1>
PUBLIC	??0?$tmat3x4@M$00@glm@@QAE@ABU?$tmat2x4@M$00@1@@Z ; glm::tmat3x4<float,1>::tmat3x4<float,1>
PUBLIC	??0?$tmat3x4@M$00@glm@@QAE@ABU?$tmat4x2@M$00@1@@Z ; glm::tmat3x4<float,1>::tmat3x4<float,1>
PUBLIC	??0?$tmat3x4@M$00@glm@@QAE@ABU?$tmat4x3@M$00@1@@Z ; glm::tmat3x4<float,1>::tmat3x4<float,1>
PUBLIC	?length@?$tmat3x4@M$00@glm@@SAHXZ		; glm::tmat3x4<float,1>::length
PUBLIC	??A?$tmat3x4@M$00@glm@@QAEAAU?$tvec4@M$00@1@H@Z	; glm::tmat3x4<float,1>::operator[]
PUBLIC	??A?$tmat3x4@M$00@glm@@QBEABU?$tvec4@M$00@1@H@Z	; glm::tmat3x4<float,1>::operator[]
PUBLIC	??4?$tmat3x4@M$00@glm@@QAEAAU01@ABU01@@Z	; glm::tmat3x4<float,1>::operator=
PUBLIC	??E?$tmat3x4@M$00@glm@@QAEAAU01@XZ		; glm::tmat3x4<float,1>::operator++
PUBLIC	??F?$tmat3x4@M$00@glm@@QAEAAU01@XZ		; glm::tmat3x4<float,1>::operator--
PUBLIC	??E?$tmat3x4@M$00@glm@@QAE?AU01@H@Z		; glm::tmat3x4<float,1>::operator++
PUBLIC	??F?$tmat3x4@M$00@glm@@QAE?AU01@H@Z		; glm::tmat3x4<float,1>::operator--
PUBLIC	??0?$tmat3x4@N$00@glm@@QAE@XZ			; glm::tmat3x4<double,1>::tmat3x4<double,1>
PUBLIC	??0?$tmat3x4@N$00@glm@@QAE@ABU01@@Z		; glm::tmat3x4<double,1>::tmat3x4<double,1>
PUBLIC	??0?$tmat3x4@N$00@glm@@QAE@W4ctor@1@@Z		; glm::tmat3x4<double,1>::tmat3x4<double,1>
PUBLIC	??0?$tmat3x4@N$00@glm@@QAE@N@Z			; glm::tmat3x4<double,1>::tmat3x4<double,1>
PUBLIC	??0?$tmat3x4@N$00@glm@@QAE@NNNNNNNNNNNN@Z	; glm::tmat3x4<double,1>::tmat3x4<double,1>
PUBLIC	??0?$tmat3x4@N$00@glm@@QAE@ABU?$tvec4@N$00@1@00@Z ; glm::tmat3x4<double,1>::tmat3x4<double,1>
PUBLIC	??0?$tmat3x4@N$00@glm@@QAE@ABU?$tmat2x2@N$00@1@@Z ; glm::tmat3x4<double,1>::tmat3x4<double,1>
PUBLIC	??0?$tmat3x4@N$00@glm@@QAE@ABU?$tmat3x3@N$00@1@@Z ; glm::tmat3x4<double,1>::tmat3x4<double,1>
PUBLIC	??0?$tmat3x4@N$00@glm@@QAE@ABU?$tmat4x4@N$00@1@@Z ; glm::tmat3x4<double,1>::tmat3x4<double,1>
PUBLIC	??0?$tmat3x4@N$00@glm@@QAE@ABU?$tmat2x3@N$00@1@@Z ; glm::tmat3x4<double,1>::tmat3x4<double,1>
PUBLIC	??0?$tmat3x4@N$00@glm@@QAE@ABU?$tmat3x2@N$00@1@@Z ; glm::tmat3x4<double,1>::tmat3x4<double,1>
PUBLIC	??0?$tmat3x4@N$00@glm@@QAE@ABU?$tmat2x4@N$00@1@@Z ; glm::tmat3x4<double,1>::tmat3x4<double,1>
PUBLIC	??0?$tmat3x4@N$00@glm@@QAE@ABU?$tmat4x2@N$00@1@@Z ; glm::tmat3x4<double,1>::tmat3x4<double,1>
PUBLIC	??0?$tmat3x4@N$00@glm@@QAE@ABU?$tmat4x3@N$00@1@@Z ; glm::tmat3x4<double,1>::tmat3x4<double,1>
PUBLIC	?length@?$tmat3x4@N$00@glm@@SAHXZ		; glm::tmat3x4<double,1>::length
PUBLIC	??A?$tmat3x4@N$00@glm@@QAEAAU?$tvec4@N$00@1@H@Z	; glm::tmat3x4<double,1>::operator[]
PUBLIC	??A?$tmat3x4@N$00@glm@@QBEABU?$tvec4@N$00@1@H@Z	; glm::tmat3x4<double,1>::operator[]
PUBLIC	??4?$tmat3x4@N$00@glm@@QAEAAU01@ABU01@@Z	; glm::tmat3x4<double,1>::operator=
PUBLIC	??E?$tmat3x4@N$00@glm@@QAEAAU01@XZ		; glm::tmat3x4<double,1>::operator++
PUBLIC	??F?$tmat3x4@N$00@glm@@QAEAAU01@XZ		; glm::tmat3x4<double,1>::operator--
PUBLIC	??E?$tmat3x4@N$00@glm@@QAE?AU01@H@Z		; glm::tmat3x4<double,1>::operator++
PUBLIC	??F?$tmat3x4@N$00@glm@@QAE?AU01@H@Z		; glm::tmat3x4<double,1>::operator--
PUBLIC	??0?$tmat3x4@M$0A@@glm@@QAE@XZ			; glm::tmat3x4<float,0>::tmat3x4<float,0>
PUBLIC	??0?$tmat3x4@M$0A@@glm@@QAE@ABU01@@Z		; glm::tmat3x4<float,0>::tmat3x4<float,0>
PUBLIC	??0?$tmat3x4@M$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tmat3x4<float,0>::tmat3x4<float,0>
PUBLIC	??0?$tmat3x4@M$0A@@glm@@QAE@M@Z			; glm::tmat3x4<float,0>::tmat3x4<float,0>
PUBLIC	??0?$tmat3x4@M$0A@@glm@@QAE@MMMMMMMMMMMM@Z	; glm::tmat3x4<float,0>::tmat3x4<float,0>
PUBLIC	??0?$tmat3x4@M$0A@@glm@@QAE@ABU?$tvec4@M$0A@@1@00@Z ; glm::tmat3x4<float,0>::tmat3x4<float,0>
PUBLIC	??0?$tmat3x4@M$0A@@glm@@QAE@ABU?$tmat2x2@M$0A@@1@@Z ; glm::tmat3x4<float,0>::tmat3x4<float,0>
PUBLIC	??0?$tmat3x4@M$0A@@glm@@QAE@ABU?$tmat3x3@M$0A@@1@@Z ; glm::tmat3x4<float,0>::tmat3x4<float,0>
PUBLIC	??0?$tmat3x4@M$0A@@glm@@QAE@ABU?$tmat4x4@M$0A@@1@@Z ; glm::tmat3x4<float,0>::tmat3x4<float,0>
PUBLIC	??0?$tmat3x4@M$0A@@glm@@QAE@ABU?$tmat2x3@M$0A@@1@@Z ; glm::tmat3x4<float,0>::tmat3x4<float,0>
PUBLIC	??0?$tmat3x4@M$0A@@glm@@QAE@ABU?$tmat3x2@M$0A@@1@@Z ; glm::tmat3x4<float,0>::tmat3x4<float,0>
PUBLIC	??0?$tmat3x4@M$0A@@glm@@QAE@ABU?$tmat2x4@M$0A@@1@@Z ; glm::tmat3x4<float,0>::tmat3x4<float,0>
PUBLIC	??0?$tmat3x4@M$0A@@glm@@QAE@ABU?$tmat4x2@M$0A@@1@@Z ; glm::tmat3x4<float,0>::tmat3x4<float,0>
PUBLIC	??0?$tmat3x4@M$0A@@glm@@QAE@ABU?$tmat4x3@M$0A@@1@@Z ; glm::tmat3x4<float,0>::tmat3x4<float,0>
PUBLIC	?length@?$tmat3x4@M$0A@@glm@@SAHXZ		; glm::tmat3x4<float,0>::length
PUBLIC	??A?$tmat3x4@M$0A@@glm@@QAEAAU?$tvec4@M$0A@@1@H@Z ; glm::tmat3x4<float,0>::operator[]
PUBLIC	??A?$tmat3x4@M$0A@@glm@@QBEABU?$tvec4@M$0A@@1@H@Z ; glm::tmat3x4<float,0>::operator[]
PUBLIC	??4?$tmat3x4@M$0A@@glm@@QAEAAU01@ABU01@@Z	; glm::tmat3x4<float,0>::operator=
PUBLIC	??E?$tmat3x4@M$0A@@glm@@QAEAAU01@XZ		; glm::tmat3x4<float,0>::operator++
PUBLIC	??F?$tmat3x4@M$0A@@glm@@QAEAAU01@XZ		; glm::tmat3x4<float,0>::operator--
PUBLIC	??E?$tmat3x4@M$0A@@glm@@QAE?AU01@H@Z		; glm::tmat3x4<float,0>::operator++
PUBLIC	??F?$tmat3x4@M$0A@@glm@@QAE?AU01@H@Z		; glm::tmat3x4<float,0>::operator--
PUBLIC	??0?$tmat3x4@N$0A@@glm@@QAE@XZ			; glm::tmat3x4<double,0>::tmat3x4<double,0>
PUBLIC	??0?$tmat3x4@N$0A@@glm@@QAE@ABU01@@Z		; glm::tmat3x4<double,0>::tmat3x4<double,0>
PUBLIC	??0?$tmat3x4@N$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tmat3x4<double,0>::tmat3x4<double,0>
PUBLIC	??0?$tmat3x4@N$0A@@glm@@QAE@N@Z			; glm::tmat3x4<double,0>::tmat3x4<double,0>
PUBLIC	??0?$tmat3x4@N$0A@@glm@@QAE@NNNNNNNNNNNN@Z	; glm::tmat3x4<double,0>::tmat3x4<double,0>
PUBLIC	??0?$tmat3x4@N$0A@@glm@@QAE@ABU?$tvec4@N$0A@@1@00@Z ; glm::tmat3x4<double,0>::tmat3x4<double,0>
PUBLIC	??0?$tmat3x4@N$0A@@glm@@QAE@ABU?$tmat2x2@N$0A@@1@@Z ; glm::tmat3x4<double,0>::tmat3x4<double,0>
PUBLIC	??0?$tmat3x4@N$0A@@glm@@QAE@ABU?$tmat3x3@N$0A@@1@@Z ; glm::tmat3x4<double,0>::tmat3x4<double,0>
PUBLIC	??0?$tmat3x4@N$0A@@glm@@QAE@ABU?$tmat4x4@N$0A@@1@@Z ; glm::tmat3x4<double,0>::tmat3x4<double,0>
PUBLIC	??0?$tmat3x4@N$0A@@glm@@QAE@ABU?$tmat2x3@N$0A@@1@@Z ; glm::tmat3x4<double,0>::tmat3x4<double,0>
PUBLIC	??0?$tmat3x4@N$0A@@glm@@QAE@ABU?$tmat3x2@N$0A@@1@@Z ; glm::tmat3x4<double,0>::tmat3x4<double,0>
PUBLIC	??0?$tmat3x4@N$0A@@glm@@QAE@ABU?$tmat2x4@N$0A@@1@@Z ; glm::tmat3x4<double,0>::tmat3x4<double,0>
PUBLIC	??0?$tmat3x4@N$0A@@glm@@QAE@ABU?$tmat4x2@N$0A@@1@@Z ; glm::tmat3x4<double,0>::tmat3x4<double,0>
PUBLIC	??0?$tmat3x4@N$0A@@glm@@QAE@ABU?$tmat4x3@N$0A@@1@@Z ; glm::tmat3x4<double,0>::tmat3x4<double,0>
PUBLIC	?length@?$tmat3x4@N$0A@@glm@@SAHXZ		; glm::tmat3x4<double,0>::length
PUBLIC	??A?$tmat3x4@N$0A@@glm@@QAEAAU?$tvec4@N$0A@@1@H@Z ; glm::tmat3x4<double,0>::operator[]
PUBLIC	??A?$tmat3x4@N$0A@@glm@@QBEABU?$tvec4@N$0A@@1@H@Z ; glm::tmat3x4<double,0>::operator[]
PUBLIC	??4?$tmat3x4@N$0A@@glm@@QAEAAU01@ABU01@@Z	; glm::tmat3x4<double,0>::operator=
PUBLIC	??E?$tmat3x4@N$0A@@glm@@QAEAAU01@XZ		; glm::tmat3x4<double,0>::operator++
PUBLIC	??F?$tmat3x4@N$0A@@glm@@QAEAAU01@XZ		; glm::tmat3x4<double,0>::operator--
PUBLIC	??E?$tmat3x4@N$0A@@glm@@QAE?AU01@H@Z		; glm::tmat3x4<double,0>::operator++
PUBLIC	??F?$tmat3x4@N$0A@@glm@@QAE?AU01@H@Z		; glm::tmat3x4<double,0>::operator--
PUBLIC	??0?$tmat4x2@M$01@glm@@QAE@XZ			; glm::tmat4x2<float,2>::tmat4x2<float,2>
PUBLIC	??0?$tmat4x2@M$01@glm@@QAE@ABU01@@Z		; glm::tmat4x2<float,2>::tmat4x2<float,2>
PUBLIC	??0?$tmat4x2@M$01@glm@@QAE@W4ctor@1@@Z		; glm::tmat4x2<float,2>::tmat4x2<float,2>
PUBLIC	??0?$tmat4x2@M$01@glm@@QAE@M@Z			; glm::tmat4x2<float,2>::tmat4x2<float,2>
PUBLIC	??0?$tmat4x2@M$01@glm@@QAE@MMMMMMMM@Z		; glm::tmat4x2<float,2>::tmat4x2<float,2>
PUBLIC	??0?$tmat4x2@M$01@glm@@QAE@ABU?$tvec2@M$01@1@000@Z ; glm::tmat4x2<float,2>::tmat4x2<float,2>
PUBLIC	??0?$tmat4x2@M$01@glm@@QAE@ABU?$tmat2x2@M$01@1@@Z ; glm::tmat4x2<float,2>::tmat4x2<float,2>
PUBLIC	??0?$tmat4x2@M$01@glm@@QAE@ABU?$tmat3x3@M$01@1@@Z ; glm::tmat4x2<float,2>::tmat4x2<float,2>
PUBLIC	??0?$tmat4x2@M$01@glm@@QAE@ABU?$tmat4x4@M$01@1@@Z ; glm::tmat4x2<float,2>::tmat4x2<float,2>
PUBLIC	??0?$tmat4x2@M$01@glm@@QAE@ABU?$tmat2x3@M$01@1@@Z ; glm::tmat4x2<float,2>::tmat4x2<float,2>
PUBLIC	??0?$tmat4x2@M$01@glm@@QAE@ABU?$tmat3x2@M$01@1@@Z ; glm::tmat4x2<float,2>::tmat4x2<float,2>
PUBLIC	??0?$tmat4x2@M$01@glm@@QAE@ABU?$tmat2x4@M$01@1@@Z ; glm::tmat4x2<float,2>::tmat4x2<float,2>
PUBLIC	??0?$tmat4x2@M$01@glm@@QAE@ABU?$tmat4x3@M$01@1@@Z ; glm::tmat4x2<float,2>::tmat4x2<float,2>
PUBLIC	??0?$tmat4x2@M$01@glm@@QAE@ABU?$tmat3x4@M$01@1@@Z ; glm::tmat4x2<float,2>::tmat4x2<float,2>
PUBLIC	?length@?$tmat4x2@M$01@glm@@SAHXZ		; glm::tmat4x2<float,2>::length
PUBLIC	??A?$tmat4x2@M$01@glm@@QAEAAU?$tvec2@M$01@1@H@Z	; glm::tmat4x2<float,2>::operator[]
PUBLIC	??A?$tmat4x2@M$01@glm@@QBEABU?$tvec2@M$01@1@H@Z	; glm::tmat4x2<float,2>::operator[]
PUBLIC	??4?$tmat4x2@M$01@glm@@QAEAAU01@ABU01@@Z	; glm::tmat4x2<float,2>::operator=
PUBLIC	??E?$tmat4x2@M$01@glm@@QAEAAU01@XZ		; glm::tmat4x2<float,2>::operator++
PUBLIC	??F?$tmat4x2@M$01@glm@@QAEAAU01@XZ		; glm::tmat4x2<float,2>::operator--
PUBLIC	??E?$tmat4x2@M$01@glm@@QAE?AU01@H@Z		; glm::tmat4x2<float,2>::operator++
PUBLIC	??F?$tmat4x2@M$01@glm@@QAE?AU01@H@Z		; glm::tmat4x2<float,2>::operator--
PUBLIC	??0?$tmat4x2@N$01@glm@@QAE@XZ			; glm::tmat4x2<double,2>::tmat4x2<double,2>
PUBLIC	??0?$tmat4x2@N$01@glm@@QAE@ABU01@@Z		; glm::tmat4x2<double,2>::tmat4x2<double,2>
PUBLIC	??0?$tmat4x2@N$01@glm@@QAE@W4ctor@1@@Z		; glm::tmat4x2<double,2>::tmat4x2<double,2>
PUBLIC	??0?$tmat4x2@N$01@glm@@QAE@N@Z			; glm::tmat4x2<double,2>::tmat4x2<double,2>
PUBLIC	??0?$tmat4x2@N$01@glm@@QAE@NNNNNNNN@Z		; glm::tmat4x2<double,2>::tmat4x2<double,2>
PUBLIC	??0?$tmat4x2@N$01@glm@@QAE@ABU?$tvec2@N$01@1@000@Z ; glm::tmat4x2<double,2>::tmat4x2<double,2>
PUBLIC	??0?$tmat4x2@N$01@glm@@QAE@ABU?$tmat2x2@N$01@1@@Z ; glm::tmat4x2<double,2>::tmat4x2<double,2>
PUBLIC	??0?$tmat4x2@N$01@glm@@QAE@ABU?$tmat3x3@N$01@1@@Z ; glm::tmat4x2<double,2>::tmat4x2<double,2>
PUBLIC	??0?$tmat4x2@N$01@glm@@QAE@ABU?$tmat4x4@N$01@1@@Z ; glm::tmat4x2<double,2>::tmat4x2<double,2>
PUBLIC	??0?$tmat4x2@N$01@glm@@QAE@ABU?$tmat2x3@N$01@1@@Z ; glm::tmat4x2<double,2>::tmat4x2<double,2>
PUBLIC	??0?$tmat4x2@N$01@glm@@QAE@ABU?$tmat3x2@N$01@1@@Z ; glm::tmat4x2<double,2>::tmat4x2<double,2>
PUBLIC	??0?$tmat4x2@N$01@glm@@QAE@ABU?$tmat2x4@N$01@1@@Z ; glm::tmat4x2<double,2>::tmat4x2<double,2>
PUBLIC	??0?$tmat4x2@N$01@glm@@QAE@ABU?$tmat4x3@N$01@1@@Z ; glm::tmat4x2<double,2>::tmat4x2<double,2>
PUBLIC	??0?$tmat4x2@N$01@glm@@QAE@ABU?$tmat3x4@N$01@1@@Z ; glm::tmat4x2<double,2>::tmat4x2<double,2>
PUBLIC	?length@?$tmat4x2@N$01@glm@@SAHXZ		; glm::tmat4x2<double,2>::length
PUBLIC	??A?$tmat4x2@N$01@glm@@QAEAAU?$tvec2@N$01@1@H@Z	; glm::tmat4x2<double,2>::operator[]
PUBLIC	??A?$tmat4x2@N$01@glm@@QBEABU?$tvec2@N$01@1@H@Z	; glm::tmat4x2<double,2>::operator[]
PUBLIC	??4?$tmat4x2@N$01@glm@@QAEAAU01@ABU01@@Z	; glm::tmat4x2<double,2>::operator=
PUBLIC	??E?$tmat4x2@N$01@glm@@QAEAAU01@XZ		; glm::tmat4x2<double,2>::operator++
PUBLIC	??F?$tmat4x2@N$01@glm@@QAEAAU01@XZ		; glm::tmat4x2<double,2>::operator--
PUBLIC	??E?$tmat4x2@N$01@glm@@QAE?AU01@H@Z		; glm::tmat4x2<double,2>::operator++
PUBLIC	??F?$tmat4x2@N$01@glm@@QAE?AU01@H@Z		; glm::tmat4x2<double,2>::operator--
PUBLIC	??0?$tmat4x2@M$00@glm@@QAE@XZ			; glm::tmat4x2<float,1>::tmat4x2<float,1>
PUBLIC	??0?$tmat4x2@M$00@glm@@QAE@ABU01@@Z		; glm::tmat4x2<float,1>::tmat4x2<float,1>
PUBLIC	??0?$tmat4x2@M$00@glm@@QAE@W4ctor@1@@Z		; glm::tmat4x2<float,1>::tmat4x2<float,1>
PUBLIC	??0?$tmat4x2@M$00@glm@@QAE@M@Z			; glm::tmat4x2<float,1>::tmat4x2<float,1>
PUBLIC	??0?$tmat4x2@M$00@glm@@QAE@MMMMMMMM@Z		; glm::tmat4x2<float,1>::tmat4x2<float,1>
PUBLIC	??0?$tmat4x2@M$00@glm@@QAE@ABU?$tvec2@M$00@1@000@Z ; glm::tmat4x2<float,1>::tmat4x2<float,1>
PUBLIC	??0?$tmat4x2@M$00@glm@@QAE@ABU?$tmat2x2@M$00@1@@Z ; glm::tmat4x2<float,1>::tmat4x2<float,1>
PUBLIC	??0?$tmat4x2@M$00@glm@@QAE@ABU?$tmat3x3@M$00@1@@Z ; glm::tmat4x2<float,1>::tmat4x2<float,1>
PUBLIC	??0?$tmat4x2@M$00@glm@@QAE@ABU?$tmat4x4@M$00@1@@Z ; glm::tmat4x2<float,1>::tmat4x2<float,1>
PUBLIC	??0?$tmat4x2@M$00@glm@@QAE@ABU?$tmat2x3@M$00@1@@Z ; glm::tmat4x2<float,1>::tmat4x2<float,1>
PUBLIC	??0?$tmat4x2@M$00@glm@@QAE@ABU?$tmat3x2@M$00@1@@Z ; glm::tmat4x2<float,1>::tmat4x2<float,1>
PUBLIC	??0?$tmat4x2@M$00@glm@@QAE@ABU?$tmat2x4@M$00@1@@Z ; glm::tmat4x2<float,1>::tmat4x2<float,1>
PUBLIC	??0?$tmat4x2@M$00@glm@@QAE@ABU?$tmat4x3@M$00@1@@Z ; glm::tmat4x2<float,1>::tmat4x2<float,1>
PUBLIC	??0?$tmat4x2@M$00@glm@@QAE@ABU?$tmat3x4@M$00@1@@Z ; glm::tmat4x2<float,1>::tmat4x2<float,1>
PUBLIC	?length@?$tmat4x2@M$00@glm@@SAHXZ		; glm::tmat4x2<float,1>::length
PUBLIC	??A?$tmat4x2@M$00@glm@@QAEAAU?$tvec2@M$00@1@H@Z	; glm::tmat4x2<float,1>::operator[]
PUBLIC	??A?$tmat4x2@M$00@glm@@QBEABU?$tvec2@M$00@1@H@Z	; glm::tmat4x2<float,1>::operator[]
PUBLIC	??4?$tmat4x2@M$00@glm@@QAEAAU01@ABU01@@Z	; glm::tmat4x2<float,1>::operator=
PUBLIC	??E?$tmat4x2@M$00@glm@@QAEAAU01@XZ		; glm::tmat4x2<float,1>::operator++
PUBLIC	??F?$tmat4x2@M$00@glm@@QAEAAU01@XZ		; glm::tmat4x2<float,1>::operator--
PUBLIC	??E?$tmat4x2@M$00@glm@@QAE?AU01@H@Z		; glm::tmat4x2<float,1>::operator++
PUBLIC	??F?$tmat4x2@M$00@glm@@QAE?AU01@H@Z		; glm::tmat4x2<float,1>::operator--
PUBLIC	??0?$tmat4x2@N$00@glm@@QAE@XZ			; glm::tmat4x2<double,1>::tmat4x2<double,1>
PUBLIC	??0?$tmat4x2@N$00@glm@@QAE@ABU01@@Z		; glm::tmat4x2<double,1>::tmat4x2<double,1>
PUBLIC	??0?$tmat4x2@N$00@glm@@QAE@W4ctor@1@@Z		; glm::tmat4x2<double,1>::tmat4x2<double,1>
PUBLIC	??0?$tmat4x2@N$00@glm@@QAE@N@Z			; glm::tmat4x2<double,1>::tmat4x2<double,1>
PUBLIC	??0?$tmat4x2@N$00@glm@@QAE@NNNNNNNN@Z		; glm::tmat4x2<double,1>::tmat4x2<double,1>
PUBLIC	??0?$tmat4x2@N$00@glm@@QAE@ABU?$tvec2@N$00@1@000@Z ; glm::tmat4x2<double,1>::tmat4x2<double,1>
PUBLIC	??0?$tmat4x2@N$00@glm@@QAE@ABU?$tmat2x2@N$00@1@@Z ; glm::tmat4x2<double,1>::tmat4x2<double,1>
PUBLIC	??0?$tmat4x2@N$00@glm@@QAE@ABU?$tmat3x3@N$00@1@@Z ; glm::tmat4x2<double,1>::tmat4x2<double,1>
PUBLIC	??0?$tmat4x2@N$00@glm@@QAE@ABU?$tmat4x4@N$00@1@@Z ; glm::tmat4x2<double,1>::tmat4x2<double,1>
PUBLIC	??0?$tmat4x2@N$00@glm@@QAE@ABU?$tmat2x3@N$00@1@@Z ; glm::tmat4x2<double,1>::tmat4x2<double,1>
PUBLIC	??0?$tmat4x2@N$00@glm@@QAE@ABU?$tmat3x2@N$00@1@@Z ; glm::tmat4x2<double,1>::tmat4x2<double,1>
PUBLIC	??0?$tmat4x2@N$00@glm@@QAE@ABU?$tmat2x4@N$00@1@@Z ; glm::tmat4x2<double,1>::tmat4x2<double,1>
PUBLIC	??0?$tmat4x2@N$00@glm@@QAE@ABU?$tmat4x3@N$00@1@@Z ; glm::tmat4x2<double,1>::tmat4x2<double,1>
PUBLIC	??0?$tmat4x2@N$00@glm@@QAE@ABU?$tmat3x4@N$00@1@@Z ; glm::tmat4x2<double,1>::tmat4x2<double,1>
PUBLIC	?length@?$tmat4x2@N$00@glm@@SAHXZ		; glm::tmat4x2<double,1>::length
PUBLIC	??A?$tmat4x2@N$00@glm@@QAEAAU?$tvec2@N$00@1@H@Z	; glm::tmat4x2<double,1>::operator[]
PUBLIC	??A?$tmat4x2@N$00@glm@@QBEABU?$tvec2@N$00@1@H@Z	; glm::tmat4x2<double,1>::operator[]
PUBLIC	??4?$tmat4x2@N$00@glm@@QAEAAU01@ABU01@@Z	; glm::tmat4x2<double,1>::operator=
PUBLIC	??E?$tmat4x2@N$00@glm@@QAEAAU01@XZ		; glm::tmat4x2<double,1>::operator++
PUBLIC	??F?$tmat4x2@N$00@glm@@QAEAAU01@XZ		; glm::tmat4x2<double,1>::operator--
PUBLIC	??E?$tmat4x2@N$00@glm@@QAE?AU01@H@Z		; glm::tmat4x2<double,1>::operator++
PUBLIC	??F?$tmat4x2@N$00@glm@@QAE?AU01@H@Z		; glm::tmat4x2<double,1>::operator--
PUBLIC	??0?$tmat4x2@M$0A@@glm@@QAE@XZ			; glm::tmat4x2<float,0>::tmat4x2<float,0>
PUBLIC	??0?$tmat4x2@M$0A@@glm@@QAE@ABU01@@Z		; glm::tmat4x2<float,0>::tmat4x2<float,0>
PUBLIC	??0?$tmat4x2@M$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tmat4x2<float,0>::tmat4x2<float,0>
PUBLIC	??0?$tmat4x2@M$0A@@glm@@QAE@M@Z			; glm::tmat4x2<float,0>::tmat4x2<float,0>
PUBLIC	??0?$tmat4x2@M$0A@@glm@@QAE@MMMMMMMM@Z		; glm::tmat4x2<float,0>::tmat4x2<float,0>
PUBLIC	??0?$tmat4x2@M$0A@@glm@@QAE@ABU?$tvec2@M$0A@@1@000@Z ; glm::tmat4x2<float,0>::tmat4x2<float,0>
PUBLIC	??0?$tmat4x2@M$0A@@glm@@QAE@ABU?$tmat2x2@M$0A@@1@@Z ; glm::tmat4x2<float,0>::tmat4x2<float,0>
PUBLIC	??0?$tmat4x2@M$0A@@glm@@QAE@ABU?$tmat3x3@M$0A@@1@@Z ; glm::tmat4x2<float,0>::tmat4x2<float,0>
PUBLIC	??0?$tmat4x2@M$0A@@glm@@QAE@ABU?$tmat4x4@M$0A@@1@@Z ; glm::tmat4x2<float,0>::tmat4x2<float,0>
PUBLIC	??0?$tmat4x2@M$0A@@glm@@QAE@ABU?$tmat2x3@M$0A@@1@@Z ; glm::tmat4x2<float,0>::tmat4x2<float,0>
PUBLIC	??0?$tmat4x2@M$0A@@glm@@QAE@ABU?$tmat3x2@M$0A@@1@@Z ; glm::tmat4x2<float,0>::tmat4x2<float,0>
PUBLIC	??0?$tmat4x2@M$0A@@glm@@QAE@ABU?$tmat2x4@M$0A@@1@@Z ; glm::tmat4x2<float,0>::tmat4x2<float,0>
PUBLIC	??0?$tmat4x2@M$0A@@glm@@QAE@ABU?$tmat4x3@M$0A@@1@@Z ; glm::tmat4x2<float,0>::tmat4x2<float,0>
PUBLIC	??0?$tmat4x2@M$0A@@glm@@QAE@ABU?$tmat3x4@M$0A@@1@@Z ; glm::tmat4x2<float,0>::tmat4x2<float,0>
PUBLIC	?length@?$tmat4x2@M$0A@@glm@@SAHXZ		; glm::tmat4x2<float,0>::length
PUBLIC	??A?$tmat4x2@M$0A@@glm@@QAEAAU?$tvec2@M$0A@@1@H@Z ; glm::tmat4x2<float,0>::operator[]
PUBLIC	??A?$tmat4x2@M$0A@@glm@@QBEABU?$tvec2@M$0A@@1@H@Z ; glm::tmat4x2<float,0>::operator[]
PUBLIC	??4?$tmat4x2@M$0A@@glm@@QAEAAU01@ABU01@@Z	; glm::tmat4x2<float,0>::operator=
PUBLIC	??E?$tmat4x2@M$0A@@glm@@QAEAAU01@XZ		; glm::tmat4x2<float,0>::operator++
PUBLIC	??F?$tmat4x2@M$0A@@glm@@QAEAAU01@XZ		; glm::tmat4x2<float,0>::operator--
PUBLIC	??E?$tmat4x2@M$0A@@glm@@QAE?AU01@H@Z		; glm::tmat4x2<float,0>::operator++
PUBLIC	??F?$tmat4x2@M$0A@@glm@@QAE?AU01@H@Z		; glm::tmat4x2<float,0>::operator--
PUBLIC	??0?$tmat4x2@N$0A@@glm@@QAE@XZ			; glm::tmat4x2<double,0>::tmat4x2<double,0>
PUBLIC	??0?$tmat4x2@N$0A@@glm@@QAE@ABU01@@Z		; glm::tmat4x2<double,0>::tmat4x2<double,0>
PUBLIC	??0?$tmat4x2@N$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tmat4x2<double,0>::tmat4x2<double,0>
PUBLIC	??0?$tmat4x2@N$0A@@glm@@QAE@N@Z			; glm::tmat4x2<double,0>::tmat4x2<double,0>
PUBLIC	??0?$tmat4x2@N$0A@@glm@@QAE@NNNNNNNN@Z		; glm::tmat4x2<double,0>::tmat4x2<double,0>
PUBLIC	??0?$tmat4x2@N$0A@@glm@@QAE@ABU?$tvec2@N$0A@@1@000@Z ; glm::tmat4x2<double,0>::tmat4x2<double,0>
PUBLIC	??0?$tmat4x2@N$0A@@glm@@QAE@ABU?$tmat2x2@N$0A@@1@@Z ; glm::tmat4x2<double,0>::tmat4x2<double,0>
PUBLIC	??0?$tmat4x2@N$0A@@glm@@QAE@ABU?$tmat3x3@N$0A@@1@@Z ; glm::tmat4x2<double,0>::tmat4x2<double,0>
PUBLIC	??0?$tmat4x2@N$0A@@glm@@QAE@ABU?$tmat4x4@N$0A@@1@@Z ; glm::tmat4x2<double,0>::tmat4x2<double,0>
PUBLIC	??0?$tmat4x2@N$0A@@glm@@QAE@ABU?$tmat2x3@N$0A@@1@@Z ; glm::tmat4x2<double,0>::tmat4x2<double,0>
PUBLIC	??0?$tmat4x2@N$0A@@glm@@QAE@ABU?$tmat3x2@N$0A@@1@@Z ; glm::tmat4x2<double,0>::tmat4x2<double,0>
PUBLIC	??0?$tmat4x2@N$0A@@glm@@QAE@ABU?$tmat2x4@N$0A@@1@@Z ; glm::tmat4x2<double,0>::tmat4x2<double,0>
PUBLIC	??0?$tmat4x2@N$0A@@glm@@QAE@ABU?$tmat4x3@N$0A@@1@@Z ; glm::tmat4x2<double,0>::tmat4x2<double,0>
PUBLIC	??0?$tmat4x2@N$0A@@glm@@QAE@ABU?$tmat3x4@N$0A@@1@@Z ; glm::tmat4x2<double,0>::tmat4x2<double,0>
PUBLIC	?length@?$tmat4x2@N$0A@@glm@@SAHXZ		; glm::tmat4x2<double,0>::length
PUBLIC	??A?$tmat4x2@N$0A@@glm@@QAEAAU?$tvec2@N$0A@@1@H@Z ; glm::tmat4x2<double,0>::operator[]
PUBLIC	??A?$tmat4x2@N$0A@@glm@@QBEABU?$tvec2@N$0A@@1@H@Z ; glm::tmat4x2<double,0>::operator[]
PUBLIC	??4?$tmat4x2@N$0A@@glm@@QAEAAU01@ABU01@@Z	; glm::tmat4x2<double,0>::operator=
PUBLIC	??E?$tmat4x2@N$0A@@glm@@QAEAAU01@XZ		; glm::tmat4x2<double,0>::operator++
PUBLIC	??F?$tmat4x2@N$0A@@glm@@QAEAAU01@XZ		; glm::tmat4x2<double,0>::operator--
PUBLIC	??E?$tmat4x2@N$0A@@glm@@QAE?AU01@H@Z		; glm::tmat4x2<double,0>::operator++
PUBLIC	??F?$tmat4x2@N$0A@@glm@@QAE?AU01@H@Z		; glm::tmat4x2<double,0>::operator--
PUBLIC	??0?$tmat4x3@M$01@glm@@QAE@XZ			; glm::tmat4x3<float,2>::tmat4x3<float,2>
PUBLIC	??0?$tmat4x3@M$01@glm@@QAE@ABU01@@Z		; glm::tmat4x3<float,2>::tmat4x3<float,2>
PUBLIC	??0?$tmat4x3@M$01@glm@@QAE@W4ctor@1@@Z		; glm::tmat4x3<float,2>::tmat4x3<float,2>
PUBLIC	??0?$tmat4x3@M$01@glm@@QAE@ABM@Z		; glm::tmat4x3<float,2>::tmat4x3<float,2>
PUBLIC	??0?$tmat4x3@M$01@glm@@QAE@ABM00000000000@Z	; glm::tmat4x3<float,2>::tmat4x3<float,2>
PUBLIC	??0?$tmat4x3@M$01@glm@@QAE@ABU?$tvec3@M$01@1@000@Z ; glm::tmat4x3<float,2>::tmat4x3<float,2>
PUBLIC	??0?$tmat4x3@M$01@glm@@QAE@ABU?$tmat2x2@M$01@1@@Z ; glm::tmat4x3<float,2>::tmat4x3<float,2>
PUBLIC	??0?$tmat4x3@M$01@glm@@QAE@ABU?$tmat3x3@M$01@1@@Z ; glm::tmat4x3<float,2>::tmat4x3<float,2>
PUBLIC	??0?$tmat4x3@M$01@glm@@QAE@ABU?$tmat4x4@M$01@1@@Z ; glm::tmat4x3<float,2>::tmat4x3<float,2>
PUBLIC	??0?$tmat4x3@M$01@glm@@QAE@ABU?$tmat2x3@M$01@1@@Z ; glm::tmat4x3<float,2>::tmat4x3<float,2>
PUBLIC	??0?$tmat4x3@M$01@glm@@QAE@ABU?$tmat3x2@M$01@1@@Z ; glm::tmat4x3<float,2>::tmat4x3<float,2>
PUBLIC	??0?$tmat4x3@M$01@glm@@QAE@ABU?$tmat2x4@M$01@1@@Z ; glm::tmat4x3<float,2>::tmat4x3<float,2>
PUBLIC	??0?$tmat4x3@M$01@glm@@QAE@ABU?$tmat4x2@M$01@1@@Z ; glm::tmat4x3<float,2>::tmat4x3<float,2>
PUBLIC	??0?$tmat4x3@M$01@glm@@QAE@ABU?$tmat3x4@M$01@1@@Z ; glm::tmat4x3<float,2>::tmat4x3<float,2>
PUBLIC	?length@?$tmat4x3@M$01@glm@@SAHXZ		; glm::tmat4x3<float,2>::length
PUBLIC	??A?$tmat4x3@M$01@glm@@QAEAAU?$tvec3@M$01@1@H@Z	; glm::tmat4x3<float,2>::operator[]
PUBLIC	??A?$tmat4x3@M$01@glm@@QBEABU?$tvec3@M$01@1@H@Z	; glm::tmat4x3<float,2>::operator[]
PUBLIC	??4?$tmat4x3@M$01@glm@@QAEAAU01@ABU01@@Z	; glm::tmat4x3<float,2>::operator=
PUBLIC	??E?$tmat4x3@M$01@glm@@QAEAAU01@XZ		; glm::tmat4x3<float,2>::operator++
PUBLIC	??F?$tmat4x3@M$01@glm@@QAEAAU01@XZ		; glm::tmat4x3<float,2>::operator--
PUBLIC	??E?$tmat4x3@M$01@glm@@QAE?AU01@H@Z		; glm::tmat4x3<float,2>::operator++
PUBLIC	??F?$tmat4x3@M$01@glm@@QAE?AU01@H@Z		; glm::tmat4x3<float,2>::operator--
PUBLIC	??0?$tmat4x3@N$01@glm@@QAE@XZ			; glm::tmat4x3<double,2>::tmat4x3<double,2>
PUBLIC	??0?$tmat4x3@N$01@glm@@QAE@ABU01@@Z		; glm::tmat4x3<double,2>::tmat4x3<double,2>
PUBLIC	??0?$tmat4x3@N$01@glm@@QAE@W4ctor@1@@Z		; glm::tmat4x3<double,2>::tmat4x3<double,2>
PUBLIC	??0?$tmat4x3@N$01@glm@@QAE@ABN@Z		; glm::tmat4x3<double,2>::tmat4x3<double,2>
PUBLIC	??0?$tmat4x3@N$01@glm@@QAE@ABN00000000000@Z	; glm::tmat4x3<double,2>::tmat4x3<double,2>
PUBLIC	??0?$tmat4x3@N$01@glm@@QAE@ABU?$tvec3@N$01@1@000@Z ; glm::tmat4x3<double,2>::tmat4x3<double,2>
PUBLIC	??0?$tmat4x3@N$01@glm@@QAE@ABU?$tmat2x2@N$01@1@@Z ; glm::tmat4x3<double,2>::tmat4x3<double,2>
PUBLIC	??0?$tmat4x3@N$01@glm@@QAE@ABU?$tmat3x3@N$01@1@@Z ; glm::tmat4x3<double,2>::tmat4x3<double,2>
PUBLIC	??0?$tmat4x3@N$01@glm@@QAE@ABU?$tmat4x4@N$01@1@@Z ; glm::tmat4x3<double,2>::tmat4x3<double,2>
PUBLIC	??0?$tmat4x3@N$01@glm@@QAE@ABU?$tmat2x3@N$01@1@@Z ; glm::tmat4x3<double,2>::tmat4x3<double,2>
PUBLIC	??0?$tmat4x3@N$01@glm@@QAE@ABU?$tmat3x2@N$01@1@@Z ; glm::tmat4x3<double,2>::tmat4x3<double,2>
PUBLIC	??0?$tmat4x3@N$01@glm@@QAE@ABU?$tmat2x4@N$01@1@@Z ; glm::tmat4x3<double,2>::tmat4x3<double,2>
PUBLIC	??0?$tmat4x3@N$01@glm@@QAE@ABU?$tmat4x2@N$01@1@@Z ; glm::tmat4x3<double,2>::tmat4x3<double,2>
PUBLIC	??0?$tmat4x3@N$01@glm@@QAE@ABU?$tmat3x4@N$01@1@@Z ; glm::tmat4x3<double,2>::tmat4x3<double,2>
PUBLIC	?length@?$tmat4x3@N$01@glm@@SAHXZ		; glm::tmat4x3<double,2>::length
PUBLIC	??A?$tmat4x3@N$01@glm@@QAEAAU?$tvec3@N$01@1@H@Z	; glm::tmat4x3<double,2>::operator[]
PUBLIC	??A?$tmat4x3@N$01@glm@@QBEABU?$tvec3@N$01@1@H@Z	; glm::tmat4x3<double,2>::operator[]
PUBLIC	??4?$tmat4x3@N$01@glm@@QAEAAU01@ABU01@@Z	; glm::tmat4x3<double,2>::operator=
PUBLIC	??E?$tmat4x3@N$01@glm@@QAEAAU01@XZ		; glm::tmat4x3<double,2>::operator++
PUBLIC	??F?$tmat4x3@N$01@glm@@QAEAAU01@XZ		; glm::tmat4x3<double,2>::operator--
PUBLIC	??E?$tmat4x3@N$01@glm@@QAE?AU01@H@Z		; glm::tmat4x3<double,2>::operator++
PUBLIC	??F?$tmat4x3@N$01@glm@@QAE?AU01@H@Z		; glm::tmat4x3<double,2>::operator--
PUBLIC	??0?$tmat4x3@M$00@glm@@QAE@XZ			; glm::tmat4x3<float,1>::tmat4x3<float,1>
PUBLIC	??0?$tmat4x3@M$00@glm@@QAE@ABU01@@Z		; glm::tmat4x3<float,1>::tmat4x3<float,1>
PUBLIC	??0?$tmat4x3@M$00@glm@@QAE@W4ctor@1@@Z		; glm::tmat4x3<float,1>::tmat4x3<float,1>
PUBLIC	??0?$tmat4x3@M$00@glm@@QAE@ABM@Z		; glm::tmat4x3<float,1>::tmat4x3<float,1>
PUBLIC	??0?$tmat4x3@M$00@glm@@QAE@ABM00000000000@Z	; glm::tmat4x3<float,1>::tmat4x3<float,1>
PUBLIC	??0?$tmat4x3@M$00@glm@@QAE@ABU?$tvec3@M$00@1@000@Z ; glm::tmat4x3<float,1>::tmat4x3<float,1>
PUBLIC	??0?$tmat4x3@M$00@glm@@QAE@ABU?$tmat2x2@M$00@1@@Z ; glm::tmat4x3<float,1>::tmat4x3<float,1>
PUBLIC	??0?$tmat4x3@M$00@glm@@QAE@ABU?$tmat3x3@M$00@1@@Z ; glm::tmat4x3<float,1>::tmat4x3<float,1>
PUBLIC	??0?$tmat4x3@M$00@glm@@QAE@ABU?$tmat4x4@M$00@1@@Z ; glm::tmat4x3<float,1>::tmat4x3<float,1>
PUBLIC	??0?$tmat4x3@M$00@glm@@QAE@ABU?$tmat2x3@M$00@1@@Z ; glm::tmat4x3<float,1>::tmat4x3<float,1>
PUBLIC	??0?$tmat4x3@M$00@glm@@QAE@ABU?$tmat3x2@M$00@1@@Z ; glm::tmat4x3<float,1>::tmat4x3<float,1>
PUBLIC	??0?$tmat4x3@M$00@glm@@QAE@ABU?$tmat2x4@M$00@1@@Z ; glm::tmat4x3<float,1>::tmat4x3<float,1>
PUBLIC	??0?$tmat4x3@M$00@glm@@QAE@ABU?$tmat4x2@M$00@1@@Z ; glm::tmat4x3<float,1>::tmat4x3<float,1>
PUBLIC	??0?$tmat4x3@M$00@glm@@QAE@ABU?$tmat3x4@M$00@1@@Z ; glm::tmat4x3<float,1>::tmat4x3<float,1>
PUBLIC	?length@?$tmat4x3@M$00@glm@@SAHXZ		; glm::tmat4x3<float,1>::length
PUBLIC	??A?$tmat4x3@M$00@glm@@QAEAAU?$tvec3@M$00@1@H@Z	; glm::tmat4x3<float,1>::operator[]
PUBLIC	??A?$tmat4x3@M$00@glm@@QBEABU?$tvec3@M$00@1@H@Z	; glm::tmat4x3<float,1>::operator[]
PUBLIC	??4?$tmat4x3@M$00@glm@@QAEAAU01@ABU01@@Z	; glm::tmat4x3<float,1>::operator=
PUBLIC	??E?$tmat4x3@M$00@glm@@QAEAAU01@XZ		; glm::tmat4x3<float,1>::operator++
PUBLIC	??F?$tmat4x3@M$00@glm@@QAEAAU01@XZ		; glm::tmat4x3<float,1>::operator--
PUBLIC	??E?$tmat4x3@M$00@glm@@QAE?AU01@H@Z		; glm::tmat4x3<float,1>::operator++
PUBLIC	??F?$tmat4x3@M$00@glm@@QAE?AU01@H@Z		; glm::tmat4x3<float,1>::operator--
PUBLIC	??0?$tmat4x3@N$00@glm@@QAE@XZ			; glm::tmat4x3<double,1>::tmat4x3<double,1>
PUBLIC	??0?$tmat4x3@N$00@glm@@QAE@ABU01@@Z		; glm::tmat4x3<double,1>::tmat4x3<double,1>
PUBLIC	??0?$tmat4x3@N$00@glm@@QAE@W4ctor@1@@Z		; glm::tmat4x3<double,1>::tmat4x3<double,1>
PUBLIC	??0?$tmat4x3@N$00@glm@@QAE@ABN@Z		; glm::tmat4x3<double,1>::tmat4x3<double,1>
PUBLIC	??0?$tmat4x3@N$00@glm@@QAE@ABN00000000000@Z	; glm::tmat4x3<double,1>::tmat4x3<double,1>
PUBLIC	??0?$tmat4x3@N$00@glm@@QAE@ABU?$tvec3@N$00@1@000@Z ; glm::tmat4x3<double,1>::tmat4x3<double,1>
PUBLIC	??0?$tmat4x3@N$00@glm@@QAE@ABU?$tmat2x2@N$00@1@@Z ; glm::tmat4x3<double,1>::tmat4x3<double,1>
PUBLIC	??0?$tmat4x3@N$00@glm@@QAE@ABU?$tmat3x3@N$00@1@@Z ; glm::tmat4x3<double,1>::tmat4x3<double,1>
PUBLIC	??0?$tmat4x3@N$00@glm@@QAE@ABU?$tmat4x4@N$00@1@@Z ; glm::tmat4x3<double,1>::tmat4x3<double,1>
PUBLIC	??0?$tmat4x3@N$00@glm@@QAE@ABU?$tmat2x3@N$00@1@@Z ; glm::tmat4x3<double,1>::tmat4x3<double,1>
PUBLIC	??0?$tmat4x3@N$00@glm@@QAE@ABU?$tmat3x2@N$00@1@@Z ; glm::tmat4x3<double,1>::tmat4x3<double,1>
PUBLIC	??0?$tmat4x3@N$00@glm@@QAE@ABU?$tmat2x4@N$00@1@@Z ; glm::tmat4x3<double,1>::tmat4x3<double,1>
PUBLIC	??0?$tmat4x3@N$00@glm@@QAE@ABU?$tmat4x2@N$00@1@@Z ; glm::tmat4x3<double,1>::tmat4x3<double,1>
PUBLIC	??0?$tmat4x3@N$00@glm@@QAE@ABU?$tmat3x4@N$00@1@@Z ; glm::tmat4x3<double,1>::tmat4x3<double,1>
PUBLIC	?length@?$tmat4x3@N$00@glm@@SAHXZ		; glm::tmat4x3<double,1>::length
PUBLIC	??A?$tmat4x3@N$00@glm@@QAEAAU?$tvec3@N$00@1@H@Z	; glm::tmat4x3<double,1>::operator[]
PUBLIC	??A?$tmat4x3@N$00@glm@@QBEABU?$tvec3@N$00@1@H@Z	; glm::tmat4x3<double,1>::operator[]
PUBLIC	??4?$tmat4x3@N$00@glm@@QAEAAU01@ABU01@@Z	; glm::tmat4x3<double,1>::operator=
PUBLIC	??E?$tmat4x3@N$00@glm@@QAEAAU01@XZ		; glm::tmat4x3<double,1>::operator++
PUBLIC	??F?$tmat4x3@N$00@glm@@QAEAAU01@XZ		; glm::tmat4x3<double,1>::operator--
PUBLIC	??E?$tmat4x3@N$00@glm@@QAE?AU01@H@Z		; glm::tmat4x3<double,1>::operator++
PUBLIC	??F?$tmat4x3@N$00@glm@@QAE?AU01@H@Z		; glm::tmat4x3<double,1>::operator--
PUBLIC	??0?$tmat4x3@M$0A@@glm@@QAE@XZ			; glm::tmat4x3<float,0>::tmat4x3<float,0>
PUBLIC	??0?$tmat4x3@M$0A@@glm@@QAE@ABU01@@Z		; glm::tmat4x3<float,0>::tmat4x3<float,0>
PUBLIC	??0?$tmat4x3@M$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tmat4x3<float,0>::tmat4x3<float,0>
PUBLIC	??0?$tmat4x3@M$0A@@glm@@QAE@ABM@Z		; glm::tmat4x3<float,0>::tmat4x3<float,0>
PUBLIC	??0?$tmat4x3@M$0A@@glm@@QAE@ABM00000000000@Z	; glm::tmat4x3<float,0>::tmat4x3<float,0>
PUBLIC	??0?$tmat4x3@M$0A@@glm@@QAE@ABU?$tvec3@M$0A@@1@000@Z ; glm::tmat4x3<float,0>::tmat4x3<float,0>
PUBLIC	??0?$tmat4x3@M$0A@@glm@@QAE@ABU?$tmat2x2@M$0A@@1@@Z ; glm::tmat4x3<float,0>::tmat4x3<float,0>
PUBLIC	??0?$tmat4x3@M$0A@@glm@@QAE@ABU?$tmat3x3@M$0A@@1@@Z ; glm::tmat4x3<float,0>::tmat4x3<float,0>
PUBLIC	??0?$tmat4x3@M$0A@@glm@@QAE@ABU?$tmat4x4@M$0A@@1@@Z ; glm::tmat4x3<float,0>::tmat4x3<float,0>
PUBLIC	??0?$tmat4x3@M$0A@@glm@@QAE@ABU?$tmat2x3@M$0A@@1@@Z ; glm::tmat4x3<float,0>::tmat4x3<float,0>
PUBLIC	??0?$tmat4x3@M$0A@@glm@@QAE@ABU?$tmat3x2@M$0A@@1@@Z ; glm::tmat4x3<float,0>::tmat4x3<float,0>
PUBLIC	??0?$tmat4x3@M$0A@@glm@@QAE@ABU?$tmat2x4@M$0A@@1@@Z ; glm::tmat4x3<float,0>::tmat4x3<float,0>
PUBLIC	??0?$tmat4x3@M$0A@@glm@@QAE@ABU?$tmat4x2@M$0A@@1@@Z ; glm::tmat4x3<float,0>::tmat4x3<float,0>
PUBLIC	??0?$tmat4x3@M$0A@@glm@@QAE@ABU?$tmat3x4@M$0A@@1@@Z ; glm::tmat4x3<float,0>::tmat4x3<float,0>
PUBLIC	?length@?$tmat4x3@M$0A@@glm@@SAHXZ		; glm::tmat4x3<float,0>::length
PUBLIC	??A?$tmat4x3@M$0A@@glm@@QAEAAU?$tvec3@M$0A@@1@H@Z ; glm::tmat4x3<float,0>::operator[]
PUBLIC	??A?$tmat4x3@M$0A@@glm@@QBEABU?$tvec3@M$0A@@1@H@Z ; glm::tmat4x3<float,0>::operator[]
PUBLIC	??4?$tmat4x3@M$0A@@glm@@QAEAAU01@ABU01@@Z	; glm::tmat4x3<float,0>::operator=
PUBLIC	??E?$tmat4x3@M$0A@@glm@@QAEAAU01@XZ		; glm::tmat4x3<float,0>::operator++
PUBLIC	??F?$tmat4x3@M$0A@@glm@@QAEAAU01@XZ		; glm::tmat4x3<float,0>::operator--
PUBLIC	??E?$tmat4x3@M$0A@@glm@@QAE?AU01@H@Z		; glm::tmat4x3<float,0>::operator++
PUBLIC	??F?$tmat4x3@M$0A@@glm@@QAE?AU01@H@Z		; glm::tmat4x3<float,0>::operator--
PUBLIC	??0?$tmat4x3@N$0A@@glm@@QAE@XZ			; glm::tmat4x3<double,0>::tmat4x3<double,0>
PUBLIC	??0?$tmat4x3@N$0A@@glm@@QAE@ABU01@@Z		; glm::tmat4x3<double,0>::tmat4x3<double,0>
PUBLIC	??0?$tmat4x3@N$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tmat4x3<double,0>::tmat4x3<double,0>
PUBLIC	??0?$tmat4x3@N$0A@@glm@@QAE@ABN@Z		; glm::tmat4x3<double,0>::tmat4x3<double,0>
PUBLIC	??0?$tmat4x3@N$0A@@glm@@QAE@ABN00000000000@Z	; glm::tmat4x3<double,0>::tmat4x3<double,0>
PUBLIC	??0?$tmat4x3@N$0A@@glm@@QAE@ABU?$tvec3@N$0A@@1@000@Z ; glm::tmat4x3<double,0>::tmat4x3<double,0>
PUBLIC	??0?$tmat4x3@N$0A@@glm@@QAE@ABU?$tmat2x2@N$0A@@1@@Z ; glm::tmat4x3<double,0>::tmat4x3<double,0>
PUBLIC	??0?$tmat4x3@N$0A@@glm@@QAE@ABU?$tmat3x3@N$0A@@1@@Z ; glm::tmat4x3<double,0>::tmat4x3<double,0>
PUBLIC	??0?$tmat4x3@N$0A@@glm@@QAE@ABU?$tmat4x4@N$0A@@1@@Z ; glm::tmat4x3<double,0>::tmat4x3<double,0>
PUBLIC	??0?$tmat4x3@N$0A@@glm@@QAE@ABU?$tmat2x3@N$0A@@1@@Z ; glm::tmat4x3<double,0>::tmat4x3<double,0>
PUBLIC	??0?$tmat4x3@N$0A@@glm@@QAE@ABU?$tmat3x2@N$0A@@1@@Z ; glm::tmat4x3<double,0>::tmat4x3<double,0>
PUBLIC	??0?$tmat4x3@N$0A@@glm@@QAE@ABU?$tmat2x4@N$0A@@1@@Z ; glm::tmat4x3<double,0>::tmat4x3<double,0>
PUBLIC	??0?$tmat4x3@N$0A@@glm@@QAE@ABU?$tmat4x2@N$0A@@1@@Z ; glm::tmat4x3<double,0>::tmat4x3<double,0>
PUBLIC	??0?$tmat4x3@N$0A@@glm@@QAE@ABU?$tmat3x4@N$0A@@1@@Z ; glm::tmat4x3<double,0>::tmat4x3<double,0>
PUBLIC	?length@?$tmat4x3@N$0A@@glm@@SAHXZ		; glm::tmat4x3<double,0>::length
PUBLIC	??A?$tmat4x3@N$0A@@glm@@QAEAAU?$tvec3@N$0A@@1@H@Z ; glm::tmat4x3<double,0>::operator[]
PUBLIC	??A?$tmat4x3@N$0A@@glm@@QBEABU?$tvec3@N$0A@@1@H@Z ; glm::tmat4x3<double,0>::operator[]
PUBLIC	??4?$tmat4x3@N$0A@@glm@@QAEAAU01@ABU01@@Z	; glm::tmat4x3<double,0>::operator=
PUBLIC	??E?$tmat4x3@N$0A@@glm@@QAEAAU01@XZ		; glm::tmat4x3<double,0>::operator++
PUBLIC	??F?$tmat4x3@N$0A@@glm@@QAEAAU01@XZ		; glm::tmat4x3<double,0>::operator--
PUBLIC	??E?$tmat4x3@N$0A@@glm@@QAE?AU01@H@Z		; glm::tmat4x3<double,0>::operator++
PUBLIC	??F?$tmat4x3@N$0A@@glm@@QAE?AU01@H@Z		; glm::tmat4x3<double,0>::operator--
PUBLIC	??0?$tmat4x4@M$01@glm@@QAE@XZ			; glm::tmat4x4<float,2>::tmat4x4<float,2>
PUBLIC	??0?$tmat4x4@M$01@glm@@QAE@ABU01@@Z		; glm::tmat4x4<float,2>::tmat4x4<float,2>
PUBLIC	??0?$tmat4x4@M$01@glm@@QAE@W4ctor@1@@Z		; glm::tmat4x4<float,2>::tmat4x4<float,2>
PUBLIC	??0?$tmat4x4@M$01@glm@@QAE@ABM@Z		; glm::tmat4x4<float,2>::tmat4x4<float,2>
PUBLIC	??0?$tmat4x4@M$01@glm@@QAE@ABM000000000000000@Z	; glm::tmat4x4<float,2>::tmat4x4<float,2>
PUBLIC	??0?$tmat4x4@M$01@glm@@QAE@ABU?$tvec4@M$01@1@000@Z ; glm::tmat4x4<float,2>::tmat4x4<float,2>
PUBLIC	??0?$tmat4x4@M$01@glm@@QAE@ABU?$tmat2x2@M$01@1@@Z ; glm::tmat4x4<float,2>::tmat4x4<float,2>
PUBLIC	??0?$tmat4x4@M$01@glm@@QAE@ABU?$tmat3x3@M$01@1@@Z ; glm::tmat4x4<float,2>::tmat4x4<float,2>
PUBLIC	??0?$tmat4x4@M$01@glm@@QAE@ABU?$tmat2x3@M$01@1@@Z ; glm::tmat4x4<float,2>::tmat4x4<float,2>
PUBLIC	??0?$tmat4x4@M$01@glm@@QAE@ABU?$tmat3x2@M$01@1@@Z ; glm::tmat4x4<float,2>::tmat4x4<float,2>
PUBLIC	??0?$tmat4x4@M$01@glm@@QAE@ABU?$tmat2x4@M$01@1@@Z ; glm::tmat4x4<float,2>::tmat4x4<float,2>
PUBLIC	??0?$tmat4x4@M$01@glm@@QAE@ABU?$tmat4x2@M$01@1@@Z ; glm::tmat4x4<float,2>::tmat4x4<float,2>
PUBLIC	??0?$tmat4x4@M$01@glm@@QAE@ABU?$tmat3x4@M$01@1@@Z ; glm::tmat4x4<float,2>::tmat4x4<float,2>
PUBLIC	??0?$tmat4x4@M$01@glm@@QAE@ABU?$tmat4x3@M$01@1@@Z ; glm::tmat4x4<float,2>::tmat4x4<float,2>
PUBLIC	?length@?$tmat4x4@M$01@glm@@SAHXZ		; glm::tmat4x4<float,2>::length
PUBLIC	??A?$tmat4x4@M$01@glm@@QAEAAU?$tvec4@M$01@1@H@Z	; glm::tmat4x4<float,2>::operator[]
PUBLIC	??A?$tmat4x4@M$01@glm@@QBEABU?$tvec4@M$01@1@H@Z	; glm::tmat4x4<float,2>::operator[]
PUBLIC	??4?$tmat4x4@M$01@glm@@QAEAAU01@ABU01@@Z	; glm::tmat4x4<float,2>::operator=
PUBLIC	??E?$tmat4x4@M$01@glm@@QAEAAU01@XZ		; glm::tmat4x4<float,2>::operator++
PUBLIC	??F?$tmat4x4@M$01@glm@@QAEAAU01@XZ		; glm::tmat4x4<float,2>::operator--
PUBLIC	??E?$tmat4x4@M$01@glm@@QAE?AU01@H@Z		; glm::tmat4x4<float,2>::operator++
PUBLIC	??F?$tmat4x4@M$01@glm@@QAE?AU01@H@Z		; glm::tmat4x4<float,2>::operator--
PUBLIC	??0?$tmat4x4@N$01@glm@@QAE@XZ			; glm::tmat4x4<double,2>::tmat4x4<double,2>
PUBLIC	??0?$tmat4x4@N$01@glm@@QAE@ABU01@@Z		; glm::tmat4x4<double,2>::tmat4x4<double,2>
PUBLIC	??0?$tmat4x4@N$01@glm@@QAE@W4ctor@1@@Z		; glm::tmat4x4<double,2>::tmat4x4<double,2>
PUBLIC	??0?$tmat4x4@N$01@glm@@QAE@ABN@Z		; glm::tmat4x4<double,2>::tmat4x4<double,2>
PUBLIC	??0?$tmat4x4@N$01@glm@@QAE@ABN000000000000000@Z	; glm::tmat4x4<double,2>::tmat4x4<double,2>
PUBLIC	??0?$tmat4x4@N$01@glm@@QAE@ABU?$tvec4@N$01@1@000@Z ; glm::tmat4x4<double,2>::tmat4x4<double,2>
PUBLIC	??0?$tmat4x4@N$01@glm@@QAE@ABU?$tmat2x2@N$01@1@@Z ; glm::tmat4x4<double,2>::tmat4x4<double,2>
PUBLIC	??0?$tmat4x4@N$01@glm@@QAE@ABU?$tmat3x3@N$01@1@@Z ; glm::tmat4x4<double,2>::tmat4x4<double,2>
PUBLIC	??0?$tmat4x4@N$01@glm@@QAE@ABU?$tmat2x3@N$01@1@@Z ; glm::tmat4x4<double,2>::tmat4x4<double,2>
PUBLIC	??0?$tmat4x4@N$01@glm@@QAE@ABU?$tmat3x2@N$01@1@@Z ; glm::tmat4x4<double,2>::tmat4x4<double,2>
PUBLIC	??0?$tmat4x4@N$01@glm@@QAE@ABU?$tmat2x4@N$01@1@@Z ; glm::tmat4x4<double,2>::tmat4x4<double,2>
PUBLIC	??0?$tmat4x4@N$01@glm@@QAE@ABU?$tmat4x2@N$01@1@@Z ; glm::tmat4x4<double,2>::tmat4x4<double,2>
PUBLIC	??0?$tmat4x4@N$01@glm@@QAE@ABU?$tmat3x4@N$01@1@@Z ; glm::tmat4x4<double,2>::tmat4x4<double,2>
PUBLIC	??0?$tmat4x4@N$01@glm@@QAE@ABU?$tmat4x3@N$01@1@@Z ; glm::tmat4x4<double,2>::tmat4x4<double,2>
PUBLIC	?length@?$tmat4x4@N$01@glm@@SAHXZ		; glm::tmat4x4<double,2>::length
PUBLIC	??A?$tmat4x4@N$01@glm@@QAEAAU?$tvec4@N$01@1@H@Z	; glm::tmat4x4<double,2>::operator[]
PUBLIC	??A?$tmat4x4@N$01@glm@@QBEABU?$tvec4@N$01@1@H@Z	; glm::tmat4x4<double,2>::operator[]
PUBLIC	??4?$tmat4x4@N$01@glm@@QAEAAU01@ABU01@@Z	; glm::tmat4x4<double,2>::operator=
PUBLIC	??E?$tmat4x4@N$01@glm@@QAEAAU01@XZ		; glm::tmat4x4<double,2>::operator++
PUBLIC	??F?$tmat4x4@N$01@glm@@QAEAAU01@XZ		; glm::tmat4x4<double,2>::operator--
PUBLIC	??E?$tmat4x4@N$01@glm@@QAE?AU01@H@Z		; glm::tmat4x4<double,2>::operator++
PUBLIC	??F?$tmat4x4@N$01@glm@@QAE?AU01@H@Z		; glm::tmat4x4<double,2>::operator--
PUBLIC	??0?$tmat4x4@M$00@glm@@QAE@XZ			; glm::tmat4x4<float,1>::tmat4x4<float,1>
PUBLIC	??0?$tmat4x4@M$00@glm@@QAE@ABU01@@Z		; glm::tmat4x4<float,1>::tmat4x4<float,1>
PUBLIC	??0?$tmat4x4@M$00@glm@@QAE@W4ctor@1@@Z		; glm::tmat4x4<float,1>::tmat4x4<float,1>
PUBLIC	??0?$tmat4x4@M$00@glm@@QAE@ABM@Z		; glm::tmat4x4<float,1>::tmat4x4<float,1>
PUBLIC	??0?$tmat4x4@M$00@glm@@QAE@ABM000000000000000@Z	; glm::tmat4x4<float,1>::tmat4x4<float,1>
PUBLIC	??0?$tmat4x4@M$00@glm@@QAE@ABU?$tvec4@M$00@1@000@Z ; glm::tmat4x4<float,1>::tmat4x4<float,1>
PUBLIC	??0?$tmat4x4@M$00@glm@@QAE@ABU?$tmat2x2@M$00@1@@Z ; glm::tmat4x4<float,1>::tmat4x4<float,1>
PUBLIC	??0?$tmat4x4@M$00@glm@@QAE@ABU?$tmat3x3@M$00@1@@Z ; glm::tmat4x4<float,1>::tmat4x4<float,1>
PUBLIC	??0?$tmat4x4@M$00@glm@@QAE@ABU?$tmat2x3@M$00@1@@Z ; glm::tmat4x4<float,1>::tmat4x4<float,1>
PUBLIC	??0?$tmat4x4@M$00@glm@@QAE@ABU?$tmat3x2@M$00@1@@Z ; glm::tmat4x4<float,1>::tmat4x4<float,1>
PUBLIC	??0?$tmat4x4@M$00@glm@@QAE@ABU?$tmat2x4@M$00@1@@Z ; glm::tmat4x4<float,1>::tmat4x4<float,1>
PUBLIC	??0?$tmat4x4@M$00@glm@@QAE@ABU?$tmat4x2@M$00@1@@Z ; glm::tmat4x4<float,1>::tmat4x4<float,1>
PUBLIC	??0?$tmat4x4@M$00@glm@@QAE@ABU?$tmat3x4@M$00@1@@Z ; glm::tmat4x4<float,1>::tmat4x4<float,1>
PUBLIC	??0?$tmat4x4@M$00@glm@@QAE@ABU?$tmat4x3@M$00@1@@Z ; glm::tmat4x4<float,1>::tmat4x4<float,1>
PUBLIC	?length@?$tmat4x4@M$00@glm@@SAHXZ		; glm::tmat4x4<float,1>::length
PUBLIC	??A?$tmat4x4@M$00@glm@@QAEAAU?$tvec4@M$00@1@H@Z	; glm::tmat4x4<float,1>::operator[]
PUBLIC	??A?$tmat4x4@M$00@glm@@QBEABU?$tvec4@M$00@1@H@Z	; glm::tmat4x4<float,1>::operator[]
PUBLIC	??4?$tmat4x4@M$00@glm@@QAEAAU01@ABU01@@Z	; glm::tmat4x4<float,1>::operator=
PUBLIC	??E?$tmat4x4@M$00@glm@@QAEAAU01@XZ		; glm::tmat4x4<float,1>::operator++
PUBLIC	??F?$tmat4x4@M$00@glm@@QAEAAU01@XZ		; glm::tmat4x4<float,1>::operator--
PUBLIC	??E?$tmat4x4@M$00@glm@@QAE?AU01@H@Z		; glm::tmat4x4<float,1>::operator++
PUBLIC	??F?$tmat4x4@M$00@glm@@QAE?AU01@H@Z		; glm::tmat4x4<float,1>::operator--
PUBLIC	??0?$tmat4x4@N$00@glm@@QAE@XZ			; glm::tmat4x4<double,1>::tmat4x4<double,1>
PUBLIC	??0?$tmat4x4@N$00@glm@@QAE@ABU01@@Z		; glm::tmat4x4<double,1>::tmat4x4<double,1>
PUBLIC	??0?$tmat4x4@N$00@glm@@QAE@W4ctor@1@@Z		; glm::tmat4x4<double,1>::tmat4x4<double,1>
PUBLIC	??0?$tmat4x4@N$00@glm@@QAE@ABN@Z		; glm::tmat4x4<double,1>::tmat4x4<double,1>
PUBLIC	??0?$tmat4x4@N$00@glm@@QAE@ABN000000000000000@Z	; glm::tmat4x4<double,1>::tmat4x4<double,1>
PUBLIC	??0?$tmat4x4@N$00@glm@@QAE@ABU?$tvec4@N$00@1@000@Z ; glm::tmat4x4<double,1>::tmat4x4<double,1>
PUBLIC	??0?$tmat4x4@N$00@glm@@QAE@ABU?$tmat2x2@N$00@1@@Z ; glm::tmat4x4<double,1>::tmat4x4<double,1>
PUBLIC	??0?$tmat4x4@N$00@glm@@QAE@ABU?$tmat3x3@N$00@1@@Z ; glm::tmat4x4<double,1>::tmat4x4<double,1>
PUBLIC	??0?$tmat4x4@N$00@glm@@QAE@ABU?$tmat2x3@N$00@1@@Z ; glm::tmat4x4<double,1>::tmat4x4<double,1>
PUBLIC	??0?$tmat4x4@N$00@glm@@QAE@ABU?$tmat3x2@N$00@1@@Z ; glm::tmat4x4<double,1>::tmat4x4<double,1>
PUBLIC	??0?$tmat4x4@N$00@glm@@QAE@ABU?$tmat2x4@N$00@1@@Z ; glm::tmat4x4<double,1>::tmat4x4<double,1>
PUBLIC	??0?$tmat4x4@N$00@glm@@QAE@ABU?$tmat4x2@N$00@1@@Z ; glm::tmat4x4<double,1>::tmat4x4<double,1>
PUBLIC	??0?$tmat4x4@N$00@glm@@QAE@ABU?$tmat3x4@N$00@1@@Z ; glm::tmat4x4<double,1>::tmat4x4<double,1>
PUBLIC	??0?$tmat4x4@N$00@glm@@QAE@ABU?$tmat4x3@N$00@1@@Z ; glm::tmat4x4<double,1>::tmat4x4<double,1>
PUBLIC	?length@?$tmat4x4@N$00@glm@@SAHXZ		; glm::tmat4x4<double,1>::length
PUBLIC	??A?$tmat4x4@N$00@glm@@QAEAAU?$tvec4@N$00@1@H@Z	; glm::tmat4x4<double,1>::operator[]
PUBLIC	??A?$tmat4x4@N$00@glm@@QBEABU?$tvec4@N$00@1@H@Z	; glm::tmat4x4<double,1>::operator[]
PUBLIC	??4?$tmat4x4@N$00@glm@@QAEAAU01@ABU01@@Z	; glm::tmat4x4<double,1>::operator=
PUBLIC	??E?$tmat4x4@N$00@glm@@QAEAAU01@XZ		; glm::tmat4x4<double,1>::operator++
PUBLIC	??F?$tmat4x4@N$00@glm@@QAEAAU01@XZ		; glm::tmat4x4<double,1>::operator--
PUBLIC	??E?$tmat4x4@N$00@glm@@QAE?AU01@H@Z		; glm::tmat4x4<double,1>::operator++
PUBLIC	??F?$tmat4x4@N$00@glm@@QAE?AU01@H@Z		; glm::tmat4x4<double,1>::operator--
PUBLIC	??0?$tmat4x4@M$0A@@glm@@QAE@XZ			; glm::tmat4x4<float,0>::tmat4x4<float,0>
PUBLIC	??0?$tmat4x4@M$0A@@glm@@QAE@ABU01@@Z		; glm::tmat4x4<float,0>::tmat4x4<float,0>
PUBLIC	??0?$tmat4x4@M$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tmat4x4<float,0>::tmat4x4<float,0>
PUBLIC	??0?$tmat4x4@M$0A@@glm@@QAE@ABM@Z		; glm::tmat4x4<float,0>::tmat4x4<float,0>
PUBLIC	??0?$tmat4x4@M$0A@@glm@@QAE@ABM000000000000000@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>
PUBLIC	??0?$tmat4x4@M$0A@@glm@@QAE@ABU?$tvec4@M$0A@@1@000@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>
PUBLIC	??0?$tmat4x4@M$0A@@glm@@QAE@ABU?$tmat2x2@M$0A@@1@@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>
PUBLIC	??0?$tmat4x4@M$0A@@glm@@QAE@ABU?$tmat3x3@M$0A@@1@@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>
PUBLIC	??0?$tmat4x4@M$0A@@glm@@QAE@ABU?$tmat2x3@M$0A@@1@@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>
PUBLIC	??0?$tmat4x4@M$0A@@glm@@QAE@ABU?$tmat3x2@M$0A@@1@@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>
PUBLIC	??0?$tmat4x4@M$0A@@glm@@QAE@ABU?$tmat2x4@M$0A@@1@@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>
PUBLIC	??0?$tmat4x4@M$0A@@glm@@QAE@ABU?$tmat4x2@M$0A@@1@@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>
PUBLIC	??0?$tmat4x4@M$0A@@glm@@QAE@ABU?$tmat3x4@M$0A@@1@@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>
PUBLIC	??0?$tmat4x4@M$0A@@glm@@QAE@ABU?$tmat4x3@M$0A@@1@@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>
PUBLIC	?length@?$tmat4x4@M$0A@@glm@@SAHXZ		; glm::tmat4x4<float,0>::length
PUBLIC	??A?$tmat4x4@M$0A@@glm@@QAEAAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
PUBLIC	??A?$tmat4x4@M$0A@@glm@@QBEABU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
PUBLIC	??4?$tmat4x4@M$0A@@glm@@QAEAAU01@ABU01@@Z	; glm::tmat4x4<float,0>::operator=
PUBLIC	??E?$tmat4x4@M$0A@@glm@@QAEAAU01@XZ		; glm::tmat4x4<float,0>::operator++
PUBLIC	??F?$tmat4x4@M$0A@@glm@@QAEAAU01@XZ		; glm::tmat4x4<float,0>::operator--
PUBLIC	??E?$tmat4x4@M$0A@@glm@@QAE?AU01@H@Z		; glm::tmat4x4<float,0>::operator++
PUBLIC	??F?$tmat4x4@M$0A@@glm@@QAE?AU01@H@Z		; glm::tmat4x4<float,0>::operator--
PUBLIC	??0?$tmat4x4@N$0A@@glm@@QAE@XZ			; glm::tmat4x4<double,0>::tmat4x4<double,0>
PUBLIC	??0?$tmat4x4@N$0A@@glm@@QAE@ABU01@@Z		; glm::tmat4x4<double,0>::tmat4x4<double,0>
PUBLIC	??0?$tmat4x4@N$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tmat4x4<double,0>::tmat4x4<double,0>
PUBLIC	??0?$tmat4x4@N$0A@@glm@@QAE@ABN@Z		; glm::tmat4x4<double,0>::tmat4x4<double,0>
PUBLIC	??0?$tmat4x4@N$0A@@glm@@QAE@ABN000000000000000@Z ; glm::tmat4x4<double,0>::tmat4x4<double,0>
PUBLIC	??0?$tmat4x4@N$0A@@glm@@QAE@ABU?$tvec4@N$0A@@1@000@Z ; glm::tmat4x4<double,0>::tmat4x4<double,0>
PUBLIC	??0?$tmat4x4@N$0A@@glm@@QAE@ABU?$tmat2x2@N$0A@@1@@Z ; glm::tmat4x4<double,0>::tmat4x4<double,0>
PUBLIC	??0?$tmat4x4@N$0A@@glm@@QAE@ABU?$tmat3x3@N$0A@@1@@Z ; glm::tmat4x4<double,0>::tmat4x4<double,0>
PUBLIC	??0?$tmat4x4@N$0A@@glm@@QAE@ABU?$tmat2x3@N$0A@@1@@Z ; glm::tmat4x4<double,0>::tmat4x4<double,0>
PUBLIC	??0?$tmat4x4@N$0A@@glm@@QAE@ABU?$tmat3x2@N$0A@@1@@Z ; glm::tmat4x4<double,0>::tmat4x4<double,0>
PUBLIC	??0?$tmat4x4@N$0A@@glm@@QAE@ABU?$tmat2x4@N$0A@@1@@Z ; glm::tmat4x4<double,0>::tmat4x4<double,0>
PUBLIC	??0?$tmat4x4@N$0A@@glm@@QAE@ABU?$tmat4x2@N$0A@@1@@Z ; glm::tmat4x4<double,0>::tmat4x4<double,0>
PUBLIC	??0?$tmat4x4@N$0A@@glm@@QAE@ABU?$tmat3x4@N$0A@@1@@Z ; glm::tmat4x4<double,0>::tmat4x4<double,0>
PUBLIC	??0?$tmat4x4@N$0A@@glm@@QAE@ABU?$tmat4x3@N$0A@@1@@Z ; glm::tmat4x4<double,0>::tmat4x4<double,0>
PUBLIC	?length@?$tmat4x4@N$0A@@glm@@SAHXZ		; glm::tmat4x4<double,0>::length
PUBLIC	??A?$tmat4x4@N$0A@@glm@@QAEAAU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
PUBLIC	??A?$tmat4x4@N$0A@@glm@@QBEABU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
PUBLIC	??4?$tmat4x4@N$0A@@glm@@QAEAAU01@ABU01@@Z	; glm::tmat4x4<double,0>::operator=
PUBLIC	??E?$tmat4x4@N$0A@@glm@@QAEAAU01@XZ		; glm::tmat4x4<double,0>::operator++
PUBLIC	??F?$tmat4x4@N$0A@@glm@@QAEAAU01@XZ		; glm::tmat4x4<double,0>::operator--
PUBLIC	??E?$tmat4x4@N$0A@@glm@@QAE?AU01@H@Z		; glm::tmat4x4<double,0>::operator++
PUBLIC	??F?$tmat4x4@N$0A@@glm@@QAE?AU01@H@Z		; glm::tmat4x4<double,0>::operator--
PUBLIC	?length@?$tquat@M$01@glm@@SAHXZ			; glm::tquat<float,2>::length
PUBLIC	??A?$tquat@M$01@glm@@QAEAAMH@Z			; glm::tquat<float,2>::operator[]
PUBLIC	??A?$tquat@M$01@glm@@QBEABMH@Z			; glm::tquat<float,2>::operator[]
PUBLIC	??0?$tquat@M$01@glm@@QAE@XZ			; glm::tquat<float,2>::tquat<float,2>
PUBLIC	??0?$tquat@M$01@glm@@QAE@ABU01@@Z		; glm::tquat<float,2>::tquat<float,2>
PUBLIC	??0?$tquat@M$01@glm@@QAE@W4ctor@1@@Z		; glm::tquat<float,2>::tquat<float,2>
PUBLIC	??0?$tquat@M$01@glm@@QAE@ABMABU?$tvec3@M$01@1@@Z ; glm::tquat<float,2>::tquat<float,2>
PUBLIC	??0?$tquat@M$01@glm@@QAE@ABM000@Z		; glm::tquat<float,2>::tquat<float,2>
PUBLIC	??B?$tquat@M$01@glm@@QAE?AU?$tmat3x3@M$01@1@XZ	; glm::tquat<float,2>::operator glm::tmat3x3<float,2>
PUBLIC	??B?$tquat@M$01@glm@@QAE?AU?$tmat4x4@M$01@1@XZ	; glm::tquat<float,2>::operator glm::tmat4x4<float,2>
PUBLIC	??0?$tquat@M$01@glm@@QAE@ABU?$tvec3@M$01@1@0@Z	; glm::tquat<float,2>::tquat<float,2>
PUBLIC	??0?$tquat@M$01@glm@@QAE@ABU?$tvec3@M$01@1@@Z	; glm::tquat<float,2>::tquat<float,2>
PUBLIC	??0?$tquat@M$01@glm@@QAE@ABU?$tmat3x3@M$01@1@@Z	; glm::tquat<float,2>::tquat<float,2>
PUBLIC	??0?$tquat@M$01@glm@@QAE@ABU?$tmat4x4@M$01@1@@Z	; glm::tquat<float,2>::tquat<float,2>
PUBLIC	??4?$tquat@M$01@glm@@QAEAAU01@ABU01@@Z		; glm::tquat<float,2>::operator=
PUBLIC	?length@?$tquat@N$01@glm@@SAHXZ			; glm::tquat<double,2>::length
PUBLIC	??A?$tquat@N$01@glm@@QAEAANH@Z			; glm::tquat<double,2>::operator[]
PUBLIC	??A?$tquat@N$01@glm@@QBEABNH@Z			; glm::tquat<double,2>::operator[]
PUBLIC	??0?$tquat@N$01@glm@@QAE@XZ			; glm::tquat<double,2>::tquat<double,2>
PUBLIC	??0?$tquat@N$01@glm@@QAE@ABU01@@Z		; glm::tquat<double,2>::tquat<double,2>
PUBLIC	??0?$tquat@N$01@glm@@QAE@W4ctor@1@@Z		; glm::tquat<double,2>::tquat<double,2>
PUBLIC	??0?$tquat@N$01@glm@@QAE@ABNABU?$tvec3@N$01@1@@Z ; glm::tquat<double,2>::tquat<double,2>
PUBLIC	??0?$tquat@N$01@glm@@QAE@ABN000@Z		; glm::tquat<double,2>::tquat<double,2>
PUBLIC	??B?$tquat@N$01@glm@@QAE?AU?$tmat3x3@N$01@1@XZ	; glm::tquat<double,2>::operator glm::tmat3x3<double,2>
PUBLIC	??B?$tquat@N$01@glm@@QAE?AU?$tmat4x4@N$01@1@XZ	; glm::tquat<double,2>::operator glm::tmat4x4<double,2>
PUBLIC	??0?$tquat@N$01@glm@@QAE@ABU?$tvec3@N$01@1@0@Z	; glm::tquat<double,2>::tquat<double,2>
PUBLIC	??0?$tquat@N$01@glm@@QAE@ABU?$tvec3@N$01@1@@Z	; glm::tquat<double,2>::tquat<double,2>
PUBLIC	??0?$tquat@N$01@glm@@QAE@ABU?$tmat3x3@N$01@1@@Z	; glm::tquat<double,2>::tquat<double,2>
PUBLIC	??0?$tquat@N$01@glm@@QAE@ABU?$tmat4x4@N$01@1@@Z	; glm::tquat<double,2>::tquat<double,2>
PUBLIC	??4?$tquat@N$01@glm@@QAEAAU01@ABU01@@Z		; glm::tquat<double,2>::operator=
PUBLIC	?length@?$tquat@M$00@glm@@SAHXZ			; glm::tquat<float,1>::length
PUBLIC	??A?$tquat@M$00@glm@@QAEAAMH@Z			; glm::tquat<float,1>::operator[]
PUBLIC	??A?$tquat@M$00@glm@@QBEABMH@Z			; glm::tquat<float,1>::operator[]
PUBLIC	??0?$tquat@M$00@glm@@QAE@XZ			; glm::tquat<float,1>::tquat<float,1>
PUBLIC	??0?$tquat@M$00@glm@@QAE@ABU01@@Z		; glm::tquat<float,1>::tquat<float,1>
PUBLIC	??0?$tquat@M$00@glm@@QAE@W4ctor@1@@Z		; glm::tquat<float,1>::tquat<float,1>
PUBLIC	??0?$tquat@M$00@glm@@QAE@ABMABU?$tvec3@M$00@1@@Z ; glm::tquat<float,1>::tquat<float,1>
PUBLIC	??0?$tquat@M$00@glm@@QAE@ABM000@Z		; glm::tquat<float,1>::tquat<float,1>
PUBLIC	??B?$tquat@M$00@glm@@QAE?AU?$tmat3x3@M$00@1@XZ	; glm::tquat<float,1>::operator glm::tmat3x3<float,1>
PUBLIC	??B?$tquat@M$00@glm@@QAE?AU?$tmat4x4@M$00@1@XZ	; glm::tquat<float,1>::operator glm::tmat4x4<float,1>
PUBLIC	??0?$tquat@M$00@glm@@QAE@ABU?$tvec3@M$00@1@0@Z	; glm::tquat<float,1>::tquat<float,1>
PUBLIC	??0?$tquat@M$00@glm@@QAE@ABU?$tvec3@M$00@1@@Z	; glm::tquat<float,1>::tquat<float,1>
PUBLIC	??0?$tquat@M$00@glm@@QAE@ABU?$tmat3x3@M$00@1@@Z	; glm::tquat<float,1>::tquat<float,1>
PUBLIC	??0?$tquat@M$00@glm@@QAE@ABU?$tmat4x4@M$00@1@@Z	; glm::tquat<float,1>::tquat<float,1>
PUBLIC	??4?$tquat@M$00@glm@@QAEAAU01@ABU01@@Z		; glm::tquat<float,1>::operator=
PUBLIC	?length@?$tquat@N$00@glm@@SAHXZ			; glm::tquat<double,1>::length
PUBLIC	??A?$tquat@N$00@glm@@QAEAANH@Z			; glm::tquat<double,1>::operator[]
PUBLIC	??A?$tquat@N$00@glm@@QBEABNH@Z			; glm::tquat<double,1>::operator[]
PUBLIC	??0?$tquat@N$00@glm@@QAE@XZ			; glm::tquat<double,1>::tquat<double,1>
PUBLIC	??0?$tquat@N$00@glm@@QAE@ABU01@@Z		; glm::tquat<double,1>::tquat<double,1>
PUBLIC	??0?$tquat@N$00@glm@@QAE@W4ctor@1@@Z		; glm::tquat<double,1>::tquat<double,1>
PUBLIC	??0?$tquat@N$00@glm@@QAE@ABNABU?$tvec3@N$00@1@@Z ; glm::tquat<double,1>::tquat<double,1>
PUBLIC	??0?$tquat@N$00@glm@@QAE@ABN000@Z		; glm::tquat<double,1>::tquat<double,1>
PUBLIC	??B?$tquat@N$00@glm@@QAE?AU?$tmat3x3@N$00@1@XZ	; glm::tquat<double,1>::operator glm::tmat3x3<double,1>
PUBLIC	??B?$tquat@N$00@glm@@QAE?AU?$tmat4x4@N$00@1@XZ	; glm::tquat<double,1>::operator glm::tmat4x4<double,1>
PUBLIC	??0?$tquat@N$00@glm@@QAE@ABU?$tvec3@N$00@1@0@Z	; glm::tquat<double,1>::tquat<double,1>
PUBLIC	??0?$tquat@N$00@glm@@QAE@ABU?$tvec3@N$00@1@@Z	; glm::tquat<double,1>::tquat<double,1>
PUBLIC	??0?$tquat@N$00@glm@@QAE@ABU?$tmat3x3@N$00@1@@Z	; glm::tquat<double,1>::tquat<double,1>
PUBLIC	??0?$tquat@N$00@glm@@QAE@ABU?$tmat4x4@N$00@1@@Z	; glm::tquat<double,1>::tquat<double,1>
PUBLIC	??4?$tquat@N$00@glm@@QAEAAU01@ABU01@@Z		; glm::tquat<double,1>::operator=
PUBLIC	?length@?$tquat@M$0A@@glm@@SAHXZ		; glm::tquat<float,0>::length
PUBLIC	??A?$tquat@M$0A@@glm@@QAEAAMH@Z			; glm::tquat<float,0>::operator[]
PUBLIC	??A?$tquat@M$0A@@glm@@QBEABMH@Z			; glm::tquat<float,0>::operator[]
PUBLIC	??0?$tquat@M$0A@@glm@@QAE@XZ			; glm::tquat<float,0>::tquat<float,0>
PUBLIC	??0?$tquat@M$0A@@glm@@QAE@ABU01@@Z		; glm::tquat<float,0>::tquat<float,0>
PUBLIC	??0?$tquat@M$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tquat<float,0>::tquat<float,0>
PUBLIC	??0?$tquat@M$0A@@glm@@QAE@ABMABU?$tvec3@M$0A@@1@@Z ; glm::tquat<float,0>::tquat<float,0>
PUBLIC	??0?$tquat@M$0A@@glm@@QAE@ABM000@Z		; glm::tquat<float,0>::tquat<float,0>
PUBLIC	??B?$tquat@M$0A@@glm@@QAE?AU?$tmat3x3@M$0A@@1@XZ ; glm::tquat<float,0>::operator glm::tmat3x3<float,0>
PUBLIC	??B?$tquat@M$0A@@glm@@QAE?AU?$tmat4x4@M$0A@@1@XZ ; glm::tquat<float,0>::operator glm::tmat4x4<float,0>
PUBLIC	??0?$tquat@M$0A@@glm@@QAE@ABU?$tvec3@M$0A@@1@0@Z ; glm::tquat<float,0>::tquat<float,0>
PUBLIC	??0?$tquat@M$0A@@glm@@QAE@ABU?$tvec3@M$0A@@1@@Z	; glm::tquat<float,0>::tquat<float,0>
PUBLIC	??0?$tquat@M$0A@@glm@@QAE@ABU?$tmat3x3@M$0A@@1@@Z ; glm::tquat<float,0>::tquat<float,0>
PUBLIC	??0?$tquat@M$0A@@glm@@QAE@ABU?$tmat4x4@M$0A@@1@@Z ; glm::tquat<float,0>::tquat<float,0>
PUBLIC	??4?$tquat@M$0A@@glm@@QAEAAU01@ABU01@@Z		; glm::tquat<float,0>::operator=
PUBLIC	?length@?$tquat@N$0A@@glm@@SAHXZ		; glm::tquat<double,0>::length
PUBLIC	??A?$tquat@N$0A@@glm@@QAEAANH@Z			; glm::tquat<double,0>::operator[]
PUBLIC	??A?$tquat@N$0A@@glm@@QBEABNH@Z			; glm::tquat<double,0>::operator[]
PUBLIC	??0?$tquat@N$0A@@glm@@QAE@XZ			; glm::tquat<double,0>::tquat<double,0>
PUBLIC	??0?$tquat@N$0A@@glm@@QAE@ABU01@@Z		; glm::tquat<double,0>::tquat<double,0>
PUBLIC	??0?$tquat@N$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tquat<double,0>::tquat<double,0>
PUBLIC	??0?$tquat@N$0A@@glm@@QAE@ABNABU?$tvec3@N$0A@@1@@Z ; glm::tquat<double,0>::tquat<double,0>
PUBLIC	??0?$tquat@N$0A@@glm@@QAE@ABN000@Z		; glm::tquat<double,0>::tquat<double,0>
PUBLIC	??B?$tquat@N$0A@@glm@@QAE?AU?$tmat3x3@N$0A@@1@XZ ; glm::tquat<double,0>::operator glm::tmat3x3<double,0>
PUBLIC	??B?$tquat@N$0A@@glm@@QAE?AU?$tmat4x4@N$0A@@1@XZ ; glm::tquat<double,0>::operator glm::tmat4x4<double,0>
PUBLIC	??0?$tquat@N$0A@@glm@@QAE@ABU?$tvec3@N$0A@@1@0@Z ; glm::tquat<double,0>::tquat<double,0>
PUBLIC	??0?$tquat@N$0A@@glm@@QAE@ABU?$tvec3@N$0A@@1@@Z	; glm::tquat<double,0>::tquat<double,0>
PUBLIC	??0?$tquat@N$0A@@glm@@QAE@ABU?$tmat3x3@N$0A@@1@@Z ; glm::tquat<double,0>::tquat<double,0>
PUBLIC	??0?$tquat@N$0A@@glm@@QAE@ABU?$tmat4x4@N$0A@@1@@Z ; glm::tquat<double,0>::tquat<double,0>
PUBLIC	??4?$tquat@N$0A@@glm@@QAEAAU01@ABU01@@Z		; glm::tquat<double,0>::operator=
PUBLIC	?length@?$tdualquat@M$01@glm@@SAHXZ		; glm::tdualquat<float,2>::length
PUBLIC	??A?$tdualquat@M$01@glm@@QAEAAU?$tquat@M$01@1@H@Z ; glm::tdualquat<float,2>::operator[]
PUBLIC	??A?$tdualquat@M$01@glm@@QBEABU?$tquat@M$01@1@H@Z ; glm::tdualquat<float,2>::operator[]
PUBLIC	??0?$tdualquat@M$01@glm@@QAE@XZ			; glm::tdualquat<float,2>::tdualquat<float,2>
PUBLIC	??0?$tdualquat@M$01@glm@@QAE@ABU01@@Z		; glm::tdualquat<float,2>::tdualquat<float,2>
PUBLIC	??0?$tdualquat@M$01@glm@@QAE@W4ctor@1@@Z	; glm::tdualquat<float,2>::tdualquat<float,2>
PUBLIC	??0?$tdualquat@M$01@glm@@QAE@ABU?$tquat@M$01@1@@Z ; glm::tdualquat<float,2>::tdualquat<float,2>
PUBLIC	??0?$tdualquat@M$01@glm@@QAE@ABU?$tquat@M$01@1@ABU?$tvec3@M$01@1@@Z ; glm::tdualquat<float,2>::tdualquat<float,2>
PUBLIC	??0?$tdualquat@M$01@glm@@QAE@ABU?$tquat@M$01@1@0@Z ; glm::tdualquat<float,2>::tdualquat<float,2>
PUBLIC	??0?$tdualquat@M$01@glm@@QAE@ABU?$tmat2x4@M$01@1@@Z ; glm::tdualquat<float,2>::tdualquat<float,2>
PUBLIC	??0?$tdualquat@M$01@glm@@QAE@ABU?$tmat3x4@M$01@1@@Z ; glm::tdualquat<float,2>::tdualquat<float,2>
PUBLIC	??4?$tdualquat@M$01@glm@@QAEAAU01@ABU01@@Z	; glm::tdualquat<float,2>::operator=
PUBLIC	?length@?$tdualquat@N$01@glm@@SAHXZ		; glm::tdualquat<double,2>::length
PUBLIC	??A?$tdualquat@N$01@glm@@QAEAAU?$tquat@N$01@1@H@Z ; glm::tdualquat<double,2>::operator[]
PUBLIC	??A?$tdualquat@N$01@glm@@QBEABU?$tquat@N$01@1@H@Z ; glm::tdualquat<double,2>::operator[]
PUBLIC	??0?$tdualquat@N$01@glm@@QAE@XZ			; glm::tdualquat<double,2>::tdualquat<double,2>
PUBLIC	??0?$tdualquat@N$01@glm@@QAE@ABU01@@Z		; glm::tdualquat<double,2>::tdualquat<double,2>
PUBLIC	??0?$tdualquat@N$01@glm@@QAE@W4ctor@1@@Z	; glm::tdualquat<double,2>::tdualquat<double,2>
PUBLIC	??0?$tdualquat@N$01@glm@@QAE@ABU?$tquat@N$01@1@@Z ; glm::tdualquat<double,2>::tdualquat<double,2>
PUBLIC	??0?$tdualquat@N$01@glm@@QAE@ABU?$tquat@N$01@1@ABU?$tvec3@N$01@1@@Z ; glm::tdualquat<double,2>::tdualquat<double,2>
PUBLIC	??0?$tdualquat@N$01@glm@@QAE@ABU?$tquat@N$01@1@0@Z ; glm::tdualquat<double,2>::tdualquat<double,2>
PUBLIC	??0?$tdualquat@N$01@glm@@QAE@ABU?$tmat2x4@N$01@1@@Z ; glm::tdualquat<double,2>::tdualquat<double,2>
PUBLIC	??0?$tdualquat@N$01@glm@@QAE@ABU?$tmat3x4@N$01@1@@Z ; glm::tdualquat<double,2>::tdualquat<double,2>
PUBLIC	??4?$tdualquat@N$01@glm@@QAEAAU01@ABU01@@Z	; glm::tdualquat<double,2>::operator=
PUBLIC	?length@?$tdualquat@M$00@glm@@SAHXZ		; glm::tdualquat<float,1>::length
PUBLIC	??A?$tdualquat@M$00@glm@@QAEAAU?$tquat@M$00@1@H@Z ; glm::tdualquat<float,1>::operator[]
PUBLIC	??A?$tdualquat@M$00@glm@@QBEABU?$tquat@M$00@1@H@Z ; glm::tdualquat<float,1>::operator[]
PUBLIC	??0?$tdualquat@M$00@glm@@QAE@XZ			; glm::tdualquat<float,1>::tdualquat<float,1>
PUBLIC	??0?$tdualquat@M$00@glm@@QAE@ABU01@@Z		; glm::tdualquat<float,1>::tdualquat<float,1>
PUBLIC	??0?$tdualquat@M$00@glm@@QAE@W4ctor@1@@Z	; glm::tdualquat<float,1>::tdualquat<float,1>
PUBLIC	??0?$tdualquat@M$00@glm@@QAE@ABU?$tquat@M$00@1@@Z ; glm::tdualquat<float,1>::tdualquat<float,1>
PUBLIC	??0?$tdualquat@M$00@glm@@QAE@ABU?$tquat@M$00@1@ABU?$tvec3@M$00@1@@Z ; glm::tdualquat<float,1>::tdualquat<float,1>
PUBLIC	??0?$tdualquat@M$00@glm@@QAE@ABU?$tquat@M$00@1@0@Z ; glm::tdualquat<float,1>::tdualquat<float,1>
PUBLIC	??0?$tdualquat@M$00@glm@@QAE@ABU?$tmat2x4@M$00@1@@Z ; glm::tdualquat<float,1>::tdualquat<float,1>
PUBLIC	??0?$tdualquat@M$00@glm@@QAE@ABU?$tmat3x4@M$00@1@@Z ; glm::tdualquat<float,1>::tdualquat<float,1>
PUBLIC	??4?$tdualquat@M$00@glm@@QAEAAU01@ABU01@@Z	; glm::tdualquat<float,1>::operator=
PUBLIC	?length@?$tdualquat@N$00@glm@@SAHXZ		; glm::tdualquat<double,1>::length
PUBLIC	??A?$tdualquat@N$00@glm@@QAEAAU?$tquat@N$00@1@H@Z ; glm::tdualquat<double,1>::operator[]
PUBLIC	??A?$tdualquat@N$00@glm@@QBEABU?$tquat@N$00@1@H@Z ; glm::tdualquat<double,1>::operator[]
PUBLIC	??0?$tdualquat@N$00@glm@@QAE@XZ			; glm::tdualquat<double,1>::tdualquat<double,1>
PUBLIC	??0?$tdualquat@N$00@glm@@QAE@ABU01@@Z		; glm::tdualquat<double,1>::tdualquat<double,1>
PUBLIC	??0?$tdualquat@N$00@glm@@QAE@W4ctor@1@@Z	; glm::tdualquat<double,1>::tdualquat<double,1>
PUBLIC	??0?$tdualquat@N$00@glm@@QAE@ABU?$tquat@N$00@1@@Z ; glm::tdualquat<double,1>::tdualquat<double,1>
PUBLIC	??0?$tdualquat@N$00@glm@@QAE@ABU?$tquat@N$00@1@ABU?$tvec3@N$00@1@@Z ; glm::tdualquat<double,1>::tdualquat<double,1>
PUBLIC	??0?$tdualquat@N$00@glm@@QAE@ABU?$tquat@N$00@1@0@Z ; glm::tdualquat<double,1>::tdualquat<double,1>
PUBLIC	??0?$tdualquat@N$00@glm@@QAE@ABU?$tmat2x4@N$00@1@@Z ; glm::tdualquat<double,1>::tdualquat<double,1>
PUBLIC	??0?$tdualquat@N$00@glm@@QAE@ABU?$tmat3x4@N$00@1@@Z ; glm::tdualquat<double,1>::tdualquat<double,1>
PUBLIC	??4?$tdualquat@N$00@glm@@QAEAAU01@ABU01@@Z	; glm::tdualquat<double,1>::operator=
PUBLIC	?length@?$tdualquat@M$0A@@glm@@SAHXZ		; glm::tdualquat<float,0>::length
PUBLIC	??A?$tdualquat@M$0A@@glm@@QAEAAU?$tquat@M$0A@@1@H@Z ; glm::tdualquat<float,0>::operator[]
PUBLIC	??A?$tdualquat@M$0A@@glm@@QBEABU?$tquat@M$0A@@1@H@Z ; glm::tdualquat<float,0>::operator[]
PUBLIC	??0?$tdualquat@M$0A@@glm@@QAE@XZ		; glm::tdualquat<float,0>::tdualquat<float,0>
PUBLIC	??0?$tdualquat@M$0A@@glm@@QAE@ABU01@@Z		; glm::tdualquat<float,0>::tdualquat<float,0>
PUBLIC	??0?$tdualquat@M$0A@@glm@@QAE@W4ctor@1@@Z	; glm::tdualquat<float,0>::tdualquat<float,0>
PUBLIC	??0?$tdualquat@M$0A@@glm@@QAE@ABU?$tquat@M$0A@@1@@Z ; glm::tdualquat<float,0>::tdualquat<float,0>
PUBLIC	??0?$tdualquat@M$0A@@glm@@QAE@ABU?$tquat@M$0A@@1@ABU?$tvec3@M$0A@@1@@Z ; glm::tdualquat<float,0>::tdualquat<float,0>
PUBLIC	??0?$tdualquat@M$0A@@glm@@QAE@ABU?$tquat@M$0A@@1@0@Z ; glm::tdualquat<float,0>::tdualquat<float,0>
PUBLIC	??0?$tdualquat@M$0A@@glm@@QAE@ABU?$tmat2x4@M$0A@@1@@Z ; glm::tdualquat<float,0>::tdualquat<float,0>
PUBLIC	??0?$tdualquat@M$0A@@glm@@QAE@ABU?$tmat3x4@M$0A@@1@@Z ; glm::tdualquat<float,0>::tdualquat<float,0>
PUBLIC	??4?$tdualquat@M$0A@@glm@@QAEAAU01@ABU01@@Z	; glm::tdualquat<float,0>::operator=
PUBLIC	?length@?$tdualquat@N$0A@@glm@@SAHXZ		; glm::tdualquat<double,0>::length
PUBLIC	??A?$tdualquat@N$0A@@glm@@QAEAAU?$tquat@N$0A@@1@H@Z ; glm::tdualquat<double,0>::operator[]
PUBLIC	??A?$tdualquat@N$0A@@glm@@QBEABU?$tquat@N$0A@@1@H@Z ; glm::tdualquat<double,0>::operator[]
PUBLIC	??0?$tdualquat@N$0A@@glm@@QAE@XZ		; glm::tdualquat<double,0>::tdualquat<double,0>
PUBLIC	??0?$tdualquat@N$0A@@glm@@QAE@ABU01@@Z		; glm::tdualquat<double,0>::tdualquat<double,0>
PUBLIC	??0?$tdualquat@N$0A@@glm@@QAE@W4ctor@1@@Z	; glm::tdualquat<double,0>::tdualquat<double,0>
PUBLIC	??0?$tdualquat@N$0A@@glm@@QAE@ABU?$tquat@N$0A@@1@@Z ; glm::tdualquat<double,0>::tdualquat<double,0>
PUBLIC	??0?$tdualquat@N$0A@@glm@@QAE@ABU?$tquat@N$0A@@1@ABU?$tvec3@N$0A@@1@@Z ; glm::tdualquat<double,0>::tdualquat<double,0>
PUBLIC	??0?$tdualquat@N$0A@@glm@@QAE@ABU?$tquat@N$0A@@1@0@Z ; glm::tdualquat<double,0>::tdualquat<double,0>
PUBLIC	??0?$tdualquat@N$0A@@glm@@QAE@ABU?$tmat2x4@N$0A@@1@@Z ; glm::tdualquat<double,0>::tdualquat<double,0>
PUBLIC	??0?$tdualquat@N$0A@@glm@@QAE@ABU?$tmat3x4@N$0A@@1@@Z ; glm::tdualquat<double,0>::tdualquat<double,0>
PUBLIC	??4?$tdualquat@N$0A@@glm@@QAEAAU01@ABU01@@Z	; glm::tdualquat<double,0>::operator=
PUBLIC	??$?0M$01@?$tvec2@M$01@glm@@QAE@ABU?$tvec3@M$01@1@@Z ; glm::tvec2<float,2>::tvec2<float,2><float,2>
PUBLIC	??$?0M$01@?$tvec2@M$01@glm@@QAE@ABU?$tvec4@M$01@1@@Z ; glm::tvec2<float,2>::tvec2<float,2><float,2>
PUBLIC	??$?0MH@?$tvec2@M$01@glm@@QAE@MH@Z		; glm::tvec2<float,2>::tvec2<float,2><float,int>
PUBLIC	??$?0HM@?$tvec2@M$01@glm@@QAE@HM@Z		; glm::tvec2<float,2>::tvec2<float,2><int,float>
PUBLIC	??$?0HH@?$tvec2@M$01@glm@@QAE@HH@Z		; glm::tvec2<float,2>::tvec2<float,2><int,int>
PUBLIC	??$?0N$01@?$tvec2@N$01@glm@@QAE@ABU?$tvec3@N$01@1@@Z ; glm::tvec2<double,2>::tvec2<double,2><double,2>
PUBLIC	??$?0N$01@?$tvec2@N$01@glm@@QAE@ABU?$tvec4@N$01@1@@Z ; glm::tvec2<double,2>::tvec2<double,2><double,2>
PUBLIC	??$?0NH@?$tvec2@N$01@glm@@QAE@NH@Z		; glm::tvec2<double,2>::tvec2<double,2><double,int>
PUBLIC	??$?0HN@?$tvec2@N$01@glm@@QAE@HN@Z		; glm::tvec2<double,2>::tvec2<double,2><int,double>
PUBLIC	??$?0HH@?$tvec2@N$01@glm@@QAE@HH@Z		; glm::tvec2<double,2>::tvec2<double,2><int,int>
PUBLIC	??$?0M$00@?$tvec2@M$00@glm@@QAE@ABU?$tvec3@M$00@1@@Z ; glm::tvec2<float,1>::tvec2<float,1><float,1>
PUBLIC	??$?0M$00@?$tvec2@M$00@glm@@QAE@ABU?$tvec4@M$00@1@@Z ; glm::tvec2<float,1>::tvec2<float,1><float,1>
PUBLIC	??$?0MH@?$tvec2@M$00@glm@@QAE@MH@Z		; glm::tvec2<float,1>::tvec2<float,1><float,int>
PUBLIC	??$?0HM@?$tvec2@M$00@glm@@QAE@HM@Z		; glm::tvec2<float,1>::tvec2<float,1><int,float>
PUBLIC	??$?0HH@?$tvec2@M$00@glm@@QAE@HH@Z		; glm::tvec2<float,1>::tvec2<float,1><int,int>
PUBLIC	??$?0N$00@?$tvec2@N$00@glm@@QAE@ABU?$tvec3@N$00@1@@Z ; glm::tvec2<double,1>::tvec2<double,1><double,1>
PUBLIC	??$?0N$00@?$tvec2@N$00@glm@@QAE@ABU?$tvec4@N$00@1@@Z ; glm::tvec2<double,1>::tvec2<double,1><double,1>
PUBLIC	??$?0NH@?$tvec2@N$00@glm@@QAE@NH@Z		; glm::tvec2<double,1>::tvec2<double,1><double,int>
PUBLIC	??$?0HN@?$tvec2@N$00@glm@@QAE@HN@Z		; glm::tvec2<double,1>::tvec2<double,1><int,double>
PUBLIC	??$?0HH@?$tvec2@N$00@glm@@QAE@HH@Z		; glm::tvec2<double,1>::tvec2<double,1><int,int>
PUBLIC	??$?0M$0A@@?$tvec2@M$0A@@glm@@QAE@ABU?$tvec3@M$0A@@1@@Z ; glm::tvec2<float,0>::tvec2<float,0><float,0>
PUBLIC	??$?0M$0A@@?$tvec2@M$0A@@glm@@QAE@ABU?$tvec4@M$0A@@1@@Z ; glm::tvec2<float,0>::tvec2<float,0><float,0>
PUBLIC	??$?0MH@?$tvec2@M$0A@@glm@@QAE@MH@Z		; glm::tvec2<float,0>::tvec2<float,0><float,int>
PUBLIC	??$?0HM@?$tvec2@M$0A@@glm@@QAE@HM@Z		; glm::tvec2<float,0>::tvec2<float,0><int,float>
PUBLIC	??$?0HH@?$tvec2@M$0A@@glm@@QAE@HH@Z		; glm::tvec2<float,0>::tvec2<float,0><int,int>
PUBLIC	??$?0N$0A@@?$tvec2@N$0A@@glm@@QAE@ABU?$tvec3@N$0A@@1@@Z ; glm::tvec2<double,0>::tvec2<double,0><double,0>
PUBLIC	??$?0N$0A@@?$tvec2@N$0A@@glm@@QAE@ABU?$tvec4@N$0A@@1@@Z ; glm::tvec2<double,0>::tvec2<double,0><double,0>
PUBLIC	??$?0NH@?$tvec2@N$0A@@glm@@QAE@NH@Z		; glm::tvec2<double,0>::tvec2<double,0><double,int>
PUBLIC	??$?0HN@?$tvec2@N$0A@@glm@@QAE@HN@Z		; glm::tvec2<double,0>::tvec2<double,0><int,double>
PUBLIC	??$?0HH@?$tvec2@N$0A@@glm@@QAE@HH@Z		; glm::tvec2<double,0>::tvec2<double,0><int,int>
PUBLIC	??$?0MH$01@?$tvec3@M$01@glm@@QAE@ABU?$tvec2@M$01@1@H@Z ; glm::tvec3<float,2>::tvec3<float,2><float,int,2>
PUBLIC	??$?0M$01@?$tvec3@M$01@glm@@QAE@ABU?$tvec4@M$01@1@@Z ; glm::tvec3<float,2>::tvec3<float,2><float,2>
PUBLIC	??$?0MHH@?$tvec3@M$01@glm@@QAE@MHH@Z		; glm::tvec3<float,2>::tvec3<float,2><float,int,int>
PUBLIC	??$?0HMH@?$tvec3@M$01@glm@@QAE@HMH@Z		; glm::tvec3<float,2>::tvec3<float,2><int,float,int>
PUBLIC	??$?0HHH@?$tvec3@M$01@glm@@QAE@HHH@Z		; glm::tvec3<float,2>::tvec3<float,2><int,int,int>
PUBLIC	??$?0NH$01@?$tvec3@N$01@glm@@QAE@ABU?$tvec2@N$01@1@H@Z ; glm::tvec3<double,2>::tvec3<double,2><double,int,2>
PUBLIC	??$?0N$01@?$tvec3@N$01@glm@@QAE@ABU?$tvec4@N$01@1@@Z ; glm::tvec3<double,2>::tvec3<double,2><double,2>
PUBLIC	??$?0NHH@?$tvec3@N$01@glm@@QAE@NHH@Z		; glm::tvec3<double,2>::tvec3<double,2><double,int,int>
PUBLIC	??$?0HNH@?$tvec3@N$01@glm@@QAE@HNH@Z		; glm::tvec3<double,2>::tvec3<double,2><int,double,int>
PUBLIC	??$?0HHH@?$tvec3@N$01@glm@@QAE@HHH@Z		; glm::tvec3<double,2>::tvec3<double,2><int,int,int>
PUBLIC	??$?0MH$00@?$tvec3@M$00@glm@@QAE@ABU?$tvec2@M$00@1@H@Z ; glm::tvec3<float,1>::tvec3<float,1><float,int,1>
PUBLIC	??$?0M$00@?$tvec3@M$00@glm@@QAE@ABU?$tvec4@M$00@1@@Z ; glm::tvec3<float,1>::tvec3<float,1><float,1>
PUBLIC	??$?0MHH@?$tvec3@M$00@glm@@QAE@MHH@Z		; glm::tvec3<float,1>::tvec3<float,1><float,int,int>
PUBLIC	??$?0HMH@?$tvec3@M$00@glm@@QAE@HMH@Z		; glm::tvec3<float,1>::tvec3<float,1><int,float,int>
PUBLIC	??$?0HHH@?$tvec3@M$00@glm@@QAE@HHH@Z		; glm::tvec3<float,1>::tvec3<float,1><int,int,int>
PUBLIC	??$?0NH$00@?$tvec3@N$00@glm@@QAE@ABU?$tvec2@N$00@1@H@Z ; glm::tvec3<double,1>::tvec3<double,1><double,int,1>
PUBLIC	??$?0N$00@?$tvec3@N$00@glm@@QAE@ABU?$tvec4@N$00@1@@Z ; glm::tvec3<double,1>::tvec3<double,1><double,1>
PUBLIC	??$?0NHH@?$tvec3@N$00@glm@@QAE@NHH@Z		; glm::tvec3<double,1>::tvec3<double,1><double,int,int>
PUBLIC	??$?0HNH@?$tvec3@N$00@glm@@QAE@HNH@Z		; glm::tvec3<double,1>::tvec3<double,1><int,double,int>
PUBLIC	??$?0HHH@?$tvec3@N$00@glm@@QAE@HHH@Z		; glm::tvec3<double,1>::tvec3<double,1><int,int,int>
PUBLIC	??$?0MH$0A@@?$tvec3@M$0A@@glm@@QAE@ABU?$tvec2@M$0A@@1@H@Z ; glm::tvec3<float,0>::tvec3<float,0><float,int,0>
PUBLIC	??$?0M$0A@@?$tvec3@M$0A@@glm@@QAE@ABU?$tvec4@M$0A@@1@@Z ; glm::tvec3<float,0>::tvec3<float,0><float,0>
PUBLIC	??$?0MHH@?$tvec3@M$0A@@glm@@QAE@MHH@Z		; glm::tvec3<float,0>::tvec3<float,0><float,int,int>
PUBLIC	??$?0HMH@?$tvec3@M$0A@@glm@@QAE@HMH@Z		; glm::tvec3<float,0>::tvec3<float,0><int,float,int>
PUBLIC	??$?0HHH@?$tvec3@M$0A@@glm@@QAE@HHH@Z		; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
PUBLIC	??$?0NH$0A@@?$tvec3@N$0A@@glm@@QAE@ABU?$tvec2@N$0A@@1@H@Z ; glm::tvec3<double,0>::tvec3<double,0><double,int,0>
PUBLIC	??$?0N$0A@@?$tvec3@N$0A@@glm@@QAE@ABU?$tvec4@N$0A@@1@@Z ; glm::tvec3<double,0>::tvec3<double,0><double,0>
PUBLIC	??$?0NHH@?$tvec3@N$0A@@glm@@QAE@NHH@Z		; glm::tvec3<double,0>::tvec3<double,0><double,int,int>
PUBLIC	??$?0HNH@?$tvec3@N$0A@@glm@@QAE@HNH@Z		; glm::tvec3<double,0>::tvec3<double,0><int,double,int>
PUBLIC	??$?0HHH@?$tvec3@N$0A@@glm@@QAE@HHH@Z		; glm::tvec3<double,0>::tvec3<double,0><int,int,int>
PUBLIC	??$?0MH$01@?$tvec4@M$01@glm@@QAE@ABU?$tvec3@M$01@1@H@Z ; glm::tvec4<float,2>::tvec4<float,2><float,int,2>
PUBLIC	??$?0MHH$01@?$tvec4@M$01@glm@@QAE@ABU?$tvec2@M$01@1@HH@Z ; glm::tvec4<float,2>::tvec4<float,2><float,int,int,2>
PUBLIC	??$?0HHHH@?$tvec4@M$01@glm@@QAE@HHHH@Z		; glm::tvec4<float,2>::tvec4<float,2><int,int,int,int>
PUBLIC	??$?0NH$01@?$tvec4@N$01@glm@@QAE@ABU?$tvec3@N$01@1@H@Z ; glm::tvec4<double,2>::tvec4<double,2><double,int,2>
PUBLIC	??$?0NHH$01@?$tvec4@N$01@glm@@QAE@ABU?$tvec2@N$01@1@HH@Z ; glm::tvec4<double,2>::tvec4<double,2><double,int,int,2>
PUBLIC	??$?0HHHH@?$tvec4@N$01@glm@@QAE@HHHH@Z		; glm::tvec4<double,2>::tvec4<double,2><int,int,int,int>
PUBLIC	??$?0MH$00@?$tvec4@M$00@glm@@QAE@ABU?$tvec3@M$00@1@H@Z ; glm::tvec4<float,1>::tvec4<float,1><float,int,1>
PUBLIC	??$?0MHH$00@?$tvec4@M$00@glm@@QAE@ABU?$tvec2@M$00@1@HH@Z ; glm::tvec4<float,1>::tvec4<float,1><float,int,int,1>
PUBLIC	??$?0HHHH@?$tvec4@M$00@glm@@QAE@HHHH@Z		; glm::tvec4<float,1>::tvec4<float,1><int,int,int,int>
PUBLIC	??$?0NH$00@?$tvec4@N$00@glm@@QAE@ABU?$tvec3@N$00@1@H@Z ; glm::tvec4<double,1>::tvec4<double,1><double,int,1>
PUBLIC	??$?0NHH$00@?$tvec4@N$00@glm@@QAE@ABU?$tvec2@N$00@1@HH@Z ; glm::tvec4<double,1>::tvec4<double,1><double,int,int,1>
PUBLIC	??$?0HHHH@?$tvec4@N$00@glm@@QAE@HHHH@Z		; glm::tvec4<double,1>::tvec4<double,1><int,int,int,int>
PUBLIC	??$?0MH$0A@@?$tvec4@M$0A@@glm@@QAE@ABU?$tvec3@M$0A@@1@H@Z ; glm::tvec4<float,0>::tvec4<float,0><float,int,0>
PUBLIC	??$?0MHH$0A@@?$tvec4@M$0A@@glm@@QAE@ABU?$tvec2@M$0A@@1@HH@Z ; glm::tvec4<float,0>::tvec4<float,0><float,int,int,0>
PUBLIC	??$?0HHHH@?$tvec4@M$0A@@glm@@QAE@HHHH@Z		; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
PUBLIC	??$?0NH$0A@@?$tvec4@N$0A@@glm@@QAE@ABU?$tvec3@N$0A@@1@H@Z ; glm::tvec4<double,0>::tvec4<double,0><double,int,0>
PUBLIC	??$?0NHH$0A@@?$tvec4@N$0A@@glm@@QAE@ABU?$tvec2@N$0A@@1@HH@Z ; glm::tvec4<double,0>::tvec4<double,0><double,int,int,0>
PUBLIC	??$?0HHHH@?$tvec4@N$0A@@glm@@QAE@HHHH@Z		; glm::tvec4<double,0>::tvec4<double,0><int,int,int,int>
PUBLIC	??$?0HHM@?$tvec3@M$01@glm@@QAE@HHM@Z		; glm::tvec3<float,2>::tvec3<float,2><int,int,float>
PUBLIC	??$?0HHN@?$tvec3@N$01@glm@@QAE@HHN@Z		; glm::tvec3<double,2>::tvec3<double,2><int,int,double>
PUBLIC	??$?0HHM@?$tvec3@M$00@glm@@QAE@HHM@Z		; glm::tvec3<float,1>::tvec3<float,1><int,int,float>
PUBLIC	??$?0HHN@?$tvec3@N$00@glm@@QAE@HHN@Z		; glm::tvec3<double,1>::tvec3<double,1><int,int,double>
PUBLIC	??$?0HHM@?$tvec3@M$0A@@glm@@QAE@HHM@Z		; glm::tvec3<float,0>::tvec3<float,0><int,int,float>
PUBLIC	??$?0HHN@?$tvec3@N$0A@@glm@@QAE@HHN@Z		; glm::tvec3<double,0>::tvec3<double,0><int,int,double>
PUBLIC	??$?0MHHH@?$tvec4@M$01@glm@@QAE@MHHH@Z		; glm::tvec4<float,2>::tvec4<float,2><float,int,int,int>
PUBLIC	??$?0HMHH@?$tvec4@M$01@glm@@QAE@HMHH@Z		; glm::tvec4<float,2>::tvec4<float,2><int,float,int,int>
PUBLIC	??$?0HHMH@?$tvec4@M$01@glm@@QAE@HHMH@Z		; glm::tvec4<float,2>::tvec4<float,2><int,int,float,int>
PUBLIC	??$?0NHHH@?$tvec4@N$01@glm@@QAE@NHHH@Z		; glm::tvec4<double,2>::tvec4<double,2><double,int,int,int>
PUBLIC	??$?0HNHH@?$tvec4@N$01@glm@@QAE@HNHH@Z		; glm::tvec4<double,2>::tvec4<double,2><int,double,int,int>
PUBLIC	??$?0HHNH@?$tvec4@N$01@glm@@QAE@HHNH@Z		; glm::tvec4<double,2>::tvec4<double,2><int,int,double,int>
PUBLIC	??$?0MHHH@?$tvec4@M$00@glm@@QAE@MHHH@Z		; glm::tvec4<float,1>::tvec4<float,1><float,int,int,int>
PUBLIC	??$?0HMHH@?$tvec4@M$00@glm@@QAE@HMHH@Z		; glm::tvec4<float,1>::tvec4<float,1><int,float,int,int>
PUBLIC	??$?0HHMH@?$tvec4@M$00@glm@@QAE@HHMH@Z		; glm::tvec4<float,1>::tvec4<float,1><int,int,float,int>
PUBLIC	??$?0NHHH@?$tvec4@N$00@glm@@QAE@NHHH@Z		; glm::tvec4<double,1>::tvec4<double,1><double,int,int,int>
PUBLIC	??$?0HNHH@?$tvec4@N$00@glm@@QAE@HNHH@Z		; glm::tvec4<double,1>::tvec4<double,1><int,double,int,int>
PUBLIC	??$?0HHNH@?$tvec4@N$00@glm@@QAE@HHNH@Z		; glm::tvec4<double,1>::tvec4<double,1><int,int,double,int>
PUBLIC	??$?0MHHH@?$tvec4@M$0A@@glm@@QAE@MHHH@Z		; glm::tvec4<float,0>::tvec4<float,0><float,int,int,int>
PUBLIC	??$?0HMHH@?$tvec4@M$0A@@glm@@QAE@HMHH@Z		; glm::tvec4<float,0>::tvec4<float,0><int,float,int,int>
PUBLIC	??$?0HHMH@?$tvec4@M$0A@@glm@@QAE@HHMH@Z		; glm::tvec4<float,0>::tvec4<float,0><int,int,float,int>
PUBLIC	??$?0NHHH@?$tvec4@N$0A@@glm@@QAE@NHHH@Z		; glm::tvec4<double,0>::tvec4<double,0><double,int,int,int>
PUBLIC	??$?0HNHH@?$tvec4@N$0A@@glm@@QAE@HNHH@Z		; glm::tvec4<double,0>::tvec4<double,0><int,double,int,int>
PUBLIC	??$?0HHNH@?$tvec4@N$0A@@glm@@QAE@HHNH@Z		; glm::tvec4<double,0>::tvec4<double,0><int,int,double,int>
PUBLIC	??$?0HHHM@?$tvec4@M$01@glm@@QAE@HHHM@Z		; glm::tvec4<float,2>::tvec4<float,2><int,int,int,float>
PUBLIC	??$?0HHHN@?$tvec4@N$01@glm@@QAE@HHHN@Z		; glm::tvec4<double,2>::tvec4<double,2><int,int,int,double>
PUBLIC	??$?0HHHM@?$tvec4@M$00@glm@@QAE@HHHM@Z		; glm::tvec4<float,1>::tvec4<float,1><int,int,int,float>
PUBLIC	??$?0HHHN@?$tvec4@N$00@glm@@QAE@HHHN@Z		; glm::tvec4<double,1>::tvec4<double,1><int,int,int,double>
PUBLIC	??$?0HHHM@?$tvec4@M$0A@@glm@@QAE@HHHM@Z		; glm::tvec4<float,0>::tvec4<float,0><int,int,int,float>
PUBLIC	??$?0HHHN@?$tvec4@N$0A@@glm@@QAE@HHHN@Z		; glm::tvec4<double,0>::tvec4<double,0><int,int,int,double>
PUBLIC	??$quat_cast@M$01@glm@@YA?AU?$tquat@M$01@0@ABU?$tmat4x4@M$01@0@@Z ; glm::quat_cast<float,2>
PUBLIC	??$quat_cast@M$01@glm@@YA?AU?$tquat@M$01@0@ABU?$tmat3x3@M$01@0@@Z ; glm::quat_cast<float,2>
PUBLIC	??$?DM$01@glm@@YA?AU?$tvec3@M$01@0@ABU10@M@Z	; glm::operator*<float,2>
PUBLIC	??$cos@M$01Utvec3@glm@@@glm@@YA?AU?$tvec3@M$01@0@ABU10@@Z ; glm::cos<float,2,glm::tvec3>
PUBLIC	??$sin@M$01Utvec3@glm@@@glm@@YA?AU?$tvec3@M$01@0@ABU10@@Z ; glm::sin<float,2,glm::tvec3>
PUBLIC	??$cross@M$01@glm@@YA?AU?$tvec3@M$01@0@ABU10@0@Z ; glm::cross<float,2>
PUBLIC	?call@?$compute_dot@Utvec3@glm@@M$01$0A@@detail@glm@@SAMABU?$tvec3@M$01@3@0@Z ; glm::detail::compute_dot<glm::tvec3,float,2,0>::call
PUBLIC	??$normalize@M$01@glm@@YA?AU?$tquat@M$01@0@ABU10@@Z ; glm::normalize<float,2>
PUBLIC	??$mat3_cast@M$01@glm@@YA?AU?$tmat3x3@M$01@0@ABU?$tquat@M$01@0@@Z ; glm::mat3_cast<float,2>
PUBLIC	??$mat4_cast@M$01@glm@@YA?AU?$tmat4x4@M$01@0@ABU?$tquat@M$01@0@@Z ; glm::mat4_cast<float,2>
PUBLIC	??$quat_cast@N$01@glm@@YA?AU?$tquat@N$01@0@ABU?$tmat4x4@N$01@0@@Z ; glm::quat_cast<double,2>
PUBLIC	??$quat_cast@N$01@glm@@YA?AU?$tquat@N$01@0@ABU?$tmat3x3@N$01@0@@Z ; glm::quat_cast<double,2>
PUBLIC	??$?DN$01@glm@@YA?AU?$tvec3@N$01@0@ABU10@N@Z	; glm::operator*<double,2>
PUBLIC	??$cos@N$01Utvec3@glm@@@glm@@YA?AU?$tvec3@N$01@0@ABU10@@Z ; glm::cos<double,2,glm::tvec3>
PUBLIC	??$sin@N$01Utvec3@glm@@@glm@@YA?AU?$tvec3@N$01@0@ABU10@@Z ; glm::sin<double,2,glm::tvec3>
PUBLIC	??$cross@N$01@glm@@YA?AU?$tvec3@N$01@0@ABU10@0@Z ; glm::cross<double,2>
PUBLIC	?call@?$compute_dot@Utvec3@glm@@N$01$0A@@detail@glm@@SANABU?$tvec3@N$01@3@0@Z ; glm::detail::compute_dot<glm::tvec3,double,2,0>::call
PUBLIC	??$normalize@N$01@glm@@YA?AU?$tquat@N$01@0@ABU10@@Z ; glm::normalize<double,2>
PUBLIC	??$mat3_cast@N$01@glm@@YA?AU?$tmat3x3@N$01@0@ABU?$tquat@N$01@0@@Z ; glm::mat3_cast<double,2>
PUBLIC	??$mat4_cast@N$01@glm@@YA?AU?$tmat4x4@N$01@0@ABU?$tquat@N$01@0@@Z ; glm::mat4_cast<double,2>
PUBLIC	??$quat_cast@M$00@glm@@YA?AU?$tquat@M$00@0@ABU?$tmat4x4@M$00@0@@Z ; glm::quat_cast<float,1>
PUBLIC	??$quat_cast@M$00@glm@@YA?AU?$tquat@M$00@0@ABU?$tmat3x3@M$00@0@@Z ; glm::quat_cast<float,1>
PUBLIC	??$?DM$00@glm@@YA?AU?$tvec3@M$00@0@ABU10@M@Z	; glm::operator*<float,1>
PUBLIC	??$cos@M$00Utvec3@glm@@@glm@@YA?AU?$tvec3@M$00@0@ABU10@@Z ; glm::cos<float,1,glm::tvec3>
PUBLIC	??$sin@M$00Utvec3@glm@@@glm@@YA?AU?$tvec3@M$00@0@ABU10@@Z ; glm::sin<float,1,glm::tvec3>
PUBLIC	??$cross@M$00@glm@@YA?AU?$tvec3@M$00@0@ABU10@0@Z ; glm::cross<float,1>
PUBLIC	?call@?$compute_dot@Utvec3@glm@@M$00$0A@@detail@glm@@SAMABU?$tvec3@M$00@3@0@Z ; glm::detail::compute_dot<glm::tvec3,float,1,0>::call
PUBLIC	??$normalize@M$00@glm@@YA?AU?$tquat@M$00@0@ABU10@@Z ; glm::normalize<float,1>
PUBLIC	??$mat3_cast@M$00@glm@@YA?AU?$tmat3x3@M$00@0@ABU?$tquat@M$00@0@@Z ; glm::mat3_cast<float,1>
PUBLIC	??$mat4_cast@M$00@glm@@YA?AU?$tmat4x4@M$00@0@ABU?$tquat@M$00@0@@Z ; glm::mat4_cast<float,1>
PUBLIC	??$quat_cast@N$00@glm@@YA?AU?$tquat@N$00@0@ABU?$tmat4x4@N$00@0@@Z ; glm::quat_cast<double,1>
PUBLIC	??$quat_cast@N$00@glm@@YA?AU?$tquat@N$00@0@ABU?$tmat3x3@N$00@0@@Z ; glm::quat_cast<double,1>
PUBLIC	??$?DN$00@glm@@YA?AU?$tvec3@N$00@0@ABU10@N@Z	; glm::operator*<double,1>
PUBLIC	??$cos@N$00Utvec3@glm@@@glm@@YA?AU?$tvec3@N$00@0@ABU10@@Z ; glm::cos<double,1,glm::tvec3>
PUBLIC	??$sin@N$00Utvec3@glm@@@glm@@YA?AU?$tvec3@N$00@0@ABU10@@Z ; glm::sin<double,1,glm::tvec3>
PUBLIC	??$cross@N$00@glm@@YA?AU?$tvec3@N$00@0@ABU10@0@Z ; glm::cross<double,1>
PUBLIC	?call@?$compute_dot@Utvec3@glm@@N$00$0A@@detail@glm@@SANABU?$tvec3@N$00@3@0@Z ; glm::detail::compute_dot<glm::tvec3,double,1,0>::call
PUBLIC	??$normalize@N$00@glm@@YA?AU?$tquat@N$00@0@ABU10@@Z ; glm::normalize<double,1>
PUBLIC	??$mat3_cast@N$00@glm@@YA?AU?$tmat3x3@N$00@0@ABU?$tquat@N$00@0@@Z ; glm::mat3_cast<double,1>
PUBLIC	??$mat4_cast@N$00@glm@@YA?AU?$tmat4x4@N$00@0@ABU?$tquat@N$00@0@@Z ; glm::mat4_cast<double,1>
PUBLIC	??$quat_cast@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@ABU?$tmat4x4@M$0A@@0@@Z ; glm::quat_cast<float,0>
PUBLIC	??$quat_cast@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@ABU?$tmat3x3@M$0A@@0@@Z ; glm::quat_cast<float,0>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@ABU10@M@Z	; glm::operator*<float,0>
PUBLIC	??$cos@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@ABU10@@Z ; glm::cos<float,0,glm::tvec3>
PUBLIC	??$sin@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@ABU10@@Z ; glm::sin<float,0,glm::tvec3>
PUBLIC	??$cross@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@ABU10@0@Z ; glm::cross<float,0>
PUBLIC	?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMABU?$tvec3@M$0A@@3@0@Z ; glm::detail::compute_dot<glm::tvec3,float,0,0>::call
PUBLIC	??$normalize@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@ABU10@@Z ; glm::normalize<float,0>
PUBLIC	??$mat3_cast@M$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@ABU?$tquat@M$0A@@0@@Z ; glm::mat3_cast<float,0>
PUBLIC	??$mat4_cast@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@ABU?$tquat@M$0A@@0@@Z ; glm::mat4_cast<float,0>
PUBLIC	??$quat_cast@N$0A@@glm@@YA?AU?$tquat@N$0A@@0@ABU?$tmat4x4@N$0A@@0@@Z ; glm::quat_cast<double,0>
PUBLIC	??$quat_cast@N$0A@@glm@@YA?AU?$tquat@N$0A@@0@ABU?$tmat3x3@N$0A@@0@@Z ; glm::quat_cast<double,0>
PUBLIC	??$?DN$0A@@glm@@YA?AU?$tvec3@N$0A@@0@ABU10@N@Z	; glm::operator*<double,0>
PUBLIC	??$cos@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@N$0A@@0@ABU10@@Z ; glm::cos<double,0,glm::tvec3>
PUBLIC	??$sin@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@N$0A@@0@ABU10@@Z ; glm::sin<double,0,glm::tvec3>
PUBLIC	??$cross@N$0A@@glm@@YA?AU?$tvec3@N$0A@@0@ABU10@0@Z ; glm::cross<double,0>
PUBLIC	?call@?$compute_dot@Utvec3@glm@@N$0A@$0A@@detail@glm@@SANABU?$tvec3@N$0A@@3@0@Z ; glm::detail::compute_dot<glm::tvec3,double,0,0>::call
PUBLIC	??$normalize@N$0A@@glm@@YA?AU?$tquat@N$0A@@0@ABU10@@Z ; glm::normalize<double,0>
PUBLIC	??$mat3_cast@N$0A@@glm@@YA?AU?$tmat3x3@N$0A@@0@ABU?$tquat@N$0A@@0@@Z ; glm::mat3_cast<double,0>
PUBLIC	??$mat4_cast@N$0A@@glm@@YA?AU?$tmat4x4@N$0A@@0@ABU?$tquat@N$0A@@0@@Z ; glm::mat4_cast<double,0>
PUBLIC	??$dualquat_cast@M$01@glm@@YA?AU?$tdualquat@M$01@0@ABU?$tmat3x4@M$01@0@@Z ; glm::dualquat_cast<float,2>
PUBLIC	??$dualquat_cast@M$01@glm@@YA?AU?$tdualquat@M$01@0@ABU?$tmat2x4@M$01@0@@Z ; glm::dualquat_cast<float,2>
PUBLIC	??$dualquat_cast@N$01@glm@@YA?AU?$tdualquat@N$01@0@ABU?$tmat3x4@N$01@0@@Z ; glm::dualquat_cast<double,2>
PUBLIC	??$dualquat_cast@N$01@glm@@YA?AU?$tdualquat@N$01@0@ABU?$tmat2x4@N$01@0@@Z ; glm::dualquat_cast<double,2>
PUBLIC	??$dualquat_cast@M$00@glm@@YA?AU?$tdualquat@M$00@0@ABU?$tmat3x4@M$00@0@@Z ; glm::dualquat_cast<float,1>
PUBLIC	??$dualquat_cast@M$00@glm@@YA?AU?$tdualquat@M$00@0@ABU?$tmat2x4@M$00@0@@Z ; glm::dualquat_cast<float,1>
PUBLIC	??$dualquat_cast@N$00@glm@@YA?AU?$tdualquat@N$00@0@ABU?$tmat3x4@N$00@0@@Z ; glm::dualquat_cast<double,1>
PUBLIC	??$dualquat_cast@N$00@glm@@YA?AU?$tdualquat@N$00@0@ABU?$tmat2x4@N$00@0@@Z ; glm::dualquat_cast<double,1>
PUBLIC	??$dualquat_cast@M$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@ABU?$tmat3x4@M$0A@@0@@Z ; glm::dualquat_cast<float,0>
PUBLIC	??$dualquat_cast@M$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@ABU?$tmat2x4@M$0A@@0@@Z ; glm::dualquat_cast<float,0>
PUBLIC	??$dualquat_cast@N$0A@@glm@@YA?AU?$tdualquat@N$0A@@0@ABU?$tmat3x4@N$0A@@0@@Z ; glm::dualquat_cast<double,0>
PUBLIC	??$dualquat_cast@N$0A@@glm@@YA?AU?$tdualquat@N$0A@@0@ABU?$tmat2x4@N$0A@@0@@Z ; glm::dualquat_cast<double,0>
PUBLIC	??$?DM$01@glm@@YA?AU?$tvec3@M$01@0@ABU10@0@Z	; glm::operator*<float,2>
PUBLIC	??$?DN$01@glm@@YA?AU?$tvec3@N$01@0@ABU10@0@Z	; glm::operator*<double,2>
PUBLIC	??$?DM$00@glm@@YA?AU?$tvec3@M$00@0@ABU10@0@Z	; glm::operator*<float,1>
PUBLIC	??$?DN$00@glm@@YA?AU?$tvec3@N$00@0@ABU10@0@Z	; glm::operator*<double,1>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@ABU10@0@Z	; glm::operator*<float,0>
PUBLIC	??$?DN$0A@@glm@@YA?AU?$tvec3@N$0A@@0@ABU10@0@Z	; glm::operator*<double,0>
PUBLIC	?call@?$functor1@MM$01Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$01@3@P6AMM@ZABU43@@Z ; glm::detail::functor1<float,float,2,glm::tvec3>::call
PUBLIC	?call@?$compute_cross@M$01$0A@@detail@glm@@SA?AU?$tvec3@M$01@3@ABU43@0@Z ; glm::detail::compute_cross<float,2,0>::call
PUBLIC	??$length@M$01@glm@@YAMABU?$tquat@M$01@0@@Z	; glm::length<float,2>
PUBLIC	?call@?$functor1@NN$01Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@N$01@3@P6ANN@ZABU43@@Z ; glm::detail::functor1<double,double,2,glm::tvec3>::call
PUBLIC	?call@?$compute_cross@N$01$0A@@detail@glm@@SA?AU?$tvec3@N$01@3@ABU43@0@Z ; glm::detail::compute_cross<double,2,0>::call
PUBLIC	??$length@N$01@glm@@YANABU?$tquat@N$01@0@@Z	; glm::length<double,2>
PUBLIC	?call@?$functor1@MM$00Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$00@3@P6AMM@ZABU43@@Z ; glm::detail::functor1<float,float,1,glm::tvec3>::call
PUBLIC	?call@?$compute_cross@M$00$0A@@detail@glm@@SA?AU?$tvec3@M$00@3@ABU43@0@Z ; glm::detail::compute_cross<float,1,0>::call
PUBLIC	??$length@M$00@glm@@YAMABU?$tquat@M$00@0@@Z	; glm::length<float,1>
PUBLIC	?call@?$functor1@NN$00Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@N$00@3@P6ANN@ZABU43@@Z ; glm::detail::functor1<double,double,1,glm::tvec3>::call
PUBLIC	?call@?$compute_cross@N$00$0A@@detail@glm@@SA?AU?$tvec3@N$00@3@ABU43@0@Z ; glm::detail::compute_cross<double,1,0>::call
PUBLIC	??$length@N$00@glm@@YANABU?$tquat@N$00@0@@Z	; glm::length<double,1>
PUBLIC	?call@?$functor1@MM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMM@ZABU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec3>::call
PUBLIC	?call@?$compute_cross@M$0A@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@ABU43@0@Z ; glm::detail::compute_cross<float,0,0>::call
PUBLIC	??$length@M$0A@@glm@@YAMABU?$tquat@M$0A@@0@@Z	; glm::length<float,0>
PUBLIC	?call@?$functor1@NN$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@N$0A@@3@P6ANN@ZABU43@@Z ; glm::detail::functor1<double,double,0,glm::tvec3>::call
PUBLIC	?call@?$compute_cross@N$0A@$0A@@detail@glm@@SA?AU?$tvec3@N$0A@@3@ABU43@0@Z ; glm::detail::compute_cross<double,0,0>::call
PUBLIC	??$length@N$0A@@glm@@YANABU?$tquat@N$0A@@0@@Z	; glm::length<double,0>
PUBLIC	??$dot@M$01Utquat@glm@@@glm@@YAMABU?$tquat@M$01@0@0@Z ; glm::dot<float,2,glm::tquat>
PUBLIC	??$dot@N$01Utquat@glm@@@glm@@YANABU?$tquat@N$01@0@0@Z ; glm::dot<double,2,glm::tquat>
PUBLIC	??$dot@M$00Utquat@glm@@@glm@@YAMABU?$tquat@M$00@0@0@Z ; glm::dot<float,1,glm::tquat>
PUBLIC	??$dot@N$00Utquat@glm@@@glm@@YANABU?$tquat@N$00@0@0@Z ; glm::dot<double,1,glm::tquat>
PUBLIC	??$dot@M$0A@Utquat@glm@@@glm@@YAMABU?$tquat@M$0A@@0@0@Z ; glm::dot<float,0,glm::tquat>
PUBLIC	??$dot@N$0A@Utquat@glm@@@glm@@YANABU?$tquat@N$0A@@0@0@Z ; glm::dot<double,0,glm::tquat>
PUBLIC	?call@?$compute_dot@Utquat@glm@@M$01$0A@@detail@glm@@SAMABU?$tquat@M$01@3@0@Z ; glm::detail::compute_dot<glm::tquat,float,2,0>::call
PUBLIC	?call@?$compute_dot@Utquat@glm@@N$01$0A@@detail@glm@@SANABU?$tquat@N$01@3@0@Z ; glm::detail::compute_dot<glm::tquat,double,2,0>::call
PUBLIC	?call@?$compute_dot@Utquat@glm@@M$00$0A@@detail@glm@@SAMABU?$tquat@M$00@3@0@Z ; glm::detail::compute_dot<glm::tquat,float,1,0>::call
PUBLIC	?call@?$compute_dot@Utquat@glm@@N$00$0A@@detail@glm@@SANABU?$tquat@N$00@3@0@Z ; glm::detail::compute_dot<glm::tquat,double,1,0>::call
PUBLIC	?call@?$compute_dot@Utquat@glm@@M$0A@$0A@@detail@glm@@SAMABU?$tquat@M$0A@@3@0@Z ; glm::detail::compute_dot<glm::tquat,float,0,0>::call
PUBLIC	?call@?$compute_dot@Utquat@glm@@N$0A@$0A@@detail@glm@@SANABU?$tquat@N$0A@@3@0@Z ; glm::detail::compute_dot<glm::tquat,double,0,0>::call
PUBLIC	__real@00000000
PUBLIC	__real@0000000000000000
PUBLIC	__real@3e800000
PUBLIC	__real@3f000000
PUBLIC	__real@3f800000
PUBLIC	__real@3fd0000000000000
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@40000000
PUBLIC	__real@4000000000000000
PUBLIC	__real@bf000000
PUBLIC	__real@bfe0000000000000
PUBLIC	__xmm@0000000000000000000000003f800000
PUBLIC	__xmm@00000000000000003f80000000000000
PUBLIC	__xmm@00000000000000003ff0000000000000
PUBLIC	__xmm@000000003f8000000000000000000000
PUBLIC	__xmm@3f800000000000000000000000000000
PUBLIC	__xmm@3f8000003f8000003f8000003f800000
PUBLIC	__xmm@3fe00000000000003fe0000000000000
PUBLIC	__xmm@3ff00000000000000000000000000000
PUBLIC	__xmm@3ff00000000000003ff0000000000000
EXTRN	_cos:PROC
EXTRN	_sin:PROC
EXTRN	_sqrt:PROC
EXTRN	__imp___hypot:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __xmm@3ff00000000000003ff0000000000000
CONST	SEGMENT
__xmm@3ff00000000000003ff0000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 0f0H
	DB	'?', 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, '?'
CONST	ENDS
;	COMDAT __xmm@3ff00000000000000000000000000000
CONST	SEGMENT
__xmm@3ff00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, '?'
CONST	ENDS
;	COMDAT __xmm@3fe00000000000003fe0000000000000
CONST	SEGMENT
__xmm@3fe00000000000003fe0000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 0e0H
	DB	'?', 00H, 00H, 00H, 00H, 00H, 00H, 0e0H, '?'
CONST	ENDS
;	COMDAT __xmm@3f8000003f8000003f8000003f800000
CONST	SEGMENT
__xmm@3f8000003f8000003f8000003f800000 DB 00H, 00H, 080H, '?', 00H, 00H, 080H
	DB	'?', 00H, 00H, 080H, '?', 00H, 00H, 080H, '?'
CONST	ENDS
;	COMDAT __xmm@3f800000000000000000000000000000
CONST	SEGMENT
__xmm@3f800000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 080H, '?'
CONST	ENDS
;	COMDAT __xmm@000000003f8000000000000000000000
CONST	SEGMENT
__xmm@000000003f8000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 080H, '?', 00H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000000000000003ff0000000000000
CONST	SEGMENT
__xmm@00000000000000003ff0000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 0f0H
	DB	'?', 00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000000000000003f80000000000000
CONST	SEGMENT
__xmm@00000000000000003f80000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 080H
	DB	'?', 00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@0000000000000000000000003f800000
CONST	SEGMENT
__xmm@0000000000000000000000003f800000 DB 00H, 00H, 080H, '?', 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __real@bfe0000000000000
CONST	SEGMENT
__real@bfe0000000000000 DQ 0bfe0000000000000r	; -0.5
CONST	ENDS
;	COMDAT __real@bf000000
CONST	SEGMENT
__real@bf000000 DD 0bf000000r			; -0.5
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3fd0000000000000
CONST	SEGMENT
__real@3fd0000000000000 DQ 03fd0000000000000r	; 0.25
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3e800000
CONST	SEGMENT
__real@3e800000 DD 03e800000r			; 0.25
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ?call@?$compute_dot@Utquat@glm@@N$0A@$0A@@detail@glm@@SANABU?$tquat@N$0A@@3@0@Z
_TEXT	SEGMENT
_tmp$ = -40						; size = 32
tv160 = -8						; size = 8
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?call@?$compute_dot@Utquat@glm@@N$0A@$0A@@detail@glm@@SANABU?$tquat@N$0A@@3@0@Z PROC ; glm::detail::compute_dot<glm::tquat,double,0,0>::call, COMDAT

; 16   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H

; 17   : 			tvec4<T, P> tmp(x.x * y.x, x.y * y.y, x.z * y.z, x.w * y.w);

	mov	ecx, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR _y$[ebp]
	movsd	xmm2, QWORD PTR [ecx]
	movsd	xmm1, QWORD PTR [ecx+8]
	movsd	xmm0, QWORD PTR [ecx+16]
	mulsd	xmm2, QWORD PTR [eax]
	mulsd	xmm1, QWORD PTR [eax+8]
	mulsd	xmm0, QWORD PTR [eax+16]
	fld	QWORD PTR [ecx+24]
	fmul	QWORD PTR [eax+24]

; 18   : 			return (tmp.x + tmp.y) + (tmp.z + tmp.w);

	addsd	xmm1, xmm2
	movsd	QWORD PTR _tmp$[ebp+16], xmm0
	fadd	QWORD PTR _tmp$[ebp+16]
	movsd	QWORD PTR tv160[ebp], xmm1
	fadd	QWORD PTR tv160[ebp]

; 19   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?call@?$compute_dot@Utquat@glm@@N$0A@$0A@@detail@glm@@SANABU?$tquat@N$0A@@3@0@Z ENDP ; glm::detail::compute_dot<glm::tquat,double,0,0>::call
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ?call@?$compute_dot@Utquat@glm@@M$0A@$0A@@detail@glm@@SAMABU?$tquat@M$0A@@3@0@Z
_TEXT	SEGMENT
_tmp$ = -16						; size = 16
tv160 = 8						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?call@?$compute_dot@Utquat@glm@@M$0A@$0A@@detail@glm@@SAMABU?$tquat@M$0A@@3@0@Z PROC ; glm::detail::compute_dot<glm::tquat,float,0,0>::call, COMDAT

; 16   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 17   : 			tvec4<T, P> tmp(x.x * y.x, x.y * y.y, x.z * y.z, x.w * y.w);

	mov	ecx, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR _y$[ebp]
	fld	DWORD PTR [ecx+12]
	fmul	DWORD PTR [eax+12]
	movss	xmm2, DWORD PTR [ecx]
	movss	xmm1, DWORD PTR [ecx+4]
	movss	xmm0, DWORD PTR [ecx+8]
	mulss	xmm2, DWORD PTR [eax]
	mulss	xmm1, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR [eax+8]
	fstp	DWORD PTR _tmp$[ebp+12]

; 18   : 			return (tmp.x + tmp.y) + (tmp.z + tmp.w);

	fld	DWORD PTR _tmp$[ebp+12]
	addss	xmm1, xmm2
	movss	DWORD PTR _tmp$[ebp+8], xmm0
	fadd	DWORD PTR _tmp$[ebp+8]
	movss	DWORD PTR tv160[ebp], xmm1
	fadd	DWORD PTR tv160[ebp]

; 19   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?call@?$compute_dot@Utquat@glm@@M$0A@$0A@@detail@glm@@SAMABU?$tquat@M$0A@@3@0@Z ENDP ; glm::detail::compute_dot<glm::tquat,float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ?call@?$compute_dot@Utquat@glm@@N$00$0A@@detail@glm@@SANABU?$tquat@N$00@3@0@Z
_TEXT	SEGMENT
_tmp$ = -40						; size = 32
tv160 = -8						; size = 8
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?call@?$compute_dot@Utquat@glm@@N$00$0A@@detail@glm@@SANABU?$tquat@N$00@3@0@Z PROC ; glm::detail::compute_dot<glm::tquat,double,1,0>::call, COMDAT

; 16   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H

; 17   : 			tvec4<T, P> tmp(x.x * y.x, x.y * y.y, x.z * y.z, x.w * y.w);

	mov	ecx, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR _y$[ebp]
	movsd	xmm2, QWORD PTR [ecx]
	movsd	xmm1, QWORD PTR [ecx+8]
	movsd	xmm0, QWORD PTR [ecx+16]
	mulsd	xmm2, QWORD PTR [eax]
	mulsd	xmm1, QWORD PTR [eax+8]
	mulsd	xmm0, QWORD PTR [eax+16]
	fld	QWORD PTR [ecx+24]
	fmul	QWORD PTR [eax+24]

; 18   : 			return (tmp.x + tmp.y) + (tmp.z + tmp.w);

	addsd	xmm1, xmm2
	movsd	QWORD PTR _tmp$[ebp+16], xmm0
	fadd	QWORD PTR _tmp$[ebp+16]
	movsd	QWORD PTR tv160[ebp], xmm1
	fadd	QWORD PTR tv160[ebp]

; 19   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?call@?$compute_dot@Utquat@glm@@N$00$0A@@detail@glm@@SANABU?$tquat@N$00@3@0@Z ENDP ; glm::detail::compute_dot<glm::tquat,double,1,0>::call
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ?call@?$compute_dot@Utquat@glm@@M$00$0A@@detail@glm@@SAMABU?$tquat@M$00@3@0@Z
_TEXT	SEGMENT
_tmp$ = -16						; size = 16
tv160 = 8						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?call@?$compute_dot@Utquat@glm@@M$00$0A@@detail@glm@@SAMABU?$tquat@M$00@3@0@Z PROC ; glm::detail::compute_dot<glm::tquat,float,1,0>::call, COMDAT

; 16   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 17   : 			tvec4<T, P> tmp(x.x * y.x, x.y * y.y, x.z * y.z, x.w * y.w);

	mov	ecx, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR _y$[ebp]
	fld	DWORD PTR [ecx+12]
	fmul	DWORD PTR [eax+12]
	movss	xmm2, DWORD PTR [ecx]
	movss	xmm1, DWORD PTR [ecx+4]
	movss	xmm0, DWORD PTR [ecx+8]
	mulss	xmm2, DWORD PTR [eax]
	mulss	xmm1, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR [eax+8]
	fstp	DWORD PTR _tmp$[ebp+12]

; 18   : 			return (tmp.x + tmp.y) + (tmp.z + tmp.w);

	fld	DWORD PTR _tmp$[ebp+12]
	addss	xmm1, xmm2
	movss	DWORD PTR _tmp$[ebp+8], xmm0
	fadd	DWORD PTR _tmp$[ebp+8]
	movss	DWORD PTR tv160[ebp], xmm1
	fadd	DWORD PTR tv160[ebp]

; 19   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?call@?$compute_dot@Utquat@glm@@M$00$0A@@detail@glm@@SAMABU?$tquat@M$00@3@0@Z ENDP ; glm::detail::compute_dot<glm::tquat,float,1,0>::call
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ?call@?$compute_dot@Utquat@glm@@N$01$0A@@detail@glm@@SANABU?$tquat@N$01@3@0@Z
_TEXT	SEGMENT
_tmp$ = -40						; size = 32
tv160 = -8						; size = 8
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?call@?$compute_dot@Utquat@glm@@N$01$0A@@detail@glm@@SANABU?$tquat@N$01@3@0@Z PROC ; glm::detail::compute_dot<glm::tquat,double,2,0>::call, COMDAT

; 16   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H

; 17   : 			tvec4<T, P> tmp(x.x * y.x, x.y * y.y, x.z * y.z, x.w * y.w);

	mov	ecx, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR _y$[ebp]
	movsd	xmm2, QWORD PTR [ecx]
	movsd	xmm1, QWORD PTR [ecx+8]
	movsd	xmm0, QWORD PTR [ecx+16]
	mulsd	xmm2, QWORD PTR [eax]
	mulsd	xmm1, QWORD PTR [eax+8]
	mulsd	xmm0, QWORD PTR [eax+16]
	fld	QWORD PTR [ecx+24]
	fmul	QWORD PTR [eax+24]

; 18   : 			return (tmp.x + tmp.y) + (tmp.z + tmp.w);

	addsd	xmm1, xmm2
	movsd	QWORD PTR _tmp$[ebp+16], xmm0
	fadd	QWORD PTR _tmp$[ebp+16]
	movsd	QWORD PTR tv160[ebp], xmm1
	fadd	QWORD PTR tv160[ebp]

; 19   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?call@?$compute_dot@Utquat@glm@@N$01$0A@@detail@glm@@SANABU?$tquat@N$01@3@0@Z ENDP ; glm::detail::compute_dot<glm::tquat,double,2,0>::call
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ?call@?$compute_dot@Utquat@glm@@M$01$0A@@detail@glm@@SAMABU?$tquat@M$01@3@0@Z
_TEXT	SEGMENT
_tmp$ = -16						; size = 16
tv160 = 8						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?call@?$compute_dot@Utquat@glm@@M$01$0A@@detail@glm@@SAMABU?$tquat@M$01@3@0@Z PROC ; glm::detail::compute_dot<glm::tquat,float,2,0>::call, COMDAT

; 16   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 17   : 			tvec4<T, P> tmp(x.x * y.x, x.y * y.y, x.z * y.z, x.w * y.w);

	mov	ecx, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR _y$[ebp]
	fld	DWORD PTR [ecx+12]
	fmul	DWORD PTR [eax+12]
	movss	xmm2, DWORD PTR [ecx]
	movss	xmm1, DWORD PTR [ecx+4]
	movss	xmm0, DWORD PTR [ecx+8]
	mulss	xmm2, DWORD PTR [eax]
	mulss	xmm1, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR [eax+8]
	fstp	DWORD PTR _tmp$[ebp+12]

; 18   : 			return (tmp.x + tmp.y) + (tmp.z + tmp.w);

	fld	DWORD PTR _tmp$[ebp+12]
	addss	xmm1, xmm2
	movss	DWORD PTR _tmp$[ebp+8], xmm0
	fadd	DWORD PTR _tmp$[ebp+8]
	movss	DWORD PTR tv160[ebp], xmm1
	fadd	DWORD PTR tv160[ebp]

; 19   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?call@?$compute_dot@Utquat@glm@@M$01$0A@@detail@glm@@SAMABU?$tquat@M$01@3@0@Z ENDP ; glm::detail::compute_dot<glm::tquat,float,2,0>::call
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\func_geometric.inl
;	COMDAT ??$dot@N$0A@Utquat@glm@@@glm@@YANABU?$tquat@N$0A@@0@0@Z
_TEXT	SEGMENT
_tmp$1 = -40						; size = 32
tv160 = -8						; size = 8
_x$ = 8							; size = 4
_y$ = 12						; size = 4
??$dot@N$0A@Utquat@glm@@@glm@@YANABU?$tquat@N$0A@@0@0@Z PROC ; glm::dot<double,0,glm::tquat>, COMDAT

; 172  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H

; 173  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'dot' accepts only floating-point inputs");
; 174  : 		return detail::compute_dot<vecType, T, P, detail::is_aligned<P>::value>::call(x, y);

	mov	ecx, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR _y$[ebp]
	movsd	xmm2, QWORD PTR [ecx]
	movsd	xmm1, QWORD PTR [ecx+8]
	movsd	xmm0, QWORD PTR [ecx+16]
	mulsd	xmm2, QWORD PTR [eax]
	mulsd	xmm1, QWORD PTR [eax+8]
	mulsd	xmm0, QWORD PTR [eax+16]
	fld	QWORD PTR [ecx+24]
	fmul	QWORD PTR [eax+24]
	addsd	xmm1, xmm2
	movsd	QWORD PTR _tmp$1[ebp+16], xmm0
	fadd	QWORD PTR _tmp$1[ebp+16]
	movsd	QWORD PTR tv160[ebp], xmm1
	fadd	QWORD PTR tv160[ebp]

; 175  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$dot@N$0A@Utquat@glm@@@glm@@YANABU?$tquat@N$0A@@0@0@Z ENDP ; glm::dot<double,0,glm::tquat>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\func_geometric.inl
;	COMDAT ??$dot@M$0A@Utquat@glm@@@glm@@YAMABU?$tquat@M$0A@@0@0@Z
_TEXT	SEGMENT
_tmp$1 = -16						; size = 16
tv160 = 8						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
??$dot@M$0A@Utquat@glm@@@glm@@YAMABU?$tquat@M$0A@@0@0@Z PROC ; glm::dot<float,0,glm::tquat>, COMDAT

; 172  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 173  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'dot' accepts only floating-point inputs");
; 174  : 		return detail::compute_dot<vecType, T, P, detail::is_aligned<P>::value>::call(x, y);

	mov	ecx, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR _y$[ebp]
	fld	DWORD PTR [ecx+12]
	fmul	DWORD PTR [eax+12]
	movss	xmm2, DWORD PTR [ecx]
	movss	xmm1, DWORD PTR [ecx+4]
	movss	xmm0, DWORD PTR [ecx+8]
	mulss	xmm2, DWORD PTR [eax]
	mulss	xmm1, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR [eax+8]
	fstp	DWORD PTR _tmp$1[ebp+12]
	fld	DWORD PTR _tmp$1[ebp+12]
	addss	xmm1, xmm2
	movss	DWORD PTR _tmp$1[ebp+8], xmm0
	fadd	DWORD PTR _tmp$1[ebp+8]
	movss	DWORD PTR tv160[ebp], xmm1
	fadd	DWORD PTR tv160[ebp]

; 175  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$dot@M$0A@Utquat@glm@@@glm@@YAMABU?$tquat@M$0A@@0@0@Z ENDP ; glm::dot<float,0,glm::tquat>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\func_geometric.inl
;	COMDAT ??$dot@N$00Utquat@glm@@@glm@@YANABU?$tquat@N$00@0@0@Z
_TEXT	SEGMENT
_tmp$1 = -40						; size = 32
tv160 = -8						; size = 8
_x$ = 8							; size = 4
_y$ = 12						; size = 4
??$dot@N$00Utquat@glm@@@glm@@YANABU?$tquat@N$00@0@0@Z PROC ; glm::dot<double,1,glm::tquat>, COMDAT

; 172  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H

; 173  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'dot' accepts only floating-point inputs");
; 174  : 		return detail::compute_dot<vecType, T, P, detail::is_aligned<P>::value>::call(x, y);

	mov	ecx, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR _y$[ebp]
	movsd	xmm2, QWORD PTR [ecx]
	movsd	xmm1, QWORD PTR [ecx+8]
	movsd	xmm0, QWORD PTR [ecx+16]
	mulsd	xmm2, QWORD PTR [eax]
	mulsd	xmm1, QWORD PTR [eax+8]
	mulsd	xmm0, QWORD PTR [eax+16]
	fld	QWORD PTR [ecx+24]
	fmul	QWORD PTR [eax+24]
	addsd	xmm1, xmm2
	movsd	QWORD PTR _tmp$1[ebp+16], xmm0
	fadd	QWORD PTR _tmp$1[ebp+16]
	movsd	QWORD PTR tv160[ebp], xmm1
	fadd	QWORD PTR tv160[ebp]

; 175  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$dot@N$00Utquat@glm@@@glm@@YANABU?$tquat@N$00@0@0@Z ENDP ; glm::dot<double,1,glm::tquat>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\func_geometric.inl
;	COMDAT ??$dot@M$00Utquat@glm@@@glm@@YAMABU?$tquat@M$00@0@0@Z
_TEXT	SEGMENT
_tmp$1 = -16						; size = 16
tv160 = 8						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
??$dot@M$00Utquat@glm@@@glm@@YAMABU?$tquat@M$00@0@0@Z PROC ; glm::dot<float,1,glm::tquat>, COMDAT

; 172  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 173  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'dot' accepts only floating-point inputs");
; 174  : 		return detail::compute_dot<vecType, T, P, detail::is_aligned<P>::value>::call(x, y);

	mov	ecx, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR _y$[ebp]
	fld	DWORD PTR [ecx+12]
	fmul	DWORD PTR [eax+12]
	movss	xmm2, DWORD PTR [ecx]
	movss	xmm1, DWORD PTR [ecx+4]
	movss	xmm0, DWORD PTR [ecx+8]
	mulss	xmm2, DWORD PTR [eax]
	mulss	xmm1, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR [eax+8]
	fstp	DWORD PTR _tmp$1[ebp+12]
	fld	DWORD PTR _tmp$1[ebp+12]
	addss	xmm1, xmm2
	movss	DWORD PTR _tmp$1[ebp+8], xmm0
	fadd	DWORD PTR _tmp$1[ebp+8]
	movss	DWORD PTR tv160[ebp], xmm1
	fadd	DWORD PTR tv160[ebp]

; 175  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$dot@M$00Utquat@glm@@@glm@@YAMABU?$tquat@M$00@0@0@Z ENDP ; glm::dot<float,1,glm::tquat>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\func_geometric.inl
;	COMDAT ??$dot@N$01Utquat@glm@@@glm@@YANABU?$tquat@N$01@0@0@Z
_TEXT	SEGMENT
_tmp$1 = -40						; size = 32
tv160 = -8						; size = 8
_x$ = 8							; size = 4
_y$ = 12						; size = 4
??$dot@N$01Utquat@glm@@@glm@@YANABU?$tquat@N$01@0@0@Z PROC ; glm::dot<double,2,glm::tquat>, COMDAT

; 172  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H

; 173  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'dot' accepts only floating-point inputs");
; 174  : 		return detail::compute_dot<vecType, T, P, detail::is_aligned<P>::value>::call(x, y);

	mov	ecx, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR _y$[ebp]
	movsd	xmm2, QWORD PTR [ecx]
	movsd	xmm1, QWORD PTR [ecx+8]
	movsd	xmm0, QWORD PTR [ecx+16]
	mulsd	xmm2, QWORD PTR [eax]
	mulsd	xmm1, QWORD PTR [eax+8]
	mulsd	xmm0, QWORD PTR [eax+16]
	fld	QWORD PTR [ecx+24]
	fmul	QWORD PTR [eax+24]
	addsd	xmm1, xmm2
	movsd	QWORD PTR _tmp$1[ebp+16], xmm0
	fadd	QWORD PTR _tmp$1[ebp+16]
	movsd	QWORD PTR tv160[ebp], xmm1
	fadd	QWORD PTR tv160[ebp]

; 175  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$dot@N$01Utquat@glm@@@glm@@YANABU?$tquat@N$01@0@0@Z ENDP ; glm::dot<double,2,glm::tquat>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\func_geometric.inl
;	COMDAT ??$dot@M$01Utquat@glm@@@glm@@YAMABU?$tquat@M$01@0@0@Z
_TEXT	SEGMENT
_tmp$1 = -16						; size = 16
tv160 = 8						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
??$dot@M$01Utquat@glm@@@glm@@YAMABU?$tquat@M$01@0@0@Z PROC ; glm::dot<float,2,glm::tquat>, COMDAT

; 172  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 173  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'dot' accepts only floating-point inputs");
; 174  : 		return detail::compute_dot<vecType, T, P, detail::is_aligned<P>::value>::call(x, y);

	mov	ecx, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR _y$[ebp]
	fld	DWORD PTR [ecx+12]
	fmul	DWORD PTR [eax+12]
	movss	xmm2, DWORD PTR [ecx]
	movss	xmm1, DWORD PTR [ecx+4]
	movss	xmm0, DWORD PTR [ecx+8]
	mulss	xmm2, DWORD PTR [eax]
	mulss	xmm1, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR [eax+8]
	fstp	DWORD PTR _tmp$1[ebp+12]
	fld	DWORD PTR _tmp$1[ebp+12]
	addss	xmm1, xmm2
	movss	DWORD PTR _tmp$1[ebp+8], xmm0
	fadd	DWORD PTR _tmp$1[ebp+8]
	movss	DWORD PTR tv160[ebp], xmm1
	fadd	DWORD PTR tv160[ebp]

; 175  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$dot@M$01Utquat@glm@@@glm@@YAMABU?$tquat@M$01@0@0@Z ENDP ; glm::dot<float,2,glm::tquat>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??$length@N$0A@@glm@@YANABU?$tquat@N$0A@@0@@Z
_TEXT	SEGMENT
_q$ = 8							; size = 4
??$length@N$0A@@glm@@YANABU?$tquat@N$0A@@0@@Z PROC	; glm::length<double,0>, COMDAT

; 374  : 	{

	push	ebp
	mov	ebp, esp

; 375  : 		return glm::sqrt(dot(q, q));

	mov	eax, DWORD PTR _q$[ebp]
	push	ecx
	push	ecx
	movsd	xmm3, QWORD PTR [eax]
	movsd	xmm2, QWORD PTR [eax+8]
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	xmm1, QWORD PTR [eax+24]
	mulsd	xmm1, xmm1
	mulsd	xmm3, xmm3
	mulsd	xmm2, xmm2
	mulsd	xmm0, xmm0
	addsd	xmm2, xmm3
	addsd	xmm1, xmm0
	addsd	xmm1, xmm2
	movsd	QWORD PTR [esp], xmm1
	call	_sqrt
	pop	ecx
	pop	ecx

; 376  : 	}

	pop	ebp
	ret	0
??$length@N$0A@@glm@@YANABU?$tquat@N$0A@@0@@Z ENDP	; glm::length<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_cross@N$0A@$0A@@detail@glm@@SA?AU?$tvec3@N$0A@@3@ABU43@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
?call@?$compute_cross@N$0A@$0A@@detail@glm@@SA?AU?$tvec3@N$0A@@3@ABU43@0@Z PROC ; glm::detail::compute_cross<double,0,0>::call, COMDAT

; 77   : 		{

	push	ebp
	mov	ebp, esp

; 78   : 			GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'cross' accepts only floating-point inputs");
; 79   : 
; 80   : 			return tvec3<T, P>(
; 81   : 				x.y * y.z - y.y * x.z,
; 82   : 				x.z * y.x - y.z * x.x,
; 83   : 				x.x * y.y - y.x * x.y);

	mov	ecx, DWORD PTR _y$[ebp]
	mov	edx, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movsd	xmm1, QWORD PTR [ecx+16]
	mulsd	xmm1, QWORD PTR [edx+8]
	movsd	xmm0, QWORD PTR [ecx+8]
	mulsd	xmm0, QWORD PTR [edx+16]
	movsd	xmm3, QWORD PTR [ecx]
	movsd	xmm2, QWORD PTR [edx]
	subsd	xmm1, xmm0
	movaps	xmm0, xmm2
	mulsd	xmm0, QWORD PTR [ecx+16]
	mulsd	xmm2, QWORD PTR [ecx+8]
	movsd	QWORD PTR [eax], xmm1
	movaps	xmm1, xmm3
	mulsd	xmm1, QWORD PTR [edx+16]
	mulsd	xmm3, QWORD PTR [edx+8]
	subsd	xmm1, xmm0
	subsd	xmm2, xmm3
	movsd	QWORD PTR [eax+8], xmm1
	movsd	QWORD PTR [eax+16], xmm2

; 84   : 		}

	pop	ebp
	ret	0
?call@?$compute_cross@N$0A@$0A@@detail@glm@@SA?AU?$tvec3@N$0A@@3@ABU43@0@Z ENDP ; glm::detail::compute_cross<double,0,0>::call
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor1@NN$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@N$0A@@3@P6ANN@ZABU43@@Z
_TEXT	SEGMENT
_c$ = -24						; size = 8
_b$ = -16						; size = 8
_a$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
_Func$ = 12						; size = 4
_v$ = 16						; size = 4
?call@?$functor1@NN$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@N$0A@@3@P6ANN@ZABU43@@Z PROC ; glm::detail::functor1<double,double,0,glm::tvec3>::call, COMDAT

; 39   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi

; 40   : 			return tvec3<R, P>(Func(v.x), Func(v.y), Func(v.z));

	mov	esi, DWORD PTR _v$[ebp]
	push	ecx
	push	ecx
	movsd	xmm0, QWORD PTR [esi]
	movsd	QWORD PTR [esp], xmm0
	call	DWORD PTR _Func$[ebp]
	movsd	xmm0, QWORD PTR [esi+8]
	fstp	QWORD PTR _a$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	DWORD PTR _Func$[ebp]
	movsd	xmm0, QWORD PTR [esi+16]
	fstp	QWORD PTR _b$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	DWORD PTR _Func$[ebp]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movsd	xmm0, QWORD PTR _a$[ebp]
	pop	ecx
	fstp	QWORD PTR _c$[ebp]
	movsd	QWORD PTR [eax], xmm0
	movsd	xmm0, QWORD PTR _b$[ebp]
	movsd	QWORD PTR [eax+8], xmm0
	movsd	xmm0, QWORD PTR _c$[ebp]
	pop	ecx
	movsd	QWORD PTR [eax+16], xmm0
	pop	esi

; 41   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?call@?$functor1@NN$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@N$0A@@3@P6ANN@ZABU43@@Z ENDP ; glm::detail::functor1<double,double,0,glm::tvec3>::call
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??$length@M$0A@@glm@@YAMABU?$tquat@M$0A@@0@@Z
_TEXT	SEGMENT
tv167 = 8						; size = 4
_q$ = 8							; size = 4
??$length@M$0A@@glm@@YAMABU?$tquat@M$0A@@0@@Z PROC	; glm::length<float,0>, COMDAT

; 374  : 	{

	push	ebp
	mov	ebp, esp

; 375  : 		return glm::sqrt(dot(q, q));

	mov	eax, DWORD PTR _q$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR [eax+12]
	movss	xmm3, DWORD PTR [eax]
	movss	xmm2, DWORD PTR [eax+4]
	movss	xmm1, DWORD PTR [eax+8]
	mulss	xmm0, xmm0
	mulss	xmm3, xmm3
	mulss	xmm2, xmm2
	mulss	xmm1, xmm1
	addss	xmm2, xmm3
	addss	xmm0, xmm1
	addss	xmm0, xmm2
	cvtps2pd xmm0, xmm0
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	fstp	DWORD PTR tv167[ebp]
	fld	DWORD PTR tv167[ebp]
	pop	ecx
	pop	ecx

; 376  : 	}

	pop	ebp
	ret	0
??$length@M$0A@@glm@@YAMABU?$tquat@M$0A@@0@@Z ENDP	; glm::length<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_cross@M$0A@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@ABU43@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
?call@?$compute_cross@M$0A@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@ABU43@0@Z PROC ; glm::detail::compute_cross<float,0,0>::call, COMDAT

; 77   : 		{

	push	ebp
	mov	ebp, esp

; 78   : 			GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'cross' accepts only floating-point inputs");
; 79   : 
; 80   : 			return tvec3<T, P>(
; 81   : 				x.y * y.z - y.y * x.z,
; 82   : 				x.z * y.x - y.z * x.x,
; 83   : 				x.x * y.y - y.x * x.y);

	mov	ecx, DWORD PTR _y$[ebp]
	mov	edx, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movss	xmm1, DWORD PTR [ecx+8]
	mulss	xmm1, DWORD PTR [edx+4]
	movss	xmm0, DWORD PTR [ecx+4]
	mulss	xmm0, DWORD PTR [edx+8]
	movss	xmm3, DWORD PTR [ecx]
	movss	xmm2, DWORD PTR [edx]
	subss	xmm1, xmm0
	movaps	xmm0, xmm2
	mulss	xmm0, DWORD PTR [ecx+8]
	mulss	xmm2, DWORD PTR [ecx+4]
	movss	DWORD PTR [eax], xmm1
	movaps	xmm1, xmm3
	mulss	xmm1, DWORD PTR [edx+8]
	mulss	xmm3, DWORD PTR [edx+4]
	subss	xmm1, xmm0
	subss	xmm2, xmm3
	movss	DWORD PTR [eax+4], xmm1
	movss	DWORD PTR [eax+8], xmm2

; 84   : 		}

	pop	ebp
	ret	0
?call@?$compute_cross@M$0A@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@ABU43@0@Z ENDP ; glm::detail::compute_cross<float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor1@MM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMM@ZABU43@@Z
_TEXT	SEGMENT
_b$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_c$ = 12						; size = 4
_Func$ = 12						; size = 4
_a$ = 16						; size = 4
_v$ = 16						; size = 4
?call@?$functor1@MM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMM@ZABU43@@Z PROC ; glm::detail::functor1<float,float,0,glm::tvec3>::call, COMDAT

; 39   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi

; 40   : 			return tvec3<R, P>(Func(v.x), Func(v.y), Func(v.z));

	mov	esi, DWORD PTR _v$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [esi]
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _Func$[ebp]
	movss	xmm0, DWORD PTR [esi+4]
	fstp	DWORD PTR _a$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _Func$[ebp]
	movss	xmm0, DWORD PTR [esi+8]
	fstp	DWORD PTR _b$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _Func$[ebp]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movss	xmm0, DWORD PTR _a$[ebp]
	fstp	DWORD PTR _c$[ebp]
	pop	ecx
	movss	DWORD PTR [eax], xmm0
	movss	xmm0, DWORD PTR _b$[ebp]
	movss	DWORD PTR [eax+4], xmm0
	movss	xmm0, DWORD PTR _c$[ebp]
	movss	DWORD PTR [eax+8], xmm0
	pop	esi

; 41   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?call@?$functor1@MM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMM@ZABU43@@Z ENDP ; glm::detail::functor1<float,float,0,glm::tvec3>::call
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??$length@N$00@glm@@YANABU?$tquat@N$00@0@@Z
_TEXT	SEGMENT
_q$ = 8							; size = 4
??$length@N$00@glm@@YANABU?$tquat@N$00@0@@Z PROC	; glm::length<double,1>, COMDAT

; 374  : 	{

	push	ebp
	mov	ebp, esp

; 375  : 		return glm::sqrt(dot(q, q));

	mov	eax, DWORD PTR _q$[ebp]
	push	ecx
	push	ecx
	movsd	xmm3, QWORD PTR [eax]
	movsd	xmm2, QWORD PTR [eax+8]
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	xmm1, QWORD PTR [eax+24]
	mulsd	xmm1, xmm1
	mulsd	xmm3, xmm3
	mulsd	xmm2, xmm2
	mulsd	xmm0, xmm0
	addsd	xmm2, xmm3
	addsd	xmm1, xmm0
	addsd	xmm1, xmm2
	movsd	QWORD PTR [esp], xmm1
	call	_sqrt
	pop	ecx
	pop	ecx

; 376  : 	}

	pop	ebp
	ret	0
??$length@N$00@glm@@YANABU?$tquat@N$00@0@@Z ENDP	; glm::length<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_cross@N$00$0A@@detail@glm@@SA?AU?$tvec3@N$00@3@ABU43@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
?call@?$compute_cross@N$00$0A@@detail@glm@@SA?AU?$tvec3@N$00@3@ABU43@0@Z PROC ; glm::detail::compute_cross<double,1,0>::call, COMDAT

; 77   : 		{

	push	ebp
	mov	ebp, esp

; 78   : 			GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'cross' accepts only floating-point inputs");
; 79   : 
; 80   : 			return tvec3<T, P>(
; 81   : 				x.y * y.z - y.y * x.z,
; 82   : 				x.z * y.x - y.z * x.x,
; 83   : 				x.x * y.y - y.x * x.y);

	mov	ecx, DWORD PTR _y$[ebp]
	mov	edx, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movsd	xmm1, QWORD PTR [ecx+16]
	mulsd	xmm1, QWORD PTR [edx+8]
	movsd	xmm0, QWORD PTR [ecx+8]
	mulsd	xmm0, QWORD PTR [edx+16]
	movsd	xmm3, QWORD PTR [ecx]
	movsd	xmm2, QWORD PTR [edx]
	subsd	xmm1, xmm0
	movaps	xmm0, xmm2
	mulsd	xmm0, QWORD PTR [ecx+16]
	mulsd	xmm2, QWORD PTR [ecx+8]
	movsd	QWORD PTR [eax], xmm1
	movaps	xmm1, xmm3
	mulsd	xmm1, QWORD PTR [edx+16]
	mulsd	xmm3, QWORD PTR [edx+8]
	subsd	xmm1, xmm0
	subsd	xmm2, xmm3
	movsd	QWORD PTR [eax+8], xmm1
	movsd	QWORD PTR [eax+16], xmm2

; 84   : 		}

	pop	ebp
	ret	0
?call@?$compute_cross@N$00$0A@@detail@glm@@SA?AU?$tvec3@N$00@3@ABU43@0@Z ENDP ; glm::detail::compute_cross<double,1,0>::call
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor1@NN$00Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@N$00@3@P6ANN@ZABU43@@Z
_TEXT	SEGMENT
_c$ = -24						; size = 8
_b$ = -16						; size = 8
_a$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
_Func$ = 12						; size = 4
_v$ = 16						; size = 4
?call@?$functor1@NN$00Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@N$00@3@P6ANN@ZABU43@@Z PROC ; glm::detail::functor1<double,double,1,glm::tvec3>::call, COMDAT

; 39   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi

; 40   : 			return tvec3<R, P>(Func(v.x), Func(v.y), Func(v.z));

	mov	esi, DWORD PTR _v$[ebp]
	push	ecx
	push	ecx
	movsd	xmm0, QWORD PTR [esi]
	movsd	QWORD PTR [esp], xmm0
	call	DWORD PTR _Func$[ebp]
	movsd	xmm0, QWORD PTR [esi+8]
	fstp	QWORD PTR _a$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	DWORD PTR _Func$[ebp]
	movsd	xmm0, QWORD PTR [esi+16]
	fstp	QWORD PTR _b$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	DWORD PTR _Func$[ebp]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movsd	xmm0, QWORD PTR _a$[ebp]
	pop	ecx
	fstp	QWORD PTR _c$[ebp]
	movsd	QWORD PTR [eax], xmm0
	movsd	xmm0, QWORD PTR _b$[ebp]
	movsd	QWORD PTR [eax+8], xmm0
	movsd	xmm0, QWORD PTR _c$[ebp]
	pop	ecx
	movsd	QWORD PTR [eax+16], xmm0
	pop	esi

; 41   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?call@?$functor1@NN$00Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@N$00@3@P6ANN@ZABU43@@Z ENDP ; glm::detail::functor1<double,double,1,glm::tvec3>::call
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??$length@M$00@glm@@YAMABU?$tquat@M$00@0@@Z
_TEXT	SEGMENT
tv167 = 8						; size = 4
_q$ = 8							; size = 4
??$length@M$00@glm@@YAMABU?$tquat@M$00@0@@Z PROC	; glm::length<float,1>, COMDAT

; 374  : 	{

	push	ebp
	mov	ebp, esp

; 375  : 		return glm::sqrt(dot(q, q));

	mov	eax, DWORD PTR _q$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR [eax+12]
	movss	xmm3, DWORD PTR [eax]
	movss	xmm2, DWORD PTR [eax+4]
	movss	xmm1, DWORD PTR [eax+8]
	mulss	xmm0, xmm0
	mulss	xmm3, xmm3
	mulss	xmm2, xmm2
	mulss	xmm1, xmm1
	addss	xmm2, xmm3
	addss	xmm0, xmm1
	addss	xmm0, xmm2
	cvtps2pd xmm0, xmm0
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	fstp	DWORD PTR tv167[ebp]
	fld	DWORD PTR tv167[ebp]
	pop	ecx
	pop	ecx

; 376  : 	}

	pop	ebp
	ret	0
??$length@M$00@glm@@YAMABU?$tquat@M$00@0@@Z ENDP	; glm::length<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_cross@M$00$0A@@detail@glm@@SA?AU?$tvec3@M$00@3@ABU43@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
?call@?$compute_cross@M$00$0A@@detail@glm@@SA?AU?$tvec3@M$00@3@ABU43@0@Z PROC ; glm::detail::compute_cross<float,1,0>::call, COMDAT

; 77   : 		{

	push	ebp
	mov	ebp, esp

; 78   : 			GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'cross' accepts only floating-point inputs");
; 79   : 
; 80   : 			return tvec3<T, P>(
; 81   : 				x.y * y.z - y.y * x.z,
; 82   : 				x.z * y.x - y.z * x.x,
; 83   : 				x.x * y.y - y.x * x.y);

	mov	ecx, DWORD PTR _y$[ebp]
	mov	edx, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movss	xmm1, DWORD PTR [ecx+8]
	mulss	xmm1, DWORD PTR [edx+4]
	movss	xmm0, DWORD PTR [ecx+4]
	mulss	xmm0, DWORD PTR [edx+8]
	movss	xmm3, DWORD PTR [ecx]
	movss	xmm2, DWORD PTR [edx]
	subss	xmm1, xmm0
	movaps	xmm0, xmm2
	mulss	xmm0, DWORD PTR [ecx+8]
	mulss	xmm2, DWORD PTR [ecx+4]
	movss	DWORD PTR [eax], xmm1
	movaps	xmm1, xmm3
	mulss	xmm1, DWORD PTR [edx+8]
	mulss	xmm3, DWORD PTR [edx+4]
	subss	xmm1, xmm0
	subss	xmm2, xmm3
	movss	DWORD PTR [eax+4], xmm1
	movss	DWORD PTR [eax+8], xmm2

; 84   : 		}

	pop	ebp
	ret	0
?call@?$compute_cross@M$00$0A@@detail@glm@@SA?AU?$tvec3@M$00@3@ABU43@0@Z ENDP ; glm::detail::compute_cross<float,1,0>::call
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor1@MM$00Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$00@3@P6AMM@ZABU43@@Z
_TEXT	SEGMENT
_b$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_c$ = 12						; size = 4
_Func$ = 12						; size = 4
_a$ = 16						; size = 4
_v$ = 16						; size = 4
?call@?$functor1@MM$00Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$00@3@P6AMM@ZABU43@@Z PROC ; glm::detail::functor1<float,float,1,glm::tvec3>::call, COMDAT

; 39   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi

; 40   : 			return tvec3<R, P>(Func(v.x), Func(v.y), Func(v.z));

	mov	esi, DWORD PTR _v$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [esi]
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _Func$[ebp]
	movss	xmm0, DWORD PTR [esi+4]
	fstp	DWORD PTR _a$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _Func$[ebp]
	movss	xmm0, DWORD PTR [esi+8]
	fstp	DWORD PTR _b$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _Func$[ebp]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movss	xmm0, DWORD PTR _a$[ebp]
	fstp	DWORD PTR _c$[ebp]
	pop	ecx
	movss	DWORD PTR [eax], xmm0
	movss	xmm0, DWORD PTR _b$[ebp]
	movss	DWORD PTR [eax+4], xmm0
	movss	xmm0, DWORD PTR _c$[ebp]
	movss	DWORD PTR [eax+8], xmm0
	pop	esi

; 41   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?call@?$functor1@MM$00Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$00@3@P6AMM@ZABU43@@Z ENDP ; glm::detail::functor1<float,float,1,glm::tvec3>::call
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??$length@N$01@glm@@YANABU?$tquat@N$01@0@@Z
_TEXT	SEGMENT
_q$ = 8							; size = 4
??$length@N$01@glm@@YANABU?$tquat@N$01@0@@Z PROC	; glm::length<double,2>, COMDAT

; 374  : 	{

	push	ebp
	mov	ebp, esp

; 375  : 		return glm::sqrt(dot(q, q));

	mov	eax, DWORD PTR _q$[ebp]
	push	ecx
	push	ecx
	movsd	xmm3, QWORD PTR [eax]
	movsd	xmm2, QWORD PTR [eax+8]
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	xmm1, QWORD PTR [eax+24]
	mulsd	xmm1, xmm1
	mulsd	xmm3, xmm3
	mulsd	xmm2, xmm2
	mulsd	xmm0, xmm0
	addsd	xmm2, xmm3
	addsd	xmm1, xmm0
	addsd	xmm1, xmm2
	movsd	QWORD PTR [esp], xmm1
	call	_sqrt
	pop	ecx
	pop	ecx

; 376  : 	}

	pop	ebp
	ret	0
??$length@N$01@glm@@YANABU?$tquat@N$01@0@@Z ENDP	; glm::length<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_cross@N$01$0A@@detail@glm@@SA?AU?$tvec3@N$01@3@ABU43@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
?call@?$compute_cross@N$01$0A@@detail@glm@@SA?AU?$tvec3@N$01@3@ABU43@0@Z PROC ; glm::detail::compute_cross<double,2,0>::call, COMDAT

; 77   : 		{

	push	ebp
	mov	ebp, esp

; 78   : 			GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'cross' accepts only floating-point inputs");
; 79   : 
; 80   : 			return tvec3<T, P>(
; 81   : 				x.y * y.z - y.y * x.z,
; 82   : 				x.z * y.x - y.z * x.x,
; 83   : 				x.x * y.y - y.x * x.y);

	mov	ecx, DWORD PTR _y$[ebp]
	mov	edx, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movsd	xmm1, QWORD PTR [ecx+16]
	mulsd	xmm1, QWORD PTR [edx+8]
	movsd	xmm0, QWORD PTR [ecx+8]
	mulsd	xmm0, QWORD PTR [edx+16]
	movsd	xmm3, QWORD PTR [ecx]
	movsd	xmm2, QWORD PTR [edx]
	subsd	xmm1, xmm0
	movaps	xmm0, xmm2
	mulsd	xmm0, QWORD PTR [ecx+16]
	mulsd	xmm2, QWORD PTR [ecx+8]
	movsd	QWORD PTR [eax], xmm1
	movaps	xmm1, xmm3
	mulsd	xmm1, QWORD PTR [edx+16]
	mulsd	xmm3, QWORD PTR [edx+8]
	subsd	xmm1, xmm0
	subsd	xmm2, xmm3
	movsd	QWORD PTR [eax+8], xmm1
	movsd	QWORD PTR [eax+16], xmm2

; 84   : 		}

	pop	ebp
	ret	0
?call@?$compute_cross@N$01$0A@@detail@glm@@SA?AU?$tvec3@N$01@3@ABU43@0@Z ENDP ; glm::detail::compute_cross<double,2,0>::call
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor1@NN$01Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@N$01@3@P6ANN@ZABU43@@Z
_TEXT	SEGMENT
_c$ = -24						; size = 8
_b$ = -16						; size = 8
_a$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
_Func$ = 12						; size = 4
_v$ = 16						; size = 4
?call@?$functor1@NN$01Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@N$01@3@P6ANN@ZABU43@@Z PROC ; glm::detail::functor1<double,double,2,glm::tvec3>::call, COMDAT

; 39   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi

; 40   : 			return tvec3<R, P>(Func(v.x), Func(v.y), Func(v.z));

	mov	esi, DWORD PTR _v$[ebp]
	push	ecx
	push	ecx
	movsd	xmm0, QWORD PTR [esi]
	movsd	QWORD PTR [esp], xmm0
	call	DWORD PTR _Func$[ebp]
	movsd	xmm0, QWORD PTR [esi+8]
	fstp	QWORD PTR _a$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	DWORD PTR _Func$[ebp]
	movsd	xmm0, QWORD PTR [esi+16]
	fstp	QWORD PTR _b$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	DWORD PTR _Func$[ebp]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movsd	xmm0, QWORD PTR _a$[ebp]
	pop	ecx
	fstp	QWORD PTR _c$[ebp]
	movsd	QWORD PTR [eax], xmm0
	movsd	xmm0, QWORD PTR _b$[ebp]
	movsd	QWORD PTR [eax+8], xmm0
	movsd	xmm0, QWORD PTR _c$[ebp]
	pop	ecx
	movsd	QWORD PTR [eax+16], xmm0
	pop	esi

; 41   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?call@?$functor1@NN$01Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@N$01@3@P6ANN@ZABU43@@Z ENDP ; glm::detail::functor1<double,double,2,glm::tvec3>::call
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??$length@M$01@glm@@YAMABU?$tquat@M$01@0@@Z
_TEXT	SEGMENT
tv167 = 8						; size = 4
_q$ = 8							; size = 4
??$length@M$01@glm@@YAMABU?$tquat@M$01@0@@Z PROC	; glm::length<float,2>, COMDAT

; 374  : 	{

	push	ebp
	mov	ebp, esp

; 375  : 		return glm::sqrt(dot(q, q));

	mov	eax, DWORD PTR _q$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR [eax+12]
	movss	xmm3, DWORD PTR [eax]
	movss	xmm2, DWORD PTR [eax+4]
	movss	xmm1, DWORD PTR [eax+8]
	mulss	xmm0, xmm0
	mulss	xmm3, xmm3
	mulss	xmm2, xmm2
	mulss	xmm1, xmm1
	addss	xmm2, xmm3
	addss	xmm0, xmm1
	addss	xmm0, xmm2
	cvtps2pd xmm0, xmm0
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	fstp	DWORD PTR tv167[ebp]
	fld	DWORD PTR tv167[ebp]
	pop	ecx
	pop	ecx

; 376  : 	}

	pop	ebp
	ret	0
??$length@M$01@glm@@YAMABU?$tquat@M$01@0@@Z ENDP	; glm::length<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_cross@M$01$0A@@detail@glm@@SA?AU?$tvec3@M$01@3@ABU43@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
?call@?$compute_cross@M$01$0A@@detail@glm@@SA?AU?$tvec3@M$01@3@ABU43@0@Z PROC ; glm::detail::compute_cross<float,2,0>::call, COMDAT

; 77   : 		{

	push	ebp
	mov	ebp, esp

; 78   : 			GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'cross' accepts only floating-point inputs");
; 79   : 
; 80   : 			return tvec3<T, P>(
; 81   : 				x.y * y.z - y.y * x.z,
; 82   : 				x.z * y.x - y.z * x.x,
; 83   : 				x.x * y.y - y.x * x.y);

	mov	ecx, DWORD PTR _y$[ebp]
	mov	edx, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movss	xmm1, DWORD PTR [ecx+8]
	mulss	xmm1, DWORD PTR [edx+4]
	movss	xmm0, DWORD PTR [ecx+4]
	mulss	xmm0, DWORD PTR [edx+8]
	movss	xmm3, DWORD PTR [ecx]
	movss	xmm2, DWORD PTR [edx]
	subss	xmm1, xmm0
	movaps	xmm0, xmm2
	mulss	xmm0, DWORD PTR [ecx+8]
	mulss	xmm2, DWORD PTR [ecx+4]
	movss	DWORD PTR [eax], xmm1
	movaps	xmm1, xmm3
	mulss	xmm1, DWORD PTR [edx+8]
	mulss	xmm3, DWORD PTR [edx+4]
	subss	xmm1, xmm0
	subss	xmm2, xmm3
	movss	DWORD PTR [eax+4], xmm1
	movss	DWORD PTR [eax+8], xmm2

; 84   : 		}

	pop	ebp
	ret	0
?call@?$compute_cross@M$01$0A@@detail@glm@@SA?AU?$tvec3@M$01@3@ABU43@0@Z ENDP ; glm::detail::compute_cross<float,2,0>::call
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor1@MM$01Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$01@3@P6AMM@ZABU43@@Z
_TEXT	SEGMENT
_b$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_c$ = 12						; size = 4
_Func$ = 12						; size = 4
_a$ = 16						; size = 4
_v$ = 16						; size = 4
?call@?$functor1@MM$01Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$01@3@P6AMM@ZABU43@@Z PROC ; glm::detail::functor1<float,float,2,glm::tvec3>::call, COMDAT

; 39   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi

; 40   : 			return tvec3<R, P>(Func(v.x), Func(v.y), Func(v.z));

	mov	esi, DWORD PTR _v$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [esi]
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _Func$[ebp]
	movss	xmm0, DWORD PTR [esi+4]
	fstp	DWORD PTR _a$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _Func$[ebp]
	movss	xmm0, DWORD PTR [esi+8]
	fstp	DWORD PTR _b$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _Func$[ebp]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movss	xmm0, DWORD PTR _a$[ebp]
	fstp	DWORD PTR _c$[ebp]
	pop	ecx
	movss	DWORD PTR [eax], xmm0
	movss	xmm0, DWORD PTR _b$[ebp]
	movss	DWORD PTR [eax+4], xmm0
	movss	xmm0, DWORD PTR _c$[ebp]
	movss	DWORD PTR [eax+8], xmm0
	pop	esi

; 41   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?call@?$functor1@MM$01Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$01@3@P6AMM@ZABU43@@Z ENDP ; glm::detail::functor1<float,float,2,glm::tvec3>::call
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?DN$0A@@glm@@YA?AU?$tvec3@N$0A@@0@ABU10@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??$?DN$0A@@glm@@YA?AU?$tvec3@N$0A@@0@ABU10@0@Z PROC	; glm::operator*<double,0>, COMDAT

; 664  : 	{

	push	ebp
	mov	ebp, esp

; 665  : 		return tvec3<T, P>(
; 666  : 			v1.x * v2.x,
; 667  : 			v1.y * v2.y,
; 668  : 			v1.z * v2.z);

	mov	edx, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR _v2$[ebp]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movsd	xmm0, QWORD PTR [edx]
	mulsd	xmm0, QWORD PTR [ecx]
	movsd	QWORD PTR [eax], xmm0
	movsd	xmm0, QWORD PTR [edx+8]
	mulsd	xmm0, QWORD PTR [ecx+8]
	movsd	QWORD PTR [eax+8], xmm0
	movsd	xmm0, QWORD PTR [edx+16]
	mulsd	xmm0, QWORD PTR [ecx+16]
	movsd	QWORD PTR [eax+16], xmm0

; 669  : 	}

	pop	ebp
	ret	0
??$?DN$0A@@glm@@YA?AU?$tvec3@N$0A@@0@ABU10@0@Z ENDP	; glm::operator*<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@ABU10@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@ABU10@0@Z PROC	; glm::operator*<float,0>, COMDAT

; 664  : 	{

	push	ebp
	mov	ebp, esp

; 665  : 		return tvec3<T, P>(
; 666  : 			v1.x * v2.x,
; 667  : 			v1.y * v2.y,
; 668  : 			v1.z * v2.z);

	mov	edx, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR _v2$[ebp]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movss	xmm0, DWORD PTR [edx]
	mulss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR [eax], xmm0
	movss	xmm0, DWORD PTR [edx+4]
	mulss	xmm0, DWORD PTR [ecx+4]
	movss	DWORD PTR [eax+4], xmm0
	movss	xmm0, DWORD PTR [edx+8]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	DWORD PTR [eax+8], xmm0

; 669  : 	}

	pop	ebp
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@ABU10@0@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?DN$00@glm@@YA?AU?$tvec3@N$00@0@ABU10@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??$?DN$00@glm@@YA?AU?$tvec3@N$00@0@ABU10@0@Z PROC	; glm::operator*<double,1>, COMDAT

; 664  : 	{

	push	ebp
	mov	ebp, esp

; 665  : 		return tvec3<T, P>(
; 666  : 			v1.x * v2.x,
; 667  : 			v1.y * v2.y,
; 668  : 			v1.z * v2.z);

	mov	edx, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR _v2$[ebp]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movsd	xmm0, QWORD PTR [edx]
	mulsd	xmm0, QWORD PTR [ecx]
	movsd	QWORD PTR [eax], xmm0
	movsd	xmm0, QWORD PTR [edx+8]
	mulsd	xmm0, QWORD PTR [ecx+8]
	movsd	QWORD PTR [eax+8], xmm0
	movsd	xmm0, QWORD PTR [edx+16]
	mulsd	xmm0, QWORD PTR [ecx+16]
	movsd	QWORD PTR [eax+16], xmm0

; 669  : 	}

	pop	ebp
	ret	0
??$?DN$00@glm@@YA?AU?$tvec3@N$00@0@ABU10@0@Z ENDP	; glm::operator*<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?DM$00@glm@@YA?AU?$tvec3@M$00@0@ABU10@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??$?DM$00@glm@@YA?AU?$tvec3@M$00@0@ABU10@0@Z PROC	; glm::operator*<float,1>, COMDAT

; 664  : 	{

	push	ebp
	mov	ebp, esp

; 665  : 		return tvec3<T, P>(
; 666  : 			v1.x * v2.x,
; 667  : 			v1.y * v2.y,
; 668  : 			v1.z * v2.z);

	mov	edx, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR _v2$[ebp]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movss	xmm0, DWORD PTR [edx]
	mulss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR [eax], xmm0
	movss	xmm0, DWORD PTR [edx+4]
	mulss	xmm0, DWORD PTR [ecx+4]
	movss	DWORD PTR [eax+4], xmm0
	movss	xmm0, DWORD PTR [edx+8]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	DWORD PTR [eax+8], xmm0

; 669  : 	}

	pop	ebp
	ret	0
??$?DM$00@glm@@YA?AU?$tvec3@M$00@0@ABU10@0@Z ENDP	; glm::operator*<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?DN$01@glm@@YA?AU?$tvec3@N$01@0@ABU10@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??$?DN$01@glm@@YA?AU?$tvec3@N$01@0@ABU10@0@Z PROC	; glm::operator*<double,2>, COMDAT

; 664  : 	{

	push	ebp
	mov	ebp, esp

; 665  : 		return tvec3<T, P>(
; 666  : 			v1.x * v2.x,
; 667  : 			v1.y * v2.y,
; 668  : 			v1.z * v2.z);

	mov	edx, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR _v2$[ebp]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movsd	xmm0, QWORD PTR [edx]
	mulsd	xmm0, QWORD PTR [ecx]
	movsd	QWORD PTR [eax], xmm0
	movsd	xmm0, QWORD PTR [edx+8]
	mulsd	xmm0, QWORD PTR [ecx+8]
	movsd	QWORD PTR [eax+8], xmm0
	movsd	xmm0, QWORD PTR [edx+16]
	mulsd	xmm0, QWORD PTR [ecx+16]
	movsd	QWORD PTR [eax+16], xmm0

; 669  : 	}

	pop	ebp
	ret	0
??$?DN$01@glm@@YA?AU?$tvec3@N$01@0@ABU10@0@Z ENDP	; glm::operator*<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?DM$01@glm@@YA?AU?$tvec3@M$01@0@ABU10@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??$?DM$01@glm@@YA?AU?$tvec3@M$01@0@ABU10@0@Z PROC	; glm::operator*<float,2>, COMDAT

; 664  : 	{

	push	ebp
	mov	ebp, esp

; 665  : 		return tvec3<T, P>(
; 666  : 			v1.x * v2.x,
; 667  : 			v1.y * v2.y,
; 668  : 			v1.z * v2.z);

	mov	edx, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR _v2$[ebp]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movss	xmm0, DWORD PTR [edx]
	mulss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR [eax], xmm0
	movss	xmm0, DWORD PTR [edx+4]
	mulss	xmm0, DWORD PTR [ecx+4]
	movss	DWORD PTR [eax+4], xmm0
	movss	xmm0, DWORD PTR [edx+8]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	DWORD PTR [eax+8], xmm0

; 669  : 	}

	pop	ebp
	ret	0
??$?DM$01@glm@@YA?AU?$tvec3@M$01@0@ABU10@0@Z ENDP	; glm::operator*<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??$dualquat_cast@N$0A@@glm@@YA?AU?$tdualquat@N$0A@@0@ABU?$tmat2x4@N$0A@@0@@Z
_TEXT	SEGMENT
$T1 = -64						; size = 32
$T2 = -32						; size = 32
___$ReturnUdt$ = 8					; size = 4
_x$ = 12						; size = 4
??$dualquat_cast@N$0A@@glm@@YA?AU?$tdualquat@N$0A@@0@ABU?$tmat2x4@N$0A@@0@@Z PROC ; glm::dualquat_cast<double,0>, COMDAT

; 295  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H

; 296  : 		return tdualquat<T, P>(
; 297  : 			tquat<T, P>( x[0].w, x[0].x, x[0].y, x[0].z ),
; 298  : 			tquat<T, P>( x[1].w, x[1].x, x[1].y, x[1].z ));

	mov	eax, DWORD PTR _x$[ebp]
	push	esi
	push	edi
	push	8
	movups	xmm0, XMMWORD PTR [eax+32]
	pop	ecx
	lea	esi, DWORD PTR $T2[ebp]
	movups	XMMWORD PTR $T1[ebp], xmm0
	push	8
	movups	xmm0, XMMWORD PTR [eax+48]
	movups	XMMWORD PTR $T1[ebp+16], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR $T2[ebp], xmm0
	movups	xmm0, XMMWORD PTR [eax+16]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edi, eax
	movups	XMMWORD PTR $T2[ebp+16], xmm0
	rep movsd
	pop	ecx
	lea	edi, DWORD PTR [eax+32]
	lea	esi, DWORD PTR $T1[ebp]
	rep movsd
	pop	edi
	pop	esi

; 299  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$dualquat_cast@N$0A@@glm@@YA?AU?$tdualquat@N$0A@@0@ABU?$tmat2x4@N$0A@@0@@Z ENDP ; glm::dualquat_cast<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??$dualquat_cast@N$0A@@glm@@YA?AU?$tdualquat@N$0A@@0@ABU?$tmat3x4@N$0A@@0@@Z
_TEXT	SEGMENT
_dual$ = -72						; size = 32
_real$ = -40						; size = 32
_real$1$ = -8						; size = 8
_r$1 = -8						; size = 8
_r$2 = -8						; size = 8
_r$3 = -8						; size = 8
_r$4 = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
_x$ = 12						; size = 4
??$dualquat_cast@N$0A@@glm@@YA?AU?$tdualquat@N$0A@@0@ABU?$tmat3x4@N$0A@@0@@Z PROC ; glm::dualquat_cast<double,0>, COMDAT

; 303  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	esi

; 304  : 		tquat<T, P> real(uninitialize);
; 305  : 		
; 306  : 		T const trace = x[0].x + x[1].y + x[2].z;

	mov	esi, DWORD PTR _x$[ebp]
	push	edi
	movsd	xmm0, QWORD PTR [esi]
	movsd	xmm1, QWORD PTR [esi+40]
	movapd	xmm3, xmm0
	movsd	xmm2, QWORD PTR [esi+80]
	addsd	xmm3, xmm1
	addsd	xmm3, xmm2

; 307  : 		if(trace > static_cast<T>(0))

	comisd	xmm3, QWORD PTR __real@0000000000000000
	jbe	SHORT $LN6@dualquat_c

; 308  : 		{
; 309  : 			T const r = sqrt(T(1) + trace);

	addsd	xmm3, QWORD PTR __real@3ff0000000000000
	push	ecx
	push	ecx
	movsd	QWORD PTR [esp], xmm3
	call	_sqrt

; 310  : 			T const invr = static_cast<T>(0.5) / r;

	movsd	xmm0, QWORD PTR __real@3fe0000000000000
	fstp	QWORD PTR _r$4[ebp]
	movsd	xmm1, QWORD PTR _r$4[ebp]
	divsd	xmm0, xmm1

; 311  : 			real.w = static_cast<T>(0.5) * r;
; 312  : 			real.x = (x[2].y - x[1].z) * invr;
; 313  : 			real.y = (x[0].z - x[2].x) * invr;
; 314  : 			real.z = (x[1].x - x[0].y) * invr;

	movsd	xmm7, QWORD PTR [esi+32]
	subsd	xmm7, QWORD PTR [esi+8]
	movsd	xmm5, QWORD PTR [esi+72]
	movsd	xmm6, QWORD PTR [esi+16]
	mulsd	xmm1, QWORD PTR __real@3fe0000000000000
	subsd	xmm5, QWORD PTR [esi+48]
	subsd	xmm6, QWORD PTR [esi+64]
	mulsd	xmm7, xmm0

; 315  : 		}
; 316  : 		else if(x[0].x > x[1].y && x[0].x > x[2].z)

	jmp	$LN123@dualquat_c
$LN6@dualquat_c:
	comisd	xmm0, xmm1
	jbe	SHORT $LN4@dualquat_c
	comisd	xmm0, xmm2
	jbe	SHORT $LN4@dualquat_c

; 317  : 		{
; 318  : 			T const r = sqrt(T(1) + x[0].x - x[1].y - x[2].z);

	addsd	xmm0, QWORD PTR __real@3ff0000000000000
	push	ecx
	push	ecx
	subsd	xmm0, xmm1
	subsd	xmm0, xmm2
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt

; 319  : 			T const invr = static_cast<T>(0.5) / r;

	movsd	xmm0, QWORD PTR __real@3fe0000000000000
	fstp	QWORD PTR _r$3[ebp]
	movsd	xmm5, QWORD PTR _r$3[ebp]
	divsd	xmm0, xmm5

; 320  : 			real.x = static_cast<T>(0.5)*r;
; 321  : 			real.y = (x[1].x + x[0].y) * invr;
; 322  : 			real.z = (x[0].z + x[2].x) * invr;

	movsd	xmm7, QWORD PTR [esi+64]

; 323  : 			real.w = (x[2].y - x[1].z) * invr;

	movsd	xmm1, QWORD PTR [esi+72]
	addsd	xmm7, QWORD PTR [esi+16]
	subsd	xmm1, QWORD PTR [esi+48]
	movsd	xmm6, QWORD PTR [esi+32]
	mulsd	xmm5, QWORD PTR __real@3fe0000000000000
	addsd	xmm6, QWORD PTR [esi+8]
	mulsd	xmm7, xmm0
	mulsd	xmm1, xmm0

; 324  : 		}
; 325  : 		else if(x[1].y > x[2].z)

	jmp	$LN124@dualquat_c
$LN4@dualquat_c:
	comisd	xmm1, xmm2

; 326  : 		{
; 327  : 			T const r = sqrt(T(1) + x[1].y - x[0].x - x[2].z);

	push	ecx
	push	ecx
	jbe	SHORT $LN2@dualquat_c
	addsd	xmm1, QWORD PTR __real@3ff0000000000000
	subsd	xmm1, xmm0
	subsd	xmm1, xmm2
	movsd	QWORD PTR [esp], xmm1
	call	_sqrt

; 328  : 			T const invr = static_cast<T>(0.5) / r;

	movsd	xmm0, QWORD PTR __real@3fe0000000000000
	fstp	QWORD PTR _r$2[ebp]
	movsd	xmm6, QWORD PTR _r$2[ebp]
	divsd	xmm0, xmm6

; 329  : 			real.x = (x[1].x + x[0].y) * invr;

	movsd	xmm5, QWORD PTR [esi+32]

; 330  : 			real.y = static_cast<T>(0.5) * r;
; 331  : 			real.z = (x[2].y + x[1].z) * invr;

	movsd	xmm7, QWORD PTR [esi+72]

; 332  : 			real.w = (x[0].z - x[2].x) * invr;

	movsd	xmm1, QWORD PTR [esi+16]
	addsd	xmm5, QWORD PTR [esi+8]
	addsd	xmm7, QWORD PTR [esi+48]
	subsd	xmm1, QWORD PTR [esi+64]
	mulsd	xmm6, QWORD PTR __real@3fe0000000000000
	mulsd	xmm5, xmm0
	mulsd	xmm7, xmm0
	mulsd	xmm1, xmm0

; 333  : 		}
; 334  : 		else

	jmp	SHORT $LN125@dualquat_c
$LN2@dualquat_c:

; 335  : 		{
; 336  : 			T const r = sqrt(T(1) + x[2].z - x[0].x - x[1].y);

	addsd	xmm2, QWORD PTR __real@3ff0000000000000
	subsd	xmm2, xmm0
	subsd	xmm2, xmm1
	movsd	QWORD PTR [esp], xmm2
	call	_sqrt

; 337  : 			T const invr = static_cast<T>(0.5) / r;

	movsd	xmm0, QWORD PTR __real@3fe0000000000000
	fstp	QWORD PTR _r$1[ebp]
	movsd	xmm7, QWORD PTR _r$1[ebp]
	divsd	xmm0, xmm7

; 340  : 			real.z = static_cast<T>(0.5) * r;
; 341  : 			real.w = (x[1].x - x[0].y) * invr;

	movsd	xmm1, QWORD PTR [esi+32]
	subsd	xmm1, QWORD PTR [esi+8]
	movsd	xmm5, QWORD PTR [esi+64]
	movsd	xmm6, QWORD PTR [esi+72]
	addsd	xmm5, QWORD PTR [esi+16]
	addsd	xmm6, QWORD PTR [esi+48]
	mulsd	xmm7, QWORD PTR __real@3fe0000000000000
	mulsd	xmm1, xmm0
$LN123@dualquat_c:

; 338  : 			real.x = (x[0].z + x[2].x) * invr;

	mulsd	xmm5, xmm0
$LN124@dualquat_c:

; 339  : 			real.y = (x[2].y + x[1].z) * invr;

	mulsd	xmm6, xmm0
$LN125@dualquat_c:

; 342  : 		}
; 343  : 		
; 344  : 		tquat<T, P> dual(uninitialize);
; 345  : 		dual.x =  static_cast<T>(0.5) * ( x[0].w * real.w + x[1].w * real.z - x[2].w * real.y);

	movsd	xmm3, QWORD PTR [esi+56]
	movsd	xmm4, QWORD PTR [esi+24]
	movsd	xmm2, QWORD PTR [esi+88]
	movapd	xmm0, xmm4
	movsd	QWORD PTR _real$1$[ebp], xmm1

; 346  : 		dual.y =  static_cast<T>(0.5) * (-x[0].w * real.z + x[1].w * real.w + x[2].w * real.x);
; 347  : 		dual.z =  static_cast<T>(0.5) * ( x[0].w * real.y - x[1].w * real.x + x[2].w * real.w);
; 348  : 		dual.w = -static_cast<T>(0.5) * ( x[0].w * real.x + x[1].w * real.y + x[2].w * real.z);
; 349  : 		return tdualquat<T, P>(real, dual);

	lea	esi, DWORD PTR _real$[ebp]
	mulsd	xmm0, QWORD PTR _real$1$[ebp]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edi, eax
	movsd	QWORD PTR _real$[ebp+24], xmm1
	movaps	xmm1, xmm3
	mulsd	xmm1, xmm7
	pop	ecx
	pop	ecx
	push	8
	pop	ecx
	addsd	xmm1, xmm0
	movsd	QWORD PTR _real$[ebp+16], xmm7
	movapd	xmm0, xmm2
	movsd	QWORD PTR _real$[ebp+8], xmm6
	mulsd	xmm0, xmm6
	push	8
	movsd	QWORD PTR _real$[ebp], xmm5
	rep movsd
	subsd	xmm1, xmm0
	movapd	xmm0, xmm4
	mulsd	xmm0, xmm7
	lea	edi, DWORD PTR [eax+32]
	pop	ecx
	lea	esi, DWORD PTR _dual$[ebp]
	mulsd	xmm1, QWORD PTR __real@3fe0000000000000
	movsd	QWORD PTR _dual$[ebp], xmm1
	movaps	xmm1, xmm3
	mulsd	xmm1, QWORD PTR _real$1$[ebp]
	subsd	xmm1, xmm0
	movapd	xmm0, xmm2
	mulsd	xmm0, xmm5
	addsd	xmm1, xmm0
	movapd	xmm0, xmm3
	mulsd	xmm0, xmm5
	mulsd	xmm3, xmm6
	mulsd	xmm1, QWORD PTR __real@3fe0000000000000
	movsd	QWORD PTR _dual$[ebp+8], xmm1
	movaps	xmm1, xmm4
	mulsd	xmm1, xmm6
	mulsd	xmm4, xmm5
	subsd	xmm1, xmm0
	movapd	xmm0, xmm2
	mulsd	xmm0, QWORD PTR _real$1$[ebp]
	addsd	xmm4, xmm3
	mulsd	xmm2, xmm7
	addsd	xmm1, xmm0
	addsd	xmm4, xmm2
	mulsd	xmm1, QWORD PTR __real@3fe0000000000000
	mulsd	xmm4, QWORD PTR __real@bfe0000000000000
	movsd	QWORD PTR _dual$[ebp+16], xmm1
	movsd	QWORD PTR _dual$[ebp+24], xmm4
	rep movsd
	pop	edi
	pop	esi

; 350  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$dualquat_cast@N$0A@@glm@@YA?AU?$tdualquat@N$0A@@0@ABU?$tmat3x4@N$0A@@0@@Z ENDP ; glm::dualquat_cast<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??$dualquat_cast@M$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@ABU?$tmat2x4@M$0A@@0@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 16
$T2 = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
_x$ = 12						; size = 4
??$dualquat_cast@M$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@ABU?$tmat2x4@M$0A@@0@@Z PROC ; glm::dualquat_cast<float,0>, COMDAT

; 295  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H

; 296  : 		return tdualquat<T, P>(
; 297  : 			tquat<T, P>( x[0].w, x[0].x, x[0].y, x[0].z ),
; 298  : 			tquat<T, P>( x[1].w, x[1].x, x[1].y, x[1].z ));

	mov	eax, DWORD PTR _x$[ebp]
	push	esi
	push	edi
	lea	esi, DWORD PTR $T2[ebp]
	movups	xmm0, XMMWORD PTR [eax+16]
	movups	XMMWORD PTR $T1[ebp], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edi, eax
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd
	movsd
	movsd
	movsd
	lea	edi, DWORD PTR [eax+16]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi

; 299  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$dualquat_cast@M$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@ABU?$tmat2x4@M$0A@@0@@Z ENDP ; glm::dualquat_cast<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??$dualquat_cast@M$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@ABU?$tmat3x4@M$0A@@0@@Z
_TEXT	SEGMENT
_dual$ = -32						; size = 16
_real$ = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
tv701 = 12						; size = 4
tv687 = 12						; size = 4
tv674 = 12						; size = 4
tv662 = 12						; size = 4
_real$1$ = 12						; size = 4
_r$1 = 12						; size = 4
_r$2 = 12						; size = 4
_r$3 = 12						; size = 4
_r$4 = 12						; size = 4
_x$ = 12						; size = 4
??$dualquat_cast@M$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@ABU?$tmat3x4@M$0A@@0@@Z PROC ; glm::dualquat_cast<float,0>, COMDAT

; 303  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	esi

; 304  : 		tquat<T, P> real(uninitialize);
; 305  : 		
; 306  : 		T const trace = x[0].x + x[1].y + x[2].z;

	mov	esi, DWORD PTR _x$[ebp]
	push	edi
	movss	xmm0, DWORD PTR [esi]
	movss	xmm1, DWORD PTR [esi+20]
	movaps	xmm3, xmm0
	movss	xmm2, DWORD PTR [esi+40]
	addss	xmm3, xmm1
	addss	xmm3, xmm2

; 307  : 		if(trace > static_cast<T>(0))

	comiss	xmm3, DWORD PTR __real@00000000
	jbe	SHORT $LN6@dualquat_c

; 308  : 		{
; 309  : 			T const r = sqrt(T(1) + trace);

	addss	xmm3, DWORD PTR __real@3f800000
	xorps	xmm0, xmm0
	push	ecx
	push	ecx
	cvtss2sd xmm0, xmm3
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt

; 310  : 			T const invr = static_cast<T>(0.5) / r;

	movss	xmm0, DWORD PTR __real@3f000000
	fstp	DWORD PTR tv701[ebp]
	fld	DWORD PTR tv701[ebp]

; 311  : 			real.w = static_cast<T>(0.5) * r;
; 312  : 			real.x = (x[2].y - x[1].z) * invr;
; 313  : 			real.y = (x[0].z - x[2].x) * invr;
; 314  : 			real.z = (x[1].x - x[0].y) * invr;

	movss	xmm7, DWORD PTR [esi+16]
	fstp	DWORD PTR _r$4[ebp]
	movss	xmm1, DWORD PTR _r$4[ebp]
	subss	xmm7, DWORD PTR [esi+4]
	divss	xmm0, xmm1
	movss	xmm5, DWORD PTR [esi+36]
	movss	xmm6, DWORD PTR [esi+8]
	mulss	xmm1, DWORD PTR __real@3f000000
	subss	xmm5, DWORD PTR [esi+24]
	subss	xmm6, DWORD PTR [esi+32]
	mulss	xmm7, xmm0

; 315  : 		}
; 316  : 		else if(x[0].x > x[1].y && x[0].x > x[2].z)

	jmp	$LN139@dualquat_c
$LN6@dualquat_c:
	comiss	xmm0, xmm1
	jbe	SHORT $LN4@dualquat_c
	comiss	xmm0, xmm2
	jbe	SHORT $LN4@dualquat_c

; 317  : 		{
; 318  : 			T const r = sqrt(T(1) + x[0].x - x[1].y - x[2].z);

	addss	xmm0, DWORD PTR __real@3f800000
	push	ecx
	push	ecx
	subss	xmm0, xmm1
	subss	xmm0, xmm2
	cvtps2pd xmm0, xmm0
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt

; 319  : 			T const invr = static_cast<T>(0.5) / r;

	movss	xmm0, DWORD PTR __real@3f000000
	fstp	DWORD PTR tv687[ebp]
	fld	DWORD PTR tv687[ebp]

; 320  : 			real.x = static_cast<T>(0.5)*r;
; 321  : 			real.y = (x[1].x + x[0].y) * invr;
; 322  : 			real.z = (x[0].z + x[2].x) * invr;

	movss	xmm7, DWORD PTR [esi+32]

; 323  : 			real.w = (x[2].y - x[1].z) * invr;

	movss	xmm1, DWORD PTR [esi+36]
	fstp	DWORD PTR _r$3[ebp]
	movss	xmm5, DWORD PTR _r$3[ebp]
	addss	xmm7, DWORD PTR [esi+8]
	subss	xmm1, DWORD PTR [esi+24]
	divss	xmm0, xmm5
	movss	xmm6, DWORD PTR [esi+16]
	mulss	xmm5, DWORD PTR __real@3f000000
	addss	xmm6, DWORD PTR [esi+4]
	mulss	xmm7, xmm0
	mulss	xmm1, xmm0

; 324  : 		}
; 325  : 		else if(x[1].y > x[2].z)

	jmp	$LN140@dualquat_c
$LN4@dualquat_c:
	comiss	xmm1, xmm2

; 326  : 		{
; 327  : 			T const r = sqrt(T(1) + x[1].y - x[0].x - x[2].z);

	push	ecx
	push	ecx
	jbe	SHORT $LN2@dualquat_c
	addss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	subss	xmm1, xmm2
	cvtps2pd xmm0, xmm1
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt

; 328  : 			T const invr = static_cast<T>(0.5) / r;

	movss	xmm0, DWORD PTR __real@3f000000
	fstp	DWORD PTR tv674[ebp]
	fld	DWORD PTR tv674[ebp]

; 329  : 			real.x = (x[1].x + x[0].y) * invr;

	movss	xmm5, DWORD PTR [esi+16]

; 330  : 			real.y = static_cast<T>(0.5) * r;
; 331  : 			real.z = (x[2].y + x[1].z) * invr;

	movss	xmm7, DWORD PTR [esi+36]

; 332  : 			real.w = (x[0].z - x[2].x) * invr;

	movss	xmm1, DWORD PTR [esi+8]
	fstp	DWORD PTR _r$2[ebp]
	movss	xmm6, DWORD PTR _r$2[ebp]
	divss	xmm0, xmm6
	addss	xmm5, DWORD PTR [esi+4]
	addss	xmm7, DWORD PTR [esi+24]
	subss	xmm1, DWORD PTR [esi+32]
	mulss	xmm6, DWORD PTR __real@3f000000
	mulss	xmm5, xmm0
	mulss	xmm7, xmm0
	mulss	xmm1, xmm0

; 333  : 		}
; 334  : 		else

	jmp	SHORT $LN141@dualquat_c
$LN2@dualquat_c:

; 335  : 		{
; 336  : 			T const r = sqrt(T(1) + x[2].z - x[0].x - x[1].y);

	addss	xmm2, DWORD PTR __real@3f800000
	subss	xmm2, xmm0
	subss	xmm2, xmm1
	cvtps2pd xmm0, xmm2
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt

; 337  : 			T const invr = static_cast<T>(0.5) / r;

	movss	xmm0, DWORD PTR __real@3f000000
	fstp	DWORD PTR tv662[ebp]
	fld	DWORD PTR tv662[ebp]

; 340  : 			real.z = static_cast<T>(0.5) * r;
; 341  : 			real.w = (x[1].x - x[0].y) * invr;

	movss	xmm1, DWORD PTR [esi+16]
	fstp	DWORD PTR _r$1[ebp]
	movss	xmm7, DWORD PTR _r$1[ebp]
	subss	xmm1, DWORD PTR [esi+4]
	divss	xmm0, xmm7
	movss	xmm5, DWORD PTR [esi+32]
	movss	xmm6, DWORD PTR [esi+36]
	addss	xmm5, DWORD PTR [esi+8]
	addss	xmm6, DWORD PTR [esi+24]
	mulss	xmm7, DWORD PTR __real@3f000000
	mulss	xmm1, xmm0
$LN139@dualquat_c:

; 338  : 			real.x = (x[0].z + x[2].x) * invr;

	mulss	xmm5, xmm0
$LN140@dualquat_c:

; 339  : 			real.y = (x[2].y + x[1].z) * invr;

	mulss	xmm6, xmm0
$LN141@dualquat_c:

; 342  : 		}
; 343  : 		
; 344  : 		tquat<T, P> dual(uninitialize);
; 345  : 		dual.x =  static_cast<T>(0.5) * ( x[0].w * real.w + x[1].w * real.z - x[2].w * real.y);

	movss	xmm3, DWORD PTR [esi+28]
	movss	xmm4, DWORD PTR [esi+12]
	movss	xmm2, DWORD PTR [esi+44]
	movaps	xmm0, xmm4
	movss	DWORD PTR _real$[ebp+12], xmm1

; 346  : 		dual.y =  static_cast<T>(0.5) * (-x[0].w * real.z + x[1].w * real.w + x[2].w * real.x);
; 347  : 		dual.z =  static_cast<T>(0.5) * ( x[0].w * real.y - x[1].w * real.x + x[2].w * real.w);
; 348  : 		dual.w = -static_cast<T>(0.5) * ( x[0].w * real.x + x[1].w * real.y + x[2].w * real.z);
; 349  : 		return tdualquat<T, P>(real, dual);

	lea	esi, DWORD PTR _real$[ebp]
	movss	DWORD PTR _real$1$[ebp], xmm1
	movaps	xmm1, xmm3
	mulss	xmm0, DWORD PTR _real$1$[ebp]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edi, eax
	mulss	xmm1, xmm7
	pop	ecx
	movss	DWORD PTR _real$[ebp+8], xmm7
	movss	DWORD PTR _real$[ebp+4], xmm6
	addss	xmm1, xmm0
	movss	DWORD PTR _real$[ebp], xmm5
	movaps	xmm0, xmm2
	movsd
	mulss	xmm0, xmm6
	pop	ecx
	movsd
	subss	xmm1, xmm0
	movaps	xmm0, xmm4
	mulss	xmm0, xmm7
	movsd
	mulss	xmm1, DWORD PTR __real@3f000000
	movsd
	lea	edi, DWORD PTR [eax+16]
	movss	DWORD PTR _dual$[ebp], xmm1
	lea	esi, DWORD PTR _dual$[ebp]
	movaps	xmm1, xmm3
	mulss	xmm1, DWORD PTR _real$1$[ebp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm2
	mulss	xmm0, xmm5
	addss	xmm1, xmm0
	movaps	xmm0, xmm3
	mulss	xmm0, xmm5
	mulss	xmm3, xmm6
	mulss	xmm1, DWORD PTR __real@3f000000
	movss	DWORD PTR _dual$[ebp+4], xmm1
	movaps	xmm1, xmm4
	mulss	xmm1, xmm6
	mulss	xmm4, xmm5
	subss	xmm1, xmm0
	movaps	xmm0, xmm2
	mulss	xmm0, DWORD PTR _real$1$[ebp]
	addss	xmm4, xmm3
	mulss	xmm2, xmm7
	addss	xmm1, xmm0
	addss	xmm4, xmm2
	mulss	xmm1, DWORD PTR __real@3f000000
	mulss	xmm4, DWORD PTR __real@bf000000
	movss	DWORD PTR _dual$[ebp+8], xmm1
	movss	DWORD PTR _dual$[ebp+12], xmm4
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi

; 350  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$dualquat_cast@M$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@ABU?$tmat3x4@M$0A@@0@@Z ENDP ; glm::dualquat_cast<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??$dualquat_cast@N$00@glm@@YA?AU?$tdualquat@N$00@0@ABU?$tmat2x4@N$00@0@@Z
_TEXT	SEGMENT
$T1 = -64						; size = 32
$T2 = -32						; size = 32
___$ReturnUdt$ = 8					; size = 4
_x$ = 12						; size = 4
??$dualquat_cast@N$00@glm@@YA?AU?$tdualquat@N$00@0@ABU?$tmat2x4@N$00@0@@Z PROC ; glm::dualquat_cast<double,1>, COMDAT

; 295  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H

; 296  : 		return tdualquat<T, P>(
; 297  : 			tquat<T, P>( x[0].w, x[0].x, x[0].y, x[0].z ),
; 298  : 			tquat<T, P>( x[1].w, x[1].x, x[1].y, x[1].z ));

	mov	eax, DWORD PTR _x$[ebp]
	push	esi
	push	edi
	push	8
	movups	xmm0, XMMWORD PTR [eax+32]
	pop	ecx
	lea	esi, DWORD PTR $T2[ebp]
	movups	XMMWORD PTR $T1[ebp], xmm0
	push	8
	movups	xmm0, XMMWORD PTR [eax+48]
	movups	XMMWORD PTR $T1[ebp+16], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR $T2[ebp], xmm0
	movups	xmm0, XMMWORD PTR [eax+16]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edi, eax
	movups	XMMWORD PTR $T2[ebp+16], xmm0
	rep movsd
	pop	ecx
	lea	edi, DWORD PTR [eax+32]
	lea	esi, DWORD PTR $T1[ebp]
	rep movsd
	pop	edi
	pop	esi

; 299  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$dualquat_cast@N$00@glm@@YA?AU?$tdualquat@N$00@0@ABU?$tmat2x4@N$00@0@@Z ENDP ; glm::dualquat_cast<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??$dualquat_cast@N$00@glm@@YA?AU?$tdualquat@N$00@0@ABU?$tmat3x4@N$00@0@@Z
_TEXT	SEGMENT
_dual$ = -72						; size = 32
_real$ = -40						; size = 32
_real$1$ = -8						; size = 8
_r$1 = -8						; size = 8
_r$2 = -8						; size = 8
_r$3 = -8						; size = 8
_r$4 = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
_x$ = 12						; size = 4
??$dualquat_cast@N$00@glm@@YA?AU?$tdualquat@N$00@0@ABU?$tmat3x4@N$00@0@@Z PROC ; glm::dualquat_cast<double,1>, COMDAT

; 303  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	esi

; 304  : 		tquat<T, P> real(uninitialize);
; 305  : 		
; 306  : 		T const trace = x[0].x + x[1].y + x[2].z;

	mov	esi, DWORD PTR _x$[ebp]
	push	edi
	movsd	xmm0, QWORD PTR [esi]
	movsd	xmm1, QWORD PTR [esi+40]
	movapd	xmm3, xmm0
	movsd	xmm2, QWORD PTR [esi+80]
	addsd	xmm3, xmm1
	addsd	xmm3, xmm2

; 307  : 		if(trace > static_cast<T>(0))

	comisd	xmm3, QWORD PTR __real@0000000000000000
	jbe	SHORT $LN6@dualquat_c

; 308  : 		{
; 309  : 			T const r = sqrt(T(1) + trace);

	addsd	xmm3, QWORD PTR __real@3ff0000000000000
	push	ecx
	push	ecx
	movsd	QWORD PTR [esp], xmm3
	call	_sqrt

; 310  : 			T const invr = static_cast<T>(0.5) / r;

	movsd	xmm0, QWORD PTR __real@3fe0000000000000
	fstp	QWORD PTR _r$4[ebp]
	movsd	xmm1, QWORD PTR _r$4[ebp]
	divsd	xmm0, xmm1

; 311  : 			real.w = static_cast<T>(0.5) * r;
; 312  : 			real.x = (x[2].y - x[1].z) * invr;
; 313  : 			real.y = (x[0].z - x[2].x) * invr;
; 314  : 			real.z = (x[1].x - x[0].y) * invr;

	movsd	xmm7, QWORD PTR [esi+32]
	subsd	xmm7, QWORD PTR [esi+8]
	movsd	xmm5, QWORD PTR [esi+72]
	movsd	xmm6, QWORD PTR [esi+16]
	mulsd	xmm1, QWORD PTR __real@3fe0000000000000
	subsd	xmm5, QWORD PTR [esi+48]
	subsd	xmm6, QWORD PTR [esi+64]
	mulsd	xmm7, xmm0

; 315  : 		}
; 316  : 		else if(x[0].x > x[1].y && x[0].x > x[2].z)

	jmp	$LN123@dualquat_c
$LN6@dualquat_c:
	comisd	xmm0, xmm1
	jbe	SHORT $LN4@dualquat_c
	comisd	xmm0, xmm2
	jbe	SHORT $LN4@dualquat_c

; 317  : 		{
; 318  : 			T const r = sqrt(T(1) + x[0].x - x[1].y - x[2].z);

	addsd	xmm0, QWORD PTR __real@3ff0000000000000
	push	ecx
	push	ecx
	subsd	xmm0, xmm1
	subsd	xmm0, xmm2
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt

; 319  : 			T const invr = static_cast<T>(0.5) / r;

	movsd	xmm0, QWORD PTR __real@3fe0000000000000
	fstp	QWORD PTR _r$3[ebp]
	movsd	xmm5, QWORD PTR _r$3[ebp]
	divsd	xmm0, xmm5

; 320  : 			real.x = static_cast<T>(0.5)*r;
; 321  : 			real.y = (x[1].x + x[0].y) * invr;
; 322  : 			real.z = (x[0].z + x[2].x) * invr;

	movsd	xmm7, QWORD PTR [esi+64]

; 323  : 			real.w = (x[2].y - x[1].z) * invr;

	movsd	xmm1, QWORD PTR [esi+72]
	addsd	xmm7, QWORD PTR [esi+16]
	subsd	xmm1, QWORD PTR [esi+48]
	movsd	xmm6, QWORD PTR [esi+32]
	mulsd	xmm5, QWORD PTR __real@3fe0000000000000
	addsd	xmm6, QWORD PTR [esi+8]
	mulsd	xmm7, xmm0
	mulsd	xmm1, xmm0

; 324  : 		}
; 325  : 		else if(x[1].y > x[2].z)

	jmp	$LN124@dualquat_c
$LN4@dualquat_c:
	comisd	xmm1, xmm2

; 326  : 		{
; 327  : 			T const r = sqrt(T(1) + x[1].y - x[0].x - x[2].z);

	push	ecx
	push	ecx
	jbe	SHORT $LN2@dualquat_c
	addsd	xmm1, QWORD PTR __real@3ff0000000000000
	subsd	xmm1, xmm0
	subsd	xmm1, xmm2
	movsd	QWORD PTR [esp], xmm1
	call	_sqrt

; 328  : 			T const invr = static_cast<T>(0.5) / r;

	movsd	xmm0, QWORD PTR __real@3fe0000000000000
	fstp	QWORD PTR _r$2[ebp]
	movsd	xmm6, QWORD PTR _r$2[ebp]
	divsd	xmm0, xmm6

; 329  : 			real.x = (x[1].x + x[0].y) * invr;

	movsd	xmm5, QWORD PTR [esi+32]

; 330  : 			real.y = static_cast<T>(0.5) * r;
; 331  : 			real.z = (x[2].y + x[1].z) * invr;

	movsd	xmm7, QWORD PTR [esi+72]

; 332  : 			real.w = (x[0].z - x[2].x) * invr;

	movsd	xmm1, QWORD PTR [esi+16]
	addsd	xmm5, QWORD PTR [esi+8]
	addsd	xmm7, QWORD PTR [esi+48]
	subsd	xmm1, QWORD PTR [esi+64]
	mulsd	xmm6, QWORD PTR __real@3fe0000000000000
	mulsd	xmm5, xmm0
	mulsd	xmm7, xmm0
	mulsd	xmm1, xmm0

; 333  : 		}
; 334  : 		else

	jmp	SHORT $LN125@dualquat_c
$LN2@dualquat_c:

; 335  : 		{
; 336  : 			T const r = sqrt(T(1) + x[2].z - x[0].x - x[1].y);

	addsd	xmm2, QWORD PTR __real@3ff0000000000000
	subsd	xmm2, xmm0
	subsd	xmm2, xmm1
	movsd	QWORD PTR [esp], xmm2
	call	_sqrt

; 337  : 			T const invr = static_cast<T>(0.5) / r;

	movsd	xmm0, QWORD PTR __real@3fe0000000000000
	fstp	QWORD PTR _r$1[ebp]
	movsd	xmm7, QWORD PTR _r$1[ebp]
	divsd	xmm0, xmm7

; 340  : 			real.z = static_cast<T>(0.5) * r;
; 341  : 			real.w = (x[1].x - x[0].y) * invr;

	movsd	xmm1, QWORD PTR [esi+32]
	subsd	xmm1, QWORD PTR [esi+8]
	movsd	xmm5, QWORD PTR [esi+64]
	movsd	xmm6, QWORD PTR [esi+72]
	addsd	xmm5, QWORD PTR [esi+16]
	addsd	xmm6, QWORD PTR [esi+48]
	mulsd	xmm7, QWORD PTR __real@3fe0000000000000
	mulsd	xmm1, xmm0
$LN123@dualquat_c:

; 338  : 			real.x = (x[0].z + x[2].x) * invr;

	mulsd	xmm5, xmm0
$LN124@dualquat_c:

; 339  : 			real.y = (x[2].y + x[1].z) * invr;

	mulsd	xmm6, xmm0
$LN125@dualquat_c:

; 342  : 		}
; 343  : 		
; 344  : 		tquat<T, P> dual(uninitialize);
; 345  : 		dual.x =  static_cast<T>(0.5) * ( x[0].w * real.w + x[1].w * real.z - x[2].w * real.y);

	movsd	xmm3, QWORD PTR [esi+56]
	movsd	xmm4, QWORD PTR [esi+24]
	movsd	xmm2, QWORD PTR [esi+88]
	movapd	xmm0, xmm4
	movsd	QWORD PTR _real$1$[ebp], xmm1

; 346  : 		dual.y =  static_cast<T>(0.5) * (-x[0].w * real.z + x[1].w * real.w + x[2].w * real.x);
; 347  : 		dual.z =  static_cast<T>(0.5) * ( x[0].w * real.y - x[1].w * real.x + x[2].w * real.w);
; 348  : 		dual.w = -static_cast<T>(0.5) * ( x[0].w * real.x + x[1].w * real.y + x[2].w * real.z);
; 349  : 		return tdualquat<T, P>(real, dual);

	lea	esi, DWORD PTR _real$[ebp]
	mulsd	xmm0, QWORD PTR _real$1$[ebp]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edi, eax
	movsd	QWORD PTR _real$[ebp+24], xmm1
	movaps	xmm1, xmm3
	mulsd	xmm1, xmm7
	pop	ecx
	pop	ecx
	push	8
	pop	ecx
	addsd	xmm1, xmm0
	movsd	QWORD PTR _real$[ebp+16], xmm7
	movapd	xmm0, xmm2
	movsd	QWORD PTR _real$[ebp+8], xmm6
	mulsd	xmm0, xmm6
	push	8
	movsd	QWORD PTR _real$[ebp], xmm5
	rep movsd
	subsd	xmm1, xmm0
	movapd	xmm0, xmm4
	mulsd	xmm0, xmm7
	lea	edi, DWORD PTR [eax+32]
	pop	ecx
	lea	esi, DWORD PTR _dual$[ebp]
	mulsd	xmm1, QWORD PTR __real@3fe0000000000000
	movsd	QWORD PTR _dual$[ebp], xmm1
	movaps	xmm1, xmm3
	mulsd	xmm1, QWORD PTR _real$1$[ebp]
	subsd	xmm1, xmm0
	movapd	xmm0, xmm2
	mulsd	xmm0, xmm5
	addsd	xmm1, xmm0
	movapd	xmm0, xmm3
	mulsd	xmm0, xmm5
	mulsd	xmm3, xmm6
	mulsd	xmm1, QWORD PTR __real@3fe0000000000000
	movsd	QWORD PTR _dual$[ebp+8], xmm1
	movaps	xmm1, xmm4
	mulsd	xmm1, xmm6
	mulsd	xmm4, xmm5
	subsd	xmm1, xmm0
	movapd	xmm0, xmm2
	mulsd	xmm0, QWORD PTR _real$1$[ebp]
	addsd	xmm4, xmm3
	mulsd	xmm2, xmm7
	addsd	xmm1, xmm0
	addsd	xmm4, xmm2
	mulsd	xmm1, QWORD PTR __real@3fe0000000000000
	mulsd	xmm4, QWORD PTR __real@bfe0000000000000
	movsd	QWORD PTR _dual$[ebp+16], xmm1
	movsd	QWORD PTR _dual$[ebp+24], xmm4
	rep movsd
	pop	edi
	pop	esi

; 350  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$dualquat_cast@N$00@glm@@YA?AU?$tdualquat@N$00@0@ABU?$tmat3x4@N$00@0@@Z ENDP ; glm::dualquat_cast<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??$dualquat_cast@M$00@glm@@YA?AU?$tdualquat@M$00@0@ABU?$tmat2x4@M$00@0@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 16
$T2 = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
_x$ = 12						; size = 4
??$dualquat_cast@M$00@glm@@YA?AU?$tdualquat@M$00@0@ABU?$tmat2x4@M$00@0@@Z PROC ; glm::dualquat_cast<float,1>, COMDAT

; 295  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H

; 296  : 		return tdualquat<T, P>(
; 297  : 			tquat<T, P>( x[0].w, x[0].x, x[0].y, x[0].z ),
; 298  : 			tquat<T, P>( x[1].w, x[1].x, x[1].y, x[1].z ));

	mov	eax, DWORD PTR _x$[ebp]
	push	esi
	push	edi
	lea	esi, DWORD PTR $T2[ebp]
	movups	xmm0, XMMWORD PTR [eax+16]
	movups	XMMWORD PTR $T1[ebp], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edi, eax
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd
	movsd
	movsd
	movsd
	lea	edi, DWORD PTR [eax+16]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi

; 299  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$dualquat_cast@M$00@glm@@YA?AU?$tdualquat@M$00@0@ABU?$tmat2x4@M$00@0@@Z ENDP ; glm::dualquat_cast<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??$dualquat_cast@M$00@glm@@YA?AU?$tdualquat@M$00@0@ABU?$tmat3x4@M$00@0@@Z
_TEXT	SEGMENT
_dual$ = -32						; size = 16
_real$ = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
tv701 = 12						; size = 4
tv687 = 12						; size = 4
tv674 = 12						; size = 4
tv662 = 12						; size = 4
_real$1$ = 12						; size = 4
_r$1 = 12						; size = 4
_r$2 = 12						; size = 4
_r$3 = 12						; size = 4
_r$4 = 12						; size = 4
_x$ = 12						; size = 4
??$dualquat_cast@M$00@glm@@YA?AU?$tdualquat@M$00@0@ABU?$tmat3x4@M$00@0@@Z PROC ; glm::dualquat_cast<float,1>, COMDAT

; 303  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	esi

; 304  : 		tquat<T, P> real(uninitialize);
; 305  : 		
; 306  : 		T const trace = x[0].x + x[1].y + x[2].z;

	mov	esi, DWORD PTR _x$[ebp]
	push	edi
	movss	xmm0, DWORD PTR [esi]
	movss	xmm1, DWORD PTR [esi+20]
	movaps	xmm3, xmm0
	movss	xmm2, DWORD PTR [esi+40]
	addss	xmm3, xmm1
	addss	xmm3, xmm2

; 307  : 		if(trace > static_cast<T>(0))

	comiss	xmm3, DWORD PTR __real@00000000
	jbe	SHORT $LN6@dualquat_c

; 308  : 		{
; 309  : 			T const r = sqrt(T(1) + trace);

	addss	xmm3, DWORD PTR __real@3f800000
	xorps	xmm0, xmm0
	push	ecx
	push	ecx
	cvtss2sd xmm0, xmm3
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt

; 310  : 			T const invr = static_cast<T>(0.5) / r;

	movss	xmm0, DWORD PTR __real@3f000000
	fstp	DWORD PTR tv701[ebp]
	fld	DWORD PTR tv701[ebp]

; 311  : 			real.w = static_cast<T>(0.5) * r;
; 312  : 			real.x = (x[2].y - x[1].z) * invr;
; 313  : 			real.y = (x[0].z - x[2].x) * invr;
; 314  : 			real.z = (x[1].x - x[0].y) * invr;

	movss	xmm7, DWORD PTR [esi+16]
	fstp	DWORD PTR _r$4[ebp]
	movss	xmm1, DWORD PTR _r$4[ebp]
	subss	xmm7, DWORD PTR [esi+4]
	divss	xmm0, xmm1
	movss	xmm5, DWORD PTR [esi+36]
	movss	xmm6, DWORD PTR [esi+8]
	mulss	xmm1, DWORD PTR __real@3f000000
	subss	xmm5, DWORD PTR [esi+24]
	subss	xmm6, DWORD PTR [esi+32]
	mulss	xmm7, xmm0

; 315  : 		}
; 316  : 		else if(x[0].x > x[1].y && x[0].x > x[2].z)

	jmp	$LN139@dualquat_c
$LN6@dualquat_c:
	comiss	xmm0, xmm1
	jbe	SHORT $LN4@dualquat_c
	comiss	xmm0, xmm2
	jbe	SHORT $LN4@dualquat_c

; 317  : 		{
; 318  : 			T const r = sqrt(T(1) + x[0].x - x[1].y - x[2].z);

	addss	xmm0, DWORD PTR __real@3f800000
	push	ecx
	push	ecx
	subss	xmm0, xmm1
	subss	xmm0, xmm2
	cvtps2pd xmm0, xmm0
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt

; 319  : 			T const invr = static_cast<T>(0.5) / r;

	movss	xmm0, DWORD PTR __real@3f000000
	fstp	DWORD PTR tv687[ebp]
	fld	DWORD PTR tv687[ebp]

; 320  : 			real.x = static_cast<T>(0.5)*r;
; 321  : 			real.y = (x[1].x + x[0].y) * invr;
; 322  : 			real.z = (x[0].z + x[2].x) * invr;

	movss	xmm7, DWORD PTR [esi+32]

; 323  : 			real.w = (x[2].y - x[1].z) * invr;

	movss	xmm1, DWORD PTR [esi+36]
	fstp	DWORD PTR _r$3[ebp]
	movss	xmm5, DWORD PTR _r$3[ebp]
	addss	xmm7, DWORD PTR [esi+8]
	subss	xmm1, DWORD PTR [esi+24]
	divss	xmm0, xmm5
	movss	xmm6, DWORD PTR [esi+16]
	mulss	xmm5, DWORD PTR __real@3f000000
	addss	xmm6, DWORD PTR [esi+4]
	mulss	xmm7, xmm0
	mulss	xmm1, xmm0

; 324  : 		}
; 325  : 		else if(x[1].y > x[2].z)

	jmp	$LN140@dualquat_c
$LN4@dualquat_c:
	comiss	xmm1, xmm2

; 326  : 		{
; 327  : 			T const r = sqrt(T(1) + x[1].y - x[0].x - x[2].z);

	push	ecx
	push	ecx
	jbe	SHORT $LN2@dualquat_c
	addss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	subss	xmm1, xmm2
	cvtps2pd xmm0, xmm1
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt

; 328  : 			T const invr = static_cast<T>(0.5) / r;

	movss	xmm0, DWORD PTR __real@3f000000
	fstp	DWORD PTR tv674[ebp]
	fld	DWORD PTR tv674[ebp]

; 329  : 			real.x = (x[1].x + x[0].y) * invr;

	movss	xmm5, DWORD PTR [esi+16]

; 330  : 			real.y = static_cast<T>(0.5) * r;
; 331  : 			real.z = (x[2].y + x[1].z) * invr;

	movss	xmm7, DWORD PTR [esi+36]

; 332  : 			real.w = (x[0].z - x[2].x) * invr;

	movss	xmm1, DWORD PTR [esi+8]
	fstp	DWORD PTR _r$2[ebp]
	movss	xmm6, DWORD PTR _r$2[ebp]
	divss	xmm0, xmm6
	addss	xmm5, DWORD PTR [esi+4]
	addss	xmm7, DWORD PTR [esi+24]
	subss	xmm1, DWORD PTR [esi+32]
	mulss	xmm6, DWORD PTR __real@3f000000
	mulss	xmm5, xmm0
	mulss	xmm7, xmm0
	mulss	xmm1, xmm0

; 333  : 		}
; 334  : 		else

	jmp	SHORT $LN141@dualquat_c
$LN2@dualquat_c:

; 335  : 		{
; 336  : 			T const r = sqrt(T(1) + x[2].z - x[0].x - x[1].y);

	addss	xmm2, DWORD PTR __real@3f800000
	subss	xmm2, xmm0
	subss	xmm2, xmm1
	cvtps2pd xmm0, xmm2
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt

; 337  : 			T const invr = static_cast<T>(0.5) / r;

	movss	xmm0, DWORD PTR __real@3f000000
	fstp	DWORD PTR tv662[ebp]
	fld	DWORD PTR tv662[ebp]

; 340  : 			real.z = static_cast<T>(0.5) * r;
; 341  : 			real.w = (x[1].x - x[0].y) * invr;

	movss	xmm1, DWORD PTR [esi+16]
	fstp	DWORD PTR _r$1[ebp]
	movss	xmm7, DWORD PTR _r$1[ebp]
	subss	xmm1, DWORD PTR [esi+4]
	divss	xmm0, xmm7
	movss	xmm5, DWORD PTR [esi+32]
	movss	xmm6, DWORD PTR [esi+36]
	addss	xmm5, DWORD PTR [esi+8]
	addss	xmm6, DWORD PTR [esi+24]
	mulss	xmm7, DWORD PTR __real@3f000000
	mulss	xmm1, xmm0
$LN139@dualquat_c:

; 338  : 			real.x = (x[0].z + x[2].x) * invr;

	mulss	xmm5, xmm0
$LN140@dualquat_c:

; 339  : 			real.y = (x[2].y + x[1].z) * invr;

	mulss	xmm6, xmm0
$LN141@dualquat_c:

; 342  : 		}
; 343  : 		
; 344  : 		tquat<T, P> dual(uninitialize);
; 345  : 		dual.x =  static_cast<T>(0.5) * ( x[0].w * real.w + x[1].w * real.z - x[2].w * real.y);

	movss	xmm3, DWORD PTR [esi+28]
	movss	xmm4, DWORD PTR [esi+12]
	movss	xmm2, DWORD PTR [esi+44]
	movaps	xmm0, xmm4
	movss	DWORD PTR _real$[ebp+12], xmm1

; 346  : 		dual.y =  static_cast<T>(0.5) * (-x[0].w * real.z + x[1].w * real.w + x[2].w * real.x);
; 347  : 		dual.z =  static_cast<T>(0.5) * ( x[0].w * real.y - x[1].w * real.x + x[2].w * real.w);
; 348  : 		dual.w = -static_cast<T>(0.5) * ( x[0].w * real.x + x[1].w * real.y + x[2].w * real.z);
; 349  : 		return tdualquat<T, P>(real, dual);

	lea	esi, DWORD PTR _real$[ebp]
	movss	DWORD PTR _real$1$[ebp], xmm1
	movaps	xmm1, xmm3
	mulss	xmm0, DWORD PTR _real$1$[ebp]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edi, eax
	mulss	xmm1, xmm7
	pop	ecx
	movss	DWORD PTR _real$[ebp+8], xmm7
	movss	DWORD PTR _real$[ebp+4], xmm6
	addss	xmm1, xmm0
	movss	DWORD PTR _real$[ebp], xmm5
	movaps	xmm0, xmm2
	movsd
	mulss	xmm0, xmm6
	pop	ecx
	movsd
	subss	xmm1, xmm0
	movaps	xmm0, xmm4
	mulss	xmm0, xmm7
	movsd
	mulss	xmm1, DWORD PTR __real@3f000000
	movsd
	lea	edi, DWORD PTR [eax+16]
	movss	DWORD PTR _dual$[ebp], xmm1
	lea	esi, DWORD PTR _dual$[ebp]
	movaps	xmm1, xmm3
	mulss	xmm1, DWORD PTR _real$1$[ebp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm2
	mulss	xmm0, xmm5
	addss	xmm1, xmm0
	movaps	xmm0, xmm3
	mulss	xmm0, xmm5
	mulss	xmm3, xmm6
	mulss	xmm1, DWORD PTR __real@3f000000
	movss	DWORD PTR _dual$[ebp+4], xmm1
	movaps	xmm1, xmm4
	mulss	xmm1, xmm6
	mulss	xmm4, xmm5
	subss	xmm1, xmm0
	movaps	xmm0, xmm2
	mulss	xmm0, DWORD PTR _real$1$[ebp]
	addss	xmm4, xmm3
	mulss	xmm2, xmm7
	addss	xmm1, xmm0
	addss	xmm4, xmm2
	mulss	xmm1, DWORD PTR __real@3f000000
	mulss	xmm4, DWORD PTR __real@bf000000
	movss	DWORD PTR _dual$[ebp+8], xmm1
	movss	DWORD PTR _dual$[ebp+12], xmm4
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi

; 350  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$dualquat_cast@M$00@glm@@YA?AU?$tdualquat@M$00@0@ABU?$tmat3x4@M$00@0@@Z ENDP ; glm::dualquat_cast<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??$dualquat_cast@N$01@glm@@YA?AU?$tdualquat@N$01@0@ABU?$tmat2x4@N$01@0@@Z
_TEXT	SEGMENT
$T1 = -64						; size = 32
$T2 = -32						; size = 32
___$ReturnUdt$ = 8					; size = 4
_x$ = 12						; size = 4
??$dualquat_cast@N$01@glm@@YA?AU?$tdualquat@N$01@0@ABU?$tmat2x4@N$01@0@@Z PROC ; glm::dualquat_cast<double,2>, COMDAT

; 295  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H

; 296  : 		return tdualquat<T, P>(
; 297  : 			tquat<T, P>( x[0].w, x[0].x, x[0].y, x[0].z ),
; 298  : 			tquat<T, P>( x[1].w, x[1].x, x[1].y, x[1].z ));

	mov	eax, DWORD PTR _x$[ebp]
	push	esi
	push	edi
	push	8
	movups	xmm0, XMMWORD PTR [eax+32]
	pop	ecx
	lea	esi, DWORD PTR $T2[ebp]
	movups	XMMWORD PTR $T1[ebp], xmm0
	push	8
	movups	xmm0, XMMWORD PTR [eax+48]
	movups	XMMWORD PTR $T1[ebp+16], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR $T2[ebp], xmm0
	movups	xmm0, XMMWORD PTR [eax+16]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edi, eax
	movups	XMMWORD PTR $T2[ebp+16], xmm0
	rep movsd
	pop	ecx
	lea	edi, DWORD PTR [eax+32]
	lea	esi, DWORD PTR $T1[ebp]
	rep movsd
	pop	edi
	pop	esi

; 299  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$dualquat_cast@N$01@glm@@YA?AU?$tdualquat@N$01@0@ABU?$tmat2x4@N$01@0@@Z ENDP ; glm::dualquat_cast<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??$dualquat_cast@N$01@glm@@YA?AU?$tdualquat@N$01@0@ABU?$tmat3x4@N$01@0@@Z
_TEXT	SEGMENT
_dual$ = -72						; size = 32
_real$ = -40						; size = 32
_real$1$ = -8						; size = 8
_r$1 = -8						; size = 8
_r$2 = -8						; size = 8
_r$3 = -8						; size = 8
_r$4 = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
_x$ = 12						; size = 4
??$dualquat_cast@N$01@glm@@YA?AU?$tdualquat@N$01@0@ABU?$tmat3x4@N$01@0@@Z PROC ; glm::dualquat_cast<double,2>, COMDAT

; 303  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	esi

; 304  : 		tquat<T, P> real(uninitialize);
; 305  : 		
; 306  : 		T const trace = x[0].x + x[1].y + x[2].z;

	mov	esi, DWORD PTR _x$[ebp]
	push	edi
	movsd	xmm0, QWORD PTR [esi]
	movsd	xmm1, QWORD PTR [esi+40]
	movapd	xmm3, xmm0
	movsd	xmm2, QWORD PTR [esi+80]
	addsd	xmm3, xmm1
	addsd	xmm3, xmm2

; 307  : 		if(trace > static_cast<T>(0))

	comisd	xmm3, QWORD PTR __real@0000000000000000
	jbe	SHORT $LN6@dualquat_c

; 308  : 		{
; 309  : 			T const r = sqrt(T(1) + trace);

	addsd	xmm3, QWORD PTR __real@3ff0000000000000
	push	ecx
	push	ecx
	movsd	QWORD PTR [esp], xmm3
	call	_sqrt

; 310  : 			T const invr = static_cast<T>(0.5) / r;

	movsd	xmm0, QWORD PTR __real@3fe0000000000000
	fstp	QWORD PTR _r$4[ebp]
	movsd	xmm1, QWORD PTR _r$4[ebp]
	divsd	xmm0, xmm1

; 311  : 			real.w = static_cast<T>(0.5) * r;
; 312  : 			real.x = (x[2].y - x[1].z) * invr;
; 313  : 			real.y = (x[0].z - x[2].x) * invr;
; 314  : 			real.z = (x[1].x - x[0].y) * invr;

	movsd	xmm7, QWORD PTR [esi+32]
	subsd	xmm7, QWORD PTR [esi+8]
	movsd	xmm5, QWORD PTR [esi+72]
	movsd	xmm6, QWORD PTR [esi+16]
	mulsd	xmm1, QWORD PTR __real@3fe0000000000000
	subsd	xmm5, QWORD PTR [esi+48]
	subsd	xmm6, QWORD PTR [esi+64]
	mulsd	xmm7, xmm0

; 315  : 		}
; 316  : 		else if(x[0].x > x[1].y && x[0].x > x[2].z)

	jmp	$LN123@dualquat_c
$LN6@dualquat_c:
	comisd	xmm0, xmm1
	jbe	SHORT $LN4@dualquat_c
	comisd	xmm0, xmm2
	jbe	SHORT $LN4@dualquat_c

; 317  : 		{
; 318  : 			T const r = sqrt(T(1) + x[0].x - x[1].y - x[2].z);

	addsd	xmm0, QWORD PTR __real@3ff0000000000000
	push	ecx
	push	ecx
	subsd	xmm0, xmm1
	subsd	xmm0, xmm2
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt

; 319  : 			T const invr = static_cast<T>(0.5) / r;

	movsd	xmm0, QWORD PTR __real@3fe0000000000000
	fstp	QWORD PTR _r$3[ebp]
	movsd	xmm5, QWORD PTR _r$3[ebp]
	divsd	xmm0, xmm5

; 320  : 			real.x = static_cast<T>(0.5)*r;
; 321  : 			real.y = (x[1].x + x[0].y) * invr;
; 322  : 			real.z = (x[0].z + x[2].x) * invr;

	movsd	xmm7, QWORD PTR [esi+64]

; 323  : 			real.w = (x[2].y - x[1].z) * invr;

	movsd	xmm1, QWORD PTR [esi+72]
	addsd	xmm7, QWORD PTR [esi+16]
	subsd	xmm1, QWORD PTR [esi+48]
	movsd	xmm6, QWORD PTR [esi+32]
	mulsd	xmm5, QWORD PTR __real@3fe0000000000000
	addsd	xmm6, QWORD PTR [esi+8]
	mulsd	xmm7, xmm0
	mulsd	xmm1, xmm0

; 324  : 		}
; 325  : 		else if(x[1].y > x[2].z)

	jmp	$LN124@dualquat_c
$LN4@dualquat_c:
	comisd	xmm1, xmm2

; 326  : 		{
; 327  : 			T const r = sqrt(T(1) + x[1].y - x[0].x - x[2].z);

	push	ecx
	push	ecx
	jbe	SHORT $LN2@dualquat_c
	addsd	xmm1, QWORD PTR __real@3ff0000000000000
	subsd	xmm1, xmm0
	subsd	xmm1, xmm2
	movsd	QWORD PTR [esp], xmm1
	call	_sqrt

; 328  : 			T const invr = static_cast<T>(0.5) / r;

	movsd	xmm0, QWORD PTR __real@3fe0000000000000
	fstp	QWORD PTR _r$2[ebp]
	movsd	xmm6, QWORD PTR _r$2[ebp]
	divsd	xmm0, xmm6

; 329  : 			real.x = (x[1].x + x[0].y) * invr;

	movsd	xmm5, QWORD PTR [esi+32]

; 330  : 			real.y = static_cast<T>(0.5) * r;
; 331  : 			real.z = (x[2].y + x[1].z) * invr;

	movsd	xmm7, QWORD PTR [esi+72]

; 332  : 			real.w = (x[0].z - x[2].x) * invr;

	movsd	xmm1, QWORD PTR [esi+16]
	addsd	xmm5, QWORD PTR [esi+8]
	addsd	xmm7, QWORD PTR [esi+48]
	subsd	xmm1, QWORD PTR [esi+64]
	mulsd	xmm6, QWORD PTR __real@3fe0000000000000
	mulsd	xmm5, xmm0
	mulsd	xmm7, xmm0
	mulsd	xmm1, xmm0

; 333  : 		}
; 334  : 		else

	jmp	SHORT $LN125@dualquat_c
$LN2@dualquat_c:

; 335  : 		{
; 336  : 			T const r = sqrt(T(1) + x[2].z - x[0].x - x[1].y);

	addsd	xmm2, QWORD PTR __real@3ff0000000000000
	subsd	xmm2, xmm0
	subsd	xmm2, xmm1
	movsd	QWORD PTR [esp], xmm2
	call	_sqrt

; 337  : 			T const invr = static_cast<T>(0.5) / r;

	movsd	xmm0, QWORD PTR __real@3fe0000000000000
	fstp	QWORD PTR _r$1[ebp]
	movsd	xmm7, QWORD PTR _r$1[ebp]
	divsd	xmm0, xmm7

; 340  : 			real.z = static_cast<T>(0.5) * r;
; 341  : 			real.w = (x[1].x - x[0].y) * invr;

	movsd	xmm1, QWORD PTR [esi+32]
	subsd	xmm1, QWORD PTR [esi+8]
	movsd	xmm5, QWORD PTR [esi+64]
	movsd	xmm6, QWORD PTR [esi+72]
	addsd	xmm5, QWORD PTR [esi+16]
	addsd	xmm6, QWORD PTR [esi+48]
	mulsd	xmm7, QWORD PTR __real@3fe0000000000000
	mulsd	xmm1, xmm0
$LN123@dualquat_c:

; 338  : 			real.x = (x[0].z + x[2].x) * invr;

	mulsd	xmm5, xmm0
$LN124@dualquat_c:

; 339  : 			real.y = (x[2].y + x[1].z) * invr;

	mulsd	xmm6, xmm0
$LN125@dualquat_c:

; 342  : 		}
; 343  : 		
; 344  : 		tquat<T, P> dual(uninitialize);
; 345  : 		dual.x =  static_cast<T>(0.5) * ( x[0].w * real.w + x[1].w * real.z - x[2].w * real.y);

	movsd	xmm3, QWORD PTR [esi+56]
	movsd	xmm4, QWORD PTR [esi+24]
	movsd	xmm2, QWORD PTR [esi+88]
	movapd	xmm0, xmm4
	movsd	QWORD PTR _real$1$[ebp], xmm1

; 346  : 		dual.y =  static_cast<T>(0.5) * (-x[0].w * real.z + x[1].w * real.w + x[2].w * real.x);
; 347  : 		dual.z =  static_cast<T>(0.5) * ( x[0].w * real.y - x[1].w * real.x + x[2].w * real.w);
; 348  : 		dual.w = -static_cast<T>(0.5) * ( x[0].w * real.x + x[1].w * real.y + x[2].w * real.z);
; 349  : 		return tdualquat<T, P>(real, dual);

	lea	esi, DWORD PTR _real$[ebp]
	mulsd	xmm0, QWORD PTR _real$1$[ebp]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edi, eax
	movsd	QWORD PTR _real$[ebp+24], xmm1
	movaps	xmm1, xmm3
	mulsd	xmm1, xmm7
	pop	ecx
	pop	ecx
	push	8
	pop	ecx
	addsd	xmm1, xmm0
	movsd	QWORD PTR _real$[ebp+16], xmm7
	movapd	xmm0, xmm2
	movsd	QWORD PTR _real$[ebp+8], xmm6
	mulsd	xmm0, xmm6
	push	8
	movsd	QWORD PTR _real$[ebp], xmm5
	rep movsd
	subsd	xmm1, xmm0
	movapd	xmm0, xmm4
	mulsd	xmm0, xmm7
	lea	edi, DWORD PTR [eax+32]
	pop	ecx
	lea	esi, DWORD PTR _dual$[ebp]
	mulsd	xmm1, QWORD PTR __real@3fe0000000000000
	movsd	QWORD PTR _dual$[ebp], xmm1
	movaps	xmm1, xmm3
	mulsd	xmm1, QWORD PTR _real$1$[ebp]
	subsd	xmm1, xmm0
	movapd	xmm0, xmm2
	mulsd	xmm0, xmm5
	addsd	xmm1, xmm0
	movapd	xmm0, xmm3
	mulsd	xmm0, xmm5
	mulsd	xmm3, xmm6
	mulsd	xmm1, QWORD PTR __real@3fe0000000000000
	movsd	QWORD PTR _dual$[ebp+8], xmm1
	movaps	xmm1, xmm4
	mulsd	xmm1, xmm6
	mulsd	xmm4, xmm5
	subsd	xmm1, xmm0
	movapd	xmm0, xmm2
	mulsd	xmm0, QWORD PTR _real$1$[ebp]
	addsd	xmm4, xmm3
	mulsd	xmm2, xmm7
	addsd	xmm1, xmm0
	addsd	xmm4, xmm2
	mulsd	xmm1, QWORD PTR __real@3fe0000000000000
	mulsd	xmm4, QWORD PTR __real@bfe0000000000000
	movsd	QWORD PTR _dual$[ebp+16], xmm1
	movsd	QWORD PTR _dual$[ebp+24], xmm4
	rep movsd
	pop	edi
	pop	esi

; 350  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$dualquat_cast@N$01@glm@@YA?AU?$tdualquat@N$01@0@ABU?$tmat3x4@N$01@0@@Z ENDP ; glm::dualquat_cast<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??$dualquat_cast@M$01@glm@@YA?AU?$tdualquat@M$01@0@ABU?$tmat2x4@M$01@0@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 16
$T2 = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
_x$ = 12						; size = 4
??$dualquat_cast@M$01@glm@@YA?AU?$tdualquat@M$01@0@ABU?$tmat2x4@M$01@0@@Z PROC ; glm::dualquat_cast<float,2>, COMDAT

; 295  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H

; 296  : 		return tdualquat<T, P>(
; 297  : 			tquat<T, P>( x[0].w, x[0].x, x[0].y, x[0].z ),
; 298  : 			tquat<T, P>( x[1].w, x[1].x, x[1].y, x[1].z ));

	mov	eax, DWORD PTR _x$[ebp]
	push	esi
	push	edi
	lea	esi, DWORD PTR $T2[ebp]
	movups	xmm0, XMMWORD PTR [eax+16]
	movups	XMMWORD PTR $T1[ebp], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edi, eax
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd
	movsd
	movsd
	movsd
	lea	edi, DWORD PTR [eax+16]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi

; 299  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$dualquat_cast@M$01@glm@@YA?AU?$tdualquat@M$01@0@ABU?$tmat2x4@M$01@0@@Z ENDP ; glm::dualquat_cast<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??$dualquat_cast@M$01@glm@@YA?AU?$tdualquat@M$01@0@ABU?$tmat3x4@M$01@0@@Z
_TEXT	SEGMENT
_dual$ = -32						; size = 16
_real$ = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
tv701 = 12						; size = 4
tv687 = 12						; size = 4
tv674 = 12						; size = 4
tv662 = 12						; size = 4
_real$1$ = 12						; size = 4
_r$1 = 12						; size = 4
_r$2 = 12						; size = 4
_r$3 = 12						; size = 4
_r$4 = 12						; size = 4
_x$ = 12						; size = 4
??$dualquat_cast@M$01@glm@@YA?AU?$tdualquat@M$01@0@ABU?$tmat3x4@M$01@0@@Z PROC ; glm::dualquat_cast<float,2>, COMDAT

; 303  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	esi

; 304  : 		tquat<T, P> real(uninitialize);
; 305  : 		
; 306  : 		T const trace = x[0].x + x[1].y + x[2].z;

	mov	esi, DWORD PTR _x$[ebp]
	push	edi
	movss	xmm0, DWORD PTR [esi]
	movss	xmm1, DWORD PTR [esi+20]
	movaps	xmm3, xmm0
	movss	xmm2, DWORD PTR [esi+40]
	addss	xmm3, xmm1
	addss	xmm3, xmm2

; 307  : 		if(trace > static_cast<T>(0))

	comiss	xmm3, DWORD PTR __real@00000000
	jbe	SHORT $LN6@dualquat_c

; 308  : 		{
; 309  : 			T const r = sqrt(T(1) + trace);

	addss	xmm3, DWORD PTR __real@3f800000
	xorps	xmm0, xmm0
	push	ecx
	push	ecx
	cvtss2sd xmm0, xmm3
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt

; 310  : 			T const invr = static_cast<T>(0.5) / r;

	movss	xmm0, DWORD PTR __real@3f000000
	fstp	DWORD PTR tv701[ebp]
	fld	DWORD PTR tv701[ebp]

; 311  : 			real.w = static_cast<T>(0.5) * r;
; 312  : 			real.x = (x[2].y - x[1].z) * invr;
; 313  : 			real.y = (x[0].z - x[2].x) * invr;
; 314  : 			real.z = (x[1].x - x[0].y) * invr;

	movss	xmm7, DWORD PTR [esi+16]
	fstp	DWORD PTR _r$4[ebp]
	movss	xmm1, DWORD PTR _r$4[ebp]
	subss	xmm7, DWORD PTR [esi+4]
	divss	xmm0, xmm1
	movss	xmm5, DWORD PTR [esi+36]
	movss	xmm6, DWORD PTR [esi+8]
	mulss	xmm1, DWORD PTR __real@3f000000
	subss	xmm5, DWORD PTR [esi+24]
	subss	xmm6, DWORD PTR [esi+32]
	mulss	xmm7, xmm0

; 315  : 		}
; 316  : 		else if(x[0].x > x[1].y && x[0].x > x[2].z)

	jmp	$LN139@dualquat_c
$LN6@dualquat_c:
	comiss	xmm0, xmm1
	jbe	SHORT $LN4@dualquat_c
	comiss	xmm0, xmm2
	jbe	SHORT $LN4@dualquat_c

; 317  : 		{
; 318  : 			T const r = sqrt(T(1) + x[0].x - x[1].y - x[2].z);

	addss	xmm0, DWORD PTR __real@3f800000
	push	ecx
	push	ecx
	subss	xmm0, xmm1
	subss	xmm0, xmm2
	cvtps2pd xmm0, xmm0
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt

; 319  : 			T const invr = static_cast<T>(0.5) / r;

	movss	xmm0, DWORD PTR __real@3f000000
	fstp	DWORD PTR tv687[ebp]
	fld	DWORD PTR tv687[ebp]

; 320  : 			real.x = static_cast<T>(0.5)*r;
; 321  : 			real.y = (x[1].x + x[0].y) * invr;
; 322  : 			real.z = (x[0].z + x[2].x) * invr;

	movss	xmm7, DWORD PTR [esi+32]

; 323  : 			real.w = (x[2].y - x[1].z) * invr;

	movss	xmm1, DWORD PTR [esi+36]
	fstp	DWORD PTR _r$3[ebp]
	movss	xmm5, DWORD PTR _r$3[ebp]
	addss	xmm7, DWORD PTR [esi+8]
	subss	xmm1, DWORD PTR [esi+24]
	divss	xmm0, xmm5
	movss	xmm6, DWORD PTR [esi+16]
	mulss	xmm5, DWORD PTR __real@3f000000
	addss	xmm6, DWORD PTR [esi+4]
	mulss	xmm7, xmm0
	mulss	xmm1, xmm0

; 324  : 		}
; 325  : 		else if(x[1].y > x[2].z)

	jmp	$LN140@dualquat_c
$LN4@dualquat_c:
	comiss	xmm1, xmm2

; 326  : 		{
; 327  : 			T const r = sqrt(T(1) + x[1].y - x[0].x - x[2].z);

	push	ecx
	push	ecx
	jbe	SHORT $LN2@dualquat_c
	addss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	subss	xmm1, xmm2
	cvtps2pd xmm0, xmm1
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt

; 328  : 			T const invr = static_cast<T>(0.5) / r;

	movss	xmm0, DWORD PTR __real@3f000000
	fstp	DWORD PTR tv674[ebp]
	fld	DWORD PTR tv674[ebp]

; 329  : 			real.x = (x[1].x + x[0].y) * invr;

	movss	xmm5, DWORD PTR [esi+16]

; 330  : 			real.y = static_cast<T>(0.5) * r;
; 331  : 			real.z = (x[2].y + x[1].z) * invr;

	movss	xmm7, DWORD PTR [esi+36]

; 332  : 			real.w = (x[0].z - x[2].x) * invr;

	movss	xmm1, DWORD PTR [esi+8]
	fstp	DWORD PTR _r$2[ebp]
	movss	xmm6, DWORD PTR _r$2[ebp]
	divss	xmm0, xmm6
	addss	xmm5, DWORD PTR [esi+4]
	addss	xmm7, DWORD PTR [esi+24]
	subss	xmm1, DWORD PTR [esi+32]
	mulss	xmm6, DWORD PTR __real@3f000000
	mulss	xmm5, xmm0
	mulss	xmm7, xmm0
	mulss	xmm1, xmm0

; 333  : 		}
; 334  : 		else

	jmp	SHORT $LN141@dualquat_c
$LN2@dualquat_c:

; 335  : 		{
; 336  : 			T const r = sqrt(T(1) + x[2].z - x[0].x - x[1].y);

	addss	xmm2, DWORD PTR __real@3f800000
	subss	xmm2, xmm0
	subss	xmm2, xmm1
	cvtps2pd xmm0, xmm2
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt

; 337  : 			T const invr = static_cast<T>(0.5) / r;

	movss	xmm0, DWORD PTR __real@3f000000
	fstp	DWORD PTR tv662[ebp]
	fld	DWORD PTR tv662[ebp]

; 340  : 			real.z = static_cast<T>(0.5) * r;
; 341  : 			real.w = (x[1].x - x[0].y) * invr;

	movss	xmm1, DWORD PTR [esi+16]
	fstp	DWORD PTR _r$1[ebp]
	movss	xmm7, DWORD PTR _r$1[ebp]
	subss	xmm1, DWORD PTR [esi+4]
	divss	xmm0, xmm7
	movss	xmm5, DWORD PTR [esi+32]
	movss	xmm6, DWORD PTR [esi+36]
	addss	xmm5, DWORD PTR [esi+8]
	addss	xmm6, DWORD PTR [esi+24]
	mulss	xmm7, DWORD PTR __real@3f000000
	mulss	xmm1, xmm0
$LN139@dualquat_c:

; 338  : 			real.x = (x[0].z + x[2].x) * invr;

	mulss	xmm5, xmm0
$LN140@dualquat_c:

; 339  : 			real.y = (x[2].y + x[1].z) * invr;

	mulss	xmm6, xmm0
$LN141@dualquat_c:

; 342  : 		}
; 343  : 		
; 344  : 		tquat<T, P> dual(uninitialize);
; 345  : 		dual.x =  static_cast<T>(0.5) * ( x[0].w * real.w + x[1].w * real.z - x[2].w * real.y);

	movss	xmm3, DWORD PTR [esi+28]
	movss	xmm4, DWORD PTR [esi+12]
	movss	xmm2, DWORD PTR [esi+44]
	movaps	xmm0, xmm4
	movss	DWORD PTR _real$[ebp+12], xmm1

; 346  : 		dual.y =  static_cast<T>(0.5) * (-x[0].w * real.z + x[1].w * real.w + x[2].w * real.x);
; 347  : 		dual.z =  static_cast<T>(0.5) * ( x[0].w * real.y - x[1].w * real.x + x[2].w * real.w);
; 348  : 		dual.w = -static_cast<T>(0.5) * ( x[0].w * real.x + x[1].w * real.y + x[2].w * real.z);
; 349  : 		return tdualquat<T, P>(real, dual);

	lea	esi, DWORD PTR _real$[ebp]
	movss	DWORD PTR _real$1$[ebp], xmm1
	movaps	xmm1, xmm3
	mulss	xmm0, DWORD PTR _real$1$[ebp]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edi, eax
	mulss	xmm1, xmm7
	pop	ecx
	movss	DWORD PTR _real$[ebp+8], xmm7
	movss	DWORD PTR _real$[ebp+4], xmm6
	addss	xmm1, xmm0
	movss	DWORD PTR _real$[ebp], xmm5
	movaps	xmm0, xmm2
	movsd
	mulss	xmm0, xmm6
	pop	ecx
	movsd
	subss	xmm1, xmm0
	movaps	xmm0, xmm4
	mulss	xmm0, xmm7
	movsd
	mulss	xmm1, DWORD PTR __real@3f000000
	movsd
	lea	edi, DWORD PTR [eax+16]
	movss	DWORD PTR _dual$[ebp], xmm1
	lea	esi, DWORD PTR _dual$[ebp]
	movaps	xmm1, xmm3
	mulss	xmm1, DWORD PTR _real$1$[ebp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm2
	mulss	xmm0, xmm5
	addss	xmm1, xmm0
	movaps	xmm0, xmm3
	mulss	xmm0, xmm5
	mulss	xmm3, xmm6
	mulss	xmm1, DWORD PTR __real@3f000000
	movss	DWORD PTR _dual$[ebp+4], xmm1
	movaps	xmm1, xmm4
	mulss	xmm1, xmm6
	mulss	xmm4, xmm5
	subss	xmm1, xmm0
	movaps	xmm0, xmm2
	mulss	xmm0, DWORD PTR _real$1$[ebp]
	addss	xmm4, xmm3
	mulss	xmm2, xmm7
	addss	xmm1, xmm0
	addss	xmm4, xmm2
	mulss	xmm1, DWORD PTR __real@3f000000
	mulss	xmm4, DWORD PTR __real@bf000000
	movss	DWORD PTR _dual$[ebp+8], xmm1
	movss	DWORD PTR _dual$[ebp+12], xmm4
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi

; 350  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$dualquat_cast@M$01@glm@@YA?AU?$tdualquat@M$01@0@ABU?$tmat3x4@M$01@0@@Z ENDP ; glm::dualquat_cast<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??$mat4_cast@N$0A@@glm@@YA?AU?$tmat4x4@N$0A@@0@ABU?$tquat@N$0A@@0@@Z
_TEXT	SEGMENT
$T1 = -76						; size = 72
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_q$ = 12						; size = 4
??$mat4_cast@N$0A@@glm@@YA?AU?$tmat4x4@N$0A@@0@ABU?$tquat@N$0A@@0@@Z PROC ; glm::mat4_cast<double,0>, COMDAT

; 616  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, DWORD PTR _q$[ebp]

; 617  : 		return tmat4x4<T, P>(mat3_cast(q));

	lea	eax, DWORD PTR $T1[ebp]
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	push	eax
	call	??$mat3_cast@N$0A@@glm@@YA?AU?$tmat3x3@N$0A@@0@ABU?$tquat@N$0A@@0@@Z ; glm::mat3_cast<double,0>
	pop	ecx
	pop	ecx
	push	eax
	mov	ecx, esi
	call	??0?$tmat4x4@N$0A@@glm@@QAE@ABU?$tmat3x3@N$0A@@1@@Z ; glm::tmat4x4<double,0>::tmat4x4<double,0>

; 618  : 	}

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	mov	eax, esi
	xor	ecx, ebp
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
??$mat4_cast@N$0A@@glm@@YA?AU?$tmat4x4@N$0A@@0@ABU?$tquat@N$0A@@0@@Z ENDP ; glm::mat4_cast<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??$mat3_cast@N$0A@@glm@@YA?AU?$tmat3x3@N$0A@@0@ABU?$tquat@N$0A@@0@@Z
_TEXT	SEGMENT
_qyy$1$ = -32						; size = 8
_qyz$1$ = -24						; size = 8
_qxx$1$ = -16						; size = 8
_qxz$1$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
_q$ = 12						; size = 4
??$mat3_cast@N$0A@@glm@@YA?AU?$tmat3x3@N$0A@@0@ABU?$tquat@N$0A@@0@@Z PROC ; glm::mat3_cast<double,0>, COMDAT

; 588  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H

; 589  : 		tmat3x3<T, P> Result(T(1));

	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	push	ecx
	mov	ecx, esi
	movsd	QWORD PTR [esp], xmm0
	call	??0?$tmat3x3@N$0A@@glm@@QAE@N@Z		; glm::tmat3x3<double,0>::tmat3x3<double,0>

; 590  : 		T qxx(q.x * q.x);

	mov	eax, DWORD PTR _q$[ebp]
	movsd	xmm0, QWORD PTR [eax]

; 591  : 		T qyy(q.y * q.y);

	movsd	xmm1, QWORD PTR [eax+8]
	mulsd	xmm0, xmm0
	movapd	xmm4, xmm1
	mulsd	xmm4, xmm1

; 592  : 		T qzz(q.z * q.z);
; 593  : 		T qxz(q.x * q.z);
; 594  : 		T qxy(q.x * q.y);

	movapd	xmm3, xmm1
	mulsd	xmm3, QWORD PTR [eax]
	movsd	QWORD PTR _qxx$1$[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	movapd	xmm2, xmm0
	movsd	QWORD PTR _qyy$1$[ebp], xmm4
	mulsd	xmm2, QWORD PTR [eax]
	movapd	xmm7, xmm0
	mulsd	xmm7, xmm0
	movsd	QWORD PTR _qxz$1$[ebp], xmm2

; 595  : 		T qyz(q.y * q.z);

	movapd	xmm2, xmm0
	mulsd	xmm2, xmm1
	movsd	QWORD PTR _qyz$1$[ebp], xmm2

; 596  : 		T qwx(q.w * q.x);

	movsd	xmm2, QWORD PTR [eax+24]

; 597  : 		T qwy(q.w * q.y);

	movapd	xmm5, xmm2
	movapd	xmm6, xmm2
	mulsd	xmm6, QWORD PTR [eax]

; 598  : 		T qwz(q.w * q.z);
; 599  : 
; 600  : 		Result[0][0] = T(1) - T(2) * (qyy +  qzz);
; 601  : 		Result[0][1] = T(2) * (qxy + qwz);
; 602  : 		Result[0][2] = T(2) * (qxz - qwy);
; 603  : 
; 604  : 		Result[1][0] = T(2) * (qxy - qwz);
; 605  : 		Result[1][1] = T(1) - T(2) * (qxx +  qzz);
; 606  : 		Result[1][2] = T(2) * (qyz + qwx);
; 607  : 
; 608  : 		Result[2][0] = T(2) * (qxz + qwy);
; 609  : 		Result[2][1] = T(2) * (qyz - qwx);
; 610  : 		Result[2][2] = T(1) - T(2) * (qxx +  qyy);
; 611  : 		return Result;

	mov	eax, esi
	mulsd	xmm5, xmm1
	movapd	xmm1, xmm7
	mulsd	xmm2, xmm0
	addsd	xmm1, xmm4
	movsd	xmm4, QWORD PTR __real@4000000000000000
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	addsd	xmm7, QWORD PTR _qxx$1$[ebp]
	mulsd	xmm1, xmm4
	mulsd	xmm7, xmm4
	subsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR _qxz$1$[ebp]
	movsd	QWORD PTR [esi], xmm0
	movaps	xmm0, xmm2
	addsd	xmm0, xmm3
	subsd	xmm3, xmm2
	movsd	xmm2, QWORD PTR _qyz$1$[ebp]
	mulsd	xmm0, xmm4
	mulsd	xmm3, xmm4
	movsd	QWORD PTR [esi+8], xmm0
	movaps	xmm0, xmm1
	subsd	xmm0, xmm5
	addsd	xmm5, xmm1
	movsd	QWORD PTR [esi+24], xmm3
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	mulsd	xmm0, xmm4
	mulsd	xmm5, xmm4
	movsd	QWORD PTR [esi+16], xmm0
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	subsd	xmm0, xmm7
	movsd	QWORD PTR [esi+48], xmm5
	movsd	QWORD PTR [esi+32], xmm0
	movapd	xmm0, xmm6
	addsd	xmm0, xmm2
	subsd	xmm2, xmm6
	mulsd	xmm0, xmm4
	mulsd	xmm2, xmm4
	movsd	QWORD PTR [esi+40], xmm0
	movsd	xmm0, QWORD PTR _qyy$1$[ebp]
	addsd	xmm0, QWORD PTR _qxx$1$[ebp]
	movsd	QWORD PTR [esi+56], xmm2
	mulsd	xmm0, xmm4
	subsd	xmm1, xmm0
	movsd	QWORD PTR [esi+64], xmm1
	pop	esi

; 612  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$mat3_cast@N$0A@@glm@@YA?AU?$tmat3x3@N$0A@@0@ABU?$tquat@N$0A@@0@@Z ENDP ; glm::mat3_cast<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??$normalize@N$0A@@glm@@YA?AU?$tquat@N$0A@@0@ABU10@@Z
_TEXT	SEGMENT
_len$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
_q$ = 12						; size = 4
??$normalize@N$0A@@glm@@YA?AU?$tquat@N$0A@@0@ABU10@@Z PROC ; glm::normalize<double,0>, COMDAT

; 380  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	esi

; 381  : 		T len = length(q);

	mov	esi, DWORD PTR _q$[ebp]
	push	ecx
	push	ecx
	movsd	xmm3, QWORD PTR [esi]
	movsd	xmm2, QWORD PTR [esi+8]
	movsd	xmm1, QWORD PTR [esi+16]
	movsd	xmm0, QWORD PTR [esi+24]
	mulsd	xmm0, xmm0
	mulsd	xmm3, xmm3
	mulsd	xmm2, xmm2
	mulsd	xmm1, xmm1
	addsd	xmm2, xmm3
	addsd	xmm0, xmm1
	addsd	xmm0, xmm2
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt

; 382  : 		if(len <= T(0)) // Problem
; 383  : 			return tquat<T, P>(1, 0, 0, 0);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	xorps	xmm0, xmm0
	fstp	QWORD PTR _len$[ebp]
	comisd	xmm0, QWORD PTR _len$[ebp]
	pop	ecx
	pop	ecx
	jb	SHORT $LN1@normalize
	movups	XMMWORD PTR [eax], xmm0
	movsd	QWORD PTR [eax+16], xmm0
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR [eax+24], xmm0
	jmp	SHORT $LN2@normalize
$LN1@normalize:

; 384  : 		T oneOverLen = T(1) / len;

	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	divsd	xmm1, QWORD PTR _len$[ebp]

; 385  : 		return tquat<T, P>(q.w * oneOverLen, q.x * oneOverLen, q.y * oneOverLen, q.z * oneOverLen);

	movups	xmm0, XMMWORD PTR [esi]
	unpcklpd xmm1, xmm1
	mulpd	xmm0, xmm1
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [esi+16]
	mulpd	xmm0, xmm1
	movups	XMMWORD PTR [eax+16], xmm0
$LN2@normalize:
	pop	esi

; 386  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$normalize@N$0A@@glm@@YA?AU?$tquat@N$0A@@0@ABU10@@Z ENDP ; glm::normalize<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_dot@Utvec3@glm@@N$0A@$0A@@detail@glm@@SANABU?$tvec3@N$0A@@3@0@Z
_TEXT	SEGMENT
_tmp$ = -24						; size = 24
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?call@?$compute_dot@Utvec3@glm@@N$0A@$0A@@detail@glm@@SANABU?$tvec3@N$0A@@3@0@Z PROC ; glm::detail::compute_dot<glm::tvec3,double,0,0>::call, COMDAT

; 57   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 58   : 			tvec3<T, P> tmp(x * y);

	mov	ecx, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR _y$[ebp]
	movsd	xmm0, QWORD PTR [ecx]
	mulsd	xmm0, QWORD PTR [eax]
	fld	QWORD PTR [ecx+8]
	fmul	QWORD PTR [eax+8]
	movsd	QWORD PTR _tmp$[ebp], xmm0
	movsd	xmm0, QWORD PTR [ecx+16]
	mulsd	xmm0, QWORD PTR [eax+16]

; 59   : 			return tmp.x + tmp.y + tmp.z;

	fadd	QWORD PTR _tmp$[ebp]
	movsd	QWORD PTR _tmp$[ebp+16], xmm0
	fadd	QWORD PTR _tmp$[ebp+16]

; 60   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?call@?$compute_dot@Utvec3@glm@@N$0A@$0A@@detail@glm@@SANABU?$tvec3@N$0A@@3@0@Z ENDP ; glm::detail::compute_dot<glm::tvec3,double,0,0>::call
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\func_geometric.inl
;	COMDAT ??$cross@N$0A@@glm@@YA?AU?$tvec3@N$0A@@0@ABU10@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
??$cross@N$0A@@glm@@YA?AU?$tvec3@N$0A@@0@ABU10@0@Z PROC	; glm::cross<double,0>, COMDAT

; 180  : 	{

	push	ebp
	mov	ebp, esp

; 181  : 		return detail::compute_cross<T, P, detail::is_aligned<P>::value>::call(x, y);

	mov	ecx, DWORD PTR _y$[ebp]
	mov	edx, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movsd	xmm1, QWORD PTR [ecx+16]
	mulsd	xmm1, QWORD PTR [edx+8]
	movsd	xmm0, QWORD PTR [ecx+8]
	mulsd	xmm0, QWORD PTR [edx+16]
	movsd	xmm3, QWORD PTR [ecx]
	movsd	xmm2, QWORD PTR [edx]
	subsd	xmm1, xmm0
	movaps	xmm0, xmm2
	mulsd	xmm0, QWORD PTR [ecx+16]
	mulsd	xmm2, QWORD PTR [ecx+8]
	movsd	QWORD PTR [eax], xmm1
	movaps	xmm1, xmm3
	mulsd	xmm1, QWORD PTR [edx+16]
	mulsd	xmm3, QWORD PTR [edx+8]
	subsd	xmm1, xmm0
	subsd	xmm2, xmm3
	movsd	QWORD PTR [eax+8], xmm1
	movsd	QWORD PTR [eax+16], xmm2

; 182  : 	}

	pop	ebp
	ret	0
??$cross@N$0A@@glm@@YA?AU?$tvec3@N$0A@@0@ABU10@0@Z ENDP	; glm::cross<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\func_trigonometric.inl
;	COMDAT ??$sin@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@N$0A@@0@ABU10@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
??$sin@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@N$0A@@0@ABU10@@Z PROC ; glm::sin<double,0,glm::tvec3>, COMDAT

; 45   : 	{

	push	ebp
	mov	ebp, esp

; 46   : 		return detail::functor1<T, T, P, vecType>::call(sin, v);

	push	DWORD PTR _v$[ebp]
	push	OFFSET _sin
	push	DWORD PTR ___$ReturnUdt$[ebp]
	call	?call@?$functor1@NN$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@N$0A@@3@P6ANN@ZABU43@@Z ; glm::detail::functor1<double,double,0,glm::tvec3>::call
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	add	esp, 12					; 0000000cH

; 47   : 	}

	pop	ebp
	ret	0
??$sin@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@N$0A@@0@ABU10@@Z ENDP ; glm::sin<double,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\func_trigonometric.inl
;	COMDAT ??$cos@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@N$0A@@0@ABU10@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
??$cos@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@N$0A@@0@ABU10@@Z PROC ; glm::cos<double,0,glm::tvec3>, COMDAT

; 54   : 	{

	push	ebp
	mov	ebp, esp

; 55   : 		return detail::functor1<T, T, P, vecType>::call(cos, v);

	push	DWORD PTR _v$[ebp]
	push	OFFSET _cos
	push	DWORD PTR ___$ReturnUdt$[ebp]
	call	?call@?$functor1@NN$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@N$0A@@3@P6ANN@ZABU43@@Z ; glm::detail::functor1<double,double,0,glm::tvec3>::call
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	add	esp, 12					; 0000000cH

; 56   : 	}

	pop	ebp
	ret	0
??$cos@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@N$0A@@0@ABU10@@Z ENDP ; glm::cos<double,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?DN$0A@@glm@@YA?AU?$tvec3@N$0A@@0@ABU10@N@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
_scalar$ = 16						; size = 8
??$?DN$0A@@glm@@YA?AU?$tvec3@N$0A@@0@ABU10@N@Z PROC	; glm::operator*<double,0>, COMDAT

; 628  : 	{

	push	ebp
	mov	ebp, esp

; 629  : 		return tvec3<T, P>(
; 630  : 			v.x * scalar,
; 631  : 			v.y * scalar,
; 632  : 			v.z * scalar);

	mov	ecx, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movsd	xmm0, QWORD PTR [ecx]
	mulsd	xmm0, QWORD PTR _scalar$[ebp]
	movsd	QWORD PTR [eax], xmm0
	movsd	xmm0, QWORD PTR [ecx+8]
	mulsd	xmm0, QWORD PTR _scalar$[ebp]
	movsd	QWORD PTR [eax+8], xmm0
	movsd	xmm0, QWORD PTR [ecx+16]
	mulsd	xmm0, QWORD PTR _scalar$[ebp]
	movsd	QWORD PTR [eax+16], xmm0

; 633  : 	}

	pop	ebp
	ret	0
??$?DN$0A@@glm@@YA?AU?$tvec3@N$0A@@0@ABU10@N@Z ENDP	; glm::operator*<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??$quat_cast@N$0A@@glm@@YA?AU?$tquat@N$0A@@0@ABU?$tmat3x3@N$0A@@0@@Z
_TEXT	SEGMENT
_biggestVal$ = -8					; size = 8
___$ReturnUdt$ = 8					; size = 4
_m$ = 12						; size = 4
??$quat_cast@N$0A@@glm@@YA?AU?$tquat@N$0A@@0@ABU?$tmat3x3@N$0A@@0@@Z PROC ; glm::quat_cast<double,0>, COMDAT

; 622  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	esi

; 623  : 		T fourXSquaredMinus1 = m[0][0] - m[1][1] - m[2][2];

	mov	esi, DWORD PTR _m$[ebp]
	push	edi

; 624  : 		T fourYSquaredMinus1 = m[1][1] - m[0][0] - m[2][2];
; 625  : 		T fourZSquaredMinus1 = m[2][2] - m[0][0] - m[1][1];
; 626  : 		T fourWSquaredMinus1 = m[0][0] + m[1][1] + m[2][2];
; 627  : 
; 628  : 		int biggestIndex = 0;

	xor	edi, edi
	movsd	xmm0, QWORD PTR [esi+64]
	movsd	xmm1, QWORD PTR [esi+32]
	movapd	xmm2, xmm0
	subsd	xmm2, QWORD PTR [esi]
	movsd	xmm4, QWORD PTR [esi]
	movapd	xmm3, xmm1
	subsd	xmm3, QWORD PTR [esi]
	subsd	xmm4, xmm1
	subsd	xmm2, xmm1
	addsd	xmm1, QWORD PTR [esi]
	subsd	xmm3, xmm0
	subsd	xmm4, xmm0
	addsd	xmm1, xmm0

; 629  : 		T fourBiggestSquaredMinus1 = fourWSquaredMinus1;
; 630  : 		if(fourXSquaredMinus1 > fourBiggestSquaredMinus1)

	comisd	xmm4, xmm1
	jbe	SHORT $LN10@quat_cast

; 631  : 		{
; 632  : 			fourBiggestSquaredMinus1 = fourXSquaredMinus1;

	movaps	xmm1, xmm4

; 633  : 			biggestIndex = 1;

	inc	edi
$LN10@quat_cast:

; 634  : 		}
; 635  : 		if(fourYSquaredMinus1 > fourBiggestSquaredMinus1)

	comisd	xmm3, xmm1
	jbe	SHORT $LN9@quat_cast

; 636  : 		{
; 637  : 			fourBiggestSquaredMinus1 = fourYSquaredMinus1;
; 638  : 			biggestIndex = 2;

	push	2
	movapd	xmm1, xmm3
	pop	edi
$LN9@quat_cast:

; 639  : 		}
; 640  : 		if(fourZSquaredMinus1 > fourBiggestSquaredMinus1)

	comisd	xmm2, xmm1
	jbe	SHORT $LN8@quat_cast

; 641  : 		{
; 642  : 			fourBiggestSquaredMinus1 = fourZSquaredMinus1;
; 643  : 			biggestIndex = 3;

	push	3
	movapd	xmm1, xmm2
	pop	edi
$LN8@quat_cast:

; 644  : 		}
; 645  : 
; 646  : 		T biggestVal = sqrt(fourBiggestSquaredMinus1 + T(1)) * T(0.5);

	addsd	xmm1, QWORD PTR __real@3ff0000000000000
	push	ecx
	push	ecx
	movsd	QWORD PTR [esp], xmm1
	call	_sqrt
	fmul	QWORD PTR __real@3fe0000000000000

; 647  : 		T mult = static_cast<T>(0.25) / biggestVal;

	movsd	xmm1, QWORD PTR __real@3fd0000000000000

; 648  : 
; 649  : 		tquat<T, P> Result(uninitialize);
; 650  : 		switch(biggestIndex)

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	ecx
	pop	ecx
	fstp	QWORD PTR _biggestVal$[ebp]
	movsd	xmm2, QWORD PTR _biggestVal$[ebp]
	divsd	xmm1, xmm2
	sub	edi, 0
	je	$LN5@quat_cast
	dec	edi
	je	$LN4@quat_cast
	dec	edi
	je	SHORT $LN3@quat_cast
	dec	edi
	jne	$LN6@quat_cast

; 670  : 		case 3:
; 671  : 			Result.w = (m[0][1] - m[1][0]) * mult;

	movsd	xmm0, QWORD PTR [esi+8]
	subsd	xmm0, QWORD PTR [esi+24]

; 672  : 			Result.x = (m[2][0] + m[0][2]) * mult;
; 673  : 			Result.y = (m[1][2] + m[2][1]) * mult;
; 674  : 			Result.z = biggestVal;

	movsd	QWORD PTR [eax+16], xmm2
	mulsd	xmm0, xmm1
	movsd	QWORD PTR [eax+24], xmm0
	movsd	xmm0, QWORD PTR [esi+48]
	addsd	xmm0, QWORD PTR [esi+16]
	mulsd	xmm0, xmm1
	movsd	QWORD PTR [eax], xmm0
	movsd	xmm0, QWORD PTR [esi+56]
	addsd	xmm0, QWORD PTR [esi+40]
	mulsd	xmm0, xmm1
	movsd	QWORD PTR [eax+8], xmm0

; 675  : 			break;

	jmp	$LN6@quat_cast
$LN3@quat_cast:

; 664  : 		case 2:
; 665  : 			Result.w = (m[2][0] - m[0][2]) * mult;

	movsd	xmm0, QWORD PTR [esi+48]
	subsd	xmm0, QWORD PTR [esi+16]

; 666  : 			Result.x = (m[0][1] + m[1][0]) * mult;
; 667  : 			Result.y = biggestVal;

	movsd	QWORD PTR [eax+8], xmm2
	mulsd	xmm0, xmm1
	movsd	QWORD PTR [eax+24], xmm0
	movsd	xmm0, QWORD PTR [esi+24]
	addsd	xmm0, QWORD PTR [esi+8]
	mulsd	xmm0, xmm1
	movsd	QWORD PTR [eax], xmm0

; 668  : 			Result.z = (m[1][2] + m[2][1]) * mult;

	movsd	xmm0, QWORD PTR [esi+56]
	addsd	xmm0, QWORD PTR [esi+40]

; 669  : 			break;

	jmp	SHORT $LN159@quat_cast
$LN4@quat_cast:

; 657  : 			break;
; 658  : 		case 1:
; 659  : 			Result.w = (m[1][2] - m[2][1]) * mult;

	movsd	xmm0, QWORD PTR [esi+40]
	subsd	xmm0, QWORD PTR [esi+56]

; 660  : 			Result.x = biggestVal;

	movsd	QWORD PTR [eax], xmm2
	mulsd	xmm0, xmm1
	movsd	QWORD PTR [eax+24], xmm0

; 661  : 			Result.y = (m[0][1] + m[1][0]) * mult;

	movsd	xmm0, QWORD PTR [esi+24]
	addsd	xmm0, QWORD PTR [esi+8]
	mulsd	xmm0, xmm1
	movsd	QWORD PTR [eax+8], xmm0

; 662  : 			Result.z = (m[2][0] + m[0][2]) * mult;

	movsd	xmm0, QWORD PTR [esi+48]
	addsd	xmm0, QWORD PTR [esi+16]

; 663  : 			break;

	jmp	SHORT $LN159@quat_cast
$LN5@quat_cast:

; 651  : 		{
; 652  : 		case 0:
; 653  : 			Result.w = biggestVal;
; 654  : 			Result.x = (m[1][2] - m[2][1]) * mult;

	movsd	xmm0, QWORD PTR [esi+40]
	subsd	xmm0, QWORD PTR [esi+56]
	movsd	QWORD PTR [eax+24], xmm2
	mulsd	xmm0, xmm1
	movsd	QWORD PTR [eax], xmm0

; 655  : 			Result.y = (m[2][0] - m[0][2]) * mult;

	movsd	xmm0, QWORD PTR [esi+48]
	subsd	xmm0, QWORD PTR [esi+16]
	mulsd	xmm0, xmm1
	movsd	QWORD PTR [eax+8], xmm0

; 656  : 			Result.z = (m[0][1] - m[1][0]) * mult;

	movsd	xmm0, QWORD PTR [esi+8]
	subsd	xmm0, QWORD PTR [esi+24]
$LN159@quat_cast:
	mulsd	xmm0, xmm1
	movsd	QWORD PTR [eax+16], xmm0
$LN6@quat_cast:
	pop	edi
	pop	esi

; 676  : 			
; 677  : 		default:					// Silence a -Wswitch-default warning in GCC. Should never actually get here. Assert is just for sanity.
; 678  : 			assert(false);
; 679  : 			break;
; 680  : 		}
; 681  : 		return Result;
; 682  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$quat_cast@N$0A@@glm@@YA?AU?$tquat@N$0A@@0@ABU?$tmat3x3@N$0A@@0@@Z ENDP ; glm::quat_cast<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??$quat_cast@N$0A@@glm@@YA?AU?$tquat@N$0A@@0@ABU?$tmat4x4@N$0A@@0@@Z
_TEXT	SEGMENT
$T1 = -76						; size = 72
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_m4$ = 12						; size = 4
??$quat_cast@N$0A@@glm@@YA?AU?$tquat@N$0A@@0@ABU?$tmat4x4@N$0A@@0@@Z PROC ; glm::quat_cast<double,0>, COMDAT

; 686  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, DWORD PTR _m4$[ebp]
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]

; 687  : 		return quat_cast(tmat3x3<T, P>(m4));

	push	ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$tmat3x3@N$0A@@glm@@QAE@ABU?$tmat4x4@N$0A@@1@@Z ; glm::tmat3x3<double,0>::tmat3x3<double,0>
	push	eax
	push	esi
	call	??$quat_cast@N$0A@@glm@@YA?AU?$tquat@N$0A@@0@ABU?$tmat3x3@N$0A@@0@@Z ; glm::quat_cast<double,0>
	pop	ecx
	pop	ecx

; 688  : 	}

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	mov	eax, esi
	xor	ecx, ebp
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
??$quat_cast@N$0A@@glm@@YA?AU?$tquat@N$0A@@0@ABU?$tmat4x4@N$0A@@0@@Z ENDP ; glm::quat_cast<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??$mat4_cast@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@ABU?$tquat@M$0A@@0@@Z
_TEXT	SEGMENT
$T1 = -40						; size = 36
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_q$ = 12						; size = 4
??$mat4_cast@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@ABU?$tquat@M$0A@@0@@Z PROC ; glm::mat4_cast<float,0>, COMDAT

; 616  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, DWORD PTR _q$[ebp]

; 617  : 		return tmat4x4<T, P>(mat3_cast(q));

	lea	eax, DWORD PTR $T1[ebp]
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	push	eax
	call	??$mat3_cast@M$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@ABU?$tquat@M$0A@@0@@Z ; glm::mat3_cast<float,0>
	pop	ecx
	pop	ecx
	push	eax
	mov	ecx, esi
	call	??0?$tmat4x4@M$0A@@glm@@QAE@ABU?$tmat3x3@M$0A@@1@@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>

; 618  : 	}

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	mov	eax, esi
	xor	ecx, ebp
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
??$mat4_cast@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@ABU?$tquat@M$0A@@0@@Z ENDP ; glm::mat4_cast<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??$mat3_cast@M$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@ABU?$tquat@M$0A@@0@@Z
_TEXT	SEGMENT
_qyy$1$ = -8						; size = 4
_qyz$1$ = -4						; size = 4
_qxz$1$ = 8						; size = 4
___$ReturnUdt$ = 8					; size = 4
_qxx$1$ = 12						; size = 4
_q$ = 12						; size = 4
??$mat3_cast@M$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@ABU?$tquat@M$0A@@0@@Z PROC ; glm::mat3_cast<float,0>, COMDAT

; 588  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	esi

; 589  : 		tmat3x3<T, P> Result(T(1));

	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	mov	ecx, esi
	mov	DWORD PTR [esp], 1065353216		; 3f800000H
	call	??0?$tmat3x3@M$0A@@glm@@QAE@M@Z		; glm::tmat3x3<float,0>::tmat3x3<float,0>

; 590  : 		T qxx(q.x * q.x);

	mov	eax, DWORD PTR _q$[ebp]
	movss	xmm0, DWORD PTR [eax]

; 591  : 		T qyy(q.y * q.y);

	movss	xmm1, DWORD PTR [eax+4]
	mulss	xmm0, xmm0
	movaps	xmm4, xmm1
	mulss	xmm4, xmm1

; 592  : 		T qzz(q.z * q.z);
; 593  : 		T qxz(q.x * q.z);
; 594  : 		T qxy(q.x * q.y);

	movaps	xmm3, xmm1
	movss	DWORD PTR _qxx$1$[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movaps	xmm2, xmm0
	mulss	xmm3, DWORD PTR [eax]
	mulss	xmm2, DWORD PTR [eax]
	movaps	xmm7, xmm0
	mulss	xmm7, xmm0
	movss	DWORD PTR _qxz$1$[ebp], xmm2

; 595  : 		T qyz(q.y * q.z);

	movaps	xmm2, xmm0
	mulss	xmm2, xmm1
	movss	DWORD PTR _qyy$1$[ebp], xmm4
	movss	DWORD PTR _qyz$1$[ebp], xmm2

; 596  : 		T qwx(q.w * q.x);

	movss	xmm2, DWORD PTR [eax+12]

; 597  : 		T qwy(q.w * q.y);

	movaps	xmm5, xmm2
	movaps	xmm6, xmm2
	mulss	xmm6, DWORD PTR [eax]

; 598  : 		T qwz(q.w * q.z);
; 599  : 
; 600  : 		Result[0][0] = T(1) - T(2) * (qyy +  qzz);
; 601  : 		Result[0][1] = T(2) * (qxy + qwz);
; 602  : 		Result[0][2] = T(2) * (qxz - qwy);
; 603  : 
; 604  : 		Result[1][0] = T(2) * (qxy - qwz);
; 605  : 		Result[1][1] = T(1) - T(2) * (qxx +  qzz);
; 606  : 		Result[1][2] = T(2) * (qyz + qwx);
; 607  : 
; 608  : 		Result[2][0] = T(2) * (qxz + qwy);
; 609  : 		Result[2][1] = T(2) * (qyz - qwx);
; 610  : 		Result[2][2] = T(1) - T(2) * (qxx +  qyy);
; 611  : 		return Result;

	mov	eax, esi
	mulss	xmm5, xmm1
	movaps	xmm1, xmm7
	mulss	xmm2, xmm0
	addss	xmm1, xmm4
	movss	xmm4, DWORD PTR __real@40000000
	movss	xmm0, DWORD PTR __real@3f800000
	addss	xmm7, DWORD PTR _qxx$1$[ebp]
	mulss	xmm1, xmm4
	subss	xmm0, xmm1
	mulss	xmm7, xmm4
	movss	xmm1, DWORD PTR _qxz$1$[ebp]
	movss	DWORD PTR [esi], xmm0
	movaps	xmm0, xmm2
	addss	xmm0, xmm3
	subss	xmm3, xmm2
	movss	xmm2, DWORD PTR _qyz$1$[ebp]
	mulss	xmm0, xmm4
	mulss	xmm3, xmm4
	movss	DWORD PTR [esi+4], xmm0
	movaps	xmm0, xmm1
	subss	xmm0, xmm5
	addss	xmm5, xmm1
	movss	DWORD PTR [esi+12], xmm3
	movss	xmm1, DWORD PTR __real@3f800000
	mulss	xmm0, xmm4
	mulss	xmm5, xmm4
	movss	DWORD PTR [esi+8], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, xmm7
	movss	DWORD PTR [esi+24], xmm5
	movss	DWORD PTR [esi+16], xmm0
	movaps	xmm0, xmm6
	addss	xmm0, xmm2
	subss	xmm2, xmm6
	mulss	xmm0, xmm4
	mulss	xmm2, xmm4
	movss	DWORD PTR [esi+20], xmm0
	movss	xmm0, DWORD PTR _qyy$1$[ebp]
	addss	xmm0, DWORD PTR _qxx$1$[ebp]
	movss	DWORD PTR [esi+28], xmm2
	mulss	xmm0, xmm4
	subss	xmm1, xmm0
	movss	DWORD PTR [esi+32], xmm1
	pop	esi

; 612  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$mat3_cast@M$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@ABU?$tquat@M$0A@@0@@Z ENDP ; glm::mat3_cast<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??$normalize@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@ABU10@@Z
_TEXT	SEGMENT
_len$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_q$ = 12						; size = 4
??$normalize@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@ABU10@@Z PROC ; glm::normalize<float,0>, COMDAT

; 380  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi

; 381  : 		T len = length(q);

	mov	esi, DWORD PTR _q$[ebp]
	push	esi
	call	??$length@M$0A@@glm@@YAMABU?$tquat@M$0A@@0@@Z ; glm::length<float,0>

; 382  : 		if(len <= T(0)) // Problem
; 383  : 			return tquat<T, P>(1, 0, 0, 0);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	xorps	xmm0, xmm0
	fstp	DWORD PTR _len$[ebp]
	comiss	xmm0, DWORD PTR _len$[ebp]
	pop	ecx
	jb	SHORT $LN1@normalize
	and	DWORD PTR [eax], 0
	and	DWORD PTR [eax+4], 0
	and	DWORD PTR [eax+8], 0
	mov	DWORD PTR [eax+12], 1065353216		; 3f800000H
	jmp	SHORT $LN2@normalize
$LN1@normalize:

; 384  : 		T oneOverLen = T(1) / len;

	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, DWORD PTR _len$[ebp]

; 385  : 		return tquat<T, P>(q.w * oneOverLen, q.x * oneOverLen, q.y * oneOverLen, q.z * oneOverLen);

	movups	xmm0, XMMWORD PTR [esi]
	shufps	xmm1, xmm1, 0
	mulps	xmm0, xmm1
	movups	XMMWORD PTR [eax], xmm0
$LN2@normalize:
	pop	esi

; 386  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$normalize@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@ABU10@@Z ENDP ; glm::normalize<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMABU?$tvec3@M$0A@@3@0@Z
_TEXT	SEGMENT
_tmp$ = -12						; size = 12
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMABU?$tvec3@M$0A@@3@0@Z PROC ; glm::detail::compute_dot<glm::tvec3,float,0,0>::call, COMDAT

; 57   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 58   : 			tvec3<T, P> tmp(x * y);

	mov	ecx, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR _y$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	fld	DWORD PTR [ecx+4]
	fmul	DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR [eax]
	fstp	DWORD PTR _tmp$[ebp+4]

; 59   : 			return tmp.x + tmp.y + tmp.z;

	fld	DWORD PTR _tmp$[ebp+4]
	movss	DWORD PTR _tmp$[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+8]
	mulss	xmm0, DWORD PTR [eax+8]
	fadd	DWORD PTR _tmp$[ebp]
	movss	DWORD PTR _tmp$[ebp+8], xmm0
	fadd	DWORD PTR _tmp$[ebp+8]

; 60   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMABU?$tvec3@M$0A@@3@0@Z ENDP ; glm::detail::compute_dot<glm::tvec3,float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\func_geometric.inl
;	COMDAT ??$cross@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@ABU10@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
??$cross@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@ABU10@0@Z PROC	; glm::cross<float,0>, COMDAT

; 180  : 	{

	push	ebp
	mov	ebp, esp

; 181  : 		return detail::compute_cross<T, P, detail::is_aligned<P>::value>::call(x, y);

	mov	ecx, DWORD PTR _y$[ebp]
	mov	edx, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movss	xmm1, DWORD PTR [ecx+8]
	mulss	xmm1, DWORD PTR [edx+4]
	movss	xmm0, DWORD PTR [ecx+4]
	mulss	xmm0, DWORD PTR [edx+8]
	movss	xmm3, DWORD PTR [ecx]
	movss	xmm2, DWORD PTR [edx]
	subss	xmm1, xmm0
	movaps	xmm0, xmm2
	mulss	xmm0, DWORD PTR [ecx+8]
	mulss	xmm2, DWORD PTR [ecx+4]
	movss	DWORD PTR [eax], xmm1
	movaps	xmm1, xmm3
	mulss	xmm1, DWORD PTR [edx+8]
	mulss	xmm3, DWORD PTR [edx+4]
	subss	xmm1, xmm0
	subss	xmm2, xmm3
	movss	DWORD PTR [eax+4], xmm1
	movss	DWORD PTR [eax+8], xmm2

; 182  : 	}

	pop	ebp
	ret	0
??$cross@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@ABU10@0@Z ENDP	; glm::cross<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\func_trigonometric.inl
;	COMDAT ??$sin@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@ABU10@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
??$sin@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@ABU10@@Z PROC ; glm::sin<float,0,glm::tvec3>, COMDAT

; 45   : 	{

	push	ebp
	mov	ebp, esp

; 46   : 		return detail::functor1<T, T, P, vecType>::call(sin, v);

	push	DWORD PTR _v$[ebp]
	push	OFFSET ?sin@@YAMM@Z			; sin
	push	DWORD PTR ___$ReturnUdt$[ebp]
	call	?call@?$functor1@MM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMM@ZABU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec3>::call
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	add	esp, 12					; 0000000cH

; 47   : 	}

	pop	ebp
	ret	0
??$sin@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@ABU10@@Z ENDP ; glm::sin<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\func_trigonometric.inl
;	COMDAT ??$cos@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@ABU10@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
??$cos@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@ABU10@@Z PROC ; glm::cos<float,0,glm::tvec3>, COMDAT

; 54   : 	{

	push	ebp
	mov	ebp, esp

; 55   : 		return detail::functor1<T, T, P, vecType>::call(cos, v);

	push	DWORD PTR _v$[ebp]
	push	OFFSET ?cos@@YAMM@Z			; cos
	push	DWORD PTR ___$ReturnUdt$[ebp]
	call	?call@?$functor1@MM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMM@ZABU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec3>::call
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	add	esp, 12					; 0000000cH

; 56   : 	}

	pop	ebp
	ret	0
??$cos@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@ABU10@@Z ENDP ; glm::cos<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@ABU10@M@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
_scalar$ = 16						; size = 4
??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@ABU10@M@Z PROC	; glm::operator*<float,0>, COMDAT

; 628  : 	{

	push	ebp
	mov	ebp, esp

; 629  : 		return tvec3<T, P>(
; 630  : 			v.x * scalar,
; 631  : 			v.y * scalar,
; 632  : 			v.z * scalar);

	mov	ecx, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	mulss	xmm0, DWORD PTR _scalar$[ebp]
	movss	DWORD PTR [eax], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mulss	xmm0, DWORD PTR _scalar$[ebp]
	movss	DWORD PTR [eax+4], xmm0
	movss	xmm0, DWORD PTR [ecx+8]
	mulss	xmm0, DWORD PTR _scalar$[ebp]
	movss	DWORD PTR [eax+8], xmm0

; 633  : 	}

	pop	ebp
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@ABU10@M@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??$quat_cast@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@ABU?$tmat3x3@M$0A@@0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
tv575 = 12						; size = 4
_biggestVal$ = 12					; size = 4
_m$ = 12						; size = 4
??$quat_cast@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@ABU?$tmat3x3@M$0A@@0@@Z PROC ; glm::quat_cast<float,0>, COMDAT

; 622  : 	{

	push	ebp
	mov	ebp, esp
	push	esi

; 623  : 		T fourXSquaredMinus1 = m[0][0] - m[1][1] - m[2][2];

	mov	esi, DWORD PTR _m$[ebp]
	push	edi

; 624  : 		T fourYSquaredMinus1 = m[1][1] - m[0][0] - m[2][2];
; 625  : 		T fourZSquaredMinus1 = m[2][2] - m[0][0] - m[1][1];
; 626  : 		T fourWSquaredMinus1 = m[0][0] + m[1][1] + m[2][2];
; 627  : 
; 628  : 		int biggestIndex = 0;

	xor	edi, edi
	movss	xmm0, DWORD PTR [esi+32]
	movss	xmm1, DWORD PTR [esi+16]
	movaps	xmm2, xmm0
	subss	xmm2, DWORD PTR [esi]
	movss	xmm4, DWORD PTR [esi]
	movaps	xmm3, xmm1
	subss	xmm3, DWORD PTR [esi]
	subss	xmm4, xmm1
	subss	xmm2, xmm1
	addss	xmm1, DWORD PTR [esi]
	subss	xmm3, xmm0
	subss	xmm4, xmm0
	addss	xmm1, xmm0

; 629  : 		T fourBiggestSquaredMinus1 = fourWSquaredMinus1;
; 630  : 		if(fourXSquaredMinus1 > fourBiggestSquaredMinus1)

	comiss	xmm4, xmm1
	jbe	SHORT $LN10@quat_cast

; 631  : 		{
; 632  : 			fourBiggestSquaredMinus1 = fourXSquaredMinus1;

	movaps	xmm1, xmm4

; 633  : 			biggestIndex = 1;

	inc	edi
$LN10@quat_cast:

; 634  : 		}
; 635  : 		if(fourYSquaredMinus1 > fourBiggestSquaredMinus1)

	comiss	xmm3, xmm1
	jbe	SHORT $LN9@quat_cast

; 636  : 		{
; 637  : 			fourBiggestSquaredMinus1 = fourYSquaredMinus1;
; 638  : 			biggestIndex = 2;

	push	2
	movaps	xmm1, xmm3
	pop	edi
$LN9@quat_cast:

; 639  : 		}
; 640  : 		if(fourZSquaredMinus1 > fourBiggestSquaredMinus1)

	comiss	xmm2, xmm1
	jbe	SHORT $LN8@quat_cast

; 641  : 		{
; 642  : 			fourBiggestSquaredMinus1 = fourZSquaredMinus1;
; 643  : 			biggestIndex = 3;

	push	3
	movaps	xmm1, xmm2
	pop	edi
$LN8@quat_cast:

; 644  : 		}
; 645  : 
; 646  : 		T biggestVal = sqrt(fourBiggestSquaredMinus1 + T(1)) * T(0.5);

	addss	xmm1, DWORD PTR __real@3f800000
	push	ecx
	push	ecx
	cvtps2pd xmm0, xmm1
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt

; 647  : 		T mult = static_cast<T>(0.25) / biggestVal;

	movss	xmm1, DWORD PTR __real@3e800000

; 648  : 
; 649  : 		tquat<T, P> Result(uninitialize);
; 650  : 		switch(biggestIndex)

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	fstp	DWORD PTR tv575[ebp]
	fld	DWORD PTR tv575[ebp]
	fmul	DWORD PTR __real@3f000000
	pop	ecx
	pop	ecx
	fstp	DWORD PTR _biggestVal$[ebp]
	movss	xmm2, DWORD PTR _biggestVal$[ebp]
	divss	xmm1, xmm2
	sub	edi, 0
	je	$LN5@quat_cast
	dec	edi
	je	$LN4@quat_cast
	dec	edi
	je	SHORT $LN3@quat_cast
	dec	edi
	jne	$LN6@quat_cast

; 670  : 		case 3:
; 671  : 			Result.w = (m[0][1] - m[1][0]) * mult;

	movss	xmm0, DWORD PTR [esi+4]
	subss	xmm0, DWORD PTR [esi+12]

; 672  : 			Result.x = (m[2][0] + m[0][2]) * mult;
; 673  : 			Result.y = (m[1][2] + m[2][1]) * mult;
; 674  : 			Result.z = biggestVal;

	movss	DWORD PTR [eax+8], xmm2
	mulss	xmm0, xmm1
	movss	DWORD PTR [eax+12], xmm0
	movss	xmm0, DWORD PTR [esi+24]
	addss	xmm0, DWORD PTR [esi+8]
	mulss	xmm0, xmm1
	movss	DWORD PTR [eax], xmm0
	movss	xmm0, DWORD PTR [esi+28]
	addss	xmm0, DWORD PTR [esi+20]
	mulss	xmm0, xmm1
	movss	DWORD PTR [eax+4], xmm0

; 675  : 			break;

	jmp	$LN6@quat_cast
$LN3@quat_cast:

; 664  : 		case 2:
; 665  : 			Result.w = (m[2][0] - m[0][2]) * mult;

	movss	xmm0, DWORD PTR [esi+24]
	subss	xmm0, DWORD PTR [esi+8]

; 666  : 			Result.x = (m[0][1] + m[1][0]) * mult;
; 667  : 			Result.y = biggestVal;

	movss	DWORD PTR [eax+4], xmm2
	mulss	xmm0, xmm1
	movss	DWORD PTR [eax+12], xmm0
	movss	xmm0, DWORD PTR [esi+12]
	addss	xmm0, DWORD PTR [esi+4]
	mulss	xmm0, xmm1
	movss	DWORD PTR [eax], xmm0

; 668  : 			Result.z = (m[1][2] + m[2][1]) * mult;

	movss	xmm0, DWORD PTR [esi+28]
	addss	xmm0, DWORD PTR [esi+20]

; 669  : 			break;

	jmp	SHORT $LN163@quat_cast
$LN4@quat_cast:

; 657  : 			break;
; 658  : 		case 1:
; 659  : 			Result.w = (m[1][2] - m[2][1]) * mult;

	movss	xmm0, DWORD PTR [esi+20]
	subss	xmm0, DWORD PTR [esi+28]

; 660  : 			Result.x = biggestVal;

	movss	DWORD PTR [eax], xmm2
	mulss	xmm0, xmm1
	movss	DWORD PTR [eax+12], xmm0

; 661  : 			Result.y = (m[0][1] + m[1][0]) * mult;

	movss	xmm0, DWORD PTR [esi+12]
	addss	xmm0, DWORD PTR [esi+4]
	mulss	xmm0, xmm1
	movss	DWORD PTR [eax+4], xmm0

; 662  : 			Result.z = (m[2][0] + m[0][2]) * mult;

	movss	xmm0, DWORD PTR [esi+24]
	addss	xmm0, DWORD PTR [esi+8]

; 663  : 			break;

	jmp	SHORT $LN163@quat_cast
$LN5@quat_cast:

; 651  : 		{
; 652  : 		case 0:
; 653  : 			Result.w = biggestVal;
; 654  : 			Result.x = (m[1][2] - m[2][1]) * mult;

	movss	xmm0, DWORD PTR [esi+20]
	subss	xmm0, DWORD PTR [esi+28]
	movss	DWORD PTR [eax+12], xmm2
	mulss	xmm0, xmm1
	movss	DWORD PTR [eax], xmm0

; 655  : 			Result.y = (m[2][0] - m[0][2]) * mult;

	movss	xmm0, DWORD PTR [esi+24]
	subss	xmm0, DWORD PTR [esi+8]
	mulss	xmm0, xmm1
	movss	DWORD PTR [eax+4], xmm0

; 656  : 			Result.z = (m[0][1] - m[1][0]) * mult;

	movss	xmm0, DWORD PTR [esi+4]
	subss	xmm0, DWORD PTR [esi+12]
$LN163@quat_cast:
	mulss	xmm0, xmm1
	movss	DWORD PTR [eax+8], xmm0
$LN6@quat_cast:
	pop	edi
	pop	esi

; 676  : 			
; 677  : 		default:					// Silence a -Wswitch-default warning in GCC. Should never actually get here. Assert is just for sanity.
; 678  : 			assert(false);
; 679  : 			break;
; 680  : 		}
; 681  : 		return Result;
; 682  : 	}

	pop	ebp
	ret	0
??$quat_cast@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@ABU?$tmat3x3@M$0A@@0@@Z ENDP ; glm::quat_cast<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??$quat_cast@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@ABU?$tmat4x4@M$0A@@0@@Z
_TEXT	SEGMENT
$T1 = -40						; size = 36
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_m4$ = 12						; size = 4
??$quat_cast@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@ABU?$tmat4x4@M$0A@@0@@Z PROC ; glm::quat_cast<float,0>, COMDAT

; 686  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, DWORD PTR _m4$[ebp]
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]

; 687  : 		return quat_cast(tmat3x3<T, P>(m4));

	push	ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$tmat3x3@M$0A@@glm@@QAE@ABU?$tmat4x4@M$0A@@1@@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0>
	push	eax
	push	esi
	call	??$quat_cast@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@ABU?$tmat3x3@M$0A@@0@@Z ; glm::quat_cast<float,0>
	pop	ecx
	pop	ecx

; 688  : 	}

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	mov	eax, esi
	xor	ecx, ebp
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
??$quat_cast@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@ABU?$tmat4x4@M$0A@@0@@Z ENDP ; glm::quat_cast<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??$mat4_cast@N$00@glm@@YA?AU?$tmat4x4@N$00@0@ABU?$tquat@N$00@0@@Z
_TEXT	SEGMENT
$T1 = -76						; size = 72
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_q$ = 12						; size = 4
??$mat4_cast@N$00@glm@@YA?AU?$tmat4x4@N$00@0@ABU?$tquat@N$00@0@@Z PROC ; glm::mat4_cast<double,1>, COMDAT

; 616  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, DWORD PTR _q$[ebp]

; 617  : 		return tmat4x4<T, P>(mat3_cast(q));

	lea	eax, DWORD PTR $T1[ebp]
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	push	eax
	call	??$mat3_cast@N$00@glm@@YA?AU?$tmat3x3@N$00@0@ABU?$tquat@N$00@0@@Z ; glm::mat3_cast<double,1>
	pop	ecx
	pop	ecx
	push	eax
	mov	ecx, esi
	call	??0?$tmat4x4@N$00@glm@@QAE@ABU?$tmat3x3@N$00@1@@Z ; glm::tmat4x4<double,1>::tmat4x4<double,1>

; 618  : 	}

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	mov	eax, esi
	xor	ecx, ebp
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
??$mat4_cast@N$00@glm@@YA?AU?$tmat4x4@N$00@0@ABU?$tquat@N$00@0@@Z ENDP ; glm::mat4_cast<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??$mat3_cast@N$00@glm@@YA?AU?$tmat3x3@N$00@0@ABU?$tquat@N$00@0@@Z
_TEXT	SEGMENT
_qyy$1$ = -32						; size = 8
_qyz$1$ = -24						; size = 8
_qxx$1$ = -16						; size = 8
_qxz$1$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
_q$ = 12						; size = 4
??$mat3_cast@N$00@glm@@YA?AU?$tmat3x3@N$00@0@ABU?$tquat@N$00@0@@Z PROC ; glm::mat3_cast<double,1>, COMDAT

; 588  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H

; 589  : 		tmat3x3<T, P> Result(T(1));

	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	push	ecx
	mov	ecx, esi
	movsd	QWORD PTR [esp], xmm0
	call	??0?$tmat3x3@N$00@glm@@QAE@N@Z		; glm::tmat3x3<double,1>::tmat3x3<double,1>

; 590  : 		T qxx(q.x * q.x);

	mov	eax, DWORD PTR _q$[ebp]
	movsd	xmm0, QWORD PTR [eax]

; 591  : 		T qyy(q.y * q.y);

	movsd	xmm1, QWORD PTR [eax+8]
	mulsd	xmm0, xmm0
	movapd	xmm4, xmm1
	mulsd	xmm4, xmm1

; 592  : 		T qzz(q.z * q.z);
; 593  : 		T qxz(q.x * q.z);
; 594  : 		T qxy(q.x * q.y);

	movapd	xmm3, xmm1
	mulsd	xmm3, QWORD PTR [eax]
	movsd	QWORD PTR _qxx$1$[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	movapd	xmm2, xmm0
	movsd	QWORD PTR _qyy$1$[ebp], xmm4
	mulsd	xmm2, QWORD PTR [eax]
	movapd	xmm7, xmm0
	mulsd	xmm7, xmm0
	movsd	QWORD PTR _qxz$1$[ebp], xmm2

; 595  : 		T qyz(q.y * q.z);

	movapd	xmm2, xmm0
	mulsd	xmm2, xmm1
	movsd	QWORD PTR _qyz$1$[ebp], xmm2

; 596  : 		T qwx(q.w * q.x);

	movsd	xmm2, QWORD PTR [eax+24]

; 597  : 		T qwy(q.w * q.y);

	movapd	xmm5, xmm2
	movapd	xmm6, xmm2
	mulsd	xmm6, QWORD PTR [eax]

; 598  : 		T qwz(q.w * q.z);
; 599  : 
; 600  : 		Result[0][0] = T(1) - T(2) * (qyy +  qzz);
; 601  : 		Result[0][1] = T(2) * (qxy + qwz);
; 602  : 		Result[0][2] = T(2) * (qxz - qwy);
; 603  : 
; 604  : 		Result[1][0] = T(2) * (qxy - qwz);
; 605  : 		Result[1][1] = T(1) - T(2) * (qxx +  qzz);
; 606  : 		Result[1][2] = T(2) * (qyz + qwx);
; 607  : 
; 608  : 		Result[2][0] = T(2) * (qxz + qwy);
; 609  : 		Result[2][1] = T(2) * (qyz - qwx);
; 610  : 		Result[2][2] = T(1) - T(2) * (qxx +  qyy);
; 611  : 		return Result;

	mov	eax, esi
	mulsd	xmm5, xmm1
	movapd	xmm1, xmm7
	mulsd	xmm2, xmm0
	addsd	xmm1, xmm4
	movsd	xmm4, QWORD PTR __real@4000000000000000
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	addsd	xmm7, QWORD PTR _qxx$1$[ebp]
	mulsd	xmm1, xmm4
	mulsd	xmm7, xmm4
	subsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR _qxz$1$[ebp]
	movsd	QWORD PTR [esi], xmm0
	movaps	xmm0, xmm2
	addsd	xmm0, xmm3
	subsd	xmm3, xmm2
	movsd	xmm2, QWORD PTR _qyz$1$[ebp]
	mulsd	xmm0, xmm4
	mulsd	xmm3, xmm4
	movsd	QWORD PTR [esi+8], xmm0
	movaps	xmm0, xmm1
	subsd	xmm0, xmm5
	addsd	xmm5, xmm1
	movsd	QWORD PTR [esi+24], xmm3
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	mulsd	xmm0, xmm4
	mulsd	xmm5, xmm4
	movsd	QWORD PTR [esi+16], xmm0
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	subsd	xmm0, xmm7
	movsd	QWORD PTR [esi+48], xmm5
	movsd	QWORD PTR [esi+32], xmm0
	movapd	xmm0, xmm6
	addsd	xmm0, xmm2
	subsd	xmm2, xmm6
	mulsd	xmm0, xmm4
	mulsd	xmm2, xmm4
	movsd	QWORD PTR [esi+40], xmm0
	movsd	xmm0, QWORD PTR _qyy$1$[ebp]
	addsd	xmm0, QWORD PTR _qxx$1$[ebp]
	movsd	QWORD PTR [esi+56], xmm2
	mulsd	xmm0, xmm4
	subsd	xmm1, xmm0
	movsd	QWORD PTR [esi+64], xmm1
	pop	esi

; 612  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$mat3_cast@N$00@glm@@YA?AU?$tmat3x3@N$00@0@ABU?$tquat@N$00@0@@Z ENDP ; glm::mat3_cast<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??$normalize@N$00@glm@@YA?AU?$tquat@N$00@0@ABU10@@Z
_TEXT	SEGMENT
_len$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
_q$ = 12						; size = 4
??$normalize@N$00@glm@@YA?AU?$tquat@N$00@0@ABU10@@Z PROC ; glm::normalize<double,1>, COMDAT

; 380  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	esi

; 381  : 		T len = length(q);

	mov	esi, DWORD PTR _q$[ebp]
	push	ecx
	push	ecx
	movsd	xmm3, QWORD PTR [esi]
	movsd	xmm2, QWORD PTR [esi+8]
	movsd	xmm1, QWORD PTR [esi+16]
	movsd	xmm0, QWORD PTR [esi+24]
	mulsd	xmm0, xmm0
	mulsd	xmm3, xmm3
	mulsd	xmm2, xmm2
	mulsd	xmm1, xmm1
	addsd	xmm2, xmm3
	addsd	xmm0, xmm1
	addsd	xmm0, xmm2
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt

; 382  : 		if(len <= T(0)) // Problem
; 383  : 			return tquat<T, P>(1, 0, 0, 0);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	xorps	xmm0, xmm0
	fstp	QWORD PTR _len$[ebp]
	comisd	xmm0, QWORD PTR _len$[ebp]
	pop	ecx
	pop	ecx
	jb	SHORT $LN1@normalize
	movups	XMMWORD PTR [eax], xmm0
	movsd	QWORD PTR [eax+16], xmm0
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR [eax+24], xmm0
	jmp	SHORT $LN2@normalize
$LN1@normalize:

; 384  : 		T oneOverLen = T(1) / len;

	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	divsd	xmm1, QWORD PTR _len$[ebp]

; 385  : 		return tquat<T, P>(q.w * oneOverLen, q.x * oneOverLen, q.y * oneOverLen, q.z * oneOverLen);

	movups	xmm0, XMMWORD PTR [esi]
	unpcklpd xmm1, xmm1
	mulpd	xmm0, xmm1
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [esi+16]
	mulpd	xmm0, xmm1
	movups	XMMWORD PTR [eax+16], xmm0
$LN2@normalize:
	pop	esi

; 386  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$normalize@N$00@glm@@YA?AU?$tquat@N$00@0@ABU10@@Z ENDP ; glm::normalize<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_dot@Utvec3@glm@@N$00$0A@@detail@glm@@SANABU?$tvec3@N$00@3@0@Z
_TEXT	SEGMENT
_tmp$ = -24						; size = 24
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?call@?$compute_dot@Utvec3@glm@@N$00$0A@@detail@glm@@SANABU?$tvec3@N$00@3@0@Z PROC ; glm::detail::compute_dot<glm::tvec3,double,1,0>::call, COMDAT

; 57   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 58   : 			tvec3<T, P> tmp(x * y);

	mov	ecx, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR _y$[ebp]
	movsd	xmm0, QWORD PTR [ecx]
	mulsd	xmm0, QWORD PTR [eax]
	fld	QWORD PTR [ecx+8]
	fmul	QWORD PTR [eax+8]
	movsd	QWORD PTR _tmp$[ebp], xmm0
	movsd	xmm0, QWORD PTR [ecx+16]
	mulsd	xmm0, QWORD PTR [eax+16]

; 59   : 			return tmp.x + tmp.y + tmp.z;

	fadd	QWORD PTR _tmp$[ebp]
	movsd	QWORD PTR _tmp$[ebp+16], xmm0
	fadd	QWORD PTR _tmp$[ebp+16]

; 60   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?call@?$compute_dot@Utvec3@glm@@N$00$0A@@detail@glm@@SANABU?$tvec3@N$00@3@0@Z ENDP ; glm::detail::compute_dot<glm::tvec3,double,1,0>::call
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\func_geometric.inl
;	COMDAT ??$cross@N$00@glm@@YA?AU?$tvec3@N$00@0@ABU10@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
??$cross@N$00@glm@@YA?AU?$tvec3@N$00@0@ABU10@0@Z PROC	; glm::cross<double,1>, COMDAT

; 180  : 	{

	push	ebp
	mov	ebp, esp

; 181  : 		return detail::compute_cross<T, P, detail::is_aligned<P>::value>::call(x, y);

	mov	ecx, DWORD PTR _y$[ebp]
	mov	edx, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movsd	xmm1, QWORD PTR [ecx+16]
	mulsd	xmm1, QWORD PTR [edx+8]
	movsd	xmm0, QWORD PTR [ecx+8]
	mulsd	xmm0, QWORD PTR [edx+16]
	movsd	xmm3, QWORD PTR [ecx]
	movsd	xmm2, QWORD PTR [edx]
	subsd	xmm1, xmm0
	movaps	xmm0, xmm2
	mulsd	xmm0, QWORD PTR [ecx+16]
	mulsd	xmm2, QWORD PTR [ecx+8]
	movsd	QWORD PTR [eax], xmm1
	movaps	xmm1, xmm3
	mulsd	xmm1, QWORD PTR [edx+16]
	mulsd	xmm3, QWORD PTR [edx+8]
	subsd	xmm1, xmm0
	subsd	xmm2, xmm3
	movsd	QWORD PTR [eax+8], xmm1
	movsd	QWORD PTR [eax+16], xmm2

; 182  : 	}

	pop	ebp
	ret	0
??$cross@N$00@glm@@YA?AU?$tvec3@N$00@0@ABU10@0@Z ENDP	; glm::cross<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\func_trigonometric.inl
;	COMDAT ??$sin@N$00Utvec3@glm@@@glm@@YA?AU?$tvec3@N$00@0@ABU10@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
??$sin@N$00Utvec3@glm@@@glm@@YA?AU?$tvec3@N$00@0@ABU10@@Z PROC ; glm::sin<double,1,glm::tvec3>, COMDAT

; 45   : 	{

	push	ebp
	mov	ebp, esp

; 46   : 		return detail::functor1<T, T, P, vecType>::call(sin, v);

	push	DWORD PTR _v$[ebp]
	push	OFFSET _sin
	push	DWORD PTR ___$ReturnUdt$[ebp]
	call	?call@?$functor1@NN$00Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@N$00@3@P6ANN@ZABU43@@Z ; glm::detail::functor1<double,double,1,glm::tvec3>::call
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	add	esp, 12					; 0000000cH

; 47   : 	}

	pop	ebp
	ret	0
??$sin@N$00Utvec3@glm@@@glm@@YA?AU?$tvec3@N$00@0@ABU10@@Z ENDP ; glm::sin<double,1,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\func_trigonometric.inl
;	COMDAT ??$cos@N$00Utvec3@glm@@@glm@@YA?AU?$tvec3@N$00@0@ABU10@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
??$cos@N$00Utvec3@glm@@@glm@@YA?AU?$tvec3@N$00@0@ABU10@@Z PROC ; glm::cos<double,1,glm::tvec3>, COMDAT

; 54   : 	{

	push	ebp
	mov	ebp, esp

; 55   : 		return detail::functor1<T, T, P, vecType>::call(cos, v);

	push	DWORD PTR _v$[ebp]
	push	OFFSET _cos
	push	DWORD PTR ___$ReturnUdt$[ebp]
	call	?call@?$functor1@NN$00Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@N$00@3@P6ANN@ZABU43@@Z ; glm::detail::functor1<double,double,1,glm::tvec3>::call
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	add	esp, 12					; 0000000cH

; 56   : 	}

	pop	ebp
	ret	0
??$cos@N$00Utvec3@glm@@@glm@@YA?AU?$tvec3@N$00@0@ABU10@@Z ENDP ; glm::cos<double,1,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?DN$00@glm@@YA?AU?$tvec3@N$00@0@ABU10@N@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
_scalar$ = 16						; size = 8
??$?DN$00@glm@@YA?AU?$tvec3@N$00@0@ABU10@N@Z PROC	; glm::operator*<double,1>, COMDAT

; 628  : 	{

	push	ebp
	mov	ebp, esp

; 629  : 		return tvec3<T, P>(
; 630  : 			v.x * scalar,
; 631  : 			v.y * scalar,
; 632  : 			v.z * scalar);

	mov	ecx, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movsd	xmm0, QWORD PTR [ecx]
	mulsd	xmm0, QWORD PTR _scalar$[ebp]
	movsd	QWORD PTR [eax], xmm0
	movsd	xmm0, QWORD PTR [ecx+8]
	mulsd	xmm0, QWORD PTR _scalar$[ebp]
	movsd	QWORD PTR [eax+8], xmm0
	movsd	xmm0, QWORD PTR [ecx+16]
	mulsd	xmm0, QWORD PTR _scalar$[ebp]
	movsd	QWORD PTR [eax+16], xmm0

; 633  : 	}

	pop	ebp
	ret	0
??$?DN$00@glm@@YA?AU?$tvec3@N$00@0@ABU10@N@Z ENDP	; glm::operator*<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??$quat_cast@N$00@glm@@YA?AU?$tquat@N$00@0@ABU?$tmat3x3@N$00@0@@Z
_TEXT	SEGMENT
_biggestVal$ = -8					; size = 8
___$ReturnUdt$ = 8					; size = 4
_m$ = 12						; size = 4
??$quat_cast@N$00@glm@@YA?AU?$tquat@N$00@0@ABU?$tmat3x3@N$00@0@@Z PROC ; glm::quat_cast<double,1>, COMDAT

; 622  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	esi

; 623  : 		T fourXSquaredMinus1 = m[0][0] - m[1][1] - m[2][2];

	mov	esi, DWORD PTR _m$[ebp]
	push	edi

; 624  : 		T fourYSquaredMinus1 = m[1][1] - m[0][0] - m[2][2];
; 625  : 		T fourZSquaredMinus1 = m[2][2] - m[0][0] - m[1][1];
; 626  : 		T fourWSquaredMinus1 = m[0][0] + m[1][1] + m[2][2];
; 627  : 
; 628  : 		int biggestIndex = 0;

	xor	edi, edi
	movsd	xmm0, QWORD PTR [esi+64]
	movsd	xmm1, QWORD PTR [esi+32]
	movapd	xmm2, xmm0
	subsd	xmm2, QWORD PTR [esi]
	movsd	xmm4, QWORD PTR [esi]
	movapd	xmm3, xmm1
	subsd	xmm3, QWORD PTR [esi]
	subsd	xmm4, xmm1
	subsd	xmm2, xmm1
	addsd	xmm1, QWORD PTR [esi]
	subsd	xmm3, xmm0
	subsd	xmm4, xmm0
	addsd	xmm1, xmm0

; 629  : 		T fourBiggestSquaredMinus1 = fourWSquaredMinus1;
; 630  : 		if(fourXSquaredMinus1 > fourBiggestSquaredMinus1)

	comisd	xmm4, xmm1
	jbe	SHORT $LN10@quat_cast

; 631  : 		{
; 632  : 			fourBiggestSquaredMinus1 = fourXSquaredMinus1;

	movaps	xmm1, xmm4

; 633  : 			biggestIndex = 1;

	inc	edi
$LN10@quat_cast:

; 634  : 		}
; 635  : 		if(fourYSquaredMinus1 > fourBiggestSquaredMinus1)

	comisd	xmm3, xmm1
	jbe	SHORT $LN9@quat_cast

; 636  : 		{
; 637  : 			fourBiggestSquaredMinus1 = fourYSquaredMinus1;
; 638  : 			biggestIndex = 2;

	push	2
	movapd	xmm1, xmm3
	pop	edi
$LN9@quat_cast:

; 639  : 		}
; 640  : 		if(fourZSquaredMinus1 > fourBiggestSquaredMinus1)

	comisd	xmm2, xmm1
	jbe	SHORT $LN8@quat_cast

; 641  : 		{
; 642  : 			fourBiggestSquaredMinus1 = fourZSquaredMinus1;
; 643  : 			biggestIndex = 3;

	push	3
	movapd	xmm1, xmm2
	pop	edi
$LN8@quat_cast:

; 644  : 		}
; 645  : 
; 646  : 		T biggestVal = sqrt(fourBiggestSquaredMinus1 + T(1)) * T(0.5);

	addsd	xmm1, QWORD PTR __real@3ff0000000000000
	push	ecx
	push	ecx
	movsd	QWORD PTR [esp], xmm1
	call	_sqrt
	fmul	QWORD PTR __real@3fe0000000000000

; 647  : 		T mult = static_cast<T>(0.25) / biggestVal;

	movsd	xmm1, QWORD PTR __real@3fd0000000000000

; 648  : 
; 649  : 		tquat<T, P> Result(uninitialize);
; 650  : 		switch(biggestIndex)

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	ecx
	pop	ecx
	fstp	QWORD PTR _biggestVal$[ebp]
	movsd	xmm2, QWORD PTR _biggestVal$[ebp]
	divsd	xmm1, xmm2
	sub	edi, 0
	je	$LN5@quat_cast
	dec	edi
	je	$LN4@quat_cast
	dec	edi
	je	SHORT $LN3@quat_cast
	dec	edi
	jne	$LN6@quat_cast

; 670  : 		case 3:
; 671  : 			Result.w = (m[0][1] - m[1][0]) * mult;

	movsd	xmm0, QWORD PTR [esi+8]
	subsd	xmm0, QWORD PTR [esi+24]

; 672  : 			Result.x = (m[2][0] + m[0][2]) * mult;
; 673  : 			Result.y = (m[1][2] + m[2][1]) * mult;
; 674  : 			Result.z = biggestVal;

	movsd	QWORD PTR [eax+16], xmm2
	mulsd	xmm0, xmm1
	movsd	QWORD PTR [eax+24], xmm0
	movsd	xmm0, QWORD PTR [esi+48]
	addsd	xmm0, QWORD PTR [esi+16]
	mulsd	xmm0, xmm1
	movsd	QWORD PTR [eax], xmm0
	movsd	xmm0, QWORD PTR [esi+56]
	addsd	xmm0, QWORD PTR [esi+40]
	mulsd	xmm0, xmm1
	movsd	QWORD PTR [eax+8], xmm0

; 675  : 			break;

	jmp	$LN6@quat_cast
$LN3@quat_cast:

; 664  : 		case 2:
; 665  : 			Result.w = (m[2][0] - m[0][2]) * mult;

	movsd	xmm0, QWORD PTR [esi+48]
	subsd	xmm0, QWORD PTR [esi+16]

; 666  : 			Result.x = (m[0][1] + m[1][0]) * mult;
; 667  : 			Result.y = biggestVal;

	movsd	QWORD PTR [eax+8], xmm2
	mulsd	xmm0, xmm1
	movsd	QWORD PTR [eax+24], xmm0
	movsd	xmm0, QWORD PTR [esi+24]
	addsd	xmm0, QWORD PTR [esi+8]
	mulsd	xmm0, xmm1
	movsd	QWORD PTR [eax], xmm0

; 668  : 			Result.z = (m[1][2] + m[2][1]) * mult;

	movsd	xmm0, QWORD PTR [esi+56]
	addsd	xmm0, QWORD PTR [esi+40]

; 669  : 			break;

	jmp	SHORT $LN159@quat_cast
$LN4@quat_cast:

; 657  : 			break;
; 658  : 		case 1:
; 659  : 			Result.w = (m[1][2] - m[2][1]) * mult;

	movsd	xmm0, QWORD PTR [esi+40]
	subsd	xmm0, QWORD PTR [esi+56]

; 660  : 			Result.x = biggestVal;

	movsd	QWORD PTR [eax], xmm2
	mulsd	xmm0, xmm1
	movsd	QWORD PTR [eax+24], xmm0

; 661  : 			Result.y = (m[0][1] + m[1][0]) * mult;

	movsd	xmm0, QWORD PTR [esi+24]
	addsd	xmm0, QWORD PTR [esi+8]
	mulsd	xmm0, xmm1
	movsd	QWORD PTR [eax+8], xmm0

; 662  : 			Result.z = (m[2][0] + m[0][2]) * mult;

	movsd	xmm0, QWORD PTR [esi+48]
	addsd	xmm0, QWORD PTR [esi+16]

; 663  : 			break;

	jmp	SHORT $LN159@quat_cast
$LN5@quat_cast:

; 651  : 		{
; 652  : 		case 0:
; 653  : 			Result.w = biggestVal;
; 654  : 			Result.x = (m[1][2] - m[2][1]) * mult;

	movsd	xmm0, QWORD PTR [esi+40]
	subsd	xmm0, QWORD PTR [esi+56]
	movsd	QWORD PTR [eax+24], xmm2
	mulsd	xmm0, xmm1
	movsd	QWORD PTR [eax], xmm0

; 655  : 			Result.y = (m[2][0] - m[0][2]) * mult;

	movsd	xmm0, QWORD PTR [esi+48]
	subsd	xmm0, QWORD PTR [esi+16]
	mulsd	xmm0, xmm1
	movsd	QWORD PTR [eax+8], xmm0

; 656  : 			Result.z = (m[0][1] - m[1][0]) * mult;

	movsd	xmm0, QWORD PTR [esi+8]
	subsd	xmm0, QWORD PTR [esi+24]
$LN159@quat_cast:
	mulsd	xmm0, xmm1
	movsd	QWORD PTR [eax+16], xmm0
$LN6@quat_cast:
	pop	edi
	pop	esi

; 676  : 			
; 677  : 		default:					// Silence a -Wswitch-default warning in GCC. Should never actually get here. Assert is just for sanity.
; 678  : 			assert(false);
; 679  : 			break;
; 680  : 		}
; 681  : 		return Result;
; 682  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$quat_cast@N$00@glm@@YA?AU?$tquat@N$00@0@ABU?$tmat3x3@N$00@0@@Z ENDP ; glm::quat_cast<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??$quat_cast@N$00@glm@@YA?AU?$tquat@N$00@0@ABU?$tmat4x4@N$00@0@@Z
_TEXT	SEGMENT
$T1 = -76						; size = 72
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_m4$ = 12						; size = 4
??$quat_cast@N$00@glm@@YA?AU?$tquat@N$00@0@ABU?$tmat4x4@N$00@0@@Z PROC ; glm::quat_cast<double,1>, COMDAT

; 686  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, DWORD PTR _m4$[ebp]
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]

; 687  : 		return quat_cast(tmat3x3<T, P>(m4));

	push	ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$tmat3x3@N$00@glm@@QAE@ABU?$tmat4x4@N$00@1@@Z ; glm::tmat3x3<double,1>::tmat3x3<double,1>
	push	eax
	push	esi
	call	??$quat_cast@N$00@glm@@YA?AU?$tquat@N$00@0@ABU?$tmat3x3@N$00@0@@Z ; glm::quat_cast<double,1>
	pop	ecx
	pop	ecx

; 688  : 	}

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	mov	eax, esi
	xor	ecx, ebp
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
??$quat_cast@N$00@glm@@YA?AU?$tquat@N$00@0@ABU?$tmat4x4@N$00@0@@Z ENDP ; glm::quat_cast<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??$mat4_cast@M$00@glm@@YA?AU?$tmat4x4@M$00@0@ABU?$tquat@M$00@0@@Z
_TEXT	SEGMENT
$T1 = -40						; size = 36
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_q$ = 12						; size = 4
??$mat4_cast@M$00@glm@@YA?AU?$tmat4x4@M$00@0@ABU?$tquat@M$00@0@@Z PROC ; glm::mat4_cast<float,1>, COMDAT

; 616  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, DWORD PTR _q$[ebp]

; 617  : 		return tmat4x4<T, P>(mat3_cast(q));

	lea	eax, DWORD PTR $T1[ebp]
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	push	eax
	call	??$mat3_cast@M$00@glm@@YA?AU?$tmat3x3@M$00@0@ABU?$tquat@M$00@0@@Z ; glm::mat3_cast<float,1>
	pop	ecx
	pop	ecx
	push	eax
	mov	ecx, esi
	call	??0?$tmat4x4@M$00@glm@@QAE@ABU?$tmat3x3@M$00@1@@Z ; glm::tmat4x4<float,1>::tmat4x4<float,1>

; 618  : 	}

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	mov	eax, esi
	xor	ecx, ebp
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
??$mat4_cast@M$00@glm@@YA?AU?$tmat4x4@M$00@0@ABU?$tquat@M$00@0@@Z ENDP ; glm::mat4_cast<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??$mat3_cast@M$00@glm@@YA?AU?$tmat3x3@M$00@0@ABU?$tquat@M$00@0@@Z
_TEXT	SEGMENT
_qyy$1$ = -8						; size = 4
_qyz$1$ = -4						; size = 4
_qxz$1$ = 8						; size = 4
___$ReturnUdt$ = 8					; size = 4
_qxx$1$ = 12						; size = 4
_q$ = 12						; size = 4
??$mat3_cast@M$00@glm@@YA?AU?$tmat3x3@M$00@0@ABU?$tquat@M$00@0@@Z PROC ; glm::mat3_cast<float,1>, COMDAT

; 588  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	esi

; 589  : 		tmat3x3<T, P> Result(T(1));

	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	mov	ecx, esi
	mov	DWORD PTR [esp], 1065353216		; 3f800000H
	call	??0?$tmat3x3@M$00@glm@@QAE@M@Z		; glm::tmat3x3<float,1>::tmat3x3<float,1>

; 590  : 		T qxx(q.x * q.x);

	mov	eax, DWORD PTR _q$[ebp]
	movss	xmm0, DWORD PTR [eax]

; 591  : 		T qyy(q.y * q.y);

	movss	xmm1, DWORD PTR [eax+4]
	mulss	xmm0, xmm0
	movaps	xmm4, xmm1
	mulss	xmm4, xmm1

; 592  : 		T qzz(q.z * q.z);
; 593  : 		T qxz(q.x * q.z);
; 594  : 		T qxy(q.x * q.y);

	movaps	xmm3, xmm1
	movss	DWORD PTR _qxx$1$[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movaps	xmm2, xmm0
	mulss	xmm3, DWORD PTR [eax]
	mulss	xmm2, DWORD PTR [eax]
	movaps	xmm7, xmm0
	mulss	xmm7, xmm0
	movss	DWORD PTR _qxz$1$[ebp], xmm2

; 595  : 		T qyz(q.y * q.z);

	movaps	xmm2, xmm0
	mulss	xmm2, xmm1
	movss	DWORD PTR _qyy$1$[ebp], xmm4
	movss	DWORD PTR _qyz$1$[ebp], xmm2

; 596  : 		T qwx(q.w * q.x);

	movss	xmm2, DWORD PTR [eax+12]

; 597  : 		T qwy(q.w * q.y);

	movaps	xmm5, xmm2
	movaps	xmm6, xmm2
	mulss	xmm6, DWORD PTR [eax]

; 598  : 		T qwz(q.w * q.z);
; 599  : 
; 600  : 		Result[0][0] = T(1) - T(2) * (qyy +  qzz);
; 601  : 		Result[0][1] = T(2) * (qxy + qwz);
; 602  : 		Result[0][2] = T(2) * (qxz - qwy);
; 603  : 
; 604  : 		Result[1][0] = T(2) * (qxy - qwz);
; 605  : 		Result[1][1] = T(1) - T(2) * (qxx +  qzz);
; 606  : 		Result[1][2] = T(2) * (qyz + qwx);
; 607  : 
; 608  : 		Result[2][0] = T(2) * (qxz + qwy);
; 609  : 		Result[2][1] = T(2) * (qyz - qwx);
; 610  : 		Result[2][2] = T(1) - T(2) * (qxx +  qyy);
; 611  : 		return Result;

	mov	eax, esi
	mulss	xmm5, xmm1
	movaps	xmm1, xmm7
	mulss	xmm2, xmm0
	addss	xmm1, xmm4
	movss	xmm4, DWORD PTR __real@40000000
	movss	xmm0, DWORD PTR __real@3f800000
	addss	xmm7, DWORD PTR _qxx$1$[ebp]
	mulss	xmm1, xmm4
	subss	xmm0, xmm1
	mulss	xmm7, xmm4
	movss	xmm1, DWORD PTR _qxz$1$[ebp]
	movss	DWORD PTR [esi], xmm0
	movaps	xmm0, xmm2
	addss	xmm0, xmm3
	subss	xmm3, xmm2
	movss	xmm2, DWORD PTR _qyz$1$[ebp]
	mulss	xmm0, xmm4
	mulss	xmm3, xmm4
	movss	DWORD PTR [esi+4], xmm0
	movaps	xmm0, xmm1
	subss	xmm0, xmm5
	addss	xmm5, xmm1
	movss	DWORD PTR [esi+12], xmm3
	movss	xmm1, DWORD PTR __real@3f800000
	mulss	xmm0, xmm4
	mulss	xmm5, xmm4
	movss	DWORD PTR [esi+8], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, xmm7
	movss	DWORD PTR [esi+24], xmm5
	movss	DWORD PTR [esi+16], xmm0
	movaps	xmm0, xmm6
	addss	xmm0, xmm2
	subss	xmm2, xmm6
	mulss	xmm0, xmm4
	mulss	xmm2, xmm4
	movss	DWORD PTR [esi+20], xmm0
	movss	xmm0, DWORD PTR _qyy$1$[ebp]
	addss	xmm0, DWORD PTR _qxx$1$[ebp]
	movss	DWORD PTR [esi+28], xmm2
	mulss	xmm0, xmm4
	subss	xmm1, xmm0
	movss	DWORD PTR [esi+32], xmm1
	pop	esi

; 612  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$mat3_cast@M$00@glm@@YA?AU?$tmat3x3@M$00@0@ABU?$tquat@M$00@0@@Z ENDP ; glm::mat3_cast<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??$normalize@M$00@glm@@YA?AU?$tquat@M$00@0@ABU10@@Z
_TEXT	SEGMENT
_len$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_q$ = 12						; size = 4
??$normalize@M$00@glm@@YA?AU?$tquat@M$00@0@ABU10@@Z PROC ; glm::normalize<float,1>, COMDAT

; 380  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi

; 381  : 		T len = length(q);

	mov	esi, DWORD PTR _q$[ebp]
	push	esi
	call	??$length@M$00@glm@@YAMABU?$tquat@M$00@0@@Z ; glm::length<float,1>

; 382  : 		if(len <= T(0)) // Problem
; 383  : 			return tquat<T, P>(1, 0, 0, 0);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	xorps	xmm0, xmm0
	fstp	DWORD PTR _len$[ebp]
	comiss	xmm0, DWORD PTR _len$[ebp]
	pop	ecx
	jb	SHORT $LN1@normalize
	and	DWORD PTR [eax], 0
	and	DWORD PTR [eax+4], 0
	and	DWORD PTR [eax+8], 0
	mov	DWORD PTR [eax+12], 1065353216		; 3f800000H
	jmp	SHORT $LN2@normalize
$LN1@normalize:

; 384  : 		T oneOverLen = T(1) / len;

	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, DWORD PTR _len$[ebp]

; 385  : 		return tquat<T, P>(q.w * oneOverLen, q.x * oneOverLen, q.y * oneOverLen, q.z * oneOverLen);

	movups	xmm0, XMMWORD PTR [esi]
	shufps	xmm1, xmm1, 0
	mulps	xmm0, xmm1
	movups	XMMWORD PTR [eax], xmm0
$LN2@normalize:
	pop	esi

; 386  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$normalize@M$00@glm@@YA?AU?$tquat@M$00@0@ABU10@@Z ENDP ; glm::normalize<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_dot@Utvec3@glm@@M$00$0A@@detail@glm@@SAMABU?$tvec3@M$00@3@0@Z
_TEXT	SEGMENT
_tmp$ = -12						; size = 12
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?call@?$compute_dot@Utvec3@glm@@M$00$0A@@detail@glm@@SAMABU?$tvec3@M$00@3@0@Z PROC ; glm::detail::compute_dot<glm::tvec3,float,1,0>::call, COMDAT

; 57   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 58   : 			tvec3<T, P> tmp(x * y);

	mov	ecx, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR _y$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	fld	DWORD PTR [ecx+4]
	fmul	DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR [eax]
	fstp	DWORD PTR _tmp$[ebp+4]

; 59   : 			return tmp.x + tmp.y + tmp.z;

	fld	DWORD PTR _tmp$[ebp+4]
	movss	DWORD PTR _tmp$[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+8]
	mulss	xmm0, DWORD PTR [eax+8]
	fadd	DWORD PTR _tmp$[ebp]
	movss	DWORD PTR _tmp$[ebp+8], xmm0
	fadd	DWORD PTR _tmp$[ebp+8]

; 60   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?call@?$compute_dot@Utvec3@glm@@M$00$0A@@detail@glm@@SAMABU?$tvec3@M$00@3@0@Z ENDP ; glm::detail::compute_dot<glm::tvec3,float,1,0>::call
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\func_geometric.inl
;	COMDAT ??$cross@M$00@glm@@YA?AU?$tvec3@M$00@0@ABU10@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
??$cross@M$00@glm@@YA?AU?$tvec3@M$00@0@ABU10@0@Z PROC	; glm::cross<float,1>, COMDAT

; 180  : 	{

	push	ebp
	mov	ebp, esp

; 181  : 		return detail::compute_cross<T, P, detail::is_aligned<P>::value>::call(x, y);

	mov	ecx, DWORD PTR _y$[ebp]
	mov	edx, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movss	xmm1, DWORD PTR [ecx+8]
	mulss	xmm1, DWORD PTR [edx+4]
	movss	xmm0, DWORD PTR [ecx+4]
	mulss	xmm0, DWORD PTR [edx+8]
	movss	xmm3, DWORD PTR [ecx]
	movss	xmm2, DWORD PTR [edx]
	subss	xmm1, xmm0
	movaps	xmm0, xmm2
	mulss	xmm0, DWORD PTR [ecx+8]
	mulss	xmm2, DWORD PTR [ecx+4]
	movss	DWORD PTR [eax], xmm1
	movaps	xmm1, xmm3
	mulss	xmm1, DWORD PTR [edx+8]
	mulss	xmm3, DWORD PTR [edx+4]
	subss	xmm1, xmm0
	subss	xmm2, xmm3
	movss	DWORD PTR [eax+4], xmm1
	movss	DWORD PTR [eax+8], xmm2

; 182  : 	}

	pop	ebp
	ret	0
??$cross@M$00@glm@@YA?AU?$tvec3@M$00@0@ABU10@0@Z ENDP	; glm::cross<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\func_trigonometric.inl
;	COMDAT ??$sin@M$00Utvec3@glm@@@glm@@YA?AU?$tvec3@M$00@0@ABU10@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
??$sin@M$00Utvec3@glm@@@glm@@YA?AU?$tvec3@M$00@0@ABU10@@Z PROC ; glm::sin<float,1,glm::tvec3>, COMDAT

; 45   : 	{

	push	ebp
	mov	ebp, esp

; 46   : 		return detail::functor1<T, T, P, vecType>::call(sin, v);

	push	DWORD PTR _v$[ebp]
	push	OFFSET ?sin@@YAMM@Z			; sin
	push	DWORD PTR ___$ReturnUdt$[ebp]
	call	?call@?$functor1@MM$00Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$00@3@P6AMM@ZABU43@@Z ; glm::detail::functor1<float,float,1,glm::tvec3>::call
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	add	esp, 12					; 0000000cH

; 47   : 	}

	pop	ebp
	ret	0
??$sin@M$00Utvec3@glm@@@glm@@YA?AU?$tvec3@M$00@0@ABU10@@Z ENDP ; glm::sin<float,1,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\func_trigonometric.inl
;	COMDAT ??$cos@M$00Utvec3@glm@@@glm@@YA?AU?$tvec3@M$00@0@ABU10@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
??$cos@M$00Utvec3@glm@@@glm@@YA?AU?$tvec3@M$00@0@ABU10@@Z PROC ; glm::cos<float,1,glm::tvec3>, COMDAT

; 54   : 	{

	push	ebp
	mov	ebp, esp

; 55   : 		return detail::functor1<T, T, P, vecType>::call(cos, v);

	push	DWORD PTR _v$[ebp]
	push	OFFSET ?cos@@YAMM@Z			; cos
	push	DWORD PTR ___$ReturnUdt$[ebp]
	call	?call@?$functor1@MM$00Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$00@3@P6AMM@ZABU43@@Z ; glm::detail::functor1<float,float,1,glm::tvec3>::call
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	add	esp, 12					; 0000000cH

; 56   : 	}

	pop	ebp
	ret	0
??$cos@M$00Utvec3@glm@@@glm@@YA?AU?$tvec3@M$00@0@ABU10@@Z ENDP ; glm::cos<float,1,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?DM$00@glm@@YA?AU?$tvec3@M$00@0@ABU10@M@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
_scalar$ = 16						; size = 4
??$?DM$00@glm@@YA?AU?$tvec3@M$00@0@ABU10@M@Z PROC	; glm::operator*<float,1>, COMDAT

; 628  : 	{

	push	ebp
	mov	ebp, esp

; 629  : 		return tvec3<T, P>(
; 630  : 			v.x * scalar,
; 631  : 			v.y * scalar,
; 632  : 			v.z * scalar);

	mov	ecx, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	mulss	xmm0, DWORD PTR _scalar$[ebp]
	movss	DWORD PTR [eax], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mulss	xmm0, DWORD PTR _scalar$[ebp]
	movss	DWORD PTR [eax+4], xmm0
	movss	xmm0, DWORD PTR [ecx+8]
	mulss	xmm0, DWORD PTR _scalar$[ebp]
	movss	DWORD PTR [eax+8], xmm0

; 633  : 	}

	pop	ebp
	ret	0
??$?DM$00@glm@@YA?AU?$tvec3@M$00@0@ABU10@M@Z ENDP	; glm::operator*<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??$quat_cast@M$00@glm@@YA?AU?$tquat@M$00@0@ABU?$tmat3x3@M$00@0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
tv575 = 12						; size = 4
_biggestVal$ = 12					; size = 4
_m$ = 12						; size = 4
??$quat_cast@M$00@glm@@YA?AU?$tquat@M$00@0@ABU?$tmat3x3@M$00@0@@Z PROC ; glm::quat_cast<float,1>, COMDAT

; 622  : 	{

	push	ebp
	mov	ebp, esp
	push	esi

; 623  : 		T fourXSquaredMinus1 = m[0][0] - m[1][1] - m[2][2];

	mov	esi, DWORD PTR _m$[ebp]
	push	edi

; 624  : 		T fourYSquaredMinus1 = m[1][1] - m[0][0] - m[2][2];
; 625  : 		T fourZSquaredMinus1 = m[2][2] - m[0][0] - m[1][1];
; 626  : 		T fourWSquaredMinus1 = m[0][0] + m[1][1] + m[2][2];
; 627  : 
; 628  : 		int biggestIndex = 0;

	xor	edi, edi
	movss	xmm0, DWORD PTR [esi+32]
	movss	xmm1, DWORD PTR [esi+16]
	movaps	xmm2, xmm0
	subss	xmm2, DWORD PTR [esi]
	movss	xmm4, DWORD PTR [esi]
	movaps	xmm3, xmm1
	subss	xmm3, DWORD PTR [esi]
	subss	xmm4, xmm1
	subss	xmm2, xmm1
	addss	xmm1, DWORD PTR [esi]
	subss	xmm3, xmm0
	subss	xmm4, xmm0
	addss	xmm1, xmm0

; 629  : 		T fourBiggestSquaredMinus1 = fourWSquaredMinus1;
; 630  : 		if(fourXSquaredMinus1 > fourBiggestSquaredMinus1)

	comiss	xmm4, xmm1
	jbe	SHORT $LN10@quat_cast

; 631  : 		{
; 632  : 			fourBiggestSquaredMinus1 = fourXSquaredMinus1;

	movaps	xmm1, xmm4

; 633  : 			biggestIndex = 1;

	inc	edi
$LN10@quat_cast:

; 634  : 		}
; 635  : 		if(fourYSquaredMinus1 > fourBiggestSquaredMinus1)

	comiss	xmm3, xmm1
	jbe	SHORT $LN9@quat_cast

; 636  : 		{
; 637  : 			fourBiggestSquaredMinus1 = fourYSquaredMinus1;
; 638  : 			biggestIndex = 2;

	push	2
	movaps	xmm1, xmm3
	pop	edi
$LN9@quat_cast:

; 639  : 		}
; 640  : 		if(fourZSquaredMinus1 > fourBiggestSquaredMinus1)

	comiss	xmm2, xmm1
	jbe	SHORT $LN8@quat_cast

; 641  : 		{
; 642  : 			fourBiggestSquaredMinus1 = fourZSquaredMinus1;
; 643  : 			biggestIndex = 3;

	push	3
	movaps	xmm1, xmm2
	pop	edi
$LN8@quat_cast:

; 644  : 		}
; 645  : 
; 646  : 		T biggestVal = sqrt(fourBiggestSquaredMinus1 + T(1)) * T(0.5);

	addss	xmm1, DWORD PTR __real@3f800000
	push	ecx
	push	ecx
	cvtps2pd xmm0, xmm1
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt

; 647  : 		T mult = static_cast<T>(0.25) / biggestVal;

	movss	xmm1, DWORD PTR __real@3e800000

; 648  : 
; 649  : 		tquat<T, P> Result(uninitialize);
; 650  : 		switch(biggestIndex)

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	fstp	DWORD PTR tv575[ebp]
	fld	DWORD PTR tv575[ebp]
	fmul	DWORD PTR __real@3f000000
	pop	ecx
	pop	ecx
	fstp	DWORD PTR _biggestVal$[ebp]
	movss	xmm2, DWORD PTR _biggestVal$[ebp]
	divss	xmm1, xmm2
	sub	edi, 0
	je	$LN5@quat_cast
	dec	edi
	je	$LN4@quat_cast
	dec	edi
	je	SHORT $LN3@quat_cast
	dec	edi
	jne	$LN6@quat_cast

; 670  : 		case 3:
; 671  : 			Result.w = (m[0][1] - m[1][0]) * mult;

	movss	xmm0, DWORD PTR [esi+4]
	subss	xmm0, DWORD PTR [esi+12]

; 672  : 			Result.x = (m[2][0] + m[0][2]) * mult;
; 673  : 			Result.y = (m[1][2] + m[2][1]) * mult;
; 674  : 			Result.z = biggestVal;

	movss	DWORD PTR [eax+8], xmm2
	mulss	xmm0, xmm1
	movss	DWORD PTR [eax+12], xmm0
	movss	xmm0, DWORD PTR [esi+24]
	addss	xmm0, DWORD PTR [esi+8]
	mulss	xmm0, xmm1
	movss	DWORD PTR [eax], xmm0
	movss	xmm0, DWORD PTR [esi+28]
	addss	xmm0, DWORD PTR [esi+20]
	mulss	xmm0, xmm1
	movss	DWORD PTR [eax+4], xmm0

; 675  : 			break;

	jmp	$LN6@quat_cast
$LN3@quat_cast:

; 664  : 		case 2:
; 665  : 			Result.w = (m[2][0] - m[0][2]) * mult;

	movss	xmm0, DWORD PTR [esi+24]
	subss	xmm0, DWORD PTR [esi+8]

; 666  : 			Result.x = (m[0][1] + m[1][0]) * mult;
; 667  : 			Result.y = biggestVal;

	movss	DWORD PTR [eax+4], xmm2
	mulss	xmm0, xmm1
	movss	DWORD PTR [eax+12], xmm0
	movss	xmm0, DWORD PTR [esi+12]
	addss	xmm0, DWORD PTR [esi+4]
	mulss	xmm0, xmm1
	movss	DWORD PTR [eax], xmm0

; 668  : 			Result.z = (m[1][2] + m[2][1]) * mult;

	movss	xmm0, DWORD PTR [esi+28]
	addss	xmm0, DWORD PTR [esi+20]

; 669  : 			break;

	jmp	SHORT $LN163@quat_cast
$LN4@quat_cast:

; 657  : 			break;
; 658  : 		case 1:
; 659  : 			Result.w = (m[1][2] - m[2][1]) * mult;

	movss	xmm0, DWORD PTR [esi+20]
	subss	xmm0, DWORD PTR [esi+28]

; 660  : 			Result.x = biggestVal;

	movss	DWORD PTR [eax], xmm2
	mulss	xmm0, xmm1
	movss	DWORD PTR [eax+12], xmm0

; 661  : 			Result.y = (m[0][1] + m[1][0]) * mult;

	movss	xmm0, DWORD PTR [esi+12]
	addss	xmm0, DWORD PTR [esi+4]
	mulss	xmm0, xmm1
	movss	DWORD PTR [eax+4], xmm0

; 662  : 			Result.z = (m[2][0] + m[0][2]) * mult;

	movss	xmm0, DWORD PTR [esi+24]
	addss	xmm0, DWORD PTR [esi+8]

; 663  : 			break;

	jmp	SHORT $LN163@quat_cast
$LN5@quat_cast:

; 651  : 		{
; 652  : 		case 0:
; 653  : 			Result.w = biggestVal;
; 654  : 			Result.x = (m[1][2] - m[2][1]) * mult;

	movss	xmm0, DWORD PTR [esi+20]
	subss	xmm0, DWORD PTR [esi+28]
	movss	DWORD PTR [eax+12], xmm2
	mulss	xmm0, xmm1
	movss	DWORD PTR [eax], xmm0

; 655  : 			Result.y = (m[2][0] - m[0][2]) * mult;

	movss	xmm0, DWORD PTR [esi+24]
	subss	xmm0, DWORD PTR [esi+8]
	mulss	xmm0, xmm1
	movss	DWORD PTR [eax+4], xmm0

; 656  : 			Result.z = (m[0][1] - m[1][0]) * mult;

	movss	xmm0, DWORD PTR [esi+4]
	subss	xmm0, DWORD PTR [esi+12]
$LN163@quat_cast:
	mulss	xmm0, xmm1
	movss	DWORD PTR [eax+8], xmm0
$LN6@quat_cast:
	pop	edi
	pop	esi

; 676  : 			
; 677  : 		default:					// Silence a -Wswitch-default warning in GCC. Should never actually get here. Assert is just for sanity.
; 678  : 			assert(false);
; 679  : 			break;
; 680  : 		}
; 681  : 		return Result;
; 682  : 	}

	pop	ebp
	ret	0
??$quat_cast@M$00@glm@@YA?AU?$tquat@M$00@0@ABU?$tmat3x3@M$00@0@@Z ENDP ; glm::quat_cast<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??$quat_cast@M$00@glm@@YA?AU?$tquat@M$00@0@ABU?$tmat4x4@M$00@0@@Z
_TEXT	SEGMENT
$T1 = -40						; size = 36
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_m4$ = 12						; size = 4
??$quat_cast@M$00@glm@@YA?AU?$tquat@M$00@0@ABU?$tmat4x4@M$00@0@@Z PROC ; glm::quat_cast<float,1>, COMDAT

; 686  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, DWORD PTR _m4$[ebp]
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]

; 687  : 		return quat_cast(tmat3x3<T, P>(m4));

	push	ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$tmat3x3@M$00@glm@@QAE@ABU?$tmat4x4@M$00@1@@Z ; glm::tmat3x3<float,1>::tmat3x3<float,1>
	push	eax
	push	esi
	call	??$quat_cast@M$00@glm@@YA?AU?$tquat@M$00@0@ABU?$tmat3x3@M$00@0@@Z ; glm::quat_cast<float,1>
	pop	ecx
	pop	ecx

; 688  : 	}

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	mov	eax, esi
	xor	ecx, ebp
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
??$quat_cast@M$00@glm@@YA?AU?$tquat@M$00@0@ABU?$tmat4x4@M$00@0@@Z ENDP ; glm::quat_cast<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??$mat4_cast@N$01@glm@@YA?AU?$tmat4x4@N$01@0@ABU?$tquat@N$01@0@@Z
_TEXT	SEGMENT
$T1 = -76						; size = 72
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_q$ = 12						; size = 4
??$mat4_cast@N$01@glm@@YA?AU?$tmat4x4@N$01@0@ABU?$tquat@N$01@0@@Z PROC ; glm::mat4_cast<double,2>, COMDAT

; 616  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, DWORD PTR _q$[ebp]

; 617  : 		return tmat4x4<T, P>(mat3_cast(q));

	lea	eax, DWORD PTR $T1[ebp]
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	push	eax
	call	??$mat3_cast@N$01@glm@@YA?AU?$tmat3x3@N$01@0@ABU?$tquat@N$01@0@@Z ; glm::mat3_cast<double,2>
	pop	ecx
	pop	ecx
	push	eax
	mov	ecx, esi
	call	??0?$tmat4x4@N$01@glm@@QAE@ABU?$tmat3x3@N$01@1@@Z ; glm::tmat4x4<double,2>::tmat4x4<double,2>

; 618  : 	}

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	mov	eax, esi
	xor	ecx, ebp
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
??$mat4_cast@N$01@glm@@YA?AU?$tmat4x4@N$01@0@ABU?$tquat@N$01@0@@Z ENDP ; glm::mat4_cast<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??$mat3_cast@N$01@glm@@YA?AU?$tmat3x3@N$01@0@ABU?$tquat@N$01@0@@Z
_TEXT	SEGMENT
_qyy$1$ = -32						; size = 8
_qyz$1$ = -24						; size = 8
_qxx$1$ = -16						; size = 8
_qxz$1$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
_q$ = 12						; size = 4
??$mat3_cast@N$01@glm@@YA?AU?$tmat3x3@N$01@0@ABU?$tquat@N$01@0@@Z PROC ; glm::mat3_cast<double,2>, COMDAT

; 588  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H

; 589  : 		tmat3x3<T, P> Result(T(1));

	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	push	ecx
	mov	ecx, esi
	movsd	QWORD PTR [esp], xmm0
	call	??0?$tmat3x3@N$01@glm@@QAE@N@Z		; glm::tmat3x3<double,2>::tmat3x3<double,2>

; 590  : 		T qxx(q.x * q.x);

	mov	eax, DWORD PTR _q$[ebp]
	movsd	xmm0, QWORD PTR [eax]

; 591  : 		T qyy(q.y * q.y);

	movsd	xmm1, QWORD PTR [eax+8]
	mulsd	xmm0, xmm0
	movapd	xmm4, xmm1
	mulsd	xmm4, xmm1

; 592  : 		T qzz(q.z * q.z);
; 593  : 		T qxz(q.x * q.z);
; 594  : 		T qxy(q.x * q.y);

	movapd	xmm3, xmm1
	mulsd	xmm3, QWORD PTR [eax]
	movsd	QWORD PTR _qxx$1$[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	movapd	xmm2, xmm0
	movsd	QWORD PTR _qyy$1$[ebp], xmm4
	mulsd	xmm2, QWORD PTR [eax]
	movapd	xmm7, xmm0
	mulsd	xmm7, xmm0
	movsd	QWORD PTR _qxz$1$[ebp], xmm2

; 595  : 		T qyz(q.y * q.z);

	movapd	xmm2, xmm0
	mulsd	xmm2, xmm1
	movsd	QWORD PTR _qyz$1$[ebp], xmm2

; 596  : 		T qwx(q.w * q.x);

	movsd	xmm2, QWORD PTR [eax+24]

; 597  : 		T qwy(q.w * q.y);

	movapd	xmm5, xmm2
	movapd	xmm6, xmm2
	mulsd	xmm6, QWORD PTR [eax]

; 598  : 		T qwz(q.w * q.z);
; 599  : 
; 600  : 		Result[0][0] = T(1) - T(2) * (qyy +  qzz);
; 601  : 		Result[0][1] = T(2) * (qxy + qwz);
; 602  : 		Result[0][2] = T(2) * (qxz - qwy);
; 603  : 
; 604  : 		Result[1][0] = T(2) * (qxy - qwz);
; 605  : 		Result[1][1] = T(1) - T(2) * (qxx +  qzz);
; 606  : 		Result[1][2] = T(2) * (qyz + qwx);
; 607  : 
; 608  : 		Result[2][0] = T(2) * (qxz + qwy);
; 609  : 		Result[2][1] = T(2) * (qyz - qwx);
; 610  : 		Result[2][2] = T(1) - T(2) * (qxx +  qyy);
; 611  : 		return Result;

	mov	eax, esi
	mulsd	xmm5, xmm1
	movapd	xmm1, xmm7
	mulsd	xmm2, xmm0
	addsd	xmm1, xmm4
	movsd	xmm4, QWORD PTR __real@4000000000000000
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	addsd	xmm7, QWORD PTR _qxx$1$[ebp]
	mulsd	xmm1, xmm4
	mulsd	xmm7, xmm4
	subsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR _qxz$1$[ebp]
	movsd	QWORD PTR [esi], xmm0
	movaps	xmm0, xmm2
	addsd	xmm0, xmm3
	subsd	xmm3, xmm2
	movsd	xmm2, QWORD PTR _qyz$1$[ebp]
	mulsd	xmm0, xmm4
	mulsd	xmm3, xmm4
	movsd	QWORD PTR [esi+8], xmm0
	movaps	xmm0, xmm1
	subsd	xmm0, xmm5
	addsd	xmm5, xmm1
	movsd	QWORD PTR [esi+24], xmm3
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	mulsd	xmm0, xmm4
	mulsd	xmm5, xmm4
	movsd	QWORD PTR [esi+16], xmm0
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	subsd	xmm0, xmm7
	movsd	QWORD PTR [esi+48], xmm5
	movsd	QWORD PTR [esi+32], xmm0
	movapd	xmm0, xmm6
	addsd	xmm0, xmm2
	subsd	xmm2, xmm6
	mulsd	xmm0, xmm4
	mulsd	xmm2, xmm4
	movsd	QWORD PTR [esi+40], xmm0
	movsd	xmm0, QWORD PTR _qyy$1$[ebp]
	addsd	xmm0, QWORD PTR _qxx$1$[ebp]
	movsd	QWORD PTR [esi+56], xmm2
	mulsd	xmm0, xmm4
	subsd	xmm1, xmm0
	movsd	QWORD PTR [esi+64], xmm1
	pop	esi

; 612  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$mat3_cast@N$01@glm@@YA?AU?$tmat3x3@N$01@0@ABU?$tquat@N$01@0@@Z ENDP ; glm::mat3_cast<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??$normalize@N$01@glm@@YA?AU?$tquat@N$01@0@ABU10@@Z
_TEXT	SEGMENT
_len$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
_q$ = 12						; size = 4
??$normalize@N$01@glm@@YA?AU?$tquat@N$01@0@ABU10@@Z PROC ; glm::normalize<double,2>, COMDAT

; 380  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	esi

; 381  : 		T len = length(q);

	mov	esi, DWORD PTR _q$[ebp]
	push	ecx
	push	ecx
	movsd	xmm3, QWORD PTR [esi]
	movsd	xmm2, QWORD PTR [esi+8]
	movsd	xmm1, QWORD PTR [esi+16]
	movsd	xmm0, QWORD PTR [esi+24]
	mulsd	xmm0, xmm0
	mulsd	xmm3, xmm3
	mulsd	xmm2, xmm2
	mulsd	xmm1, xmm1
	addsd	xmm2, xmm3
	addsd	xmm0, xmm1
	addsd	xmm0, xmm2
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt

; 382  : 		if(len <= T(0)) // Problem
; 383  : 			return tquat<T, P>(1, 0, 0, 0);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	xorps	xmm0, xmm0
	fstp	QWORD PTR _len$[ebp]
	comisd	xmm0, QWORD PTR _len$[ebp]
	pop	ecx
	pop	ecx
	jb	SHORT $LN1@normalize
	movups	XMMWORD PTR [eax], xmm0
	movsd	QWORD PTR [eax+16], xmm0
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR [eax+24], xmm0
	jmp	SHORT $LN2@normalize
$LN1@normalize:

; 384  : 		T oneOverLen = T(1) / len;

	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	divsd	xmm1, QWORD PTR _len$[ebp]

; 385  : 		return tquat<T, P>(q.w * oneOverLen, q.x * oneOverLen, q.y * oneOverLen, q.z * oneOverLen);

	movups	xmm0, XMMWORD PTR [esi]
	unpcklpd xmm1, xmm1
	mulpd	xmm0, xmm1
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [esi+16]
	mulpd	xmm0, xmm1
	movups	XMMWORD PTR [eax+16], xmm0
$LN2@normalize:
	pop	esi

; 386  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$normalize@N$01@glm@@YA?AU?$tquat@N$01@0@ABU10@@Z ENDP ; glm::normalize<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_dot@Utvec3@glm@@N$01$0A@@detail@glm@@SANABU?$tvec3@N$01@3@0@Z
_TEXT	SEGMENT
_tmp$ = -24						; size = 24
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?call@?$compute_dot@Utvec3@glm@@N$01$0A@@detail@glm@@SANABU?$tvec3@N$01@3@0@Z PROC ; glm::detail::compute_dot<glm::tvec3,double,2,0>::call, COMDAT

; 57   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 58   : 			tvec3<T, P> tmp(x * y);

	mov	ecx, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR _y$[ebp]
	movsd	xmm0, QWORD PTR [ecx]
	mulsd	xmm0, QWORD PTR [eax]
	fld	QWORD PTR [ecx+8]
	fmul	QWORD PTR [eax+8]
	movsd	QWORD PTR _tmp$[ebp], xmm0
	movsd	xmm0, QWORD PTR [ecx+16]
	mulsd	xmm0, QWORD PTR [eax+16]

; 59   : 			return tmp.x + tmp.y + tmp.z;

	fadd	QWORD PTR _tmp$[ebp]
	movsd	QWORD PTR _tmp$[ebp+16], xmm0
	fadd	QWORD PTR _tmp$[ebp+16]

; 60   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?call@?$compute_dot@Utvec3@glm@@N$01$0A@@detail@glm@@SANABU?$tvec3@N$01@3@0@Z ENDP ; glm::detail::compute_dot<glm::tvec3,double,2,0>::call
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\func_geometric.inl
;	COMDAT ??$cross@N$01@glm@@YA?AU?$tvec3@N$01@0@ABU10@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
??$cross@N$01@glm@@YA?AU?$tvec3@N$01@0@ABU10@0@Z PROC	; glm::cross<double,2>, COMDAT

; 180  : 	{

	push	ebp
	mov	ebp, esp

; 181  : 		return detail::compute_cross<T, P, detail::is_aligned<P>::value>::call(x, y);

	mov	ecx, DWORD PTR _y$[ebp]
	mov	edx, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movsd	xmm1, QWORD PTR [ecx+16]
	mulsd	xmm1, QWORD PTR [edx+8]
	movsd	xmm0, QWORD PTR [ecx+8]
	mulsd	xmm0, QWORD PTR [edx+16]
	movsd	xmm3, QWORD PTR [ecx]
	movsd	xmm2, QWORD PTR [edx]
	subsd	xmm1, xmm0
	movaps	xmm0, xmm2
	mulsd	xmm0, QWORD PTR [ecx+16]
	mulsd	xmm2, QWORD PTR [ecx+8]
	movsd	QWORD PTR [eax], xmm1
	movaps	xmm1, xmm3
	mulsd	xmm1, QWORD PTR [edx+16]
	mulsd	xmm3, QWORD PTR [edx+8]
	subsd	xmm1, xmm0
	subsd	xmm2, xmm3
	movsd	QWORD PTR [eax+8], xmm1
	movsd	QWORD PTR [eax+16], xmm2

; 182  : 	}

	pop	ebp
	ret	0
??$cross@N$01@glm@@YA?AU?$tvec3@N$01@0@ABU10@0@Z ENDP	; glm::cross<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\func_trigonometric.inl
;	COMDAT ??$sin@N$01Utvec3@glm@@@glm@@YA?AU?$tvec3@N$01@0@ABU10@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
??$sin@N$01Utvec3@glm@@@glm@@YA?AU?$tvec3@N$01@0@ABU10@@Z PROC ; glm::sin<double,2,glm::tvec3>, COMDAT

; 45   : 	{

	push	ebp
	mov	ebp, esp

; 46   : 		return detail::functor1<T, T, P, vecType>::call(sin, v);

	push	DWORD PTR _v$[ebp]
	push	OFFSET _sin
	push	DWORD PTR ___$ReturnUdt$[ebp]
	call	?call@?$functor1@NN$01Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@N$01@3@P6ANN@ZABU43@@Z ; glm::detail::functor1<double,double,2,glm::tvec3>::call
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	add	esp, 12					; 0000000cH

; 47   : 	}

	pop	ebp
	ret	0
??$sin@N$01Utvec3@glm@@@glm@@YA?AU?$tvec3@N$01@0@ABU10@@Z ENDP ; glm::sin<double,2,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\func_trigonometric.inl
;	COMDAT ??$cos@N$01Utvec3@glm@@@glm@@YA?AU?$tvec3@N$01@0@ABU10@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
??$cos@N$01Utvec3@glm@@@glm@@YA?AU?$tvec3@N$01@0@ABU10@@Z PROC ; glm::cos<double,2,glm::tvec3>, COMDAT

; 54   : 	{

	push	ebp
	mov	ebp, esp

; 55   : 		return detail::functor1<T, T, P, vecType>::call(cos, v);

	push	DWORD PTR _v$[ebp]
	push	OFFSET _cos
	push	DWORD PTR ___$ReturnUdt$[ebp]
	call	?call@?$functor1@NN$01Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@N$01@3@P6ANN@ZABU43@@Z ; glm::detail::functor1<double,double,2,glm::tvec3>::call
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	add	esp, 12					; 0000000cH

; 56   : 	}

	pop	ebp
	ret	0
??$cos@N$01Utvec3@glm@@@glm@@YA?AU?$tvec3@N$01@0@ABU10@@Z ENDP ; glm::cos<double,2,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?DN$01@glm@@YA?AU?$tvec3@N$01@0@ABU10@N@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
_scalar$ = 16						; size = 8
??$?DN$01@glm@@YA?AU?$tvec3@N$01@0@ABU10@N@Z PROC	; glm::operator*<double,2>, COMDAT

; 628  : 	{

	push	ebp
	mov	ebp, esp

; 629  : 		return tvec3<T, P>(
; 630  : 			v.x * scalar,
; 631  : 			v.y * scalar,
; 632  : 			v.z * scalar);

	mov	ecx, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movsd	xmm0, QWORD PTR [ecx]
	mulsd	xmm0, QWORD PTR _scalar$[ebp]
	movsd	QWORD PTR [eax], xmm0
	movsd	xmm0, QWORD PTR [ecx+8]
	mulsd	xmm0, QWORD PTR _scalar$[ebp]
	movsd	QWORD PTR [eax+8], xmm0
	movsd	xmm0, QWORD PTR [ecx+16]
	mulsd	xmm0, QWORD PTR _scalar$[ebp]
	movsd	QWORD PTR [eax+16], xmm0

; 633  : 	}

	pop	ebp
	ret	0
??$?DN$01@glm@@YA?AU?$tvec3@N$01@0@ABU10@N@Z ENDP	; glm::operator*<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??$quat_cast@N$01@glm@@YA?AU?$tquat@N$01@0@ABU?$tmat3x3@N$01@0@@Z
_TEXT	SEGMENT
_biggestVal$ = -8					; size = 8
___$ReturnUdt$ = 8					; size = 4
_m$ = 12						; size = 4
??$quat_cast@N$01@glm@@YA?AU?$tquat@N$01@0@ABU?$tmat3x3@N$01@0@@Z PROC ; glm::quat_cast<double,2>, COMDAT

; 622  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	esi

; 623  : 		T fourXSquaredMinus1 = m[0][0] - m[1][1] - m[2][2];

	mov	esi, DWORD PTR _m$[ebp]
	push	edi

; 624  : 		T fourYSquaredMinus1 = m[1][1] - m[0][0] - m[2][2];
; 625  : 		T fourZSquaredMinus1 = m[2][2] - m[0][0] - m[1][1];
; 626  : 		T fourWSquaredMinus1 = m[0][0] + m[1][1] + m[2][2];
; 627  : 
; 628  : 		int biggestIndex = 0;

	xor	edi, edi
	movsd	xmm0, QWORD PTR [esi+64]
	movsd	xmm1, QWORD PTR [esi+32]
	movapd	xmm2, xmm0
	subsd	xmm2, QWORD PTR [esi]
	movsd	xmm4, QWORD PTR [esi]
	movapd	xmm3, xmm1
	subsd	xmm3, QWORD PTR [esi]
	subsd	xmm4, xmm1
	subsd	xmm2, xmm1
	addsd	xmm1, QWORD PTR [esi]
	subsd	xmm3, xmm0
	subsd	xmm4, xmm0
	addsd	xmm1, xmm0

; 629  : 		T fourBiggestSquaredMinus1 = fourWSquaredMinus1;
; 630  : 		if(fourXSquaredMinus1 > fourBiggestSquaredMinus1)

	comisd	xmm4, xmm1
	jbe	SHORT $LN10@quat_cast

; 631  : 		{
; 632  : 			fourBiggestSquaredMinus1 = fourXSquaredMinus1;

	movaps	xmm1, xmm4

; 633  : 			biggestIndex = 1;

	inc	edi
$LN10@quat_cast:

; 634  : 		}
; 635  : 		if(fourYSquaredMinus1 > fourBiggestSquaredMinus1)

	comisd	xmm3, xmm1
	jbe	SHORT $LN9@quat_cast

; 636  : 		{
; 637  : 			fourBiggestSquaredMinus1 = fourYSquaredMinus1;
; 638  : 			biggestIndex = 2;

	push	2
	movapd	xmm1, xmm3
	pop	edi
$LN9@quat_cast:

; 639  : 		}
; 640  : 		if(fourZSquaredMinus1 > fourBiggestSquaredMinus1)

	comisd	xmm2, xmm1
	jbe	SHORT $LN8@quat_cast

; 641  : 		{
; 642  : 			fourBiggestSquaredMinus1 = fourZSquaredMinus1;
; 643  : 			biggestIndex = 3;

	push	3
	movapd	xmm1, xmm2
	pop	edi
$LN8@quat_cast:

; 644  : 		}
; 645  : 
; 646  : 		T biggestVal = sqrt(fourBiggestSquaredMinus1 + T(1)) * T(0.5);

	addsd	xmm1, QWORD PTR __real@3ff0000000000000
	push	ecx
	push	ecx
	movsd	QWORD PTR [esp], xmm1
	call	_sqrt
	fmul	QWORD PTR __real@3fe0000000000000

; 647  : 		T mult = static_cast<T>(0.25) / biggestVal;

	movsd	xmm1, QWORD PTR __real@3fd0000000000000

; 648  : 
; 649  : 		tquat<T, P> Result(uninitialize);
; 650  : 		switch(biggestIndex)

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	ecx
	pop	ecx
	fstp	QWORD PTR _biggestVal$[ebp]
	movsd	xmm2, QWORD PTR _biggestVal$[ebp]
	divsd	xmm1, xmm2
	sub	edi, 0
	je	$LN5@quat_cast
	dec	edi
	je	$LN4@quat_cast
	dec	edi
	je	SHORT $LN3@quat_cast
	dec	edi
	jne	$LN6@quat_cast

; 670  : 		case 3:
; 671  : 			Result.w = (m[0][1] - m[1][0]) * mult;

	movsd	xmm0, QWORD PTR [esi+8]
	subsd	xmm0, QWORD PTR [esi+24]

; 672  : 			Result.x = (m[2][0] + m[0][2]) * mult;
; 673  : 			Result.y = (m[1][2] + m[2][1]) * mult;
; 674  : 			Result.z = biggestVal;

	movsd	QWORD PTR [eax+16], xmm2
	mulsd	xmm0, xmm1
	movsd	QWORD PTR [eax+24], xmm0
	movsd	xmm0, QWORD PTR [esi+48]
	addsd	xmm0, QWORD PTR [esi+16]
	mulsd	xmm0, xmm1
	movsd	QWORD PTR [eax], xmm0
	movsd	xmm0, QWORD PTR [esi+56]
	addsd	xmm0, QWORD PTR [esi+40]
	mulsd	xmm0, xmm1
	movsd	QWORD PTR [eax+8], xmm0

; 675  : 			break;

	jmp	$LN6@quat_cast
$LN3@quat_cast:

; 664  : 		case 2:
; 665  : 			Result.w = (m[2][0] - m[0][2]) * mult;

	movsd	xmm0, QWORD PTR [esi+48]
	subsd	xmm0, QWORD PTR [esi+16]

; 666  : 			Result.x = (m[0][1] + m[1][0]) * mult;
; 667  : 			Result.y = biggestVal;

	movsd	QWORD PTR [eax+8], xmm2
	mulsd	xmm0, xmm1
	movsd	QWORD PTR [eax+24], xmm0
	movsd	xmm0, QWORD PTR [esi+24]
	addsd	xmm0, QWORD PTR [esi+8]
	mulsd	xmm0, xmm1
	movsd	QWORD PTR [eax], xmm0

; 668  : 			Result.z = (m[1][2] + m[2][1]) * mult;

	movsd	xmm0, QWORD PTR [esi+56]
	addsd	xmm0, QWORD PTR [esi+40]

; 669  : 			break;

	jmp	SHORT $LN159@quat_cast
$LN4@quat_cast:

; 657  : 			break;
; 658  : 		case 1:
; 659  : 			Result.w = (m[1][2] - m[2][1]) * mult;

	movsd	xmm0, QWORD PTR [esi+40]
	subsd	xmm0, QWORD PTR [esi+56]

; 660  : 			Result.x = biggestVal;

	movsd	QWORD PTR [eax], xmm2
	mulsd	xmm0, xmm1
	movsd	QWORD PTR [eax+24], xmm0

; 661  : 			Result.y = (m[0][1] + m[1][0]) * mult;

	movsd	xmm0, QWORD PTR [esi+24]
	addsd	xmm0, QWORD PTR [esi+8]
	mulsd	xmm0, xmm1
	movsd	QWORD PTR [eax+8], xmm0

; 662  : 			Result.z = (m[2][0] + m[0][2]) * mult;

	movsd	xmm0, QWORD PTR [esi+48]
	addsd	xmm0, QWORD PTR [esi+16]

; 663  : 			break;

	jmp	SHORT $LN159@quat_cast
$LN5@quat_cast:

; 651  : 		{
; 652  : 		case 0:
; 653  : 			Result.w = biggestVal;
; 654  : 			Result.x = (m[1][2] - m[2][1]) * mult;

	movsd	xmm0, QWORD PTR [esi+40]
	subsd	xmm0, QWORD PTR [esi+56]
	movsd	QWORD PTR [eax+24], xmm2
	mulsd	xmm0, xmm1
	movsd	QWORD PTR [eax], xmm0

; 655  : 			Result.y = (m[2][0] - m[0][2]) * mult;

	movsd	xmm0, QWORD PTR [esi+48]
	subsd	xmm0, QWORD PTR [esi+16]
	mulsd	xmm0, xmm1
	movsd	QWORD PTR [eax+8], xmm0

; 656  : 			Result.z = (m[0][1] - m[1][0]) * mult;

	movsd	xmm0, QWORD PTR [esi+8]
	subsd	xmm0, QWORD PTR [esi+24]
$LN159@quat_cast:
	mulsd	xmm0, xmm1
	movsd	QWORD PTR [eax+16], xmm0
$LN6@quat_cast:
	pop	edi
	pop	esi

; 676  : 			
; 677  : 		default:					// Silence a -Wswitch-default warning in GCC. Should never actually get here. Assert is just for sanity.
; 678  : 			assert(false);
; 679  : 			break;
; 680  : 		}
; 681  : 		return Result;
; 682  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$quat_cast@N$01@glm@@YA?AU?$tquat@N$01@0@ABU?$tmat3x3@N$01@0@@Z ENDP ; glm::quat_cast<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??$quat_cast@N$01@glm@@YA?AU?$tquat@N$01@0@ABU?$tmat4x4@N$01@0@@Z
_TEXT	SEGMENT
$T1 = -76						; size = 72
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_m4$ = 12						; size = 4
??$quat_cast@N$01@glm@@YA?AU?$tquat@N$01@0@ABU?$tmat4x4@N$01@0@@Z PROC ; glm::quat_cast<double,2>, COMDAT

; 686  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, DWORD PTR _m4$[ebp]
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]

; 687  : 		return quat_cast(tmat3x3<T, P>(m4));

	push	ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$tmat3x3@N$01@glm@@QAE@ABU?$tmat4x4@N$01@1@@Z ; glm::tmat3x3<double,2>::tmat3x3<double,2>
	push	eax
	push	esi
	call	??$quat_cast@N$01@glm@@YA?AU?$tquat@N$01@0@ABU?$tmat3x3@N$01@0@@Z ; glm::quat_cast<double,2>
	pop	ecx
	pop	ecx

; 688  : 	}

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	mov	eax, esi
	xor	ecx, ebp
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
??$quat_cast@N$01@glm@@YA?AU?$tquat@N$01@0@ABU?$tmat4x4@N$01@0@@Z ENDP ; glm::quat_cast<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??$mat4_cast@M$01@glm@@YA?AU?$tmat4x4@M$01@0@ABU?$tquat@M$01@0@@Z
_TEXT	SEGMENT
$T1 = -40						; size = 36
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_q$ = 12						; size = 4
??$mat4_cast@M$01@glm@@YA?AU?$tmat4x4@M$01@0@ABU?$tquat@M$01@0@@Z PROC ; glm::mat4_cast<float,2>, COMDAT

; 616  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, DWORD PTR _q$[ebp]

; 617  : 		return tmat4x4<T, P>(mat3_cast(q));

	lea	eax, DWORD PTR $T1[ebp]
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	push	eax
	call	??$mat3_cast@M$01@glm@@YA?AU?$tmat3x3@M$01@0@ABU?$tquat@M$01@0@@Z ; glm::mat3_cast<float,2>
	pop	ecx
	pop	ecx
	push	eax
	mov	ecx, esi
	call	??0?$tmat4x4@M$01@glm@@QAE@ABU?$tmat3x3@M$01@1@@Z ; glm::tmat4x4<float,2>::tmat4x4<float,2>

; 618  : 	}

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	mov	eax, esi
	xor	ecx, ebp
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
??$mat4_cast@M$01@glm@@YA?AU?$tmat4x4@M$01@0@ABU?$tquat@M$01@0@@Z ENDP ; glm::mat4_cast<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??$mat3_cast@M$01@glm@@YA?AU?$tmat3x3@M$01@0@ABU?$tquat@M$01@0@@Z
_TEXT	SEGMENT
_qyy$1$ = -8						; size = 4
_qyz$1$ = -4						; size = 4
_qxz$1$ = 8						; size = 4
___$ReturnUdt$ = 8					; size = 4
_qxx$1$ = 12						; size = 4
_q$ = 12						; size = 4
??$mat3_cast@M$01@glm@@YA?AU?$tmat3x3@M$01@0@ABU?$tquat@M$01@0@@Z PROC ; glm::mat3_cast<float,2>, COMDAT

; 588  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	esi

; 589  : 		tmat3x3<T, P> Result(T(1));

	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	mov	ecx, esi
	mov	DWORD PTR [esp], 1065353216		; 3f800000H
	call	??0?$tmat3x3@M$01@glm@@QAE@M@Z		; glm::tmat3x3<float,2>::tmat3x3<float,2>

; 590  : 		T qxx(q.x * q.x);

	mov	eax, DWORD PTR _q$[ebp]
	movss	xmm0, DWORD PTR [eax]

; 591  : 		T qyy(q.y * q.y);

	movss	xmm1, DWORD PTR [eax+4]
	mulss	xmm0, xmm0
	movaps	xmm4, xmm1
	mulss	xmm4, xmm1

; 592  : 		T qzz(q.z * q.z);
; 593  : 		T qxz(q.x * q.z);
; 594  : 		T qxy(q.x * q.y);

	movaps	xmm3, xmm1
	movss	DWORD PTR _qxx$1$[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movaps	xmm2, xmm0
	mulss	xmm3, DWORD PTR [eax]
	mulss	xmm2, DWORD PTR [eax]
	movaps	xmm7, xmm0
	mulss	xmm7, xmm0
	movss	DWORD PTR _qxz$1$[ebp], xmm2

; 595  : 		T qyz(q.y * q.z);

	movaps	xmm2, xmm0
	mulss	xmm2, xmm1
	movss	DWORD PTR _qyy$1$[ebp], xmm4
	movss	DWORD PTR _qyz$1$[ebp], xmm2

; 596  : 		T qwx(q.w * q.x);

	movss	xmm2, DWORD PTR [eax+12]

; 597  : 		T qwy(q.w * q.y);

	movaps	xmm5, xmm2
	movaps	xmm6, xmm2
	mulss	xmm6, DWORD PTR [eax]

; 598  : 		T qwz(q.w * q.z);
; 599  : 
; 600  : 		Result[0][0] = T(1) - T(2) * (qyy +  qzz);
; 601  : 		Result[0][1] = T(2) * (qxy + qwz);
; 602  : 		Result[0][2] = T(2) * (qxz - qwy);
; 603  : 
; 604  : 		Result[1][0] = T(2) * (qxy - qwz);
; 605  : 		Result[1][1] = T(1) - T(2) * (qxx +  qzz);
; 606  : 		Result[1][2] = T(2) * (qyz + qwx);
; 607  : 
; 608  : 		Result[2][0] = T(2) * (qxz + qwy);
; 609  : 		Result[2][1] = T(2) * (qyz - qwx);
; 610  : 		Result[2][2] = T(1) - T(2) * (qxx +  qyy);
; 611  : 		return Result;

	mov	eax, esi
	mulss	xmm5, xmm1
	movaps	xmm1, xmm7
	mulss	xmm2, xmm0
	addss	xmm1, xmm4
	movss	xmm4, DWORD PTR __real@40000000
	movss	xmm0, DWORD PTR __real@3f800000
	addss	xmm7, DWORD PTR _qxx$1$[ebp]
	mulss	xmm1, xmm4
	subss	xmm0, xmm1
	mulss	xmm7, xmm4
	movss	xmm1, DWORD PTR _qxz$1$[ebp]
	movss	DWORD PTR [esi], xmm0
	movaps	xmm0, xmm2
	addss	xmm0, xmm3
	subss	xmm3, xmm2
	movss	xmm2, DWORD PTR _qyz$1$[ebp]
	mulss	xmm0, xmm4
	mulss	xmm3, xmm4
	movss	DWORD PTR [esi+4], xmm0
	movaps	xmm0, xmm1
	subss	xmm0, xmm5
	addss	xmm5, xmm1
	movss	DWORD PTR [esi+12], xmm3
	movss	xmm1, DWORD PTR __real@3f800000
	mulss	xmm0, xmm4
	mulss	xmm5, xmm4
	movss	DWORD PTR [esi+8], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, xmm7
	movss	DWORD PTR [esi+24], xmm5
	movss	DWORD PTR [esi+16], xmm0
	movaps	xmm0, xmm6
	addss	xmm0, xmm2
	subss	xmm2, xmm6
	mulss	xmm0, xmm4
	mulss	xmm2, xmm4
	movss	DWORD PTR [esi+20], xmm0
	movss	xmm0, DWORD PTR _qyy$1$[ebp]
	addss	xmm0, DWORD PTR _qxx$1$[ebp]
	movss	DWORD PTR [esi+28], xmm2
	mulss	xmm0, xmm4
	subss	xmm1, xmm0
	movss	DWORD PTR [esi+32], xmm1
	pop	esi

; 612  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$mat3_cast@M$01@glm@@YA?AU?$tmat3x3@M$01@0@ABU?$tquat@M$01@0@@Z ENDP ; glm::mat3_cast<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??$normalize@M$01@glm@@YA?AU?$tquat@M$01@0@ABU10@@Z
_TEXT	SEGMENT
_len$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_q$ = 12						; size = 4
??$normalize@M$01@glm@@YA?AU?$tquat@M$01@0@ABU10@@Z PROC ; glm::normalize<float,2>, COMDAT

; 380  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi

; 381  : 		T len = length(q);

	mov	esi, DWORD PTR _q$[ebp]
	push	esi
	call	??$length@M$01@glm@@YAMABU?$tquat@M$01@0@@Z ; glm::length<float,2>

; 382  : 		if(len <= T(0)) // Problem
; 383  : 			return tquat<T, P>(1, 0, 0, 0);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	xorps	xmm0, xmm0
	fstp	DWORD PTR _len$[ebp]
	comiss	xmm0, DWORD PTR _len$[ebp]
	pop	ecx
	jb	SHORT $LN1@normalize
	and	DWORD PTR [eax], 0
	and	DWORD PTR [eax+4], 0
	and	DWORD PTR [eax+8], 0
	mov	DWORD PTR [eax+12], 1065353216		; 3f800000H
	jmp	SHORT $LN2@normalize
$LN1@normalize:

; 384  : 		T oneOverLen = T(1) / len;

	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, DWORD PTR _len$[ebp]

; 385  : 		return tquat<T, P>(q.w * oneOverLen, q.x * oneOverLen, q.y * oneOverLen, q.z * oneOverLen);

	movups	xmm0, XMMWORD PTR [esi]
	shufps	xmm1, xmm1, 0
	mulps	xmm0, xmm1
	movups	XMMWORD PTR [eax], xmm0
$LN2@normalize:
	pop	esi

; 386  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$normalize@M$01@glm@@YA?AU?$tquat@M$01@0@ABU10@@Z ENDP ; glm::normalize<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_dot@Utvec3@glm@@M$01$0A@@detail@glm@@SAMABU?$tvec3@M$01@3@0@Z
_TEXT	SEGMENT
_tmp$ = -12						; size = 12
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?call@?$compute_dot@Utvec3@glm@@M$01$0A@@detail@glm@@SAMABU?$tvec3@M$01@3@0@Z PROC ; glm::detail::compute_dot<glm::tvec3,float,2,0>::call, COMDAT

; 57   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 58   : 			tvec3<T, P> tmp(x * y);

	mov	ecx, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR _y$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	fld	DWORD PTR [ecx+4]
	fmul	DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR [eax]
	fstp	DWORD PTR _tmp$[ebp+4]

; 59   : 			return tmp.x + tmp.y + tmp.z;

	fld	DWORD PTR _tmp$[ebp+4]
	movss	DWORD PTR _tmp$[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+8]
	mulss	xmm0, DWORD PTR [eax+8]
	fadd	DWORD PTR _tmp$[ebp]
	movss	DWORD PTR _tmp$[ebp+8], xmm0
	fadd	DWORD PTR _tmp$[ebp+8]

; 60   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?call@?$compute_dot@Utvec3@glm@@M$01$0A@@detail@glm@@SAMABU?$tvec3@M$01@3@0@Z ENDP ; glm::detail::compute_dot<glm::tvec3,float,2,0>::call
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\func_geometric.inl
;	COMDAT ??$cross@M$01@glm@@YA?AU?$tvec3@M$01@0@ABU10@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
??$cross@M$01@glm@@YA?AU?$tvec3@M$01@0@ABU10@0@Z PROC	; glm::cross<float,2>, COMDAT

; 180  : 	{

	push	ebp
	mov	ebp, esp

; 181  : 		return detail::compute_cross<T, P, detail::is_aligned<P>::value>::call(x, y);

	mov	ecx, DWORD PTR _y$[ebp]
	mov	edx, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movss	xmm1, DWORD PTR [ecx+8]
	mulss	xmm1, DWORD PTR [edx+4]
	movss	xmm0, DWORD PTR [ecx+4]
	mulss	xmm0, DWORD PTR [edx+8]
	movss	xmm3, DWORD PTR [ecx]
	movss	xmm2, DWORD PTR [edx]
	subss	xmm1, xmm0
	movaps	xmm0, xmm2
	mulss	xmm0, DWORD PTR [ecx+8]
	mulss	xmm2, DWORD PTR [ecx+4]
	movss	DWORD PTR [eax], xmm1
	movaps	xmm1, xmm3
	mulss	xmm1, DWORD PTR [edx+8]
	mulss	xmm3, DWORD PTR [edx+4]
	subss	xmm1, xmm0
	subss	xmm2, xmm3
	movss	DWORD PTR [eax+4], xmm1
	movss	DWORD PTR [eax+8], xmm2

; 182  : 	}

	pop	ebp
	ret	0
??$cross@M$01@glm@@YA?AU?$tvec3@M$01@0@ABU10@0@Z ENDP	; glm::cross<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\func_trigonometric.inl
;	COMDAT ??$sin@M$01Utvec3@glm@@@glm@@YA?AU?$tvec3@M$01@0@ABU10@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
??$sin@M$01Utvec3@glm@@@glm@@YA?AU?$tvec3@M$01@0@ABU10@@Z PROC ; glm::sin<float,2,glm::tvec3>, COMDAT

; 45   : 	{

	push	ebp
	mov	ebp, esp

; 46   : 		return detail::functor1<T, T, P, vecType>::call(sin, v);

	push	DWORD PTR _v$[ebp]
	push	OFFSET ?sin@@YAMM@Z			; sin
	push	DWORD PTR ___$ReturnUdt$[ebp]
	call	?call@?$functor1@MM$01Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$01@3@P6AMM@ZABU43@@Z ; glm::detail::functor1<float,float,2,glm::tvec3>::call
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	add	esp, 12					; 0000000cH

; 47   : 	}

	pop	ebp
	ret	0
??$sin@M$01Utvec3@glm@@@glm@@YA?AU?$tvec3@M$01@0@ABU10@@Z ENDP ; glm::sin<float,2,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\func_trigonometric.inl
;	COMDAT ??$cos@M$01Utvec3@glm@@@glm@@YA?AU?$tvec3@M$01@0@ABU10@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
??$cos@M$01Utvec3@glm@@@glm@@YA?AU?$tvec3@M$01@0@ABU10@@Z PROC ; glm::cos<float,2,glm::tvec3>, COMDAT

; 54   : 	{

	push	ebp
	mov	ebp, esp

; 55   : 		return detail::functor1<T, T, P, vecType>::call(cos, v);

	push	DWORD PTR _v$[ebp]
	push	OFFSET ?cos@@YAMM@Z			; cos
	push	DWORD PTR ___$ReturnUdt$[ebp]
	call	?call@?$functor1@MM$01Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$01@3@P6AMM@ZABU43@@Z ; glm::detail::functor1<float,float,2,glm::tvec3>::call
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	add	esp, 12					; 0000000cH

; 56   : 	}

	pop	ebp
	ret	0
??$cos@M$01Utvec3@glm@@@glm@@YA?AU?$tvec3@M$01@0@ABU10@@Z ENDP ; glm::cos<float,2,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?DM$01@glm@@YA?AU?$tvec3@M$01@0@ABU10@M@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
_scalar$ = 16						; size = 4
??$?DM$01@glm@@YA?AU?$tvec3@M$01@0@ABU10@M@Z PROC	; glm::operator*<float,2>, COMDAT

; 628  : 	{

	push	ebp
	mov	ebp, esp

; 629  : 		return tvec3<T, P>(
; 630  : 			v.x * scalar,
; 631  : 			v.y * scalar,
; 632  : 			v.z * scalar);

	mov	ecx, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	mulss	xmm0, DWORD PTR _scalar$[ebp]
	movss	DWORD PTR [eax], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mulss	xmm0, DWORD PTR _scalar$[ebp]
	movss	DWORD PTR [eax+4], xmm0
	movss	xmm0, DWORD PTR [ecx+8]
	mulss	xmm0, DWORD PTR _scalar$[ebp]
	movss	DWORD PTR [eax+8], xmm0

; 633  : 	}

	pop	ebp
	ret	0
??$?DM$01@glm@@YA?AU?$tvec3@M$01@0@ABU10@M@Z ENDP	; glm::operator*<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??$quat_cast@M$01@glm@@YA?AU?$tquat@M$01@0@ABU?$tmat3x3@M$01@0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
tv575 = 12						; size = 4
_biggestVal$ = 12					; size = 4
_m$ = 12						; size = 4
??$quat_cast@M$01@glm@@YA?AU?$tquat@M$01@0@ABU?$tmat3x3@M$01@0@@Z PROC ; glm::quat_cast<float,2>, COMDAT

; 622  : 	{

	push	ebp
	mov	ebp, esp
	push	esi

; 623  : 		T fourXSquaredMinus1 = m[0][0] - m[1][1] - m[2][2];

	mov	esi, DWORD PTR _m$[ebp]
	push	edi

; 624  : 		T fourYSquaredMinus1 = m[1][1] - m[0][0] - m[2][2];
; 625  : 		T fourZSquaredMinus1 = m[2][2] - m[0][0] - m[1][1];
; 626  : 		T fourWSquaredMinus1 = m[0][0] + m[1][1] + m[2][2];
; 627  : 
; 628  : 		int biggestIndex = 0;

	xor	edi, edi
	movss	xmm0, DWORD PTR [esi+32]
	movss	xmm1, DWORD PTR [esi+16]
	movaps	xmm2, xmm0
	subss	xmm2, DWORD PTR [esi]
	movss	xmm4, DWORD PTR [esi]
	movaps	xmm3, xmm1
	subss	xmm3, DWORD PTR [esi]
	subss	xmm4, xmm1
	subss	xmm2, xmm1
	addss	xmm1, DWORD PTR [esi]
	subss	xmm3, xmm0
	subss	xmm4, xmm0
	addss	xmm1, xmm0

; 629  : 		T fourBiggestSquaredMinus1 = fourWSquaredMinus1;
; 630  : 		if(fourXSquaredMinus1 > fourBiggestSquaredMinus1)

	comiss	xmm4, xmm1
	jbe	SHORT $LN10@quat_cast

; 631  : 		{
; 632  : 			fourBiggestSquaredMinus1 = fourXSquaredMinus1;

	movaps	xmm1, xmm4

; 633  : 			biggestIndex = 1;

	inc	edi
$LN10@quat_cast:

; 634  : 		}
; 635  : 		if(fourYSquaredMinus1 > fourBiggestSquaredMinus1)

	comiss	xmm3, xmm1
	jbe	SHORT $LN9@quat_cast

; 636  : 		{
; 637  : 			fourBiggestSquaredMinus1 = fourYSquaredMinus1;
; 638  : 			biggestIndex = 2;

	push	2
	movaps	xmm1, xmm3
	pop	edi
$LN9@quat_cast:

; 639  : 		}
; 640  : 		if(fourZSquaredMinus1 > fourBiggestSquaredMinus1)

	comiss	xmm2, xmm1
	jbe	SHORT $LN8@quat_cast

; 641  : 		{
; 642  : 			fourBiggestSquaredMinus1 = fourZSquaredMinus1;
; 643  : 			biggestIndex = 3;

	push	3
	movaps	xmm1, xmm2
	pop	edi
$LN8@quat_cast:

; 644  : 		}
; 645  : 
; 646  : 		T biggestVal = sqrt(fourBiggestSquaredMinus1 + T(1)) * T(0.5);

	addss	xmm1, DWORD PTR __real@3f800000
	push	ecx
	push	ecx
	cvtps2pd xmm0, xmm1
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt

; 647  : 		T mult = static_cast<T>(0.25) / biggestVal;

	movss	xmm1, DWORD PTR __real@3e800000

; 648  : 
; 649  : 		tquat<T, P> Result(uninitialize);
; 650  : 		switch(biggestIndex)

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	fstp	DWORD PTR tv575[ebp]
	fld	DWORD PTR tv575[ebp]
	fmul	DWORD PTR __real@3f000000
	pop	ecx
	pop	ecx
	fstp	DWORD PTR _biggestVal$[ebp]
	movss	xmm2, DWORD PTR _biggestVal$[ebp]
	divss	xmm1, xmm2
	sub	edi, 0
	je	$LN5@quat_cast
	dec	edi
	je	$LN4@quat_cast
	dec	edi
	je	SHORT $LN3@quat_cast
	dec	edi
	jne	$LN6@quat_cast

; 670  : 		case 3:
; 671  : 			Result.w = (m[0][1] - m[1][0]) * mult;

	movss	xmm0, DWORD PTR [esi+4]
	subss	xmm0, DWORD PTR [esi+12]

; 672  : 			Result.x = (m[2][0] + m[0][2]) * mult;
; 673  : 			Result.y = (m[1][2] + m[2][1]) * mult;
; 674  : 			Result.z = biggestVal;

	movss	DWORD PTR [eax+8], xmm2
	mulss	xmm0, xmm1
	movss	DWORD PTR [eax+12], xmm0
	movss	xmm0, DWORD PTR [esi+24]
	addss	xmm0, DWORD PTR [esi+8]
	mulss	xmm0, xmm1
	movss	DWORD PTR [eax], xmm0
	movss	xmm0, DWORD PTR [esi+28]
	addss	xmm0, DWORD PTR [esi+20]
	mulss	xmm0, xmm1
	movss	DWORD PTR [eax+4], xmm0

; 675  : 			break;

	jmp	$LN6@quat_cast
$LN3@quat_cast:

; 664  : 		case 2:
; 665  : 			Result.w = (m[2][0] - m[0][2]) * mult;

	movss	xmm0, DWORD PTR [esi+24]
	subss	xmm0, DWORD PTR [esi+8]

; 666  : 			Result.x = (m[0][1] + m[1][0]) * mult;
; 667  : 			Result.y = biggestVal;

	movss	DWORD PTR [eax+4], xmm2
	mulss	xmm0, xmm1
	movss	DWORD PTR [eax+12], xmm0
	movss	xmm0, DWORD PTR [esi+12]
	addss	xmm0, DWORD PTR [esi+4]
	mulss	xmm0, xmm1
	movss	DWORD PTR [eax], xmm0

; 668  : 			Result.z = (m[1][2] + m[2][1]) * mult;

	movss	xmm0, DWORD PTR [esi+28]
	addss	xmm0, DWORD PTR [esi+20]

; 669  : 			break;

	jmp	SHORT $LN163@quat_cast
$LN4@quat_cast:

; 657  : 			break;
; 658  : 		case 1:
; 659  : 			Result.w = (m[1][2] - m[2][1]) * mult;

	movss	xmm0, DWORD PTR [esi+20]
	subss	xmm0, DWORD PTR [esi+28]

; 660  : 			Result.x = biggestVal;

	movss	DWORD PTR [eax], xmm2
	mulss	xmm0, xmm1
	movss	DWORD PTR [eax+12], xmm0

; 661  : 			Result.y = (m[0][1] + m[1][0]) * mult;

	movss	xmm0, DWORD PTR [esi+12]
	addss	xmm0, DWORD PTR [esi+4]
	mulss	xmm0, xmm1
	movss	DWORD PTR [eax+4], xmm0

; 662  : 			Result.z = (m[2][0] + m[0][2]) * mult;

	movss	xmm0, DWORD PTR [esi+24]
	addss	xmm0, DWORD PTR [esi+8]

; 663  : 			break;

	jmp	SHORT $LN163@quat_cast
$LN5@quat_cast:

; 651  : 		{
; 652  : 		case 0:
; 653  : 			Result.w = biggestVal;
; 654  : 			Result.x = (m[1][2] - m[2][1]) * mult;

	movss	xmm0, DWORD PTR [esi+20]
	subss	xmm0, DWORD PTR [esi+28]
	movss	DWORD PTR [eax+12], xmm2
	mulss	xmm0, xmm1
	movss	DWORD PTR [eax], xmm0

; 655  : 			Result.y = (m[2][0] - m[0][2]) * mult;

	movss	xmm0, DWORD PTR [esi+24]
	subss	xmm0, DWORD PTR [esi+8]
	mulss	xmm0, xmm1
	movss	DWORD PTR [eax+4], xmm0

; 656  : 			Result.z = (m[0][1] - m[1][0]) * mult;

	movss	xmm0, DWORD PTR [esi+4]
	subss	xmm0, DWORD PTR [esi+12]
$LN163@quat_cast:
	mulss	xmm0, xmm1
	movss	DWORD PTR [eax+8], xmm0
$LN6@quat_cast:
	pop	edi
	pop	esi

; 676  : 			
; 677  : 		default:					// Silence a -Wswitch-default warning in GCC. Should never actually get here. Assert is just for sanity.
; 678  : 			assert(false);
; 679  : 			break;
; 680  : 		}
; 681  : 		return Result;
; 682  : 	}

	pop	ebp
	ret	0
??$quat_cast@M$01@glm@@YA?AU?$tquat@M$01@0@ABU?$tmat3x3@M$01@0@@Z ENDP ; glm::quat_cast<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??$quat_cast@M$01@glm@@YA?AU?$tquat@M$01@0@ABU?$tmat4x4@M$01@0@@Z
_TEXT	SEGMENT
$T1 = -40						; size = 36
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_m4$ = 12						; size = 4
??$quat_cast@M$01@glm@@YA?AU?$tquat@M$01@0@ABU?$tmat4x4@M$01@0@@Z PROC ; glm::quat_cast<float,2>, COMDAT

; 686  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, DWORD PTR _m4$[ebp]
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]

; 687  : 		return quat_cast(tmat3x3<T, P>(m4));

	push	ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$tmat3x3@M$01@glm@@QAE@ABU?$tmat4x4@M$01@1@@Z ; glm::tmat3x3<float,2>::tmat3x3<float,2>
	push	eax
	push	esi
	call	??$quat_cast@M$01@glm@@YA?AU?$tquat@M$01@0@ABU?$tmat3x3@M$01@0@@Z ; glm::quat_cast<float,2>
	pop	ecx
	pop	ecx

; 688  : 	}

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	mov	eax, esi
	xor	ecx, ebp
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
??$quat_cast@M$01@glm@@YA?AU?$tquat@M$01@0@ABU?$tmat4x4@M$01@0@@Z ENDP ; glm::quat_cast<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHHN@?$tvec4@N$0A@@glm@@QAE@HHHN@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
_d$ = 20						; size = 8
??$?0HHHN@?$tvec4@N$0A@@glm@@QAE@HHHN@Z PROC		; glm::tvec4<double,0>::tvec4<double,0><int,int,int,double>, COMDAT
; _this$ = ecx

; 204  : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+8], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+16], xmm0
	movsd	xmm0, QWORD PTR _d$[ebp]
	movsd	QWORD PTR [ecx+24], xmm0
	pop	ebp
	ret	20					; 00000014H
??$?0HHHN@?$tvec4@N$0A@@glm@@QAE@HHHN@Z ENDP		; glm::tvec4<double,0>::tvec4<double,0><int,int,int,double>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHHM@?$tvec4@M$0A@@glm@@QAE@HHHM@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
_d$ = 20						; size = 4
??$?0HHHM@?$tvec4@M$0A@@glm@@QAE@HHHM@Z PROC		; glm::tvec4<float,0>::tvec4<float,0><int,int,int,float>, COMDAT
; _this$ = ecx

; 204  : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+4], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+8], xmm0
	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR [ecx+12], xmm0
	pop	ebp
	ret	16					; 00000010H
??$?0HHHM@?$tvec4@M$0A@@glm@@QAE@HHHM@Z ENDP		; glm::tvec4<float,0>::tvec4<float,0><int,int,int,float>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHHN@?$tvec4@N$00@glm@@QAE@HHHN@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
_d$ = 20						; size = 8
??$?0HHHN@?$tvec4@N$00@glm@@QAE@HHHN@Z PROC		; glm::tvec4<double,1>::tvec4<double,1><int,int,int,double>, COMDAT
; _this$ = ecx

; 204  : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+8], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+16], xmm0
	movsd	xmm0, QWORD PTR _d$[ebp]
	movsd	QWORD PTR [ecx+24], xmm0
	pop	ebp
	ret	20					; 00000014H
??$?0HHHN@?$tvec4@N$00@glm@@QAE@HHHN@Z ENDP		; glm::tvec4<double,1>::tvec4<double,1><int,int,int,double>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHHM@?$tvec4@M$00@glm@@QAE@HHHM@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
_d$ = 20						; size = 4
??$?0HHHM@?$tvec4@M$00@glm@@QAE@HHHM@Z PROC		; glm::tvec4<float,1>::tvec4<float,1><int,int,int,float>, COMDAT
; _this$ = ecx

; 204  : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+4], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+8], xmm0
	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR [ecx+12], xmm0
	pop	ebp
	ret	16					; 00000010H
??$?0HHHM@?$tvec4@M$00@glm@@QAE@HHHM@Z ENDP		; glm::tvec4<float,1>::tvec4<float,1><int,int,int,float>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHHN@?$tvec4@N$01@glm@@QAE@HHHN@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
_d$ = 20						; size = 8
??$?0HHHN@?$tvec4@N$01@glm@@QAE@HHHN@Z PROC		; glm::tvec4<double,2>::tvec4<double,2><int,int,int,double>, COMDAT
; _this$ = ecx

; 204  : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+8], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+16], xmm0
	movsd	xmm0, QWORD PTR _d$[ebp]
	movsd	QWORD PTR [ecx+24], xmm0
	pop	ebp
	ret	20					; 00000014H
??$?0HHHN@?$tvec4@N$01@glm@@QAE@HHHN@Z ENDP		; glm::tvec4<double,2>::tvec4<double,2><int,int,int,double>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHHM@?$tvec4@M$01@glm@@QAE@HHHM@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
_d$ = 20						; size = 4
??$?0HHHM@?$tvec4@M$01@glm@@QAE@HHHM@Z PROC		; glm::tvec4<float,2>::tvec4<float,2><int,int,int,float>, COMDAT
; _this$ = ecx

; 204  : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+4], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+8], xmm0
	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR [ecx+12], xmm0
	pop	ebp
	ret	16					; 00000010H
??$?0HHHM@?$tvec4@M$01@glm@@QAE@HHHM@Z ENDP		; glm::tvec4<float,2>::tvec4<float,2><int,int,int,float>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHNH@?$tvec4@N$0A@@glm@@QAE@HHNH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 8
_d$ = 24						; size = 4
??$?0HHNH@?$tvec4@N$0A@@glm@@QAE@HHNH@Z PROC		; glm::tvec4<double,0>::tvec4<double,0><int,int,double,int>, COMDAT
; _this$ = ecx

; 204  : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+8], xmm0
	movsd	xmm0, QWORD PTR _c$[ebp]
	movsd	QWORD PTR [ecx+16], xmm0
	movd	xmm0, DWORD PTR _d$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+24], xmm0
	pop	ebp
	ret	20					; 00000014H
??$?0HHNH@?$tvec4@N$0A@@glm@@QAE@HHNH@Z ENDP		; glm::tvec4<double,0>::tvec4<double,0><int,int,double,int>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HNHH@?$tvec4@N$0A@@glm@@QAE@HNHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 8
_c$ = 20						; size = 4
_d$ = 24						; size = 4
??$?0HNHH@?$tvec4@N$0A@@glm@@QAE@HNHH@Z PROC		; glm::tvec4<double,0>::tvec4<double,0><int,double,int,int>, COMDAT
; _this$ = ecx

; 204  : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR _b$[ebp]
	movsd	QWORD PTR [ecx+8], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+16], xmm0
	movd	xmm0, DWORD PTR _d$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+24], xmm0
	pop	ebp
	ret	20					; 00000014H
??$?0HNHH@?$tvec4@N$0A@@glm@@QAE@HNHH@Z ENDP		; glm::tvec4<double,0>::tvec4<double,0><int,double,int,int>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0NHHH@?$tvec4@N$0A@@glm@@QAE@NHHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 8
_b$ = 16						; size = 4
_c$ = 20						; size = 4
_d$ = 24						; size = 4
??$?0NHHH@?$tvec4@N$0A@@glm@@QAE@NHHH@Z PROC		; glm::tvec4<double,0>::tvec4<double,0><double,int,int,int>, COMDAT
; _this$ = ecx

; 204  : 	{}

	push	ebp
	mov	ebp, esp
	movsd	xmm0, QWORD PTR _a$[ebp]
	mov	eax, ecx
	movsd	QWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+8], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+16], xmm0
	movd	xmm0, DWORD PTR _d$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+24], xmm0
	pop	ebp
	ret	20					; 00000014H
??$?0NHHH@?$tvec4@N$0A@@glm@@QAE@NHHH@Z ENDP		; glm::tvec4<double,0>::tvec4<double,0><double,int,int,int>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHMH@?$tvec4@M$0A@@glm@@QAE@HHMH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
_d$ = 20						; size = 4
??$?0HHMH@?$tvec4@M$0A@@glm@@QAE@HHMH@Z PROC		; glm::tvec4<float,0>::tvec4<float,0><int,int,float,int>, COMDAT
; _this$ = ecx

; 204  : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+4], xmm0
	movss	xmm0, DWORD PTR _c$[ebp]
	movss	DWORD PTR [ecx+8], xmm0
	movd	xmm0, DWORD PTR _d$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+12], xmm0
	pop	ebp
	ret	16					; 00000010H
??$?0HHMH@?$tvec4@M$0A@@glm@@QAE@HHMH@Z ENDP		; glm::tvec4<float,0>::tvec4<float,0><int,int,float,int>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HMHH@?$tvec4@M$0A@@glm@@QAE@HMHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
_d$ = 20						; size = 4
??$?0HMHH@?$tvec4@M$0A@@glm@@QAE@HMHH@Z PROC		; glm::tvec4<float,0>::tvec4<float,0><int,float,int,int>, COMDAT
; _this$ = ecx

; 204  : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR _b$[ebp]
	movss	DWORD PTR [ecx+4], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+8], xmm0
	movd	xmm0, DWORD PTR _d$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+12], xmm0
	pop	ebp
	ret	16					; 00000010H
??$?0HMHH@?$tvec4@M$0A@@glm@@QAE@HMHH@Z ENDP		; glm::tvec4<float,0>::tvec4<float,0><int,float,int,int>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0MHHH@?$tvec4@M$0A@@glm@@QAE@MHHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
_d$ = 20						; size = 4
??$?0MHHH@?$tvec4@M$0A@@glm@@QAE@MHHH@Z PROC		; glm::tvec4<float,0>::tvec4<float,0><float,int,int,int>, COMDAT
; _this$ = ecx

; 204  : 	{}

	push	ebp
	mov	ebp, esp
	movss	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	movss	DWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+4], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+8], xmm0
	movd	xmm0, DWORD PTR _d$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+12], xmm0
	pop	ebp
	ret	16					; 00000010H
??$?0MHHH@?$tvec4@M$0A@@glm@@QAE@MHHH@Z ENDP		; glm::tvec4<float,0>::tvec4<float,0><float,int,int,int>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHNH@?$tvec4@N$00@glm@@QAE@HHNH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 8
_d$ = 24						; size = 4
??$?0HHNH@?$tvec4@N$00@glm@@QAE@HHNH@Z PROC		; glm::tvec4<double,1>::tvec4<double,1><int,int,double,int>, COMDAT
; _this$ = ecx

; 204  : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+8], xmm0
	movsd	xmm0, QWORD PTR _c$[ebp]
	movsd	QWORD PTR [ecx+16], xmm0
	movd	xmm0, DWORD PTR _d$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+24], xmm0
	pop	ebp
	ret	20					; 00000014H
??$?0HHNH@?$tvec4@N$00@glm@@QAE@HHNH@Z ENDP		; glm::tvec4<double,1>::tvec4<double,1><int,int,double,int>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HNHH@?$tvec4@N$00@glm@@QAE@HNHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 8
_c$ = 20						; size = 4
_d$ = 24						; size = 4
??$?0HNHH@?$tvec4@N$00@glm@@QAE@HNHH@Z PROC		; glm::tvec4<double,1>::tvec4<double,1><int,double,int,int>, COMDAT
; _this$ = ecx

; 204  : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR _b$[ebp]
	movsd	QWORD PTR [ecx+8], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+16], xmm0
	movd	xmm0, DWORD PTR _d$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+24], xmm0
	pop	ebp
	ret	20					; 00000014H
??$?0HNHH@?$tvec4@N$00@glm@@QAE@HNHH@Z ENDP		; glm::tvec4<double,1>::tvec4<double,1><int,double,int,int>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0NHHH@?$tvec4@N$00@glm@@QAE@NHHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 8
_b$ = 16						; size = 4
_c$ = 20						; size = 4
_d$ = 24						; size = 4
??$?0NHHH@?$tvec4@N$00@glm@@QAE@NHHH@Z PROC		; glm::tvec4<double,1>::tvec4<double,1><double,int,int,int>, COMDAT
; _this$ = ecx

; 204  : 	{}

	push	ebp
	mov	ebp, esp
	movsd	xmm0, QWORD PTR _a$[ebp]
	mov	eax, ecx
	movsd	QWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+8], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+16], xmm0
	movd	xmm0, DWORD PTR _d$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+24], xmm0
	pop	ebp
	ret	20					; 00000014H
??$?0NHHH@?$tvec4@N$00@glm@@QAE@NHHH@Z ENDP		; glm::tvec4<double,1>::tvec4<double,1><double,int,int,int>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHMH@?$tvec4@M$00@glm@@QAE@HHMH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
_d$ = 20						; size = 4
??$?0HHMH@?$tvec4@M$00@glm@@QAE@HHMH@Z PROC		; glm::tvec4<float,1>::tvec4<float,1><int,int,float,int>, COMDAT
; _this$ = ecx

; 204  : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+4], xmm0
	movss	xmm0, DWORD PTR _c$[ebp]
	movss	DWORD PTR [ecx+8], xmm0
	movd	xmm0, DWORD PTR _d$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+12], xmm0
	pop	ebp
	ret	16					; 00000010H
??$?0HHMH@?$tvec4@M$00@glm@@QAE@HHMH@Z ENDP		; glm::tvec4<float,1>::tvec4<float,1><int,int,float,int>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HMHH@?$tvec4@M$00@glm@@QAE@HMHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
_d$ = 20						; size = 4
??$?0HMHH@?$tvec4@M$00@glm@@QAE@HMHH@Z PROC		; glm::tvec4<float,1>::tvec4<float,1><int,float,int,int>, COMDAT
; _this$ = ecx

; 204  : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR _b$[ebp]
	movss	DWORD PTR [ecx+4], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+8], xmm0
	movd	xmm0, DWORD PTR _d$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+12], xmm0
	pop	ebp
	ret	16					; 00000010H
??$?0HMHH@?$tvec4@M$00@glm@@QAE@HMHH@Z ENDP		; glm::tvec4<float,1>::tvec4<float,1><int,float,int,int>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0MHHH@?$tvec4@M$00@glm@@QAE@MHHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
_d$ = 20						; size = 4
??$?0MHHH@?$tvec4@M$00@glm@@QAE@MHHH@Z PROC		; glm::tvec4<float,1>::tvec4<float,1><float,int,int,int>, COMDAT
; _this$ = ecx

; 204  : 	{}

	push	ebp
	mov	ebp, esp
	movss	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	movss	DWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+4], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+8], xmm0
	movd	xmm0, DWORD PTR _d$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+12], xmm0
	pop	ebp
	ret	16					; 00000010H
??$?0MHHH@?$tvec4@M$00@glm@@QAE@MHHH@Z ENDP		; glm::tvec4<float,1>::tvec4<float,1><float,int,int,int>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHNH@?$tvec4@N$01@glm@@QAE@HHNH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 8
_d$ = 24						; size = 4
??$?0HHNH@?$tvec4@N$01@glm@@QAE@HHNH@Z PROC		; glm::tvec4<double,2>::tvec4<double,2><int,int,double,int>, COMDAT
; _this$ = ecx

; 204  : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+8], xmm0
	movsd	xmm0, QWORD PTR _c$[ebp]
	movsd	QWORD PTR [ecx+16], xmm0
	movd	xmm0, DWORD PTR _d$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+24], xmm0
	pop	ebp
	ret	20					; 00000014H
??$?0HHNH@?$tvec4@N$01@glm@@QAE@HHNH@Z ENDP		; glm::tvec4<double,2>::tvec4<double,2><int,int,double,int>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HNHH@?$tvec4@N$01@glm@@QAE@HNHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 8
_c$ = 20						; size = 4
_d$ = 24						; size = 4
??$?0HNHH@?$tvec4@N$01@glm@@QAE@HNHH@Z PROC		; glm::tvec4<double,2>::tvec4<double,2><int,double,int,int>, COMDAT
; _this$ = ecx

; 204  : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR _b$[ebp]
	movsd	QWORD PTR [ecx+8], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+16], xmm0
	movd	xmm0, DWORD PTR _d$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+24], xmm0
	pop	ebp
	ret	20					; 00000014H
??$?0HNHH@?$tvec4@N$01@glm@@QAE@HNHH@Z ENDP		; glm::tvec4<double,2>::tvec4<double,2><int,double,int,int>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0NHHH@?$tvec4@N$01@glm@@QAE@NHHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 8
_b$ = 16						; size = 4
_c$ = 20						; size = 4
_d$ = 24						; size = 4
??$?0NHHH@?$tvec4@N$01@glm@@QAE@NHHH@Z PROC		; glm::tvec4<double,2>::tvec4<double,2><double,int,int,int>, COMDAT
; _this$ = ecx

; 204  : 	{}

	push	ebp
	mov	ebp, esp
	movsd	xmm0, QWORD PTR _a$[ebp]
	mov	eax, ecx
	movsd	QWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+8], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+16], xmm0
	movd	xmm0, DWORD PTR _d$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+24], xmm0
	pop	ebp
	ret	20					; 00000014H
??$?0NHHH@?$tvec4@N$01@glm@@QAE@NHHH@Z ENDP		; glm::tvec4<double,2>::tvec4<double,2><double,int,int,int>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHMH@?$tvec4@M$01@glm@@QAE@HHMH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
_d$ = 20						; size = 4
??$?0HHMH@?$tvec4@M$01@glm@@QAE@HHMH@Z PROC		; glm::tvec4<float,2>::tvec4<float,2><int,int,float,int>, COMDAT
; _this$ = ecx

; 204  : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+4], xmm0
	movss	xmm0, DWORD PTR _c$[ebp]
	movss	DWORD PTR [ecx+8], xmm0
	movd	xmm0, DWORD PTR _d$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+12], xmm0
	pop	ebp
	ret	16					; 00000010H
??$?0HHMH@?$tvec4@M$01@glm@@QAE@HHMH@Z ENDP		; glm::tvec4<float,2>::tvec4<float,2><int,int,float,int>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HMHH@?$tvec4@M$01@glm@@QAE@HMHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
_d$ = 20						; size = 4
??$?0HMHH@?$tvec4@M$01@glm@@QAE@HMHH@Z PROC		; glm::tvec4<float,2>::tvec4<float,2><int,float,int,int>, COMDAT
; _this$ = ecx

; 204  : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR _b$[ebp]
	movss	DWORD PTR [ecx+4], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+8], xmm0
	movd	xmm0, DWORD PTR _d$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+12], xmm0
	pop	ebp
	ret	16					; 00000010H
??$?0HMHH@?$tvec4@M$01@glm@@QAE@HMHH@Z ENDP		; glm::tvec4<float,2>::tvec4<float,2><int,float,int,int>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0MHHH@?$tvec4@M$01@glm@@QAE@MHHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
_d$ = 20						; size = 4
??$?0MHHH@?$tvec4@M$01@glm@@QAE@MHHH@Z PROC		; glm::tvec4<float,2>::tvec4<float,2><float,int,int,int>, COMDAT
; _this$ = ecx

; 204  : 	{}

	push	ebp
	mov	ebp, esp
	movss	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	movss	DWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+4], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+8], xmm0
	movd	xmm0, DWORD PTR _d$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+12], xmm0
	pop	ebp
	ret	16					; 00000010H
??$?0MHHH@?$tvec4@M$01@glm@@QAE@MHHH@Z ENDP		; glm::tvec4<float,2>::tvec4<float,2><float,int,int,int>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0HHN@?$tvec3@N$0A@@glm@@QAE@HHN@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 8
??$?0HHN@?$tvec3@N$0A@@glm@@QAE@HHN@Z PROC		; glm::tvec3<double,0>::tvec3<double,0><int,int,double>, COMDAT
; _this$ = ecx

; 80   : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+8], xmm0
	movsd	xmm0, QWORD PTR _c$[ebp]
	movsd	QWORD PTR [ecx+16], xmm0
	pop	ebp
	ret	16					; 00000010H
??$?0HHN@?$tvec3@N$0A@@glm@@QAE@HHN@Z ENDP		; glm::tvec3<double,0>::tvec3<double,0><int,int,double>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0HHM@?$tvec3@M$0A@@glm@@QAE@HHM@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
??$?0HHM@?$tvec3@M$0A@@glm@@QAE@HHM@Z PROC		; glm::tvec3<float,0>::tvec3<float,0><int,int,float>, COMDAT
; _this$ = ecx

; 80   : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+4], xmm0
	movss	xmm0, DWORD PTR _c$[ebp]
	movss	DWORD PTR [ecx+8], xmm0
	pop	ebp
	ret	12					; 0000000cH
??$?0HHM@?$tvec3@M$0A@@glm@@QAE@HHM@Z ENDP		; glm::tvec3<float,0>::tvec3<float,0><int,int,float>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0HHN@?$tvec3@N$00@glm@@QAE@HHN@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 8
??$?0HHN@?$tvec3@N$00@glm@@QAE@HHN@Z PROC		; glm::tvec3<double,1>::tvec3<double,1><int,int,double>, COMDAT
; _this$ = ecx

; 80   : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+8], xmm0
	movsd	xmm0, QWORD PTR _c$[ebp]
	movsd	QWORD PTR [ecx+16], xmm0
	pop	ebp
	ret	16					; 00000010H
??$?0HHN@?$tvec3@N$00@glm@@QAE@HHN@Z ENDP		; glm::tvec3<double,1>::tvec3<double,1><int,int,double>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0HHM@?$tvec3@M$00@glm@@QAE@HHM@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
??$?0HHM@?$tvec3@M$00@glm@@QAE@HHM@Z PROC		; glm::tvec3<float,1>::tvec3<float,1><int,int,float>, COMDAT
; _this$ = ecx

; 80   : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+4], xmm0
	movss	xmm0, DWORD PTR _c$[ebp]
	movss	DWORD PTR [ecx+8], xmm0
	pop	ebp
	ret	12					; 0000000cH
??$?0HHM@?$tvec3@M$00@glm@@QAE@HHM@Z ENDP		; glm::tvec3<float,1>::tvec3<float,1><int,int,float>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0HHN@?$tvec3@N$01@glm@@QAE@HHN@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 8
??$?0HHN@?$tvec3@N$01@glm@@QAE@HHN@Z PROC		; glm::tvec3<double,2>::tvec3<double,2><int,int,double>, COMDAT
; _this$ = ecx

; 80   : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+8], xmm0
	movsd	xmm0, QWORD PTR _c$[ebp]
	movsd	QWORD PTR [ecx+16], xmm0
	pop	ebp
	ret	16					; 00000010H
??$?0HHN@?$tvec3@N$01@glm@@QAE@HHN@Z ENDP		; glm::tvec3<double,2>::tvec3<double,2><int,int,double>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0HHM@?$tvec3@M$01@glm@@QAE@HHM@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
??$?0HHM@?$tvec3@M$01@glm@@QAE@HHM@Z PROC		; glm::tvec3<float,2>::tvec3<float,2><int,int,float>, COMDAT
; _this$ = ecx

; 80   : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+4], xmm0
	movss	xmm0, DWORD PTR _c$[ebp]
	movss	DWORD PTR [ecx+8], xmm0
	pop	ebp
	ret	12					; 0000000cH
??$?0HHM@?$tvec3@M$01@glm@@QAE@HHM@Z ENDP		; glm::tvec3<float,2>::tvec3<float,2><int,int,float>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHHH@?$tvec4@N$0A@@glm@@QAE@HHHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
_d$ = 20						; size = 4
??$?0HHHH@?$tvec4@N$0A@@glm@@QAE@HHHH@Z PROC		; glm::tvec4<double,0>::tvec4<double,0><int,int,int,int>, COMDAT
; _this$ = ecx

; 204  : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+8], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+16], xmm0
	movd	xmm0, DWORD PTR _d$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+24], xmm0
	pop	ebp
	ret	16					; 00000010H
??$?0HHHH@?$tvec4@N$0A@@glm@@QAE@HHHH@Z ENDP		; glm::tvec4<double,0>::tvec4<double,0><int,int,int,int>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0NHH$0A@@?$tvec4@N$0A@@glm@@QAE@ABU?$tvec2@N$0A@@1@HH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
??$?0NHH$0A@@?$tvec4@N$0A@@glm@@QAE@ABU?$tvec2@N$0A@@1@HH@Z PROC ; glm::tvec4<double,0>::tvec4<double,0><double,int,int,0>, COMDAT
; _this$ = ecx

; 224  : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _a$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	mov	eax, ecx
	movsd	QWORD PTR [ecx+8], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+16], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+24], xmm0
	pop	ebp
	ret	12					; 0000000cH
??$?0NHH$0A@@?$tvec4@N$0A@@glm@@QAE@ABU?$tvec2@N$0A@@1@HH@Z ENDP ; glm::tvec4<double,0>::tvec4<double,0><double,int,int,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0NH$0A@@?$tvec4@N$0A@@glm@@QAE@ABU?$tvec3@N$0A@@1@H@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$?0NH$0A@@?$tvec4@N$0A@@glm@@QAE@ABU?$tvec3@N$0A@@1@H@Z PROC ; glm::tvec4<double,0>::tvec4<double,0><double,int,0>, COMDAT
; _this$ = ecx

; 278  : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _a$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	QWORD PTR [ecx+8], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	mov	eax, ecx
	movsd	QWORD PTR [ecx+16], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+24], xmm0
	pop	ebp
	ret	8
??$?0NH$0A@@?$tvec4@N$0A@@glm@@QAE@ABU?$tvec3@N$0A@@1@H@Z ENDP ; glm::tvec4<double,0>::tvec4<double,0><double,int,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHHH@?$tvec4@M$0A@@glm@@QAE@HHHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
_d$ = 20						; size = 4
??$?0HHHH@?$tvec4@M$0A@@glm@@QAE@HHHH@Z PROC		; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>, COMDAT
; _this$ = ecx

; 204  : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+4], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+8], xmm0
	movd	xmm0, DWORD PTR _d$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+12], xmm0
	pop	ebp
	ret	16					; 00000010H
??$?0HHHH@?$tvec4@M$0A@@glm@@QAE@HHHH@Z ENDP		; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0MHH$0A@@?$tvec4@M$0A@@glm@@QAE@ABU?$tvec2@M$0A@@1@HH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
??$?0MHH$0A@@?$tvec4@M$0A@@glm@@QAE@ABU?$tvec2@M$0A@@1@HH@Z PROC ; glm::tvec4<float,0>::tvec4<float,0><float,int,int,0>, COMDAT
; _this$ = ecx

; 224  : 	{}

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR _a$[ebp]
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2ps xmm0, xmm0
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	movss	DWORD PTR [ecx+8], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+12], xmm0
	pop	ebp
	ret	12					; 0000000cH
??$?0MHH$0A@@?$tvec4@M$0A@@glm@@QAE@ABU?$tvec2@M$0A@@1@HH@Z ENDP ; glm::tvec4<float,0>::tvec4<float,0><float,int,int,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0MH$0A@@?$tvec4@M$0A@@glm@@QAE@ABU?$tvec3@M$0A@@1@H@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$?0MH$0A@@?$tvec4@M$0A@@glm@@QAE@ABU?$tvec3@M$0A@@1@H@Z PROC ; glm::tvec4<float,0>::tvec4<float,0><float,int,0>, COMDAT
; _this$ = ecx

; 278  : 	{}

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR _a$[ebp]
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2ps xmm0, xmm0
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, ecx
	movss	DWORD PTR [ecx+12], xmm0
	pop	ebp
	ret	8
??$?0MH$0A@@?$tvec4@M$0A@@glm@@QAE@ABU?$tvec3@M$0A@@1@H@Z ENDP ; glm::tvec4<float,0>::tvec4<float,0><float,int,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHHH@?$tvec4@N$00@glm@@QAE@HHHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
_d$ = 20						; size = 4
??$?0HHHH@?$tvec4@N$00@glm@@QAE@HHHH@Z PROC		; glm::tvec4<double,1>::tvec4<double,1><int,int,int,int>, COMDAT
; _this$ = ecx

; 204  : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+8], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+16], xmm0
	movd	xmm0, DWORD PTR _d$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+24], xmm0
	pop	ebp
	ret	16					; 00000010H
??$?0HHHH@?$tvec4@N$00@glm@@QAE@HHHH@Z ENDP		; glm::tvec4<double,1>::tvec4<double,1><int,int,int,int>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0NHH$00@?$tvec4@N$00@glm@@QAE@ABU?$tvec2@N$00@1@HH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
??$?0NHH$00@?$tvec4@N$00@glm@@QAE@ABU?$tvec2@N$00@1@HH@Z PROC ; glm::tvec4<double,1>::tvec4<double,1><double,int,int,1>, COMDAT
; _this$ = ecx

; 224  : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _a$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	mov	eax, ecx
	movsd	QWORD PTR [ecx+8], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+16], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+24], xmm0
	pop	ebp
	ret	12					; 0000000cH
??$?0NHH$00@?$tvec4@N$00@glm@@QAE@ABU?$tvec2@N$00@1@HH@Z ENDP ; glm::tvec4<double,1>::tvec4<double,1><double,int,int,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0NH$00@?$tvec4@N$00@glm@@QAE@ABU?$tvec3@N$00@1@H@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$?0NH$00@?$tvec4@N$00@glm@@QAE@ABU?$tvec3@N$00@1@H@Z PROC ; glm::tvec4<double,1>::tvec4<double,1><double,int,1>, COMDAT
; _this$ = ecx

; 278  : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _a$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	QWORD PTR [ecx+8], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	mov	eax, ecx
	movsd	QWORD PTR [ecx+16], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+24], xmm0
	pop	ebp
	ret	8
??$?0NH$00@?$tvec4@N$00@glm@@QAE@ABU?$tvec3@N$00@1@H@Z ENDP ; glm::tvec4<double,1>::tvec4<double,1><double,int,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHHH@?$tvec4@M$00@glm@@QAE@HHHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
_d$ = 20						; size = 4
??$?0HHHH@?$tvec4@M$00@glm@@QAE@HHHH@Z PROC		; glm::tvec4<float,1>::tvec4<float,1><int,int,int,int>, COMDAT
; _this$ = ecx

; 204  : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+4], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+8], xmm0
	movd	xmm0, DWORD PTR _d$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+12], xmm0
	pop	ebp
	ret	16					; 00000010H
??$?0HHHH@?$tvec4@M$00@glm@@QAE@HHHH@Z ENDP		; glm::tvec4<float,1>::tvec4<float,1><int,int,int,int>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0MHH$00@?$tvec4@M$00@glm@@QAE@ABU?$tvec2@M$00@1@HH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
??$?0MHH$00@?$tvec4@M$00@glm@@QAE@ABU?$tvec2@M$00@1@HH@Z PROC ; glm::tvec4<float,1>::tvec4<float,1><float,int,int,1>, COMDAT
; _this$ = ecx

; 224  : 	{}

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR _a$[ebp]
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2ps xmm0, xmm0
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	movss	DWORD PTR [ecx+8], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+12], xmm0
	pop	ebp
	ret	12					; 0000000cH
??$?0MHH$00@?$tvec4@M$00@glm@@QAE@ABU?$tvec2@M$00@1@HH@Z ENDP ; glm::tvec4<float,1>::tvec4<float,1><float,int,int,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0MH$00@?$tvec4@M$00@glm@@QAE@ABU?$tvec3@M$00@1@H@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$?0MH$00@?$tvec4@M$00@glm@@QAE@ABU?$tvec3@M$00@1@H@Z PROC ; glm::tvec4<float,1>::tvec4<float,1><float,int,1>, COMDAT
; _this$ = ecx

; 278  : 	{}

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR _a$[ebp]
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2ps xmm0, xmm0
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, ecx
	movss	DWORD PTR [ecx+12], xmm0
	pop	ebp
	ret	8
??$?0MH$00@?$tvec4@M$00@glm@@QAE@ABU?$tvec3@M$00@1@H@Z ENDP ; glm::tvec4<float,1>::tvec4<float,1><float,int,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHHH@?$tvec4@N$01@glm@@QAE@HHHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
_d$ = 20						; size = 4
??$?0HHHH@?$tvec4@N$01@glm@@QAE@HHHH@Z PROC		; glm::tvec4<double,2>::tvec4<double,2><int,int,int,int>, COMDAT
; _this$ = ecx

; 204  : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+8], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+16], xmm0
	movd	xmm0, DWORD PTR _d$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+24], xmm0
	pop	ebp
	ret	16					; 00000010H
??$?0HHHH@?$tvec4@N$01@glm@@QAE@HHHH@Z ENDP		; glm::tvec4<double,2>::tvec4<double,2><int,int,int,int>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0NHH$01@?$tvec4@N$01@glm@@QAE@ABU?$tvec2@N$01@1@HH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
??$?0NHH$01@?$tvec4@N$01@glm@@QAE@ABU?$tvec2@N$01@1@HH@Z PROC ; glm::tvec4<double,2>::tvec4<double,2><double,int,int,2>, COMDAT
; _this$ = ecx

; 224  : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _a$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	mov	eax, ecx
	movsd	QWORD PTR [ecx+8], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+16], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+24], xmm0
	pop	ebp
	ret	12					; 0000000cH
??$?0NHH$01@?$tvec4@N$01@glm@@QAE@ABU?$tvec2@N$01@1@HH@Z ENDP ; glm::tvec4<double,2>::tvec4<double,2><double,int,int,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0NH$01@?$tvec4@N$01@glm@@QAE@ABU?$tvec3@N$01@1@H@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$?0NH$01@?$tvec4@N$01@glm@@QAE@ABU?$tvec3@N$01@1@H@Z PROC ; glm::tvec4<double,2>::tvec4<double,2><double,int,2>, COMDAT
; _this$ = ecx

; 278  : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _a$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	QWORD PTR [ecx+8], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	mov	eax, ecx
	movsd	QWORD PTR [ecx+16], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+24], xmm0
	pop	ebp
	ret	8
??$?0NH$01@?$tvec4@N$01@glm@@QAE@ABU?$tvec3@N$01@1@H@Z ENDP ; glm::tvec4<double,2>::tvec4<double,2><double,int,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHHH@?$tvec4@M$01@glm@@QAE@HHHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
_d$ = 20						; size = 4
??$?0HHHH@?$tvec4@M$01@glm@@QAE@HHHH@Z PROC		; glm::tvec4<float,2>::tvec4<float,2><int,int,int,int>, COMDAT
; _this$ = ecx

; 204  : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+4], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+8], xmm0
	movd	xmm0, DWORD PTR _d$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+12], xmm0
	pop	ebp
	ret	16					; 00000010H
??$?0HHHH@?$tvec4@M$01@glm@@QAE@HHHH@Z ENDP		; glm::tvec4<float,2>::tvec4<float,2><int,int,int,int>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0MHH$01@?$tvec4@M$01@glm@@QAE@ABU?$tvec2@M$01@1@HH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
??$?0MHH$01@?$tvec4@M$01@glm@@QAE@ABU?$tvec2@M$01@1@HH@Z PROC ; glm::tvec4<float,2>::tvec4<float,2><float,int,int,2>, COMDAT
; _this$ = ecx

; 224  : 	{}

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR _a$[ebp]
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2ps xmm0, xmm0
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	movss	DWORD PTR [ecx+8], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+12], xmm0
	pop	ebp
	ret	12					; 0000000cH
??$?0MHH$01@?$tvec4@M$01@glm@@QAE@ABU?$tvec2@M$01@1@HH@Z ENDP ; glm::tvec4<float,2>::tvec4<float,2><float,int,int,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0MH$01@?$tvec4@M$01@glm@@QAE@ABU?$tvec3@M$01@1@H@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$?0MH$01@?$tvec4@M$01@glm@@QAE@ABU?$tvec3@M$01@1@H@Z PROC ; glm::tvec4<float,2>::tvec4<float,2><float,int,2>, COMDAT
; _this$ = ecx

; 278  : 	{}

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR _a$[ebp]
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2ps xmm0, xmm0
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, ecx
	movss	DWORD PTR [ecx+12], xmm0
	pop	ebp
	ret	8
??$?0MH$01@?$tvec4@M$01@glm@@QAE@ABU?$tvec3@M$01@1@H@Z ENDP ; glm::tvec4<float,2>::tvec4<float,2><float,int,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0HHH@?$tvec3@N$0A@@glm@@QAE@HHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
??$?0HHH@?$tvec3@N$0A@@glm@@QAE@HHH@Z PROC		; glm::tvec3<double,0>::tvec3<double,0><int,int,int>, COMDAT
; _this$ = ecx

; 80   : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+8], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+16], xmm0
	pop	ebp
	ret	12					; 0000000cH
??$?0HHH@?$tvec3@N$0A@@glm@@QAE@HHH@Z ENDP		; glm::tvec3<double,0>::tvec3<double,0><int,int,int>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0HNH@?$tvec3@N$0A@@glm@@QAE@HNH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 8
_c$ = 20						; size = 4
??$?0HNH@?$tvec3@N$0A@@glm@@QAE@HNH@Z PROC		; glm::tvec3<double,0>::tvec3<double,0><int,double,int>, COMDAT
; _this$ = ecx

; 80   : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR _b$[ebp]
	movsd	QWORD PTR [ecx+8], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+16], xmm0
	pop	ebp
	ret	16					; 00000010H
??$?0HNH@?$tvec3@N$0A@@glm@@QAE@HNH@Z ENDP		; glm::tvec3<double,0>::tvec3<double,0><int,double,int>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0NHH@?$tvec3@N$0A@@glm@@QAE@NHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 8
_b$ = 16						; size = 4
_c$ = 20						; size = 4
??$?0NHH@?$tvec3@N$0A@@glm@@QAE@NHH@Z PROC		; glm::tvec3<double,0>::tvec3<double,0><double,int,int>, COMDAT
; _this$ = ecx

; 80   : 	{}

	push	ebp
	mov	ebp, esp
	movsd	xmm0, QWORD PTR _a$[ebp]
	mov	eax, ecx
	movsd	QWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+8], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+16], xmm0
	pop	ebp
	ret	16					; 00000010H
??$?0NHH@?$tvec3@N$0A@@glm@@QAE@NHH@Z ENDP		; glm::tvec3<double,0>::tvec3<double,0><double,int,int>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0N$0A@@?$tvec3@N$0A@@glm@@QAE@ABU?$tvec4@N$0A@@1@@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
??$?0N$0A@@?$tvec3@N$0A@@glm@@QAE@ABU?$tvec4@N$0A@@1@@Z PROC ; glm::tvec3<double,0>::tvec3<double,0><double,0>, COMDAT
; _this$ = ecx

; 138  : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _v$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	QWORD PTR [ecx+8], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	mov	eax, ecx
	movsd	QWORD PTR [ecx+16], xmm0
	pop	ebp
	ret	4
??$?0N$0A@@?$tvec3@N$0A@@glm@@QAE@ABU?$tvec4@N$0A@@1@@Z ENDP ; glm::tvec3<double,0>::tvec3<double,0><double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0NH$0A@@?$tvec3@N$0A@@glm@@QAE@ABU?$tvec2@N$0A@@1@H@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$?0NH$0A@@?$tvec3@N$0A@@glm@@QAE@ABU?$tvec2@N$0A@@1@H@Z PROC ; glm::tvec3<double,0>::tvec3<double,0><double,int,0>, COMDAT
; _this$ = ecx

; 98   : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _a$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	mov	eax, ecx
	movsd	QWORD PTR [ecx+8], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+16], xmm0
	pop	ebp
	ret	8
??$?0NH$0A@@?$tvec3@N$0A@@glm@@QAE@ABU?$tvec2@N$0A@@1@H@Z ENDP ; glm::tvec3<double,0>::tvec3<double,0><double,int,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0HHH@?$tvec3@M$0A@@glm@@QAE@HHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
??$?0HHH@?$tvec3@M$0A@@glm@@QAE@HHH@Z PROC		; glm::tvec3<float,0>::tvec3<float,0><int,int,int>, COMDAT
; _this$ = ecx

; 80   : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+4], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+8], xmm0
	pop	ebp
	ret	12					; 0000000cH
??$?0HHH@?$tvec3@M$0A@@glm@@QAE@HHH@Z ENDP		; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0HMH@?$tvec3@M$0A@@glm@@QAE@HMH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
??$?0HMH@?$tvec3@M$0A@@glm@@QAE@HMH@Z PROC		; glm::tvec3<float,0>::tvec3<float,0><int,float,int>, COMDAT
; _this$ = ecx

; 80   : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR _b$[ebp]
	movss	DWORD PTR [ecx+4], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+8], xmm0
	pop	ebp
	ret	12					; 0000000cH
??$?0HMH@?$tvec3@M$0A@@glm@@QAE@HMH@Z ENDP		; glm::tvec3<float,0>::tvec3<float,0><int,float,int>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0MHH@?$tvec3@M$0A@@glm@@QAE@MHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
??$?0MHH@?$tvec3@M$0A@@glm@@QAE@MHH@Z PROC		; glm::tvec3<float,0>::tvec3<float,0><float,int,int>, COMDAT
; _this$ = ecx

; 80   : 	{}

	push	ebp
	mov	ebp, esp
	movss	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	movss	DWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+4], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+8], xmm0
	pop	ebp
	ret	12					; 0000000cH
??$?0MHH@?$tvec3@M$0A@@glm@@QAE@MHH@Z ENDP		; glm::tvec3<float,0>::tvec3<float,0><float,int,int>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0M$0A@@?$tvec3@M$0A@@glm@@QAE@ABU?$tvec4@M$0A@@1@@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
??$?0M$0A@@?$tvec3@M$0A@@glm@@QAE@ABU?$tvec4@M$0A@@1@@Z PROC ; glm::tvec3<float,0>::tvec3<float,0><float,0>, COMDAT
; _this$ = ecx

; 138  : 	{}

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??$?0M$0A@@?$tvec3@M$0A@@glm@@QAE@ABU?$tvec4@M$0A@@1@@Z ENDP ; glm::tvec3<float,0>::tvec3<float,0><float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0MH$0A@@?$tvec3@M$0A@@glm@@QAE@ABU?$tvec2@M$0A@@1@H@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$?0MH$0A@@?$tvec3@M$0A@@glm@@QAE@ABU?$tvec2@M$0A@@1@H@Z PROC ; glm::tvec3<float,0>::tvec3<float,0><float,int,0>, COMDAT
; _this$ = ecx

; 98   : 	{}

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR _a$[ebp]
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2ps xmm0, xmm0
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	movss	DWORD PTR [ecx+8], xmm0
	pop	ebp
	ret	8
??$?0MH$0A@@?$tvec3@M$0A@@glm@@QAE@ABU?$tvec2@M$0A@@1@H@Z ENDP ; glm::tvec3<float,0>::tvec3<float,0><float,int,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0HHH@?$tvec3@N$00@glm@@QAE@HHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
??$?0HHH@?$tvec3@N$00@glm@@QAE@HHH@Z PROC		; glm::tvec3<double,1>::tvec3<double,1><int,int,int>, COMDAT
; _this$ = ecx

; 80   : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+8], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+16], xmm0
	pop	ebp
	ret	12					; 0000000cH
??$?0HHH@?$tvec3@N$00@glm@@QAE@HHH@Z ENDP		; glm::tvec3<double,1>::tvec3<double,1><int,int,int>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0HNH@?$tvec3@N$00@glm@@QAE@HNH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 8
_c$ = 20						; size = 4
??$?0HNH@?$tvec3@N$00@glm@@QAE@HNH@Z PROC		; glm::tvec3<double,1>::tvec3<double,1><int,double,int>, COMDAT
; _this$ = ecx

; 80   : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR _b$[ebp]
	movsd	QWORD PTR [ecx+8], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+16], xmm0
	pop	ebp
	ret	16					; 00000010H
??$?0HNH@?$tvec3@N$00@glm@@QAE@HNH@Z ENDP		; glm::tvec3<double,1>::tvec3<double,1><int,double,int>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0NHH@?$tvec3@N$00@glm@@QAE@NHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 8
_b$ = 16						; size = 4
_c$ = 20						; size = 4
??$?0NHH@?$tvec3@N$00@glm@@QAE@NHH@Z PROC		; glm::tvec3<double,1>::tvec3<double,1><double,int,int>, COMDAT
; _this$ = ecx

; 80   : 	{}

	push	ebp
	mov	ebp, esp
	movsd	xmm0, QWORD PTR _a$[ebp]
	mov	eax, ecx
	movsd	QWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+8], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+16], xmm0
	pop	ebp
	ret	16					; 00000010H
??$?0NHH@?$tvec3@N$00@glm@@QAE@NHH@Z ENDP		; glm::tvec3<double,1>::tvec3<double,1><double,int,int>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0N$00@?$tvec3@N$00@glm@@QAE@ABU?$tvec4@N$00@1@@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
??$?0N$00@?$tvec3@N$00@glm@@QAE@ABU?$tvec4@N$00@1@@Z PROC ; glm::tvec3<double,1>::tvec3<double,1><double,1>, COMDAT
; _this$ = ecx

; 138  : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _v$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	QWORD PTR [ecx+8], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	mov	eax, ecx
	movsd	QWORD PTR [ecx+16], xmm0
	pop	ebp
	ret	4
??$?0N$00@?$tvec3@N$00@glm@@QAE@ABU?$tvec4@N$00@1@@Z ENDP ; glm::tvec3<double,1>::tvec3<double,1><double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0NH$00@?$tvec3@N$00@glm@@QAE@ABU?$tvec2@N$00@1@H@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$?0NH$00@?$tvec3@N$00@glm@@QAE@ABU?$tvec2@N$00@1@H@Z PROC ; glm::tvec3<double,1>::tvec3<double,1><double,int,1>, COMDAT
; _this$ = ecx

; 98   : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _a$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	mov	eax, ecx
	movsd	QWORD PTR [ecx+8], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+16], xmm0
	pop	ebp
	ret	8
??$?0NH$00@?$tvec3@N$00@glm@@QAE@ABU?$tvec2@N$00@1@H@Z ENDP ; glm::tvec3<double,1>::tvec3<double,1><double,int,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0HHH@?$tvec3@M$00@glm@@QAE@HHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
??$?0HHH@?$tvec3@M$00@glm@@QAE@HHH@Z PROC		; glm::tvec3<float,1>::tvec3<float,1><int,int,int>, COMDAT
; _this$ = ecx

; 80   : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+4], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+8], xmm0
	pop	ebp
	ret	12					; 0000000cH
??$?0HHH@?$tvec3@M$00@glm@@QAE@HHH@Z ENDP		; glm::tvec3<float,1>::tvec3<float,1><int,int,int>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0HMH@?$tvec3@M$00@glm@@QAE@HMH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
??$?0HMH@?$tvec3@M$00@glm@@QAE@HMH@Z PROC		; glm::tvec3<float,1>::tvec3<float,1><int,float,int>, COMDAT
; _this$ = ecx

; 80   : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR _b$[ebp]
	movss	DWORD PTR [ecx+4], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+8], xmm0
	pop	ebp
	ret	12					; 0000000cH
??$?0HMH@?$tvec3@M$00@glm@@QAE@HMH@Z ENDP		; glm::tvec3<float,1>::tvec3<float,1><int,float,int>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0MHH@?$tvec3@M$00@glm@@QAE@MHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
??$?0MHH@?$tvec3@M$00@glm@@QAE@MHH@Z PROC		; glm::tvec3<float,1>::tvec3<float,1><float,int,int>, COMDAT
; _this$ = ecx

; 80   : 	{}

	push	ebp
	mov	ebp, esp
	movss	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	movss	DWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+4], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+8], xmm0
	pop	ebp
	ret	12					; 0000000cH
??$?0MHH@?$tvec3@M$00@glm@@QAE@MHH@Z ENDP		; glm::tvec3<float,1>::tvec3<float,1><float,int,int>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0M$00@?$tvec3@M$00@glm@@QAE@ABU?$tvec4@M$00@1@@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
??$?0M$00@?$tvec3@M$00@glm@@QAE@ABU?$tvec4@M$00@1@@Z PROC ; glm::tvec3<float,1>::tvec3<float,1><float,1>, COMDAT
; _this$ = ecx

; 138  : 	{}

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??$?0M$00@?$tvec3@M$00@glm@@QAE@ABU?$tvec4@M$00@1@@Z ENDP ; glm::tvec3<float,1>::tvec3<float,1><float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0MH$00@?$tvec3@M$00@glm@@QAE@ABU?$tvec2@M$00@1@H@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$?0MH$00@?$tvec3@M$00@glm@@QAE@ABU?$tvec2@M$00@1@H@Z PROC ; glm::tvec3<float,1>::tvec3<float,1><float,int,1>, COMDAT
; _this$ = ecx

; 98   : 	{}

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR _a$[ebp]
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2ps xmm0, xmm0
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	movss	DWORD PTR [ecx+8], xmm0
	pop	ebp
	ret	8
??$?0MH$00@?$tvec3@M$00@glm@@QAE@ABU?$tvec2@M$00@1@H@Z ENDP ; glm::tvec3<float,1>::tvec3<float,1><float,int,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0HHH@?$tvec3@N$01@glm@@QAE@HHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
??$?0HHH@?$tvec3@N$01@glm@@QAE@HHH@Z PROC		; glm::tvec3<double,2>::tvec3<double,2><int,int,int>, COMDAT
; _this$ = ecx

; 80   : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+8], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+16], xmm0
	pop	ebp
	ret	12					; 0000000cH
??$?0HHH@?$tvec3@N$01@glm@@QAE@HHH@Z ENDP		; glm::tvec3<double,2>::tvec3<double,2><int,int,int>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0HNH@?$tvec3@N$01@glm@@QAE@HNH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 8
_c$ = 20						; size = 4
??$?0HNH@?$tvec3@N$01@glm@@QAE@HNH@Z PROC		; glm::tvec3<double,2>::tvec3<double,2><int,double,int>, COMDAT
; _this$ = ecx

; 80   : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR _b$[ebp]
	movsd	QWORD PTR [ecx+8], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+16], xmm0
	pop	ebp
	ret	16					; 00000010H
??$?0HNH@?$tvec3@N$01@glm@@QAE@HNH@Z ENDP		; glm::tvec3<double,2>::tvec3<double,2><int,double,int>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0NHH@?$tvec3@N$01@glm@@QAE@NHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 8
_b$ = 16						; size = 4
_c$ = 20						; size = 4
??$?0NHH@?$tvec3@N$01@glm@@QAE@NHH@Z PROC		; glm::tvec3<double,2>::tvec3<double,2><double,int,int>, COMDAT
; _this$ = ecx

; 80   : 	{}

	push	ebp
	mov	ebp, esp
	movsd	xmm0, QWORD PTR _a$[ebp]
	mov	eax, ecx
	movsd	QWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+8], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+16], xmm0
	pop	ebp
	ret	16					; 00000010H
??$?0NHH@?$tvec3@N$01@glm@@QAE@NHH@Z ENDP		; glm::tvec3<double,2>::tvec3<double,2><double,int,int>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0N$01@?$tvec3@N$01@glm@@QAE@ABU?$tvec4@N$01@1@@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
??$?0N$01@?$tvec3@N$01@glm@@QAE@ABU?$tvec4@N$01@1@@Z PROC ; glm::tvec3<double,2>::tvec3<double,2><double,2>, COMDAT
; _this$ = ecx

; 138  : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _v$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	QWORD PTR [ecx+8], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	mov	eax, ecx
	movsd	QWORD PTR [ecx+16], xmm0
	pop	ebp
	ret	4
??$?0N$01@?$tvec3@N$01@glm@@QAE@ABU?$tvec4@N$01@1@@Z ENDP ; glm::tvec3<double,2>::tvec3<double,2><double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0NH$01@?$tvec3@N$01@glm@@QAE@ABU?$tvec2@N$01@1@H@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$?0NH$01@?$tvec3@N$01@glm@@QAE@ABU?$tvec2@N$01@1@H@Z PROC ; glm::tvec3<double,2>::tvec3<double,2><double,int,2>, COMDAT
; _this$ = ecx

; 98   : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _a$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	mov	eax, ecx
	movsd	QWORD PTR [ecx+8], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+16], xmm0
	pop	ebp
	ret	8
??$?0NH$01@?$tvec3@N$01@glm@@QAE@ABU?$tvec2@N$01@1@H@Z ENDP ; glm::tvec3<double,2>::tvec3<double,2><double,int,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0HHH@?$tvec3@M$01@glm@@QAE@HHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
??$?0HHH@?$tvec3@M$01@glm@@QAE@HHH@Z PROC		; glm::tvec3<float,2>::tvec3<float,2><int,int,int>, COMDAT
; _this$ = ecx

; 80   : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+4], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+8], xmm0
	pop	ebp
	ret	12					; 0000000cH
??$?0HHH@?$tvec3@M$01@glm@@QAE@HHH@Z ENDP		; glm::tvec3<float,2>::tvec3<float,2><int,int,int>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0HMH@?$tvec3@M$01@glm@@QAE@HMH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
??$?0HMH@?$tvec3@M$01@glm@@QAE@HMH@Z PROC		; glm::tvec3<float,2>::tvec3<float,2><int,float,int>, COMDAT
; _this$ = ecx

; 80   : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR _b$[ebp]
	movss	DWORD PTR [ecx+4], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+8], xmm0
	pop	ebp
	ret	12					; 0000000cH
??$?0HMH@?$tvec3@M$01@glm@@QAE@HMH@Z ENDP		; glm::tvec3<float,2>::tvec3<float,2><int,float,int>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0MHH@?$tvec3@M$01@glm@@QAE@MHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
??$?0MHH@?$tvec3@M$01@glm@@QAE@MHH@Z PROC		; glm::tvec3<float,2>::tvec3<float,2><float,int,int>, COMDAT
; _this$ = ecx

; 80   : 	{}

	push	ebp
	mov	ebp, esp
	movss	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	movss	DWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+4], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+8], xmm0
	pop	ebp
	ret	12					; 0000000cH
??$?0MHH@?$tvec3@M$01@glm@@QAE@MHH@Z ENDP		; glm::tvec3<float,2>::tvec3<float,2><float,int,int>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0M$01@?$tvec3@M$01@glm@@QAE@ABU?$tvec4@M$01@1@@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
??$?0M$01@?$tvec3@M$01@glm@@QAE@ABU?$tvec4@M$01@1@@Z PROC ; glm::tvec3<float,2>::tvec3<float,2><float,2>, COMDAT
; _this$ = ecx

; 138  : 	{}

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??$?0M$01@?$tvec3@M$01@glm@@QAE@ABU?$tvec4@M$01@1@@Z ENDP ; glm::tvec3<float,2>::tvec3<float,2><float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0MH$01@?$tvec3@M$01@glm@@QAE@ABU?$tvec2@M$01@1@H@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$?0MH$01@?$tvec3@M$01@glm@@QAE@ABU?$tvec2@M$01@1@H@Z PROC ; glm::tvec3<float,2>::tvec3<float,2><float,int,2>, COMDAT
; _this$ = ecx

; 98   : 	{}

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR _a$[ebp]
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2ps xmm0, xmm0
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	movss	DWORD PTR [ecx+8], xmm0
	pop	ebp
	ret	8
??$?0MH$01@?$tvec3@M$01@glm@@QAE@ABU?$tvec2@M$01@1@H@Z ENDP ; glm::tvec3<float,2>::tvec3<float,2><float,int,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0HH@?$tvec2@N$0A@@glm@@QAE@HH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$?0HH@?$tvec2@N$0A@@glm@@QAE@HH@Z PROC		; glm::tvec2<double,0>::tvec2<double,0><int,int>, COMDAT
; _this$ = ecx

; 66   : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+8], xmm0
	pop	ebp
	ret	8
??$?0HH@?$tvec2@N$0A@@glm@@QAE@HH@Z ENDP		; glm::tvec2<double,0>::tvec2<double,0><int,int>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0HN@?$tvec2@N$0A@@glm@@QAE@HN@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 8
??$?0HN@?$tvec2@N$0A@@glm@@QAE@HN@Z PROC		; glm::tvec2<double,0>::tvec2<double,0><int,double>, COMDAT
; _this$ = ecx

; 66   : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR _b$[ebp]
	movsd	QWORD PTR [ecx+8], xmm0
	pop	ebp
	ret	12					; 0000000cH
??$?0HN@?$tvec2@N$0A@@glm@@QAE@HN@Z ENDP		; glm::tvec2<double,0>::tvec2<double,0><int,double>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0NH@?$tvec2@N$0A@@glm@@QAE@NH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 8
_b$ = 16						; size = 4
??$?0NH@?$tvec2@N$0A@@glm@@QAE@NH@Z PROC		; glm::tvec2<double,0>::tvec2<double,0><double,int>, COMDAT
; _this$ = ecx

; 66   : 	{}

	push	ebp
	mov	ebp, esp
	movsd	xmm0, QWORD PTR _a$[ebp]
	mov	eax, ecx
	movsd	QWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+8], xmm0
	pop	ebp
	ret	12					; 0000000cH
??$?0NH@?$tvec2@N$0A@@glm@@QAE@NH@Z ENDP		; glm::tvec2<double,0>::tvec2<double,0><double,int>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0N$0A@@?$tvec2@N$0A@@glm@@QAE@ABU?$tvec4@N$0A@@1@@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
??$?0N$0A@@?$tvec2@N$0A@@glm@@QAE@ABU?$tvec4@N$0A@@1@@Z PROC ; glm::tvec2<double,0>::tvec2<double,0><double,0>, COMDAT
; _this$ = ecx

; 96   : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _v$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	mov	eax, ecx
	movsd	QWORD PTR [ecx+8], xmm0
	pop	ebp
	ret	4
??$?0N$0A@@?$tvec2@N$0A@@glm@@QAE@ABU?$tvec4@N$0A@@1@@Z ENDP ; glm::tvec2<double,0>::tvec2<double,0><double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0N$0A@@?$tvec2@N$0A@@glm@@QAE@ABU?$tvec3@N$0A@@1@@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
??$?0N$0A@@?$tvec2@N$0A@@glm@@QAE@ABU?$tvec3@N$0A@@1@@Z PROC ; glm::tvec2<double,0>::tvec2<double,0><double,0>, COMDAT
; _this$ = ecx

; 89   : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _v$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	mov	eax, ecx
	movsd	QWORD PTR [ecx+8], xmm0
	pop	ebp
	ret	4
??$?0N$0A@@?$tvec2@N$0A@@glm@@QAE@ABU?$tvec3@N$0A@@1@@Z ENDP ; glm::tvec2<double,0>::tvec2<double,0><double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0HH@?$tvec2@M$0A@@glm@@QAE@HH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$?0HH@?$tvec2@M$0A@@glm@@QAE@HH@Z PROC		; glm::tvec2<float,0>::tvec2<float,0><int,int>, COMDAT
; _this$ = ecx

; 66   : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+4], xmm0
	pop	ebp
	ret	8
??$?0HH@?$tvec2@M$0A@@glm@@QAE@HH@Z ENDP		; glm::tvec2<float,0>::tvec2<float,0><int,int>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0HM@?$tvec2@M$0A@@glm@@QAE@HM@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$?0HM@?$tvec2@M$0A@@glm@@QAE@HM@Z PROC		; glm::tvec2<float,0>::tvec2<float,0><int,float>, COMDAT
; _this$ = ecx

; 66   : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR _b$[ebp]
	movss	DWORD PTR [ecx+4], xmm0
	pop	ebp
	ret	8
??$?0HM@?$tvec2@M$0A@@glm@@QAE@HM@Z ENDP		; glm::tvec2<float,0>::tvec2<float,0><int,float>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0MH@?$tvec2@M$0A@@glm@@QAE@MH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$?0MH@?$tvec2@M$0A@@glm@@QAE@MH@Z PROC		; glm::tvec2<float,0>::tvec2<float,0><float,int>, COMDAT
; _this$ = ecx

; 66   : 	{}

	push	ebp
	mov	ebp, esp
	movss	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	movss	DWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+4], xmm0
	pop	ebp
	ret	8
??$?0MH@?$tvec2@M$0A@@glm@@QAE@MH@Z ENDP		; glm::tvec2<float,0>::tvec2<float,0><float,int>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0M$0A@@?$tvec2@M$0A@@glm@@QAE@ABU?$tvec4@M$0A@@1@@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
??$?0M$0A@@?$tvec2@M$0A@@glm@@QAE@ABU?$tvec4@M$0A@@1@@Z PROC ; glm::tvec2<float,0>::tvec2<float,0><float,0>, COMDAT
; _this$ = ecx

; 96   : 	{}

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??$?0M$0A@@?$tvec2@M$0A@@glm@@QAE@ABU?$tvec4@M$0A@@1@@Z ENDP ; glm::tvec2<float,0>::tvec2<float,0><float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0M$0A@@?$tvec2@M$0A@@glm@@QAE@ABU?$tvec3@M$0A@@1@@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
??$?0M$0A@@?$tvec2@M$0A@@glm@@QAE@ABU?$tvec3@M$0A@@1@@Z PROC ; glm::tvec2<float,0>::tvec2<float,0><float,0>, COMDAT
; _this$ = ecx

; 89   : 	{}

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??$?0M$0A@@?$tvec2@M$0A@@glm@@QAE@ABU?$tvec3@M$0A@@1@@Z ENDP ; glm::tvec2<float,0>::tvec2<float,0><float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0HH@?$tvec2@N$00@glm@@QAE@HH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$?0HH@?$tvec2@N$00@glm@@QAE@HH@Z PROC			; glm::tvec2<double,1>::tvec2<double,1><int,int>, COMDAT
; _this$ = ecx

; 66   : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+8], xmm0
	pop	ebp
	ret	8
??$?0HH@?$tvec2@N$00@glm@@QAE@HH@Z ENDP			; glm::tvec2<double,1>::tvec2<double,1><int,int>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0HN@?$tvec2@N$00@glm@@QAE@HN@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 8
??$?0HN@?$tvec2@N$00@glm@@QAE@HN@Z PROC			; glm::tvec2<double,1>::tvec2<double,1><int,double>, COMDAT
; _this$ = ecx

; 66   : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR _b$[ebp]
	movsd	QWORD PTR [ecx+8], xmm0
	pop	ebp
	ret	12					; 0000000cH
??$?0HN@?$tvec2@N$00@glm@@QAE@HN@Z ENDP			; glm::tvec2<double,1>::tvec2<double,1><int,double>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0NH@?$tvec2@N$00@glm@@QAE@NH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 8
_b$ = 16						; size = 4
??$?0NH@?$tvec2@N$00@glm@@QAE@NH@Z PROC			; glm::tvec2<double,1>::tvec2<double,1><double,int>, COMDAT
; _this$ = ecx

; 66   : 	{}

	push	ebp
	mov	ebp, esp
	movsd	xmm0, QWORD PTR _a$[ebp]
	mov	eax, ecx
	movsd	QWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+8], xmm0
	pop	ebp
	ret	12					; 0000000cH
??$?0NH@?$tvec2@N$00@glm@@QAE@NH@Z ENDP			; glm::tvec2<double,1>::tvec2<double,1><double,int>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0N$00@?$tvec2@N$00@glm@@QAE@ABU?$tvec4@N$00@1@@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
??$?0N$00@?$tvec2@N$00@glm@@QAE@ABU?$tvec4@N$00@1@@Z PROC ; glm::tvec2<double,1>::tvec2<double,1><double,1>, COMDAT
; _this$ = ecx

; 96   : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _v$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	mov	eax, ecx
	movsd	QWORD PTR [ecx+8], xmm0
	pop	ebp
	ret	4
??$?0N$00@?$tvec2@N$00@glm@@QAE@ABU?$tvec4@N$00@1@@Z ENDP ; glm::tvec2<double,1>::tvec2<double,1><double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0N$00@?$tvec2@N$00@glm@@QAE@ABU?$tvec3@N$00@1@@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
??$?0N$00@?$tvec2@N$00@glm@@QAE@ABU?$tvec3@N$00@1@@Z PROC ; glm::tvec2<double,1>::tvec2<double,1><double,1>, COMDAT
; _this$ = ecx

; 89   : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _v$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	mov	eax, ecx
	movsd	QWORD PTR [ecx+8], xmm0
	pop	ebp
	ret	4
??$?0N$00@?$tvec2@N$00@glm@@QAE@ABU?$tvec3@N$00@1@@Z ENDP ; glm::tvec2<double,1>::tvec2<double,1><double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0HH@?$tvec2@M$00@glm@@QAE@HH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$?0HH@?$tvec2@M$00@glm@@QAE@HH@Z PROC			; glm::tvec2<float,1>::tvec2<float,1><int,int>, COMDAT
; _this$ = ecx

; 66   : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+4], xmm0
	pop	ebp
	ret	8
??$?0HH@?$tvec2@M$00@glm@@QAE@HH@Z ENDP			; glm::tvec2<float,1>::tvec2<float,1><int,int>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0HM@?$tvec2@M$00@glm@@QAE@HM@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$?0HM@?$tvec2@M$00@glm@@QAE@HM@Z PROC			; glm::tvec2<float,1>::tvec2<float,1><int,float>, COMDAT
; _this$ = ecx

; 66   : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR _b$[ebp]
	movss	DWORD PTR [ecx+4], xmm0
	pop	ebp
	ret	8
??$?0HM@?$tvec2@M$00@glm@@QAE@HM@Z ENDP			; glm::tvec2<float,1>::tvec2<float,1><int,float>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0MH@?$tvec2@M$00@glm@@QAE@MH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$?0MH@?$tvec2@M$00@glm@@QAE@MH@Z PROC			; glm::tvec2<float,1>::tvec2<float,1><float,int>, COMDAT
; _this$ = ecx

; 66   : 	{}

	push	ebp
	mov	ebp, esp
	movss	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	movss	DWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+4], xmm0
	pop	ebp
	ret	8
??$?0MH@?$tvec2@M$00@glm@@QAE@MH@Z ENDP			; glm::tvec2<float,1>::tvec2<float,1><float,int>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0M$00@?$tvec2@M$00@glm@@QAE@ABU?$tvec4@M$00@1@@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
??$?0M$00@?$tvec2@M$00@glm@@QAE@ABU?$tvec4@M$00@1@@Z PROC ; glm::tvec2<float,1>::tvec2<float,1><float,1>, COMDAT
; _this$ = ecx

; 96   : 	{}

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??$?0M$00@?$tvec2@M$00@glm@@QAE@ABU?$tvec4@M$00@1@@Z ENDP ; glm::tvec2<float,1>::tvec2<float,1><float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0M$00@?$tvec2@M$00@glm@@QAE@ABU?$tvec3@M$00@1@@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
??$?0M$00@?$tvec2@M$00@glm@@QAE@ABU?$tvec3@M$00@1@@Z PROC ; glm::tvec2<float,1>::tvec2<float,1><float,1>, COMDAT
; _this$ = ecx

; 89   : 	{}

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??$?0M$00@?$tvec2@M$00@glm@@QAE@ABU?$tvec3@M$00@1@@Z ENDP ; glm::tvec2<float,1>::tvec2<float,1><float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0HH@?$tvec2@N$01@glm@@QAE@HH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$?0HH@?$tvec2@N$01@glm@@QAE@HH@Z PROC			; glm::tvec2<double,2>::tvec2<double,2><int,int>, COMDAT
; _this$ = ecx

; 66   : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+8], xmm0
	pop	ebp
	ret	8
??$?0HH@?$tvec2@N$01@glm@@QAE@HH@Z ENDP			; glm::tvec2<double,2>::tvec2<double,2><int,int>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0HN@?$tvec2@N$01@glm@@QAE@HN@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 8
??$?0HN@?$tvec2@N$01@glm@@QAE@HN@Z PROC			; glm::tvec2<double,2>::tvec2<double,2><int,double>, COMDAT
; _this$ = ecx

; 66   : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR _b$[ebp]
	movsd	QWORD PTR [ecx+8], xmm0
	pop	ebp
	ret	12					; 0000000cH
??$?0HN@?$tvec2@N$01@glm@@QAE@HN@Z ENDP			; glm::tvec2<double,2>::tvec2<double,2><int,double>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0NH@?$tvec2@N$01@glm@@QAE@NH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 8
_b$ = 16						; size = 4
??$?0NH@?$tvec2@N$01@glm@@QAE@NH@Z PROC			; glm::tvec2<double,2>::tvec2<double,2><double,int>, COMDAT
; _this$ = ecx

; 66   : 	{}

	push	ebp
	mov	ebp, esp
	movsd	xmm0, QWORD PTR _a$[ebp]
	mov	eax, ecx
	movsd	QWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+8], xmm0
	pop	ebp
	ret	12					; 0000000cH
??$?0NH@?$tvec2@N$01@glm@@QAE@NH@Z ENDP			; glm::tvec2<double,2>::tvec2<double,2><double,int>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0N$01@?$tvec2@N$01@glm@@QAE@ABU?$tvec4@N$01@1@@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
??$?0N$01@?$tvec2@N$01@glm@@QAE@ABU?$tvec4@N$01@1@@Z PROC ; glm::tvec2<double,2>::tvec2<double,2><double,2>, COMDAT
; _this$ = ecx

; 96   : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _v$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	mov	eax, ecx
	movsd	QWORD PTR [ecx+8], xmm0
	pop	ebp
	ret	4
??$?0N$01@?$tvec2@N$01@glm@@QAE@ABU?$tvec4@N$01@1@@Z ENDP ; glm::tvec2<double,2>::tvec2<double,2><double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0N$01@?$tvec2@N$01@glm@@QAE@ABU?$tvec3@N$01@1@@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
??$?0N$01@?$tvec2@N$01@glm@@QAE@ABU?$tvec3@N$01@1@@Z PROC ; glm::tvec2<double,2>::tvec2<double,2><double,2>, COMDAT
; _this$ = ecx

; 89   : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _v$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	mov	eax, ecx
	movsd	QWORD PTR [ecx+8], xmm0
	pop	ebp
	ret	4
??$?0N$01@?$tvec2@N$01@glm@@QAE@ABU?$tvec3@N$01@1@@Z ENDP ; glm::tvec2<double,2>::tvec2<double,2><double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0HH@?$tvec2@M$01@glm@@QAE@HH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$?0HH@?$tvec2@M$01@glm@@QAE@HH@Z PROC			; glm::tvec2<float,2>::tvec2<float,2><int,int>, COMDAT
; _this$ = ecx

; 66   : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+4], xmm0
	pop	ebp
	ret	8
??$?0HH@?$tvec2@M$01@glm@@QAE@HH@Z ENDP			; glm::tvec2<float,2>::tvec2<float,2><int,int>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0HM@?$tvec2@M$01@glm@@QAE@HM@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$?0HM@?$tvec2@M$01@glm@@QAE@HM@Z PROC			; glm::tvec2<float,2>::tvec2<float,2><int,float>, COMDAT
; _this$ = ecx

; 66   : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR _b$[ebp]
	movss	DWORD PTR [ecx+4], xmm0
	pop	ebp
	ret	8
??$?0HM@?$tvec2@M$01@glm@@QAE@HM@Z ENDP			; glm::tvec2<float,2>::tvec2<float,2><int,float>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0MH@?$tvec2@M$01@glm@@QAE@MH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$?0MH@?$tvec2@M$01@glm@@QAE@MH@Z PROC			; glm::tvec2<float,2>::tvec2<float,2><float,int>, COMDAT
; _this$ = ecx

; 66   : 	{}

	push	ebp
	mov	ebp, esp
	movss	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	movss	DWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+4], xmm0
	pop	ebp
	ret	8
??$?0MH@?$tvec2@M$01@glm@@QAE@MH@Z ENDP			; glm::tvec2<float,2>::tvec2<float,2><float,int>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0M$01@?$tvec2@M$01@glm@@QAE@ABU?$tvec4@M$01@1@@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
??$?0M$01@?$tvec2@M$01@glm@@QAE@ABU?$tvec4@M$01@1@@Z PROC ; glm::tvec2<float,2>::tvec2<float,2><float,2>, COMDAT
; _this$ = ecx

; 96   : 	{}

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??$?0M$01@?$tvec2@M$01@glm@@QAE@ABU?$tvec4@M$01@1@@Z ENDP ; glm::tvec2<float,2>::tvec2<float,2><float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0M$01@?$tvec2@M$01@glm@@QAE@ABU?$tvec3@M$01@1@@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
??$?0M$01@?$tvec2@M$01@glm@@QAE@ABU?$tvec3@M$01@1@@Z PROC ; glm::tvec2<float,2>::tvec2<float,2><float,2>, COMDAT
; _this$ = ecx

; 89   : 	{}

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??$?0M$01@?$tvec2@M$01@glm@@QAE@ABU?$tvec3@M$01@1@@Z ENDP ; glm::tvec2<float,2>::tvec2<float,2><float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tdualquat@N$0A@@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tdualquat@N$0A@@glm@@QAEAAU01@ABU01@@Z PROC	; glm::tdualquat<double,0>::operator=, COMDAT
; _this$ = ecx

; 254  : template struct tdualquat<float64, highp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	16					; 00000010H
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tdualquat@N$0A@@glm@@QAEAAU01@ABU01@@Z ENDP	; glm::tdualquat<double,0>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@N$0A@@glm@@QAE@ABU?$tmat3x4@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -64						; size = 64
_m$ = 8							; size = 4
??0?$tdualquat@N$0A@@glm@@QAE@ABU?$tmat3x4@N$0A@@1@@Z PROC ; glm::tdualquat<double,0>::tdualquat<double,0>, COMDAT
; _this$ = ecx

; 94   : 	{

	push	ebp
	mov	ebp, esp
	movsd	xmm0, QWORD PTR __real@3ff0000000000000

; 95   : 		*this = dualquat_cast(m);

	lea	eax, DWORD PTR $T1[ebp]
	sub	esp, 64					; 00000040H
	xorps	xmm1, xmm1
	push	ebx
	mov	ebx, ecx
	push	esi
	push	edi
	push	DWORD PTR _m$[ebp]
	movups	XMMWORD PTR [ebx], xmm1
	push	eax
	movsd	QWORD PTR [ebx+16], xmm1
	movsd	QWORD PTR [ebx+24], xmm0
	movups	XMMWORD PTR [ebx+32], xmm1
	movsd	QWORD PTR [ebx+48], xmm1
	movsd	QWORD PTR [ebx+56], xmm0
	call	??$dualquat_cast@N$0A@@glm@@YA?AU?$tdualquat@N$0A@@0@ABU?$tmat3x4@N$0A@@0@@Z ; glm::dualquat_cast<double,0>
	pop	ecx
	pop	ecx
	push	16					; 00000010H
	pop	ecx
	mov	esi, eax
	mov	edi, ebx
	rep movsd
	pop	edi
	pop	esi

; 96   : 	}

	mov	eax, ebx
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tdualquat@N$0A@@glm@@QAE@ABU?$tmat3x4@N$0A@@1@@Z ENDP ; glm::tdualquat<double,0>::tdualquat<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@N$0A@@glm@@QAE@ABU?$tmat2x4@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -128						; size = 64
$T2 = -64						; size = 32
$T3 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tdualquat@N$0A@@glm@@QAE@ABU?$tmat2x4@N$0A@@1@@Z PROC ; glm::tdualquat<double,0>::tdualquat<double,0>, COMDAT
; _this$ = ecx

; 88   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 128				; 00000080H

; 89   : 		*this = dualquat_cast(m);

	mov	eax, DWORD PTR _m$[ebp]
	mov	edx, ecx
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	xorps	xmm1, xmm1
	push	esi
	push	edi
	movups	XMMWORD PTR [edx], xmm1
	lea	esi, DWORD PTR $T3[ebp]
	movsd	QWORD PTR [edx+16], xmm1
	lea	edi, DWORD PTR $T1[ebp]
	movsd	QWORD PTR [edx+24], xmm0
	movups	XMMWORD PTR [edx+32], xmm1
	push	8
	movsd	QWORD PTR [edx+48], xmm1
	movsd	QWORD PTR [edx+56], xmm0
	movups	xmm0, XMMWORD PTR [eax+32]
	pop	ecx
	push	8
	movups	XMMWORD PTR $T2[ebp], xmm0
	movups	xmm0, XMMWORD PTR [eax+48]
	movups	XMMWORD PTR $T2[ebp+16], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR $T3[ebp], xmm0
	movups	xmm0, XMMWORD PTR [eax+16]

; 90   : 	}

	mov	eax, edx
	movups	XMMWORD PTR $T3[ebp+16], xmm0
	rep movsd
	pop	ecx
	lea	esi, DWORD PTR $T2[ebp]
	lea	edi, DWORD PTR $T1[ebp+32]
	rep movsd
	push	16					; 00000010H
	pop	ecx
	lea	esi, DWORD PTR $T1[ebp]
	mov	edi, edx
	rep movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tdualquat@N$0A@@glm@@QAE@ABU?$tmat2x4@N$0A@@1@@Z ENDP ; glm::tdualquat<double,0>::tdualquat<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@N$0A@@glm@@QAE@ABU?$tquat@N$0A@@1@0@Z
_TEXT	SEGMENT
_r$ = 8							; size = 4
_d$ = 12						; size = 4
??0?$tdualquat@N$0A@@glm@@QAE@ABU?$tquat@N$0A@@1@0@Z PROC ; glm::tdualquat<double,0>::tdualquat<double,0>, COMDAT
; _this$ = ecx

; 75   : 	{}

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR _r$[ebp]
	mov	eax, ecx
	push	edi
	push	8
	pop	ecx
	mov	edi, eax
	rep movsd
	mov	esi, DWORD PTR _d$[ebp]
	lea	edi, DWORD PTR [eax+32]
	push	8
	pop	ecx
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	8
??0?$tdualquat@N$0A@@glm@@QAE@ABU?$tquat@N$0A@@1@0@Z ENDP ; glm::tdualquat<double,0>::tdualquat<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@N$0A@@glm@@QAE@ABU?$tquat@N$0A@@1@ABU?$tvec3@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 8
$T2 = -8						; size = 8
_q$ = 8							; size = 4
_p$ = 12						; size = 4
??0?$tdualquat@N$0A@@glm@@QAE@ABU?$tquat@N$0A@@1@ABU?$tvec3@N$0A@@1@@Z PROC ; glm::tdualquat<double,0>::tdualquat<double,0>, COMDAT
; _this$ = ecx

; 70   : 	{}

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	edx, DWORD PTR _q$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	movsd	xmm3, QWORD PTR __real@3fe0000000000000
	push	8
	pop	ecx
	mov	edi, ebx
	mov	esi, edx
	rep movsd
	movsd	xmm5, QWORD PTR [eax+8]
	movsd	xmm0, QWORD PTR [edx]
	movsd	xmm7, QWORD PTR [eax]
	mulsd	xmm7, QWORD PTR [edx+8]
	pop	edi
	movsd	xmm6, QWORD PTR [eax+16]
	movsd	xmm4, QWORD PTR [edx+24]
	movsd	xmm2, QWORD PTR [edx+16]
	movapd	xmm1, xmm4
	movsd	QWORD PTR $T2[ebp], xmm0
	mulsd	xmm0, xmm5
	pop	esi
	mulsd	xmm1, xmm5
	subsd	xmm7, xmm0
	movaps	xmm0, xmm6
	mulsd	xmm0, xmm4
	mulsd	xmm4, QWORD PTR [eax]
	addsd	xmm7, xmm0
	movaps	xmm0, xmm2
	mulsd	xmm0, QWORD PTR [eax]
	mulsd	xmm7, xmm3
	subsd	xmm1, xmm0
	movaps	xmm0, xmm6
	mulsd	xmm0, QWORD PTR $T2[ebp]
	movsd	QWORD PTR $T1[ebp], xmm7
	addsd	xmm1, xmm0
	movsd	xmm0, QWORD PTR $T2[ebp]
	mulsd	xmm0, QWORD PTR [eax]
	mov	eax, ebx
	mulsd	xmm1, xmm3
	movsd	QWORD PTR $T2[ebp], xmm0
	movaps	xmm0, xmm5
	mulsd	xmm0, QWORD PTR [edx+8]
	movsd	xmm7, QWORD PTR $T2[ebp]
	addsd	xmm7, xmm0
	movaps	xmm0, xmm2
	mulsd	xmm2, xmm5
	mulsd	xmm0, xmm6
	mulsd	xmm6, QWORD PTR [edx+8]
	addsd	xmm2, xmm4
	movsd	QWORD PTR [ebx+40], xmm1
	addsd	xmm7, xmm0
	subsd	xmm2, xmm6
	movsd	xmm0, xmm7
	movsd	xmm7, QWORD PTR $T1[ebp]
	mulsd	xmm0, QWORD PTR __real@bfe0000000000000
	movsd	QWORD PTR [ebx+48], xmm7
	mulsd	xmm2, xmm3
	movsd	QWORD PTR [ebx+56], xmm0
	movsd	QWORD PTR [ebx+32], xmm2
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$tdualquat@N$0A@@glm@@QAE@ABU?$tquat@N$0A@@1@ABU?$tvec3@N$0A@@1@@Z ENDP ; glm::tdualquat<double,0>::tdualquat<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@N$0A@@glm@@QAE@ABU?$tquat@N$0A@@1@@Z
_TEXT	SEGMENT
_r$ = 8							; size = 4
??0?$tdualquat@N$0A@@glm@@QAE@ABU?$tquat@N$0A@@1@@Z PROC ; glm::tdualquat<double,0>::tdualquat<double,0>, COMDAT
; _this$ = ecx

; 61   : 	{}

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR _r$[ebp]
	mov	eax, ecx
	push	edi
	push	8
	pop	ecx
	mov	edi, eax
	xorps	xmm0, xmm0
	rep movsd
	pop	edi
	movups	XMMWORD PTR [eax+32], xmm0
	pop	esi
	movups	XMMWORD PTR [eax+48], xmm0
	pop	ebp
	ret	4
??0?$tdualquat@N$0A@@glm@@QAE@ABU?$tquat@N$0A@@1@@Z ENDP ; glm::tdualquat<double,0>::tdualquat<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@N$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tdualquat@N$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tdualquat<double,0>::tdualquat<double,0>, COMDAT
; _this$ = ecx

; 56   : 	{}

	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	xorps	xmm1, xmm1
	movups	XMMWORD PTR [ecx], xmm1
	mov	eax, ecx
	movsd	QWORD PTR [ecx+16], xmm1
	movsd	QWORD PTR [ecx+24], xmm0
	movups	XMMWORD PTR [ecx+32], xmm1
	movsd	QWORD PTR [ecx+48], xmm1
	movsd	QWORD PTR [ecx+56], xmm0
	ret	4
??0?$tdualquat@N$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tdualquat<double,0>::tdualquat<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tdualquat@N$0A@@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tdualquat@N$0A@@glm@@QAE@ABU01@@Z PROC		; glm::tdualquat<double,0>::tdualquat<double,0>, COMDAT
; _this$ = ecx

; 254  : template struct tdualquat<float64, highp>;

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ___that$[ebp]
	mov	edx, ecx
	push	esi
	push	edi
	push	8
	pop	ecx
	mov	esi, eax
	mov	edi, edx
	rep movsd
	push	8
	pop	ecx
	lea	esi, DWORD PTR [eax+32]
	mov	eax, edx
	lea	edi, DWORD PTR [edx+32]
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tdualquat@N$0A@@glm@@QAE@ABU01@@Z ENDP		; glm::tdualquat<double,0>::tdualquat<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@N$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tdualquat@N$0A@@glm@@QAE@XZ PROC			; glm::tdualquat<double,0>::tdualquat<double,0>, COMDAT
; _this$ = ecx

; 34   : 		{}

	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	xorps	xmm1, xmm1
	movups	XMMWORD PTR [ecx], xmm1
	mov	eax, ecx
	movsd	QWORD PTR [ecx+16], xmm1
	movsd	QWORD PTR [ecx+24], xmm0
	movups	XMMWORD PTR [ecx+32], xmm1
	movups	XMMWORD PTR [ecx+48], xmm1
	ret	0
??0?$tdualquat@N$0A@@glm@@QAE@XZ ENDP			; glm::tdualquat<double,0>::tdualquat<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??A?$tdualquat@N$0A@@glm@@QBEABU?$tquat@N$0A@@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tdualquat@N$0A@@glm@@QBEABU?$tquat@N$0A@@1@H@Z PROC ; glm::tdualquat<double,0>::operator[], COMDAT
; _this$ = ecx

; 20   : 	{

	push	ebp
	mov	ebp, esp

; 21   : 		assert(i >= 0 && i < this->length());
; 22   : 		return (&real)[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	add	eax, ecx

; 23   : 	}

	pop	ebp
	ret	4
??A?$tdualquat@N$0A@@glm@@QBEABU?$tquat@N$0A@@1@H@Z ENDP ; glm::tdualquat<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??A?$tdualquat@N$0A@@glm@@QAEAAU?$tquat@N$0A@@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tdualquat@N$0A@@glm@@QAEAAU?$tquat@N$0A@@1@H@Z PROC ; glm::tdualquat<double,0>::operator[], COMDAT
; _this$ = ecx

; 13   : 	{

	push	ebp
	mov	ebp, esp

; 14   : 		assert(i >= 0 && i < this->length());
; 15   : 		return (&real)[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	add	eax, ecx

; 16   : 	}

	pop	ebp
	ret	4
??A?$tdualquat@N$0A@@glm@@QAEAAU?$tquat@N$0A@@1@H@Z ENDP ; glm::tdualquat<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtx\dual_quaternion.hpp
;	COMDAT ?length@?$tdualquat@N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tdualquat@N$0A@@glm@@SAHXZ PROC		; glm::tdualquat<double,0>::length, COMDAT

; 49   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	push	2
	pop	eax
	ret	0
?length@?$tdualquat@N$0A@@glm@@SAHXZ ENDP		; glm::tdualquat<double,0>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tdualquat@M$0A@@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tdualquat@M$0A@@glm@@QAEAAU01@ABU01@@Z PROC	; glm::tdualquat<float,0>::operator=, COMDAT
; _this$ = ecx

; 253  : template struct tdualquat<float32, highp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	8
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tdualquat@M$0A@@glm@@QAEAAU01@ABU01@@Z ENDP	; glm::tdualquat<float,0>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@M$0A@@glm@@QAE@ABU?$tmat3x4@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tdualquat@M$0A@@glm@@QAE@ABU?$tmat3x4@M$0A@@1@@Z PROC ; glm::tdualquat<float,0>::tdualquat<float,0>, COMDAT
; _this$ = ecx

; 94   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H

; 95   : 		*this = dualquat_cast(m);

	lea	eax, DWORD PTR $T1[ebp]
	push	ebx
	mov	ebx, ecx
	push	esi
	push	edi
	push	DWORD PTR _m$[ebp]
	and	DWORD PTR [ebx], 0
	and	DWORD PTR [ebx+4], 0
	and	DWORD PTR [ebx+8], 0
	mov	DWORD PTR [ebx+12], 1065353216		; 3f800000H
	and	DWORD PTR [ebx+16], 0
	and	DWORD PTR [ebx+20], 0
	and	DWORD PTR [ebx+24], 0
	push	eax
	mov	DWORD PTR [ebx+28], 1065353216		; 3f800000H
	call	??$dualquat_cast@M$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@ABU?$tmat3x4@M$0A@@0@@Z ; glm::dualquat_cast<float,0>
	pop	ecx
	pop	ecx
	push	8
	pop	ecx
	mov	esi, eax
	mov	edi, ebx
	rep movsd
	pop	edi
	pop	esi

; 96   : 	}

	mov	eax, ebx
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tdualquat@M$0A@@glm@@QAE@ABU?$tmat3x4@M$0A@@1@@Z ENDP ; glm::tdualquat<float,0>::tdualquat<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@M$0A@@glm@@QAE@ABU?$tmat2x4@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tdualquat@M$0A@@glm@@QAE@ABU?$tmat2x4@M$0A@@1@@Z PROC ; glm::tdualquat<float,0>::tdualquat<float,0>, COMDAT
; _this$ = ecx

; 88   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H

; 89   : 		*this = dualquat_cast(m);

	lea	eax, DWORD PTR $T1[ebp]
	push	ebx
	mov	ebx, ecx
	push	esi
	push	edi
	push	DWORD PTR _m$[ebp]
	and	DWORD PTR [ebx], 0
	and	DWORD PTR [ebx+4], 0
	and	DWORD PTR [ebx+8], 0
	mov	DWORD PTR [ebx+12], 1065353216		; 3f800000H
	and	DWORD PTR [ebx+16], 0
	and	DWORD PTR [ebx+20], 0
	and	DWORD PTR [ebx+24], 0
	push	eax
	mov	DWORD PTR [ebx+28], 1065353216		; 3f800000H
	call	??$dualquat_cast@M$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@ABU?$tmat2x4@M$0A@@0@@Z ; glm::dualquat_cast<float,0>
	pop	ecx
	pop	ecx
	push	8
	pop	ecx
	mov	esi, eax
	mov	edi, ebx
	rep movsd
	pop	edi
	pop	esi

; 90   : 	}

	mov	eax, ebx
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tdualquat@M$0A@@glm@@QAE@ABU?$tmat2x4@M$0A@@1@@Z ENDP ; glm::tdualquat<float,0>::tdualquat<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@M$0A@@glm@@QAE@ABU?$tquat@M$0A@@1@0@Z
_TEXT	SEGMENT
_r$ = 8							; size = 4
_d$ = 12						; size = 4
??0?$tdualquat@M$0A@@glm@@QAE@ABU?$tquat@M$0A@@1@0@Z PROC ; glm::tdualquat<float,0>::tdualquat<float,0>, COMDAT
; _this$ = ecx

; 75   : 	{}

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR _r$[ebp]
	mov	eax, ecx
	push	edi
	mov	edi, ecx
	movsd
	movsd
	movsd
	movsd
	mov	esi, DWORD PTR _d$[ebp]
	lea	edi, DWORD PTR [ecx+16]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	8
??0?$tdualquat@M$0A@@glm@@QAE@ABU?$tquat@M$0A@@1@0@Z ENDP ; glm::tdualquat<float,0>::tdualquat<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@M$0A@@glm@@QAE@ABU?$tquat@M$0A@@1@ABU?$tvec3@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 8							; size = 4
_q$ = 8							; size = 4
$T2 = 12						; size = 4
_p$ = 12						; size = 4
??0?$tdualquat@M$0A@@glm@@QAE@ABU?$tquat@M$0A@@1@ABU?$tvec3@M$0A@@1@@Z PROC ; glm::tdualquat<float,0>::tdualquat<float,0>, COMDAT
; _this$ = ecx

; 70   : 	{}

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR _q$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	push	esi
	push	edi
	mov	esi, edx
	movss	xmm3, DWORD PTR __real@3f000000
	mov	edi, ecx
	movsd
	movsd
	movsd
	movsd
	movss	xmm5, DWORD PTR [eax+4]
	movss	xmm0, DWORD PTR [edx]
	movss	xmm7, DWORD PTR [eax]
	mulss	xmm7, DWORD PTR [edx+4]
	pop	edi
	movss	xmm6, DWORD PTR [eax+8]
	movss	xmm4, DWORD PTR [edx+12]
	movss	xmm2, DWORD PTR [edx+8]
	movaps	xmm1, xmm4
	movss	DWORD PTR $T1[ebp], xmm0
	mulss	xmm0, xmm5
	pop	esi
	mulss	xmm1, xmm5
	subss	xmm7, xmm0
	movaps	xmm0, xmm6
	mulss	xmm0, xmm4
	mulss	xmm4, DWORD PTR [eax]
	addss	xmm7, xmm0
	movaps	xmm0, xmm2
	mulss	xmm0, DWORD PTR [eax]
	subss	xmm1, xmm0
	mulss	xmm7, xmm3
	movaps	xmm0, xmm6
	mulss	xmm0, DWORD PTR $T1[ebp]
	movss	DWORD PTR $T2[ebp], xmm7
	addss	xmm1, xmm0
	movss	xmm0, DWORD PTR $T1[ebp]
	mulss	xmm0, DWORD PTR [eax]
	mov	eax, ecx
	movss	DWORD PTR $T1[ebp], xmm0
	movaps	xmm0, xmm5
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm7, DWORD PTR $T1[ebp]
	mulss	xmm1, xmm3
	addss	xmm7, xmm0
	movaps	xmm0, xmm2
	mulss	xmm2, xmm5
	mulss	xmm0, xmm6
	mulss	xmm6, DWORD PTR [edx+4]
	addss	xmm2, xmm4
	addss	xmm7, xmm0
	movss	DWORD PTR [ecx+20], xmm1
	subss	xmm2, xmm6
	movss	xmm0, xmm7
	movss	xmm7, DWORD PTR $T2[ebp]
	mulss	xmm0, DWORD PTR __real@bf000000
	mulss	xmm2, xmm3
	movss	DWORD PTR [ecx+24], xmm7
	movss	DWORD PTR [ecx+28], xmm0
	movss	DWORD PTR [ecx+16], xmm2
	pop	ebp
	ret	8
??0?$tdualquat@M$0A@@glm@@QAE@ABU?$tquat@M$0A@@1@ABU?$tvec3@M$0A@@1@@Z ENDP ; glm::tdualquat<float,0>::tdualquat<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@M$0A@@glm@@QAE@ABU?$tquat@M$0A@@1@@Z
_TEXT	SEGMENT
_r$ = 8							; size = 4
??0?$tdualquat@M$0A@@glm@@QAE@ABU?$tquat@M$0A@@1@@Z PROC ; glm::tdualquat<float,0>::tdualquat<float,0>, COMDAT
; _this$ = ecx

; 61   : 	{}

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR _r$[ebp]
	mov	eax, ecx
	push	edi
	mov	edi, ecx
	movsd
	movsd
	movsd
	movsd
	and	DWORD PTR [ecx+16], 0
	and	DWORD PTR [ecx+20], 0
	and	DWORD PTR [ecx+24], 0
	and	DWORD PTR [ecx+28], 0
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tdualquat@M$0A@@glm@@QAE@ABU?$tquat@M$0A@@1@@Z ENDP ; glm::tdualquat<float,0>::tdualquat<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@M$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tdualquat@M$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tdualquat<float,0>::tdualquat<float,0>, COMDAT
; _this$ = ecx

; 56   : 	{}

	and	DWORD PTR [ecx], 0
	mov	eax, ecx
	and	DWORD PTR [ecx+4], 0
	and	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 1065353216		; 3f800000H
	and	DWORD PTR [ecx+16], 0
	and	DWORD PTR [ecx+20], 0
	and	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 1065353216		; 3f800000H
	ret	4
??0?$tdualquat@M$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tdualquat<float,0>::tdualquat<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tdualquat@M$0A@@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tdualquat@M$0A@@glm@@QAE@ABU01@@Z PROC		; glm::tdualquat<float,0>::tdualquat<float,0>, COMDAT
; _this$ = ecx

; 253  : template struct tdualquat<float32, highp>;

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ___that$[ebp]
	push	esi
	push	edi
	mov	esi, eax
	mov	edi, ecx
	movsd
	movsd
	movsd
	movsd
	lea	esi, DWORD PTR [eax+16]
	mov	eax, ecx
	lea	edi, DWORD PTR [ecx+16]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tdualquat@M$0A@@glm@@QAE@ABU01@@Z ENDP		; glm::tdualquat<float,0>::tdualquat<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@M$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tdualquat@M$0A@@glm@@QAE@XZ PROC			; glm::tdualquat<float,0>::tdualquat<float,0>, COMDAT
; _this$ = ecx

; 34   : 		{}

	and	DWORD PTR [ecx], 0
	mov	eax, ecx
	and	DWORD PTR [ecx+4], 0
	and	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 1065353216		; 3f800000H
	and	DWORD PTR [ecx+16], 0
	and	DWORD PTR [ecx+20], 0
	and	DWORD PTR [ecx+24], 0
	and	DWORD PTR [ecx+28], 0
	ret	0
??0?$tdualquat@M$0A@@glm@@QAE@XZ ENDP			; glm::tdualquat<float,0>::tdualquat<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??A?$tdualquat@M$0A@@glm@@QBEABU?$tquat@M$0A@@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tdualquat@M$0A@@glm@@QBEABU?$tquat@M$0A@@1@H@Z PROC ; glm::tdualquat<float,0>::operator[], COMDAT
; _this$ = ecx

; 20   : 	{

	push	ebp
	mov	ebp, esp

; 21   : 		assert(i >= 0 && i < this->length());
; 22   : 		return (&real)[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, ecx

; 23   : 	}

	pop	ebp
	ret	4
??A?$tdualquat@M$0A@@glm@@QBEABU?$tquat@M$0A@@1@H@Z ENDP ; glm::tdualquat<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??A?$tdualquat@M$0A@@glm@@QAEAAU?$tquat@M$0A@@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tdualquat@M$0A@@glm@@QAEAAU?$tquat@M$0A@@1@H@Z PROC ; glm::tdualquat<float,0>::operator[], COMDAT
; _this$ = ecx

; 13   : 	{

	push	ebp
	mov	ebp, esp

; 14   : 		assert(i >= 0 && i < this->length());
; 15   : 		return (&real)[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, ecx

; 16   : 	}

	pop	ebp
	ret	4
??A?$tdualquat@M$0A@@glm@@QAEAAU?$tquat@M$0A@@1@H@Z ENDP ; glm::tdualquat<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtx\dual_quaternion.hpp
;	COMDAT ?length@?$tdualquat@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tdualquat@M$0A@@glm@@SAHXZ PROC		; glm::tdualquat<float,0>::length, COMDAT

; 49   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	push	2
	pop	eax
	ret	0
?length@?$tdualquat@M$0A@@glm@@SAHXZ ENDP		; glm::tdualquat<float,0>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tdualquat@N$00@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tdualquat@N$00@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tdualquat<double,1>::operator=, COMDAT
; _this$ = ecx

; 251  : template struct tdualquat<float64, mediump>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	16					; 00000010H
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tdualquat@N$00@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tdualquat<double,1>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@N$00@glm@@QAE@ABU?$tmat3x4@N$00@1@@Z
_TEXT	SEGMENT
$T1 = -64						; size = 64
_m$ = 8							; size = 4
??0?$tdualquat@N$00@glm@@QAE@ABU?$tmat3x4@N$00@1@@Z PROC ; glm::tdualquat<double,1>::tdualquat<double,1>, COMDAT
; _this$ = ecx

; 94   : 	{

	push	ebp
	mov	ebp, esp
	movsd	xmm0, QWORD PTR __real@3ff0000000000000

; 95   : 		*this = dualquat_cast(m);

	lea	eax, DWORD PTR $T1[ebp]
	sub	esp, 64					; 00000040H
	xorps	xmm1, xmm1
	push	ebx
	mov	ebx, ecx
	push	esi
	push	edi
	push	DWORD PTR _m$[ebp]
	movups	XMMWORD PTR [ebx], xmm1
	push	eax
	movsd	QWORD PTR [ebx+16], xmm1
	movsd	QWORD PTR [ebx+24], xmm0
	movups	XMMWORD PTR [ebx+32], xmm1
	movsd	QWORD PTR [ebx+48], xmm1
	movsd	QWORD PTR [ebx+56], xmm0
	call	??$dualquat_cast@N$00@glm@@YA?AU?$tdualquat@N$00@0@ABU?$tmat3x4@N$00@0@@Z ; glm::dualquat_cast<double,1>
	pop	ecx
	pop	ecx
	push	16					; 00000010H
	pop	ecx
	mov	esi, eax
	mov	edi, ebx
	rep movsd
	pop	edi
	pop	esi

; 96   : 	}

	mov	eax, ebx
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tdualquat@N$00@glm@@QAE@ABU?$tmat3x4@N$00@1@@Z ENDP ; glm::tdualquat<double,1>::tdualquat<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@N$00@glm@@QAE@ABU?$tmat2x4@N$00@1@@Z
_TEXT	SEGMENT
$T1 = -128						; size = 64
$T2 = -64						; size = 32
$T3 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tdualquat@N$00@glm@@QAE@ABU?$tmat2x4@N$00@1@@Z PROC ; glm::tdualquat<double,1>::tdualquat<double,1>, COMDAT
; _this$ = ecx

; 88   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 128				; 00000080H

; 89   : 		*this = dualquat_cast(m);

	mov	eax, DWORD PTR _m$[ebp]
	mov	edx, ecx
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	xorps	xmm1, xmm1
	push	esi
	push	edi
	movups	XMMWORD PTR [edx], xmm1
	lea	esi, DWORD PTR $T3[ebp]
	movsd	QWORD PTR [edx+16], xmm1
	lea	edi, DWORD PTR $T1[ebp]
	movsd	QWORD PTR [edx+24], xmm0
	movups	XMMWORD PTR [edx+32], xmm1
	push	8
	movsd	QWORD PTR [edx+48], xmm1
	movsd	QWORD PTR [edx+56], xmm0
	movups	xmm0, XMMWORD PTR [eax+32]
	pop	ecx
	push	8
	movups	XMMWORD PTR $T2[ebp], xmm0
	movups	xmm0, XMMWORD PTR [eax+48]
	movups	XMMWORD PTR $T2[ebp+16], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR $T3[ebp], xmm0
	movups	xmm0, XMMWORD PTR [eax+16]

; 90   : 	}

	mov	eax, edx
	movups	XMMWORD PTR $T3[ebp+16], xmm0
	rep movsd
	pop	ecx
	lea	esi, DWORD PTR $T2[ebp]
	lea	edi, DWORD PTR $T1[ebp+32]
	rep movsd
	push	16					; 00000010H
	pop	ecx
	lea	esi, DWORD PTR $T1[ebp]
	mov	edi, edx
	rep movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tdualquat@N$00@glm@@QAE@ABU?$tmat2x4@N$00@1@@Z ENDP ; glm::tdualquat<double,1>::tdualquat<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@N$00@glm@@QAE@ABU?$tquat@N$00@1@0@Z
_TEXT	SEGMENT
_r$ = 8							; size = 4
_d$ = 12						; size = 4
??0?$tdualquat@N$00@glm@@QAE@ABU?$tquat@N$00@1@0@Z PROC	; glm::tdualquat<double,1>::tdualquat<double,1>, COMDAT
; _this$ = ecx

; 75   : 	{}

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR _r$[ebp]
	mov	eax, ecx
	push	edi
	push	8
	pop	ecx
	mov	edi, eax
	rep movsd
	mov	esi, DWORD PTR _d$[ebp]
	lea	edi, DWORD PTR [eax+32]
	push	8
	pop	ecx
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	8
??0?$tdualquat@N$00@glm@@QAE@ABU?$tquat@N$00@1@0@Z ENDP	; glm::tdualquat<double,1>::tdualquat<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@N$00@glm@@QAE@ABU?$tquat@N$00@1@ABU?$tvec3@N$00@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 8
$T2 = -8						; size = 8
_q$ = 8							; size = 4
_p$ = 12						; size = 4
??0?$tdualquat@N$00@glm@@QAE@ABU?$tquat@N$00@1@ABU?$tvec3@N$00@1@@Z PROC ; glm::tdualquat<double,1>::tdualquat<double,1>, COMDAT
; _this$ = ecx

; 70   : 	{}

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	edx, DWORD PTR _q$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	movsd	xmm3, QWORD PTR __real@3fe0000000000000
	push	8
	pop	ecx
	mov	edi, ebx
	mov	esi, edx
	rep movsd
	movsd	xmm5, QWORD PTR [eax+8]
	movsd	xmm0, QWORD PTR [edx]
	movsd	xmm7, QWORD PTR [eax]
	mulsd	xmm7, QWORD PTR [edx+8]
	pop	edi
	movsd	xmm6, QWORD PTR [eax+16]
	movsd	xmm4, QWORD PTR [edx+24]
	movsd	xmm2, QWORD PTR [edx+16]
	movapd	xmm1, xmm4
	movsd	QWORD PTR $T2[ebp], xmm0
	mulsd	xmm0, xmm5
	pop	esi
	mulsd	xmm1, xmm5
	subsd	xmm7, xmm0
	movaps	xmm0, xmm6
	mulsd	xmm0, xmm4
	mulsd	xmm4, QWORD PTR [eax]
	addsd	xmm7, xmm0
	movaps	xmm0, xmm2
	mulsd	xmm0, QWORD PTR [eax]
	mulsd	xmm7, xmm3
	subsd	xmm1, xmm0
	movaps	xmm0, xmm6
	mulsd	xmm0, QWORD PTR $T2[ebp]
	movsd	QWORD PTR $T1[ebp], xmm7
	addsd	xmm1, xmm0
	movsd	xmm0, QWORD PTR $T2[ebp]
	mulsd	xmm0, QWORD PTR [eax]
	mov	eax, ebx
	mulsd	xmm1, xmm3
	movsd	QWORD PTR $T2[ebp], xmm0
	movaps	xmm0, xmm5
	mulsd	xmm0, QWORD PTR [edx+8]
	movsd	xmm7, QWORD PTR $T2[ebp]
	addsd	xmm7, xmm0
	movaps	xmm0, xmm2
	mulsd	xmm2, xmm5
	mulsd	xmm0, xmm6
	mulsd	xmm6, QWORD PTR [edx+8]
	addsd	xmm2, xmm4
	movsd	QWORD PTR [ebx+40], xmm1
	addsd	xmm7, xmm0
	subsd	xmm2, xmm6
	movsd	xmm0, xmm7
	movsd	xmm7, QWORD PTR $T1[ebp]
	mulsd	xmm0, QWORD PTR __real@bfe0000000000000
	movsd	QWORD PTR [ebx+48], xmm7
	mulsd	xmm2, xmm3
	movsd	QWORD PTR [ebx+56], xmm0
	movsd	QWORD PTR [ebx+32], xmm2
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$tdualquat@N$00@glm@@QAE@ABU?$tquat@N$00@1@ABU?$tvec3@N$00@1@@Z ENDP ; glm::tdualquat<double,1>::tdualquat<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@N$00@glm@@QAE@ABU?$tquat@N$00@1@@Z
_TEXT	SEGMENT
_r$ = 8							; size = 4
??0?$tdualquat@N$00@glm@@QAE@ABU?$tquat@N$00@1@@Z PROC	; glm::tdualquat<double,1>::tdualquat<double,1>, COMDAT
; _this$ = ecx

; 61   : 	{}

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR _r$[ebp]
	mov	eax, ecx
	push	edi
	push	8
	pop	ecx
	mov	edi, eax
	xorps	xmm0, xmm0
	rep movsd
	pop	edi
	movups	XMMWORD PTR [eax+32], xmm0
	pop	esi
	movups	XMMWORD PTR [eax+48], xmm0
	pop	ebp
	ret	4
??0?$tdualquat@N$00@glm@@QAE@ABU?$tquat@N$00@1@@Z ENDP	; glm::tdualquat<double,1>::tdualquat<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@N$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tdualquat@N$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tdualquat<double,1>::tdualquat<double,1>, COMDAT
; _this$ = ecx

; 56   : 	{}

	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	xorps	xmm1, xmm1
	movups	XMMWORD PTR [ecx], xmm1
	mov	eax, ecx
	movsd	QWORD PTR [ecx+16], xmm1
	movsd	QWORD PTR [ecx+24], xmm0
	movups	XMMWORD PTR [ecx+32], xmm1
	movsd	QWORD PTR [ecx+48], xmm1
	movsd	QWORD PTR [ecx+56], xmm0
	ret	4
??0?$tdualquat@N$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tdualquat<double,1>::tdualquat<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tdualquat@N$00@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tdualquat@N$00@glm@@QAE@ABU01@@Z PROC		; glm::tdualquat<double,1>::tdualquat<double,1>, COMDAT
; _this$ = ecx

; 251  : template struct tdualquat<float64, mediump>;

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ___that$[ebp]
	mov	edx, ecx
	push	esi
	push	edi
	push	8
	pop	ecx
	mov	esi, eax
	mov	edi, edx
	rep movsd
	push	8
	pop	ecx
	lea	esi, DWORD PTR [eax+32]
	mov	eax, edx
	lea	edi, DWORD PTR [edx+32]
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tdualquat@N$00@glm@@QAE@ABU01@@Z ENDP		; glm::tdualquat<double,1>::tdualquat<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@N$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tdualquat@N$00@glm@@QAE@XZ PROC			; glm::tdualquat<double,1>::tdualquat<double,1>, COMDAT
; _this$ = ecx

; 34   : 		{}

	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	xorps	xmm1, xmm1
	movups	XMMWORD PTR [ecx], xmm1
	mov	eax, ecx
	movsd	QWORD PTR [ecx+16], xmm1
	movsd	QWORD PTR [ecx+24], xmm0
	movups	XMMWORD PTR [ecx+32], xmm1
	movups	XMMWORD PTR [ecx+48], xmm1
	ret	0
??0?$tdualquat@N$00@glm@@QAE@XZ ENDP			; glm::tdualquat<double,1>::tdualquat<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??A?$tdualquat@N$00@glm@@QBEABU?$tquat@N$00@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tdualquat@N$00@glm@@QBEABU?$tquat@N$00@1@H@Z PROC	; glm::tdualquat<double,1>::operator[], COMDAT
; _this$ = ecx

; 20   : 	{

	push	ebp
	mov	ebp, esp

; 21   : 		assert(i >= 0 && i < this->length());
; 22   : 		return (&real)[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	add	eax, ecx

; 23   : 	}

	pop	ebp
	ret	4
??A?$tdualquat@N$00@glm@@QBEABU?$tquat@N$00@1@H@Z ENDP	; glm::tdualquat<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??A?$tdualquat@N$00@glm@@QAEAAU?$tquat@N$00@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tdualquat@N$00@glm@@QAEAAU?$tquat@N$00@1@H@Z PROC	; glm::tdualquat<double,1>::operator[], COMDAT
; _this$ = ecx

; 13   : 	{

	push	ebp
	mov	ebp, esp

; 14   : 		assert(i >= 0 && i < this->length());
; 15   : 		return (&real)[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	add	eax, ecx

; 16   : 	}

	pop	ebp
	ret	4
??A?$tdualquat@N$00@glm@@QAEAAU?$tquat@N$00@1@H@Z ENDP	; glm::tdualquat<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtx\dual_quaternion.hpp
;	COMDAT ?length@?$tdualquat@N$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tdualquat@N$00@glm@@SAHXZ PROC		; glm::tdualquat<double,1>::length, COMDAT

; 49   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	push	2
	pop	eax
	ret	0
?length@?$tdualquat@N$00@glm@@SAHXZ ENDP		; glm::tdualquat<double,1>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tdualquat@M$00@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tdualquat@M$00@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tdualquat<float,1>::operator=, COMDAT
; _this$ = ecx

; 250  : template struct tdualquat<float32, mediump>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	8
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tdualquat@M$00@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tdualquat<float,1>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@M$00@glm@@QAE@ABU?$tmat3x4@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tdualquat@M$00@glm@@QAE@ABU?$tmat3x4@M$00@1@@Z PROC ; glm::tdualquat<float,1>::tdualquat<float,1>, COMDAT
; _this$ = ecx

; 94   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H

; 95   : 		*this = dualquat_cast(m);

	lea	eax, DWORD PTR $T1[ebp]
	push	ebx
	mov	ebx, ecx
	push	esi
	push	edi
	push	DWORD PTR _m$[ebp]
	and	DWORD PTR [ebx], 0
	and	DWORD PTR [ebx+4], 0
	and	DWORD PTR [ebx+8], 0
	mov	DWORD PTR [ebx+12], 1065353216		; 3f800000H
	and	DWORD PTR [ebx+16], 0
	and	DWORD PTR [ebx+20], 0
	and	DWORD PTR [ebx+24], 0
	push	eax
	mov	DWORD PTR [ebx+28], 1065353216		; 3f800000H
	call	??$dualquat_cast@M$00@glm@@YA?AU?$tdualquat@M$00@0@ABU?$tmat3x4@M$00@0@@Z ; glm::dualquat_cast<float,1>
	pop	ecx
	pop	ecx
	push	8
	pop	ecx
	mov	esi, eax
	mov	edi, ebx
	rep movsd
	pop	edi
	pop	esi

; 96   : 	}

	mov	eax, ebx
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tdualquat@M$00@glm@@QAE@ABU?$tmat3x4@M$00@1@@Z ENDP ; glm::tdualquat<float,1>::tdualquat<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@M$00@glm@@QAE@ABU?$tmat2x4@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tdualquat@M$00@glm@@QAE@ABU?$tmat2x4@M$00@1@@Z PROC ; glm::tdualquat<float,1>::tdualquat<float,1>, COMDAT
; _this$ = ecx

; 88   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H

; 89   : 		*this = dualquat_cast(m);

	lea	eax, DWORD PTR $T1[ebp]
	push	ebx
	mov	ebx, ecx
	push	esi
	push	edi
	push	DWORD PTR _m$[ebp]
	and	DWORD PTR [ebx], 0
	and	DWORD PTR [ebx+4], 0
	and	DWORD PTR [ebx+8], 0
	mov	DWORD PTR [ebx+12], 1065353216		; 3f800000H
	and	DWORD PTR [ebx+16], 0
	and	DWORD PTR [ebx+20], 0
	and	DWORD PTR [ebx+24], 0
	push	eax
	mov	DWORD PTR [ebx+28], 1065353216		; 3f800000H
	call	??$dualquat_cast@M$00@glm@@YA?AU?$tdualquat@M$00@0@ABU?$tmat2x4@M$00@0@@Z ; glm::dualquat_cast<float,1>
	pop	ecx
	pop	ecx
	push	8
	pop	ecx
	mov	esi, eax
	mov	edi, ebx
	rep movsd
	pop	edi
	pop	esi

; 90   : 	}

	mov	eax, ebx
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tdualquat@M$00@glm@@QAE@ABU?$tmat2x4@M$00@1@@Z ENDP ; glm::tdualquat<float,1>::tdualquat<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@M$00@glm@@QAE@ABU?$tquat@M$00@1@0@Z
_TEXT	SEGMENT
_r$ = 8							; size = 4
_d$ = 12						; size = 4
??0?$tdualquat@M$00@glm@@QAE@ABU?$tquat@M$00@1@0@Z PROC	; glm::tdualquat<float,1>::tdualquat<float,1>, COMDAT
; _this$ = ecx

; 75   : 	{}

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR _r$[ebp]
	mov	eax, ecx
	push	edi
	mov	edi, ecx
	movsd
	movsd
	movsd
	movsd
	mov	esi, DWORD PTR _d$[ebp]
	lea	edi, DWORD PTR [ecx+16]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	8
??0?$tdualquat@M$00@glm@@QAE@ABU?$tquat@M$00@1@0@Z ENDP	; glm::tdualquat<float,1>::tdualquat<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@M$00@glm@@QAE@ABU?$tquat@M$00@1@ABU?$tvec3@M$00@1@@Z
_TEXT	SEGMENT
$T1 = 8							; size = 4
_q$ = 8							; size = 4
$T2 = 12						; size = 4
_p$ = 12						; size = 4
??0?$tdualquat@M$00@glm@@QAE@ABU?$tquat@M$00@1@ABU?$tvec3@M$00@1@@Z PROC ; glm::tdualquat<float,1>::tdualquat<float,1>, COMDAT
; _this$ = ecx

; 70   : 	{}

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR _q$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	push	esi
	push	edi
	mov	esi, edx
	movss	xmm3, DWORD PTR __real@3f000000
	mov	edi, ecx
	movsd
	movsd
	movsd
	movsd
	movss	xmm5, DWORD PTR [eax+4]
	movss	xmm0, DWORD PTR [edx]
	movss	xmm7, DWORD PTR [eax]
	mulss	xmm7, DWORD PTR [edx+4]
	pop	edi
	movss	xmm6, DWORD PTR [eax+8]
	movss	xmm4, DWORD PTR [edx+12]
	movss	xmm2, DWORD PTR [edx+8]
	movaps	xmm1, xmm4
	movss	DWORD PTR $T1[ebp], xmm0
	mulss	xmm0, xmm5
	pop	esi
	mulss	xmm1, xmm5
	subss	xmm7, xmm0
	movaps	xmm0, xmm6
	mulss	xmm0, xmm4
	mulss	xmm4, DWORD PTR [eax]
	addss	xmm7, xmm0
	movaps	xmm0, xmm2
	mulss	xmm0, DWORD PTR [eax]
	subss	xmm1, xmm0
	mulss	xmm7, xmm3
	movaps	xmm0, xmm6
	mulss	xmm0, DWORD PTR $T1[ebp]
	movss	DWORD PTR $T2[ebp], xmm7
	addss	xmm1, xmm0
	movss	xmm0, DWORD PTR $T1[ebp]
	mulss	xmm0, DWORD PTR [eax]
	mov	eax, ecx
	movss	DWORD PTR $T1[ebp], xmm0
	movaps	xmm0, xmm5
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm7, DWORD PTR $T1[ebp]
	mulss	xmm1, xmm3
	addss	xmm7, xmm0
	movaps	xmm0, xmm2
	mulss	xmm2, xmm5
	mulss	xmm0, xmm6
	mulss	xmm6, DWORD PTR [edx+4]
	addss	xmm2, xmm4
	addss	xmm7, xmm0
	movss	DWORD PTR [ecx+20], xmm1
	subss	xmm2, xmm6
	movss	xmm0, xmm7
	movss	xmm7, DWORD PTR $T2[ebp]
	mulss	xmm0, DWORD PTR __real@bf000000
	mulss	xmm2, xmm3
	movss	DWORD PTR [ecx+24], xmm7
	movss	DWORD PTR [ecx+28], xmm0
	movss	DWORD PTR [ecx+16], xmm2
	pop	ebp
	ret	8
??0?$tdualquat@M$00@glm@@QAE@ABU?$tquat@M$00@1@ABU?$tvec3@M$00@1@@Z ENDP ; glm::tdualquat<float,1>::tdualquat<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@M$00@glm@@QAE@ABU?$tquat@M$00@1@@Z
_TEXT	SEGMENT
_r$ = 8							; size = 4
??0?$tdualquat@M$00@glm@@QAE@ABU?$tquat@M$00@1@@Z PROC	; glm::tdualquat<float,1>::tdualquat<float,1>, COMDAT
; _this$ = ecx

; 61   : 	{}

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR _r$[ebp]
	mov	eax, ecx
	push	edi
	mov	edi, ecx
	movsd
	movsd
	movsd
	movsd
	and	DWORD PTR [ecx+16], 0
	and	DWORD PTR [ecx+20], 0
	and	DWORD PTR [ecx+24], 0
	and	DWORD PTR [ecx+28], 0
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tdualquat@M$00@glm@@QAE@ABU?$tquat@M$00@1@@Z ENDP	; glm::tdualquat<float,1>::tdualquat<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@M$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tdualquat@M$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tdualquat<float,1>::tdualquat<float,1>, COMDAT
; _this$ = ecx

; 56   : 	{}

	and	DWORD PTR [ecx], 0
	mov	eax, ecx
	and	DWORD PTR [ecx+4], 0
	and	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 1065353216		; 3f800000H
	and	DWORD PTR [ecx+16], 0
	and	DWORD PTR [ecx+20], 0
	and	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 1065353216		; 3f800000H
	ret	4
??0?$tdualquat@M$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tdualquat<float,1>::tdualquat<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tdualquat@M$00@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tdualquat@M$00@glm@@QAE@ABU01@@Z PROC		; glm::tdualquat<float,1>::tdualquat<float,1>, COMDAT
; _this$ = ecx

; 250  : template struct tdualquat<float32, mediump>;

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ___that$[ebp]
	push	esi
	push	edi
	mov	esi, eax
	mov	edi, ecx
	movsd
	movsd
	movsd
	movsd
	lea	esi, DWORD PTR [eax+16]
	mov	eax, ecx
	lea	edi, DWORD PTR [ecx+16]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tdualquat@M$00@glm@@QAE@ABU01@@Z ENDP		; glm::tdualquat<float,1>::tdualquat<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@M$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tdualquat@M$00@glm@@QAE@XZ PROC			; glm::tdualquat<float,1>::tdualquat<float,1>, COMDAT
; _this$ = ecx

; 34   : 		{}

	and	DWORD PTR [ecx], 0
	mov	eax, ecx
	and	DWORD PTR [ecx+4], 0
	and	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 1065353216		; 3f800000H
	and	DWORD PTR [ecx+16], 0
	and	DWORD PTR [ecx+20], 0
	and	DWORD PTR [ecx+24], 0
	and	DWORD PTR [ecx+28], 0
	ret	0
??0?$tdualquat@M$00@glm@@QAE@XZ ENDP			; glm::tdualquat<float,1>::tdualquat<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??A?$tdualquat@M$00@glm@@QBEABU?$tquat@M$00@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tdualquat@M$00@glm@@QBEABU?$tquat@M$00@1@H@Z PROC	; glm::tdualquat<float,1>::operator[], COMDAT
; _this$ = ecx

; 20   : 	{

	push	ebp
	mov	ebp, esp

; 21   : 		assert(i >= 0 && i < this->length());
; 22   : 		return (&real)[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, ecx

; 23   : 	}

	pop	ebp
	ret	4
??A?$tdualquat@M$00@glm@@QBEABU?$tquat@M$00@1@H@Z ENDP	; glm::tdualquat<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??A?$tdualquat@M$00@glm@@QAEAAU?$tquat@M$00@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tdualquat@M$00@glm@@QAEAAU?$tquat@M$00@1@H@Z PROC	; glm::tdualquat<float,1>::operator[], COMDAT
; _this$ = ecx

; 13   : 	{

	push	ebp
	mov	ebp, esp

; 14   : 		assert(i >= 0 && i < this->length());
; 15   : 		return (&real)[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, ecx

; 16   : 	}

	pop	ebp
	ret	4
??A?$tdualquat@M$00@glm@@QAEAAU?$tquat@M$00@1@H@Z ENDP	; glm::tdualquat<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtx\dual_quaternion.hpp
;	COMDAT ?length@?$tdualquat@M$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tdualquat@M$00@glm@@SAHXZ PROC		; glm::tdualquat<float,1>::length, COMDAT

; 49   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	push	2
	pop	eax
	ret	0
?length@?$tdualquat@M$00@glm@@SAHXZ ENDP		; glm::tdualquat<float,1>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tdualquat@N$01@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tdualquat@N$01@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tdualquat<double,2>::operator=, COMDAT
; _this$ = ecx

; 248  : template struct tdualquat<float64, lowp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	16					; 00000010H
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tdualquat@N$01@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tdualquat<double,2>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@N$01@glm@@QAE@ABU?$tmat3x4@N$01@1@@Z
_TEXT	SEGMENT
$T1 = -64						; size = 64
_m$ = 8							; size = 4
??0?$tdualquat@N$01@glm@@QAE@ABU?$tmat3x4@N$01@1@@Z PROC ; glm::tdualquat<double,2>::tdualquat<double,2>, COMDAT
; _this$ = ecx

; 94   : 	{

	push	ebp
	mov	ebp, esp
	movsd	xmm0, QWORD PTR __real@3ff0000000000000

; 95   : 		*this = dualquat_cast(m);

	lea	eax, DWORD PTR $T1[ebp]
	sub	esp, 64					; 00000040H
	xorps	xmm1, xmm1
	push	ebx
	mov	ebx, ecx
	push	esi
	push	edi
	push	DWORD PTR _m$[ebp]
	movups	XMMWORD PTR [ebx], xmm1
	push	eax
	movsd	QWORD PTR [ebx+16], xmm1
	movsd	QWORD PTR [ebx+24], xmm0
	movups	XMMWORD PTR [ebx+32], xmm1
	movsd	QWORD PTR [ebx+48], xmm1
	movsd	QWORD PTR [ebx+56], xmm0
	call	??$dualquat_cast@N$01@glm@@YA?AU?$tdualquat@N$01@0@ABU?$tmat3x4@N$01@0@@Z ; glm::dualquat_cast<double,2>
	pop	ecx
	pop	ecx
	push	16					; 00000010H
	pop	ecx
	mov	esi, eax
	mov	edi, ebx
	rep movsd
	pop	edi
	pop	esi

; 96   : 	}

	mov	eax, ebx
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tdualquat@N$01@glm@@QAE@ABU?$tmat3x4@N$01@1@@Z ENDP ; glm::tdualquat<double,2>::tdualquat<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@N$01@glm@@QAE@ABU?$tmat2x4@N$01@1@@Z
_TEXT	SEGMENT
$T1 = -128						; size = 64
$T2 = -64						; size = 32
$T3 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tdualquat@N$01@glm@@QAE@ABU?$tmat2x4@N$01@1@@Z PROC ; glm::tdualquat<double,2>::tdualquat<double,2>, COMDAT
; _this$ = ecx

; 88   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 128				; 00000080H

; 89   : 		*this = dualquat_cast(m);

	mov	eax, DWORD PTR _m$[ebp]
	mov	edx, ecx
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	xorps	xmm1, xmm1
	push	esi
	push	edi
	movups	XMMWORD PTR [edx], xmm1
	lea	esi, DWORD PTR $T3[ebp]
	movsd	QWORD PTR [edx+16], xmm1
	lea	edi, DWORD PTR $T1[ebp]
	movsd	QWORD PTR [edx+24], xmm0
	movups	XMMWORD PTR [edx+32], xmm1
	push	8
	movsd	QWORD PTR [edx+48], xmm1
	movsd	QWORD PTR [edx+56], xmm0
	movups	xmm0, XMMWORD PTR [eax+32]
	pop	ecx
	push	8
	movups	XMMWORD PTR $T2[ebp], xmm0
	movups	xmm0, XMMWORD PTR [eax+48]
	movups	XMMWORD PTR $T2[ebp+16], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR $T3[ebp], xmm0
	movups	xmm0, XMMWORD PTR [eax+16]

; 90   : 	}

	mov	eax, edx
	movups	XMMWORD PTR $T3[ebp+16], xmm0
	rep movsd
	pop	ecx
	lea	esi, DWORD PTR $T2[ebp]
	lea	edi, DWORD PTR $T1[ebp+32]
	rep movsd
	push	16					; 00000010H
	pop	ecx
	lea	esi, DWORD PTR $T1[ebp]
	mov	edi, edx
	rep movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tdualquat@N$01@glm@@QAE@ABU?$tmat2x4@N$01@1@@Z ENDP ; glm::tdualquat<double,2>::tdualquat<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@N$01@glm@@QAE@ABU?$tquat@N$01@1@0@Z
_TEXT	SEGMENT
_r$ = 8							; size = 4
_d$ = 12						; size = 4
??0?$tdualquat@N$01@glm@@QAE@ABU?$tquat@N$01@1@0@Z PROC	; glm::tdualquat<double,2>::tdualquat<double,2>, COMDAT
; _this$ = ecx

; 75   : 	{}

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR _r$[ebp]
	mov	eax, ecx
	push	edi
	push	8
	pop	ecx
	mov	edi, eax
	rep movsd
	mov	esi, DWORD PTR _d$[ebp]
	lea	edi, DWORD PTR [eax+32]
	push	8
	pop	ecx
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	8
??0?$tdualquat@N$01@glm@@QAE@ABU?$tquat@N$01@1@0@Z ENDP	; glm::tdualquat<double,2>::tdualquat<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@N$01@glm@@QAE@ABU?$tquat@N$01@1@ABU?$tvec3@N$01@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 8
$T2 = -8						; size = 8
_q$ = 8							; size = 4
_p$ = 12						; size = 4
??0?$tdualquat@N$01@glm@@QAE@ABU?$tquat@N$01@1@ABU?$tvec3@N$01@1@@Z PROC ; glm::tdualquat<double,2>::tdualquat<double,2>, COMDAT
; _this$ = ecx

; 70   : 	{}

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	edx, DWORD PTR _q$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	movsd	xmm3, QWORD PTR __real@3fe0000000000000
	push	8
	pop	ecx
	mov	edi, ebx
	mov	esi, edx
	rep movsd
	movsd	xmm5, QWORD PTR [eax+8]
	movsd	xmm0, QWORD PTR [edx]
	movsd	xmm7, QWORD PTR [eax]
	mulsd	xmm7, QWORD PTR [edx+8]
	pop	edi
	movsd	xmm6, QWORD PTR [eax+16]
	movsd	xmm4, QWORD PTR [edx+24]
	movsd	xmm2, QWORD PTR [edx+16]
	movapd	xmm1, xmm4
	movsd	QWORD PTR $T2[ebp], xmm0
	mulsd	xmm0, xmm5
	pop	esi
	mulsd	xmm1, xmm5
	subsd	xmm7, xmm0
	movaps	xmm0, xmm6
	mulsd	xmm0, xmm4
	mulsd	xmm4, QWORD PTR [eax]
	addsd	xmm7, xmm0
	movaps	xmm0, xmm2
	mulsd	xmm0, QWORD PTR [eax]
	mulsd	xmm7, xmm3
	subsd	xmm1, xmm0
	movaps	xmm0, xmm6
	mulsd	xmm0, QWORD PTR $T2[ebp]
	movsd	QWORD PTR $T1[ebp], xmm7
	addsd	xmm1, xmm0
	movsd	xmm0, QWORD PTR $T2[ebp]
	mulsd	xmm0, QWORD PTR [eax]
	mov	eax, ebx
	mulsd	xmm1, xmm3
	movsd	QWORD PTR $T2[ebp], xmm0
	movaps	xmm0, xmm5
	mulsd	xmm0, QWORD PTR [edx+8]
	movsd	xmm7, QWORD PTR $T2[ebp]
	addsd	xmm7, xmm0
	movaps	xmm0, xmm2
	mulsd	xmm2, xmm5
	mulsd	xmm0, xmm6
	mulsd	xmm6, QWORD PTR [edx+8]
	addsd	xmm2, xmm4
	movsd	QWORD PTR [ebx+40], xmm1
	addsd	xmm7, xmm0
	subsd	xmm2, xmm6
	movsd	xmm0, xmm7
	movsd	xmm7, QWORD PTR $T1[ebp]
	mulsd	xmm0, QWORD PTR __real@bfe0000000000000
	movsd	QWORD PTR [ebx+48], xmm7
	mulsd	xmm2, xmm3
	movsd	QWORD PTR [ebx+56], xmm0
	movsd	QWORD PTR [ebx+32], xmm2
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$tdualquat@N$01@glm@@QAE@ABU?$tquat@N$01@1@ABU?$tvec3@N$01@1@@Z ENDP ; glm::tdualquat<double,2>::tdualquat<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@N$01@glm@@QAE@ABU?$tquat@N$01@1@@Z
_TEXT	SEGMENT
_r$ = 8							; size = 4
??0?$tdualquat@N$01@glm@@QAE@ABU?$tquat@N$01@1@@Z PROC	; glm::tdualquat<double,2>::tdualquat<double,2>, COMDAT
; _this$ = ecx

; 61   : 	{}

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR _r$[ebp]
	mov	eax, ecx
	push	edi
	push	8
	pop	ecx
	mov	edi, eax
	xorps	xmm0, xmm0
	rep movsd
	pop	edi
	movups	XMMWORD PTR [eax+32], xmm0
	pop	esi
	movups	XMMWORD PTR [eax+48], xmm0
	pop	ebp
	ret	4
??0?$tdualquat@N$01@glm@@QAE@ABU?$tquat@N$01@1@@Z ENDP	; glm::tdualquat<double,2>::tdualquat<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@N$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tdualquat@N$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tdualquat<double,2>::tdualquat<double,2>, COMDAT
; _this$ = ecx

; 56   : 	{}

	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	xorps	xmm1, xmm1
	movups	XMMWORD PTR [ecx], xmm1
	mov	eax, ecx
	movsd	QWORD PTR [ecx+16], xmm1
	movsd	QWORD PTR [ecx+24], xmm0
	movups	XMMWORD PTR [ecx+32], xmm1
	movsd	QWORD PTR [ecx+48], xmm1
	movsd	QWORD PTR [ecx+56], xmm0
	ret	4
??0?$tdualquat@N$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tdualquat<double,2>::tdualquat<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tdualquat@N$01@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tdualquat@N$01@glm@@QAE@ABU01@@Z PROC		; glm::tdualquat<double,2>::tdualquat<double,2>, COMDAT
; _this$ = ecx

; 248  : template struct tdualquat<float64, lowp>;

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ___that$[ebp]
	mov	edx, ecx
	push	esi
	push	edi
	push	8
	pop	ecx
	mov	esi, eax
	mov	edi, edx
	rep movsd
	push	8
	pop	ecx
	lea	esi, DWORD PTR [eax+32]
	mov	eax, edx
	lea	edi, DWORD PTR [edx+32]
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tdualquat@N$01@glm@@QAE@ABU01@@Z ENDP		; glm::tdualquat<double,2>::tdualquat<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@N$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tdualquat@N$01@glm@@QAE@XZ PROC			; glm::tdualquat<double,2>::tdualquat<double,2>, COMDAT
; _this$ = ecx

; 34   : 		{}

	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	xorps	xmm1, xmm1
	movups	XMMWORD PTR [ecx], xmm1
	mov	eax, ecx
	movsd	QWORD PTR [ecx+16], xmm1
	movsd	QWORD PTR [ecx+24], xmm0
	movups	XMMWORD PTR [ecx+32], xmm1
	movups	XMMWORD PTR [ecx+48], xmm1
	ret	0
??0?$tdualquat@N$01@glm@@QAE@XZ ENDP			; glm::tdualquat<double,2>::tdualquat<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??A?$tdualquat@N$01@glm@@QBEABU?$tquat@N$01@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tdualquat@N$01@glm@@QBEABU?$tquat@N$01@1@H@Z PROC	; glm::tdualquat<double,2>::operator[], COMDAT
; _this$ = ecx

; 20   : 	{

	push	ebp
	mov	ebp, esp

; 21   : 		assert(i >= 0 && i < this->length());
; 22   : 		return (&real)[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	add	eax, ecx

; 23   : 	}

	pop	ebp
	ret	4
??A?$tdualquat@N$01@glm@@QBEABU?$tquat@N$01@1@H@Z ENDP	; glm::tdualquat<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??A?$tdualquat@N$01@glm@@QAEAAU?$tquat@N$01@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tdualquat@N$01@glm@@QAEAAU?$tquat@N$01@1@H@Z PROC	; glm::tdualquat<double,2>::operator[], COMDAT
; _this$ = ecx

; 13   : 	{

	push	ebp
	mov	ebp, esp

; 14   : 		assert(i >= 0 && i < this->length());
; 15   : 		return (&real)[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	add	eax, ecx

; 16   : 	}

	pop	ebp
	ret	4
??A?$tdualquat@N$01@glm@@QAEAAU?$tquat@N$01@1@H@Z ENDP	; glm::tdualquat<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtx\dual_quaternion.hpp
;	COMDAT ?length@?$tdualquat@N$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tdualquat@N$01@glm@@SAHXZ PROC		; glm::tdualquat<double,2>::length, COMDAT

; 49   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	push	2
	pop	eax
	ret	0
?length@?$tdualquat@N$01@glm@@SAHXZ ENDP		; glm::tdualquat<double,2>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tdualquat@M$01@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tdualquat@M$01@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tdualquat<float,2>::operator=, COMDAT
; _this$ = ecx

; 247  : template struct tdualquat<float32, lowp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	8
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tdualquat@M$01@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tdualquat<float,2>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@M$01@glm@@QAE@ABU?$tmat3x4@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tdualquat@M$01@glm@@QAE@ABU?$tmat3x4@M$01@1@@Z PROC ; glm::tdualquat<float,2>::tdualquat<float,2>, COMDAT
; _this$ = ecx

; 94   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H

; 95   : 		*this = dualquat_cast(m);

	lea	eax, DWORD PTR $T1[ebp]
	push	ebx
	mov	ebx, ecx
	push	esi
	push	edi
	push	DWORD PTR _m$[ebp]
	and	DWORD PTR [ebx], 0
	and	DWORD PTR [ebx+4], 0
	and	DWORD PTR [ebx+8], 0
	mov	DWORD PTR [ebx+12], 1065353216		; 3f800000H
	and	DWORD PTR [ebx+16], 0
	and	DWORD PTR [ebx+20], 0
	and	DWORD PTR [ebx+24], 0
	push	eax
	mov	DWORD PTR [ebx+28], 1065353216		; 3f800000H
	call	??$dualquat_cast@M$01@glm@@YA?AU?$tdualquat@M$01@0@ABU?$tmat3x4@M$01@0@@Z ; glm::dualquat_cast<float,2>
	pop	ecx
	pop	ecx
	push	8
	pop	ecx
	mov	esi, eax
	mov	edi, ebx
	rep movsd
	pop	edi
	pop	esi

; 96   : 	}

	mov	eax, ebx
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tdualquat@M$01@glm@@QAE@ABU?$tmat3x4@M$01@1@@Z ENDP ; glm::tdualquat<float,2>::tdualquat<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@M$01@glm@@QAE@ABU?$tmat2x4@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tdualquat@M$01@glm@@QAE@ABU?$tmat2x4@M$01@1@@Z PROC ; glm::tdualquat<float,2>::tdualquat<float,2>, COMDAT
; _this$ = ecx

; 88   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H

; 89   : 		*this = dualquat_cast(m);

	lea	eax, DWORD PTR $T1[ebp]
	push	ebx
	mov	ebx, ecx
	push	esi
	push	edi
	push	DWORD PTR _m$[ebp]
	and	DWORD PTR [ebx], 0
	and	DWORD PTR [ebx+4], 0
	and	DWORD PTR [ebx+8], 0
	mov	DWORD PTR [ebx+12], 1065353216		; 3f800000H
	and	DWORD PTR [ebx+16], 0
	and	DWORD PTR [ebx+20], 0
	and	DWORD PTR [ebx+24], 0
	push	eax
	mov	DWORD PTR [ebx+28], 1065353216		; 3f800000H
	call	??$dualquat_cast@M$01@glm@@YA?AU?$tdualquat@M$01@0@ABU?$tmat2x4@M$01@0@@Z ; glm::dualquat_cast<float,2>
	pop	ecx
	pop	ecx
	push	8
	pop	ecx
	mov	esi, eax
	mov	edi, ebx
	rep movsd
	pop	edi
	pop	esi

; 90   : 	}

	mov	eax, ebx
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tdualquat@M$01@glm@@QAE@ABU?$tmat2x4@M$01@1@@Z ENDP ; glm::tdualquat<float,2>::tdualquat<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@M$01@glm@@QAE@ABU?$tquat@M$01@1@0@Z
_TEXT	SEGMENT
_r$ = 8							; size = 4
_d$ = 12						; size = 4
??0?$tdualquat@M$01@glm@@QAE@ABU?$tquat@M$01@1@0@Z PROC	; glm::tdualquat<float,2>::tdualquat<float,2>, COMDAT
; _this$ = ecx

; 75   : 	{}

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR _r$[ebp]
	mov	eax, ecx
	push	edi
	mov	edi, ecx
	movsd
	movsd
	movsd
	movsd
	mov	esi, DWORD PTR _d$[ebp]
	lea	edi, DWORD PTR [ecx+16]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	8
??0?$tdualquat@M$01@glm@@QAE@ABU?$tquat@M$01@1@0@Z ENDP	; glm::tdualquat<float,2>::tdualquat<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@M$01@glm@@QAE@ABU?$tquat@M$01@1@ABU?$tvec3@M$01@1@@Z
_TEXT	SEGMENT
$T1 = 8							; size = 4
_q$ = 8							; size = 4
$T2 = 12						; size = 4
_p$ = 12						; size = 4
??0?$tdualquat@M$01@glm@@QAE@ABU?$tquat@M$01@1@ABU?$tvec3@M$01@1@@Z PROC ; glm::tdualquat<float,2>::tdualquat<float,2>, COMDAT
; _this$ = ecx

; 70   : 	{}

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR _q$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	push	esi
	push	edi
	mov	esi, edx
	movss	xmm3, DWORD PTR __real@3f000000
	mov	edi, ecx
	movsd
	movsd
	movsd
	movsd
	movss	xmm5, DWORD PTR [eax+4]
	movss	xmm0, DWORD PTR [edx]
	movss	xmm7, DWORD PTR [eax]
	mulss	xmm7, DWORD PTR [edx+4]
	pop	edi
	movss	xmm6, DWORD PTR [eax+8]
	movss	xmm4, DWORD PTR [edx+12]
	movss	xmm2, DWORD PTR [edx+8]
	movaps	xmm1, xmm4
	movss	DWORD PTR $T1[ebp], xmm0
	mulss	xmm0, xmm5
	pop	esi
	mulss	xmm1, xmm5
	subss	xmm7, xmm0
	movaps	xmm0, xmm6
	mulss	xmm0, xmm4
	mulss	xmm4, DWORD PTR [eax]
	addss	xmm7, xmm0
	movaps	xmm0, xmm2
	mulss	xmm0, DWORD PTR [eax]
	subss	xmm1, xmm0
	mulss	xmm7, xmm3
	movaps	xmm0, xmm6
	mulss	xmm0, DWORD PTR $T1[ebp]
	movss	DWORD PTR $T2[ebp], xmm7
	addss	xmm1, xmm0
	movss	xmm0, DWORD PTR $T1[ebp]
	mulss	xmm0, DWORD PTR [eax]
	mov	eax, ecx
	movss	DWORD PTR $T1[ebp], xmm0
	movaps	xmm0, xmm5
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm7, DWORD PTR $T1[ebp]
	mulss	xmm1, xmm3
	addss	xmm7, xmm0
	movaps	xmm0, xmm2
	mulss	xmm2, xmm5
	mulss	xmm0, xmm6
	mulss	xmm6, DWORD PTR [edx+4]
	addss	xmm2, xmm4
	addss	xmm7, xmm0
	movss	DWORD PTR [ecx+20], xmm1
	subss	xmm2, xmm6
	movss	xmm0, xmm7
	movss	xmm7, DWORD PTR $T2[ebp]
	mulss	xmm0, DWORD PTR __real@bf000000
	mulss	xmm2, xmm3
	movss	DWORD PTR [ecx+24], xmm7
	movss	DWORD PTR [ecx+28], xmm0
	movss	DWORD PTR [ecx+16], xmm2
	pop	ebp
	ret	8
??0?$tdualquat@M$01@glm@@QAE@ABU?$tquat@M$01@1@ABU?$tvec3@M$01@1@@Z ENDP ; glm::tdualquat<float,2>::tdualquat<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@M$01@glm@@QAE@ABU?$tquat@M$01@1@@Z
_TEXT	SEGMENT
_r$ = 8							; size = 4
??0?$tdualquat@M$01@glm@@QAE@ABU?$tquat@M$01@1@@Z PROC	; glm::tdualquat<float,2>::tdualquat<float,2>, COMDAT
; _this$ = ecx

; 61   : 	{}

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR _r$[ebp]
	mov	eax, ecx
	push	edi
	mov	edi, ecx
	movsd
	movsd
	movsd
	movsd
	and	DWORD PTR [ecx+16], 0
	and	DWORD PTR [ecx+20], 0
	and	DWORD PTR [ecx+24], 0
	and	DWORD PTR [ecx+28], 0
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tdualquat@M$01@glm@@QAE@ABU?$tquat@M$01@1@@Z ENDP	; glm::tdualquat<float,2>::tdualquat<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@M$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tdualquat@M$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tdualquat<float,2>::tdualquat<float,2>, COMDAT
; _this$ = ecx

; 56   : 	{}

	and	DWORD PTR [ecx], 0
	mov	eax, ecx
	and	DWORD PTR [ecx+4], 0
	and	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 1065353216		; 3f800000H
	and	DWORD PTR [ecx+16], 0
	and	DWORD PTR [ecx+20], 0
	and	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 1065353216		; 3f800000H
	ret	4
??0?$tdualquat@M$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tdualquat<float,2>::tdualquat<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tdualquat@M$01@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tdualquat@M$01@glm@@QAE@ABU01@@Z PROC		; glm::tdualquat<float,2>::tdualquat<float,2>, COMDAT
; _this$ = ecx

; 247  : template struct tdualquat<float32, lowp>;

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ___that$[ebp]
	push	esi
	push	edi
	mov	esi, eax
	mov	edi, ecx
	movsd
	movsd
	movsd
	movsd
	lea	esi, DWORD PTR [eax+16]
	mov	eax, ecx
	lea	edi, DWORD PTR [ecx+16]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tdualquat@M$01@glm@@QAE@ABU01@@Z ENDP		; glm::tdualquat<float,2>::tdualquat<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@M$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tdualquat@M$01@glm@@QAE@XZ PROC			; glm::tdualquat<float,2>::tdualquat<float,2>, COMDAT
; _this$ = ecx

; 34   : 		{}

	and	DWORD PTR [ecx], 0
	mov	eax, ecx
	and	DWORD PTR [ecx+4], 0
	and	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 1065353216		; 3f800000H
	and	DWORD PTR [ecx+16], 0
	and	DWORD PTR [ecx+20], 0
	and	DWORD PTR [ecx+24], 0
	and	DWORD PTR [ecx+28], 0
	ret	0
??0?$tdualquat@M$01@glm@@QAE@XZ ENDP			; glm::tdualquat<float,2>::tdualquat<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??A?$tdualquat@M$01@glm@@QBEABU?$tquat@M$01@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tdualquat@M$01@glm@@QBEABU?$tquat@M$01@1@H@Z PROC	; glm::tdualquat<float,2>::operator[], COMDAT
; _this$ = ecx

; 20   : 	{

	push	ebp
	mov	ebp, esp

; 21   : 		assert(i >= 0 && i < this->length());
; 22   : 		return (&real)[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, ecx

; 23   : 	}

	pop	ebp
	ret	4
??A?$tdualquat@M$01@glm@@QBEABU?$tquat@M$01@1@H@Z ENDP	; glm::tdualquat<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??A?$tdualquat@M$01@glm@@QAEAAU?$tquat@M$01@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tdualquat@M$01@glm@@QAEAAU?$tquat@M$01@1@H@Z PROC	; glm::tdualquat<float,2>::operator[], COMDAT
; _this$ = ecx

; 13   : 	{

	push	ebp
	mov	ebp, esp

; 14   : 		assert(i >= 0 && i < this->length());
; 15   : 		return (&real)[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, ecx

; 16   : 	}

	pop	ebp
	ret	4
??A?$tdualquat@M$01@glm@@QAEAAU?$tquat@M$01@1@H@Z ENDP	; glm::tdualquat<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtx\dual_quaternion.hpp
;	COMDAT ?length@?$tdualquat@M$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tdualquat@M$01@glm@@SAHXZ PROC		; glm::tdualquat<float,2>::length, COMDAT

; 49   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	push	2
	pop	eax
	ret	0
?length@?$tdualquat@M$01@glm@@SAHXZ ENDP		; glm::tdualquat<float,2>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tquat@N$0A@@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tquat@N$0A@@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tquat<double,0>::operator=, COMDAT
; _this$ = ecx

; 244  : template struct tquat<float64, highp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	8
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tquat@N$0A@@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tquat<double,0>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@N$0A@@glm@@QAE@ABU?$tmat4x4@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -108						; size = 32
$T2 = -76						; size = 72
__$ArrayPad$ = -4					; size = 4
_m$ = 8							; size = 4
??0?$tquat@N$0A@@glm@@QAE@ABU?$tmat4x4@N$0A@@1@@Z PROC	; glm::tquat<double,0>::tquat<double,0>, COMDAT
; _this$ = ecx

; 183  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 108				; 0000006cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	eax, DWORD PTR _m$[ebp]
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx

; 184  : 		*this = quat_cast(m);

	lea	ecx, DWORD PTR $T2[ebp]
	push	eax
	call	??0?$tmat3x3@N$0A@@glm@@QAE@ABU?$tmat4x4@N$0A@@1@@Z ; glm::tmat3x3<double,0>::tmat3x3<double,0>
	push	eax
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	??$quat_cast@N$0A@@glm@@YA?AU?$tquat@N$0A@@0@ABU?$tmat3x3@N$0A@@0@@Z ; glm::quat_cast<double,0>
	pop	ecx
	pop	ecx
	push	8
	pop	ecx
	mov	edi, ebx
	lea	esi, DWORD PTR $T1[ebp]
	rep movsd

; 185  : 	}

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	mov	eax, ebx
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tquat@N$0A@@glm@@QAE@ABU?$tmat4x4@N$0A@@1@@Z ENDP	; glm::tquat<double,0>::tquat<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@N$0A@@glm@@QAE@ABU?$tmat3x3@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tquat@N$0A@@glm@@QAE@ABU?$tmat3x3@N$0A@@1@@Z PROC	; glm::tquat<double,0>::tquat<double,0>, COMDAT
; _this$ = ecx

; 177  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H

; 178  : 		*this = quat_cast(m);

	lea	eax, DWORD PTR $T1[ebp]
	push	ebx
	push	esi
	push	edi
	push	DWORD PTR _m$[ebp]
	mov	ebx, ecx
	push	eax
	call	??$quat_cast@N$0A@@glm@@YA?AU?$tquat@N$0A@@0@ABU?$tmat3x3@N$0A@@0@@Z ; glm::quat_cast<double,0>
	pop	ecx
	pop	ecx
	push	8
	pop	ecx
	mov	esi, eax
	mov	edi, ebx
	rep movsd
	pop	edi
	pop	esi

; 179  : 	}

	mov	eax, ebx
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tquat@N$0A@@glm@@QAE@ABU?$tmat3x3@N$0A@@1@@Z ENDP	; glm::tquat<double,0>::tquat<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@N$0A@@glm@@QAE@ABU?$tvec3@N$0A@@1@@Z
_TEXT	SEGMENT
_s$ = -72						; size = 24
$T1 = -48						; size = 24
$T2 = -48						; size = 24
_c$ = -24						; size = 24
_eulerAngle$ = 8					; size = 4
??0?$tquat@N$0A@@glm@@QAE@ABU?$tvec3@N$0A@@1@@Z PROC	; glm::tquat<double,0>::tquat<double,0>, COMDAT
; _this$ = ecx

; 165  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H

; 166  : 		tvec3<T, P> c = glm::cos(eulerAngle * T(0.5));

	movaps	xmm1, XMMWORD PTR __xmm@3fe00000000000003fe0000000000000
	lea	eax, DWORD PTR $T2[ebp]
	push	esi
	mov	esi, DWORD PTR _eulerAngle$[ebp]
	push	edi
	push	eax
	lea	eax, DWORD PTR _c$[ebp]
	mov	edi, ecx
	movups	xmm0, XMMWORD PTR [esi]
	push	OFFSET _cos
	push	eax
	mulpd	xmm0, xmm1
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd	xmm0, QWORD PTR [esi+16]
	mulsd	xmm0, xmm1
	movsd	QWORD PTR $T2[ebp+16], xmm0
	call	?call@?$functor1@NN$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@N$0A@@3@P6ANN@ZABU43@@Z ; glm::detail::functor1<double,double,0,glm::tvec3>::call

; 167  : 		tvec3<T, P> s = glm::sin(eulerAngle * T(0.5));

	movups	xmm0, XMMWORD PTR [esi]
	lea	eax, DWORD PTR $T1[ebp]
	movaps	xmm1, XMMWORD PTR __xmm@3fe00000000000003fe0000000000000
	mulpd	xmm0, xmm1
	push	eax
	lea	eax, DWORD PTR _s$[ebp]
	push	OFFSET _sin
	push	eax
	movups	XMMWORD PTR $T1[ebp], xmm0
	movsd	xmm0, QWORD PTR [esi+16]
	mulsd	xmm0, xmm1
	movsd	QWORD PTR $T1[ebp+16], xmm0
	call	?call@?$functor1@NN$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@N$0A@@3@P6ANN@ZABU43@@Z ; glm::detail::functor1<double,double,0,glm::tvec3>::call

; 168  : 		
; 169  : 		this->w = c.x * c.y * c.z + s.x * s.y * s.z;

	movsd	xmm5, QWORD PTR _s$[ebp+8]
	add	esp, 24					; 00000018H
	movsd	xmm4, QWORD PTR _s$[ebp]
	movapd	xmm7, xmm5
	movsd	xmm6, QWORD PTR _c$[ebp+8]

; 170  : 		this->x = s.x * c.y * c.z - c.x * s.y * s.z;
; 171  : 		this->y = c.x * s.y * c.z + s.x * c.y * s.z;
; 172  : 		this->z = c.x * c.y * s.z - s.x * s.y * c.z;
; 173  : 	}

	mov	eax, edi
	mulsd	xmm6, QWORD PTR _c$[ebp]
	movsd	xmm3, QWORD PTR _s$[ebp+16]
	movsd	xmm2, QWORD PTR _c$[ebp+16]
	mulsd	xmm5, QWORD PTR _c$[ebp]
	mulsd	xmm7, xmm4
	movapd	xmm0, xmm6
	mulsd	xmm4, QWORD PTR _c$[ebp+8]
	mulsd	xmm0, xmm2
	movapd	xmm1, xmm7
	mulsd	xmm6, xmm3
	mulsd	xmm1, xmm3
	mulsd	xmm7, xmm2
	addsd	xmm1, xmm0
	movapd	xmm0, xmm5
	mulsd	xmm0, xmm3
	mulsd	xmm5, xmm2
	subsd	xmm6, xmm7
	movsd	QWORD PTR [edi+24], xmm1
	movapd	xmm1, xmm4
	mulsd	xmm1, xmm2
	mulsd	xmm4, xmm3
	movsd	QWORD PTR [edi+16], xmm6
	subsd	xmm1, xmm0
	addsd	xmm4, xmm5
	movsd	QWORD PTR [edi], xmm1
	movsd	QWORD PTR [edi+8], xmm4
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tquat@N$0A@@glm@@QAE@ABU?$tvec3@N$0A@@1@@Z ENDP	; glm::tquat<double,0>::tquat<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@N$0A@@glm@@QAE@ABU?$tvec3@N$0A@@1@0@Z
_TEXT	SEGMENT
$T1 = -64						; size = 32
_q$ = -32						; size = 32
_u$ = 8							; size = 4
_v$ = 12						; size = 4
??0?$tquat@N$0A@@glm@@QAE@ABU?$tvec3@N$0A@@1@0@Z PROC	; glm::tquat<double,0>::tquat<double,0>, COMDAT
; _this$ = ecx

; 155  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H

; 156  : 		tvec3<T, P> const LocalW(cross(u, v));

	mov	eax, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR _u$[ebp]
	push	ebx
	push	esi
	movsd	xmm5, QWORD PTR [eax+8]
	mov	ebx, ecx
	movsd	xmm6, QWORD PTR [edx+16]
	movapd	xmm0, xmm5
	movsd	xmm4, QWORD PTR [eax+16]
	mulsd	xmm4, QWORD PTR [edx+8]
	push	edi
	movsd	xmm3, QWORD PTR [edx]
	movsd	xmm2, QWORD PTR [eax]
	movapd	xmm1, xmm3
	mulsd	xmm0, xmm6
	mulsd	xmm1, xmm5

; 157  : 		T Dot = detail::compute_dot<tvec3, T, P, detail::is_aligned<P>::value>::call(u, v);

	mulsd	xmm5, QWORD PTR [edx+8]
	subsd	xmm4, xmm0
	mulsd	xmm2, xmm6
	mulsd	xmm6, QWORD PTR [eax+16]
	movapd	xmm0, xmm3
	mulsd	xmm3, QWORD PTR [eax]
	mulsd	xmm0, QWORD PTR [eax+16]

; 158  : 		tquat<T, P> q(T(1) + Dot, LocalW.x, LocalW.y, LocalW.z);

	movsd	QWORD PTR _q$[ebp], xmm4
	addsd	xmm5, xmm3
	subsd	xmm2, xmm0
	movsd	xmm0, QWORD PTR [eax]
	mulsd	xmm0, QWORD PTR [edx+8]

; 159  : 
; 160  : 		*this = normalize(q);

	lea	eax, DWORD PTR _q$[ebp]
	push	eax
	addsd	xmm5, xmm6
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	subsd	xmm1, xmm0
	movsd	QWORD PTR _q$[ebp+8], xmm2
	addsd	xmm5, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR _q$[ebp+16], xmm1
	movsd	QWORD PTR _q$[ebp+24], xmm5
	call	??$normalize@N$0A@@glm@@YA?AU?$tquat@N$0A@@0@ABU10@@Z ; glm::normalize<double,0>
	pop	ecx
	pop	ecx
	push	8
	pop	ecx
	mov	esi, eax
	mov	edi, ebx
	rep movsd
	pop	edi
	pop	esi

; 161  : 	}

	mov	eax, ebx
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$tquat@N$0A@@glm@@QAE@ABU?$tvec3@N$0A@@1@0@Z ENDP	; glm::tquat<double,0>::tquat<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??B?$tquat@N$0A@@glm@@QAE?AU?$tmat4x4@N$0A@@1@XZ
_TEXT	SEGMENT
$T1 = -76						; size = 72
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
??B?$tquat@N$0A@@glm@@QAE?AU?$tmat4x4@N$0A@@1@XZ PROC	; glm::tquat<double,0>::operator glm::tmat4x4<double,0>, COMDAT
; _this$ = ecx

; 196  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]

; 197  : 		return mat4_cast(*this);

	lea	eax, DWORD PTR $T1[ebp]
	push	ecx
	push	eax
	call	??$mat3_cast@N$0A@@glm@@YA?AU?$tmat3x3@N$0A@@0@ABU?$tquat@N$0A@@0@@Z ; glm::mat3_cast<double,0>
	pop	ecx
	pop	ecx
	push	eax
	mov	ecx, esi
	call	??0?$tmat4x4@N$0A@@glm@@QAE@ABU?$tmat3x3@N$0A@@1@@Z ; glm::tmat4x4<double,0>::tmat4x4<double,0>

; 198  : 	}

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	mov	eax, esi
	xor	ecx, ebp
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
??B?$tquat@N$0A@@glm@@QAE?AU?$tmat4x4@N$0A@@1@XZ ENDP	; glm::tquat<double,0>::operator glm::tmat4x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??B?$tquat@N$0A@@glm@@QAE?AU?$tmat3x3@N$0A@@1@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
??B?$tquat@N$0A@@glm@@QAE?AU?$tmat3x3@N$0A@@1@XZ PROC	; glm::tquat<double,0>::operator glm::tmat3x3<double,0>, COMDAT
; _this$ = ecx

; 190  : 	{

	push	ebp
	mov	ebp, esp

; 191  : 		return mat3_cast(*this);

	push	ecx
	push	DWORD PTR ___$ReturnUdt$[ebp]
	call	??$mat3_cast@N$0A@@glm@@YA?AU?$tmat3x3@N$0A@@0@ABU?$tquat@N$0A@@0@@Z ; glm::mat3_cast<double,0>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	ecx
	pop	ecx

; 192  : 	}

	pop	ebp
	ret	4
??B?$tquat@N$0A@@glm@@QAE?AU?$tmat3x3@N$0A@@1@XZ ENDP	; glm::tquat<double,0>::operator glm::tmat3x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@N$0A@@glm@@QAE@ABN000@Z
_TEXT	SEGMENT
_w$ = 8							; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_z$ = 20						; size = 4
??0?$tquat@N$0A@@glm@@QAE@ABN000@Z PROC			; glm::tquat<double,0>::tquat<double,0>, COMDAT
; _this$ = ecx

; 122  : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _x$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR _y$[ebp]
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR _z$[ebp]
	movsd	QWORD PTR [ecx+8], xmm0
	movsd	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR _w$[ebp]
	movsd	QWORD PTR [ecx+16], xmm0
	movsd	xmm0, QWORD PTR [eax]
	mov	eax, ecx
	movsd	QWORD PTR [ecx+24], xmm0
	pop	ebp
	ret	16					; 00000010H
??0?$tquat@N$0A@@glm@@QAE@ABN000@Z ENDP			; glm::tquat<double,0>::tquat<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@N$0A@@glm@@QAE@ABNABU?$tvec3@N$0A@@1@@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_v$ = 12						; size = 4
??0?$tquat@N$0A@@glm@@QAE@ABNABU?$tvec3@N$0A@@1@@Z PROC	; glm::tquat<double,0>::tquat<double,0>, COMDAT
; _this$ = ecx

; 117  : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _v$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	QWORD PTR [ecx+8], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	mov	eax, DWORD PTR _s$[ebp]
	movsd	QWORD PTR [ecx+16], xmm0
	movsd	xmm0, QWORD PTR [eax]
	mov	eax, ecx
	movsd	QWORD PTR [ecx+24], xmm0
	pop	ebp
	ret	8
??0?$tquat@N$0A@@glm@@QAE@ABNABU?$tvec3@N$0A@@1@@Z ENDP	; glm::tquat<double,0>::tquat<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@N$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tquat@N$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tquat<double,0>::tquat<double,0>, COMDAT
; _this$ = ecx

; 112  : 	{}

	mov	eax, ecx
	ret	4
??0?$tquat@N$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tquat<double,0>::tquat<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tquat@N$0A@@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tquat@N$0A@@glm@@QAE@ABU01@@Z PROC			; glm::tquat<double,0>::tquat<double,0>, COMDAT
; _this$ = ecx

; 244  : template struct tquat<float64, highp>;

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ___that$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	QWORD PTR [ecx+8], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR [ecx+16], xmm0
	movsd	xmm0, QWORD PTR [eax+24]
	mov	eax, ecx
	movsd	QWORD PTR [ecx+24], xmm0
	pop	ebp
	ret	4
??0?$tquat@N$0A@@glm@@QAE@ABU01@@Z ENDP			; glm::tquat<double,0>::tquat<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@N$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tquat@N$0A@@glm@@QAE@XZ PROC			; glm::tquat<double,0>::tquat<double,0>, COMDAT
; _this$ = ecx

; 92   : 		{}

	xorps	xmm0, xmm0
	mov	eax, ecx
	movups	XMMWORD PTR [ecx], xmm0
	movsd	QWORD PTR [ecx+16], xmm0
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR [ecx+24], xmm0
	ret	0
??0?$tquat@N$0A@@glm@@QAE@XZ ENDP			; glm::tquat<double,0>::tquat<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??A?$tquat@N$0A@@glm@@QBEABNH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tquat@N$0A@@glm@@QBEABNH@Z PROC			; glm::tquat<double,0>::operator[], COMDAT
; _this$ = ecx

; 79   : 	{

	push	ebp
	mov	ebp, esp

; 80   : 		assert(i >= 0 && i < this->length());
; 81   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 82   : 	}

	pop	ebp
	ret	4
??A?$tquat@N$0A@@glm@@QBEABNH@Z ENDP			; glm::tquat<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??A?$tquat@N$0A@@glm@@QAEAANH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tquat@N$0A@@glm@@QAEAANH@Z PROC			; glm::tquat<double,0>::operator[], COMDAT
; _this$ = ecx

; 72   : 	{

	push	ebp
	mov	ebp, esp

; 73   : 		assert(i >= 0 && i < this->length());
; 74   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 75   : 	}

	pop	ebp
	ret	4
??A?$tquat@N$0A@@glm@@QAEAANH@Z ENDP			; glm::tquat<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.hpp
;	COMDAT ?length@?$tquat@N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tquat@N$0A@@glm@@SAHXZ PROC			; glm::tquat<double,0>::length, COMDAT

; 74   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	push	4
	pop	eax
	ret	0
?length@?$tquat@N$0A@@glm@@SAHXZ ENDP			; glm::tquat<double,0>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tquat@M$0A@@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tquat@M$0A@@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tquat<float,0>::operator=, COMDAT
; _this$ = ecx

; 243  : template struct tquat<float32, highp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	mov	edi, ecx
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tquat@M$0A@@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tquat<float,0>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@M$0A@@glm@@QAE@ABU?$tmat4x4@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -56						; size = 16
$T2 = -40						; size = 36
__$ArrayPad$ = -4					; size = 4
_m$ = 8							; size = 4
??0?$tquat@M$0A@@glm@@QAE@ABU?$tmat4x4@M$0A@@1@@Z PROC	; glm::tquat<float,0>::tquat<float,0>, COMDAT
; _this$ = ecx

; 183  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	eax, DWORD PTR _m$[ebp]
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx

; 184  : 		*this = quat_cast(m);

	lea	ecx, DWORD PTR $T2[ebp]
	push	eax
	call	??0?$tmat3x3@M$0A@@glm@@QAE@ABU?$tmat4x4@M$0A@@1@@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0>
	push	eax
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	??$quat_cast@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@ABU?$tmat3x3@M$0A@@0@@Z ; glm::quat_cast<float,0>
	mov	edi, ebx
	lea	esi, DWORD PTR $T1[ebp]
	pop	ecx
	pop	ecx

; 185  : 	}

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	mov	eax, ebx
	movsd
	xor	ecx, ebp
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tquat@M$0A@@glm@@QAE@ABU?$tmat4x4@M$0A@@1@@Z ENDP	; glm::tquat<float,0>::tquat<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@M$0A@@glm@@QAE@ABU?$tmat3x3@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tquat@M$0A@@glm@@QAE@ABU?$tmat3x3@M$0A@@1@@Z PROC	; glm::tquat<float,0>::tquat<float,0>, COMDAT
; _this$ = ecx

; 177  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 178  : 		*this = quat_cast(m);

	lea	eax, DWORD PTR $T1[ebp]
	push	ebx
	push	esi
	push	edi
	push	DWORD PTR _m$[ebp]
	mov	ebx, ecx
	push	eax
	call	??$quat_cast@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@ABU?$tmat3x3@M$0A@@0@@Z ; glm::quat_cast<float,0>
	mov	esi, eax
	mov	edi, ebx
	pop	ecx
	pop	ecx

; 179  : 	}

	mov	eax, ebx
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tquat@M$0A@@glm@@QAE@ABU?$tmat3x3@M$0A@@1@@Z ENDP	; glm::tquat<float,0>::tquat<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@M$0A@@glm@@QAE@ABU?$tvec3@M$0A@@1@@Z
_TEXT	SEGMENT
_s$ = -36						; size = 12
$T1 = -24						; size = 12
$T2 = -24						; size = 12
_c$ = -12						; size = 12
_eulerAngle$ = 8					; size = 4
??0?$tquat@M$0A@@glm@@QAE@ABU?$tvec3@M$0A@@1@@Z PROC	; glm::tquat<float,0>::tquat<float,0>, COMDAT
; _this$ = ecx

; 165  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H

; 166  : 		tvec3<T, P> c = glm::cos(eulerAngle * T(0.5));

	movss	xmm1, DWORD PTR __real@3f000000
	lea	eax, DWORD PTR $T2[ebp]
	push	esi
	mov	esi, DWORD PTR _eulerAngle$[ebp]
	push	edi
	push	eax
	lea	eax, DWORD PTR _c$[ebp]
	mov	edi, ecx
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, xmm1
	push	OFFSET ?cos@@YAMM@Z			; cos
	push	eax
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [esi+4]
	mulss	xmm0, xmm1
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [esi+8]
	mulss	xmm0, xmm1
	movss	DWORD PTR $T2[ebp+8], xmm0
	call	?call@?$functor1@MM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMM@ZABU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec3>::call

; 167  : 		tvec3<T, P> s = glm::sin(eulerAngle * T(0.5));

	movss	xmm1, DWORD PTR __real@3f000000
	lea	eax, DWORD PTR $T1[ebp]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, xmm1
	push	eax
	lea	eax, DWORD PTR _s$[ebp]
	push	OFFSET ?sin@@YAMM@Z			; sin
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [esi+4]
	mulss	xmm0, xmm1
	push	eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR [esi+8]
	mulss	xmm0, xmm1
	movss	DWORD PTR $T1[ebp+8], xmm0
	call	?call@?$functor1@MM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMM@ZABU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec3>::call

; 168  : 		
; 169  : 		this->w = c.x * c.y * c.z + s.x * s.y * s.z;

	movss	xmm5, DWORD PTR _s$[ebp+4]
	add	esp, 24					; 00000018H
	movss	xmm4, DWORD PTR _s$[ebp]
	movaps	xmm7, xmm5
	movss	xmm6, DWORD PTR _c$[ebp+4]

; 170  : 		this->x = s.x * c.y * c.z - c.x * s.y * s.z;
; 171  : 		this->y = c.x * s.y * c.z + s.x * c.y * s.z;
; 172  : 		this->z = c.x * c.y * s.z - s.x * s.y * c.z;
; 173  : 	}

	mov	eax, edi
	mulss	xmm6, DWORD PTR _c$[ebp]
	movss	xmm3, DWORD PTR _s$[ebp+8]
	movss	xmm2, DWORD PTR _c$[ebp+8]
	mulss	xmm5, DWORD PTR _c$[ebp]
	movaps	xmm0, xmm6
	mulss	xmm7, xmm4
	mulss	xmm4, DWORD PTR _c$[ebp+4]
	movaps	xmm1, xmm7
	mulss	xmm0, xmm2
	mulss	xmm1, xmm3
	mulss	xmm6, xmm3
	addss	xmm1, xmm0
	mulss	xmm7, xmm2
	movaps	xmm0, xmm5
	mulss	xmm5, xmm2
	mulss	xmm0, xmm3
	subss	xmm6, xmm7
	movss	DWORD PTR [edi+12], xmm1
	movaps	xmm1, xmm4
	mulss	xmm1, xmm2
	mulss	xmm4, xmm3
	subss	xmm1, xmm0
	movss	DWORD PTR [edi+8], xmm6
	addss	xmm4, xmm5
	movss	DWORD PTR [edi], xmm1
	movss	DWORD PTR [edi+4], xmm4
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tquat@M$0A@@glm@@QAE@ABU?$tvec3@M$0A@@1@@Z ENDP	; glm::tquat<float,0>::tquat<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@M$0A@@glm@@QAE@ABU?$tvec3@M$0A@@1@0@Z
_TEXT	SEGMENT
$T1 = -32						; size = 16
_q$ = -16						; size = 16
_u$ = 8							; size = 4
_v$ = 12						; size = 4
??0?$tquat@M$0A@@glm@@QAE@ABU?$tvec3@M$0A@@1@0@Z PROC	; glm::tquat<float,0>::tquat<float,0>, COMDAT
; _this$ = ecx

; 155  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H

; 156  : 		tvec3<T, P> const LocalW(cross(u, v));

	mov	eax, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR _u$[ebp]
	push	ebx
	push	esi
	movss	xmm5, DWORD PTR [eax+4]
	mov	ebx, ecx
	movss	xmm6, DWORD PTR [edx+8]
	movaps	xmm0, xmm5
	movss	xmm4, DWORD PTR [eax+8]
	mulss	xmm4, DWORD PTR [edx+4]
	push	edi
	movss	xmm3, DWORD PTR [edx]
	movss	xmm2, DWORD PTR [eax]
	movaps	xmm1, xmm3
	mulss	xmm0, xmm6
	mulss	xmm1, xmm5

; 157  : 		T Dot = detail::compute_dot<tvec3, T, P, detail::is_aligned<P>::value>::call(u, v);

	mulss	xmm5, DWORD PTR [edx+4]
	subss	xmm4, xmm0
	movaps	xmm0, xmm3
	mulss	xmm2, xmm6
	mulss	xmm3, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [eax+8]
	mulss	xmm6, DWORD PTR [eax+8]
	addss	xmm5, xmm3
	subss	xmm2, xmm0

; 158  : 		tquat<T, P> q(T(1) + Dot, LocalW.x, LocalW.y, LocalW.z);

	movss	DWORD PTR _q$[ebp], xmm4
	movss	xmm0, DWORD PTR [eax]

; 159  : 
; 160  : 		*this = normalize(q);

	lea	eax, DWORD PTR _q$[ebp]
	mulss	xmm0, DWORD PTR [edx+4]
	push	eax
	addss	xmm5, xmm6
	lea	eax, DWORD PTR $T1[ebp]
	movss	DWORD PTR _q$[ebp+4], xmm2
	subss	xmm1, xmm0
	push	eax
	addss	xmm5, DWORD PTR __real@3f800000
	movss	DWORD PTR _q$[ebp+8], xmm1
	movss	DWORD PTR _q$[ebp+12], xmm5
	call	??$normalize@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@ABU10@@Z ; glm::normalize<float,0>
	mov	esi, eax
	mov	edi, ebx
	pop	ecx
	pop	ecx

; 161  : 	}

	mov	eax, ebx
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$tquat@M$0A@@glm@@QAE@ABU?$tvec3@M$0A@@1@0@Z ENDP	; glm::tquat<float,0>::tquat<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??B?$tquat@M$0A@@glm@@QAE?AU?$tmat4x4@M$0A@@1@XZ
_TEXT	SEGMENT
$T1 = -40						; size = 36
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
??B?$tquat@M$0A@@glm@@QAE?AU?$tmat4x4@M$0A@@1@XZ PROC	; glm::tquat<float,0>::operator glm::tmat4x4<float,0>, COMDAT
; _this$ = ecx

; 196  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]

; 197  : 		return mat4_cast(*this);

	lea	eax, DWORD PTR $T1[ebp]
	push	ecx
	push	eax
	call	??$mat3_cast@M$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@ABU?$tquat@M$0A@@0@@Z ; glm::mat3_cast<float,0>
	pop	ecx
	pop	ecx
	push	eax
	mov	ecx, esi
	call	??0?$tmat4x4@M$0A@@glm@@QAE@ABU?$tmat3x3@M$0A@@1@@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>

; 198  : 	}

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	mov	eax, esi
	xor	ecx, ebp
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
??B?$tquat@M$0A@@glm@@QAE?AU?$tmat4x4@M$0A@@1@XZ ENDP	; glm::tquat<float,0>::operator glm::tmat4x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??B?$tquat@M$0A@@glm@@QAE?AU?$tmat3x3@M$0A@@1@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
??B?$tquat@M$0A@@glm@@QAE?AU?$tmat3x3@M$0A@@1@XZ PROC	; glm::tquat<float,0>::operator glm::tmat3x3<float,0>, COMDAT
; _this$ = ecx

; 190  : 	{

	push	ebp
	mov	ebp, esp

; 191  : 		return mat3_cast(*this);

	push	ecx
	push	DWORD PTR ___$ReturnUdt$[ebp]
	call	??$mat3_cast@M$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@ABU?$tquat@M$0A@@0@@Z ; glm::mat3_cast<float,0>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	ecx
	pop	ecx

; 192  : 	}

	pop	ebp
	ret	4
??B?$tquat@M$0A@@glm@@QAE?AU?$tmat3x3@M$0A@@1@XZ ENDP	; glm::tquat<float,0>::operator glm::tmat3x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@M$0A@@glm@@QAE@ABM000@Z
_TEXT	SEGMENT
_w$ = 8							; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_z$ = 20						; size = 4
??0?$tquat@M$0A@@glm@@QAE@ABM000@Z PROC			; glm::tquat<float,0>::tquat<float,0>, COMDAT
; _this$ = ecx

; 122  : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _y$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _w$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, ecx
	pop	ebp
	ret	16					; 00000010H
??0?$tquat@M$0A@@glm@@QAE@ABM000@Z ENDP			; glm::tquat<float,0>::tquat<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@M$0A@@glm@@QAE@ABMABU?$tvec3@M$0A@@1@@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_v$ = 12						; size = 4
??0?$tquat@M$0A@@glm@@QAE@ABMABU?$tvec3@M$0A@@1@@Z PROC	; glm::tquat<float,0>::tquat<float,0>, COMDAT
; _this$ = ecx

; 117  : 	{}

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, ecx
	pop	ebp
	ret	8
??0?$tquat@M$0A@@glm@@QAE@ABMABU?$tvec3@M$0A@@1@@Z ENDP	; glm::tquat<float,0>::tquat<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@M$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tquat@M$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tquat<float,0>::tquat<float,0>, COMDAT
; _this$ = ecx

; 112  : 	{}

	mov	eax, ecx
	ret	4
??0?$tquat@M$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tquat<float,0>::tquat<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tquat@M$0A@@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tquat@M$0A@@glm@@QAE@ABU01@@Z PROC			; glm::tquat<float,0>::tquat<float,0>, COMDAT
; _this$ = ecx

; 243  : template struct tquat<float32, highp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tquat@M$0A@@glm@@QAE@ABU01@@Z ENDP			; glm::tquat<float,0>::tquat<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@M$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tquat@M$0A@@glm@@QAE@XZ PROC			; glm::tquat<float,0>::tquat<float,0>, COMDAT
; _this$ = ecx

; 92   : 		{}

	and	DWORD PTR [ecx], 0
	mov	eax, ecx
	and	DWORD PTR [ecx+4], 0
	and	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 1065353216		; 3f800000H
	ret	0
??0?$tquat@M$0A@@glm@@QAE@XZ ENDP			; glm::tquat<float,0>::tquat<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??A?$tquat@M$0A@@glm@@QBEABMH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tquat@M$0A@@glm@@QBEABMH@Z PROC			; glm::tquat<float,0>::operator[], COMDAT
; _this$ = ecx

; 79   : 	{

	push	ebp
	mov	ebp, esp

; 80   : 		assert(i >= 0 && i < this->length());
; 81   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 82   : 	}

	pop	ebp
	ret	4
??A?$tquat@M$0A@@glm@@QBEABMH@Z ENDP			; glm::tquat<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??A?$tquat@M$0A@@glm@@QAEAAMH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tquat@M$0A@@glm@@QAEAAMH@Z PROC			; glm::tquat<float,0>::operator[], COMDAT
; _this$ = ecx

; 72   : 	{

	push	ebp
	mov	ebp, esp

; 73   : 		assert(i >= 0 && i < this->length());
; 74   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 75   : 	}

	pop	ebp
	ret	4
??A?$tquat@M$0A@@glm@@QAEAAMH@Z ENDP			; glm::tquat<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.hpp
;	COMDAT ?length@?$tquat@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tquat@M$0A@@glm@@SAHXZ PROC			; glm::tquat<float,0>::length, COMDAT

; 74   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	push	4
	pop	eax
	ret	0
?length@?$tquat@M$0A@@glm@@SAHXZ ENDP			; glm::tquat<float,0>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tquat@N$00@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tquat@N$00@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tquat<double,1>::operator=, COMDAT
; _this$ = ecx

; 241  : template struct tquat<float64, mediump>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	8
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tquat@N$00@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tquat<double,1>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@N$00@glm@@QAE@ABU?$tmat4x4@N$00@1@@Z
_TEXT	SEGMENT
$T1 = -108						; size = 32
$T2 = -76						; size = 72
__$ArrayPad$ = -4					; size = 4
_m$ = 8							; size = 4
??0?$tquat@N$00@glm@@QAE@ABU?$tmat4x4@N$00@1@@Z PROC	; glm::tquat<double,1>::tquat<double,1>, COMDAT
; _this$ = ecx

; 183  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 108				; 0000006cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	eax, DWORD PTR _m$[ebp]
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx

; 184  : 		*this = quat_cast(m);

	lea	ecx, DWORD PTR $T2[ebp]
	push	eax
	call	??0?$tmat3x3@N$00@glm@@QAE@ABU?$tmat4x4@N$00@1@@Z ; glm::tmat3x3<double,1>::tmat3x3<double,1>
	push	eax
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	??$quat_cast@N$00@glm@@YA?AU?$tquat@N$00@0@ABU?$tmat3x3@N$00@0@@Z ; glm::quat_cast<double,1>
	pop	ecx
	pop	ecx
	push	8
	pop	ecx
	mov	edi, ebx
	lea	esi, DWORD PTR $T1[ebp]
	rep movsd

; 185  : 	}

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	mov	eax, ebx
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tquat@N$00@glm@@QAE@ABU?$tmat4x4@N$00@1@@Z ENDP	; glm::tquat<double,1>::tquat<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@N$00@glm@@QAE@ABU?$tmat3x3@N$00@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tquat@N$00@glm@@QAE@ABU?$tmat3x3@N$00@1@@Z PROC	; glm::tquat<double,1>::tquat<double,1>, COMDAT
; _this$ = ecx

; 177  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H

; 178  : 		*this = quat_cast(m);

	lea	eax, DWORD PTR $T1[ebp]
	push	ebx
	push	esi
	push	edi
	push	DWORD PTR _m$[ebp]
	mov	ebx, ecx
	push	eax
	call	??$quat_cast@N$00@glm@@YA?AU?$tquat@N$00@0@ABU?$tmat3x3@N$00@0@@Z ; glm::quat_cast<double,1>
	pop	ecx
	pop	ecx
	push	8
	pop	ecx
	mov	esi, eax
	mov	edi, ebx
	rep movsd
	pop	edi
	pop	esi

; 179  : 	}

	mov	eax, ebx
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tquat@N$00@glm@@QAE@ABU?$tmat3x3@N$00@1@@Z ENDP	; glm::tquat<double,1>::tquat<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@N$00@glm@@QAE@ABU?$tvec3@N$00@1@@Z
_TEXT	SEGMENT
_s$ = -72						; size = 24
$T1 = -48						; size = 24
$T2 = -48						; size = 24
_c$ = -24						; size = 24
_eulerAngle$ = 8					; size = 4
??0?$tquat@N$00@glm@@QAE@ABU?$tvec3@N$00@1@@Z PROC	; glm::tquat<double,1>::tquat<double,1>, COMDAT
; _this$ = ecx

; 165  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H

; 166  : 		tvec3<T, P> c = glm::cos(eulerAngle * T(0.5));

	movaps	xmm1, XMMWORD PTR __xmm@3fe00000000000003fe0000000000000
	lea	eax, DWORD PTR $T2[ebp]
	push	esi
	mov	esi, DWORD PTR _eulerAngle$[ebp]
	push	edi
	push	eax
	lea	eax, DWORD PTR _c$[ebp]
	mov	edi, ecx
	movups	xmm0, XMMWORD PTR [esi]
	push	OFFSET _cos
	push	eax
	mulpd	xmm0, xmm1
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd	xmm0, QWORD PTR [esi+16]
	mulsd	xmm0, xmm1
	movsd	QWORD PTR $T2[ebp+16], xmm0
	call	?call@?$functor1@NN$00Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@N$00@3@P6ANN@ZABU43@@Z ; glm::detail::functor1<double,double,1,glm::tvec3>::call

; 167  : 		tvec3<T, P> s = glm::sin(eulerAngle * T(0.5));

	movups	xmm0, XMMWORD PTR [esi]
	lea	eax, DWORD PTR $T1[ebp]
	movaps	xmm1, XMMWORD PTR __xmm@3fe00000000000003fe0000000000000
	mulpd	xmm0, xmm1
	push	eax
	lea	eax, DWORD PTR _s$[ebp]
	push	OFFSET _sin
	push	eax
	movups	XMMWORD PTR $T1[ebp], xmm0
	movsd	xmm0, QWORD PTR [esi+16]
	mulsd	xmm0, xmm1
	movsd	QWORD PTR $T1[ebp+16], xmm0
	call	?call@?$functor1@NN$00Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@N$00@3@P6ANN@ZABU43@@Z ; glm::detail::functor1<double,double,1,glm::tvec3>::call

; 168  : 		
; 169  : 		this->w = c.x * c.y * c.z + s.x * s.y * s.z;

	movsd	xmm5, QWORD PTR _s$[ebp+8]
	add	esp, 24					; 00000018H
	movsd	xmm4, QWORD PTR _s$[ebp]
	movapd	xmm7, xmm5
	movsd	xmm6, QWORD PTR _c$[ebp+8]

; 170  : 		this->x = s.x * c.y * c.z - c.x * s.y * s.z;
; 171  : 		this->y = c.x * s.y * c.z + s.x * c.y * s.z;
; 172  : 		this->z = c.x * c.y * s.z - s.x * s.y * c.z;
; 173  : 	}

	mov	eax, edi
	mulsd	xmm6, QWORD PTR _c$[ebp]
	movsd	xmm3, QWORD PTR _s$[ebp+16]
	movsd	xmm2, QWORD PTR _c$[ebp+16]
	mulsd	xmm5, QWORD PTR _c$[ebp]
	mulsd	xmm7, xmm4
	movapd	xmm0, xmm6
	mulsd	xmm4, QWORD PTR _c$[ebp+8]
	mulsd	xmm0, xmm2
	movapd	xmm1, xmm7
	mulsd	xmm6, xmm3
	mulsd	xmm1, xmm3
	mulsd	xmm7, xmm2
	addsd	xmm1, xmm0
	movapd	xmm0, xmm5
	mulsd	xmm0, xmm3
	mulsd	xmm5, xmm2
	subsd	xmm6, xmm7
	movsd	QWORD PTR [edi+24], xmm1
	movapd	xmm1, xmm4
	mulsd	xmm1, xmm2
	mulsd	xmm4, xmm3
	movsd	QWORD PTR [edi+16], xmm6
	subsd	xmm1, xmm0
	addsd	xmm4, xmm5
	movsd	QWORD PTR [edi], xmm1
	movsd	QWORD PTR [edi+8], xmm4
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tquat@N$00@glm@@QAE@ABU?$tvec3@N$00@1@@Z ENDP	; glm::tquat<double,1>::tquat<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@N$00@glm@@QAE@ABU?$tvec3@N$00@1@0@Z
_TEXT	SEGMENT
$T1 = -64						; size = 32
_q$ = -32						; size = 32
_u$ = 8							; size = 4
_v$ = 12						; size = 4
??0?$tquat@N$00@glm@@QAE@ABU?$tvec3@N$00@1@0@Z PROC	; glm::tquat<double,1>::tquat<double,1>, COMDAT
; _this$ = ecx

; 155  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H

; 156  : 		tvec3<T, P> const LocalW(cross(u, v));

	mov	eax, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR _u$[ebp]
	push	ebx
	push	esi
	movsd	xmm5, QWORD PTR [eax+8]
	mov	ebx, ecx
	movsd	xmm6, QWORD PTR [edx+16]
	movapd	xmm0, xmm5
	movsd	xmm4, QWORD PTR [eax+16]
	mulsd	xmm4, QWORD PTR [edx+8]
	push	edi
	movsd	xmm3, QWORD PTR [edx]
	movsd	xmm2, QWORD PTR [eax]
	movapd	xmm1, xmm3
	mulsd	xmm0, xmm6
	mulsd	xmm1, xmm5

; 157  : 		T Dot = detail::compute_dot<tvec3, T, P, detail::is_aligned<P>::value>::call(u, v);

	mulsd	xmm5, QWORD PTR [edx+8]
	subsd	xmm4, xmm0
	mulsd	xmm2, xmm6
	mulsd	xmm6, QWORD PTR [eax+16]
	movapd	xmm0, xmm3
	mulsd	xmm3, QWORD PTR [eax]
	mulsd	xmm0, QWORD PTR [eax+16]

; 158  : 		tquat<T, P> q(T(1) + Dot, LocalW.x, LocalW.y, LocalW.z);

	movsd	QWORD PTR _q$[ebp], xmm4
	addsd	xmm5, xmm3
	subsd	xmm2, xmm0
	movsd	xmm0, QWORD PTR [eax]
	mulsd	xmm0, QWORD PTR [edx+8]

; 159  : 
; 160  : 		*this = normalize(q);

	lea	eax, DWORD PTR _q$[ebp]
	push	eax
	addsd	xmm5, xmm6
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	subsd	xmm1, xmm0
	movsd	QWORD PTR _q$[ebp+8], xmm2
	addsd	xmm5, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR _q$[ebp+16], xmm1
	movsd	QWORD PTR _q$[ebp+24], xmm5
	call	??$normalize@N$00@glm@@YA?AU?$tquat@N$00@0@ABU10@@Z ; glm::normalize<double,1>
	pop	ecx
	pop	ecx
	push	8
	pop	ecx
	mov	esi, eax
	mov	edi, ebx
	rep movsd
	pop	edi
	pop	esi

; 161  : 	}

	mov	eax, ebx
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$tquat@N$00@glm@@QAE@ABU?$tvec3@N$00@1@0@Z ENDP	; glm::tquat<double,1>::tquat<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??B?$tquat@N$00@glm@@QAE?AU?$tmat4x4@N$00@1@XZ
_TEXT	SEGMENT
$T1 = -76						; size = 72
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
??B?$tquat@N$00@glm@@QAE?AU?$tmat4x4@N$00@1@XZ PROC	; glm::tquat<double,1>::operator glm::tmat4x4<double,1>, COMDAT
; _this$ = ecx

; 196  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]

; 197  : 		return mat4_cast(*this);

	lea	eax, DWORD PTR $T1[ebp]
	push	ecx
	push	eax
	call	??$mat3_cast@N$00@glm@@YA?AU?$tmat3x3@N$00@0@ABU?$tquat@N$00@0@@Z ; glm::mat3_cast<double,1>
	pop	ecx
	pop	ecx
	push	eax
	mov	ecx, esi
	call	??0?$tmat4x4@N$00@glm@@QAE@ABU?$tmat3x3@N$00@1@@Z ; glm::tmat4x4<double,1>::tmat4x4<double,1>

; 198  : 	}

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	mov	eax, esi
	xor	ecx, ebp
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
??B?$tquat@N$00@glm@@QAE?AU?$tmat4x4@N$00@1@XZ ENDP	; glm::tquat<double,1>::operator glm::tmat4x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??B?$tquat@N$00@glm@@QAE?AU?$tmat3x3@N$00@1@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
??B?$tquat@N$00@glm@@QAE?AU?$tmat3x3@N$00@1@XZ PROC	; glm::tquat<double,1>::operator glm::tmat3x3<double,1>, COMDAT
; _this$ = ecx

; 190  : 	{

	push	ebp
	mov	ebp, esp

; 191  : 		return mat3_cast(*this);

	push	ecx
	push	DWORD PTR ___$ReturnUdt$[ebp]
	call	??$mat3_cast@N$00@glm@@YA?AU?$tmat3x3@N$00@0@ABU?$tquat@N$00@0@@Z ; glm::mat3_cast<double,1>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	ecx
	pop	ecx

; 192  : 	}

	pop	ebp
	ret	4
??B?$tquat@N$00@glm@@QAE?AU?$tmat3x3@N$00@1@XZ ENDP	; glm::tquat<double,1>::operator glm::tmat3x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@N$00@glm@@QAE@ABN000@Z
_TEXT	SEGMENT
_w$ = 8							; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_z$ = 20						; size = 4
??0?$tquat@N$00@glm@@QAE@ABN000@Z PROC			; glm::tquat<double,1>::tquat<double,1>, COMDAT
; _this$ = ecx

; 122  : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _x$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR _y$[ebp]
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR _z$[ebp]
	movsd	QWORD PTR [ecx+8], xmm0
	movsd	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR _w$[ebp]
	movsd	QWORD PTR [ecx+16], xmm0
	movsd	xmm0, QWORD PTR [eax]
	mov	eax, ecx
	movsd	QWORD PTR [ecx+24], xmm0
	pop	ebp
	ret	16					; 00000010H
??0?$tquat@N$00@glm@@QAE@ABN000@Z ENDP			; glm::tquat<double,1>::tquat<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@N$00@glm@@QAE@ABNABU?$tvec3@N$00@1@@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_v$ = 12						; size = 4
??0?$tquat@N$00@glm@@QAE@ABNABU?$tvec3@N$00@1@@Z PROC	; glm::tquat<double,1>::tquat<double,1>, COMDAT
; _this$ = ecx

; 117  : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _v$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	QWORD PTR [ecx+8], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	mov	eax, DWORD PTR _s$[ebp]
	movsd	QWORD PTR [ecx+16], xmm0
	movsd	xmm0, QWORD PTR [eax]
	mov	eax, ecx
	movsd	QWORD PTR [ecx+24], xmm0
	pop	ebp
	ret	8
??0?$tquat@N$00@glm@@QAE@ABNABU?$tvec3@N$00@1@@Z ENDP	; glm::tquat<double,1>::tquat<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@N$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tquat@N$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tquat<double,1>::tquat<double,1>, COMDAT
; _this$ = ecx

; 112  : 	{}

	mov	eax, ecx
	ret	4
??0?$tquat@N$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tquat<double,1>::tquat<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tquat@N$00@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tquat@N$00@glm@@QAE@ABU01@@Z PROC			; glm::tquat<double,1>::tquat<double,1>, COMDAT
; _this$ = ecx

; 241  : template struct tquat<float64, mediump>;

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ___that$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	QWORD PTR [ecx+8], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR [ecx+16], xmm0
	movsd	xmm0, QWORD PTR [eax+24]
	mov	eax, ecx
	movsd	QWORD PTR [ecx+24], xmm0
	pop	ebp
	ret	4
??0?$tquat@N$00@glm@@QAE@ABU01@@Z ENDP			; glm::tquat<double,1>::tquat<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@N$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tquat@N$00@glm@@QAE@XZ PROC			; glm::tquat<double,1>::tquat<double,1>, COMDAT
; _this$ = ecx

; 92   : 		{}

	xorps	xmm0, xmm0
	mov	eax, ecx
	movups	XMMWORD PTR [ecx], xmm0
	movsd	QWORD PTR [ecx+16], xmm0
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR [ecx+24], xmm0
	ret	0
??0?$tquat@N$00@glm@@QAE@XZ ENDP			; glm::tquat<double,1>::tquat<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??A?$tquat@N$00@glm@@QBEABNH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tquat@N$00@glm@@QBEABNH@Z PROC			; glm::tquat<double,1>::operator[], COMDAT
; _this$ = ecx

; 79   : 	{

	push	ebp
	mov	ebp, esp

; 80   : 		assert(i >= 0 && i < this->length());
; 81   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 82   : 	}

	pop	ebp
	ret	4
??A?$tquat@N$00@glm@@QBEABNH@Z ENDP			; glm::tquat<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??A?$tquat@N$00@glm@@QAEAANH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tquat@N$00@glm@@QAEAANH@Z PROC			; glm::tquat<double,1>::operator[], COMDAT
; _this$ = ecx

; 72   : 	{

	push	ebp
	mov	ebp, esp

; 73   : 		assert(i >= 0 && i < this->length());
; 74   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 75   : 	}

	pop	ebp
	ret	4
??A?$tquat@N$00@glm@@QAEAANH@Z ENDP			; glm::tquat<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.hpp
;	COMDAT ?length@?$tquat@N$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tquat@N$00@glm@@SAHXZ PROC			; glm::tquat<double,1>::length, COMDAT

; 74   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	push	4
	pop	eax
	ret	0
?length@?$tquat@N$00@glm@@SAHXZ ENDP			; glm::tquat<double,1>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tquat@M$00@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tquat@M$00@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tquat<float,1>::operator=, COMDAT
; _this$ = ecx

; 240  : template struct tquat<float32, mediump>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	mov	edi, ecx
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tquat@M$00@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tquat<float,1>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@M$00@glm@@QAE@ABU?$tmat4x4@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -56						; size = 16
$T2 = -40						; size = 36
__$ArrayPad$ = -4					; size = 4
_m$ = 8							; size = 4
??0?$tquat@M$00@glm@@QAE@ABU?$tmat4x4@M$00@1@@Z PROC	; glm::tquat<float,1>::tquat<float,1>, COMDAT
; _this$ = ecx

; 183  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	eax, DWORD PTR _m$[ebp]
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx

; 184  : 		*this = quat_cast(m);

	lea	ecx, DWORD PTR $T2[ebp]
	push	eax
	call	??0?$tmat3x3@M$00@glm@@QAE@ABU?$tmat4x4@M$00@1@@Z ; glm::tmat3x3<float,1>::tmat3x3<float,1>
	push	eax
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	??$quat_cast@M$00@glm@@YA?AU?$tquat@M$00@0@ABU?$tmat3x3@M$00@0@@Z ; glm::quat_cast<float,1>
	mov	edi, ebx
	lea	esi, DWORD PTR $T1[ebp]
	pop	ecx
	pop	ecx

; 185  : 	}

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	mov	eax, ebx
	movsd
	xor	ecx, ebp
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tquat@M$00@glm@@QAE@ABU?$tmat4x4@M$00@1@@Z ENDP	; glm::tquat<float,1>::tquat<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@M$00@glm@@QAE@ABU?$tmat3x3@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tquat@M$00@glm@@QAE@ABU?$tmat3x3@M$00@1@@Z PROC	; glm::tquat<float,1>::tquat<float,1>, COMDAT
; _this$ = ecx

; 177  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 178  : 		*this = quat_cast(m);

	lea	eax, DWORD PTR $T1[ebp]
	push	ebx
	push	esi
	push	edi
	push	DWORD PTR _m$[ebp]
	mov	ebx, ecx
	push	eax
	call	??$quat_cast@M$00@glm@@YA?AU?$tquat@M$00@0@ABU?$tmat3x3@M$00@0@@Z ; glm::quat_cast<float,1>
	mov	esi, eax
	mov	edi, ebx
	pop	ecx
	pop	ecx

; 179  : 	}

	mov	eax, ebx
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tquat@M$00@glm@@QAE@ABU?$tmat3x3@M$00@1@@Z ENDP	; glm::tquat<float,1>::tquat<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@M$00@glm@@QAE@ABU?$tvec3@M$00@1@@Z
_TEXT	SEGMENT
_s$ = -36						; size = 12
$T1 = -24						; size = 12
$T2 = -24						; size = 12
_c$ = -12						; size = 12
_eulerAngle$ = 8					; size = 4
??0?$tquat@M$00@glm@@QAE@ABU?$tvec3@M$00@1@@Z PROC	; glm::tquat<float,1>::tquat<float,1>, COMDAT
; _this$ = ecx

; 165  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H

; 166  : 		tvec3<T, P> c = glm::cos(eulerAngle * T(0.5));

	movss	xmm1, DWORD PTR __real@3f000000
	lea	eax, DWORD PTR $T2[ebp]
	push	esi
	mov	esi, DWORD PTR _eulerAngle$[ebp]
	push	edi
	push	eax
	lea	eax, DWORD PTR _c$[ebp]
	mov	edi, ecx
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, xmm1
	push	OFFSET ?cos@@YAMM@Z			; cos
	push	eax
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [esi+4]
	mulss	xmm0, xmm1
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [esi+8]
	mulss	xmm0, xmm1
	movss	DWORD PTR $T2[ebp+8], xmm0
	call	?call@?$functor1@MM$00Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$00@3@P6AMM@ZABU43@@Z ; glm::detail::functor1<float,float,1,glm::tvec3>::call

; 167  : 		tvec3<T, P> s = glm::sin(eulerAngle * T(0.5));

	movss	xmm1, DWORD PTR __real@3f000000
	lea	eax, DWORD PTR $T1[ebp]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, xmm1
	push	eax
	lea	eax, DWORD PTR _s$[ebp]
	push	OFFSET ?sin@@YAMM@Z			; sin
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [esi+4]
	mulss	xmm0, xmm1
	push	eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR [esi+8]
	mulss	xmm0, xmm1
	movss	DWORD PTR $T1[ebp+8], xmm0
	call	?call@?$functor1@MM$00Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$00@3@P6AMM@ZABU43@@Z ; glm::detail::functor1<float,float,1,glm::tvec3>::call

; 168  : 		
; 169  : 		this->w = c.x * c.y * c.z + s.x * s.y * s.z;

	movss	xmm5, DWORD PTR _s$[ebp+4]
	add	esp, 24					; 00000018H
	movss	xmm4, DWORD PTR _s$[ebp]
	movaps	xmm7, xmm5
	movss	xmm6, DWORD PTR _c$[ebp+4]

; 170  : 		this->x = s.x * c.y * c.z - c.x * s.y * s.z;
; 171  : 		this->y = c.x * s.y * c.z + s.x * c.y * s.z;
; 172  : 		this->z = c.x * c.y * s.z - s.x * s.y * c.z;
; 173  : 	}

	mov	eax, edi
	mulss	xmm6, DWORD PTR _c$[ebp]
	movss	xmm3, DWORD PTR _s$[ebp+8]
	movss	xmm2, DWORD PTR _c$[ebp+8]
	mulss	xmm5, DWORD PTR _c$[ebp]
	movaps	xmm0, xmm6
	mulss	xmm7, xmm4
	mulss	xmm4, DWORD PTR _c$[ebp+4]
	movaps	xmm1, xmm7
	mulss	xmm0, xmm2
	mulss	xmm1, xmm3
	mulss	xmm6, xmm3
	addss	xmm1, xmm0
	mulss	xmm7, xmm2
	movaps	xmm0, xmm5
	mulss	xmm5, xmm2
	mulss	xmm0, xmm3
	subss	xmm6, xmm7
	movss	DWORD PTR [edi+12], xmm1
	movaps	xmm1, xmm4
	mulss	xmm1, xmm2
	mulss	xmm4, xmm3
	subss	xmm1, xmm0
	movss	DWORD PTR [edi+8], xmm6
	addss	xmm4, xmm5
	movss	DWORD PTR [edi], xmm1
	movss	DWORD PTR [edi+4], xmm4
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tquat@M$00@glm@@QAE@ABU?$tvec3@M$00@1@@Z ENDP	; glm::tquat<float,1>::tquat<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@M$00@glm@@QAE@ABU?$tvec3@M$00@1@0@Z
_TEXT	SEGMENT
$T1 = -32						; size = 16
_q$ = -16						; size = 16
_u$ = 8							; size = 4
_v$ = 12						; size = 4
??0?$tquat@M$00@glm@@QAE@ABU?$tvec3@M$00@1@0@Z PROC	; glm::tquat<float,1>::tquat<float,1>, COMDAT
; _this$ = ecx

; 155  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H

; 156  : 		tvec3<T, P> const LocalW(cross(u, v));

	mov	eax, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR _u$[ebp]
	push	ebx
	push	esi
	movss	xmm5, DWORD PTR [eax+4]
	mov	ebx, ecx
	movss	xmm6, DWORD PTR [edx+8]
	movaps	xmm0, xmm5
	movss	xmm4, DWORD PTR [eax+8]
	mulss	xmm4, DWORD PTR [edx+4]
	push	edi
	movss	xmm3, DWORD PTR [edx]
	movss	xmm2, DWORD PTR [eax]
	movaps	xmm1, xmm3
	mulss	xmm0, xmm6
	mulss	xmm1, xmm5

; 157  : 		T Dot = detail::compute_dot<tvec3, T, P, detail::is_aligned<P>::value>::call(u, v);

	mulss	xmm5, DWORD PTR [edx+4]
	subss	xmm4, xmm0
	movaps	xmm0, xmm3
	mulss	xmm2, xmm6
	mulss	xmm3, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [eax+8]
	mulss	xmm6, DWORD PTR [eax+8]
	addss	xmm5, xmm3
	subss	xmm2, xmm0

; 158  : 		tquat<T, P> q(T(1) + Dot, LocalW.x, LocalW.y, LocalW.z);

	movss	DWORD PTR _q$[ebp], xmm4
	movss	xmm0, DWORD PTR [eax]

; 159  : 
; 160  : 		*this = normalize(q);

	lea	eax, DWORD PTR _q$[ebp]
	mulss	xmm0, DWORD PTR [edx+4]
	push	eax
	addss	xmm5, xmm6
	lea	eax, DWORD PTR $T1[ebp]
	movss	DWORD PTR _q$[ebp+4], xmm2
	subss	xmm1, xmm0
	push	eax
	addss	xmm5, DWORD PTR __real@3f800000
	movss	DWORD PTR _q$[ebp+8], xmm1
	movss	DWORD PTR _q$[ebp+12], xmm5
	call	??$normalize@M$00@glm@@YA?AU?$tquat@M$00@0@ABU10@@Z ; glm::normalize<float,1>
	mov	esi, eax
	mov	edi, ebx
	pop	ecx
	pop	ecx

; 161  : 	}

	mov	eax, ebx
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$tquat@M$00@glm@@QAE@ABU?$tvec3@M$00@1@0@Z ENDP	; glm::tquat<float,1>::tquat<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??B?$tquat@M$00@glm@@QAE?AU?$tmat4x4@M$00@1@XZ
_TEXT	SEGMENT
$T1 = -40						; size = 36
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
??B?$tquat@M$00@glm@@QAE?AU?$tmat4x4@M$00@1@XZ PROC	; glm::tquat<float,1>::operator glm::tmat4x4<float,1>, COMDAT
; _this$ = ecx

; 196  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]

; 197  : 		return mat4_cast(*this);

	lea	eax, DWORD PTR $T1[ebp]
	push	ecx
	push	eax
	call	??$mat3_cast@M$00@glm@@YA?AU?$tmat3x3@M$00@0@ABU?$tquat@M$00@0@@Z ; glm::mat3_cast<float,1>
	pop	ecx
	pop	ecx
	push	eax
	mov	ecx, esi
	call	??0?$tmat4x4@M$00@glm@@QAE@ABU?$tmat3x3@M$00@1@@Z ; glm::tmat4x4<float,1>::tmat4x4<float,1>

; 198  : 	}

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	mov	eax, esi
	xor	ecx, ebp
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
??B?$tquat@M$00@glm@@QAE?AU?$tmat4x4@M$00@1@XZ ENDP	; glm::tquat<float,1>::operator glm::tmat4x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??B?$tquat@M$00@glm@@QAE?AU?$tmat3x3@M$00@1@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
??B?$tquat@M$00@glm@@QAE?AU?$tmat3x3@M$00@1@XZ PROC	; glm::tquat<float,1>::operator glm::tmat3x3<float,1>, COMDAT
; _this$ = ecx

; 190  : 	{

	push	ebp
	mov	ebp, esp

; 191  : 		return mat3_cast(*this);

	push	ecx
	push	DWORD PTR ___$ReturnUdt$[ebp]
	call	??$mat3_cast@M$00@glm@@YA?AU?$tmat3x3@M$00@0@ABU?$tquat@M$00@0@@Z ; glm::mat3_cast<float,1>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	ecx
	pop	ecx

; 192  : 	}

	pop	ebp
	ret	4
??B?$tquat@M$00@glm@@QAE?AU?$tmat3x3@M$00@1@XZ ENDP	; glm::tquat<float,1>::operator glm::tmat3x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@M$00@glm@@QAE@ABM000@Z
_TEXT	SEGMENT
_w$ = 8							; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_z$ = 20						; size = 4
??0?$tquat@M$00@glm@@QAE@ABM000@Z PROC			; glm::tquat<float,1>::tquat<float,1>, COMDAT
; _this$ = ecx

; 122  : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _y$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _w$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, ecx
	pop	ebp
	ret	16					; 00000010H
??0?$tquat@M$00@glm@@QAE@ABM000@Z ENDP			; glm::tquat<float,1>::tquat<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@M$00@glm@@QAE@ABMABU?$tvec3@M$00@1@@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_v$ = 12						; size = 4
??0?$tquat@M$00@glm@@QAE@ABMABU?$tvec3@M$00@1@@Z PROC	; glm::tquat<float,1>::tquat<float,1>, COMDAT
; _this$ = ecx

; 117  : 	{}

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, ecx
	pop	ebp
	ret	8
??0?$tquat@M$00@glm@@QAE@ABMABU?$tvec3@M$00@1@@Z ENDP	; glm::tquat<float,1>::tquat<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@M$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tquat@M$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tquat<float,1>::tquat<float,1>, COMDAT
; _this$ = ecx

; 112  : 	{}

	mov	eax, ecx
	ret	4
??0?$tquat@M$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tquat<float,1>::tquat<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tquat@M$00@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tquat@M$00@glm@@QAE@ABU01@@Z PROC			; glm::tquat<float,1>::tquat<float,1>, COMDAT
; _this$ = ecx

; 240  : template struct tquat<float32, mediump>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tquat@M$00@glm@@QAE@ABU01@@Z ENDP			; glm::tquat<float,1>::tquat<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@M$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tquat@M$00@glm@@QAE@XZ PROC			; glm::tquat<float,1>::tquat<float,1>, COMDAT
; _this$ = ecx

; 92   : 		{}

	and	DWORD PTR [ecx], 0
	mov	eax, ecx
	and	DWORD PTR [ecx+4], 0
	and	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 1065353216		; 3f800000H
	ret	0
??0?$tquat@M$00@glm@@QAE@XZ ENDP			; glm::tquat<float,1>::tquat<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??A?$tquat@M$00@glm@@QBEABMH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tquat@M$00@glm@@QBEABMH@Z PROC			; glm::tquat<float,1>::operator[], COMDAT
; _this$ = ecx

; 79   : 	{

	push	ebp
	mov	ebp, esp

; 80   : 		assert(i >= 0 && i < this->length());
; 81   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 82   : 	}

	pop	ebp
	ret	4
??A?$tquat@M$00@glm@@QBEABMH@Z ENDP			; glm::tquat<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??A?$tquat@M$00@glm@@QAEAAMH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tquat@M$00@glm@@QAEAAMH@Z PROC			; glm::tquat<float,1>::operator[], COMDAT
; _this$ = ecx

; 72   : 	{

	push	ebp
	mov	ebp, esp

; 73   : 		assert(i >= 0 && i < this->length());
; 74   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 75   : 	}

	pop	ebp
	ret	4
??A?$tquat@M$00@glm@@QAEAAMH@Z ENDP			; glm::tquat<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.hpp
;	COMDAT ?length@?$tquat@M$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tquat@M$00@glm@@SAHXZ PROC			; glm::tquat<float,1>::length, COMDAT

; 74   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	push	4
	pop	eax
	ret	0
?length@?$tquat@M$00@glm@@SAHXZ ENDP			; glm::tquat<float,1>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tquat@N$01@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tquat@N$01@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tquat<double,2>::operator=, COMDAT
; _this$ = ecx

; 238  : template struct tquat<float64, lowp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	8
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tquat@N$01@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tquat<double,2>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@N$01@glm@@QAE@ABU?$tmat4x4@N$01@1@@Z
_TEXT	SEGMENT
$T1 = -108						; size = 32
$T2 = -76						; size = 72
__$ArrayPad$ = -4					; size = 4
_m$ = 8							; size = 4
??0?$tquat@N$01@glm@@QAE@ABU?$tmat4x4@N$01@1@@Z PROC	; glm::tquat<double,2>::tquat<double,2>, COMDAT
; _this$ = ecx

; 183  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 108				; 0000006cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	eax, DWORD PTR _m$[ebp]
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx

; 184  : 		*this = quat_cast(m);

	lea	ecx, DWORD PTR $T2[ebp]
	push	eax
	call	??0?$tmat3x3@N$01@glm@@QAE@ABU?$tmat4x4@N$01@1@@Z ; glm::tmat3x3<double,2>::tmat3x3<double,2>
	push	eax
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	??$quat_cast@N$01@glm@@YA?AU?$tquat@N$01@0@ABU?$tmat3x3@N$01@0@@Z ; glm::quat_cast<double,2>
	pop	ecx
	pop	ecx
	push	8
	pop	ecx
	mov	edi, ebx
	lea	esi, DWORD PTR $T1[ebp]
	rep movsd

; 185  : 	}

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	mov	eax, ebx
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tquat@N$01@glm@@QAE@ABU?$tmat4x4@N$01@1@@Z ENDP	; glm::tquat<double,2>::tquat<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@N$01@glm@@QAE@ABU?$tmat3x3@N$01@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tquat@N$01@glm@@QAE@ABU?$tmat3x3@N$01@1@@Z PROC	; glm::tquat<double,2>::tquat<double,2>, COMDAT
; _this$ = ecx

; 177  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H

; 178  : 		*this = quat_cast(m);

	lea	eax, DWORD PTR $T1[ebp]
	push	ebx
	push	esi
	push	edi
	push	DWORD PTR _m$[ebp]
	mov	ebx, ecx
	push	eax
	call	??$quat_cast@N$01@glm@@YA?AU?$tquat@N$01@0@ABU?$tmat3x3@N$01@0@@Z ; glm::quat_cast<double,2>
	pop	ecx
	pop	ecx
	push	8
	pop	ecx
	mov	esi, eax
	mov	edi, ebx
	rep movsd
	pop	edi
	pop	esi

; 179  : 	}

	mov	eax, ebx
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tquat@N$01@glm@@QAE@ABU?$tmat3x3@N$01@1@@Z ENDP	; glm::tquat<double,2>::tquat<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@N$01@glm@@QAE@ABU?$tvec3@N$01@1@@Z
_TEXT	SEGMENT
_s$ = -72						; size = 24
$T1 = -48						; size = 24
$T2 = -48						; size = 24
_c$ = -24						; size = 24
_eulerAngle$ = 8					; size = 4
??0?$tquat@N$01@glm@@QAE@ABU?$tvec3@N$01@1@@Z PROC	; glm::tquat<double,2>::tquat<double,2>, COMDAT
; _this$ = ecx

; 165  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H

; 166  : 		tvec3<T, P> c = glm::cos(eulerAngle * T(0.5));

	movaps	xmm1, XMMWORD PTR __xmm@3fe00000000000003fe0000000000000
	lea	eax, DWORD PTR $T2[ebp]
	push	esi
	mov	esi, DWORD PTR _eulerAngle$[ebp]
	push	edi
	push	eax
	lea	eax, DWORD PTR _c$[ebp]
	mov	edi, ecx
	movups	xmm0, XMMWORD PTR [esi]
	push	OFFSET _cos
	push	eax
	mulpd	xmm0, xmm1
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd	xmm0, QWORD PTR [esi+16]
	mulsd	xmm0, xmm1
	movsd	QWORD PTR $T2[ebp+16], xmm0
	call	?call@?$functor1@NN$01Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@N$01@3@P6ANN@ZABU43@@Z ; glm::detail::functor1<double,double,2,glm::tvec3>::call

; 167  : 		tvec3<T, P> s = glm::sin(eulerAngle * T(0.5));

	movups	xmm0, XMMWORD PTR [esi]
	lea	eax, DWORD PTR $T1[ebp]
	movaps	xmm1, XMMWORD PTR __xmm@3fe00000000000003fe0000000000000
	mulpd	xmm0, xmm1
	push	eax
	lea	eax, DWORD PTR _s$[ebp]
	push	OFFSET _sin
	push	eax
	movups	XMMWORD PTR $T1[ebp], xmm0
	movsd	xmm0, QWORD PTR [esi+16]
	mulsd	xmm0, xmm1
	movsd	QWORD PTR $T1[ebp+16], xmm0
	call	?call@?$functor1@NN$01Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@N$01@3@P6ANN@ZABU43@@Z ; glm::detail::functor1<double,double,2,glm::tvec3>::call

; 168  : 		
; 169  : 		this->w = c.x * c.y * c.z + s.x * s.y * s.z;

	movsd	xmm5, QWORD PTR _s$[ebp+8]
	add	esp, 24					; 00000018H
	movsd	xmm4, QWORD PTR _s$[ebp]
	movapd	xmm7, xmm5
	movsd	xmm6, QWORD PTR _c$[ebp+8]

; 170  : 		this->x = s.x * c.y * c.z - c.x * s.y * s.z;
; 171  : 		this->y = c.x * s.y * c.z + s.x * c.y * s.z;
; 172  : 		this->z = c.x * c.y * s.z - s.x * s.y * c.z;
; 173  : 	}

	mov	eax, edi
	mulsd	xmm6, QWORD PTR _c$[ebp]
	movsd	xmm3, QWORD PTR _s$[ebp+16]
	movsd	xmm2, QWORD PTR _c$[ebp+16]
	mulsd	xmm5, QWORD PTR _c$[ebp]
	mulsd	xmm7, xmm4
	movapd	xmm0, xmm6
	mulsd	xmm4, QWORD PTR _c$[ebp+8]
	mulsd	xmm0, xmm2
	movapd	xmm1, xmm7
	mulsd	xmm6, xmm3
	mulsd	xmm1, xmm3
	mulsd	xmm7, xmm2
	addsd	xmm1, xmm0
	movapd	xmm0, xmm5
	mulsd	xmm0, xmm3
	mulsd	xmm5, xmm2
	subsd	xmm6, xmm7
	movsd	QWORD PTR [edi+24], xmm1
	movapd	xmm1, xmm4
	mulsd	xmm1, xmm2
	mulsd	xmm4, xmm3
	movsd	QWORD PTR [edi+16], xmm6
	subsd	xmm1, xmm0
	addsd	xmm4, xmm5
	movsd	QWORD PTR [edi], xmm1
	movsd	QWORD PTR [edi+8], xmm4
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tquat@N$01@glm@@QAE@ABU?$tvec3@N$01@1@@Z ENDP	; glm::tquat<double,2>::tquat<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@N$01@glm@@QAE@ABU?$tvec3@N$01@1@0@Z
_TEXT	SEGMENT
$T1 = -64						; size = 32
_q$ = -32						; size = 32
_u$ = 8							; size = 4
_v$ = 12						; size = 4
??0?$tquat@N$01@glm@@QAE@ABU?$tvec3@N$01@1@0@Z PROC	; glm::tquat<double,2>::tquat<double,2>, COMDAT
; _this$ = ecx

; 155  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H

; 156  : 		tvec3<T, P> const LocalW(cross(u, v));

	mov	eax, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR _u$[ebp]
	push	ebx
	push	esi
	movsd	xmm5, QWORD PTR [eax+8]
	mov	ebx, ecx
	movsd	xmm6, QWORD PTR [edx+16]
	movapd	xmm0, xmm5
	movsd	xmm4, QWORD PTR [eax+16]
	mulsd	xmm4, QWORD PTR [edx+8]
	push	edi
	movsd	xmm3, QWORD PTR [edx]
	movsd	xmm2, QWORD PTR [eax]
	movapd	xmm1, xmm3
	mulsd	xmm0, xmm6
	mulsd	xmm1, xmm5

; 157  : 		T Dot = detail::compute_dot<tvec3, T, P, detail::is_aligned<P>::value>::call(u, v);

	mulsd	xmm5, QWORD PTR [edx+8]
	subsd	xmm4, xmm0
	mulsd	xmm2, xmm6
	mulsd	xmm6, QWORD PTR [eax+16]
	movapd	xmm0, xmm3
	mulsd	xmm3, QWORD PTR [eax]
	mulsd	xmm0, QWORD PTR [eax+16]

; 158  : 		tquat<T, P> q(T(1) + Dot, LocalW.x, LocalW.y, LocalW.z);

	movsd	QWORD PTR _q$[ebp], xmm4
	addsd	xmm5, xmm3
	subsd	xmm2, xmm0
	movsd	xmm0, QWORD PTR [eax]
	mulsd	xmm0, QWORD PTR [edx+8]

; 159  : 
; 160  : 		*this = normalize(q);

	lea	eax, DWORD PTR _q$[ebp]
	push	eax
	addsd	xmm5, xmm6
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	subsd	xmm1, xmm0
	movsd	QWORD PTR _q$[ebp+8], xmm2
	addsd	xmm5, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR _q$[ebp+16], xmm1
	movsd	QWORD PTR _q$[ebp+24], xmm5
	call	??$normalize@N$01@glm@@YA?AU?$tquat@N$01@0@ABU10@@Z ; glm::normalize<double,2>
	pop	ecx
	pop	ecx
	push	8
	pop	ecx
	mov	esi, eax
	mov	edi, ebx
	rep movsd
	pop	edi
	pop	esi

; 161  : 	}

	mov	eax, ebx
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$tquat@N$01@glm@@QAE@ABU?$tvec3@N$01@1@0@Z ENDP	; glm::tquat<double,2>::tquat<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??B?$tquat@N$01@glm@@QAE?AU?$tmat4x4@N$01@1@XZ
_TEXT	SEGMENT
$T1 = -76						; size = 72
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
??B?$tquat@N$01@glm@@QAE?AU?$tmat4x4@N$01@1@XZ PROC	; glm::tquat<double,2>::operator glm::tmat4x4<double,2>, COMDAT
; _this$ = ecx

; 196  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]

; 197  : 		return mat4_cast(*this);

	lea	eax, DWORD PTR $T1[ebp]
	push	ecx
	push	eax
	call	??$mat3_cast@N$01@glm@@YA?AU?$tmat3x3@N$01@0@ABU?$tquat@N$01@0@@Z ; glm::mat3_cast<double,2>
	pop	ecx
	pop	ecx
	push	eax
	mov	ecx, esi
	call	??0?$tmat4x4@N$01@glm@@QAE@ABU?$tmat3x3@N$01@1@@Z ; glm::tmat4x4<double,2>::tmat4x4<double,2>

; 198  : 	}

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	mov	eax, esi
	xor	ecx, ebp
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
??B?$tquat@N$01@glm@@QAE?AU?$tmat4x4@N$01@1@XZ ENDP	; glm::tquat<double,2>::operator glm::tmat4x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??B?$tquat@N$01@glm@@QAE?AU?$tmat3x3@N$01@1@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
??B?$tquat@N$01@glm@@QAE?AU?$tmat3x3@N$01@1@XZ PROC	; glm::tquat<double,2>::operator glm::tmat3x3<double,2>, COMDAT
; _this$ = ecx

; 190  : 	{

	push	ebp
	mov	ebp, esp

; 191  : 		return mat3_cast(*this);

	push	ecx
	push	DWORD PTR ___$ReturnUdt$[ebp]
	call	??$mat3_cast@N$01@glm@@YA?AU?$tmat3x3@N$01@0@ABU?$tquat@N$01@0@@Z ; glm::mat3_cast<double,2>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	ecx
	pop	ecx

; 192  : 	}

	pop	ebp
	ret	4
??B?$tquat@N$01@glm@@QAE?AU?$tmat3x3@N$01@1@XZ ENDP	; glm::tquat<double,2>::operator glm::tmat3x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@N$01@glm@@QAE@ABN000@Z
_TEXT	SEGMENT
_w$ = 8							; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_z$ = 20						; size = 4
??0?$tquat@N$01@glm@@QAE@ABN000@Z PROC			; glm::tquat<double,2>::tquat<double,2>, COMDAT
; _this$ = ecx

; 122  : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _x$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR _y$[ebp]
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR _z$[ebp]
	movsd	QWORD PTR [ecx+8], xmm0
	movsd	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR _w$[ebp]
	movsd	QWORD PTR [ecx+16], xmm0
	movsd	xmm0, QWORD PTR [eax]
	mov	eax, ecx
	movsd	QWORD PTR [ecx+24], xmm0
	pop	ebp
	ret	16					; 00000010H
??0?$tquat@N$01@glm@@QAE@ABN000@Z ENDP			; glm::tquat<double,2>::tquat<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@N$01@glm@@QAE@ABNABU?$tvec3@N$01@1@@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_v$ = 12						; size = 4
??0?$tquat@N$01@glm@@QAE@ABNABU?$tvec3@N$01@1@@Z PROC	; glm::tquat<double,2>::tquat<double,2>, COMDAT
; _this$ = ecx

; 117  : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _v$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	QWORD PTR [ecx+8], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	mov	eax, DWORD PTR _s$[ebp]
	movsd	QWORD PTR [ecx+16], xmm0
	movsd	xmm0, QWORD PTR [eax]
	mov	eax, ecx
	movsd	QWORD PTR [ecx+24], xmm0
	pop	ebp
	ret	8
??0?$tquat@N$01@glm@@QAE@ABNABU?$tvec3@N$01@1@@Z ENDP	; glm::tquat<double,2>::tquat<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@N$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tquat@N$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tquat<double,2>::tquat<double,2>, COMDAT
; _this$ = ecx

; 112  : 	{}

	mov	eax, ecx
	ret	4
??0?$tquat@N$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tquat<double,2>::tquat<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tquat@N$01@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tquat@N$01@glm@@QAE@ABU01@@Z PROC			; glm::tquat<double,2>::tquat<double,2>, COMDAT
; _this$ = ecx

; 238  : template struct tquat<float64, lowp>;

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ___that$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	QWORD PTR [ecx+8], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR [ecx+16], xmm0
	movsd	xmm0, QWORD PTR [eax+24]
	mov	eax, ecx
	movsd	QWORD PTR [ecx+24], xmm0
	pop	ebp
	ret	4
??0?$tquat@N$01@glm@@QAE@ABU01@@Z ENDP			; glm::tquat<double,2>::tquat<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@N$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tquat@N$01@glm@@QAE@XZ PROC			; glm::tquat<double,2>::tquat<double,2>, COMDAT
; _this$ = ecx

; 92   : 		{}

	xorps	xmm0, xmm0
	mov	eax, ecx
	movups	XMMWORD PTR [ecx], xmm0
	movsd	QWORD PTR [ecx+16], xmm0
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR [ecx+24], xmm0
	ret	0
??0?$tquat@N$01@glm@@QAE@XZ ENDP			; glm::tquat<double,2>::tquat<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??A?$tquat@N$01@glm@@QBEABNH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tquat@N$01@glm@@QBEABNH@Z PROC			; glm::tquat<double,2>::operator[], COMDAT
; _this$ = ecx

; 79   : 	{

	push	ebp
	mov	ebp, esp

; 80   : 		assert(i >= 0 && i < this->length());
; 81   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 82   : 	}

	pop	ebp
	ret	4
??A?$tquat@N$01@glm@@QBEABNH@Z ENDP			; glm::tquat<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??A?$tquat@N$01@glm@@QAEAANH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tquat@N$01@glm@@QAEAANH@Z PROC			; glm::tquat<double,2>::operator[], COMDAT
; _this$ = ecx

; 72   : 	{

	push	ebp
	mov	ebp, esp

; 73   : 		assert(i >= 0 && i < this->length());
; 74   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 75   : 	}

	pop	ebp
	ret	4
??A?$tquat@N$01@glm@@QAEAANH@Z ENDP			; glm::tquat<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.hpp
;	COMDAT ?length@?$tquat@N$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tquat@N$01@glm@@SAHXZ PROC			; glm::tquat<double,2>::length, COMDAT

; 74   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	push	4
	pop	eax
	ret	0
?length@?$tquat@N$01@glm@@SAHXZ ENDP			; glm::tquat<double,2>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tquat@M$01@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tquat@M$01@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tquat<float,2>::operator=, COMDAT
; _this$ = ecx

; 237  : template struct tquat<float32, lowp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	mov	edi, ecx
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tquat@M$01@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tquat<float,2>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@M$01@glm@@QAE@ABU?$tmat4x4@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -56						; size = 16
$T2 = -40						; size = 36
__$ArrayPad$ = -4					; size = 4
_m$ = 8							; size = 4
??0?$tquat@M$01@glm@@QAE@ABU?$tmat4x4@M$01@1@@Z PROC	; glm::tquat<float,2>::tquat<float,2>, COMDAT
; _this$ = ecx

; 183  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	eax, DWORD PTR _m$[ebp]
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx

; 184  : 		*this = quat_cast(m);

	lea	ecx, DWORD PTR $T2[ebp]
	push	eax
	call	??0?$tmat3x3@M$01@glm@@QAE@ABU?$tmat4x4@M$01@1@@Z ; glm::tmat3x3<float,2>::tmat3x3<float,2>
	push	eax
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	??$quat_cast@M$01@glm@@YA?AU?$tquat@M$01@0@ABU?$tmat3x3@M$01@0@@Z ; glm::quat_cast<float,2>
	mov	edi, ebx
	lea	esi, DWORD PTR $T1[ebp]
	pop	ecx
	pop	ecx

; 185  : 	}

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	mov	eax, ebx
	movsd
	xor	ecx, ebp
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tquat@M$01@glm@@QAE@ABU?$tmat4x4@M$01@1@@Z ENDP	; glm::tquat<float,2>::tquat<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@M$01@glm@@QAE@ABU?$tmat3x3@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tquat@M$01@glm@@QAE@ABU?$tmat3x3@M$01@1@@Z PROC	; glm::tquat<float,2>::tquat<float,2>, COMDAT
; _this$ = ecx

; 177  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 178  : 		*this = quat_cast(m);

	lea	eax, DWORD PTR $T1[ebp]
	push	ebx
	push	esi
	push	edi
	push	DWORD PTR _m$[ebp]
	mov	ebx, ecx
	push	eax
	call	??$quat_cast@M$01@glm@@YA?AU?$tquat@M$01@0@ABU?$tmat3x3@M$01@0@@Z ; glm::quat_cast<float,2>
	mov	esi, eax
	mov	edi, ebx
	pop	ecx
	pop	ecx

; 179  : 	}

	mov	eax, ebx
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tquat@M$01@glm@@QAE@ABU?$tmat3x3@M$01@1@@Z ENDP	; glm::tquat<float,2>::tquat<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@M$01@glm@@QAE@ABU?$tvec3@M$01@1@@Z
_TEXT	SEGMENT
_s$ = -36						; size = 12
$T1 = -24						; size = 12
$T2 = -24						; size = 12
_c$ = -12						; size = 12
_eulerAngle$ = 8					; size = 4
??0?$tquat@M$01@glm@@QAE@ABU?$tvec3@M$01@1@@Z PROC	; glm::tquat<float,2>::tquat<float,2>, COMDAT
; _this$ = ecx

; 165  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H

; 166  : 		tvec3<T, P> c = glm::cos(eulerAngle * T(0.5));

	movss	xmm1, DWORD PTR __real@3f000000
	lea	eax, DWORD PTR $T2[ebp]
	push	esi
	mov	esi, DWORD PTR _eulerAngle$[ebp]
	push	edi
	push	eax
	lea	eax, DWORD PTR _c$[ebp]
	mov	edi, ecx
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, xmm1
	push	OFFSET ?cos@@YAMM@Z			; cos
	push	eax
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [esi+4]
	mulss	xmm0, xmm1
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [esi+8]
	mulss	xmm0, xmm1
	movss	DWORD PTR $T2[ebp+8], xmm0
	call	?call@?$functor1@MM$01Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$01@3@P6AMM@ZABU43@@Z ; glm::detail::functor1<float,float,2,glm::tvec3>::call

; 167  : 		tvec3<T, P> s = glm::sin(eulerAngle * T(0.5));

	movss	xmm1, DWORD PTR __real@3f000000
	lea	eax, DWORD PTR $T1[ebp]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, xmm1
	push	eax
	lea	eax, DWORD PTR _s$[ebp]
	push	OFFSET ?sin@@YAMM@Z			; sin
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [esi+4]
	mulss	xmm0, xmm1
	push	eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR [esi+8]
	mulss	xmm0, xmm1
	movss	DWORD PTR $T1[ebp+8], xmm0
	call	?call@?$functor1@MM$01Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$01@3@P6AMM@ZABU43@@Z ; glm::detail::functor1<float,float,2,glm::tvec3>::call

; 168  : 		
; 169  : 		this->w = c.x * c.y * c.z + s.x * s.y * s.z;

	movss	xmm5, DWORD PTR _s$[ebp+4]
	add	esp, 24					; 00000018H
	movss	xmm4, DWORD PTR _s$[ebp]
	movaps	xmm7, xmm5
	movss	xmm6, DWORD PTR _c$[ebp+4]

; 170  : 		this->x = s.x * c.y * c.z - c.x * s.y * s.z;
; 171  : 		this->y = c.x * s.y * c.z + s.x * c.y * s.z;
; 172  : 		this->z = c.x * c.y * s.z - s.x * s.y * c.z;
; 173  : 	}

	mov	eax, edi
	mulss	xmm6, DWORD PTR _c$[ebp]
	movss	xmm3, DWORD PTR _s$[ebp+8]
	movss	xmm2, DWORD PTR _c$[ebp+8]
	mulss	xmm5, DWORD PTR _c$[ebp]
	movaps	xmm0, xmm6
	mulss	xmm7, xmm4
	mulss	xmm4, DWORD PTR _c$[ebp+4]
	movaps	xmm1, xmm7
	mulss	xmm0, xmm2
	mulss	xmm1, xmm3
	mulss	xmm6, xmm3
	addss	xmm1, xmm0
	mulss	xmm7, xmm2
	movaps	xmm0, xmm5
	mulss	xmm5, xmm2
	mulss	xmm0, xmm3
	subss	xmm6, xmm7
	movss	DWORD PTR [edi+12], xmm1
	movaps	xmm1, xmm4
	mulss	xmm1, xmm2
	mulss	xmm4, xmm3
	subss	xmm1, xmm0
	movss	DWORD PTR [edi+8], xmm6
	addss	xmm4, xmm5
	movss	DWORD PTR [edi], xmm1
	movss	DWORD PTR [edi+4], xmm4
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tquat@M$01@glm@@QAE@ABU?$tvec3@M$01@1@@Z ENDP	; glm::tquat<float,2>::tquat<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@M$01@glm@@QAE@ABU?$tvec3@M$01@1@0@Z
_TEXT	SEGMENT
$T1 = -32						; size = 16
_q$ = -16						; size = 16
_u$ = 8							; size = 4
_v$ = 12						; size = 4
??0?$tquat@M$01@glm@@QAE@ABU?$tvec3@M$01@1@0@Z PROC	; glm::tquat<float,2>::tquat<float,2>, COMDAT
; _this$ = ecx

; 155  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H

; 156  : 		tvec3<T, P> const LocalW(cross(u, v));

	mov	eax, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR _u$[ebp]
	push	ebx
	push	esi
	movss	xmm5, DWORD PTR [eax+4]
	mov	ebx, ecx
	movss	xmm6, DWORD PTR [edx+8]
	movaps	xmm0, xmm5
	movss	xmm4, DWORD PTR [eax+8]
	mulss	xmm4, DWORD PTR [edx+4]
	push	edi
	movss	xmm3, DWORD PTR [edx]
	movss	xmm2, DWORD PTR [eax]
	movaps	xmm1, xmm3
	mulss	xmm0, xmm6
	mulss	xmm1, xmm5

; 157  : 		T Dot = detail::compute_dot<tvec3, T, P, detail::is_aligned<P>::value>::call(u, v);

	mulss	xmm5, DWORD PTR [edx+4]
	subss	xmm4, xmm0
	movaps	xmm0, xmm3
	mulss	xmm2, xmm6
	mulss	xmm3, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [eax+8]
	mulss	xmm6, DWORD PTR [eax+8]
	addss	xmm5, xmm3
	subss	xmm2, xmm0

; 158  : 		tquat<T, P> q(T(1) + Dot, LocalW.x, LocalW.y, LocalW.z);

	movss	DWORD PTR _q$[ebp], xmm4
	movss	xmm0, DWORD PTR [eax]

; 159  : 
; 160  : 		*this = normalize(q);

	lea	eax, DWORD PTR _q$[ebp]
	mulss	xmm0, DWORD PTR [edx+4]
	push	eax
	addss	xmm5, xmm6
	lea	eax, DWORD PTR $T1[ebp]
	movss	DWORD PTR _q$[ebp+4], xmm2
	subss	xmm1, xmm0
	push	eax
	addss	xmm5, DWORD PTR __real@3f800000
	movss	DWORD PTR _q$[ebp+8], xmm1
	movss	DWORD PTR _q$[ebp+12], xmm5
	call	??$normalize@M$01@glm@@YA?AU?$tquat@M$01@0@ABU10@@Z ; glm::normalize<float,2>
	mov	esi, eax
	mov	edi, ebx
	pop	ecx
	pop	ecx

; 161  : 	}

	mov	eax, ebx
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$tquat@M$01@glm@@QAE@ABU?$tvec3@M$01@1@0@Z ENDP	; glm::tquat<float,2>::tquat<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??B?$tquat@M$01@glm@@QAE?AU?$tmat4x4@M$01@1@XZ
_TEXT	SEGMENT
$T1 = -40						; size = 36
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
??B?$tquat@M$01@glm@@QAE?AU?$tmat4x4@M$01@1@XZ PROC	; glm::tquat<float,2>::operator glm::tmat4x4<float,2>, COMDAT
; _this$ = ecx

; 196  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]

; 197  : 		return mat4_cast(*this);

	lea	eax, DWORD PTR $T1[ebp]
	push	ecx
	push	eax
	call	??$mat3_cast@M$01@glm@@YA?AU?$tmat3x3@M$01@0@ABU?$tquat@M$01@0@@Z ; glm::mat3_cast<float,2>
	pop	ecx
	pop	ecx
	push	eax
	mov	ecx, esi
	call	??0?$tmat4x4@M$01@glm@@QAE@ABU?$tmat3x3@M$01@1@@Z ; glm::tmat4x4<float,2>::tmat4x4<float,2>

; 198  : 	}

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	mov	eax, esi
	xor	ecx, ebp
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
??B?$tquat@M$01@glm@@QAE?AU?$tmat4x4@M$01@1@XZ ENDP	; glm::tquat<float,2>::operator glm::tmat4x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??B?$tquat@M$01@glm@@QAE?AU?$tmat3x3@M$01@1@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
??B?$tquat@M$01@glm@@QAE?AU?$tmat3x3@M$01@1@XZ PROC	; glm::tquat<float,2>::operator glm::tmat3x3<float,2>, COMDAT
; _this$ = ecx

; 190  : 	{

	push	ebp
	mov	ebp, esp

; 191  : 		return mat3_cast(*this);

	push	ecx
	push	DWORD PTR ___$ReturnUdt$[ebp]
	call	??$mat3_cast@M$01@glm@@YA?AU?$tmat3x3@M$01@0@ABU?$tquat@M$01@0@@Z ; glm::mat3_cast<float,2>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	ecx
	pop	ecx

; 192  : 	}

	pop	ebp
	ret	4
??B?$tquat@M$01@glm@@QAE?AU?$tmat3x3@M$01@1@XZ ENDP	; glm::tquat<float,2>::operator glm::tmat3x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@M$01@glm@@QAE@ABM000@Z
_TEXT	SEGMENT
_w$ = 8							; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_z$ = 20						; size = 4
??0?$tquat@M$01@glm@@QAE@ABM000@Z PROC			; glm::tquat<float,2>::tquat<float,2>, COMDAT
; _this$ = ecx

; 122  : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _y$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _w$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, ecx
	pop	ebp
	ret	16					; 00000010H
??0?$tquat@M$01@glm@@QAE@ABM000@Z ENDP			; glm::tquat<float,2>::tquat<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@M$01@glm@@QAE@ABMABU?$tvec3@M$01@1@@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_v$ = 12						; size = 4
??0?$tquat@M$01@glm@@QAE@ABMABU?$tvec3@M$01@1@@Z PROC	; glm::tquat<float,2>::tquat<float,2>, COMDAT
; _this$ = ecx

; 117  : 	{}

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, ecx
	pop	ebp
	ret	8
??0?$tquat@M$01@glm@@QAE@ABMABU?$tvec3@M$01@1@@Z ENDP	; glm::tquat<float,2>::tquat<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@M$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tquat@M$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tquat<float,2>::tquat<float,2>, COMDAT
; _this$ = ecx

; 112  : 	{}

	mov	eax, ecx
	ret	4
??0?$tquat@M$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tquat<float,2>::tquat<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tquat@M$01@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tquat@M$01@glm@@QAE@ABU01@@Z PROC			; glm::tquat<float,2>::tquat<float,2>, COMDAT
; _this$ = ecx

; 237  : template struct tquat<float32, lowp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tquat@M$01@glm@@QAE@ABU01@@Z ENDP			; glm::tquat<float,2>::tquat<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@M$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tquat@M$01@glm@@QAE@XZ PROC			; glm::tquat<float,2>::tquat<float,2>, COMDAT
; _this$ = ecx

; 92   : 		{}

	and	DWORD PTR [ecx], 0
	mov	eax, ecx
	and	DWORD PTR [ecx+4], 0
	and	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 1065353216		; 3f800000H
	ret	0
??0?$tquat@M$01@glm@@QAE@XZ ENDP			; glm::tquat<float,2>::tquat<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??A?$tquat@M$01@glm@@QBEABMH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tquat@M$01@glm@@QBEABMH@Z PROC			; glm::tquat<float,2>::operator[], COMDAT
; _this$ = ecx

; 79   : 	{

	push	ebp
	mov	ebp, esp

; 80   : 		assert(i >= 0 && i < this->length());
; 81   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 82   : 	}

	pop	ebp
	ret	4
??A?$tquat@M$01@glm@@QBEABMH@Z ENDP			; glm::tquat<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.inl
;	COMDAT ??A?$tquat@M$01@glm@@QAEAAMH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tquat@M$01@glm@@QAEAAMH@Z PROC			; glm::tquat<float,2>::operator[], COMDAT
; _this$ = ecx

; 72   : 	{

	push	ebp
	mov	ebp, esp

; 73   : 		assert(i >= 0 && i < this->length());
; 74   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 75   : 	}

	pop	ebp
	ret	4
??A?$tquat@M$01@glm@@QAEAAMH@Z ENDP			; glm::tquat<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\gtc\quaternion.hpp
;	COMDAT ?length@?$tquat@M$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tquat@M$01@glm@@SAHXZ PROC			; glm::tquat<float,2>::length, COMDAT

; 74   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	push	4
	pop	eax
	ret	0
?length@?$tquat@M$01@glm@@SAHXZ ENDP			; glm::tquat<float,2>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??F?$tmat4x4@N$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat4x4@N$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tmat4x4<double,0>::operator--, COMDAT
; _this$ = ecx

; 394  : 	{

	push	ebp
	mov	ebp, esp

; 395  : 		tmat4x4<T, P> Result(*this);
; 396  : 		--*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	mov	edx, ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	movups	xmm0, XMMWORD PTR [edx]
	push	32					; 00000020H
	pop	ecx
	subpd	xmm0, xmm1
	mov	esi, edx
	mov	edi, eax
	rep movsd
	movups	XMMWORD PTR [edx], xmm0
	pop	edi
	movups	xmm0, XMMWORD PTR [edx+16]
	pop	esi
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+16], xmm0
	movups	xmm0, XMMWORD PTR [edx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+32], xmm0
	movups	xmm0, XMMWORD PTR [edx+48]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+48], xmm0
	movups	xmm0, XMMWORD PTR [edx+64]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+64], xmm0
	movups	xmm0, XMMWORD PTR [edx+80]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+80], xmm0
	movups	xmm0, XMMWORD PTR [edx+96]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+96], xmm0
	movups	xmm0, XMMWORD PTR [edx+112]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+112], xmm0

; 397  : 		return Result;
; 398  : 	}

	pop	ebp
	ret	8
??F?$tmat4x4@N$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tmat4x4<double,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??E?$tmat4x4@N$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat4x4@N$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tmat4x4<double,0>::operator++, COMDAT
; _this$ = ecx

; 386  : 	{

	push	ebp
	mov	ebp, esp

; 387  : 		tmat4x4<T, P> Result(*this);
; 388  : 		++*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	mov	edx, ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	movups	xmm0, XMMWORD PTR [edx]
	push	32					; 00000020H
	pop	ecx
	addpd	xmm0, xmm1
	mov	esi, edx
	mov	edi, eax
	rep movsd
	movups	XMMWORD PTR [edx], xmm0
	pop	edi
	movups	xmm0, XMMWORD PTR [edx+16]
	pop	esi
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+16], xmm0
	movups	xmm0, XMMWORD PTR [edx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+32], xmm0
	movups	xmm0, XMMWORD PTR [edx+48]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+48], xmm0
	movups	xmm0, XMMWORD PTR [edx+64]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+64], xmm0
	movups	xmm0, XMMWORD PTR [edx+80]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+80], xmm0
	movups	xmm0, XMMWORD PTR [edx+96]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+96], xmm0
	movups	xmm0, XMMWORD PTR [edx+112]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+112], xmm0

; 389  : 		return Result;
; 390  : 	}

	pop	ebp
	ret	8
??E?$tmat4x4@N$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tmat4x4<double,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??F?$tmat4x4@N$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat4x4@N$0A@@glm@@QAEAAU01@XZ PROC		; glm::tmat4x4<double,0>::operator--, COMDAT
; _this$ = ecx

; 377  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 378  : 		--this->value[1];
; 379  : 		--this->value[2];
; 380  : 		--this->value[3];
; 381  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	xmm0, XMMWORD PTR [ecx+64]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	xmm0, XMMWORD PTR [ecx+80]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+80], xmm0
	movups	xmm0, XMMWORD PTR [ecx+96]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+96], xmm0
	movups	xmm0, XMMWORD PTR [ecx+112]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+112], xmm0

; 382  : 	}

	ret	0
??F?$tmat4x4@N$0A@@glm@@QAEAAU01@XZ ENDP		; glm::tmat4x4<double,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??E?$tmat4x4@N$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat4x4@N$0A@@glm@@QAEAAU01@XZ PROC		; glm::tmat4x4<double,0>::operator++, COMDAT
; _this$ = ecx

; 367  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 368  : 		++this->value[1];
; 369  : 		++this->value[2];
; 370  : 		++this->value[3];
; 371  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	xmm0, XMMWORD PTR [ecx+64]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	xmm0, XMMWORD PTR [ecx+80]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+80], xmm0
	movups	xmm0, XMMWORD PTR [ecx+96]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+96], xmm0
	movups	xmm0, XMMWORD PTR [ecx+112]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+112], xmm0

; 372  : 	}

	ret	0
??E?$tmat4x4@N$0A@@glm@@QAEAAU01@XZ ENDP		; glm::tmat4x4<double,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tmat4x4@N$0A@@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tmat4x4@N$0A@@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tmat4x4<double,0>::operator=, COMDAT
; _this$ = ecx

; 234  : template struct tmat4x4<float64, highp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	32					; 00000020H
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tmat4x4@N$0A@@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tmat4x4<double,0>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??A?$tmat4x4@N$0A@@glm@@QBEABU?$tvec4@N$0A@@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat4x4@N$0A@@glm@@QBEABU?$tvec4@N$0A@@1@H@Z PROC	; glm::tmat4x4<double,0>::operator[], COMDAT
; _this$ = ecx

; 248  : 	{

	push	ebp
	mov	ebp, esp

; 249  : 		assert(i < this->length());
; 250  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	add	eax, ecx

; 251  : 	}

	pop	ebp
	ret	4
??A?$tmat4x4@N$0A@@glm@@QBEABU?$tvec4@N$0A@@1@H@Z ENDP	; glm::tmat4x4<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??A?$tmat4x4@N$0A@@glm@@QAEAAU?$tvec4@N$0A@@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat4x4@N$0A@@glm@@QAEAAU?$tvec4@N$0A@@1@H@Z PROC	; glm::tmat4x4<double,0>::operator[], COMDAT
; _this$ = ecx

; 241  : 	{

	push	ebp
	mov	ebp, esp

; 242  : 		assert(i < this->length());
; 243  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	add	eax, ecx

; 244  : 	}

	pop	ebp
	ret	4
??A?$tmat4x4@N$0A@@glm@@QAEAAU?$tvec4@N$0A@@1@H@Z ENDP	; glm::tmat4x4<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.hpp
;	COMDAT ?length@?$tmat4x4@N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat4x4@N$0A@@glm@@SAHXZ PROC			; glm::tmat4x4<double,0>::length, COMDAT

; 84   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	push	4
	pop	eax
	ret	0
?length@?$tmat4x4@N$0A@@glm@@SAHXZ ENDP			; glm::tmat4x4<double,0>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$0A@@glm@@QAE@ABU?$tmat4x3@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
$T3 = -32						; size = 32
$T4 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tmat4x4@N$0A@@glm@@QAE@ABU?$tmat4x3@N$0A@@1@@Z PROC ; glm::tmat4x4<double,0>::tmat4x4<double,0>, COMDAT
; _this$ = ecx

; 230  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xorps	xmm1, xmm1
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	3
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat4x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm1
	movups	XMMWORD PTR [eax], xmm1
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat4x4

; 231  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T4[ebp]
	push	8
	pop	edx
	movsd	QWORD PTR $T4[ebp+24], xmm1
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]
	mov	ecx, edx
	movups	XMMWORD PTR $T4[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR $T4[ebp+16], xmm0
	rep movsd

; 232  : 		this->value[1] = col_type(m[1], 0);

	movups	xmm0, XMMWORD PTR [eax+24]
	lea	edi, DWORD PTR [ebx+32]
	mov	ecx, edx
	movsd	QWORD PTR $T3[ebp+24], xmm1
	lea	esi, DWORD PTR $T3[ebp]
	movups	XMMWORD PTR $T3[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+40]
	movsd	QWORD PTR $T3[ebp+16], xmm0
	rep movsd

; 233  : 		this->value[2] = col_type(m[2], 0);

	movups	xmm0, XMMWORD PTR [eax+48]
	lea	edi, DWORD PTR [ebx+64]
	mov	ecx, edx
	movsd	QWORD PTR $T2[ebp+24], xmm1
	lea	esi, DWORD PTR $T2[ebp]
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+64]
	movsd	QWORD PTR $T2[ebp+16], xmm0
	rep movsd

; 234  : 		this->value[3] = col_type(m[3], 1);

	movups	xmm0, XMMWORD PTR [eax+72]
	lea	edi, DWORD PTR [ebx+96]
	mov	ecx, edx
	lea	esi, DWORD PTR $T1[ebp]
	movups	XMMWORD PTR $T1[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+88]

; 235  : 	}

	mov	eax, ebx
	movsd	QWORD PTR $T1[ebp+16], xmm0
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR $T1[ebp+24], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x4@N$0A@@glm@@QAE@ABU?$tmat4x3@N$0A@@1@@Z ENDP ; glm::tmat4x4<double,0>::tmat4x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$0A@@glm@@QAE@ABU?$tmat3x4@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tmat4x4@N$0A@@glm@@QAE@ABU?$tmat3x4@N$0A@@1@@Z PROC ; glm::tmat4x4<double,0>::tmat4x4<double,0>, COMDAT
; _this$ = ecx

; 221  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xorps	xmm0, xmm0
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	3
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat4x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm0
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat4x4

; 222  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	mov	edi, ebx
	push	8
	pop	edx
	mov	esi, eax
	mov	ecx, edx
	rep movsd

; 223  : 		this->value[1] = m[1];

	lea	esi, DWORD PTR [eax+32]
	mov	ecx, edx
	lea	edi, DWORD PTR [ebx+32]
	xorps	xmm0, xmm0
	rep movsd

; 224  : 		this->value[2] = m[2];

	lea	esi, DWORD PTR [eax+64]
	mov	ecx, edx
	lea	edi, DWORD PTR [ebx+64]

; 225  : 		this->value[3] = col_type(0, 0, 0, 1);
; 226  : 	}

	mov	eax, ebx
	rep movsd
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ebx+96]
	mov	ecx, edx
	movaps	xmm0, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	lea	esi, DWORD PTR $T1[ebp]
	movupd	XMMWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x4@N$0A@@glm@@QAE@ABU?$tmat3x4@N$0A@@1@@Z ENDP ; glm::tmat4x4<double,0>::tmat4x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$0A@@glm@@QAE@ABU?$tmat4x2@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
$T3 = -32						; size = 32
$T4 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tmat4x4@N$0A@@glm@@QAE@ABU?$tmat4x2@N$0A@@1@@Z PROC ; glm::tmat4x4<double,0>::tmat4x4<double,0>, COMDAT
; _this$ = ecx

; 212  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xorps	xmm0, xmm0
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	3
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat4x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm0
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat4x4

; 213  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T4[ebp]
	push	8
	pop	edx
	mov	edi, ebx
	mov	ecx, edx
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR $T4[ebp], xmm0
	xorps	xmm0, xmm0
	movupd	XMMWORD PTR $T4[ebp+16], xmm0
	rep movsd

; 214  : 		this->value[1] = col_type(m[1], 0, 0);

	movups	xmm0, XMMWORD PTR [eax+16]
	lea	edi, DWORD PTR [ebx+32]
	mov	ecx, edx
	lea	esi, DWORD PTR $T3[ebp]

; 215  : 		this->value[2] = col_type(0, 0, 1, 0);
; 216  : 		this->value[3] = col_type(0, 0, 0, 1);
; 217  : 	}

	mov	eax, ebx
	movups	XMMWORD PTR $T3[ebp], xmm0
	xorps	xmm0, xmm0
	movupd	XMMWORD PTR $T3[ebp+16], xmm0
	rep movsd
	movupd	XMMWORD PTR $T2[ebp], xmm0
	lea	edi, DWORD PTR [ebx+64]
	mov	ecx, edx
	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	lea	esi, DWORD PTR $T2[ebp]
	movupd	XMMWORD PTR $T2[ebp+16], xmm0
	rep movsd
	xorps	xmm0, xmm0
	lea	edi, DWORD PTR [ebx+96]
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	mov	ecx, edx
	movaps	xmm0, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	movupd	XMMWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x4@N$0A@@glm@@QAE@ABU?$tmat4x2@N$0A@@1@@Z ENDP ; glm::tmat4x4<double,0>::tmat4x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$0A@@glm@@QAE@ABU?$tmat2x4@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tmat4x4@N$0A@@glm@@QAE@ABU?$tmat2x4@N$0A@@1@@Z PROC ; glm::tmat4x4<double,0>::tmat4x4<double,0>, COMDAT
; _this$ = ecx

; 203  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xorps	xmm0, xmm0
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	3
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat4x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm0
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat4x4

; 204  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	mov	edi, ebx
	push	8
	pop	edx
	mov	esi, eax
	mov	ecx, edx
	rep movsd
	xorps	xmm0, xmm0

; 205  : 		this->value[1] = m[1];

	lea	esi, DWORD PTR [eax+32]
	movupd	XMMWORD PTR $T2[ebp], xmm0
	lea	edi, DWORD PTR [ebx+32]
	mov	ecx, edx
	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000

; 206  : 		this->value[2] = col_type(0, 0, 1, 0);
; 207  : 		this->value[3] = col_type(0, 0, 0, 1);
; 208  : 	}

	mov	eax, ebx
	rep movsd
	movupd	XMMWORD PTR $T2[ebp+16], xmm0
	lea	edi, DWORD PTR [ebx+64]
	mov	ecx, edx
	lea	esi, DWORD PTR $T2[ebp]
	xorps	xmm0, xmm0
	rep movsd
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ebx+96]
	mov	ecx, edx
	movaps	xmm0, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	lea	esi, DWORD PTR $T1[ebp]
	movupd	XMMWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x4@N$0A@@glm@@QAE@ABU?$tmat2x4@N$0A@@1@@Z ENDP ; glm::tmat4x4<double,0>::tmat4x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$0A@@glm@@QAE@ABU?$tmat3x2@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
$T3 = -32						; size = 32
$T4 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tmat4x4@N$0A@@glm@@QAE@ABU?$tmat3x2@N$0A@@1@@Z PROC ; glm::tmat4x4<double,0>::tmat4x4<double,0>, COMDAT
; _this$ = ecx

; 194  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xorps	xmm0, xmm0
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	3
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat4x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm0
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat4x4

; 195  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T4[ebp]
	push	8
	pop	edx
	mov	edi, ebx
	mov	ecx, edx
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR $T4[ebp], xmm0
	xorps	xmm0, xmm0
	movupd	XMMWORD PTR $T4[ebp+16], xmm0
	rep movsd

; 196  : 		this->value[1] = col_type(m[1], 0, 0);

	movups	xmm0, XMMWORD PTR [eax+16]
	lea	edi, DWORD PTR [ebx+32]
	mov	ecx, edx
	lea	esi, DWORD PTR $T3[ebp]
	movups	XMMWORD PTR $T3[ebp], xmm0
	xorps	xmm0, xmm0
	movupd	XMMWORD PTR $T3[ebp+16], xmm0
	rep movsd

; 197  : 		this->value[2] = col_type(m[2], 1, 0);

	movups	xmm0, XMMWORD PTR [eax+32]
	lea	edi, DWORD PTR [ebx+64]
	mov	ecx, edx
	lea	esi, DWORD PTR $T2[ebp]

; 198  : 		this->value[3] = col_type(0, 0, 0, 1);
; 199  : 	}

	mov	eax, ebx
	movups	XMMWORD PTR $T2[ebp], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	movupd	XMMWORD PTR $T2[ebp+16], xmm0
	rep movsd
	xorps	xmm0, xmm0
	lea	edi, DWORD PTR [ebx+96]
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	mov	ecx, edx
	movaps	xmm0, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	movupd	XMMWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x4@N$0A@@glm@@QAE@ABU?$tmat3x2@N$0A@@1@@Z ENDP ; glm::tmat4x4<double,0>::tmat4x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$0A@@glm@@QAE@ABU?$tmat2x3@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
$T3 = -32						; size = 32
$T4 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tmat4x4@N$0A@@glm@@QAE@ABU?$tmat2x3@N$0A@@1@@Z PROC ; glm::tmat4x4<double,0>::tmat4x4<double,0>, COMDAT
; _this$ = ecx

; 185  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xorps	xmm1, xmm1
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	3
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat4x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm1
	movups	XMMWORD PTR [eax], xmm1
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat4x4

; 186  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T4[ebp]
	push	8
	pop	edx
	movsd	QWORD PTR $T4[ebp+24], xmm1
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]
	mov	ecx, edx
	movups	XMMWORD PTR $T4[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR $T4[ebp+16], xmm0
	rep movsd

; 187  : 		this->value[1] = col_type(m[1], 0);

	movups	xmm0, XMMWORD PTR [eax+24]
	lea	edi, DWORD PTR [ebx+32]
	mov	ecx, edx
	movsd	QWORD PTR $T3[ebp+24], xmm1
	lea	esi, DWORD PTR $T3[ebp]
	movups	XMMWORD PTR $T3[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+40]

; 188  : 		this->value[2] = col_type(0, 0, 1, 0);
; 189  : 		this->value[3] = col_type(0, 0, 0, 1);
; 190  : 	}

	mov	eax, ebx
	movsd	QWORD PTR $T3[ebp+16], xmm0
	xorps	xmm0, xmm0
	rep movsd
	movupd	XMMWORD PTR $T2[ebp], xmm0
	lea	edi, DWORD PTR [ebx+64]
	mov	ecx, edx
	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	lea	esi, DWORD PTR $T2[ebp]
	movupd	XMMWORD PTR $T2[ebp+16], xmm0
	rep movsd
	xorps	xmm0, xmm0
	lea	edi, DWORD PTR [ebx+96]
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	mov	ecx, edx
	movaps	xmm0, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	movupd	XMMWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x4@N$0A@@glm@@QAE@ABU?$tmat2x3@N$0A@@1@@Z ENDP ; glm::tmat4x4<double,0>::tmat4x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$0A@@glm@@QAE@ABU?$tmat3x3@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
$T3 = -32						; size = 32
$T4 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tmat4x4@N$0A@@glm@@QAE@ABU?$tmat3x3@N$0A@@1@@Z PROC ; glm::tmat4x4<double,0>::tmat4x4<double,0>, COMDAT
; _this$ = ecx

; 176  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xorps	xmm1, xmm1
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	3
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat4x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm1
	movups	XMMWORD PTR [eax], xmm1
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat4x4

; 177  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T4[ebp]
	push	8
	pop	edx
	movsd	QWORD PTR $T4[ebp+24], xmm1
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]
	mov	ecx, edx
	movups	XMMWORD PTR $T4[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR $T4[ebp+16], xmm0
	rep movsd

; 178  : 		this->value[1] = col_type(m[1], 0);

	movups	xmm0, XMMWORD PTR [eax+24]
	lea	edi, DWORD PTR [ebx+32]
	mov	ecx, edx
	movsd	QWORD PTR $T3[ebp+24], xmm1
	lea	esi, DWORD PTR $T3[ebp]
	movups	XMMWORD PTR $T3[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+40]
	movsd	QWORD PTR $T3[ebp+16], xmm0
	rep movsd

; 179  : 		this->value[2] = col_type(m[2], 0);

	movups	xmm0, XMMWORD PTR [eax+48]
	lea	edi, DWORD PTR [ebx+64]
	mov	ecx, edx
	movsd	QWORD PTR $T2[ebp+24], xmm1
	lea	esi, DWORD PTR $T2[ebp]
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+64]

; 180  : 		this->value[3] = col_type(0, 0, 0, 1);
; 181  : 	}

	mov	eax, ebx
	movsd	QWORD PTR $T2[ebp+16], xmm0
	xorps	xmm0, xmm0
	rep movsd
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ebx+96]
	mov	ecx, edx
	movaps	xmm0, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	lea	esi, DWORD PTR $T1[ebp]
	movupd	XMMWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x4@N$0A@@glm@@QAE@ABU?$tmat3x3@N$0A@@1@@Z ENDP ; glm::tmat4x4<double,0>::tmat4x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$0A@@glm@@QAE@ABU?$tmat2x2@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
$T3 = -32						; size = 32
$T4 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tmat4x4@N$0A@@glm@@QAE@ABU?$tmat2x2@N$0A@@1@@Z PROC ; glm::tmat4x4<double,0>::tmat4x4<double,0>, COMDAT
; _this$ = ecx

; 167  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xorps	xmm0, xmm0
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	3
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat4x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm0
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat4x4

; 168  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T4[ebp]
	push	8
	pop	edx
	mov	edi, ebx
	mov	ecx, edx
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR $T4[ebp], xmm0
	xorps	xmm0, xmm0
	movupd	XMMWORD PTR $T4[ebp+16], xmm0
	rep movsd

; 169  : 		this->value[1] = col_type(m[1], 0, 0);

	movups	xmm0, XMMWORD PTR [eax+16]
	lea	edi, DWORD PTR [ebx+32]
	mov	ecx, edx
	lea	esi, DWORD PTR $T3[ebp]

; 170  : 		this->value[2] = col_type(0, 0, 1, 0);
; 171  : 		this->value[3] = col_type(0, 0, 0, 1);
; 172  : 	}

	mov	eax, ebx
	movups	XMMWORD PTR $T3[ebp], xmm0
	xorps	xmm0, xmm0
	movupd	XMMWORD PTR $T3[ebp+16], xmm0
	rep movsd
	movupd	XMMWORD PTR $T2[ebp], xmm0
	lea	edi, DWORD PTR [ebx+64]
	mov	ecx, edx
	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	lea	esi, DWORD PTR $T2[ebp]
	movupd	XMMWORD PTR $T2[ebp+16], xmm0
	rep movsd
	xorps	xmm0, xmm0
	lea	edi, DWORD PTR [ebx+96]
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	mov	ecx, edx
	movaps	xmm0, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	movupd	XMMWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x4@N$0A@@glm@@QAE@ABU?$tmat2x2@N$0A@@1@@Z ENDP ; glm::tmat4x4<double,0>::tmat4x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$0A@@glm@@QAE@ABU?$tvec4@N$0A@@1@000@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
_v3$ = 20						; size = 4
??0?$tmat4x4@N$0A@@glm@@QAE@ABU?$tvec4@N$0A@@1@000@Z PROC ; glm::tmat4x4<double,0>::tmat4x4<double,0>, COMDAT
; _this$ = ecx

; 80   : 	{

	push	ebp
	mov	ebp, esp
	mov	edx, ecx
	xorps	xmm0, xmm0
	push	3
	pop	ecx
	lea	eax, DWORD PTR [edx+16]
$LL4@tmat4x4:
	dec	ecx
	movups	XMMWORD PTR [eax-16], xmm0
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat4x4

; 81   : 		this->value[0] = v0;

	push	esi
	mov	esi, DWORD PTR _v0$[ebp]
	push	edi
	push	8
	pop	eax
	mov	ecx, eax
	mov	edi, edx
	rep movsd

; 82   : 		this->value[1] = v1;

	mov	esi, DWORD PTR _v1$[ebp]
	lea	edi, DWORD PTR [edx+32]
	mov	ecx, eax
	rep movsd

; 83   : 		this->value[2] = v2;

	mov	esi, DWORD PTR _v2$[ebp]
	lea	edi, DWORD PTR [edx+64]
	mov	ecx, eax
	rep movsd

; 84   : 		this->value[3] = v3;

	mov	esi, DWORD PTR _v3$[ebp]
	lea	edi, DWORD PTR [edx+96]
	mov	ecx, eax

; 85   : 	}

	mov	eax, edx
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	16					; 00000010H
??0?$tmat4x4@N$0A@@glm@@QAE@ABU?$tvec4@N$0A@@1@000@Z ENDP ; glm::tmat4x4<double,0>::tmat4x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$0A@@glm@@QAE@ABN000000000000000@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
$T3 = -32						; size = 32
$T4 = -32						; size = 32
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_z0$ = 16						; size = 4
_w0$ = 20						; size = 4
_x1$ = 24						; size = 4
_y1$ = 28						; size = 4
_z1$ = 32						; size = 4
_w1$ = 36						; size = 4
_x2$ = 40						; size = 4
_y2$ = 44						; size = 4
_z2$ = 48						; size = 4
_w2$ = 52						; size = 4
_x3$ = 56						; size = 4
_y3$ = 60						; size = 4
_z3$ = 64						; size = 4
_w3$ = 68						; size = 4
??0?$tmat4x4@N$0A@@glm@@QAE@ABN000000000000000@Z PROC	; glm::tmat4x4<double,0>::tmat4x4<double,0>, COMDAT
; _this$ = ecx

; 65   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xorps	xmm0, xmm0
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	3
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat4x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm0
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat4x4

; 66   : 		this->value[0] = col_type(x0, y0, z0, w0);

	mov	eax, DWORD PTR _x0$[ebp]
	lea	esi, DWORD PTR $T4[ebp]
	push	8
	pop	edx
	mov	edi, ebx
	mov	ecx, edx
	movsd	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR _y0$[ebp]
	movsd	QWORD PTR $T4[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR _z0$[ebp]
	movsd	QWORD PTR $T4[ebp+8], xmm0
	movsd	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR _w0$[ebp]
	movsd	QWORD PTR $T4[ebp+16], xmm0
	movsd	xmm0, QWORD PTR [eax]

; 67   : 		this->value[1] = col_type(x1, y1, z1, w1);

	mov	eax, DWORD PTR _x1$[ebp]
	movsd	QWORD PTR $T4[ebp+24], xmm0
	rep movsd
	movsd	xmm0, QWORD PTR [eax]
	lea	edi, DWORD PTR [ebx+32]
	mov	eax, DWORD PTR _y1$[ebp]
	mov	ecx, edx
	movsd	QWORD PTR $T3[ebp], xmm0
	lea	esi, DWORD PTR $T3[ebp]
	movsd	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR _z1$[ebp]
	movsd	QWORD PTR $T3[ebp+8], xmm0
	movsd	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR _w1$[ebp]
	movsd	QWORD PTR $T3[ebp+16], xmm0
	movsd	xmm0, QWORD PTR [eax]

; 68   : 		this->value[2] = col_type(x2, y2, z2, w2);

	mov	eax, DWORD PTR _x2$[ebp]
	movsd	QWORD PTR $T3[ebp+24], xmm0
	rep movsd
	movsd	xmm0, QWORD PTR [eax]
	lea	edi, DWORD PTR [ebx+64]
	mov	eax, DWORD PTR _y2$[ebp]
	mov	ecx, edx
	movsd	QWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	movsd	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR _z2$[ebp]
	movsd	QWORD PTR $T2[ebp+8], xmm0
	movsd	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR _w2$[ebp]
	movsd	QWORD PTR $T2[ebp+16], xmm0
	movsd	xmm0, QWORD PTR [eax]

; 69   : 		this->value[3] = col_type(x3, y3, z3, w3);

	mov	eax, DWORD PTR _x3$[ebp]
	movsd	QWORD PTR $T2[ebp+24], xmm0
	rep movsd
	movsd	xmm0, QWORD PTR [eax]
	lea	edi, DWORD PTR [ebx+96]
	mov	eax, DWORD PTR _y3$[ebp]
	mov	ecx, edx
	movsd	QWORD PTR $T1[ebp], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	movsd	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR _z3$[ebp]
	movsd	QWORD PTR $T1[ebp+8], xmm0
	movsd	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR _w3$[ebp]
	movsd	QWORD PTR $T1[ebp+16], xmm0
	movsd	xmm0, QWORD PTR [eax]

; 70   : 	}

	mov	eax, ebx
	movsd	QWORD PTR $T1[ebp+24], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	64					; 00000040H
??0?$tmat4x4@N$0A@@glm@@QAE@ABN000000000000000@Z ENDP	; glm::tmat4x4<double,0>::tmat4x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$0A@@glm@@QAE@ABN@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
$T3 = -32						; size = 32
$T4 = -32						; size = 32
_s$ = 8							; size = 4
??0?$tmat4x4@N$0A@@glm@@QAE@ABN@Z PROC			; glm::tmat4x4<double,0>::tmat4x4<double,0>, COMDAT
; _this$ = ecx

; 50   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xorps	xmm1, xmm1
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	3
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat4x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm1
	movups	XMMWORD PTR [eax], xmm1
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat4x4

; 51   : 		this->value[0] = col_type(s, 0, 0, 0);

	mov	eax, DWORD PTR _s$[ebp]
	lea	esi, DWORD PTR $T4[ebp]
	push	8
	pop	edx
	movsd	QWORD PTR $T4[ebp+24], xmm1
	mov	edi, ebx
	movsd	xmm0, QWORD PTR [eax]
	mov	ecx, edx
	movsd	QWORD PTR $T4[ebp], xmm0
	xorps	xmm0, xmm0
	movupd	XMMWORD PTR $T4[ebp+8], xmm0
	rep movsd

; 52   : 		this->value[1] = col_type(0, s, 0, 0);

	movsd	xmm0, QWORD PTR [eax]
	lea	edi, DWORD PTR [ebx+32]
	movsd	QWORD PTR $T3[ebp+8], xmm0
	lea	esi, DWORD PTR $T3[ebp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR $T3[ebp], xmm1
	movupd	XMMWORD PTR $T3[ebp+16], xmm0
	mov	ecx, edx
	rep movsd
	movupd	XMMWORD PTR $T2[ebp], xmm0

; 53   : 		this->value[2] = col_type(0, 0, s, 0);

	lea	edi, DWORD PTR [ebx+64]
	mov	ecx, edx
	movsd	xmm0, QWORD PTR [eax]
	lea	esi, DWORD PTR $T2[ebp]
	movsd	QWORD PTR $T2[ebp+16], xmm0
	xorps	xmm0, xmm0
	movsd	QWORD PTR $T2[ebp+24], xmm1
	rep movsd
	movupd	XMMWORD PTR $T1[ebp], xmm0

; 54   : 		this->value[3] = col_type(0, 0, 0, s);

	lea	edi, DWORD PTR [ebx+96]
	mov	ecx, edx
	movsd	xmm0, QWORD PTR [eax]
	lea	esi, DWORD PTR $T1[ebp]
	movsd	QWORD PTR $T1[ebp+16], xmm1

; 55   : 	}

	mov	eax, ebx
	movsd	QWORD PTR $T1[ebp+24], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x4@N$0A@@glm@@QAE@ABN@Z ENDP			; glm::tmat4x4<double,0>::tmat4x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat4x4@N$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat4x4<double,0>::tmat4x4<double,0>, COMDAT
; _this$ = ecx

; 46   : 	{}

	push	3
	pop	edx
	lea	eax, DWORD PTR [ecx+16]
	xorps	xmm0, xmm0
$LL4@tmat4x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm0
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat4x4
	mov	eax, ecx
	ret	4
??0?$tmat4x4@N$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat4x4<double,0>::tmat4x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tmat4x4@N$0A@@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tmat4x4@N$0A@@glm@@QAE@ABU01@@Z PROC		; glm::tmat4x4<double,0>::tmat4x4<double,0>, COMDAT
; _this$ = ecx

; 234  : template struct tmat4x4<float64, highp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	32					; 00000020H
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tmat4x4@N$0A@@glm@@QAE@ABU01@@Z ENDP		; glm::tmat4x4<double,0>::tmat4x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
$T3 = -32						; size = 32
$T4 = -32						; size = 32
??0?$tmat4x4@N$0A@@glm@@QAE@XZ PROC			; glm::tmat4x4<double,0>::tmat4x4<double,0>, COMDAT
; _this$ = ecx

; 13   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xorps	xmm0, xmm0
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	3
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat4x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm0
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat4x4

; 14   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 15   : 				this->value[0] = col_type(1, 0, 0, 0);

	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	lea	esi, DWORD PTR $T4[ebp]
	movupd	XMMWORD PTR $T4[ebp], xmm0
	mov	edi, ebx
	xorps	xmm0, xmm0
	movupd	XMMWORD PTR $T4[ebp+16], xmm0
	push	8
	movaps	xmm0, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	pop	eax
	mov	ecx, eax
	rep movsd
	movupd	XMMWORD PTR $T3[ebp], xmm0

; 16   : 				this->value[1] = col_type(0, 1, 0, 0);

	lea	edi, DWORD PTR [ebx+32]
	mov	ecx, eax
	xorps	xmm0, xmm0
	lea	esi, DWORD PTR $T3[ebp]
	movupd	XMMWORD PTR $T3[ebp+16], xmm0
	rep movsd
	movupd	XMMWORD PTR $T2[ebp], xmm0

; 17   : 				this->value[2] = col_type(0, 0, 1, 0);

	lea	edi, DWORD PTR [ebx+64]
	mov	ecx, eax
	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	lea	esi, DWORD PTR $T2[ebp]
	movupd	XMMWORD PTR $T2[ebp+16], xmm0
	rep movsd
	xorps	xmm0, xmm0

; 18   : 				this->value[3] = col_type(0, 0, 0, 1);

	lea	edi, DWORD PTR [ebx+96]
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	mov	ecx, eax
	movaps	xmm0, XMMWORD PTR __xmm@3ff00000000000000000000000000000

; 19   : #			endif
; 20   : 		}

	mov	eax, ebx
	movupd	XMMWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$tmat4x4@N$0A@@glm@@QAE@XZ ENDP			; glm::tmat4x4<double,0>::tmat4x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??F?$tmat4x4@M$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat4x4@M$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tmat4x4<float,0>::operator--, COMDAT
; _this$ = ecx

; 394  : 	{

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi

; 395  : 		tmat4x4<T, P> Result(*this);

	mov	edi, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, ecx
	push	16					; 00000010H
	pop	ecx
	mov	esi, eax
	rep movsd

; 396  : 		--*this;

	mov	ecx, eax
	call	??F?$tmat4x4@M$0A@@glm@@QAEAAU01@XZ	; glm::tmat4x4<float,0>::operator--

; 397  : 		return Result;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi

; 398  : 	}

	pop	ebp
	ret	8
??F?$tmat4x4@M$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tmat4x4<float,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??E?$tmat4x4@M$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat4x4@M$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tmat4x4<float,0>::operator++, COMDAT
; _this$ = ecx

; 386  : 	{

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi

; 387  : 		tmat4x4<T, P> Result(*this);

	mov	edi, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, ecx
	push	16					; 00000010H
	pop	ecx
	mov	esi, eax
	rep movsd

; 388  : 		++*this;

	mov	ecx, eax
	call	??E?$tmat4x4@M$0A@@glm@@QAEAAU01@XZ	; glm::tmat4x4<float,0>::operator++

; 389  : 		return Result;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi

; 390  : 	}

	pop	ebp
	ret	8
??E?$tmat4x4@M$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tmat4x4<float,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??F?$tmat4x4@M$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat4x4@M$0A@@glm@@QAEAAU01@XZ PROC		; glm::tmat4x4<float,0>::operator--, COMDAT
; _this$ = ecx

; 377  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 378  : 		--this->value[1];
; 379  : 		--this->value[2];
; 380  : 		--this->value[3];
; 381  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0

; 382  : 	}

	ret	0
??F?$tmat4x4@M$0A@@glm@@QAEAAU01@XZ ENDP		; glm::tmat4x4<float,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??E?$tmat4x4@M$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat4x4@M$0A@@glm@@QAEAAU01@XZ PROC		; glm::tmat4x4<float,0>::operator++, COMDAT
; _this$ = ecx

; 367  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 368  : 		++this->value[1];
; 369  : 		++this->value[2];
; 370  : 		++this->value[3];
; 371  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0

; 372  : 	}

	ret	0
??E?$tmat4x4@M$0A@@glm@@QAEAAU01@XZ ENDP		; glm::tmat4x4<float,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tmat4x4@M$0A@@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tmat4x4@M$0A@@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tmat4x4<float,0>::operator=, COMDAT
; _this$ = ecx

; 233  : template struct tmat4x4<float32, highp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	16					; 00000010H
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tmat4x4@M$0A@@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tmat4x4<float,0>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??A?$tmat4x4@M$0A@@glm@@QBEABU?$tvec4@M$0A@@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat4x4@M$0A@@glm@@QBEABU?$tvec4@M$0A@@1@H@Z PROC	; glm::tmat4x4<float,0>::operator[], COMDAT
; _this$ = ecx

; 248  : 	{

	push	ebp
	mov	ebp, esp

; 249  : 		assert(i < this->length());
; 250  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, ecx

; 251  : 	}

	pop	ebp
	ret	4
??A?$tmat4x4@M$0A@@glm@@QBEABU?$tvec4@M$0A@@1@H@Z ENDP	; glm::tmat4x4<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??A?$tmat4x4@M$0A@@glm@@QAEAAU?$tvec4@M$0A@@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat4x4@M$0A@@glm@@QAEAAU?$tvec4@M$0A@@1@H@Z PROC	; glm::tmat4x4<float,0>::operator[], COMDAT
; _this$ = ecx

; 241  : 	{

	push	ebp
	mov	ebp, esp

; 242  : 		assert(i < this->length());
; 243  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, ecx

; 244  : 	}

	pop	ebp
	ret	4
??A?$tmat4x4@M$0A@@glm@@QAEAAU?$tvec4@M$0A@@1@H@Z ENDP	; glm::tmat4x4<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.hpp
;	COMDAT ?length@?$tmat4x4@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat4x4@M$0A@@glm@@SAHXZ PROC			; glm::tmat4x4<float,0>::length, COMDAT

; 84   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	push	4
	pop	eax
	ret	0
?length@?$tmat4x4@M$0A@@glm@@SAHXZ ENDP			; glm::tmat4x4<float,0>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$0A@@glm@@QAE@ABU?$tmat4x3@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
$T4 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat4x4@M$0A@@glm@@QAE@ABU?$tmat4x3@M$0A@@1@@Z PROC ; glm::tmat4x4<float,0>::tmat4x4<float,0>, COMDAT
; _this$ = ecx

; 230  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	lea	eax, DWORD PTR [ecx+8]
	push	3
	pop	edx
$LL4@tmat4x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat4x4

; 231  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	and	DWORD PTR $T4[ebp+12], 0
	push	esi
	push	edi
	movss	xmm0, DWORD PTR [eax]
	lea	esi, DWORD PTR $T4[ebp]
	movss	DWORD PTR $T4[ebp], xmm0
	mov	edi, ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T4[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T4[ebp+8], xmm0
	movsd
	movsd
	movsd
	movsd

; 232  : 		this->value[1] = col_type(m[1], 0);

	movss	xmm0, DWORD PTR [eax+12]
	lea	edi, DWORD PTR [ecx+16]
	and	DWORD PTR $T3[ebp+12], 0
	lea	esi, DWORD PTR $T3[ebp]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR $T3[ebp+8], xmm0
	movsd
	movsd
	movsd
	movsd

; 233  : 		this->value[2] = col_type(m[2], 0);

	movss	xmm0, DWORD PTR [eax+24]
	lea	edi, DWORD PTR [ecx+32]
	and	DWORD PTR $T2[ebp+12], 0
	lea	esi, DWORD PTR $T2[ebp]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+28]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+32]
	movss	DWORD PTR $T2[ebp+8], xmm0
	movsd
	movsd
	movsd
	movsd

; 234  : 		this->value[3] = col_type(m[3], 1);

	movss	xmm0, DWORD PTR [eax+36]
	lea	edi, DWORD PTR [ecx+48]
	movss	DWORD PTR $T1[ebp], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	movss	xmm0, DWORD PTR [eax+40]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+44]

; 235  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+8], xmm0
	mov	DWORD PTR $T1[ebp+12], 1065353216	; 3f800000H
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x4@M$0A@@glm@@QAE@ABU?$tmat4x3@M$0A@@1@@Z ENDP ; glm::tmat4x4<float,0>::tmat4x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$0A@@glm@@QAE@ABU?$tmat3x4@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat4x4@M$0A@@glm@@QAE@ABU?$tmat3x4@M$0A@@1@@Z PROC ; glm::tmat4x4<float,0>::tmat4x4<float,0>, COMDAT
; _this$ = ecx

; 221  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	lea	eax, DWORD PTR [ecx+8]
	push	3
	pop	edx
$LL4@tmat4x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat4x4

; 222  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	esi, eax
	movaps	xmm0, XMMWORD PTR __xmm@3f800000000000000000000000000000
	mov	edi, ecx
	movups	XMMWORD PTR $T1[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 223  : 		this->value[1] = m[1];

	lea	esi, DWORD PTR [eax+16]
	lea	edi, DWORD PTR [ecx+16]
	movsd
	movsd
	movsd
	movsd

; 224  : 		this->value[2] = m[2];

	lea	esi, DWORD PTR [eax+32]

; 225  : 		this->value[3] = col_type(0, 0, 0, 1);
; 226  : 	}

	mov	eax, ecx
	lea	edi, DWORD PTR [ecx+32]
	movsd
	movsd
	movsd
	movsd
	lea	edi, DWORD PTR [ecx+48]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x4@M$0A@@glm@@QAE@ABU?$tmat3x4@M$0A@@1@@Z ENDP ; glm::tmat4x4<float,0>::tmat4x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$0A@@glm@@QAE@ABU?$tmat4x2@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
$T4 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat4x4@M$0A@@glm@@QAE@ABU?$tmat4x2@M$0A@@1@@Z PROC ; glm::tmat4x4<float,0>::tmat4x4<float,0>, COMDAT
; _this$ = ecx

; 212  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	lea	eax, DWORD PTR [ecx+8]
	push	3
	pop	edx
$LL4@tmat4x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat4x4

; 213  : 		this->value[0] = col_type(m[0], 0, 0);

	and	DWORD PTR $T4[ebp+8], 0
	and	DWORD PTR $T4[ebp+12], 0
	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T4[ebp]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T4[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T4[ebp+4], xmm0
	movsd
	movsd
	movsd
	movsd

; 214  : 		this->value[1] = col_type(m[1], 0, 0);

	movss	xmm0, DWORD PTR [eax+8]
	lea	edi, DWORD PTR [ecx+16]
	and	DWORD PTR $T3[ebp+8], 0
	lea	esi, DWORD PTR $T3[ebp]
	and	DWORD PTR $T3[ebp+12], 0
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+12]

; 215  : 		this->value[2] = col_type(0, 0, 1, 0);
; 216  : 		this->value[3] = col_type(0, 0, 0, 1);
; 217  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T3[ebp+4], xmm0
	movsd
	movaps	xmm0, XMMWORD PTR __xmm@000000003f8000000000000000000000
	movsd
	movsd
	movsd
	movups	XMMWORD PTR $T2[ebp], xmm0
	lea	edi, DWORD PTR [ecx+32]
	movaps	xmm0, XMMWORD PTR __xmm@3f800000000000000000000000000000
	lea	esi, DWORD PTR $T2[ebp]
	movsd
	movsd
	movsd
	movsd
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+48]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x4@M$0A@@glm@@QAE@ABU?$tmat4x2@M$0A@@1@@Z ENDP ; glm::tmat4x4<float,0>::tmat4x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$0A@@glm@@QAE@ABU?$tmat2x4@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat4x4@M$0A@@glm@@QAE@ABU?$tmat2x4@M$0A@@1@@Z PROC ; glm::tmat4x4<float,0>::tmat4x4<float,0>, COMDAT
; _this$ = ecx

; 203  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	lea	eax, DWORD PTR [ecx+8]
	push	3
	pop	edx
$LL4@tmat4x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat4x4

; 204  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	esi, eax
	movaps	xmm0, XMMWORD PTR __xmm@000000003f8000000000000000000000
	mov	edi, ecx
	movups	XMMWORD PTR $T2[ebp], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@3f800000000000000000000000000000
	movsd
	movsd
	movsd
	movsd

; 205  : 		this->value[1] = m[1];

	lea	esi, DWORD PTR [eax+16]

; 206  : 		this->value[2] = col_type(0, 0, 1, 0);
; 207  : 		this->value[3] = col_type(0, 0, 0, 1);
; 208  : 	}

	mov	eax, ecx
	lea	edi, DWORD PTR [ecx+16]
	movsd
	movsd
	movsd
	movsd
	lea	edi, DWORD PTR [ecx+32]
	lea	esi, DWORD PTR $T2[ebp]
	movsd
	movsd
	movsd
	movsd
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+48]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x4@M$0A@@glm@@QAE@ABU?$tmat2x4@M$0A@@1@@Z ENDP ; glm::tmat4x4<float,0>::tmat4x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$0A@@glm@@QAE@ABU?$tmat3x2@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
$T4 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat4x4@M$0A@@glm@@QAE@ABU?$tmat3x2@M$0A@@1@@Z PROC ; glm::tmat4x4<float,0>::tmat4x4<float,0>, COMDAT
; _this$ = ecx

; 194  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	lea	eax, DWORD PTR [ecx+8]
	push	3
	pop	edx
$LL4@tmat4x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat4x4

; 195  : 		this->value[0] = col_type(m[0], 0, 0);

	and	DWORD PTR $T4[ebp+8], 0
	and	DWORD PTR $T4[ebp+12], 0
	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T4[ebp]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T4[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T4[ebp+4], xmm0
	movsd
	movsd
	movsd
	movsd

; 196  : 		this->value[1] = col_type(m[1], 0, 0);

	movss	xmm0, DWORD PTR [eax+8]
	lea	edi, DWORD PTR [ecx+16]
	and	DWORD PTR $T3[ebp+8], 0
	lea	esi, DWORD PTR $T3[ebp]
	and	DWORD PTR $T3[ebp+12], 0
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movsd
	movsd
	movsd
	movsd

; 197  : 		this->value[2] = col_type(m[2], 1, 0);

	movss	xmm0, DWORD PTR [eax+16]
	lea	edi, DWORD PTR [ecx+32]
	and	DWORD PTR $T2[ebp+12], 0
	lea	esi, DWORD PTR $T2[ebp]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+20]

; 198  : 		this->value[3] = col_type(0, 0, 0, 1);
; 199  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T2[ebp+4], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@3f800000000000000000000000000000
	mov	DWORD PTR $T2[ebp+8], 1065353216	; 3f800000H
	movsd
	movsd
	movsd
	movsd
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+48]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x4@M$0A@@glm@@QAE@ABU?$tmat3x2@M$0A@@1@@Z ENDP ; glm::tmat4x4<float,0>::tmat4x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$0A@@glm@@QAE@ABU?$tmat2x3@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
$T4 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat4x4@M$0A@@glm@@QAE@ABU?$tmat2x3@M$0A@@1@@Z PROC ; glm::tmat4x4<float,0>::tmat4x4<float,0>, COMDAT
; _this$ = ecx

; 185  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	lea	eax, DWORD PTR [ecx+8]
	push	3
	pop	edx
$LL4@tmat4x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat4x4

; 186  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	and	DWORD PTR $T4[ebp+12], 0
	push	esi
	push	edi
	movss	xmm0, DWORD PTR [eax]
	lea	esi, DWORD PTR $T4[ebp]
	movss	DWORD PTR $T4[ebp], xmm0
	mov	edi, ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T4[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T4[ebp+8], xmm0
	movsd
	movsd
	movsd
	movsd

; 187  : 		this->value[1] = col_type(m[1], 0);

	movss	xmm0, DWORD PTR [eax+12]
	lea	edi, DWORD PTR [ecx+16]
	and	DWORD PTR $T3[ebp+12], 0
	lea	esi, DWORD PTR $T3[ebp]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+20]

; 188  : 		this->value[2] = col_type(0, 0, 1, 0);
; 189  : 		this->value[3] = col_type(0, 0, 0, 1);
; 190  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T3[ebp+8], xmm0
	movsd
	movaps	xmm0, XMMWORD PTR __xmm@000000003f8000000000000000000000
	movsd
	movsd
	movsd
	movups	XMMWORD PTR $T2[ebp], xmm0
	lea	edi, DWORD PTR [ecx+32]
	movaps	xmm0, XMMWORD PTR __xmm@3f800000000000000000000000000000
	lea	esi, DWORD PTR $T2[ebp]
	movsd
	movsd
	movsd
	movsd
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+48]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x4@M$0A@@glm@@QAE@ABU?$tmat2x3@M$0A@@1@@Z ENDP ; glm::tmat4x4<float,0>::tmat4x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$0A@@glm@@QAE@ABU?$tmat3x3@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
$T4 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat4x4@M$0A@@glm@@QAE@ABU?$tmat3x3@M$0A@@1@@Z PROC ; glm::tmat4x4<float,0>::tmat4x4<float,0>, COMDAT
; _this$ = ecx

; 176  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	lea	eax, DWORD PTR [ecx+8]
	push	3
	pop	edx
$LL4@tmat4x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat4x4

; 177  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	and	DWORD PTR $T4[ebp+12], 0
	push	esi
	push	edi
	movss	xmm0, DWORD PTR [eax]
	lea	esi, DWORD PTR $T4[ebp]
	movss	DWORD PTR $T4[ebp], xmm0
	mov	edi, ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T4[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T4[ebp+8], xmm0
	movsd
	movsd
	movsd
	movsd

; 178  : 		this->value[1] = col_type(m[1], 0);

	movss	xmm0, DWORD PTR [eax+12]
	lea	edi, DWORD PTR [ecx+16]
	and	DWORD PTR $T3[ebp+12], 0
	lea	esi, DWORD PTR $T3[ebp]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR $T3[ebp+8], xmm0
	movsd
	movsd
	movsd
	movsd

; 179  : 		this->value[2] = col_type(m[2], 0);

	movss	xmm0, DWORD PTR [eax+24]
	lea	edi, DWORD PTR [ecx+32]
	and	DWORD PTR $T2[ebp+12], 0
	lea	esi, DWORD PTR $T2[ebp]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+28]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+32]

; 180  : 		this->value[3] = col_type(0, 0, 0, 1);
; 181  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T2[ebp+8], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@3f800000000000000000000000000000
	movsd
	movsd
	movsd
	movsd
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+48]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x4@M$0A@@glm@@QAE@ABU?$tmat3x3@M$0A@@1@@Z ENDP ; glm::tmat4x4<float,0>::tmat4x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$0A@@glm@@QAE@ABU?$tmat2x2@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
$T4 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat4x4@M$0A@@glm@@QAE@ABU?$tmat2x2@M$0A@@1@@Z PROC ; glm::tmat4x4<float,0>::tmat4x4<float,0>, COMDAT
; _this$ = ecx

; 167  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	lea	eax, DWORD PTR [ecx+8]
	push	3
	pop	edx
$LL4@tmat4x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat4x4

; 168  : 		this->value[0] = col_type(m[0], 0, 0);

	and	DWORD PTR $T4[ebp+8], 0
	and	DWORD PTR $T4[ebp+12], 0
	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T4[ebp]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T4[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T4[ebp+4], xmm0
	movsd
	movsd
	movsd
	movsd

; 169  : 		this->value[1] = col_type(m[1], 0, 0);

	movss	xmm0, DWORD PTR [eax+8]
	lea	edi, DWORD PTR [ecx+16]
	and	DWORD PTR $T3[ebp+8], 0
	lea	esi, DWORD PTR $T3[ebp]
	and	DWORD PTR $T3[ebp+12], 0
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+12]

; 170  : 		this->value[2] = col_type(0, 0, 1, 0);
; 171  : 		this->value[3] = col_type(0, 0, 0, 1);
; 172  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T3[ebp+4], xmm0
	movsd
	movaps	xmm0, XMMWORD PTR __xmm@000000003f8000000000000000000000
	movsd
	movsd
	movsd
	movups	XMMWORD PTR $T2[ebp], xmm0
	lea	edi, DWORD PTR [ecx+32]
	movaps	xmm0, XMMWORD PTR __xmm@3f800000000000000000000000000000
	lea	esi, DWORD PTR $T2[ebp]
	movsd
	movsd
	movsd
	movsd
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+48]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x4@M$0A@@glm@@QAE@ABU?$tmat2x2@M$0A@@1@@Z ENDP ; glm::tmat4x4<float,0>::tmat4x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$0A@@glm@@QAE@ABU?$tvec4@M$0A@@1@000@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
_v3$ = 20						; size = 4
??0?$tmat4x4@M$0A@@glm@@QAE@ABU?$tvec4@M$0A@@1@000@Z PROC ; glm::tmat4x4<float,0>::tmat4x4<float,0>, COMDAT
; _this$ = ecx

; 80   : 	{

	push	ebp
	mov	ebp, esp
	push	3
	pop	edx
	lea	eax, DWORD PTR [ecx+8]
$LL4@tmat4x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat4x4

; 81   : 		this->value[0] = v0;

	push	esi
	mov	esi, DWORD PTR _v0$[ebp]

; 82   : 		this->value[1] = v1;
; 83   : 		this->value[2] = v2;
; 84   : 		this->value[3] = v3;
; 85   : 	}

	mov	eax, ecx
	push	edi
	mov	edi, ecx
	movsd
	movsd
	movsd
	movsd
	mov	esi, DWORD PTR _v1$[ebp]
	lea	edi, DWORD PTR [ecx+16]
	movsd
	movsd
	movsd
	movsd
	mov	esi, DWORD PTR _v2$[ebp]
	lea	edi, DWORD PTR [ecx+32]
	movsd
	movsd
	movsd
	movsd
	mov	esi, DWORD PTR _v3$[ebp]
	lea	edi, DWORD PTR [ecx+48]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	16					; 00000010H
??0?$tmat4x4@M$0A@@glm@@QAE@ABU?$tvec4@M$0A@@1@000@Z ENDP ; glm::tmat4x4<float,0>::tmat4x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$0A@@glm@@QAE@ABM000000000000000@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
$T4 = -16						; size = 16
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_z0$ = 16						; size = 4
_w0$ = 20						; size = 4
_x1$ = 24						; size = 4
_y1$ = 28						; size = 4
_z1$ = 32						; size = 4
_w1$ = 36						; size = 4
_x2$ = 40						; size = 4
_y2$ = 44						; size = 4
_z2$ = 48						; size = 4
_w2$ = 52						; size = 4
_x3$ = 56						; size = 4
_y3$ = 60						; size = 4
_z3$ = 64						; size = 4
_w3$ = 68						; size = 4
??0?$tmat4x4@M$0A@@glm@@QAE@ABM000000000000000@Z PROC	; glm::tmat4x4<float,0>::tmat4x4<float,0>, COMDAT
; _this$ = ecx

; 65   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	lea	eax, DWORD PTR [ecx+8]
	push	3
	pop	edx
$LL4@tmat4x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat4x4

; 66   : 		this->value[0] = col_type(x0, y0, z0, w0);

	mov	eax, DWORD PTR _x0$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T4[ebp]
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _y0$[ebp]
	movss	DWORD PTR $T4[ebp], xmm0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _z0$[ebp]
	movss	DWORD PTR $T4[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _w0$[ebp]
	movss	DWORD PTR $T4[ebp+8], xmm0
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T4[ebp+12], xmm0
	movsd

; 67   : 		this->value[1] = col_type(x1, y1, z1, w1);

	mov	eax, DWORD PTR _x1$[ebp]
	movsd
	movsd
	movsd
	movss	xmm0, DWORD PTR [eax]
	lea	edi, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _y1$[ebp]
	lea	esi, DWORD PTR $T3[ebp]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _z1$[ebp]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _w1$[ebp]
	movss	DWORD PTR $T3[ebp+8], xmm0
	movss	xmm0, DWORD PTR [eax]

; 68   : 		this->value[2] = col_type(x2, y2, z2, w2);

	mov	eax, DWORD PTR _x2$[ebp]
	movss	DWORD PTR $T3[ebp+12], xmm0
	movsd
	movsd
	movsd
	movsd
	movss	xmm0, DWORD PTR [eax]
	lea	edi, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR _y2$[ebp]
	lea	esi, DWORD PTR $T2[ebp]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _z2$[ebp]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _w2$[ebp]
	movss	DWORD PTR $T2[ebp+8], xmm0
	movss	xmm0, DWORD PTR [eax]

; 69   : 		this->value[3] = col_type(x3, y3, z3, w3);

	mov	eax, DWORD PTR _x3$[ebp]
	movss	DWORD PTR $T2[ebp+12], xmm0
	movsd
	movsd
	movsd
	movsd
	movss	xmm0, DWORD PTR [eax]
	lea	edi, DWORD PTR [ecx+48]
	mov	eax, DWORD PTR _y3$[ebp]
	lea	esi, DWORD PTR $T1[ebp]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _z3$[ebp]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _w3$[ebp]
	movss	DWORD PTR $T1[ebp+8], xmm0
	movss	xmm0, DWORD PTR [eax]

; 70   : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+12], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	64					; 00000040H
??0?$tmat4x4@M$0A@@glm@@QAE@ABM000000000000000@Z ENDP	; glm::tmat4x4<float,0>::tmat4x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$0A@@glm@@QAE@ABM@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
$T4 = -16						; size = 16
_s$ = 8							; size = 4
??0?$tmat4x4@M$0A@@glm@@QAE@ABM@Z PROC			; glm::tmat4x4<float,0>::tmat4x4<float,0>, COMDAT
; _this$ = ecx

; 50   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	lea	eax, DWORD PTR [ecx+8]
	push	3
	pop	edx
$LL4@tmat4x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat4x4

; 51   : 		this->value[0] = col_type(s, 0, 0, 0);

	and	DWORD PTR $T4[ebp+4], 0
	and	DWORD PTR $T4[ebp+12], 0
	and	DWORD PTR $T4[ebp+8], 0
	mov	eax, DWORD PTR _s$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T4[ebp]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T4[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 52   : 		this->value[1] = col_type(0, s, 0, 0);

	movss	xmm0, DWORD PTR [eax]
	lea	edi, DWORD PTR [ecx+16]
	and	DWORD PTR $T3[ebp], 0
	lea	esi, DWORD PTR $T3[ebp]
	and	DWORD PTR $T3[ebp+12], 0
	and	DWORD PTR $T3[ebp+8], 0
	movss	DWORD PTR $T3[ebp+4], xmm0
	movsd
	movsd
	movsd
	movsd

; 53   : 		this->value[2] = col_type(0, 0, s, 0);

	movss	xmm0, DWORD PTR [eax]
	lea	edi, DWORD PTR [ecx+32]
	and	DWORD PTR $T2[ebp], 0
	lea	esi, DWORD PTR $T2[ebp]
	and	DWORD PTR $T2[ebp+4], 0
	and	DWORD PTR $T2[ebp+12], 0
	movss	DWORD PTR $T2[ebp+8], xmm0
	movsd
	movsd
	movsd
	movsd

; 54   : 		this->value[3] = col_type(0, 0, 0, s);

	movss	xmm0, DWORD PTR [eax]
	lea	edi, DWORD PTR [ecx+48]
	and	DWORD PTR $T1[ebp], 0
	lea	esi, DWORD PTR $T1[ebp]
	and	DWORD PTR $T1[ebp+4], 0

; 55   : 	}

	mov	eax, ecx
	and	DWORD PTR $T1[ebp+8], 0
	movss	DWORD PTR $T1[ebp+12], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x4@M$0A@@glm@@QAE@ABM@Z ENDP			; glm::tmat4x4<float,0>::tmat4x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat4x4@M$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat4x4<float,0>::tmat4x4<float,0>, COMDAT
; _this$ = ecx

; 46   : 	{}

	push	3
	pop	edx
	lea	eax, DWORD PTR [ecx+8]
$LL4@tmat4x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat4x4
	mov	eax, ecx
	ret	4
??0?$tmat4x4@M$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat4x4<float,0>::tmat4x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tmat4x4@M$0A@@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tmat4x4@M$0A@@glm@@QAE@ABU01@@Z PROC		; glm::tmat4x4<float,0>::tmat4x4<float,0>, COMDAT
; _this$ = ecx

; 233  : template struct tmat4x4<float32, highp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	16					; 00000010H
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tmat4x4@M$0A@@glm@@QAE@ABU01@@Z ENDP		; glm::tmat4x4<float,0>::tmat4x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
$T4 = -16						; size = 16
??0?$tmat4x4@M$0A@@glm@@QAE@XZ PROC			; glm::tmat4x4<float,0>::tmat4x4<float,0>, COMDAT
; _this$ = ecx

; 13   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	lea	eax, DWORD PTR [ecx+8]
	push	3
	pop	edx
$LL4@tmat4x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat4x4

; 14   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 15   : 				this->value[0] = col_type(1, 0, 0, 0);
; 16   : 				this->value[1] = col_type(0, 1, 0, 0);
; 17   : 				this->value[2] = col_type(0, 0, 1, 0);
; 18   : 				this->value[3] = col_type(0, 0, 0, 1);
; 19   : #			endif
; 20   : 		}

	movaps	xmm0, XMMWORD PTR __xmm@0000000000000000000000003f800000
	mov	eax, ecx
	push	esi
	push	edi
	movups	XMMWORD PTR $T4[ebp], xmm0
	lea	esi, DWORD PTR $T4[ebp]
	mov	edi, ecx
	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003f80000000000000
	movsd
	movsd
	movsd
	movsd
	movups	XMMWORD PTR $T3[ebp], xmm0
	lea	edi, DWORD PTR [ecx+16]
	movaps	xmm0, XMMWORD PTR __xmm@000000003f8000000000000000000000
	lea	esi, DWORD PTR $T3[ebp]
	movsd
	movsd
	movsd
	movsd
	movups	XMMWORD PTR $T2[ebp], xmm0
	lea	edi, DWORD PTR [ecx+32]
	movaps	xmm0, XMMWORD PTR __xmm@3f800000000000000000000000000000
	lea	esi, DWORD PTR $T2[ebp]
	movsd
	movsd
	movsd
	movsd
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+48]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$tmat4x4@M$0A@@glm@@QAE@XZ ENDP			; glm::tmat4x4<float,0>::tmat4x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??F?$tmat4x4@N$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat4x4@N$00@glm@@QAE?AU01@H@Z PROC		; glm::tmat4x4<double,1>::operator--, COMDAT
; _this$ = ecx

; 394  : 	{

	push	ebp
	mov	ebp, esp

; 395  : 		tmat4x4<T, P> Result(*this);
; 396  : 		--*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	mov	edx, ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	movups	xmm0, XMMWORD PTR [edx]
	push	32					; 00000020H
	pop	ecx
	subpd	xmm0, xmm1
	mov	esi, edx
	mov	edi, eax
	rep movsd
	movups	XMMWORD PTR [edx], xmm0
	pop	edi
	movups	xmm0, XMMWORD PTR [edx+16]
	pop	esi
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+16], xmm0
	movups	xmm0, XMMWORD PTR [edx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+32], xmm0
	movups	xmm0, XMMWORD PTR [edx+48]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+48], xmm0
	movups	xmm0, XMMWORD PTR [edx+64]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+64], xmm0
	movups	xmm0, XMMWORD PTR [edx+80]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+80], xmm0
	movups	xmm0, XMMWORD PTR [edx+96]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+96], xmm0
	movups	xmm0, XMMWORD PTR [edx+112]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+112], xmm0

; 397  : 		return Result;
; 398  : 	}

	pop	ebp
	ret	8
??F?$tmat4x4@N$00@glm@@QAE?AU01@H@Z ENDP		; glm::tmat4x4<double,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??E?$tmat4x4@N$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat4x4@N$00@glm@@QAE?AU01@H@Z PROC		; glm::tmat4x4<double,1>::operator++, COMDAT
; _this$ = ecx

; 386  : 	{

	push	ebp
	mov	ebp, esp

; 387  : 		tmat4x4<T, P> Result(*this);
; 388  : 		++*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	mov	edx, ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	movups	xmm0, XMMWORD PTR [edx]
	push	32					; 00000020H
	pop	ecx
	addpd	xmm0, xmm1
	mov	esi, edx
	mov	edi, eax
	rep movsd
	movups	XMMWORD PTR [edx], xmm0
	pop	edi
	movups	xmm0, XMMWORD PTR [edx+16]
	pop	esi
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+16], xmm0
	movups	xmm0, XMMWORD PTR [edx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+32], xmm0
	movups	xmm0, XMMWORD PTR [edx+48]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+48], xmm0
	movups	xmm0, XMMWORD PTR [edx+64]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+64], xmm0
	movups	xmm0, XMMWORD PTR [edx+80]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+80], xmm0
	movups	xmm0, XMMWORD PTR [edx+96]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+96], xmm0
	movups	xmm0, XMMWORD PTR [edx+112]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+112], xmm0

; 389  : 		return Result;
; 390  : 	}

	pop	ebp
	ret	8
??E?$tmat4x4@N$00@glm@@QAE?AU01@H@Z ENDP		; glm::tmat4x4<double,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??F?$tmat4x4@N$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat4x4@N$00@glm@@QAEAAU01@XZ PROC			; glm::tmat4x4<double,1>::operator--, COMDAT
; _this$ = ecx

; 377  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 378  : 		--this->value[1];
; 379  : 		--this->value[2];
; 380  : 		--this->value[3];
; 381  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	xmm0, XMMWORD PTR [ecx+64]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	xmm0, XMMWORD PTR [ecx+80]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+80], xmm0
	movups	xmm0, XMMWORD PTR [ecx+96]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+96], xmm0
	movups	xmm0, XMMWORD PTR [ecx+112]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+112], xmm0

; 382  : 	}

	ret	0
??F?$tmat4x4@N$00@glm@@QAEAAU01@XZ ENDP			; glm::tmat4x4<double,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??E?$tmat4x4@N$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat4x4@N$00@glm@@QAEAAU01@XZ PROC			; glm::tmat4x4<double,1>::operator++, COMDAT
; _this$ = ecx

; 367  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 368  : 		++this->value[1];
; 369  : 		++this->value[2];
; 370  : 		++this->value[3];
; 371  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	xmm0, XMMWORD PTR [ecx+64]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	xmm0, XMMWORD PTR [ecx+80]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+80], xmm0
	movups	xmm0, XMMWORD PTR [ecx+96]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+96], xmm0
	movups	xmm0, XMMWORD PTR [ecx+112]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+112], xmm0

; 372  : 	}

	ret	0
??E?$tmat4x4@N$00@glm@@QAEAAU01@XZ ENDP			; glm::tmat4x4<double,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tmat4x4@N$00@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tmat4x4@N$00@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tmat4x4<double,1>::operator=, COMDAT
; _this$ = ecx

; 231  : template struct tmat4x4<float64, mediump>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	32					; 00000020H
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tmat4x4@N$00@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tmat4x4<double,1>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??A?$tmat4x4@N$00@glm@@QBEABU?$tvec4@N$00@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat4x4@N$00@glm@@QBEABU?$tvec4@N$00@1@H@Z PROC	; glm::tmat4x4<double,1>::operator[], COMDAT
; _this$ = ecx

; 248  : 	{

	push	ebp
	mov	ebp, esp

; 249  : 		assert(i < this->length());
; 250  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	add	eax, ecx

; 251  : 	}

	pop	ebp
	ret	4
??A?$tmat4x4@N$00@glm@@QBEABU?$tvec4@N$00@1@H@Z ENDP	; glm::tmat4x4<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??A?$tmat4x4@N$00@glm@@QAEAAU?$tvec4@N$00@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat4x4@N$00@glm@@QAEAAU?$tvec4@N$00@1@H@Z PROC	; glm::tmat4x4<double,1>::operator[], COMDAT
; _this$ = ecx

; 241  : 	{

	push	ebp
	mov	ebp, esp

; 242  : 		assert(i < this->length());
; 243  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	add	eax, ecx

; 244  : 	}

	pop	ebp
	ret	4
??A?$tmat4x4@N$00@glm@@QAEAAU?$tvec4@N$00@1@H@Z ENDP	; glm::tmat4x4<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.hpp
;	COMDAT ?length@?$tmat4x4@N$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat4x4@N$00@glm@@SAHXZ PROC			; glm::tmat4x4<double,1>::length, COMDAT

; 84   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	push	4
	pop	eax
	ret	0
?length@?$tmat4x4@N$00@glm@@SAHXZ ENDP			; glm::tmat4x4<double,1>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$00@glm@@QAE@ABU?$tmat4x3@N$00@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
$T3 = -32						; size = 32
$T4 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tmat4x4@N$00@glm@@QAE@ABU?$tmat4x3@N$00@1@@Z PROC	; glm::tmat4x4<double,1>::tmat4x4<double,1>, COMDAT
; _this$ = ecx

; 230  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xorps	xmm1, xmm1
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	3
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat4x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm1
	movups	XMMWORD PTR [eax], xmm1
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat4x4

; 231  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T4[ebp]
	push	8
	pop	edx
	movsd	QWORD PTR $T4[ebp+24], xmm1
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]
	mov	ecx, edx
	movups	XMMWORD PTR $T4[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR $T4[ebp+16], xmm0
	rep movsd

; 232  : 		this->value[1] = col_type(m[1], 0);

	movups	xmm0, XMMWORD PTR [eax+24]
	lea	edi, DWORD PTR [ebx+32]
	mov	ecx, edx
	movsd	QWORD PTR $T3[ebp+24], xmm1
	lea	esi, DWORD PTR $T3[ebp]
	movups	XMMWORD PTR $T3[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+40]
	movsd	QWORD PTR $T3[ebp+16], xmm0
	rep movsd

; 233  : 		this->value[2] = col_type(m[2], 0);

	movups	xmm0, XMMWORD PTR [eax+48]
	lea	edi, DWORD PTR [ebx+64]
	mov	ecx, edx
	movsd	QWORD PTR $T2[ebp+24], xmm1
	lea	esi, DWORD PTR $T2[ebp]
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+64]
	movsd	QWORD PTR $T2[ebp+16], xmm0
	rep movsd

; 234  : 		this->value[3] = col_type(m[3], 1);

	movups	xmm0, XMMWORD PTR [eax+72]
	lea	edi, DWORD PTR [ebx+96]
	mov	ecx, edx
	lea	esi, DWORD PTR $T1[ebp]
	movups	XMMWORD PTR $T1[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+88]

; 235  : 	}

	mov	eax, ebx
	movsd	QWORD PTR $T1[ebp+16], xmm0
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR $T1[ebp+24], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x4@N$00@glm@@QAE@ABU?$tmat4x3@N$00@1@@Z ENDP	; glm::tmat4x4<double,1>::tmat4x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$00@glm@@QAE@ABU?$tmat3x4@N$00@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tmat4x4@N$00@glm@@QAE@ABU?$tmat3x4@N$00@1@@Z PROC	; glm::tmat4x4<double,1>::tmat4x4<double,1>, COMDAT
; _this$ = ecx

; 221  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xorps	xmm0, xmm0
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	3
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat4x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm0
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat4x4

; 222  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	mov	edi, ebx
	push	8
	pop	edx
	mov	esi, eax
	mov	ecx, edx
	rep movsd

; 223  : 		this->value[1] = m[1];

	lea	esi, DWORD PTR [eax+32]
	mov	ecx, edx
	lea	edi, DWORD PTR [ebx+32]
	xorps	xmm0, xmm0
	rep movsd

; 224  : 		this->value[2] = m[2];

	lea	esi, DWORD PTR [eax+64]
	mov	ecx, edx
	lea	edi, DWORD PTR [ebx+64]

; 225  : 		this->value[3] = col_type(0, 0, 0, 1);
; 226  : 	}

	mov	eax, ebx
	rep movsd
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ebx+96]
	mov	ecx, edx
	movaps	xmm0, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	lea	esi, DWORD PTR $T1[ebp]
	movupd	XMMWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x4@N$00@glm@@QAE@ABU?$tmat3x4@N$00@1@@Z ENDP	; glm::tmat4x4<double,1>::tmat4x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$00@glm@@QAE@ABU?$tmat4x2@N$00@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
$T3 = -32						; size = 32
$T4 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tmat4x4@N$00@glm@@QAE@ABU?$tmat4x2@N$00@1@@Z PROC	; glm::tmat4x4<double,1>::tmat4x4<double,1>, COMDAT
; _this$ = ecx

; 212  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xorps	xmm0, xmm0
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	3
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat4x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm0
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat4x4

; 213  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T4[ebp]
	push	8
	pop	edx
	mov	edi, ebx
	mov	ecx, edx
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR $T4[ebp], xmm0
	xorps	xmm0, xmm0
	movupd	XMMWORD PTR $T4[ebp+16], xmm0
	rep movsd

; 214  : 		this->value[1] = col_type(m[1], 0, 0);

	movups	xmm0, XMMWORD PTR [eax+16]
	lea	edi, DWORD PTR [ebx+32]
	mov	ecx, edx
	lea	esi, DWORD PTR $T3[ebp]

; 215  : 		this->value[2] = col_type(0, 0, 1, 0);
; 216  : 		this->value[3] = col_type(0, 0, 0, 1);
; 217  : 	}

	mov	eax, ebx
	movups	XMMWORD PTR $T3[ebp], xmm0
	xorps	xmm0, xmm0
	movupd	XMMWORD PTR $T3[ebp+16], xmm0
	rep movsd
	movupd	XMMWORD PTR $T2[ebp], xmm0
	lea	edi, DWORD PTR [ebx+64]
	mov	ecx, edx
	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	lea	esi, DWORD PTR $T2[ebp]
	movupd	XMMWORD PTR $T2[ebp+16], xmm0
	rep movsd
	xorps	xmm0, xmm0
	lea	edi, DWORD PTR [ebx+96]
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	mov	ecx, edx
	movaps	xmm0, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	movupd	XMMWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x4@N$00@glm@@QAE@ABU?$tmat4x2@N$00@1@@Z ENDP	; glm::tmat4x4<double,1>::tmat4x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$00@glm@@QAE@ABU?$tmat2x4@N$00@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tmat4x4@N$00@glm@@QAE@ABU?$tmat2x4@N$00@1@@Z PROC	; glm::tmat4x4<double,1>::tmat4x4<double,1>, COMDAT
; _this$ = ecx

; 203  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xorps	xmm0, xmm0
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	3
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat4x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm0
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat4x4

; 204  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	mov	edi, ebx
	push	8
	pop	edx
	mov	esi, eax
	mov	ecx, edx
	rep movsd
	xorps	xmm0, xmm0

; 205  : 		this->value[1] = m[1];

	lea	esi, DWORD PTR [eax+32]
	movupd	XMMWORD PTR $T2[ebp], xmm0
	lea	edi, DWORD PTR [ebx+32]
	mov	ecx, edx
	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000

; 206  : 		this->value[2] = col_type(0, 0, 1, 0);
; 207  : 		this->value[3] = col_type(0, 0, 0, 1);
; 208  : 	}

	mov	eax, ebx
	rep movsd
	movupd	XMMWORD PTR $T2[ebp+16], xmm0
	lea	edi, DWORD PTR [ebx+64]
	mov	ecx, edx
	lea	esi, DWORD PTR $T2[ebp]
	xorps	xmm0, xmm0
	rep movsd
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ebx+96]
	mov	ecx, edx
	movaps	xmm0, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	lea	esi, DWORD PTR $T1[ebp]
	movupd	XMMWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x4@N$00@glm@@QAE@ABU?$tmat2x4@N$00@1@@Z ENDP	; glm::tmat4x4<double,1>::tmat4x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$00@glm@@QAE@ABU?$tmat3x2@N$00@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
$T3 = -32						; size = 32
$T4 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tmat4x4@N$00@glm@@QAE@ABU?$tmat3x2@N$00@1@@Z PROC	; glm::tmat4x4<double,1>::tmat4x4<double,1>, COMDAT
; _this$ = ecx

; 194  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xorps	xmm0, xmm0
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	3
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat4x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm0
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat4x4

; 195  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T4[ebp]
	push	8
	pop	edx
	mov	edi, ebx
	mov	ecx, edx
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR $T4[ebp], xmm0
	xorps	xmm0, xmm0
	movupd	XMMWORD PTR $T4[ebp+16], xmm0
	rep movsd

; 196  : 		this->value[1] = col_type(m[1], 0, 0);

	movups	xmm0, XMMWORD PTR [eax+16]
	lea	edi, DWORD PTR [ebx+32]
	mov	ecx, edx
	lea	esi, DWORD PTR $T3[ebp]
	movups	XMMWORD PTR $T3[ebp], xmm0
	xorps	xmm0, xmm0
	movupd	XMMWORD PTR $T3[ebp+16], xmm0
	rep movsd

; 197  : 		this->value[2] = col_type(m[2], 1, 0);

	movups	xmm0, XMMWORD PTR [eax+32]
	lea	edi, DWORD PTR [ebx+64]
	mov	ecx, edx
	lea	esi, DWORD PTR $T2[ebp]

; 198  : 		this->value[3] = col_type(0, 0, 0, 1);
; 199  : 	}

	mov	eax, ebx
	movups	XMMWORD PTR $T2[ebp], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	movupd	XMMWORD PTR $T2[ebp+16], xmm0
	rep movsd
	xorps	xmm0, xmm0
	lea	edi, DWORD PTR [ebx+96]
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	mov	ecx, edx
	movaps	xmm0, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	movupd	XMMWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x4@N$00@glm@@QAE@ABU?$tmat3x2@N$00@1@@Z ENDP	; glm::tmat4x4<double,1>::tmat4x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$00@glm@@QAE@ABU?$tmat2x3@N$00@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
$T3 = -32						; size = 32
$T4 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tmat4x4@N$00@glm@@QAE@ABU?$tmat2x3@N$00@1@@Z PROC	; glm::tmat4x4<double,1>::tmat4x4<double,1>, COMDAT
; _this$ = ecx

; 185  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xorps	xmm1, xmm1
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	3
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat4x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm1
	movups	XMMWORD PTR [eax], xmm1
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat4x4

; 186  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T4[ebp]
	push	8
	pop	edx
	movsd	QWORD PTR $T4[ebp+24], xmm1
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]
	mov	ecx, edx
	movups	XMMWORD PTR $T4[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR $T4[ebp+16], xmm0
	rep movsd

; 187  : 		this->value[1] = col_type(m[1], 0);

	movups	xmm0, XMMWORD PTR [eax+24]
	lea	edi, DWORD PTR [ebx+32]
	mov	ecx, edx
	movsd	QWORD PTR $T3[ebp+24], xmm1
	lea	esi, DWORD PTR $T3[ebp]
	movups	XMMWORD PTR $T3[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+40]

; 188  : 		this->value[2] = col_type(0, 0, 1, 0);
; 189  : 		this->value[3] = col_type(0, 0, 0, 1);
; 190  : 	}

	mov	eax, ebx
	movsd	QWORD PTR $T3[ebp+16], xmm0
	xorps	xmm0, xmm0
	rep movsd
	movupd	XMMWORD PTR $T2[ebp], xmm0
	lea	edi, DWORD PTR [ebx+64]
	mov	ecx, edx
	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	lea	esi, DWORD PTR $T2[ebp]
	movupd	XMMWORD PTR $T2[ebp+16], xmm0
	rep movsd
	xorps	xmm0, xmm0
	lea	edi, DWORD PTR [ebx+96]
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	mov	ecx, edx
	movaps	xmm0, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	movupd	XMMWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x4@N$00@glm@@QAE@ABU?$tmat2x3@N$00@1@@Z ENDP	; glm::tmat4x4<double,1>::tmat4x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$00@glm@@QAE@ABU?$tmat3x3@N$00@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
$T3 = -32						; size = 32
$T4 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tmat4x4@N$00@glm@@QAE@ABU?$tmat3x3@N$00@1@@Z PROC	; glm::tmat4x4<double,1>::tmat4x4<double,1>, COMDAT
; _this$ = ecx

; 176  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xorps	xmm1, xmm1
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	3
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat4x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm1
	movups	XMMWORD PTR [eax], xmm1
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat4x4

; 177  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T4[ebp]
	push	8
	pop	edx
	movsd	QWORD PTR $T4[ebp+24], xmm1
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]
	mov	ecx, edx
	movups	XMMWORD PTR $T4[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR $T4[ebp+16], xmm0
	rep movsd

; 178  : 		this->value[1] = col_type(m[1], 0);

	movups	xmm0, XMMWORD PTR [eax+24]
	lea	edi, DWORD PTR [ebx+32]
	mov	ecx, edx
	movsd	QWORD PTR $T3[ebp+24], xmm1
	lea	esi, DWORD PTR $T3[ebp]
	movups	XMMWORD PTR $T3[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+40]
	movsd	QWORD PTR $T3[ebp+16], xmm0
	rep movsd

; 179  : 		this->value[2] = col_type(m[2], 0);

	movups	xmm0, XMMWORD PTR [eax+48]
	lea	edi, DWORD PTR [ebx+64]
	mov	ecx, edx
	movsd	QWORD PTR $T2[ebp+24], xmm1
	lea	esi, DWORD PTR $T2[ebp]
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+64]

; 180  : 		this->value[3] = col_type(0, 0, 0, 1);
; 181  : 	}

	mov	eax, ebx
	movsd	QWORD PTR $T2[ebp+16], xmm0
	xorps	xmm0, xmm0
	rep movsd
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ebx+96]
	mov	ecx, edx
	movaps	xmm0, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	lea	esi, DWORD PTR $T1[ebp]
	movupd	XMMWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x4@N$00@glm@@QAE@ABU?$tmat3x3@N$00@1@@Z ENDP	; glm::tmat4x4<double,1>::tmat4x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$00@glm@@QAE@ABU?$tmat2x2@N$00@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
$T3 = -32						; size = 32
$T4 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tmat4x4@N$00@glm@@QAE@ABU?$tmat2x2@N$00@1@@Z PROC	; glm::tmat4x4<double,1>::tmat4x4<double,1>, COMDAT
; _this$ = ecx

; 167  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xorps	xmm0, xmm0
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	3
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat4x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm0
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat4x4

; 168  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T4[ebp]
	push	8
	pop	edx
	mov	edi, ebx
	mov	ecx, edx
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR $T4[ebp], xmm0
	xorps	xmm0, xmm0
	movupd	XMMWORD PTR $T4[ebp+16], xmm0
	rep movsd

; 169  : 		this->value[1] = col_type(m[1], 0, 0);

	movups	xmm0, XMMWORD PTR [eax+16]
	lea	edi, DWORD PTR [ebx+32]
	mov	ecx, edx
	lea	esi, DWORD PTR $T3[ebp]

; 170  : 		this->value[2] = col_type(0, 0, 1, 0);
; 171  : 		this->value[3] = col_type(0, 0, 0, 1);
; 172  : 	}

	mov	eax, ebx
	movups	XMMWORD PTR $T3[ebp], xmm0
	xorps	xmm0, xmm0
	movupd	XMMWORD PTR $T3[ebp+16], xmm0
	rep movsd
	movupd	XMMWORD PTR $T2[ebp], xmm0
	lea	edi, DWORD PTR [ebx+64]
	mov	ecx, edx
	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	lea	esi, DWORD PTR $T2[ebp]
	movupd	XMMWORD PTR $T2[ebp+16], xmm0
	rep movsd
	xorps	xmm0, xmm0
	lea	edi, DWORD PTR [ebx+96]
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	mov	ecx, edx
	movaps	xmm0, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	movupd	XMMWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x4@N$00@glm@@QAE@ABU?$tmat2x2@N$00@1@@Z ENDP	; glm::tmat4x4<double,1>::tmat4x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$00@glm@@QAE@ABU?$tvec4@N$00@1@000@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
_v3$ = 20						; size = 4
??0?$tmat4x4@N$00@glm@@QAE@ABU?$tvec4@N$00@1@000@Z PROC	; glm::tmat4x4<double,1>::tmat4x4<double,1>, COMDAT
; _this$ = ecx

; 80   : 	{

	push	ebp
	mov	ebp, esp
	mov	edx, ecx
	xorps	xmm0, xmm0
	push	3
	pop	ecx
	lea	eax, DWORD PTR [edx+16]
$LL4@tmat4x4:
	dec	ecx
	movups	XMMWORD PTR [eax-16], xmm0
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat4x4

; 81   : 		this->value[0] = v0;

	push	esi
	mov	esi, DWORD PTR _v0$[ebp]
	push	edi
	push	8
	pop	eax
	mov	ecx, eax
	mov	edi, edx
	rep movsd

; 82   : 		this->value[1] = v1;

	mov	esi, DWORD PTR _v1$[ebp]
	lea	edi, DWORD PTR [edx+32]
	mov	ecx, eax
	rep movsd

; 83   : 		this->value[2] = v2;

	mov	esi, DWORD PTR _v2$[ebp]
	lea	edi, DWORD PTR [edx+64]
	mov	ecx, eax
	rep movsd

; 84   : 		this->value[3] = v3;

	mov	esi, DWORD PTR _v3$[ebp]
	lea	edi, DWORD PTR [edx+96]
	mov	ecx, eax

; 85   : 	}

	mov	eax, edx
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	16					; 00000010H
??0?$tmat4x4@N$00@glm@@QAE@ABU?$tvec4@N$00@1@000@Z ENDP	; glm::tmat4x4<double,1>::tmat4x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$00@glm@@QAE@ABN000000000000000@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
$T3 = -32						; size = 32
$T4 = -32						; size = 32
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_z0$ = 16						; size = 4
_w0$ = 20						; size = 4
_x1$ = 24						; size = 4
_y1$ = 28						; size = 4
_z1$ = 32						; size = 4
_w1$ = 36						; size = 4
_x2$ = 40						; size = 4
_y2$ = 44						; size = 4
_z2$ = 48						; size = 4
_w2$ = 52						; size = 4
_x3$ = 56						; size = 4
_y3$ = 60						; size = 4
_z3$ = 64						; size = 4
_w3$ = 68						; size = 4
??0?$tmat4x4@N$00@glm@@QAE@ABN000000000000000@Z PROC	; glm::tmat4x4<double,1>::tmat4x4<double,1>, COMDAT
; _this$ = ecx

; 65   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xorps	xmm0, xmm0
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	3
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat4x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm0
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat4x4

; 66   : 		this->value[0] = col_type(x0, y0, z0, w0);

	mov	eax, DWORD PTR _x0$[ebp]
	lea	esi, DWORD PTR $T4[ebp]
	push	8
	pop	edx
	mov	edi, ebx
	mov	ecx, edx
	movsd	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR _y0$[ebp]
	movsd	QWORD PTR $T4[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR _z0$[ebp]
	movsd	QWORD PTR $T4[ebp+8], xmm0
	movsd	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR _w0$[ebp]
	movsd	QWORD PTR $T4[ebp+16], xmm0
	movsd	xmm0, QWORD PTR [eax]

; 67   : 		this->value[1] = col_type(x1, y1, z1, w1);

	mov	eax, DWORD PTR _x1$[ebp]
	movsd	QWORD PTR $T4[ebp+24], xmm0
	rep movsd
	movsd	xmm0, QWORD PTR [eax]
	lea	edi, DWORD PTR [ebx+32]
	mov	eax, DWORD PTR _y1$[ebp]
	mov	ecx, edx
	movsd	QWORD PTR $T3[ebp], xmm0
	lea	esi, DWORD PTR $T3[ebp]
	movsd	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR _z1$[ebp]
	movsd	QWORD PTR $T3[ebp+8], xmm0
	movsd	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR _w1$[ebp]
	movsd	QWORD PTR $T3[ebp+16], xmm0
	movsd	xmm0, QWORD PTR [eax]

; 68   : 		this->value[2] = col_type(x2, y2, z2, w2);

	mov	eax, DWORD PTR _x2$[ebp]
	movsd	QWORD PTR $T3[ebp+24], xmm0
	rep movsd
	movsd	xmm0, QWORD PTR [eax]
	lea	edi, DWORD PTR [ebx+64]
	mov	eax, DWORD PTR _y2$[ebp]
	mov	ecx, edx
	movsd	QWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	movsd	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR _z2$[ebp]
	movsd	QWORD PTR $T2[ebp+8], xmm0
	movsd	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR _w2$[ebp]
	movsd	QWORD PTR $T2[ebp+16], xmm0
	movsd	xmm0, QWORD PTR [eax]

; 69   : 		this->value[3] = col_type(x3, y3, z3, w3);

	mov	eax, DWORD PTR _x3$[ebp]
	movsd	QWORD PTR $T2[ebp+24], xmm0
	rep movsd
	movsd	xmm0, QWORD PTR [eax]
	lea	edi, DWORD PTR [ebx+96]
	mov	eax, DWORD PTR _y3$[ebp]
	mov	ecx, edx
	movsd	QWORD PTR $T1[ebp], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	movsd	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR _z3$[ebp]
	movsd	QWORD PTR $T1[ebp+8], xmm0
	movsd	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR _w3$[ebp]
	movsd	QWORD PTR $T1[ebp+16], xmm0
	movsd	xmm0, QWORD PTR [eax]

; 70   : 	}

	mov	eax, ebx
	movsd	QWORD PTR $T1[ebp+24], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	64					; 00000040H
??0?$tmat4x4@N$00@glm@@QAE@ABN000000000000000@Z ENDP	; glm::tmat4x4<double,1>::tmat4x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$00@glm@@QAE@ABN@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
$T3 = -32						; size = 32
$T4 = -32						; size = 32
_s$ = 8							; size = 4
??0?$tmat4x4@N$00@glm@@QAE@ABN@Z PROC			; glm::tmat4x4<double,1>::tmat4x4<double,1>, COMDAT
; _this$ = ecx

; 50   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xorps	xmm1, xmm1
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	3
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat4x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm1
	movups	XMMWORD PTR [eax], xmm1
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat4x4

; 51   : 		this->value[0] = col_type(s, 0, 0, 0);

	mov	eax, DWORD PTR _s$[ebp]
	lea	esi, DWORD PTR $T4[ebp]
	push	8
	pop	edx
	movsd	QWORD PTR $T4[ebp+24], xmm1
	mov	edi, ebx
	movsd	xmm0, QWORD PTR [eax]
	mov	ecx, edx
	movsd	QWORD PTR $T4[ebp], xmm0
	xorps	xmm0, xmm0
	movupd	XMMWORD PTR $T4[ebp+8], xmm0
	rep movsd

; 52   : 		this->value[1] = col_type(0, s, 0, 0);

	movsd	xmm0, QWORD PTR [eax]
	lea	edi, DWORD PTR [ebx+32]
	movsd	QWORD PTR $T3[ebp+8], xmm0
	lea	esi, DWORD PTR $T3[ebp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR $T3[ebp], xmm1
	movupd	XMMWORD PTR $T3[ebp+16], xmm0
	mov	ecx, edx
	rep movsd
	movupd	XMMWORD PTR $T2[ebp], xmm0

; 53   : 		this->value[2] = col_type(0, 0, s, 0);

	lea	edi, DWORD PTR [ebx+64]
	mov	ecx, edx
	movsd	xmm0, QWORD PTR [eax]
	lea	esi, DWORD PTR $T2[ebp]
	movsd	QWORD PTR $T2[ebp+16], xmm0
	xorps	xmm0, xmm0
	movsd	QWORD PTR $T2[ebp+24], xmm1
	rep movsd
	movupd	XMMWORD PTR $T1[ebp], xmm0

; 54   : 		this->value[3] = col_type(0, 0, 0, s);

	lea	edi, DWORD PTR [ebx+96]
	mov	ecx, edx
	movsd	xmm0, QWORD PTR [eax]
	lea	esi, DWORD PTR $T1[ebp]
	movsd	QWORD PTR $T1[ebp+16], xmm1

; 55   : 	}

	mov	eax, ebx
	movsd	QWORD PTR $T1[ebp+24], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x4@N$00@glm@@QAE@ABN@Z ENDP			; glm::tmat4x4<double,1>::tmat4x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat4x4@N$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat4x4<double,1>::tmat4x4<double,1>, COMDAT
; _this$ = ecx

; 46   : 	{}

	push	3
	pop	edx
	lea	eax, DWORD PTR [ecx+16]
	xorps	xmm0, xmm0
$LL4@tmat4x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm0
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat4x4
	mov	eax, ecx
	ret	4
??0?$tmat4x4@N$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat4x4<double,1>::tmat4x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tmat4x4@N$00@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tmat4x4@N$00@glm@@QAE@ABU01@@Z PROC		; glm::tmat4x4<double,1>::tmat4x4<double,1>, COMDAT
; _this$ = ecx

; 231  : template struct tmat4x4<float64, mediump>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	32					; 00000020H
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tmat4x4@N$00@glm@@QAE@ABU01@@Z ENDP		; glm::tmat4x4<double,1>::tmat4x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$00@glm@@QAE@XZ
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
$T3 = -32						; size = 32
$T4 = -32						; size = 32
??0?$tmat4x4@N$00@glm@@QAE@XZ PROC			; glm::tmat4x4<double,1>::tmat4x4<double,1>, COMDAT
; _this$ = ecx

; 13   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xorps	xmm0, xmm0
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	3
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat4x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm0
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat4x4

; 14   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 15   : 				this->value[0] = col_type(1, 0, 0, 0);

	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	lea	esi, DWORD PTR $T4[ebp]
	movupd	XMMWORD PTR $T4[ebp], xmm0
	mov	edi, ebx
	xorps	xmm0, xmm0
	movupd	XMMWORD PTR $T4[ebp+16], xmm0
	push	8
	movaps	xmm0, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	pop	eax
	mov	ecx, eax
	rep movsd
	movupd	XMMWORD PTR $T3[ebp], xmm0

; 16   : 				this->value[1] = col_type(0, 1, 0, 0);

	lea	edi, DWORD PTR [ebx+32]
	mov	ecx, eax
	xorps	xmm0, xmm0
	lea	esi, DWORD PTR $T3[ebp]
	movupd	XMMWORD PTR $T3[ebp+16], xmm0
	rep movsd
	movupd	XMMWORD PTR $T2[ebp], xmm0

; 17   : 				this->value[2] = col_type(0, 0, 1, 0);

	lea	edi, DWORD PTR [ebx+64]
	mov	ecx, eax
	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	lea	esi, DWORD PTR $T2[ebp]
	movupd	XMMWORD PTR $T2[ebp+16], xmm0
	rep movsd
	xorps	xmm0, xmm0

; 18   : 				this->value[3] = col_type(0, 0, 0, 1);

	lea	edi, DWORD PTR [ebx+96]
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	mov	ecx, eax
	movaps	xmm0, XMMWORD PTR __xmm@3ff00000000000000000000000000000

; 19   : #			endif
; 20   : 		}

	mov	eax, ebx
	movupd	XMMWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$tmat4x4@N$00@glm@@QAE@XZ ENDP			; glm::tmat4x4<double,1>::tmat4x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??F?$tmat4x4@M$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat4x4@M$00@glm@@QAE?AU01@H@Z PROC		; glm::tmat4x4<float,1>::operator--, COMDAT
; _this$ = ecx

; 394  : 	{

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi

; 395  : 		tmat4x4<T, P> Result(*this);

	mov	edi, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, ecx
	push	16					; 00000010H
	pop	ecx
	mov	esi, eax
	rep movsd

; 396  : 		--*this;

	mov	ecx, eax
	call	??F?$tmat4x4@M$00@glm@@QAEAAU01@XZ	; glm::tmat4x4<float,1>::operator--

; 397  : 		return Result;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi

; 398  : 	}

	pop	ebp
	ret	8
??F?$tmat4x4@M$00@glm@@QAE?AU01@H@Z ENDP		; glm::tmat4x4<float,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??E?$tmat4x4@M$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat4x4@M$00@glm@@QAE?AU01@H@Z PROC		; glm::tmat4x4<float,1>::operator++, COMDAT
; _this$ = ecx

; 386  : 	{

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi

; 387  : 		tmat4x4<T, P> Result(*this);

	mov	edi, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, ecx
	push	16					; 00000010H
	pop	ecx
	mov	esi, eax
	rep movsd

; 388  : 		++*this;

	mov	ecx, eax
	call	??E?$tmat4x4@M$00@glm@@QAEAAU01@XZ	; glm::tmat4x4<float,1>::operator++

; 389  : 		return Result;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi

; 390  : 	}

	pop	ebp
	ret	8
??E?$tmat4x4@M$00@glm@@QAE?AU01@H@Z ENDP		; glm::tmat4x4<float,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??F?$tmat4x4@M$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat4x4@M$00@glm@@QAEAAU01@XZ PROC			; glm::tmat4x4<float,1>::operator--, COMDAT
; _this$ = ecx

; 377  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 378  : 		--this->value[1];
; 379  : 		--this->value[2];
; 380  : 		--this->value[3];
; 381  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0

; 382  : 	}

	ret	0
??F?$tmat4x4@M$00@glm@@QAEAAU01@XZ ENDP			; glm::tmat4x4<float,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??E?$tmat4x4@M$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat4x4@M$00@glm@@QAEAAU01@XZ PROC			; glm::tmat4x4<float,1>::operator++, COMDAT
; _this$ = ecx

; 367  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 368  : 		++this->value[1];
; 369  : 		++this->value[2];
; 370  : 		++this->value[3];
; 371  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0

; 372  : 	}

	ret	0
??E?$tmat4x4@M$00@glm@@QAEAAU01@XZ ENDP			; glm::tmat4x4<float,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tmat4x4@M$00@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tmat4x4@M$00@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tmat4x4<float,1>::operator=, COMDAT
; _this$ = ecx

; 230  : template struct tmat4x4<float32, mediump>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	16					; 00000010H
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tmat4x4@M$00@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tmat4x4<float,1>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??A?$tmat4x4@M$00@glm@@QBEABU?$tvec4@M$00@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat4x4@M$00@glm@@QBEABU?$tvec4@M$00@1@H@Z PROC	; glm::tmat4x4<float,1>::operator[], COMDAT
; _this$ = ecx

; 248  : 	{

	push	ebp
	mov	ebp, esp

; 249  : 		assert(i < this->length());
; 250  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, ecx

; 251  : 	}

	pop	ebp
	ret	4
??A?$tmat4x4@M$00@glm@@QBEABU?$tvec4@M$00@1@H@Z ENDP	; glm::tmat4x4<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??A?$tmat4x4@M$00@glm@@QAEAAU?$tvec4@M$00@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat4x4@M$00@glm@@QAEAAU?$tvec4@M$00@1@H@Z PROC	; glm::tmat4x4<float,1>::operator[], COMDAT
; _this$ = ecx

; 241  : 	{

	push	ebp
	mov	ebp, esp

; 242  : 		assert(i < this->length());
; 243  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, ecx

; 244  : 	}

	pop	ebp
	ret	4
??A?$tmat4x4@M$00@glm@@QAEAAU?$tvec4@M$00@1@H@Z ENDP	; glm::tmat4x4<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.hpp
;	COMDAT ?length@?$tmat4x4@M$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat4x4@M$00@glm@@SAHXZ PROC			; glm::tmat4x4<float,1>::length, COMDAT

; 84   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	push	4
	pop	eax
	ret	0
?length@?$tmat4x4@M$00@glm@@SAHXZ ENDP			; glm::tmat4x4<float,1>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$00@glm@@QAE@ABU?$tmat4x3@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
$T4 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat4x4@M$00@glm@@QAE@ABU?$tmat4x3@M$00@1@@Z PROC	; glm::tmat4x4<float,1>::tmat4x4<float,1>, COMDAT
; _this$ = ecx

; 230  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	lea	eax, DWORD PTR [ecx+8]
	push	3
	pop	edx
$LL4@tmat4x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat4x4

; 231  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	and	DWORD PTR $T4[ebp+12], 0
	push	esi
	push	edi
	movss	xmm0, DWORD PTR [eax]
	lea	esi, DWORD PTR $T4[ebp]
	movss	DWORD PTR $T4[ebp], xmm0
	mov	edi, ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T4[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T4[ebp+8], xmm0
	movsd
	movsd
	movsd
	movsd

; 232  : 		this->value[1] = col_type(m[1], 0);

	movss	xmm0, DWORD PTR [eax+12]
	lea	edi, DWORD PTR [ecx+16]
	and	DWORD PTR $T3[ebp+12], 0
	lea	esi, DWORD PTR $T3[ebp]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR $T3[ebp+8], xmm0
	movsd
	movsd
	movsd
	movsd

; 233  : 		this->value[2] = col_type(m[2], 0);

	movss	xmm0, DWORD PTR [eax+24]
	lea	edi, DWORD PTR [ecx+32]
	and	DWORD PTR $T2[ebp+12], 0
	lea	esi, DWORD PTR $T2[ebp]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+28]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+32]
	movss	DWORD PTR $T2[ebp+8], xmm0
	movsd
	movsd
	movsd
	movsd

; 234  : 		this->value[3] = col_type(m[3], 1);

	movss	xmm0, DWORD PTR [eax+36]
	lea	edi, DWORD PTR [ecx+48]
	movss	DWORD PTR $T1[ebp], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	movss	xmm0, DWORD PTR [eax+40]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+44]

; 235  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+8], xmm0
	mov	DWORD PTR $T1[ebp+12], 1065353216	; 3f800000H
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x4@M$00@glm@@QAE@ABU?$tmat4x3@M$00@1@@Z ENDP	; glm::tmat4x4<float,1>::tmat4x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$00@glm@@QAE@ABU?$tmat3x4@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat4x4@M$00@glm@@QAE@ABU?$tmat3x4@M$00@1@@Z PROC	; glm::tmat4x4<float,1>::tmat4x4<float,1>, COMDAT
; _this$ = ecx

; 221  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	lea	eax, DWORD PTR [ecx+8]
	push	3
	pop	edx
$LL4@tmat4x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat4x4

; 222  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	esi, eax
	movaps	xmm0, XMMWORD PTR __xmm@3f800000000000000000000000000000
	mov	edi, ecx
	movups	XMMWORD PTR $T1[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 223  : 		this->value[1] = m[1];

	lea	esi, DWORD PTR [eax+16]
	lea	edi, DWORD PTR [ecx+16]
	movsd
	movsd
	movsd
	movsd

; 224  : 		this->value[2] = m[2];

	lea	esi, DWORD PTR [eax+32]

; 225  : 		this->value[3] = col_type(0, 0, 0, 1);
; 226  : 	}

	mov	eax, ecx
	lea	edi, DWORD PTR [ecx+32]
	movsd
	movsd
	movsd
	movsd
	lea	edi, DWORD PTR [ecx+48]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x4@M$00@glm@@QAE@ABU?$tmat3x4@M$00@1@@Z ENDP	; glm::tmat4x4<float,1>::tmat4x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$00@glm@@QAE@ABU?$tmat4x2@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
$T4 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat4x4@M$00@glm@@QAE@ABU?$tmat4x2@M$00@1@@Z PROC	; glm::tmat4x4<float,1>::tmat4x4<float,1>, COMDAT
; _this$ = ecx

; 212  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	lea	eax, DWORD PTR [ecx+8]
	push	3
	pop	edx
$LL4@tmat4x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat4x4

; 213  : 		this->value[0] = col_type(m[0], 0, 0);

	and	DWORD PTR $T4[ebp+8], 0
	and	DWORD PTR $T4[ebp+12], 0
	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T4[ebp]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T4[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T4[ebp+4], xmm0
	movsd
	movsd
	movsd
	movsd

; 214  : 		this->value[1] = col_type(m[1], 0, 0);

	movss	xmm0, DWORD PTR [eax+8]
	lea	edi, DWORD PTR [ecx+16]
	and	DWORD PTR $T3[ebp+8], 0
	lea	esi, DWORD PTR $T3[ebp]
	and	DWORD PTR $T3[ebp+12], 0
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+12]

; 215  : 		this->value[2] = col_type(0, 0, 1, 0);
; 216  : 		this->value[3] = col_type(0, 0, 0, 1);
; 217  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T3[ebp+4], xmm0
	movsd
	movaps	xmm0, XMMWORD PTR __xmm@000000003f8000000000000000000000
	movsd
	movsd
	movsd
	movups	XMMWORD PTR $T2[ebp], xmm0
	lea	edi, DWORD PTR [ecx+32]
	movaps	xmm0, XMMWORD PTR __xmm@3f800000000000000000000000000000
	lea	esi, DWORD PTR $T2[ebp]
	movsd
	movsd
	movsd
	movsd
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+48]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x4@M$00@glm@@QAE@ABU?$tmat4x2@M$00@1@@Z ENDP	; glm::tmat4x4<float,1>::tmat4x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$00@glm@@QAE@ABU?$tmat2x4@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat4x4@M$00@glm@@QAE@ABU?$tmat2x4@M$00@1@@Z PROC	; glm::tmat4x4<float,1>::tmat4x4<float,1>, COMDAT
; _this$ = ecx

; 203  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	lea	eax, DWORD PTR [ecx+8]
	push	3
	pop	edx
$LL4@tmat4x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat4x4

; 204  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	esi, eax
	movaps	xmm0, XMMWORD PTR __xmm@000000003f8000000000000000000000
	mov	edi, ecx
	movups	XMMWORD PTR $T2[ebp], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@3f800000000000000000000000000000
	movsd
	movsd
	movsd
	movsd

; 205  : 		this->value[1] = m[1];

	lea	esi, DWORD PTR [eax+16]

; 206  : 		this->value[2] = col_type(0, 0, 1, 0);
; 207  : 		this->value[3] = col_type(0, 0, 0, 1);
; 208  : 	}

	mov	eax, ecx
	lea	edi, DWORD PTR [ecx+16]
	movsd
	movsd
	movsd
	movsd
	lea	edi, DWORD PTR [ecx+32]
	lea	esi, DWORD PTR $T2[ebp]
	movsd
	movsd
	movsd
	movsd
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+48]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x4@M$00@glm@@QAE@ABU?$tmat2x4@M$00@1@@Z ENDP	; glm::tmat4x4<float,1>::tmat4x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$00@glm@@QAE@ABU?$tmat3x2@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
$T4 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat4x4@M$00@glm@@QAE@ABU?$tmat3x2@M$00@1@@Z PROC	; glm::tmat4x4<float,1>::tmat4x4<float,1>, COMDAT
; _this$ = ecx

; 194  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	lea	eax, DWORD PTR [ecx+8]
	push	3
	pop	edx
$LL4@tmat4x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat4x4

; 195  : 		this->value[0] = col_type(m[0], 0, 0);

	and	DWORD PTR $T4[ebp+8], 0
	and	DWORD PTR $T4[ebp+12], 0
	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T4[ebp]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T4[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T4[ebp+4], xmm0
	movsd
	movsd
	movsd
	movsd

; 196  : 		this->value[1] = col_type(m[1], 0, 0);

	movss	xmm0, DWORD PTR [eax+8]
	lea	edi, DWORD PTR [ecx+16]
	and	DWORD PTR $T3[ebp+8], 0
	lea	esi, DWORD PTR $T3[ebp]
	and	DWORD PTR $T3[ebp+12], 0
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movsd
	movsd
	movsd
	movsd

; 197  : 		this->value[2] = col_type(m[2], 1, 0);

	movss	xmm0, DWORD PTR [eax+16]
	lea	edi, DWORD PTR [ecx+32]
	and	DWORD PTR $T2[ebp+12], 0
	lea	esi, DWORD PTR $T2[ebp]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+20]

; 198  : 		this->value[3] = col_type(0, 0, 0, 1);
; 199  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T2[ebp+4], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@3f800000000000000000000000000000
	mov	DWORD PTR $T2[ebp+8], 1065353216	; 3f800000H
	movsd
	movsd
	movsd
	movsd
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+48]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x4@M$00@glm@@QAE@ABU?$tmat3x2@M$00@1@@Z ENDP	; glm::tmat4x4<float,1>::tmat4x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$00@glm@@QAE@ABU?$tmat2x3@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
$T4 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat4x4@M$00@glm@@QAE@ABU?$tmat2x3@M$00@1@@Z PROC	; glm::tmat4x4<float,1>::tmat4x4<float,1>, COMDAT
; _this$ = ecx

; 185  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	lea	eax, DWORD PTR [ecx+8]
	push	3
	pop	edx
$LL4@tmat4x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat4x4

; 186  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	and	DWORD PTR $T4[ebp+12], 0
	push	esi
	push	edi
	movss	xmm0, DWORD PTR [eax]
	lea	esi, DWORD PTR $T4[ebp]
	movss	DWORD PTR $T4[ebp], xmm0
	mov	edi, ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T4[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T4[ebp+8], xmm0
	movsd
	movsd
	movsd
	movsd

; 187  : 		this->value[1] = col_type(m[1], 0);

	movss	xmm0, DWORD PTR [eax+12]
	lea	edi, DWORD PTR [ecx+16]
	and	DWORD PTR $T3[ebp+12], 0
	lea	esi, DWORD PTR $T3[ebp]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+20]

; 188  : 		this->value[2] = col_type(0, 0, 1, 0);
; 189  : 		this->value[3] = col_type(0, 0, 0, 1);
; 190  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T3[ebp+8], xmm0
	movsd
	movaps	xmm0, XMMWORD PTR __xmm@000000003f8000000000000000000000
	movsd
	movsd
	movsd
	movups	XMMWORD PTR $T2[ebp], xmm0
	lea	edi, DWORD PTR [ecx+32]
	movaps	xmm0, XMMWORD PTR __xmm@3f800000000000000000000000000000
	lea	esi, DWORD PTR $T2[ebp]
	movsd
	movsd
	movsd
	movsd
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+48]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x4@M$00@glm@@QAE@ABU?$tmat2x3@M$00@1@@Z ENDP	; glm::tmat4x4<float,1>::tmat4x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$00@glm@@QAE@ABU?$tmat3x3@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
$T4 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat4x4@M$00@glm@@QAE@ABU?$tmat3x3@M$00@1@@Z PROC	; glm::tmat4x4<float,1>::tmat4x4<float,1>, COMDAT
; _this$ = ecx

; 176  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	lea	eax, DWORD PTR [ecx+8]
	push	3
	pop	edx
$LL4@tmat4x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat4x4

; 177  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	and	DWORD PTR $T4[ebp+12], 0
	push	esi
	push	edi
	movss	xmm0, DWORD PTR [eax]
	lea	esi, DWORD PTR $T4[ebp]
	movss	DWORD PTR $T4[ebp], xmm0
	mov	edi, ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T4[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T4[ebp+8], xmm0
	movsd
	movsd
	movsd
	movsd

; 178  : 		this->value[1] = col_type(m[1], 0);

	movss	xmm0, DWORD PTR [eax+12]
	lea	edi, DWORD PTR [ecx+16]
	and	DWORD PTR $T3[ebp+12], 0
	lea	esi, DWORD PTR $T3[ebp]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR $T3[ebp+8], xmm0
	movsd
	movsd
	movsd
	movsd

; 179  : 		this->value[2] = col_type(m[2], 0);

	movss	xmm0, DWORD PTR [eax+24]
	lea	edi, DWORD PTR [ecx+32]
	and	DWORD PTR $T2[ebp+12], 0
	lea	esi, DWORD PTR $T2[ebp]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+28]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+32]

; 180  : 		this->value[3] = col_type(0, 0, 0, 1);
; 181  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T2[ebp+8], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@3f800000000000000000000000000000
	movsd
	movsd
	movsd
	movsd
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+48]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x4@M$00@glm@@QAE@ABU?$tmat3x3@M$00@1@@Z ENDP	; glm::tmat4x4<float,1>::tmat4x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$00@glm@@QAE@ABU?$tmat2x2@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
$T4 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat4x4@M$00@glm@@QAE@ABU?$tmat2x2@M$00@1@@Z PROC	; glm::tmat4x4<float,1>::tmat4x4<float,1>, COMDAT
; _this$ = ecx

; 167  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	lea	eax, DWORD PTR [ecx+8]
	push	3
	pop	edx
$LL4@tmat4x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat4x4

; 168  : 		this->value[0] = col_type(m[0], 0, 0);

	and	DWORD PTR $T4[ebp+8], 0
	and	DWORD PTR $T4[ebp+12], 0
	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T4[ebp]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T4[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T4[ebp+4], xmm0
	movsd
	movsd
	movsd
	movsd

; 169  : 		this->value[1] = col_type(m[1], 0, 0);

	movss	xmm0, DWORD PTR [eax+8]
	lea	edi, DWORD PTR [ecx+16]
	and	DWORD PTR $T3[ebp+8], 0
	lea	esi, DWORD PTR $T3[ebp]
	and	DWORD PTR $T3[ebp+12], 0
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+12]

; 170  : 		this->value[2] = col_type(0, 0, 1, 0);
; 171  : 		this->value[3] = col_type(0, 0, 0, 1);
; 172  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T3[ebp+4], xmm0
	movsd
	movaps	xmm0, XMMWORD PTR __xmm@000000003f8000000000000000000000
	movsd
	movsd
	movsd
	movups	XMMWORD PTR $T2[ebp], xmm0
	lea	edi, DWORD PTR [ecx+32]
	movaps	xmm0, XMMWORD PTR __xmm@3f800000000000000000000000000000
	lea	esi, DWORD PTR $T2[ebp]
	movsd
	movsd
	movsd
	movsd
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+48]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x4@M$00@glm@@QAE@ABU?$tmat2x2@M$00@1@@Z ENDP	; glm::tmat4x4<float,1>::tmat4x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$00@glm@@QAE@ABU?$tvec4@M$00@1@000@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
_v3$ = 20						; size = 4
??0?$tmat4x4@M$00@glm@@QAE@ABU?$tvec4@M$00@1@000@Z PROC	; glm::tmat4x4<float,1>::tmat4x4<float,1>, COMDAT
; _this$ = ecx

; 80   : 	{

	push	ebp
	mov	ebp, esp
	push	3
	pop	edx
	lea	eax, DWORD PTR [ecx+8]
$LL4@tmat4x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat4x4

; 81   : 		this->value[0] = v0;

	push	esi
	mov	esi, DWORD PTR _v0$[ebp]

; 82   : 		this->value[1] = v1;
; 83   : 		this->value[2] = v2;
; 84   : 		this->value[3] = v3;
; 85   : 	}

	mov	eax, ecx
	push	edi
	mov	edi, ecx
	movsd
	movsd
	movsd
	movsd
	mov	esi, DWORD PTR _v1$[ebp]
	lea	edi, DWORD PTR [ecx+16]
	movsd
	movsd
	movsd
	movsd
	mov	esi, DWORD PTR _v2$[ebp]
	lea	edi, DWORD PTR [ecx+32]
	movsd
	movsd
	movsd
	movsd
	mov	esi, DWORD PTR _v3$[ebp]
	lea	edi, DWORD PTR [ecx+48]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	16					; 00000010H
??0?$tmat4x4@M$00@glm@@QAE@ABU?$tvec4@M$00@1@000@Z ENDP	; glm::tmat4x4<float,1>::tmat4x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$00@glm@@QAE@ABM000000000000000@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
$T4 = -16						; size = 16
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_z0$ = 16						; size = 4
_w0$ = 20						; size = 4
_x1$ = 24						; size = 4
_y1$ = 28						; size = 4
_z1$ = 32						; size = 4
_w1$ = 36						; size = 4
_x2$ = 40						; size = 4
_y2$ = 44						; size = 4
_z2$ = 48						; size = 4
_w2$ = 52						; size = 4
_x3$ = 56						; size = 4
_y3$ = 60						; size = 4
_z3$ = 64						; size = 4
_w3$ = 68						; size = 4
??0?$tmat4x4@M$00@glm@@QAE@ABM000000000000000@Z PROC	; glm::tmat4x4<float,1>::tmat4x4<float,1>, COMDAT
; _this$ = ecx

; 65   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	lea	eax, DWORD PTR [ecx+8]
	push	3
	pop	edx
$LL4@tmat4x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat4x4

; 66   : 		this->value[0] = col_type(x0, y0, z0, w0);

	mov	eax, DWORD PTR _x0$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T4[ebp]
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _y0$[ebp]
	movss	DWORD PTR $T4[ebp], xmm0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _z0$[ebp]
	movss	DWORD PTR $T4[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _w0$[ebp]
	movss	DWORD PTR $T4[ebp+8], xmm0
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T4[ebp+12], xmm0
	movsd

; 67   : 		this->value[1] = col_type(x1, y1, z1, w1);

	mov	eax, DWORD PTR _x1$[ebp]
	movsd
	movsd
	movsd
	movss	xmm0, DWORD PTR [eax]
	lea	edi, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _y1$[ebp]
	lea	esi, DWORD PTR $T3[ebp]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _z1$[ebp]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _w1$[ebp]
	movss	DWORD PTR $T3[ebp+8], xmm0
	movss	xmm0, DWORD PTR [eax]

; 68   : 		this->value[2] = col_type(x2, y2, z2, w2);

	mov	eax, DWORD PTR _x2$[ebp]
	movss	DWORD PTR $T3[ebp+12], xmm0
	movsd
	movsd
	movsd
	movsd
	movss	xmm0, DWORD PTR [eax]
	lea	edi, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR _y2$[ebp]
	lea	esi, DWORD PTR $T2[ebp]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _z2$[ebp]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _w2$[ebp]
	movss	DWORD PTR $T2[ebp+8], xmm0
	movss	xmm0, DWORD PTR [eax]

; 69   : 		this->value[3] = col_type(x3, y3, z3, w3);

	mov	eax, DWORD PTR _x3$[ebp]
	movss	DWORD PTR $T2[ebp+12], xmm0
	movsd
	movsd
	movsd
	movsd
	movss	xmm0, DWORD PTR [eax]
	lea	edi, DWORD PTR [ecx+48]
	mov	eax, DWORD PTR _y3$[ebp]
	lea	esi, DWORD PTR $T1[ebp]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _z3$[ebp]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _w3$[ebp]
	movss	DWORD PTR $T1[ebp+8], xmm0
	movss	xmm0, DWORD PTR [eax]

; 70   : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+12], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	64					; 00000040H
??0?$tmat4x4@M$00@glm@@QAE@ABM000000000000000@Z ENDP	; glm::tmat4x4<float,1>::tmat4x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$00@glm@@QAE@ABM@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
$T4 = -16						; size = 16
_s$ = 8							; size = 4
??0?$tmat4x4@M$00@glm@@QAE@ABM@Z PROC			; glm::tmat4x4<float,1>::tmat4x4<float,1>, COMDAT
; _this$ = ecx

; 50   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	lea	eax, DWORD PTR [ecx+8]
	push	3
	pop	edx
$LL4@tmat4x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat4x4

; 51   : 		this->value[0] = col_type(s, 0, 0, 0);

	and	DWORD PTR $T4[ebp+4], 0
	and	DWORD PTR $T4[ebp+12], 0
	and	DWORD PTR $T4[ebp+8], 0
	mov	eax, DWORD PTR _s$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T4[ebp]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T4[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 52   : 		this->value[1] = col_type(0, s, 0, 0);

	movss	xmm0, DWORD PTR [eax]
	lea	edi, DWORD PTR [ecx+16]
	and	DWORD PTR $T3[ebp], 0
	lea	esi, DWORD PTR $T3[ebp]
	and	DWORD PTR $T3[ebp+12], 0
	and	DWORD PTR $T3[ebp+8], 0
	movss	DWORD PTR $T3[ebp+4], xmm0
	movsd
	movsd
	movsd
	movsd

; 53   : 		this->value[2] = col_type(0, 0, s, 0);

	movss	xmm0, DWORD PTR [eax]
	lea	edi, DWORD PTR [ecx+32]
	and	DWORD PTR $T2[ebp], 0
	lea	esi, DWORD PTR $T2[ebp]
	and	DWORD PTR $T2[ebp+4], 0
	and	DWORD PTR $T2[ebp+12], 0
	movss	DWORD PTR $T2[ebp+8], xmm0
	movsd
	movsd
	movsd
	movsd

; 54   : 		this->value[3] = col_type(0, 0, 0, s);

	movss	xmm0, DWORD PTR [eax]
	lea	edi, DWORD PTR [ecx+48]
	and	DWORD PTR $T1[ebp], 0
	lea	esi, DWORD PTR $T1[ebp]
	and	DWORD PTR $T1[ebp+4], 0

; 55   : 	}

	mov	eax, ecx
	and	DWORD PTR $T1[ebp+8], 0
	movss	DWORD PTR $T1[ebp+12], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x4@M$00@glm@@QAE@ABM@Z ENDP			; glm::tmat4x4<float,1>::tmat4x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat4x4@M$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat4x4<float,1>::tmat4x4<float,1>, COMDAT
; _this$ = ecx

; 46   : 	{}

	push	3
	pop	edx
	lea	eax, DWORD PTR [ecx+8]
$LL4@tmat4x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat4x4
	mov	eax, ecx
	ret	4
??0?$tmat4x4@M$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat4x4<float,1>::tmat4x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tmat4x4@M$00@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tmat4x4@M$00@glm@@QAE@ABU01@@Z PROC		; glm::tmat4x4<float,1>::tmat4x4<float,1>, COMDAT
; _this$ = ecx

; 230  : template struct tmat4x4<float32, mediump>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	16					; 00000010H
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tmat4x4@M$00@glm@@QAE@ABU01@@Z ENDP		; glm::tmat4x4<float,1>::tmat4x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$00@glm@@QAE@XZ
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
$T4 = -16						; size = 16
??0?$tmat4x4@M$00@glm@@QAE@XZ PROC			; glm::tmat4x4<float,1>::tmat4x4<float,1>, COMDAT
; _this$ = ecx

; 13   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	lea	eax, DWORD PTR [ecx+8]
	push	3
	pop	edx
$LL4@tmat4x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat4x4

; 14   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 15   : 				this->value[0] = col_type(1, 0, 0, 0);
; 16   : 				this->value[1] = col_type(0, 1, 0, 0);
; 17   : 				this->value[2] = col_type(0, 0, 1, 0);
; 18   : 				this->value[3] = col_type(0, 0, 0, 1);
; 19   : #			endif
; 20   : 		}

	movaps	xmm0, XMMWORD PTR __xmm@0000000000000000000000003f800000
	mov	eax, ecx
	push	esi
	push	edi
	movups	XMMWORD PTR $T4[ebp], xmm0
	lea	esi, DWORD PTR $T4[ebp]
	mov	edi, ecx
	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003f80000000000000
	movsd
	movsd
	movsd
	movsd
	movups	XMMWORD PTR $T3[ebp], xmm0
	lea	edi, DWORD PTR [ecx+16]
	movaps	xmm0, XMMWORD PTR __xmm@000000003f8000000000000000000000
	lea	esi, DWORD PTR $T3[ebp]
	movsd
	movsd
	movsd
	movsd
	movups	XMMWORD PTR $T2[ebp], xmm0
	lea	edi, DWORD PTR [ecx+32]
	movaps	xmm0, XMMWORD PTR __xmm@3f800000000000000000000000000000
	lea	esi, DWORD PTR $T2[ebp]
	movsd
	movsd
	movsd
	movsd
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+48]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$tmat4x4@M$00@glm@@QAE@XZ ENDP			; glm::tmat4x4<float,1>::tmat4x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??F?$tmat4x4@N$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat4x4@N$01@glm@@QAE?AU01@H@Z PROC		; glm::tmat4x4<double,2>::operator--, COMDAT
; _this$ = ecx

; 394  : 	{

	push	ebp
	mov	ebp, esp

; 395  : 		tmat4x4<T, P> Result(*this);
; 396  : 		--*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	mov	edx, ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	movups	xmm0, XMMWORD PTR [edx]
	push	32					; 00000020H
	pop	ecx
	subpd	xmm0, xmm1
	mov	esi, edx
	mov	edi, eax
	rep movsd
	movups	XMMWORD PTR [edx], xmm0
	pop	edi
	movups	xmm0, XMMWORD PTR [edx+16]
	pop	esi
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+16], xmm0
	movups	xmm0, XMMWORD PTR [edx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+32], xmm0
	movups	xmm0, XMMWORD PTR [edx+48]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+48], xmm0
	movups	xmm0, XMMWORD PTR [edx+64]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+64], xmm0
	movups	xmm0, XMMWORD PTR [edx+80]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+80], xmm0
	movups	xmm0, XMMWORD PTR [edx+96]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+96], xmm0
	movups	xmm0, XMMWORD PTR [edx+112]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+112], xmm0

; 397  : 		return Result;
; 398  : 	}

	pop	ebp
	ret	8
??F?$tmat4x4@N$01@glm@@QAE?AU01@H@Z ENDP		; glm::tmat4x4<double,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??E?$tmat4x4@N$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat4x4@N$01@glm@@QAE?AU01@H@Z PROC		; glm::tmat4x4<double,2>::operator++, COMDAT
; _this$ = ecx

; 386  : 	{

	push	ebp
	mov	ebp, esp

; 387  : 		tmat4x4<T, P> Result(*this);
; 388  : 		++*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	mov	edx, ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	movups	xmm0, XMMWORD PTR [edx]
	push	32					; 00000020H
	pop	ecx
	addpd	xmm0, xmm1
	mov	esi, edx
	mov	edi, eax
	rep movsd
	movups	XMMWORD PTR [edx], xmm0
	pop	edi
	movups	xmm0, XMMWORD PTR [edx+16]
	pop	esi
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+16], xmm0
	movups	xmm0, XMMWORD PTR [edx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+32], xmm0
	movups	xmm0, XMMWORD PTR [edx+48]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+48], xmm0
	movups	xmm0, XMMWORD PTR [edx+64]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+64], xmm0
	movups	xmm0, XMMWORD PTR [edx+80]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+80], xmm0
	movups	xmm0, XMMWORD PTR [edx+96]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+96], xmm0
	movups	xmm0, XMMWORD PTR [edx+112]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+112], xmm0

; 389  : 		return Result;
; 390  : 	}

	pop	ebp
	ret	8
??E?$tmat4x4@N$01@glm@@QAE?AU01@H@Z ENDP		; glm::tmat4x4<double,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??F?$tmat4x4@N$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat4x4@N$01@glm@@QAEAAU01@XZ PROC			; glm::tmat4x4<double,2>::operator--, COMDAT
; _this$ = ecx

; 377  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 378  : 		--this->value[1];
; 379  : 		--this->value[2];
; 380  : 		--this->value[3];
; 381  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	xmm0, XMMWORD PTR [ecx+64]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	xmm0, XMMWORD PTR [ecx+80]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+80], xmm0
	movups	xmm0, XMMWORD PTR [ecx+96]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+96], xmm0
	movups	xmm0, XMMWORD PTR [ecx+112]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+112], xmm0

; 382  : 	}

	ret	0
??F?$tmat4x4@N$01@glm@@QAEAAU01@XZ ENDP			; glm::tmat4x4<double,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??E?$tmat4x4@N$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat4x4@N$01@glm@@QAEAAU01@XZ PROC			; glm::tmat4x4<double,2>::operator++, COMDAT
; _this$ = ecx

; 367  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 368  : 		++this->value[1];
; 369  : 		++this->value[2];
; 370  : 		++this->value[3];
; 371  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	xmm0, XMMWORD PTR [ecx+64]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	xmm0, XMMWORD PTR [ecx+80]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+80], xmm0
	movups	xmm0, XMMWORD PTR [ecx+96]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+96], xmm0
	movups	xmm0, XMMWORD PTR [ecx+112]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+112], xmm0

; 372  : 	}

	ret	0
??E?$tmat4x4@N$01@glm@@QAEAAU01@XZ ENDP			; glm::tmat4x4<double,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tmat4x4@N$01@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tmat4x4@N$01@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tmat4x4<double,2>::operator=, COMDAT
; _this$ = ecx

; 228  : template struct tmat4x4<float64, lowp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	32					; 00000020H
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tmat4x4@N$01@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tmat4x4<double,2>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??A?$tmat4x4@N$01@glm@@QBEABU?$tvec4@N$01@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat4x4@N$01@glm@@QBEABU?$tvec4@N$01@1@H@Z PROC	; glm::tmat4x4<double,2>::operator[], COMDAT
; _this$ = ecx

; 248  : 	{

	push	ebp
	mov	ebp, esp

; 249  : 		assert(i < this->length());
; 250  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	add	eax, ecx

; 251  : 	}

	pop	ebp
	ret	4
??A?$tmat4x4@N$01@glm@@QBEABU?$tvec4@N$01@1@H@Z ENDP	; glm::tmat4x4<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??A?$tmat4x4@N$01@glm@@QAEAAU?$tvec4@N$01@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat4x4@N$01@glm@@QAEAAU?$tvec4@N$01@1@H@Z PROC	; glm::tmat4x4<double,2>::operator[], COMDAT
; _this$ = ecx

; 241  : 	{

	push	ebp
	mov	ebp, esp

; 242  : 		assert(i < this->length());
; 243  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	add	eax, ecx

; 244  : 	}

	pop	ebp
	ret	4
??A?$tmat4x4@N$01@glm@@QAEAAU?$tvec4@N$01@1@H@Z ENDP	; glm::tmat4x4<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.hpp
;	COMDAT ?length@?$tmat4x4@N$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat4x4@N$01@glm@@SAHXZ PROC			; glm::tmat4x4<double,2>::length, COMDAT

; 84   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	push	4
	pop	eax
	ret	0
?length@?$tmat4x4@N$01@glm@@SAHXZ ENDP			; glm::tmat4x4<double,2>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$01@glm@@QAE@ABU?$tmat4x3@N$01@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
$T3 = -32						; size = 32
$T4 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tmat4x4@N$01@glm@@QAE@ABU?$tmat4x3@N$01@1@@Z PROC	; glm::tmat4x4<double,2>::tmat4x4<double,2>, COMDAT
; _this$ = ecx

; 230  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xorps	xmm1, xmm1
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	3
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat4x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm1
	movups	XMMWORD PTR [eax], xmm1
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat4x4

; 231  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T4[ebp]
	push	8
	pop	edx
	movsd	QWORD PTR $T4[ebp+24], xmm1
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]
	mov	ecx, edx
	movups	XMMWORD PTR $T4[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR $T4[ebp+16], xmm0
	rep movsd

; 232  : 		this->value[1] = col_type(m[1], 0);

	movups	xmm0, XMMWORD PTR [eax+24]
	lea	edi, DWORD PTR [ebx+32]
	mov	ecx, edx
	movsd	QWORD PTR $T3[ebp+24], xmm1
	lea	esi, DWORD PTR $T3[ebp]
	movups	XMMWORD PTR $T3[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+40]
	movsd	QWORD PTR $T3[ebp+16], xmm0
	rep movsd

; 233  : 		this->value[2] = col_type(m[2], 0);

	movups	xmm0, XMMWORD PTR [eax+48]
	lea	edi, DWORD PTR [ebx+64]
	mov	ecx, edx
	movsd	QWORD PTR $T2[ebp+24], xmm1
	lea	esi, DWORD PTR $T2[ebp]
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+64]
	movsd	QWORD PTR $T2[ebp+16], xmm0
	rep movsd

; 234  : 		this->value[3] = col_type(m[3], 1);

	movups	xmm0, XMMWORD PTR [eax+72]
	lea	edi, DWORD PTR [ebx+96]
	mov	ecx, edx
	lea	esi, DWORD PTR $T1[ebp]
	movups	XMMWORD PTR $T1[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+88]

; 235  : 	}

	mov	eax, ebx
	movsd	QWORD PTR $T1[ebp+16], xmm0
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR $T1[ebp+24], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x4@N$01@glm@@QAE@ABU?$tmat4x3@N$01@1@@Z ENDP	; glm::tmat4x4<double,2>::tmat4x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$01@glm@@QAE@ABU?$tmat3x4@N$01@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tmat4x4@N$01@glm@@QAE@ABU?$tmat3x4@N$01@1@@Z PROC	; glm::tmat4x4<double,2>::tmat4x4<double,2>, COMDAT
; _this$ = ecx

; 221  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xorps	xmm0, xmm0
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	3
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat4x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm0
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat4x4

; 222  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	mov	edi, ebx
	push	8
	pop	edx
	mov	esi, eax
	mov	ecx, edx
	rep movsd

; 223  : 		this->value[1] = m[1];

	lea	esi, DWORD PTR [eax+32]
	mov	ecx, edx
	lea	edi, DWORD PTR [ebx+32]
	xorps	xmm0, xmm0
	rep movsd

; 224  : 		this->value[2] = m[2];

	lea	esi, DWORD PTR [eax+64]
	mov	ecx, edx
	lea	edi, DWORD PTR [ebx+64]

; 225  : 		this->value[3] = col_type(0, 0, 0, 1);
; 226  : 	}

	mov	eax, ebx
	rep movsd
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ebx+96]
	mov	ecx, edx
	movaps	xmm0, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	lea	esi, DWORD PTR $T1[ebp]
	movupd	XMMWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x4@N$01@glm@@QAE@ABU?$tmat3x4@N$01@1@@Z ENDP	; glm::tmat4x4<double,2>::tmat4x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$01@glm@@QAE@ABU?$tmat4x2@N$01@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
$T3 = -32						; size = 32
$T4 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tmat4x4@N$01@glm@@QAE@ABU?$tmat4x2@N$01@1@@Z PROC	; glm::tmat4x4<double,2>::tmat4x4<double,2>, COMDAT
; _this$ = ecx

; 212  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xorps	xmm0, xmm0
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	3
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat4x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm0
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat4x4

; 213  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T4[ebp]
	push	8
	pop	edx
	mov	edi, ebx
	mov	ecx, edx
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR $T4[ebp], xmm0
	xorps	xmm0, xmm0
	movupd	XMMWORD PTR $T4[ebp+16], xmm0
	rep movsd

; 214  : 		this->value[1] = col_type(m[1], 0, 0);

	movups	xmm0, XMMWORD PTR [eax+16]
	lea	edi, DWORD PTR [ebx+32]
	mov	ecx, edx
	lea	esi, DWORD PTR $T3[ebp]

; 215  : 		this->value[2] = col_type(0, 0, 1, 0);
; 216  : 		this->value[3] = col_type(0, 0, 0, 1);
; 217  : 	}

	mov	eax, ebx
	movups	XMMWORD PTR $T3[ebp], xmm0
	xorps	xmm0, xmm0
	movupd	XMMWORD PTR $T3[ebp+16], xmm0
	rep movsd
	movupd	XMMWORD PTR $T2[ebp], xmm0
	lea	edi, DWORD PTR [ebx+64]
	mov	ecx, edx
	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	lea	esi, DWORD PTR $T2[ebp]
	movupd	XMMWORD PTR $T2[ebp+16], xmm0
	rep movsd
	xorps	xmm0, xmm0
	lea	edi, DWORD PTR [ebx+96]
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	mov	ecx, edx
	movaps	xmm0, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	movupd	XMMWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x4@N$01@glm@@QAE@ABU?$tmat4x2@N$01@1@@Z ENDP	; glm::tmat4x4<double,2>::tmat4x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$01@glm@@QAE@ABU?$tmat2x4@N$01@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tmat4x4@N$01@glm@@QAE@ABU?$tmat2x4@N$01@1@@Z PROC	; glm::tmat4x4<double,2>::tmat4x4<double,2>, COMDAT
; _this$ = ecx

; 203  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xorps	xmm0, xmm0
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	3
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat4x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm0
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat4x4

; 204  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	mov	edi, ebx
	push	8
	pop	edx
	mov	esi, eax
	mov	ecx, edx
	rep movsd
	xorps	xmm0, xmm0

; 205  : 		this->value[1] = m[1];

	lea	esi, DWORD PTR [eax+32]
	movupd	XMMWORD PTR $T2[ebp], xmm0
	lea	edi, DWORD PTR [ebx+32]
	mov	ecx, edx
	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000

; 206  : 		this->value[2] = col_type(0, 0, 1, 0);
; 207  : 		this->value[3] = col_type(0, 0, 0, 1);
; 208  : 	}

	mov	eax, ebx
	rep movsd
	movupd	XMMWORD PTR $T2[ebp+16], xmm0
	lea	edi, DWORD PTR [ebx+64]
	mov	ecx, edx
	lea	esi, DWORD PTR $T2[ebp]
	xorps	xmm0, xmm0
	rep movsd
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ebx+96]
	mov	ecx, edx
	movaps	xmm0, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	lea	esi, DWORD PTR $T1[ebp]
	movupd	XMMWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x4@N$01@glm@@QAE@ABU?$tmat2x4@N$01@1@@Z ENDP	; glm::tmat4x4<double,2>::tmat4x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$01@glm@@QAE@ABU?$tmat3x2@N$01@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
$T3 = -32						; size = 32
$T4 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tmat4x4@N$01@glm@@QAE@ABU?$tmat3x2@N$01@1@@Z PROC	; glm::tmat4x4<double,2>::tmat4x4<double,2>, COMDAT
; _this$ = ecx

; 194  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xorps	xmm0, xmm0
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	3
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat4x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm0
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat4x4

; 195  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T4[ebp]
	push	8
	pop	edx
	mov	edi, ebx
	mov	ecx, edx
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR $T4[ebp], xmm0
	xorps	xmm0, xmm0
	movupd	XMMWORD PTR $T4[ebp+16], xmm0
	rep movsd

; 196  : 		this->value[1] = col_type(m[1], 0, 0);

	movups	xmm0, XMMWORD PTR [eax+16]
	lea	edi, DWORD PTR [ebx+32]
	mov	ecx, edx
	lea	esi, DWORD PTR $T3[ebp]
	movups	XMMWORD PTR $T3[ebp], xmm0
	xorps	xmm0, xmm0
	movupd	XMMWORD PTR $T3[ebp+16], xmm0
	rep movsd

; 197  : 		this->value[2] = col_type(m[2], 1, 0);

	movups	xmm0, XMMWORD PTR [eax+32]
	lea	edi, DWORD PTR [ebx+64]
	mov	ecx, edx
	lea	esi, DWORD PTR $T2[ebp]

; 198  : 		this->value[3] = col_type(0, 0, 0, 1);
; 199  : 	}

	mov	eax, ebx
	movups	XMMWORD PTR $T2[ebp], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	movupd	XMMWORD PTR $T2[ebp+16], xmm0
	rep movsd
	xorps	xmm0, xmm0
	lea	edi, DWORD PTR [ebx+96]
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	mov	ecx, edx
	movaps	xmm0, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	movupd	XMMWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x4@N$01@glm@@QAE@ABU?$tmat3x2@N$01@1@@Z ENDP	; glm::tmat4x4<double,2>::tmat4x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$01@glm@@QAE@ABU?$tmat2x3@N$01@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
$T3 = -32						; size = 32
$T4 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tmat4x4@N$01@glm@@QAE@ABU?$tmat2x3@N$01@1@@Z PROC	; glm::tmat4x4<double,2>::tmat4x4<double,2>, COMDAT
; _this$ = ecx

; 185  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xorps	xmm1, xmm1
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	3
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat4x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm1
	movups	XMMWORD PTR [eax], xmm1
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat4x4

; 186  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T4[ebp]
	push	8
	pop	edx
	movsd	QWORD PTR $T4[ebp+24], xmm1
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]
	mov	ecx, edx
	movups	XMMWORD PTR $T4[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR $T4[ebp+16], xmm0
	rep movsd

; 187  : 		this->value[1] = col_type(m[1], 0);

	movups	xmm0, XMMWORD PTR [eax+24]
	lea	edi, DWORD PTR [ebx+32]
	mov	ecx, edx
	movsd	QWORD PTR $T3[ebp+24], xmm1
	lea	esi, DWORD PTR $T3[ebp]
	movups	XMMWORD PTR $T3[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+40]

; 188  : 		this->value[2] = col_type(0, 0, 1, 0);
; 189  : 		this->value[3] = col_type(0, 0, 0, 1);
; 190  : 	}

	mov	eax, ebx
	movsd	QWORD PTR $T3[ebp+16], xmm0
	xorps	xmm0, xmm0
	rep movsd
	movupd	XMMWORD PTR $T2[ebp], xmm0
	lea	edi, DWORD PTR [ebx+64]
	mov	ecx, edx
	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	lea	esi, DWORD PTR $T2[ebp]
	movupd	XMMWORD PTR $T2[ebp+16], xmm0
	rep movsd
	xorps	xmm0, xmm0
	lea	edi, DWORD PTR [ebx+96]
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	mov	ecx, edx
	movaps	xmm0, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	movupd	XMMWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x4@N$01@glm@@QAE@ABU?$tmat2x3@N$01@1@@Z ENDP	; glm::tmat4x4<double,2>::tmat4x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$01@glm@@QAE@ABU?$tmat3x3@N$01@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
$T3 = -32						; size = 32
$T4 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tmat4x4@N$01@glm@@QAE@ABU?$tmat3x3@N$01@1@@Z PROC	; glm::tmat4x4<double,2>::tmat4x4<double,2>, COMDAT
; _this$ = ecx

; 176  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xorps	xmm1, xmm1
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	3
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat4x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm1
	movups	XMMWORD PTR [eax], xmm1
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat4x4

; 177  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T4[ebp]
	push	8
	pop	edx
	movsd	QWORD PTR $T4[ebp+24], xmm1
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]
	mov	ecx, edx
	movups	XMMWORD PTR $T4[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR $T4[ebp+16], xmm0
	rep movsd

; 178  : 		this->value[1] = col_type(m[1], 0);

	movups	xmm0, XMMWORD PTR [eax+24]
	lea	edi, DWORD PTR [ebx+32]
	mov	ecx, edx
	movsd	QWORD PTR $T3[ebp+24], xmm1
	lea	esi, DWORD PTR $T3[ebp]
	movups	XMMWORD PTR $T3[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+40]
	movsd	QWORD PTR $T3[ebp+16], xmm0
	rep movsd

; 179  : 		this->value[2] = col_type(m[2], 0);

	movups	xmm0, XMMWORD PTR [eax+48]
	lea	edi, DWORD PTR [ebx+64]
	mov	ecx, edx
	movsd	QWORD PTR $T2[ebp+24], xmm1
	lea	esi, DWORD PTR $T2[ebp]
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+64]

; 180  : 		this->value[3] = col_type(0, 0, 0, 1);
; 181  : 	}

	mov	eax, ebx
	movsd	QWORD PTR $T2[ebp+16], xmm0
	xorps	xmm0, xmm0
	rep movsd
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ebx+96]
	mov	ecx, edx
	movaps	xmm0, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	lea	esi, DWORD PTR $T1[ebp]
	movupd	XMMWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x4@N$01@glm@@QAE@ABU?$tmat3x3@N$01@1@@Z ENDP	; glm::tmat4x4<double,2>::tmat4x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$01@glm@@QAE@ABU?$tmat2x2@N$01@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
$T3 = -32						; size = 32
$T4 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tmat4x4@N$01@glm@@QAE@ABU?$tmat2x2@N$01@1@@Z PROC	; glm::tmat4x4<double,2>::tmat4x4<double,2>, COMDAT
; _this$ = ecx

; 167  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xorps	xmm0, xmm0
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	3
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat4x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm0
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat4x4

; 168  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T4[ebp]
	push	8
	pop	edx
	mov	edi, ebx
	mov	ecx, edx
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR $T4[ebp], xmm0
	xorps	xmm0, xmm0
	movupd	XMMWORD PTR $T4[ebp+16], xmm0
	rep movsd

; 169  : 		this->value[1] = col_type(m[1], 0, 0);

	movups	xmm0, XMMWORD PTR [eax+16]
	lea	edi, DWORD PTR [ebx+32]
	mov	ecx, edx
	lea	esi, DWORD PTR $T3[ebp]

; 170  : 		this->value[2] = col_type(0, 0, 1, 0);
; 171  : 		this->value[3] = col_type(0, 0, 0, 1);
; 172  : 	}

	mov	eax, ebx
	movups	XMMWORD PTR $T3[ebp], xmm0
	xorps	xmm0, xmm0
	movupd	XMMWORD PTR $T3[ebp+16], xmm0
	rep movsd
	movupd	XMMWORD PTR $T2[ebp], xmm0
	lea	edi, DWORD PTR [ebx+64]
	mov	ecx, edx
	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	lea	esi, DWORD PTR $T2[ebp]
	movupd	XMMWORD PTR $T2[ebp+16], xmm0
	rep movsd
	xorps	xmm0, xmm0
	lea	edi, DWORD PTR [ebx+96]
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	mov	ecx, edx
	movaps	xmm0, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	movupd	XMMWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x4@N$01@glm@@QAE@ABU?$tmat2x2@N$01@1@@Z ENDP	; glm::tmat4x4<double,2>::tmat4x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$01@glm@@QAE@ABU?$tvec4@N$01@1@000@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
_v3$ = 20						; size = 4
??0?$tmat4x4@N$01@glm@@QAE@ABU?$tvec4@N$01@1@000@Z PROC	; glm::tmat4x4<double,2>::tmat4x4<double,2>, COMDAT
; _this$ = ecx

; 80   : 	{

	push	ebp
	mov	ebp, esp
	mov	edx, ecx
	xorps	xmm0, xmm0
	push	3
	pop	ecx
	lea	eax, DWORD PTR [edx+16]
$LL4@tmat4x4:
	dec	ecx
	movups	XMMWORD PTR [eax-16], xmm0
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat4x4

; 81   : 		this->value[0] = v0;

	push	esi
	mov	esi, DWORD PTR _v0$[ebp]
	push	edi
	push	8
	pop	eax
	mov	ecx, eax
	mov	edi, edx
	rep movsd

; 82   : 		this->value[1] = v1;

	mov	esi, DWORD PTR _v1$[ebp]
	lea	edi, DWORD PTR [edx+32]
	mov	ecx, eax
	rep movsd

; 83   : 		this->value[2] = v2;

	mov	esi, DWORD PTR _v2$[ebp]
	lea	edi, DWORD PTR [edx+64]
	mov	ecx, eax
	rep movsd

; 84   : 		this->value[3] = v3;

	mov	esi, DWORD PTR _v3$[ebp]
	lea	edi, DWORD PTR [edx+96]
	mov	ecx, eax

; 85   : 	}

	mov	eax, edx
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	16					; 00000010H
??0?$tmat4x4@N$01@glm@@QAE@ABU?$tvec4@N$01@1@000@Z ENDP	; glm::tmat4x4<double,2>::tmat4x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$01@glm@@QAE@ABN000000000000000@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
$T3 = -32						; size = 32
$T4 = -32						; size = 32
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_z0$ = 16						; size = 4
_w0$ = 20						; size = 4
_x1$ = 24						; size = 4
_y1$ = 28						; size = 4
_z1$ = 32						; size = 4
_w1$ = 36						; size = 4
_x2$ = 40						; size = 4
_y2$ = 44						; size = 4
_z2$ = 48						; size = 4
_w2$ = 52						; size = 4
_x3$ = 56						; size = 4
_y3$ = 60						; size = 4
_z3$ = 64						; size = 4
_w3$ = 68						; size = 4
??0?$tmat4x4@N$01@glm@@QAE@ABN000000000000000@Z PROC	; glm::tmat4x4<double,2>::tmat4x4<double,2>, COMDAT
; _this$ = ecx

; 65   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xorps	xmm0, xmm0
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	3
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat4x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm0
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat4x4

; 66   : 		this->value[0] = col_type(x0, y0, z0, w0);

	mov	eax, DWORD PTR _x0$[ebp]
	lea	esi, DWORD PTR $T4[ebp]
	push	8
	pop	edx
	mov	edi, ebx
	mov	ecx, edx
	movsd	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR _y0$[ebp]
	movsd	QWORD PTR $T4[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR _z0$[ebp]
	movsd	QWORD PTR $T4[ebp+8], xmm0
	movsd	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR _w0$[ebp]
	movsd	QWORD PTR $T4[ebp+16], xmm0
	movsd	xmm0, QWORD PTR [eax]

; 67   : 		this->value[1] = col_type(x1, y1, z1, w1);

	mov	eax, DWORD PTR _x1$[ebp]
	movsd	QWORD PTR $T4[ebp+24], xmm0
	rep movsd
	movsd	xmm0, QWORD PTR [eax]
	lea	edi, DWORD PTR [ebx+32]
	mov	eax, DWORD PTR _y1$[ebp]
	mov	ecx, edx
	movsd	QWORD PTR $T3[ebp], xmm0
	lea	esi, DWORD PTR $T3[ebp]
	movsd	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR _z1$[ebp]
	movsd	QWORD PTR $T3[ebp+8], xmm0
	movsd	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR _w1$[ebp]
	movsd	QWORD PTR $T3[ebp+16], xmm0
	movsd	xmm0, QWORD PTR [eax]

; 68   : 		this->value[2] = col_type(x2, y2, z2, w2);

	mov	eax, DWORD PTR _x2$[ebp]
	movsd	QWORD PTR $T3[ebp+24], xmm0
	rep movsd
	movsd	xmm0, QWORD PTR [eax]
	lea	edi, DWORD PTR [ebx+64]
	mov	eax, DWORD PTR _y2$[ebp]
	mov	ecx, edx
	movsd	QWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	movsd	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR _z2$[ebp]
	movsd	QWORD PTR $T2[ebp+8], xmm0
	movsd	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR _w2$[ebp]
	movsd	QWORD PTR $T2[ebp+16], xmm0
	movsd	xmm0, QWORD PTR [eax]

; 69   : 		this->value[3] = col_type(x3, y3, z3, w3);

	mov	eax, DWORD PTR _x3$[ebp]
	movsd	QWORD PTR $T2[ebp+24], xmm0
	rep movsd
	movsd	xmm0, QWORD PTR [eax]
	lea	edi, DWORD PTR [ebx+96]
	mov	eax, DWORD PTR _y3$[ebp]
	mov	ecx, edx
	movsd	QWORD PTR $T1[ebp], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	movsd	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR _z3$[ebp]
	movsd	QWORD PTR $T1[ebp+8], xmm0
	movsd	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR _w3$[ebp]
	movsd	QWORD PTR $T1[ebp+16], xmm0
	movsd	xmm0, QWORD PTR [eax]

; 70   : 	}

	mov	eax, ebx
	movsd	QWORD PTR $T1[ebp+24], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	64					; 00000040H
??0?$tmat4x4@N$01@glm@@QAE@ABN000000000000000@Z ENDP	; glm::tmat4x4<double,2>::tmat4x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$01@glm@@QAE@ABN@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
$T3 = -32						; size = 32
$T4 = -32						; size = 32
_s$ = 8							; size = 4
??0?$tmat4x4@N$01@glm@@QAE@ABN@Z PROC			; glm::tmat4x4<double,2>::tmat4x4<double,2>, COMDAT
; _this$ = ecx

; 50   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xorps	xmm1, xmm1
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	3
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat4x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm1
	movups	XMMWORD PTR [eax], xmm1
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat4x4

; 51   : 		this->value[0] = col_type(s, 0, 0, 0);

	mov	eax, DWORD PTR _s$[ebp]
	lea	esi, DWORD PTR $T4[ebp]
	push	8
	pop	edx
	movsd	QWORD PTR $T4[ebp+24], xmm1
	mov	edi, ebx
	movsd	xmm0, QWORD PTR [eax]
	mov	ecx, edx
	movsd	QWORD PTR $T4[ebp], xmm0
	xorps	xmm0, xmm0
	movupd	XMMWORD PTR $T4[ebp+8], xmm0
	rep movsd

; 52   : 		this->value[1] = col_type(0, s, 0, 0);

	movsd	xmm0, QWORD PTR [eax]
	lea	edi, DWORD PTR [ebx+32]
	movsd	QWORD PTR $T3[ebp+8], xmm0
	lea	esi, DWORD PTR $T3[ebp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR $T3[ebp], xmm1
	movupd	XMMWORD PTR $T3[ebp+16], xmm0
	mov	ecx, edx
	rep movsd
	movupd	XMMWORD PTR $T2[ebp], xmm0

; 53   : 		this->value[2] = col_type(0, 0, s, 0);

	lea	edi, DWORD PTR [ebx+64]
	mov	ecx, edx
	movsd	xmm0, QWORD PTR [eax]
	lea	esi, DWORD PTR $T2[ebp]
	movsd	QWORD PTR $T2[ebp+16], xmm0
	xorps	xmm0, xmm0
	movsd	QWORD PTR $T2[ebp+24], xmm1
	rep movsd
	movupd	XMMWORD PTR $T1[ebp], xmm0

; 54   : 		this->value[3] = col_type(0, 0, 0, s);

	lea	edi, DWORD PTR [ebx+96]
	mov	ecx, edx
	movsd	xmm0, QWORD PTR [eax]
	lea	esi, DWORD PTR $T1[ebp]
	movsd	QWORD PTR $T1[ebp+16], xmm1

; 55   : 	}

	mov	eax, ebx
	movsd	QWORD PTR $T1[ebp+24], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x4@N$01@glm@@QAE@ABN@Z ENDP			; glm::tmat4x4<double,2>::tmat4x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat4x4@N$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat4x4<double,2>::tmat4x4<double,2>, COMDAT
; _this$ = ecx

; 46   : 	{}

	push	3
	pop	edx
	lea	eax, DWORD PTR [ecx+16]
	xorps	xmm0, xmm0
$LL4@tmat4x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm0
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat4x4
	mov	eax, ecx
	ret	4
??0?$tmat4x4@N$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat4x4<double,2>::tmat4x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tmat4x4@N$01@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tmat4x4@N$01@glm@@QAE@ABU01@@Z PROC		; glm::tmat4x4<double,2>::tmat4x4<double,2>, COMDAT
; _this$ = ecx

; 228  : template struct tmat4x4<float64, lowp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	32					; 00000020H
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tmat4x4@N$01@glm@@QAE@ABU01@@Z ENDP		; glm::tmat4x4<double,2>::tmat4x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$01@glm@@QAE@XZ
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
$T3 = -32						; size = 32
$T4 = -32						; size = 32
??0?$tmat4x4@N$01@glm@@QAE@XZ PROC			; glm::tmat4x4<double,2>::tmat4x4<double,2>, COMDAT
; _this$ = ecx

; 13   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xorps	xmm0, xmm0
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	3
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat4x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm0
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat4x4

; 14   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 15   : 				this->value[0] = col_type(1, 0, 0, 0);

	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	lea	esi, DWORD PTR $T4[ebp]
	movupd	XMMWORD PTR $T4[ebp], xmm0
	mov	edi, ebx
	xorps	xmm0, xmm0
	movupd	XMMWORD PTR $T4[ebp+16], xmm0
	push	8
	movaps	xmm0, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	pop	eax
	mov	ecx, eax
	rep movsd
	movupd	XMMWORD PTR $T3[ebp], xmm0

; 16   : 				this->value[1] = col_type(0, 1, 0, 0);

	lea	edi, DWORD PTR [ebx+32]
	mov	ecx, eax
	xorps	xmm0, xmm0
	lea	esi, DWORD PTR $T3[ebp]
	movupd	XMMWORD PTR $T3[ebp+16], xmm0
	rep movsd
	movupd	XMMWORD PTR $T2[ebp], xmm0

; 17   : 				this->value[2] = col_type(0, 0, 1, 0);

	lea	edi, DWORD PTR [ebx+64]
	mov	ecx, eax
	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	lea	esi, DWORD PTR $T2[ebp]
	movupd	XMMWORD PTR $T2[ebp+16], xmm0
	rep movsd
	xorps	xmm0, xmm0

; 18   : 				this->value[3] = col_type(0, 0, 0, 1);

	lea	edi, DWORD PTR [ebx+96]
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	mov	ecx, eax
	movaps	xmm0, XMMWORD PTR __xmm@3ff00000000000000000000000000000

; 19   : #			endif
; 20   : 		}

	mov	eax, ebx
	movupd	XMMWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$tmat4x4@N$01@glm@@QAE@XZ ENDP			; glm::tmat4x4<double,2>::tmat4x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??F?$tmat4x4@M$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat4x4@M$01@glm@@QAE?AU01@H@Z PROC		; glm::tmat4x4<float,2>::operator--, COMDAT
; _this$ = ecx

; 394  : 	{

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi

; 395  : 		tmat4x4<T, P> Result(*this);

	mov	edi, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, ecx
	push	16					; 00000010H
	pop	ecx
	mov	esi, eax
	rep movsd

; 396  : 		--*this;

	mov	ecx, eax
	call	??F?$tmat4x4@M$01@glm@@QAEAAU01@XZ	; glm::tmat4x4<float,2>::operator--

; 397  : 		return Result;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi

; 398  : 	}

	pop	ebp
	ret	8
??F?$tmat4x4@M$01@glm@@QAE?AU01@H@Z ENDP		; glm::tmat4x4<float,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??E?$tmat4x4@M$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat4x4@M$01@glm@@QAE?AU01@H@Z PROC		; glm::tmat4x4<float,2>::operator++, COMDAT
; _this$ = ecx

; 386  : 	{

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi

; 387  : 		tmat4x4<T, P> Result(*this);

	mov	edi, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, ecx
	push	16					; 00000010H
	pop	ecx
	mov	esi, eax
	rep movsd

; 388  : 		++*this;

	mov	ecx, eax
	call	??E?$tmat4x4@M$01@glm@@QAEAAU01@XZ	; glm::tmat4x4<float,2>::operator++

; 389  : 		return Result;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi

; 390  : 	}

	pop	ebp
	ret	8
??E?$tmat4x4@M$01@glm@@QAE?AU01@H@Z ENDP		; glm::tmat4x4<float,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??F?$tmat4x4@M$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat4x4@M$01@glm@@QAEAAU01@XZ PROC			; glm::tmat4x4<float,2>::operator--, COMDAT
; _this$ = ecx

; 377  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 378  : 		--this->value[1];
; 379  : 		--this->value[2];
; 380  : 		--this->value[3];
; 381  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0

; 382  : 	}

	ret	0
??F?$tmat4x4@M$01@glm@@QAEAAU01@XZ ENDP			; glm::tmat4x4<float,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??E?$tmat4x4@M$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat4x4@M$01@glm@@QAEAAU01@XZ PROC			; glm::tmat4x4<float,2>::operator++, COMDAT
; _this$ = ecx

; 367  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 368  : 		++this->value[1];
; 369  : 		++this->value[2];
; 370  : 		++this->value[3];
; 371  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0

; 372  : 	}

	ret	0
??E?$tmat4x4@M$01@glm@@QAEAAU01@XZ ENDP			; glm::tmat4x4<float,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tmat4x4@M$01@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tmat4x4@M$01@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tmat4x4<float,2>::operator=, COMDAT
; _this$ = ecx

; 227  : template struct tmat4x4<float32, lowp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	16					; 00000010H
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tmat4x4@M$01@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tmat4x4<float,2>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??A?$tmat4x4@M$01@glm@@QBEABU?$tvec4@M$01@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat4x4@M$01@glm@@QBEABU?$tvec4@M$01@1@H@Z PROC	; glm::tmat4x4<float,2>::operator[], COMDAT
; _this$ = ecx

; 248  : 	{

	push	ebp
	mov	ebp, esp

; 249  : 		assert(i < this->length());
; 250  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, ecx

; 251  : 	}

	pop	ebp
	ret	4
??A?$tmat4x4@M$01@glm@@QBEABU?$tvec4@M$01@1@H@Z ENDP	; glm::tmat4x4<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??A?$tmat4x4@M$01@glm@@QAEAAU?$tvec4@M$01@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat4x4@M$01@glm@@QAEAAU?$tvec4@M$01@1@H@Z PROC	; glm::tmat4x4<float,2>::operator[], COMDAT
; _this$ = ecx

; 241  : 	{

	push	ebp
	mov	ebp, esp

; 242  : 		assert(i < this->length());
; 243  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, ecx

; 244  : 	}

	pop	ebp
	ret	4
??A?$tmat4x4@M$01@glm@@QAEAAU?$tvec4@M$01@1@H@Z ENDP	; glm::tmat4x4<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.hpp
;	COMDAT ?length@?$tmat4x4@M$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat4x4@M$01@glm@@SAHXZ PROC			; glm::tmat4x4<float,2>::length, COMDAT

; 84   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	push	4
	pop	eax
	ret	0
?length@?$tmat4x4@M$01@glm@@SAHXZ ENDP			; glm::tmat4x4<float,2>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$01@glm@@QAE@ABU?$tmat4x3@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
$T4 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat4x4@M$01@glm@@QAE@ABU?$tmat4x3@M$01@1@@Z PROC	; glm::tmat4x4<float,2>::tmat4x4<float,2>, COMDAT
; _this$ = ecx

; 230  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	lea	eax, DWORD PTR [ecx+8]
	push	3
	pop	edx
$LL4@tmat4x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat4x4

; 231  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	and	DWORD PTR $T4[ebp+12], 0
	push	esi
	push	edi
	movss	xmm0, DWORD PTR [eax]
	lea	esi, DWORD PTR $T4[ebp]
	movss	DWORD PTR $T4[ebp], xmm0
	mov	edi, ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T4[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T4[ebp+8], xmm0
	movsd
	movsd
	movsd
	movsd

; 232  : 		this->value[1] = col_type(m[1], 0);

	movss	xmm0, DWORD PTR [eax+12]
	lea	edi, DWORD PTR [ecx+16]
	and	DWORD PTR $T3[ebp+12], 0
	lea	esi, DWORD PTR $T3[ebp]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR $T3[ebp+8], xmm0
	movsd
	movsd
	movsd
	movsd

; 233  : 		this->value[2] = col_type(m[2], 0);

	movss	xmm0, DWORD PTR [eax+24]
	lea	edi, DWORD PTR [ecx+32]
	and	DWORD PTR $T2[ebp+12], 0
	lea	esi, DWORD PTR $T2[ebp]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+28]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+32]
	movss	DWORD PTR $T2[ebp+8], xmm0
	movsd
	movsd
	movsd
	movsd

; 234  : 		this->value[3] = col_type(m[3], 1);

	movss	xmm0, DWORD PTR [eax+36]
	lea	edi, DWORD PTR [ecx+48]
	movss	DWORD PTR $T1[ebp], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	movss	xmm0, DWORD PTR [eax+40]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+44]

; 235  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+8], xmm0
	mov	DWORD PTR $T1[ebp+12], 1065353216	; 3f800000H
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x4@M$01@glm@@QAE@ABU?$tmat4x3@M$01@1@@Z ENDP	; glm::tmat4x4<float,2>::tmat4x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$01@glm@@QAE@ABU?$tmat3x4@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat4x4@M$01@glm@@QAE@ABU?$tmat3x4@M$01@1@@Z PROC	; glm::tmat4x4<float,2>::tmat4x4<float,2>, COMDAT
; _this$ = ecx

; 221  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	lea	eax, DWORD PTR [ecx+8]
	push	3
	pop	edx
$LL4@tmat4x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat4x4

; 222  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	esi, eax
	movaps	xmm0, XMMWORD PTR __xmm@3f800000000000000000000000000000
	mov	edi, ecx
	movups	XMMWORD PTR $T1[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 223  : 		this->value[1] = m[1];

	lea	esi, DWORD PTR [eax+16]
	lea	edi, DWORD PTR [ecx+16]
	movsd
	movsd
	movsd
	movsd

; 224  : 		this->value[2] = m[2];

	lea	esi, DWORD PTR [eax+32]

; 225  : 		this->value[3] = col_type(0, 0, 0, 1);
; 226  : 	}

	mov	eax, ecx
	lea	edi, DWORD PTR [ecx+32]
	movsd
	movsd
	movsd
	movsd
	lea	edi, DWORD PTR [ecx+48]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x4@M$01@glm@@QAE@ABU?$tmat3x4@M$01@1@@Z ENDP	; glm::tmat4x4<float,2>::tmat4x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$01@glm@@QAE@ABU?$tmat4x2@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
$T4 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat4x4@M$01@glm@@QAE@ABU?$tmat4x2@M$01@1@@Z PROC	; glm::tmat4x4<float,2>::tmat4x4<float,2>, COMDAT
; _this$ = ecx

; 212  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	lea	eax, DWORD PTR [ecx+8]
	push	3
	pop	edx
$LL4@tmat4x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat4x4

; 213  : 		this->value[0] = col_type(m[0], 0, 0);

	and	DWORD PTR $T4[ebp+8], 0
	and	DWORD PTR $T4[ebp+12], 0
	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T4[ebp]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T4[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T4[ebp+4], xmm0
	movsd
	movsd
	movsd
	movsd

; 214  : 		this->value[1] = col_type(m[1], 0, 0);

	movss	xmm0, DWORD PTR [eax+8]
	lea	edi, DWORD PTR [ecx+16]
	and	DWORD PTR $T3[ebp+8], 0
	lea	esi, DWORD PTR $T3[ebp]
	and	DWORD PTR $T3[ebp+12], 0
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+12]

; 215  : 		this->value[2] = col_type(0, 0, 1, 0);
; 216  : 		this->value[3] = col_type(0, 0, 0, 1);
; 217  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T3[ebp+4], xmm0
	movsd
	movaps	xmm0, XMMWORD PTR __xmm@000000003f8000000000000000000000
	movsd
	movsd
	movsd
	movups	XMMWORD PTR $T2[ebp], xmm0
	lea	edi, DWORD PTR [ecx+32]
	movaps	xmm0, XMMWORD PTR __xmm@3f800000000000000000000000000000
	lea	esi, DWORD PTR $T2[ebp]
	movsd
	movsd
	movsd
	movsd
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+48]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x4@M$01@glm@@QAE@ABU?$tmat4x2@M$01@1@@Z ENDP	; glm::tmat4x4<float,2>::tmat4x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$01@glm@@QAE@ABU?$tmat2x4@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat4x4@M$01@glm@@QAE@ABU?$tmat2x4@M$01@1@@Z PROC	; glm::tmat4x4<float,2>::tmat4x4<float,2>, COMDAT
; _this$ = ecx

; 203  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	lea	eax, DWORD PTR [ecx+8]
	push	3
	pop	edx
$LL4@tmat4x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat4x4

; 204  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	esi, eax
	movaps	xmm0, XMMWORD PTR __xmm@000000003f8000000000000000000000
	mov	edi, ecx
	movups	XMMWORD PTR $T2[ebp], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@3f800000000000000000000000000000
	movsd
	movsd
	movsd
	movsd

; 205  : 		this->value[1] = m[1];

	lea	esi, DWORD PTR [eax+16]

; 206  : 		this->value[2] = col_type(0, 0, 1, 0);
; 207  : 		this->value[3] = col_type(0, 0, 0, 1);
; 208  : 	}

	mov	eax, ecx
	lea	edi, DWORD PTR [ecx+16]
	movsd
	movsd
	movsd
	movsd
	lea	edi, DWORD PTR [ecx+32]
	lea	esi, DWORD PTR $T2[ebp]
	movsd
	movsd
	movsd
	movsd
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+48]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x4@M$01@glm@@QAE@ABU?$tmat2x4@M$01@1@@Z ENDP	; glm::tmat4x4<float,2>::tmat4x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$01@glm@@QAE@ABU?$tmat3x2@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
$T4 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat4x4@M$01@glm@@QAE@ABU?$tmat3x2@M$01@1@@Z PROC	; glm::tmat4x4<float,2>::tmat4x4<float,2>, COMDAT
; _this$ = ecx

; 194  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	lea	eax, DWORD PTR [ecx+8]
	push	3
	pop	edx
$LL4@tmat4x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat4x4

; 195  : 		this->value[0] = col_type(m[0], 0, 0);

	and	DWORD PTR $T4[ebp+8], 0
	and	DWORD PTR $T4[ebp+12], 0
	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T4[ebp]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T4[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T4[ebp+4], xmm0
	movsd
	movsd
	movsd
	movsd

; 196  : 		this->value[1] = col_type(m[1], 0, 0);

	movss	xmm0, DWORD PTR [eax+8]
	lea	edi, DWORD PTR [ecx+16]
	and	DWORD PTR $T3[ebp+8], 0
	lea	esi, DWORD PTR $T3[ebp]
	and	DWORD PTR $T3[ebp+12], 0
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movsd
	movsd
	movsd
	movsd

; 197  : 		this->value[2] = col_type(m[2], 1, 0);

	movss	xmm0, DWORD PTR [eax+16]
	lea	edi, DWORD PTR [ecx+32]
	and	DWORD PTR $T2[ebp+12], 0
	lea	esi, DWORD PTR $T2[ebp]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+20]

; 198  : 		this->value[3] = col_type(0, 0, 0, 1);
; 199  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T2[ebp+4], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@3f800000000000000000000000000000
	mov	DWORD PTR $T2[ebp+8], 1065353216	; 3f800000H
	movsd
	movsd
	movsd
	movsd
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+48]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x4@M$01@glm@@QAE@ABU?$tmat3x2@M$01@1@@Z ENDP	; glm::tmat4x4<float,2>::tmat4x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$01@glm@@QAE@ABU?$tmat2x3@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
$T4 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat4x4@M$01@glm@@QAE@ABU?$tmat2x3@M$01@1@@Z PROC	; glm::tmat4x4<float,2>::tmat4x4<float,2>, COMDAT
; _this$ = ecx

; 185  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	lea	eax, DWORD PTR [ecx+8]
	push	3
	pop	edx
$LL4@tmat4x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat4x4

; 186  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	and	DWORD PTR $T4[ebp+12], 0
	push	esi
	push	edi
	movss	xmm0, DWORD PTR [eax]
	lea	esi, DWORD PTR $T4[ebp]
	movss	DWORD PTR $T4[ebp], xmm0
	mov	edi, ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T4[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T4[ebp+8], xmm0
	movsd
	movsd
	movsd
	movsd

; 187  : 		this->value[1] = col_type(m[1], 0);

	movss	xmm0, DWORD PTR [eax+12]
	lea	edi, DWORD PTR [ecx+16]
	and	DWORD PTR $T3[ebp+12], 0
	lea	esi, DWORD PTR $T3[ebp]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+20]

; 188  : 		this->value[2] = col_type(0, 0, 1, 0);
; 189  : 		this->value[3] = col_type(0, 0, 0, 1);
; 190  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T3[ebp+8], xmm0
	movsd
	movaps	xmm0, XMMWORD PTR __xmm@000000003f8000000000000000000000
	movsd
	movsd
	movsd
	movups	XMMWORD PTR $T2[ebp], xmm0
	lea	edi, DWORD PTR [ecx+32]
	movaps	xmm0, XMMWORD PTR __xmm@3f800000000000000000000000000000
	lea	esi, DWORD PTR $T2[ebp]
	movsd
	movsd
	movsd
	movsd
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+48]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x4@M$01@glm@@QAE@ABU?$tmat2x3@M$01@1@@Z ENDP	; glm::tmat4x4<float,2>::tmat4x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$01@glm@@QAE@ABU?$tmat3x3@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
$T4 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat4x4@M$01@glm@@QAE@ABU?$tmat3x3@M$01@1@@Z PROC	; glm::tmat4x4<float,2>::tmat4x4<float,2>, COMDAT
; _this$ = ecx

; 176  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	lea	eax, DWORD PTR [ecx+8]
	push	3
	pop	edx
$LL4@tmat4x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat4x4

; 177  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	and	DWORD PTR $T4[ebp+12], 0
	push	esi
	push	edi
	movss	xmm0, DWORD PTR [eax]
	lea	esi, DWORD PTR $T4[ebp]
	movss	DWORD PTR $T4[ebp], xmm0
	mov	edi, ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T4[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T4[ebp+8], xmm0
	movsd
	movsd
	movsd
	movsd

; 178  : 		this->value[1] = col_type(m[1], 0);

	movss	xmm0, DWORD PTR [eax+12]
	lea	edi, DWORD PTR [ecx+16]
	and	DWORD PTR $T3[ebp+12], 0
	lea	esi, DWORD PTR $T3[ebp]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR $T3[ebp+8], xmm0
	movsd
	movsd
	movsd
	movsd

; 179  : 		this->value[2] = col_type(m[2], 0);

	movss	xmm0, DWORD PTR [eax+24]
	lea	edi, DWORD PTR [ecx+32]
	and	DWORD PTR $T2[ebp+12], 0
	lea	esi, DWORD PTR $T2[ebp]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+28]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+32]

; 180  : 		this->value[3] = col_type(0, 0, 0, 1);
; 181  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T2[ebp+8], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@3f800000000000000000000000000000
	movsd
	movsd
	movsd
	movsd
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+48]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x4@M$01@glm@@QAE@ABU?$tmat3x3@M$01@1@@Z ENDP	; glm::tmat4x4<float,2>::tmat4x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$01@glm@@QAE@ABU?$tmat2x2@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
$T4 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat4x4@M$01@glm@@QAE@ABU?$tmat2x2@M$01@1@@Z PROC	; glm::tmat4x4<float,2>::tmat4x4<float,2>, COMDAT
; _this$ = ecx

; 167  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	lea	eax, DWORD PTR [ecx+8]
	push	3
	pop	edx
$LL4@tmat4x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat4x4

; 168  : 		this->value[0] = col_type(m[0], 0, 0);

	and	DWORD PTR $T4[ebp+8], 0
	and	DWORD PTR $T4[ebp+12], 0
	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T4[ebp]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T4[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T4[ebp+4], xmm0
	movsd
	movsd
	movsd
	movsd

; 169  : 		this->value[1] = col_type(m[1], 0, 0);

	movss	xmm0, DWORD PTR [eax+8]
	lea	edi, DWORD PTR [ecx+16]
	and	DWORD PTR $T3[ebp+8], 0
	lea	esi, DWORD PTR $T3[ebp]
	and	DWORD PTR $T3[ebp+12], 0
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+12]

; 170  : 		this->value[2] = col_type(0, 0, 1, 0);
; 171  : 		this->value[3] = col_type(0, 0, 0, 1);
; 172  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T3[ebp+4], xmm0
	movsd
	movaps	xmm0, XMMWORD PTR __xmm@000000003f8000000000000000000000
	movsd
	movsd
	movsd
	movups	XMMWORD PTR $T2[ebp], xmm0
	lea	edi, DWORD PTR [ecx+32]
	movaps	xmm0, XMMWORD PTR __xmm@3f800000000000000000000000000000
	lea	esi, DWORD PTR $T2[ebp]
	movsd
	movsd
	movsd
	movsd
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+48]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x4@M$01@glm@@QAE@ABU?$tmat2x2@M$01@1@@Z ENDP	; glm::tmat4x4<float,2>::tmat4x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$01@glm@@QAE@ABU?$tvec4@M$01@1@000@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
_v3$ = 20						; size = 4
??0?$tmat4x4@M$01@glm@@QAE@ABU?$tvec4@M$01@1@000@Z PROC	; glm::tmat4x4<float,2>::tmat4x4<float,2>, COMDAT
; _this$ = ecx

; 80   : 	{

	push	ebp
	mov	ebp, esp
	push	3
	pop	edx
	lea	eax, DWORD PTR [ecx+8]
$LL4@tmat4x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat4x4

; 81   : 		this->value[0] = v0;

	push	esi
	mov	esi, DWORD PTR _v0$[ebp]

; 82   : 		this->value[1] = v1;
; 83   : 		this->value[2] = v2;
; 84   : 		this->value[3] = v3;
; 85   : 	}

	mov	eax, ecx
	push	edi
	mov	edi, ecx
	movsd
	movsd
	movsd
	movsd
	mov	esi, DWORD PTR _v1$[ebp]
	lea	edi, DWORD PTR [ecx+16]
	movsd
	movsd
	movsd
	movsd
	mov	esi, DWORD PTR _v2$[ebp]
	lea	edi, DWORD PTR [ecx+32]
	movsd
	movsd
	movsd
	movsd
	mov	esi, DWORD PTR _v3$[ebp]
	lea	edi, DWORD PTR [ecx+48]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	16					; 00000010H
??0?$tmat4x4@M$01@glm@@QAE@ABU?$tvec4@M$01@1@000@Z ENDP	; glm::tmat4x4<float,2>::tmat4x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$01@glm@@QAE@ABM000000000000000@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
$T4 = -16						; size = 16
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_z0$ = 16						; size = 4
_w0$ = 20						; size = 4
_x1$ = 24						; size = 4
_y1$ = 28						; size = 4
_z1$ = 32						; size = 4
_w1$ = 36						; size = 4
_x2$ = 40						; size = 4
_y2$ = 44						; size = 4
_z2$ = 48						; size = 4
_w2$ = 52						; size = 4
_x3$ = 56						; size = 4
_y3$ = 60						; size = 4
_z3$ = 64						; size = 4
_w3$ = 68						; size = 4
??0?$tmat4x4@M$01@glm@@QAE@ABM000000000000000@Z PROC	; glm::tmat4x4<float,2>::tmat4x4<float,2>, COMDAT
; _this$ = ecx

; 65   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	lea	eax, DWORD PTR [ecx+8]
	push	3
	pop	edx
$LL4@tmat4x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat4x4

; 66   : 		this->value[0] = col_type(x0, y0, z0, w0);

	mov	eax, DWORD PTR _x0$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T4[ebp]
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _y0$[ebp]
	movss	DWORD PTR $T4[ebp], xmm0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _z0$[ebp]
	movss	DWORD PTR $T4[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _w0$[ebp]
	movss	DWORD PTR $T4[ebp+8], xmm0
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T4[ebp+12], xmm0
	movsd

; 67   : 		this->value[1] = col_type(x1, y1, z1, w1);

	mov	eax, DWORD PTR _x1$[ebp]
	movsd
	movsd
	movsd
	movss	xmm0, DWORD PTR [eax]
	lea	edi, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _y1$[ebp]
	lea	esi, DWORD PTR $T3[ebp]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _z1$[ebp]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _w1$[ebp]
	movss	DWORD PTR $T3[ebp+8], xmm0
	movss	xmm0, DWORD PTR [eax]

; 68   : 		this->value[2] = col_type(x2, y2, z2, w2);

	mov	eax, DWORD PTR _x2$[ebp]
	movss	DWORD PTR $T3[ebp+12], xmm0
	movsd
	movsd
	movsd
	movsd
	movss	xmm0, DWORD PTR [eax]
	lea	edi, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR _y2$[ebp]
	lea	esi, DWORD PTR $T2[ebp]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _z2$[ebp]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _w2$[ebp]
	movss	DWORD PTR $T2[ebp+8], xmm0
	movss	xmm0, DWORD PTR [eax]

; 69   : 		this->value[3] = col_type(x3, y3, z3, w3);

	mov	eax, DWORD PTR _x3$[ebp]
	movss	DWORD PTR $T2[ebp+12], xmm0
	movsd
	movsd
	movsd
	movsd
	movss	xmm0, DWORD PTR [eax]
	lea	edi, DWORD PTR [ecx+48]
	mov	eax, DWORD PTR _y3$[ebp]
	lea	esi, DWORD PTR $T1[ebp]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _z3$[ebp]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _w3$[ebp]
	movss	DWORD PTR $T1[ebp+8], xmm0
	movss	xmm0, DWORD PTR [eax]

; 70   : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+12], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	64					; 00000040H
??0?$tmat4x4@M$01@glm@@QAE@ABM000000000000000@Z ENDP	; glm::tmat4x4<float,2>::tmat4x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$01@glm@@QAE@ABM@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
$T4 = -16						; size = 16
_s$ = 8							; size = 4
??0?$tmat4x4@M$01@glm@@QAE@ABM@Z PROC			; glm::tmat4x4<float,2>::tmat4x4<float,2>, COMDAT
; _this$ = ecx

; 50   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	lea	eax, DWORD PTR [ecx+8]
	push	3
	pop	edx
$LL4@tmat4x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat4x4

; 51   : 		this->value[0] = col_type(s, 0, 0, 0);

	and	DWORD PTR $T4[ebp+4], 0
	and	DWORD PTR $T4[ebp+12], 0
	and	DWORD PTR $T4[ebp+8], 0
	mov	eax, DWORD PTR _s$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T4[ebp]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T4[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 52   : 		this->value[1] = col_type(0, s, 0, 0);

	movss	xmm0, DWORD PTR [eax]
	lea	edi, DWORD PTR [ecx+16]
	and	DWORD PTR $T3[ebp], 0
	lea	esi, DWORD PTR $T3[ebp]
	and	DWORD PTR $T3[ebp+12], 0
	and	DWORD PTR $T3[ebp+8], 0
	movss	DWORD PTR $T3[ebp+4], xmm0
	movsd
	movsd
	movsd
	movsd

; 53   : 		this->value[2] = col_type(0, 0, s, 0);

	movss	xmm0, DWORD PTR [eax]
	lea	edi, DWORD PTR [ecx+32]
	and	DWORD PTR $T2[ebp], 0
	lea	esi, DWORD PTR $T2[ebp]
	and	DWORD PTR $T2[ebp+4], 0
	and	DWORD PTR $T2[ebp+12], 0
	movss	DWORD PTR $T2[ebp+8], xmm0
	movsd
	movsd
	movsd
	movsd

; 54   : 		this->value[3] = col_type(0, 0, 0, s);

	movss	xmm0, DWORD PTR [eax]
	lea	edi, DWORD PTR [ecx+48]
	and	DWORD PTR $T1[ebp], 0
	lea	esi, DWORD PTR $T1[ebp]
	and	DWORD PTR $T1[ebp+4], 0

; 55   : 	}

	mov	eax, ecx
	and	DWORD PTR $T1[ebp+8], 0
	movss	DWORD PTR $T1[ebp+12], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x4@M$01@glm@@QAE@ABM@Z ENDP			; glm::tmat4x4<float,2>::tmat4x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat4x4@M$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat4x4<float,2>::tmat4x4<float,2>, COMDAT
; _this$ = ecx

; 46   : 	{}

	push	3
	pop	edx
	lea	eax, DWORD PTR [ecx+8]
$LL4@tmat4x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat4x4
	mov	eax, ecx
	ret	4
??0?$tmat4x4@M$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat4x4<float,2>::tmat4x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tmat4x4@M$01@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tmat4x4@M$01@glm@@QAE@ABU01@@Z PROC		; glm::tmat4x4<float,2>::tmat4x4<float,2>, COMDAT
; _this$ = ecx

; 227  : template struct tmat4x4<float32, lowp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	16					; 00000010H
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tmat4x4@M$01@glm@@QAE@ABU01@@Z ENDP		; glm::tmat4x4<float,2>::tmat4x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$01@glm@@QAE@XZ
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
$T4 = -16						; size = 16
??0?$tmat4x4@M$01@glm@@QAE@XZ PROC			; glm::tmat4x4<float,2>::tmat4x4<float,2>, COMDAT
; _this$ = ecx

; 13   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	lea	eax, DWORD PTR [ecx+8]
	push	3
	pop	edx
$LL4@tmat4x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat4x4

; 14   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 15   : 				this->value[0] = col_type(1, 0, 0, 0);
; 16   : 				this->value[1] = col_type(0, 1, 0, 0);
; 17   : 				this->value[2] = col_type(0, 0, 1, 0);
; 18   : 				this->value[3] = col_type(0, 0, 0, 1);
; 19   : #			endif
; 20   : 		}

	movaps	xmm0, XMMWORD PTR __xmm@0000000000000000000000003f800000
	mov	eax, ecx
	push	esi
	push	edi
	movups	XMMWORD PTR $T4[ebp], xmm0
	lea	esi, DWORD PTR $T4[ebp]
	mov	edi, ecx
	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003f80000000000000
	movsd
	movsd
	movsd
	movsd
	movups	XMMWORD PTR $T3[ebp], xmm0
	lea	edi, DWORD PTR [ecx+16]
	movaps	xmm0, XMMWORD PTR __xmm@000000003f8000000000000000000000
	lea	esi, DWORD PTR $T3[ebp]
	movsd
	movsd
	movsd
	movsd
	movups	XMMWORD PTR $T2[ebp], xmm0
	lea	edi, DWORD PTR [ecx+32]
	movaps	xmm0, XMMWORD PTR __xmm@3f800000000000000000000000000000
	lea	esi, DWORD PTR $T2[ebp]
	movsd
	movsd
	movsd
	movsd
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+48]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$tmat4x4@M$01@glm@@QAE@XZ ENDP			; glm::tmat4x4<float,2>::tmat4x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??F?$tmat4x3@N$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat4x3@N$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tmat4x3<double,0>::operator--, COMDAT
; _this$ = ecx

; 346  : 	{

	push	ebp
	mov	ebp, esp

; 347  : 		tmat4x3<T, P> Result(*this);
; 348  : 		--*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	mov	edx, ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	movups	xmm0, XMMWORD PTR [edx]
	push	24					; 00000018H
	pop	ecx
	subpd	xmm0, xmm1
	mov	esi, edx
	mov	edi, eax
	rep movsd
	movups	XMMWORD PTR [edx], xmm0
	pop	edi
	movups	xmm0, XMMWORD PTR [edx+16]
	pop	esi
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+16], xmm0
	movups	xmm0, XMMWORD PTR [edx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+32], xmm0
	movups	xmm0, XMMWORD PTR [edx+48]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+48], xmm0
	movups	xmm0, XMMWORD PTR [edx+64]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+64], xmm0
	movups	xmm0, XMMWORD PTR [edx+80]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+80], xmm0

; 349  : 		return Result;
; 350  : 	}

	pop	ebp
	ret	8
??F?$tmat4x3@N$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tmat4x3<double,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??E?$tmat4x3@N$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat4x3@N$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tmat4x3<double,0>::operator++, COMDAT
; _this$ = ecx

; 338  : 	{

	push	ebp
	mov	ebp, esp

; 339  : 		tmat4x3<T, P> Result(*this);
; 340  : 		++*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	mov	edx, ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	movups	xmm0, XMMWORD PTR [edx]
	push	24					; 00000018H
	pop	ecx
	addpd	xmm0, xmm1
	mov	esi, edx
	mov	edi, eax
	rep movsd
	movups	XMMWORD PTR [edx], xmm0
	pop	edi
	movups	xmm0, XMMWORD PTR [edx+16]
	pop	esi
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+16], xmm0
	movups	xmm0, XMMWORD PTR [edx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+32], xmm0
	movups	xmm0, XMMWORD PTR [edx+48]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+48], xmm0
	movups	xmm0, XMMWORD PTR [edx+64]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+64], xmm0
	movups	xmm0, XMMWORD PTR [edx+80]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+80], xmm0

; 341  : 		return Result;
; 342  : 	}

	pop	ebp
	ret	8
??E?$tmat4x3@N$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tmat4x3<double,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??F?$tmat4x3@N$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat4x3@N$0A@@glm@@QAEAAU01@XZ PROC		; glm::tmat4x3<double,0>::operator--, COMDAT
; _this$ = ecx

; 329  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 330  : 		--this->value[1];
; 331  : 		--this->value[2];
; 332  : 		--this->value[3];
; 333  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	xmm0, XMMWORD PTR [ecx+64]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	xmm0, XMMWORD PTR [ecx+80]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+80], xmm0

; 334  : 	}

	ret	0
??F?$tmat4x3@N$0A@@glm@@QAEAAU01@XZ ENDP		; glm::tmat4x3<double,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??E?$tmat4x3@N$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat4x3@N$0A@@glm@@QAEAAU01@XZ PROC		; glm::tmat4x3<double,0>::operator++, COMDAT
; _this$ = ecx

; 319  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 320  : 		++this->value[1];
; 321  : 		++this->value[2];
; 322  : 		++this->value[3];
; 323  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	xmm0, XMMWORD PTR [ecx+64]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	xmm0, XMMWORD PTR [ecx+80]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+80], xmm0

; 324  : 	}

	ret	0
??E?$tmat4x3@N$0A@@glm@@QAEAAU01@XZ ENDP		; glm::tmat4x3<double,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tmat4x3@N$0A@@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tmat4x3@N$0A@@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tmat4x3<double,0>::operator=, COMDAT
; _this$ = ecx

; 224  : template struct tmat4x3<float64, highp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	24					; 00000018H
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tmat4x3@N$0A@@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tmat4x3<double,0>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??A?$tmat4x3@N$0A@@glm@@QBEABU?$tvec3@N$0A@@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat4x3@N$0A@@glm@@QBEABU?$tvec3@N$0A@@1@H@Z PROC	; glm::tmat4x3<double,0>::operator[], COMDAT
; _this$ = ecx

; 218  : 	{

	push	ebp
	mov	ebp, esp

; 219  : 		assert(i < this->length());
; 220  : 		return this->value[i];

	imul	eax, DWORD PTR _i$[ebp], 24
	add	eax, ecx

; 221  : 	}

	pop	ebp
	ret	4
??A?$tmat4x3@N$0A@@glm@@QBEABU?$tvec3@N$0A@@1@H@Z ENDP	; glm::tmat4x3<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??A?$tmat4x3@N$0A@@glm@@QAEAAU?$tvec3@N$0A@@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat4x3@N$0A@@glm@@QAEAAU?$tvec3@N$0A@@1@H@Z PROC	; glm::tmat4x3<double,0>::operator[], COMDAT
; _this$ = ecx

; 211  : 	{

	push	ebp
	mov	ebp, esp

; 212  : 		assert(i < this->length());
; 213  : 		return this->value[i];

	imul	eax, DWORD PTR _i$[ebp], 24
	add	eax, ecx

; 214  : 	}

	pop	ebp
	ret	4
??A?$tmat4x3@N$0A@@glm@@QAEAAU?$tvec3@N$0A@@1@H@Z ENDP	; glm::tmat4x3<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.hpp
;	COMDAT ?length@?$tmat4x3@N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat4x3@N$0A@@glm@@SAHXZ PROC			; glm::tmat4x3<double,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	push	4
	pop	eax
	ret	0
?length@?$tmat4x3@N$0A@@glm@@SAHXZ ENDP			; glm::tmat4x3<double,0>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$0A@@glm@@QAE@ABU?$tmat3x4@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
$T3 = -24						; size = 24
$T4 = -24						; size = 24
_m$ = 8							; size = 4
??0?$tmat4x3@N$0A@@glm@@QAE@ABU?$tmat3x4@N$0A@@1@@Z PROC ; glm::tmat4x3<double,0>::tmat4x3<double,0>, COMDAT
; _this$ = ecx

; 200  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xorps	xmm1, xmm1
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	3
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat4x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm1
	movups	XMMWORD PTR [eax-16], xmm1
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat4x3

; 201  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T4[ebp]
	push	6
	pop	edx
	mov	edi, ebx
	mov	ecx, edx
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR $T4[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR $T4[ebp+16], xmm0
	rep movsd

; 202  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+32]
	lea	edi, DWORD PTR [ebx+24]
	mov	ecx, edx
	lea	esi, DWORD PTR $T3[ebp]
	movups	XMMWORD PTR $T3[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+48]
	movsd	QWORD PTR $T3[ebp+16], xmm0
	rep movsd

; 203  : 		this->value[2] = col_type(m[2]);

	movups	xmm0, XMMWORD PTR [eax+64]
	lea	edi, DWORD PTR [ebx+48]
	mov	ecx, edx
	lea	esi, DWORD PTR $T2[ebp]
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+80]

; 204  : 		this->value[3] = col_type(0);
; 205  : 	}

	mov	eax, ebx
	movsd	QWORD PTR $T2[ebp+16], xmm0
	xorps	xmm0, xmm0
	rep movsd
	lea	edi, DWORD PTR [ebx+72]
	movsd	QWORD PTR $T1[ebp+16], xmm1
	mov	ecx, edx
	lea	esi, DWORD PTR $T1[ebp]
	movupd	XMMWORD PTR $T1[ebp], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x3@N$0A@@glm@@QAE@ABU?$tmat3x4@N$0A@@1@@Z ENDP ; glm::tmat4x3<double,0>::tmat4x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$0A@@glm@@QAE@ABU?$tmat4x2@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
$T3 = -24						; size = 24
$T4 = -24						; size = 24
_m$ = 8							; size = 4
??0?$tmat4x3@N$0A@@glm@@QAE@ABU?$tmat4x2@N$0A@@1@@Z PROC ; glm::tmat4x3<double,0>::tmat4x3<double,0>, COMDAT
; _this$ = ecx

; 191  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xorps	xmm1, xmm1
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	3
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat4x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm1
	movups	XMMWORD PTR [eax-16], xmm1
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat4x3

; 192  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T4[ebp]
	push	6
	pop	edx
	movsd	QWORD PTR $T4[ebp+16], xmm1
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]
	mov	ecx, edx
	movups	XMMWORD PTR $T4[ebp], xmm0
	rep movsd

; 193  : 		this->value[1] = col_type(m[1], 0);

	movups	xmm0, XMMWORD PTR [eax+16]
	lea	edi, DWORD PTR [ebx+24]
	mov	ecx, edx
	movsd	QWORD PTR $T3[ebp+16], xmm1
	lea	esi, DWORD PTR $T3[ebp]
	movups	XMMWORD PTR $T3[ebp], xmm0
	rep movsd

; 194  : 		this->value[2] = col_type(m[2], 1);

	movups	xmm0, XMMWORD PTR [eax+32]
	lea	edi, DWORD PTR [ebx+48]
	mov	ecx, edx
	lea	esi, DWORD PTR $T2[ebp]
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR $T2[ebp+16], xmm0
	rep movsd

; 195  : 		this->value[3] = col_type(m[3], 0);

	movups	xmm0, XMMWORD PTR [eax+48]
	lea	edi, DWORD PTR [ebx+72]
	mov	ecx, edx
	lea	esi, DWORD PTR $T1[ebp]
	movsd	QWORD PTR $T1[ebp+16], xmm1
	movups	XMMWORD PTR $T1[ebp], xmm0

; 196  : 	}

	mov	eax, ebx
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x3@N$0A@@glm@@QAE@ABU?$tmat4x2@N$0A@@1@@Z ENDP ; glm::tmat4x3<double,0>::tmat4x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$0A@@glm@@QAE@ABU?$tmat2x4@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
$T3 = -24						; size = 24
$T4 = -24						; size = 24
_m$ = 8							; size = 4
??0?$tmat4x3@N$0A@@glm@@QAE@ABU?$tmat2x4@N$0A@@1@@Z PROC ; glm::tmat4x3<double,0>::tmat4x3<double,0>, COMDAT
; _this$ = ecx

; 182  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xorps	xmm1, xmm1
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	3
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat4x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm1
	movups	XMMWORD PTR [eax-16], xmm1
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat4x3

; 183  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T4[ebp]
	push	6
	pop	edx
	mov	edi, ebx
	mov	ecx, edx
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR $T4[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR $T4[ebp+16], xmm0
	rep movsd

; 184  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+32]
	lea	edi, DWORD PTR [ebx+24]
	mov	ecx, edx
	lea	esi, DWORD PTR $T3[ebp]
	movups	XMMWORD PTR $T3[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+48]

; 185  : 		this->value[2] = col_type(0, 0, 1);
; 186  : 		this->value[3] = col_type(0);
; 187  : 	}

	mov	eax, ebx
	movsd	QWORD PTR $T3[ebp+16], xmm0
	xorps	xmm0, xmm0
	rep movsd
	movupd	XMMWORD PTR $T2[ebp], xmm0
	lea	edi, DWORD PTR [ebx+48]
	mov	ecx, edx
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	lea	esi, DWORD PTR $T2[ebp]
	movsd	QWORD PTR $T2[ebp+16], xmm0
	xorps	xmm0, xmm0
	rep movsd
	lea	edi, DWORD PTR [ebx+72]
	movsd	QWORD PTR $T1[ebp+16], xmm1
	mov	ecx, edx
	lea	esi, DWORD PTR $T1[ebp]
	movupd	XMMWORD PTR $T1[ebp], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x3@N$0A@@glm@@QAE@ABU?$tmat2x4@N$0A@@1@@Z ENDP ; glm::tmat4x3<double,0>::tmat4x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$0A@@glm@@QAE@ABU?$tmat3x2@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
$T3 = -24						; size = 24
$T4 = -24						; size = 24
_m$ = 8							; size = 4
??0?$tmat4x3@N$0A@@glm@@QAE@ABU?$tmat3x2@N$0A@@1@@Z PROC ; glm::tmat4x3<double,0>::tmat4x3<double,0>, COMDAT
; _this$ = ecx

; 173  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xorps	xmm1, xmm1
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	3
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat4x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm1
	movups	XMMWORD PTR [eax-16], xmm1
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat4x3

; 174  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T4[ebp]
	push	6
	pop	edx
	movsd	QWORD PTR $T4[ebp+16], xmm1
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]
	mov	ecx, edx
	movups	XMMWORD PTR $T4[ebp], xmm0
	rep movsd

; 175  : 		this->value[1] = col_type(m[1], 0);

	movups	xmm0, XMMWORD PTR [eax+16]
	lea	edi, DWORD PTR [ebx+24]
	mov	ecx, edx
	movsd	QWORD PTR $T3[ebp+16], xmm1
	lea	esi, DWORD PTR $T3[ebp]
	movups	XMMWORD PTR $T3[ebp], xmm0
	rep movsd

; 176  : 		this->value[2] = col_type(m[2], 1);

	movups	xmm0, XMMWORD PTR [eax+32]
	lea	edi, DWORD PTR [ebx+48]
	mov	ecx, edx
	lea	esi, DWORD PTR $T2[ebp]

; 177  : 		this->value[3] = col_type(0);
; 178  : 	}

	mov	eax, ebx
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR $T2[ebp+16], xmm0
	xorps	xmm0, xmm0
	rep movsd
	lea	edi, DWORD PTR [ebx+72]
	movsd	QWORD PTR $T1[ebp+16], xmm1
	mov	ecx, edx
	lea	esi, DWORD PTR $T1[ebp]
	movupd	XMMWORD PTR $T1[ebp], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x3@N$0A@@glm@@QAE@ABU?$tmat3x2@N$0A@@1@@Z ENDP ; glm::tmat4x3<double,0>::tmat4x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$0A@@glm@@QAE@ABU?$tmat2x3@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
$T3 = -24						; size = 24
$T4 = -24						; size = 24
_m$ = 8							; size = 4
??0?$tmat4x3@N$0A@@glm@@QAE@ABU?$tmat2x3@N$0A@@1@@Z PROC ; glm::tmat4x3<double,0>::tmat4x3<double,0>, COMDAT
; _this$ = ecx

; 164  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xorps	xmm1, xmm1
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	3
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat4x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm1
	movups	XMMWORD PTR [eax-16], xmm1
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat4x3

; 165  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	lea	edi, DWORD PTR $T4[ebp]
	push	6
	pop	edx
	mov	esi, eax
	mov	ecx, edx
	rep movsd
	mov	edi, ebx
	lea	esi, DWORD PTR $T4[ebp]
	mov	ecx, edx
	xorps	xmm0, xmm0
	rep movsd

; 166  : 		this->value[1] = col_type(m[1]);

	lea	esi, DWORD PTR [eax+24]
	mov	ecx, edx
	lea	edi, DWORD PTR $T3[ebp]

; 167  : 		this->value[2] = col_type(0, 0, 1);
; 168  : 		this->value[3] = col_type(0);
; 169  : 	}

	mov	eax, ebx
	rep movsd
	lea	edi, DWORD PTR [ebx+24]
	mov	ecx, edx
	lea	esi, DWORD PTR $T3[ebp]
	rep movsd
	movupd	XMMWORD PTR $T2[ebp], xmm0
	lea	edi, DWORD PTR [ebx+48]
	mov	ecx, edx
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	lea	esi, DWORD PTR $T2[ebp]
	movsd	QWORD PTR $T2[ebp+16], xmm0
	xorps	xmm0, xmm0
	rep movsd
	lea	edi, DWORD PTR [ebx+72]
	movsd	QWORD PTR $T1[ebp+16], xmm1
	mov	ecx, edx
	lea	esi, DWORD PTR $T1[ebp]
	movupd	XMMWORD PTR $T1[ebp], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x3@N$0A@@glm@@QAE@ABU?$tmat2x3@N$0A@@1@@Z ENDP ; glm::tmat4x3<double,0>::tmat4x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$0A@@glm@@QAE@ABU?$tmat4x4@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
$T3 = -24						; size = 24
$T4 = -24						; size = 24
_m$ = 8							; size = 4
??0?$tmat4x3@N$0A@@glm@@QAE@ABU?$tmat4x4@N$0A@@1@@Z PROC ; glm::tmat4x3<double,0>::tmat4x3<double,0>, COMDAT
; _this$ = ecx

; 155  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xorps	xmm0, xmm0
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	3
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat4x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm0
	movups	XMMWORD PTR [eax-16], xmm0
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat4x3

; 156  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T4[ebp]
	push	6
	pop	edx
	mov	edi, ebx
	mov	ecx, edx
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR $T4[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR $T4[ebp+16], xmm0
	rep movsd

; 157  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+32]
	lea	edi, DWORD PTR [ebx+24]
	mov	ecx, edx
	lea	esi, DWORD PTR $T3[ebp]
	movups	XMMWORD PTR $T3[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+48]
	movsd	QWORD PTR $T3[ebp+16], xmm0
	rep movsd

; 158  : 		this->value[2] = col_type(m[2]);

	movups	xmm0, XMMWORD PTR [eax+64]
	lea	edi, DWORD PTR [ebx+48]
	mov	ecx, edx
	lea	esi, DWORD PTR $T2[ebp]
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+80]
	movsd	QWORD PTR $T2[ebp+16], xmm0
	rep movsd

; 159  : 		this->value[3] = col_type(m[3]);

	movups	xmm0, XMMWORD PTR [eax+96]
	lea	edi, DWORD PTR [ebx+72]
	mov	ecx, edx
	lea	esi, DWORD PTR $T1[ebp]
	movups	XMMWORD PTR $T1[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+112]

; 160  : 	}

	mov	eax, ebx
	movsd	QWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x3@N$0A@@glm@@QAE@ABU?$tmat4x4@N$0A@@1@@Z ENDP ; glm::tmat4x3<double,0>::tmat4x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$0A@@glm@@QAE@ABU?$tmat3x3@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
$T3 = -24						; size = 24
$T4 = -24						; size = 24
_m$ = 8							; size = 4
??0?$tmat4x3@N$0A@@glm@@QAE@ABU?$tmat3x3@N$0A@@1@@Z PROC ; glm::tmat4x3<double,0>::tmat4x3<double,0>, COMDAT
; _this$ = ecx

; 146  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xorps	xmm1, xmm1
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	3
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat4x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm1
	movups	XMMWORD PTR [eax-16], xmm1
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat4x3

; 147  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	lea	edi, DWORD PTR $T4[ebp]
	push	6
	pop	edx
	mov	esi, eax
	mov	ecx, edx
	rep movsd
	mov	edi, ebx
	lea	esi, DWORD PTR $T4[ebp]
	mov	ecx, edx
	xorps	xmm0, xmm0
	rep movsd

; 148  : 		this->value[1] = col_type(m[1]);

	lea	esi, DWORD PTR [eax+24]
	mov	ecx, edx
	lea	edi, DWORD PTR $T3[ebp]
	rep movsd
	lea	edi, DWORD PTR [ebx+24]
	mov	ecx, edx
	lea	esi, DWORD PTR $T3[ebp]
	rep movsd

; 149  : 		this->value[2] = col_type(m[2]);

	lea	esi, DWORD PTR [eax+48]
	mov	ecx, edx
	lea	edi, DWORD PTR $T2[ebp]

; 150  : 		this->value[3] = col_type(0);
; 151  : 	}

	mov	eax, ebx
	rep movsd
	lea	edi, DWORD PTR [ebx+48]
	mov	ecx, edx
	lea	esi, DWORD PTR $T2[ebp]
	rep movsd
	lea	edi, DWORD PTR [ebx+72]
	movsd	QWORD PTR $T1[ebp+16], xmm1
	mov	ecx, edx
	lea	esi, DWORD PTR $T1[ebp]
	movupd	XMMWORD PTR $T1[ebp], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x3@N$0A@@glm@@QAE@ABU?$tmat3x3@N$0A@@1@@Z ENDP ; glm::tmat4x3<double,0>::tmat4x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$0A@@glm@@QAE@ABU?$tmat2x2@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
$T3 = -24						; size = 24
$T4 = -24						; size = 24
_m$ = 8							; size = 4
??0?$tmat4x3@N$0A@@glm@@QAE@ABU?$tmat2x2@N$0A@@1@@Z PROC ; glm::tmat4x3<double,0>::tmat4x3<double,0>, COMDAT
; _this$ = ecx

; 137  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xorps	xmm1, xmm1
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	3
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat4x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm1
	movups	XMMWORD PTR [eax-16], xmm1
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat4x3

; 138  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T4[ebp]
	push	6
	pop	edx
	movsd	QWORD PTR $T4[ebp+16], xmm1
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]
	mov	ecx, edx
	movups	XMMWORD PTR $T4[ebp], xmm0
	rep movsd

; 139  : 		this->value[1] = col_type(m[1], 0);

	movups	xmm0, XMMWORD PTR [eax+16]
	lea	edi, DWORD PTR [ebx+24]
	mov	ecx, edx
	movsd	QWORD PTR $T3[ebp+16], xmm1
	lea	esi, DWORD PTR $T3[ebp]
	movups	XMMWORD PTR $T3[ebp], xmm0

; 140  : 		this->value[2] = col_type(0, 0, 1);
; 141  : 		this->value[3] = col_type(0);
; 142  : 	}

	mov	eax, ebx
	rep movsd
	xorps	xmm0, xmm0
	lea	edi, DWORD PTR [ebx+48]
	movupd	XMMWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	mov	ecx, edx
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR $T2[ebp+16], xmm0
	xorps	xmm0, xmm0
	rep movsd
	lea	edi, DWORD PTR [ebx+72]
	movsd	QWORD PTR $T1[ebp+16], xmm1
	mov	ecx, edx
	lea	esi, DWORD PTR $T1[ebp]
	movupd	XMMWORD PTR $T1[ebp], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x3@N$0A@@glm@@QAE@ABU?$tmat2x2@N$0A@@1@@Z ENDP ; glm::tmat4x3<double,0>::tmat4x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$0A@@glm@@QAE@ABU?$tvec3@N$0A@@1@000@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
_v3$ = 20						; size = 4
??0?$tmat4x3@N$0A@@glm@@QAE@ABU?$tvec3@N$0A@@1@000@Z PROC ; glm::tmat4x3<double,0>::tmat4x3<double,0>, COMDAT
; _this$ = ecx

; 78   : 	{

	push	ebp
	mov	ebp, esp
	mov	edx, ecx
	xorps	xmm0, xmm0
	push	3
	pop	ecx
	lea	eax, DWORD PTR [edx+16]
$LL4@tmat4x3:
	dec	ecx
	movsd	QWORD PTR [eax], xmm0
	movups	XMMWORD PTR [eax-16], xmm0
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat4x3

; 79   : 		this->value[0] = v0;

	push	esi
	mov	esi, DWORD PTR _v0$[ebp]
	push	edi
	push	6
	pop	eax
	mov	ecx, eax
	mov	edi, edx
	rep movsd

; 80   : 		this->value[1] = v1;

	mov	esi, DWORD PTR _v1$[ebp]
	lea	edi, DWORD PTR [edx+24]
	mov	ecx, eax
	rep movsd

; 81   : 		this->value[2] = v2;

	mov	esi, DWORD PTR _v2$[ebp]
	lea	edi, DWORD PTR [edx+48]
	mov	ecx, eax
	rep movsd

; 82   : 		this->value[3] = v3;

	mov	esi, DWORD PTR _v3$[ebp]
	lea	edi, DWORD PTR [edx+72]
	mov	ecx, eax

; 83   : 	}

	mov	eax, edx
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	16					; 00000010H
??0?$tmat4x3@N$0A@@glm@@QAE@ABU?$tvec3@N$0A@@1@000@Z ENDP ; glm::tmat4x3<double,0>::tmat4x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$0A@@glm@@QAE@ABN00000000000@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
$T3 = -24						; size = 24
$T4 = -24						; size = 24
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_z0$ = 16						; size = 4
_x1$ = 20						; size = 4
_y1$ = 24						; size = 4
_z1$ = 28						; size = 4
_x2$ = 32						; size = 4
_y2$ = 36						; size = 4
_z2$ = 40						; size = 4
_x3$ = 44						; size = 4
_y3$ = 48						; size = 4
_z3$ = 52						; size = 4
??0?$tmat4x3@N$0A@@glm@@QAE@ABN00000000000@Z PROC	; glm::tmat4x3<double,0>::tmat4x3<double,0>, COMDAT
; _this$ = ecx

; 63   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xorps	xmm0, xmm0
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	3
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat4x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm0
	movups	XMMWORD PTR [eax-16], xmm0
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat4x3

; 64   : 		this->value[0] = col_type(x0, y0, z0);

	mov	eax, DWORD PTR _x0$[ebp]
	lea	esi, DWORD PTR $T4[ebp]
	push	6
	pop	edx
	mov	edi, ebx
	mov	ecx, edx
	movsd	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR _y0$[ebp]
	movsd	QWORD PTR $T4[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR _z0$[ebp]
	movsd	QWORD PTR $T4[ebp+8], xmm0
	movsd	xmm0, QWORD PTR [eax]

; 65   : 		this->value[1] = col_type(x1, y1, z1);

	mov	eax, DWORD PTR _x1$[ebp]
	movsd	QWORD PTR $T4[ebp+16], xmm0
	rep movsd
	movsd	xmm0, QWORD PTR [eax]
	lea	edi, DWORD PTR [ebx+24]
	mov	eax, DWORD PTR _y1$[ebp]
	mov	ecx, edx
	movsd	QWORD PTR $T3[ebp], xmm0
	lea	esi, DWORD PTR $T3[ebp]
	movsd	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR _z1$[ebp]
	movsd	QWORD PTR $T3[ebp+8], xmm0
	movsd	xmm0, QWORD PTR [eax]

; 66   : 		this->value[2] = col_type(x2, y2, z2);

	mov	eax, DWORD PTR _x2$[ebp]
	movsd	QWORD PTR $T3[ebp+16], xmm0
	rep movsd
	movsd	xmm0, QWORD PTR [eax]
	lea	edi, DWORD PTR [ebx+48]
	mov	eax, DWORD PTR _y2$[ebp]
	mov	ecx, edx
	movsd	QWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	movsd	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR _z2$[ebp]
	movsd	QWORD PTR $T2[ebp+8], xmm0
	movsd	xmm0, QWORD PTR [eax]

; 67   : 		this->value[3] = col_type(x3, y3, z3);

	mov	eax, DWORD PTR _x3$[ebp]
	movsd	QWORD PTR $T2[ebp+16], xmm0
	rep movsd
	movsd	xmm0, QWORD PTR [eax]
	lea	edi, DWORD PTR [ebx+72]
	mov	eax, DWORD PTR _y3$[ebp]
	mov	ecx, edx
	movsd	QWORD PTR $T1[ebp], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	movsd	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR _z3$[ebp]
	movsd	QWORD PTR $T1[ebp+8], xmm0
	movsd	xmm0, QWORD PTR [eax]

; 68   : 	}

	mov	eax, ebx
	movsd	QWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	48					; 00000030H
??0?$tmat4x3@N$0A@@glm@@QAE@ABN00000000000@Z ENDP	; glm::tmat4x3<double,0>::tmat4x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$0A@@glm@@QAE@ABN@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
$T3 = -24						; size = 24
$T4 = -24						; size = 24
_s$ = 8							; size = 4
??0?$tmat4x3@N$0A@@glm@@QAE@ABN@Z PROC			; glm::tmat4x3<double,0>::tmat4x3<double,0>, COMDAT
; _this$ = ecx

; 48   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xorps	xmm1, xmm1
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	3
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat4x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm1
	movups	XMMWORD PTR [eax-16], xmm1
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat4x3

; 49   : 		this->value[0] = col_type(s, 0, 0);

	mov	eax, DWORD PTR _s$[ebp]
	lea	esi, DWORD PTR $T4[ebp]
	push	6
	pop	edx
	mov	edi, ebx
	mov	ecx, edx
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR $T4[ebp], xmm0
	xorps	xmm0, xmm0
	movupd	XMMWORD PTR $T4[ebp+8], xmm0
	rep movsd

; 50   : 		this->value[1] = col_type(0, s, 0);

	movsd	xmm0, QWORD PTR [eax]
	lea	edi, DWORD PTR [ebx+24]
	movsd	QWORD PTR $T3[ebp+8], xmm0
	lea	esi, DWORD PTR $T3[ebp]
	movsd	QWORD PTR $T3[ebp], xmm1
	xorps	xmm0, xmm0
	movsd	QWORD PTR $T3[ebp+16], xmm1
	mov	ecx, edx
	rep movsd
	movupd	XMMWORD PTR $T2[ebp], xmm0

; 51   : 		this->value[2] = col_type(0, 0, s);

	lea	edi, DWORD PTR [ebx+48]
	mov	ecx, edx
	movsd	xmm0, QWORD PTR [eax]
	lea	esi, DWORD PTR $T2[ebp]
	movsd	QWORD PTR $T2[ebp+16], xmm0

; 52   : 		this->value[3] = col_type(0, 0, 0);
; 53   : 	}

	mov	eax, ebx
	rep movsd
	xorps	xmm0, xmm0
	movsd	QWORD PTR $T1[ebp+16], xmm1
	lea	edi, DWORD PTR [ebx+72]
	mov	ecx, edx
	lea	esi, DWORD PTR $T1[ebp]
	movupd	XMMWORD PTR $T1[ebp], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x3@N$0A@@glm@@QAE@ABN@Z ENDP			; glm::tmat4x3<double,0>::tmat4x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat4x3@N$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat4x3<double,0>::tmat4x3<double,0>, COMDAT
; _this$ = ecx

; 44   : 	{}

	push	3
	pop	edx
	lea	eax, DWORD PTR [ecx+16]
	xorps	xmm0, xmm0
$LL4@tmat4x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm0
	movups	XMMWORD PTR [eax-16], xmm0
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat4x3
	mov	eax, ecx
	ret	4
??0?$tmat4x3@N$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat4x3<double,0>::tmat4x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tmat4x3@N$0A@@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tmat4x3@N$0A@@glm@@QAE@ABU01@@Z PROC		; glm::tmat4x3<double,0>::tmat4x3<double,0>, COMDAT
; _this$ = ecx

; 224  : template struct tmat4x3<float64, highp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	24					; 00000018H
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tmat4x3@N$0A@@glm@@QAE@ABU01@@Z ENDP		; glm::tmat4x3<double,0>::tmat4x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
$T3 = -24						; size = 24
$T4 = -24						; size = 24
??0?$tmat4x3@N$0A@@glm@@QAE@XZ PROC			; glm::tmat4x3<double,0>::tmat4x3<double,0>, COMDAT
; _this$ = ecx

; 11   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xorps	xmm1, xmm1
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	3
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat4x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm1
	movups	XMMWORD PTR [eax-16], xmm1
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat4x3

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0, 0);

	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	lea	esi, DWORD PTR $T4[ebp]
	movupd	XMMWORD PTR $T4[ebp], xmm0
	mov	edi, ebx
	movaps	xmm0, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	push	6
	pop	eax
	movsd	QWORD PTR $T4[ebp+16], xmm1
	mov	ecx, eax
	rep movsd
	movupd	XMMWORD PTR $T3[ebp], xmm0

; 14   : 				this->value[1] = col_type(0, 1, 0);

	lea	edi, DWORD PTR [ebx+24]
	mov	ecx, eax
	movsd	QWORD PTR $T3[ebp+16], xmm1
	lea	esi, DWORD PTR $T3[ebp]
	rep movsd
	xorps	xmm0, xmm0

; 15   : 				this->value[2] = col_type(0, 0, 1);

	lea	edi, DWORD PTR [ebx+48]
	movupd	XMMWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	mov	ecx, eax
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR $T2[ebp+16], xmm0
	xorps	xmm0, xmm0
	rep movsd

; 16   : 				this->value[3] = col_type(0, 0, 0);

	lea	edi, DWORD PTR [ebx+72]
	movsd	QWORD PTR $T1[ebp+16], xmm1
	mov	ecx, eax
	lea	esi, DWORD PTR $T1[ebp]
	movupd	XMMWORD PTR $T1[ebp], xmm0

; 17   : #			endif
; 18   : 		}

	mov	eax, ebx
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$tmat4x3@N$0A@@glm@@QAE@XZ ENDP			; glm::tmat4x3<double,0>::tmat4x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??F?$tmat4x3@M$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat4x3@M$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tmat4x3<float,0>::operator--, COMDAT
; _this$ = ecx

; 346  : 	{

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi

; 347  : 		tmat4x3<T, P> Result(*this);

	mov	edi, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, ecx
	push	12					; 0000000cH
	pop	ecx
	mov	esi, eax
	rep movsd

; 348  : 		--*this;

	mov	ecx, eax
	call	??F?$tmat4x3@M$0A@@glm@@QAEAAU01@XZ	; glm::tmat4x3<float,0>::operator--

; 349  : 		return Result;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi

; 350  : 	}

	pop	ebp
	ret	8
??F?$tmat4x3@M$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tmat4x3<float,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??E?$tmat4x3@M$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat4x3@M$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tmat4x3<float,0>::operator++, COMDAT
; _this$ = ecx

; 338  : 	{

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi

; 339  : 		tmat4x3<T, P> Result(*this);

	mov	edi, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, ecx
	push	12					; 0000000cH
	pop	ecx
	mov	esi, eax
	rep movsd

; 340  : 		++*this;

	mov	ecx, eax
	call	??E?$tmat4x3@M$0A@@glm@@QAEAAU01@XZ	; glm::tmat4x3<float,0>::operator++

; 341  : 		return Result;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi

; 342  : 	}

	pop	ebp
	ret	8
??E?$tmat4x3@M$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tmat4x3<float,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??F?$tmat4x3@M$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat4x3@M$0A@@glm@@QAEAAU01@XZ PROC		; glm::tmat4x3<float,0>::operator--, COMDAT
; _this$ = ecx

; 329  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 330  : 		--this->value[1];
; 331  : 		--this->value[2];
; 332  : 		--this->value[3];
; 333  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0

; 334  : 	}

	ret	0
??F?$tmat4x3@M$0A@@glm@@QAEAAU01@XZ ENDP		; glm::tmat4x3<float,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??E?$tmat4x3@M$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat4x3@M$0A@@glm@@QAEAAU01@XZ PROC		; glm::tmat4x3<float,0>::operator++, COMDAT
; _this$ = ecx

; 319  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 320  : 		++this->value[1];
; 321  : 		++this->value[2];
; 322  : 		++this->value[3];
; 323  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0

; 324  : 	}

	ret	0
??E?$tmat4x3@M$0A@@glm@@QAEAAU01@XZ ENDP		; glm::tmat4x3<float,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tmat4x3@M$0A@@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tmat4x3@M$0A@@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tmat4x3<float,0>::operator=, COMDAT
; _this$ = ecx

; 223  : template struct tmat4x3<float32, highp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	12					; 0000000cH
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tmat4x3@M$0A@@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tmat4x3<float,0>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??A?$tmat4x3@M$0A@@glm@@QBEABU?$tvec3@M$0A@@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat4x3@M$0A@@glm@@QBEABU?$tvec3@M$0A@@1@H@Z PROC	; glm::tmat4x3<float,0>::operator[], COMDAT
; _this$ = ecx

; 218  : 	{

	push	ebp
	mov	ebp, esp

; 219  : 		assert(i < this->length());
; 220  : 		return this->value[i];

	imul	eax, DWORD PTR _i$[ebp], 12
	add	eax, ecx

; 221  : 	}

	pop	ebp
	ret	4
??A?$tmat4x3@M$0A@@glm@@QBEABU?$tvec3@M$0A@@1@H@Z ENDP	; glm::tmat4x3<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??A?$tmat4x3@M$0A@@glm@@QAEAAU?$tvec3@M$0A@@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat4x3@M$0A@@glm@@QAEAAU?$tvec3@M$0A@@1@H@Z PROC	; glm::tmat4x3<float,0>::operator[], COMDAT
; _this$ = ecx

; 211  : 	{

	push	ebp
	mov	ebp, esp

; 212  : 		assert(i < this->length());
; 213  : 		return this->value[i];

	imul	eax, DWORD PTR _i$[ebp], 12
	add	eax, ecx

; 214  : 	}

	pop	ebp
	ret	4
??A?$tmat4x3@M$0A@@glm@@QAEAAU?$tvec3@M$0A@@1@H@Z ENDP	; glm::tmat4x3<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.hpp
;	COMDAT ?length@?$tmat4x3@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat4x3@M$0A@@glm@@SAHXZ PROC			; glm::tmat4x3<float,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	push	4
	pop	eax
	ret	0
?length@?$tmat4x3@M$0A@@glm@@SAHXZ ENDP			; glm::tmat4x3<float,0>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$0A@@glm@@QAE@ABU?$tmat3x4@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
$T4 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat4x3@M$0A@@glm@@QAE@ABU?$tmat3x4@M$0A@@1@@Z PROC ; glm::tmat4x3<float,0>::tmat4x3<float,0>, COMDAT
; _this$ = ecx

; 200  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	lea	eax, DWORD PTR [ecx+8]
	push	3
	pop	edx
$LL4@tmat4x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat4x3

; 201  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T4[ebp]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T4[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T4[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T4[ebp+8], xmm0
	movsd
	movsd
	movsd

; 202  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [eax+16]
	lea	edi, DWORD PTR [ecx+12]
	movss	DWORD PTR $T3[ebp], xmm0
	lea	esi, DWORD PTR $T3[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+24]
	movss	DWORD PTR $T3[ebp+8], xmm0
	movsd
	movsd
	movsd

; 203  : 		this->value[2] = col_type(m[2]);

	movss	xmm0, DWORD PTR [eax+32]
	lea	edi, DWORD PTR [ecx+24]
	movss	DWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	movss	xmm0, DWORD PTR [eax+36]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+40]

; 204  : 		this->value[3] = col_type(0);
; 205  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T2[ebp+8], xmm0
	movsd
	movsd
	movsd
	and	DWORD PTR $T1[ebp], 0
	lea	edi, DWORD PTR [ecx+36]
	and	DWORD PTR $T1[ebp+4], 0
	lea	esi, DWORD PTR $T1[ebp]
	and	DWORD PTR $T1[ebp+8], 0
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x3@M$0A@@glm@@QAE@ABU?$tmat3x4@M$0A@@1@@Z ENDP ; glm::tmat4x3<float,0>::tmat4x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$0A@@glm@@QAE@ABU?$tmat4x2@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
$T4 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat4x3@M$0A@@glm@@QAE@ABU?$tmat4x2@M$0A@@1@@Z PROC ; glm::tmat4x3<float,0>::tmat4x3<float,0>, COMDAT
; _this$ = ecx

; 191  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	lea	eax, DWORD PTR [ecx+8]
	push	3
	pop	edx
$LL4@tmat4x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat4x3

; 192  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	and	DWORD PTR $T4[ebp+8], 0
	push	esi
	push	edi
	movss	xmm0, DWORD PTR [eax]
	lea	esi, DWORD PTR $T4[ebp]
	movss	DWORD PTR $T4[ebp], xmm0
	mov	edi, ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T4[ebp+4], xmm0
	movsd
	movsd
	movsd

; 193  : 		this->value[1] = col_type(m[1], 0);

	movss	xmm0, DWORD PTR [eax+8]
	lea	edi, DWORD PTR [ecx+12]
	and	DWORD PTR $T3[ebp+8], 0
	lea	esi, DWORD PTR $T3[ebp]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movsd
	movsd
	movsd

; 194  : 		this->value[2] = col_type(m[2], 1);

	movss	xmm0, DWORD PTR [eax+16]
	lea	edi, DWORD PTR [ecx+24]
	movss	DWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	DWORD PTR $T2[ebp+8], 1065353216	; 3f800000H
	movsd
	movsd
	movsd

; 195  : 		this->value[3] = col_type(m[3], 0);

	movss	xmm0, DWORD PTR [eax+24]
	lea	edi, DWORD PTR [ecx+36]
	and	DWORD PTR $T1[ebp+8], 0
	lea	esi, DWORD PTR $T1[ebp]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+28]

; 196  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+4], xmm0
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x3@M$0A@@glm@@QAE@ABU?$tmat4x2@M$0A@@1@@Z ENDP ; glm::tmat4x3<float,0>::tmat4x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$0A@@glm@@QAE@ABU?$tmat2x4@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
$T4 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat4x3@M$0A@@glm@@QAE@ABU?$tmat2x4@M$0A@@1@@Z PROC ; glm::tmat4x3<float,0>::tmat4x3<float,0>, COMDAT
; _this$ = ecx

; 182  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	lea	eax, DWORD PTR [ecx+8]
	push	3
	pop	edx
$LL4@tmat4x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat4x3

; 183  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T4[ebp]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T4[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T4[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T4[ebp+8], xmm0
	movsd
	movsd
	movsd

; 184  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [eax+16]
	lea	edi, DWORD PTR [ecx+12]
	movss	DWORD PTR $T3[ebp], xmm0
	lea	esi, DWORD PTR $T3[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+24]

; 185  : 		this->value[2] = col_type(0, 0, 1);
; 186  : 		this->value[3] = col_type(0);
; 187  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T3[ebp+8], xmm0
	movsd
	movsd
	movsd
	and	DWORD PTR $T2[ebp], 0
	lea	edi, DWORD PTR [ecx+24]
	and	DWORD PTR $T2[ebp+4], 0
	lea	esi, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T2[ebp+8], 1065353216	; 3f800000H
	movsd
	movsd
	movsd
	and	DWORD PTR $T1[ebp], 0
	lea	edi, DWORD PTR [ecx+36]
	and	DWORD PTR $T1[ebp+4], 0
	lea	esi, DWORD PTR $T1[ebp]
	and	DWORD PTR $T1[ebp+8], 0
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x3@M$0A@@glm@@QAE@ABU?$tmat2x4@M$0A@@1@@Z ENDP ; glm::tmat4x3<float,0>::tmat4x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$0A@@glm@@QAE@ABU?$tmat3x2@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
$T4 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat4x3@M$0A@@glm@@QAE@ABU?$tmat3x2@M$0A@@1@@Z PROC ; glm::tmat4x3<float,0>::tmat4x3<float,0>, COMDAT
; _this$ = ecx

; 173  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	lea	eax, DWORD PTR [ecx+8]
	push	3
	pop	edx
$LL4@tmat4x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat4x3

; 174  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	and	DWORD PTR $T4[ebp+8], 0
	push	esi
	push	edi
	movss	xmm0, DWORD PTR [eax]
	lea	esi, DWORD PTR $T4[ebp]
	movss	DWORD PTR $T4[ebp], xmm0
	mov	edi, ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T4[ebp+4], xmm0
	movsd
	movsd
	movsd

; 175  : 		this->value[1] = col_type(m[1], 0);

	movss	xmm0, DWORD PTR [eax+8]
	lea	edi, DWORD PTR [ecx+12]
	and	DWORD PTR $T3[ebp+8], 0
	lea	esi, DWORD PTR $T3[ebp]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movsd
	movsd
	movsd

; 176  : 		this->value[2] = col_type(m[2], 1);

	movss	xmm0, DWORD PTR [eax+16]
	lea	edi, DWORD PTR [ecx+24]
	movss	DWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	movss	xmm0, DWORD PTR [eax+20]

; 177  : 		this->value[3] = col_type(0);
; 178  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	DWORD PTR $T2[ebp+8], 1065353216	; 3f800000H
	movsd
	movsd
	movsd
	and	DWORD PTR $T1[ebp], 0
	lea	edi, DWORD PTR [ecx+36]
	and	DWORD PTR $T1[ebp+4], 0
	lea	esi, DWORD PTR $T1[ebp]
	and	DWORD PTR $T1[ebp+8], 0
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x3@M$0A@@glm@@QAE@ABU?$tmat3x2@M$0A@@1@@Z ENDP ; glm::tmat4x3<float,0>::tmat4x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$0A@@glm@@QAE@ABU?$tmat2x3@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
$T4 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat4x3@M$0A@@glm@@QAE@ABU?$tmat2x3@M$0A@@1@@Z PROC ; glm::tmat4x3<float,0>::tmat4x3<float,0>, COMDAT
; _this$ = ecx

; 164  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	lea	eax, DWORD PTR [ecx+8]
	push	3
	pop	edx
$LL4@tmat4x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat4x3

; 165  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	esi, eax
	lea	edi, DWORD PTR $T4[ebp]
	movsd
	movsd
	movsd
	mov	edi, ecx
	lea	esi, DWORD PTR $T4[ebp]
	movsd
	movsd
	movsd

; 166  : 		this->value[1] = col_type(m[1]);

	lea	esi, DWORD PTR [eax+12]

; 167  : 		this->value[2] = col_type(0, 0, 1);
; 168  : 		this->value[3] = col_type(0);
; 169  : 	}

	mov	eax, ecx
	lea	edi, DWORD PTR $T3[ebp]
	movsd
	movsd
	movsd
	lea	edi, DWORD PTR [ecx+12]
	lea	esi, DWORD PTR $T3[ebp]
	movsd
	movsd
	movsd
	and	DWORD PTR $T2[ebp], 0
	lea	edi, DWORD PTR [ecx+24]
	and	DWORD PTR $T2[ebp+4], 0
	lea	esi, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T2[ebp+8], 1065353216	; 3f800000H
	movsd
	movsd
	movsd
	and	DWORD PTR $T1[ebp], 0
	lea	edi, DWORD PTR [ecx+36]
	and	DWORD PTR $T1[ebp+4], 0
	lea	esi, DWORD PTR $T1[ebp]
	and	DWORD PTR $T1[ebp+8], 0
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x3@M$0A@@glm@@QAE@ABU?$tmat2x3@M$0A@@1@@Z ENDP ; glm::tmat4x3<float,0>::tmat4x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$0A@@glm@@QAE@ABU?$tmat4x4@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
$T4 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat4x3@M$0A@@glm@@QAE@ABU?$tmat4x4@M$0A@@1@@Z PROC ; glm::tmat4x3<float,0>::tmat4x3<float,0>, COMDAT
; _this$ = ecx

; 155  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	lea	eax, DWORD PTR [ecx+8]
	push	3
	pop	edx
$LL4@tmat4x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat4x3

; 156  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T4[ebp]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T4[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T4[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T4[ebp+8], xmm0
	movsd
	movsd
	movsd

; 157  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [eax+16]
	lea	edi, DWORD PTR [ecx+12]
	movss	DWORD PTR $T3[ebp], xmm0
	lea	esi, DWORD PTR $T3[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+24]
	movss	DWORD PTR $T3[ebp+8], xmm0
	movsd
	movsd
	movsd

; 158  : 		this->value[2] = col_type(m[2]);

	movss	xmm0, DWORD PTR [eax+32]
	lea	edi, DWORD PTR [ecx+24]
	movss	DWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	movss	xmm0, DWORD PTR [eax+36]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+40]
	movss	DWORD PTR $T2[ebp+8], xmm0
	movsd
	movsd
	movsd

; 159  : 		this->value[3] = col_type(m[3]);

	movss	xmm0, DWORD PTR [eax+48]
	lea	edi, DWORD PTR [ecx+36]
	movss	DWORD PTR $T1[ebp], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	movss	xmm0, DWORD PTR [eax+52]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+56]

; 160  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+8], xmm0
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x3@M$0A@@glm@@QAE@ABU?$tmat4x4@M$0A@@1@@Z ENDP ; glm::tmat4x3<float,0>::tmat4x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$0A@@glm@@QAE@ABU?$tmat3x3@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
$T4 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat4x3@M$0A@@glm@@QAE@ABU?$tmat3x3@M$0A@@1@@Z PROC ; glm::tmat4x3<float,0>::tmat4x3<float,0>, COMDAT
; _this$ = ecx

; 146  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	lea	eax, DWORD PTR [ecx+8]
	push	3
	pop	edx
$LL4@tmat4x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat4x3

; 147  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	esi, eax
	lea	edi, DWORD PTR $T4[ebp]
	movsd
	movsd
	movsd
	mov	edi, ecx
	lea	esi, DWORD PTR $T4[ebp]
	movsd
	movsd
	movsd

; 148  : 		this->value[1] = col_type(m[1]);

	lea	esi, DWORD PTR [eax+12]
	lea	edi, DWORD PTR $T3[ebp]
	movsd
	movsd
	movsd
	lea	edi, DWORD PTR [ecx+12]
	lea	esi, DWORD PTR $T3[ebp]
	movsd
	movsd
	movsd

; 149  : 		this->value[2] = col_type(m[2]);

	lea	esi, DWORD PTR [eax+24]

; 150  : 		this->value[3] = col_type(0);
; 151  : 	}

	mov	eax, ecx
	lea	edi, DWORD PTR $T2[ebp]
	movsd
	movsd
	movsd
	lea	edi, DWORD PTR [ecx+24]
	lea	esi, DWORD PTR $T2[ebp]
	movsd
	movsd
	movsd
	and	DWORD PTR $T1[ebp], 0
	lea	edi, DWORD PTR [ecx+36]
	and	DWORD PTR $T1[ebp+4], 0
	lea	esi, DWORD PTR $T1[ebp]
	and	DWORD PTR $T1[ebp+8], 0
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x3@M$0A@@glm@@QAE@ABU?$tmat3x3@M$0A@@1@@Z ENDP ; glm::tmat4x3<float,0>::tmat4x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$0A@@glm@@QAE@ABU?$tmat2x2@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
$T4 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat4x3@M$0A@@glm@@QAE@ABU?$tmat2x2@M$0A@@1@@Z PROC ; glm::tmat4x3<float,0>::tmat4x3<float,0>, COMDAT
; _this$ = ecx

; 137  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	lea	eax, DWORD PTR [ecx+8]
	push	3
	pop	edx
$LL4@tmat4x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat4x3

; 138  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	and	DWORD PTR $T4[ebp+8], 0
	push	esi
	push	edi
	movss	xmm0, DWORD PTR [eax]
	lea	esi, DWORD PTR $T4[ebp]
	movss	DWORD PTR $T4[ebp], xmm0
	mov	edi, ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T4[ebp+4], xmm0
	movsd
	movsd
	movsd

; 139  : 		this->value[1] = col_type(m[1], 0);

	movss	xmm0, DWORD PTR [eax+8]
	lea	edi, DWORD PTR [ecx+12]
	and	DWORD PTR $T3[ebp+8], 0
	lea	esi, DWORD PTR $T3[ebp]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+12]

; 140  : 		this->value[2] = col_type(0, 0, 1);
; 141  : 		this->value[3] = col_type(0);
; 142  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T3[ebp+4], xmm0
	movsd
	movsd
	movsd
	and	DWORD PTR $T2[ebp], 0
	lea	edi, DWORD PTR [ecx+24]
	and	DWORD PTR $T2[ebp+4], 0
	lea	esi, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T2[ebp+8], 1065353216	; 3f800000H
	movsd
	movsd
	movsd
	and	DWORD PTR $T1[ebp], 0
	lea	edi, DWORD PTR [ecx+36]
	and	DWORD PTR $T1[ebp+4], 0
	lea	esi, DWORD PTR $T1[ebp]
	and	DWORD PTR $T1[ebp+8], 0
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x3@M$0A@@glm@@QAE@ABU?$tmat2x2@M$0A@@1@@Z ENDP ; glm::tmat4x3<float,0>::tmat4x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$0A@@glm@@QAE@ABU?$tvec3@M$0A@@1@000@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
_v3$ = 20						; size = 4
??0?$tmat4x3@M$0A@@glm@@QAE@ABU?$tvec3@M$0A@@1@000@Z PROC ; glm::tmat4x3<float,0>::tmat4x3<float,0>, COMDAT
; _this$ = ecx

; 78   : 	{

	push	ebp
	mov	ebp, esp
	push	3
	pop	edx
	lea	eax, DWORD PTR [ecx+8]
$LL4@tmat4x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat4x3

; 79   : 		this->value[0] = v0;

	push	esi
	mov	esi, DWORD PTR _v0$[ebp]

; 80   : 		this->value[1] = v1;
; 81   : 		this->value[2] = v2;
; 82   : 		this->value[3] = v3;
; 83   : 	}

	mov	eax, ecx
	push	edi
	mov	edi, ecx
	movsd
	movsd
	movsd
	mov	esi, DWORD PTR _v1$[ebp]
	lea	edi, DWORD PTR [ecx+12]
	movsd
	movsd
	movsd
	mov	esi, DWORD PTR _v2$[ebp]
	lea	edi, DWORD PTR [ecx+24]
	movsd
	movsd
	movsd
	mov	esi, DWORD PTR _v3$[ebp]
	lea	edi, DWORD PTR [ecx+36]
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	16					; 00000010H
??0?$tmat4x3@M$0A@@glm@@QAE@ABU?$tvec3@M$0A@@1@000@Z ENDP ; glm::tmat4x3<float,0>::tmat4x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$0A@@glm@@QAE@ABM00000000000@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
$T4 = -12						; size = 12
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_z0$ = 16						; size = 4
_x1$ = 20						; size = 4
_y1$ = 24						; size = 4
_z1$ = 28						; size = 4
_x2$ = 32						; size = 4
_y2$ = 36						; size = 4
_z2$ = 40						; size = 4
_x3$ = 44						; size = 4
_y3$ = 48						; size = 4
_z3$ = 52						; size = 4
??0?$tmat4x3@M$0A@@glm@@QAE@ABM00000000000@Z PROC	; glm::tmat4x3<float,0>::tmat4x3<float,0>, COMDAT
; _this$ = ecx

; 63   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	lea	eax, DWORD PTR [ecx+8]
	push	3
	pop	edx
$LL4@tmat4x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat4x3

; 64   : 		this->value[0] = col_type(x0, y0, z0);

	mov	eax, DWORD PTR _x0$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T4[ebp]
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _y0$[ebp]
	movss	DWORD PTR $T4[ebp], xmm0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _z0$[ebp]
	movss	DWORD PTR $T4[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax]

; 65   : 		this->value[1] = col_type(x1, y1, z1);

	mov	eax, DWORD PTR _x1$[ebp]
	movss	DWORD PTR $T4[ebp+8], xmm0
	movsd
	movsd
	movsd
	movss	xmm0, DWORD PTR [eax]
	lea	edi, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _y1$[ebp]
	lea	esi, DWORD PTR $T3[ebp]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _z1$[ebp]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax]

; 66   : 		this->value[2] = col_type(x2, y2, z2);

	mov	eax, DWORD PTR _x2$[ebp]
	movss	DWORD PTR $T3[ebp+8], xmm0
	movsd
	movsd
	movsd
	movss	xmm0, DWORD PTR [eax]
	lea	edi, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR _y2$[ebp]
	lea	esi, DWORD PTR $T2[ebp]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _z2$[ebp]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax]

; 67   : 		this->value[3] = col_type(x3, y3, z3);

	mov	eax, DWORD PTR _x3$[ebp]
	movss	DWORD PTR $T2[ebp+8], xmm0
	movsd
	movsd
	movsd
	movss	xmm0, DWORD PTR [eax]
	lea	edi, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR _y3$[ebp]
	lea	esi, DWORD PTR $T1[ebp]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _z3$[ebp]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax]

; 68   : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+8], xmm0
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	48					; 00000030H
??0?$tmat4x3@M$0A@@glm@@QAE@ABM00000000000@Z ENDP	; glm::tmat4x3<float,0>::tmat4x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$0A@@glm@@QAE@ABM@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
$T4 = -12						; size = 12
_s$ = 8							; size = 4
??0?$tmat4x3@M$0A@@glm@@QAE@ABM@Z PROC			; glm::tmat4x3<float,0>::tmat4x3<float,0>, COMDAT
; _this$ = ecx

; 48   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	lea	eax, DWORD PTR [ecx+8]
	push	3
	pop	edx
$LL4@tmat4x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat4x3

; 49   : 		this->value[0] = col_type(s, 0, 0);

	and	DWORD PTR $T4[ebp+4], 0
	and	DWORD PTR $T4[ebp+8], 0
	mov	eax, DWORD PTR _s$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T4[ebp]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T4[ebp], xmm0
	movsd
	movsd
	movsd

; 50   : 		this->value[1] = col_type(0, s, 0);

	movss	xmm0, DWORD PTR [eax]
	lea	edi, DWORD PTR [ecx+12]
	and	DWORD PTR $T3[ebp], 0
	lea	esi, DWORD PTR $T3[ebp]
	and	DWORD PTR $T3[ebp+8], 0
	movss	DWORD PTR $T3[ebp+4], xmm0
	movsd
	movsd
	movsd

; 51   : 		this->value[2] = col_type(0, 0, s);

	movss	xmm0, DWORD PTR [eax]
	lea	edi, DWORD PTR [ecx+24]
	and	DWORD PTR $T2[ebp], 0
	lea	esi, DWORD PTR $T2[ebp]
	and	DWORD PTR $T2[ebp+4], 0

; 52   : 		this->value[3] = col_type(0, 0, 0);
; 53   : 	}

	mov	eax, ecx
	movss	DWORD PTR $T2[ebp+8], xmm0
	movsd
	movsd
	movsd
	and	DWORD PTR $T1[ebp], 0
	lea	edi, DWORD PTR [ecx+36]
	and	DWORD PTR $T1[ebp+4], 0
	lea	esi, DWORD PTR $T1[ebp]
	and	DWORD PTR $T1[ebp+8], 0
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x3@M$0A@@glm@@QAE@ABM@Z ENDP			; glm::tmat4x3<float,0>::tmat4x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat4x3@M$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat4x3<float,0>::tmat4x3<float,0>, COMDAT
; _this$ = ecx

; 44   : 	{}

	push	3
	pop	edx
	lea	eax, DWORD PTR [ecx+8]
$LL4@tmat4x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat4x3
	mov	eax, ecx
	ret	4
??0?$tmat4x3@M$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat4x3<float,0>::tmat4x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tmat4x3@M$0A@@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tmat4x3@M$0A@@glm@@QAE@ABU01@@Z PROC		; glm::tmat4x3<float,0>::tmat4x3<float,0>, COMDAT
; _this$ = ecx

; 223  : template struct tmat4x3<float32, highp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	12					; 0000000cH
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tmat4x3@M$0A@@glm@@QAE@ABU01@@Z ENDP		; glm::tmat4x3<float,0>::tmat4x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
$T4 = -12						; size = 12
??0?$tmat4x3@M$0A@@glm@@QAE@XZ PROC			; glm::tmat4x3<float,0>::tmat4x3<float,0>, COMDAT
; _this$ = ecx

; 11   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	lea	eax, DWORD PTR [ecx+8]
	push	3
	pop	edx
$LL4@tmat4x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat4x3

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0, 0);

	and	DWORD PTR $T4[ebp+4], 0

; 14   : 				this->value[1] = col_type(0, 1, 0);
; 15   : 				this->value[2] = col_type(0, 0, 1);
; 16   : 				this->value[3] = col_type(0, 0, 0);
; 17   : #			endif
; 18   : 		}

	mov	eax, ecx
	and	DWORD PTR $T4[ebp+8], 0
	push	esi
	push	edi
	mov	DWORD PTR $T4[ebp], 1065353216		; 3f800000H
	lea	esi, DWORD PTR $T4[ebp]
	mov	edi, ecx
	movsd
	movsd
	movsd
	and	DWORD PTR $T3[ebp], 0
	lea	edi, DWORD PTR [ecx+12]
	and	DWORD PTR $T3[ebp+8], 0
	lea	esi, DWORD PTR $T3[ebp]
	mov	DWORD PTR $T3[ebp+4], 1065353216	; 3f800000H
	movsd
	movsd
	movsd
	and	DWORD PTR $T2[ebp], 0
	lea	edi, DWORD PTR [ecx+24]
	and	DWORD PTR $T2[ebp+4], 0
	lea	esi, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T2[ebp+8], 1065353216	; 3f800000H
	movsd
	movsd
	movsd
	and	DWORD PTR $T1[ebp], 0
	lea	edi, DWORD PTR [ecx+36]
	and	DWORD PTR $T1[ebp+4], 0
	lea	esi, DWORD PTR $T1[ebp]
	and	DWORD PTR $T1[ebp+8], 0
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$tmat4x3@M$0A@@glm@@QAE@XZ ENDP			; glm::tmat4x3<float,0>::tmat4x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??F?$tmat4x3@N$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat4x3@N$00@glm@@QAE?AU01@H@Z PROC		; glm::tmat4x3<double,1>::operator--, COMDAT
; _this$ = ecx

; 346  : 	{

	push	ebp
	mov	ebp, esp

; 347  : 		tmat4x3<T, P> Result(*this);
; 348  : 		--*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	mov	edx, ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	movups	xmm0, XMMWORD PTR [edx]
	push	24					; 00000018H
	pop	ecx
	subpd	xmm0, xmm1
	mov	esi, edx
	mov	edi, eax
	rep movsd
	movups	XMMWORD PTR [edx], xmm0
	pop	edi
	movups	xmm0, XMMWORD PTR [edx+16]
	pop	esi
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+16], xmm0
	movups	xmm0, XMMWORD PTR [edx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+32], xmm0
	movups	xmm0, XMMWORD PTR [edx+48]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+48], xmm0
	movups	xmm0, XMMWORD PTR [edx+64]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+64], xmm0
	movups	xmm0, XMMWORD PTR [edx+80]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+80], xmm0

; 349  : 		return Result;
; 350  : 	}

	pop	ebp
	ret	8
??F?$tmat4x3@N$00@glm@@QAE?AU01@H@Z ENDP		; glm::tmat4x3<double,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??E?$tmat4x3@N$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat4x3@N$00@glm@@QAE?AU01@H@Z PROC		; glm::tmat4x3<double,1>::operator++, COMDAT
; _this$ = ecx

; 338  : 	{

	push	ebp
	mov	ebp, esp

; 339  : 		tmat4x3<T, P> Result(*this);
; 340  : 		++*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	mov	edx, ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	movups	xmm0, XMMWORD PTR [edx]
	push	24					; 00000018H
	pop	ecx
	addpd	xmm0, xmm1
	mov	esi, edx
	mov	edi, eax
	rep movsd
	movups	XMMWORD PTR [edx], xmm0
	pop	edi
	movups	xmm0, XMMWORD PTR [edx+16]
	pop	esi
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+16], xmm0
	movups	xmm0, XMMWORD PTR [edx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+32], xmm0
	movups	xmm0, XMMWORD PTR [edx+48]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+48], xmm0
	movups	xmm0, XMMWORD PTR [edx+64]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+64], xmm0
	movups	xmm0, XMMWORD PTR [edx+80]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+80], xmm0

; 341  : 		return Result;
; 342  : 	}

	pop	ebp
	ret	8
??E?$tmat4x3@N$00@glm@@QAE?AU01@H@Z ENDP		; glm::tmat4x3<double,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??F?$tmat4x3@N$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat4x3@N$00@glm@@QAEAAU01@XZ PROC			; glm::tmat4x3<double,1>::operator--, COMDAT
; _this$ = ecx

; 329  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 330  : 		--this->value[1];
; 331  : 		--this->value[2];
; 332  : 		--this->value[3];
; 333  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	xmm0, XMMWORD PTR [ecx+64]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	xmm0, XMMWORD PTR [ecx+80]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+80], xmm0

; 334  : 	}

	ret	0
??F?$tmat4x3@N$00@glm@@QAEAAU01@XZ ENDP			; glm::tmat4x3<double,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??E?$tmat4x3@N$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat4x3@N$00@glm@@QAEAAU01@XZ PROC			; glm::tmat4x3<double,1>::operator++, COMDAT
; _this$ = ecx

; 319  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 320  : 		++this->value[1];
; 321  : 		++this->value[2];
; 322  : 		++this->value[3];
; 323  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	xmm0, XMMWORD PTR [ecx+64]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	xmm0, XMMWORD PTR [ecx+80]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+80], xmm0

; 324  : 	}

	ret	0
??E?$tmat4x3@N$00@glm@@QAEAAU01@XZ ENDP			; glm::tmat4x3<double,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tmat4x3@N$00@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tmat4x3@N$00@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tmat4x3<double,1>::operator=, COMDAT
; _this$ = ecx

; 221  : template struct tmat4x3<float64, mediump>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	24					; 00000018H
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tmat4x3@N$00@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tmat4x3<double,1>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??A?$tmat4x3@N$00@glm@@QBEABU?$tvec3@N$00@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat4x3@N$00@glm@@QBEABU?$tvec3@N$00@1@H@Z PROC	; glm::tmat4x3<double,1>::operator[], COMDAT
; _this$ = ecx

; 218  : 	{

	push	ebp
	mov	ebp, esp

; 219  : 		assert(i < this->length());
; 220  : 		return this->value[i];

	imul	eax, DWORD PTR _i$[ebp], 24
	add	eax, ecx

; 221  : 	}

	pop	ebp
	ret	4
??A?$tmat4x3@N$00@glm@@QBEABU?$tvec3@N$00@1@H@Z ENDP	; glm::tmat4x3<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??A?$tmat4x3@N$00@glm@@QAEAAU?$tvec3@N$00@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat4x3@N$00@glm@@QAEAAU?$tvec3@N$00@1@H@Z PROC	; glm::tmat4x3<double,1>::operator[], COMDAT
; _this$ = ecx

; 211  : 	{

	push	ebp
	mov	ebp, esp

; 212  : 		assert(i < this->length());
; 213  : 		return this->value[i];

	imul	eax, DWORD PTR _i$[ebp], 24
	add	eax, ecx

; 214  : 	}

	pop	ebp
	ret	4
??A?$tmat4x3@N$00@glm@@QAEAAU?$tvec3@N$00@1@H@Z ENDP	; glm::tmat4x3<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.hpp
;	COMDAT ?length@?$tmat4x3@N$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat4x3@N$00@glm@@SAHXZ PROC			; glm::tmat4x3<double,1>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	push	4
	pop	eax
	ret	0
?length@?$tmat4x3@N$00@glm@@SAHXZ ENDP			; glm::tmat4x3<double,1>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$00@glm@@QAE@ABU?$tmat3x4@N$00@1@@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
$T3 = -24						; size = 24
$T4 = -24						; size = 24
_m$ = 8							; size = 4
??0?$tmat4x3@N$00@glm@@QAE@ABU?$tmat3x4@N$00@1@@Z PROC	; glm::tmat4x3<double,1>::tmat4x3<double,1>, COMDAT
; _this$ = ecx

; 200  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xorps	xmm1, xmm1
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	3
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat4x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm1
	movups	XMMWORD PTR [eax-16], xmm1
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat4x3

; 201  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T4[ebp]
	push	6
	pop	edx
	mov	edi, ebx
	mov	ecx, edx
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR $T4[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR $T4[ebp+16], xmm0
	rep movsd

; 202  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+32]
	lea	edi, DWORD PTR [ebx+24]
	mov	ecx, edx
	lea	esi, DWORD PTR $T3[ebp]
	movups	XMMWORD PTR $T3[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+48]
	movsd	QWORD PTR $T3[ebp+16], xmm0
	rep movsd

; 203  : 		this->value[2] = col_type(m[2]);

	movups	xmm0, XMMWORD PTR [eax+64]
	lea	edi, DWORD PTR [ebx+48]
	mov	ecx, edx
	lea	esi, DWORD PTR $T2[ebp]
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+80]

; 204  : 		this->value[3] = col_type(0);
; 205  : 	}

	mov	eax, ebx
	movsd	QWORD PTR $T2[ebp+16], xmm0
	xorps	xmm0, xmm0
	rep movsd
	lea	edi, DWORD PTR [ebx+72]
	movsd	QWORD PTR $T1[ebp+16], xmm1
	mov	ecx, edx
	lea	esi, DWORD PTR $T1[ebp]
	movupd	XMMWORD PTR $T1[ebp], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x3@N$00@glm@@QAE@ABU?$tmat3x4@N$00@1@@Z ENDP	; glm::tmat4x3<double,1>::tmat4x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$00@glm@@QAE@ABU?$tmat4x2@N$00@1@@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
$T3 = -24						; size = 24
$T4 = -24						; size = 24
_m$ = 8							; size = 4
??0?$tmat4x3@N$00@glm@@QAE@ABU?$tmat4x2@N$00@1@@Z PROC	; glm::tmat4x3<double,1>::tmat4x3<double,1>, COMDAT
; _this$ = ecx

; 191  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xorps	xmm1, xmm1
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	3
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat4x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm1
	movups	XMMWORD PTR [eax-16], xmm1
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat4x3

; 192  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T4[ebp]
	push	6
	pop	edx
	movsd	QWORD PTR $T4[ebp+16], xmm1
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]
	mov	ecx, edx
	movups	XMMWORD PTR $T4[ebp], xmm0
	rep movsd

; 193  : 		this->value[1] = col_type(m[1], 0);

	movups	xmm0, XMMWORD PTR [eax+16]
	lea	edi, DWORD PTR [ebx+24]
	mov	ecx, edx
	movsd	QWORD PTR $T3[ebp+16], xmm1
	lea	esi, DWORD PTR $T3[ebp]
	movups	XMMWORD PTR $T3[ebp], xmm0
	rep movsd

; 194  : 		this->value[2] = col_type(m[2], 1);

	movups	xmm0, XMMWORD PTR [eax+32]
	lea	edi, DWORD PTR [ebx+48]
	mov	ecx, edx
	lea	esi, DWORD PTR $T2[ebp]
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR $T2[ebp+16], xmm0
	rep movsd

; 195  : 		this->value[3] = col_type(m[3], 0);

	movups	xmm0, XMMWORD PTR [eax+48]
	lea	edi, DWORD PTR [ebx+72]
	mov	ecx, edx
	lea	esi, DWORD PTR $T1[ebp]
	movsd	QWORD PTR $T1[ebp+16], xmm1
	movups	XMMWORD PTR $T1[ebp], xmm0

; 196  : 	}

	mov	eax, ebx
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x3@N$00@glm@@QAE@ABU?$tmat4x2@N$00@1@@Z ENDP	; glm::tmat4x3<double,1>::tmat4x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$00@glm@@QAE@ABU?$tmat2x4@N$00@1@@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
$T3 = -24						; size = 24
$T4 = -24						; size = 24
_m$ = 8							; size = 4
??0?$tmat4x3@N$00@glm@@QAE@ABU?$tmat2x4@N$00@1@@Z PROC	; glm::tmat4x3<double,1>::tmat4x3<double,1>, COMDAT
; _this$ = ecx

; 182  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xorps	xmm1, xmm1
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	3
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat4x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm1
	movups	XMMWORD PTR [eax-16], xmm1
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat4x3

; 183  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T4[ebp]
	push	6
	pop	edx
	mov	edi, ebx
	mov	ecx, edx
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR $T4[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR $T4[ebp+16], xmm0
	rep movsd

; 184  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+32]
	lea	edi, DWORD PTR [ebx+24]
	mov	ecx, edx
	lea	esi, DWORD PTR $T3[ebp]
	movups	XMMWORD PTR $T3[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+48]

; 185  : 		this->value[2] = col_type(0, 0, 1);
; 186  : 		this->value[3] = col_type(0);
; 187  : 	}

	mov	eax, ebx
	movsd	QWORD PTR $T3[ebp+16], xmm0
	xorps	xmm0, xmm0
	rep movsd
	movupd	XMMWORD PTR $T2[ebp], xmm0
	lea	edi, DWORD PTR [ebx+48]
	mov	ecx, edx
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	lea	esi, DWORD PTR $T2[ebp]
	movsd	QWORD PTR $T2[ebp+16], xmm0
	xorps	xmm0, xmm0
	rep movsd
	lea	edi, DWORD PTR [ebx+72]
	movsd	QWORD PTR $T1[ebp+16], xmm1
	mov	ecx, edx
	lea	esi, DWORD PTR $T1[ebp]
	movupd	XMMWORD PTR $T1[ebp], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x3@N$00@glm@@QAE@ABU?$tmat2x4@N$00@1@@Z ENDP	; glm::tmat4x3<double,1>::tmat4x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$00@glm@@QAE@ABU?$tmat3x2@N$00@1@@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
$T3 = -24						; size = 24
$T4 = -24						; size = 24
_m$ = 8							; size = 4
??0?$tmat4x3@N$00@glm@@QAE@ABU?$tmat3x2@N$00@1@@Z PROC	; glm::tmat4x3<double,1>::tmat4x3<double,1>, COMDAT
; _this$ = ecx

; 173  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xorps	xmm1, xmm1
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	3
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat4x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm1
	movups	XMMWORD PTR [eax-16], xmm1
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat4x3

; 174  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T4[ebp]
	push	6
	pop	edx
	movsd	QWORD PTR $T4[ebp+16], xmm1
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]
	mov	ecx, edx
	movups	XMMWORD PTR $T4[ebp], xmm0
	rep movsd

; 175  : 		this->value[1] = col_type(m[1], 0);

	movups	xmm0, XMMWORD PTR [eax+16]
	lea	edi, DWORD PTR [ebx+24]
	mov	ecx, edx
	movsd	QWORD PTR $T3[ebp+16], xmm1
	lea	esi, DWORD PTR $T3[ebp]
	movups	XMMWORD PTR $T3[ebp], xmm0
	rep movsd

; 176  : 		this->value[2] = col_type(m[2], 1);

	movups	xmm0, XMMWORD PTR [eax+32]
	lea	edi, DWORD PTR [ebx+48]
	mov	ecx, edx
	lea	esi, DWORD PTR $T2[ebp]

; 177  : 		this->value[3] = col_type(0);
; 178  : 	}

	mov	eax, ebx
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR $T2[ebp+16], xmm0
	xorps	xmm0, xmm0
	rep movsd
	lea	edi, DWORD PTR [ebx+72]
	movsd	QWORD PTR $T1[ebp+16], xmm1
	mov	ecx, edx
	lea	esi, DWORD PTR $T1[ebp]
	movupd	XMMWORD PTR $T1[ebp], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x3@N$00@glm@@QAE@ABU?$tmat3x2@N$00@1@@Z ENDP	; glm::tmat4x3<double,1>::tmat4x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$00@glm@@QAE@ABU?$tmat2x3@N$00@1@@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
$T3 = -24						; size = 24
$T4 = -24						; size = 24
_m$ = 8							; size = 4
??0?$tmat4x3@N$00@glm@@QAE@ABU?$tmat2x3@N$00@1@@Z PROC	; glm::tmat4x3<double,1>::tmat4x3<double,1>, COMDAT
; _this$ = ecx

; 164  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xorps	xmm1, xmm1
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	3
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat4x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm1
	movups	XMMWORD PTR [eax-16], xmm1
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat4x3

; 165  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	lea	edi, DWORD PTR $T4[ebp]
	push	6
	pop	edx
	mov	esi, eax
	mov	ecx, edx
	rep movsd
	mov	edi, ebx
	lea	esi, DWORD PTR $T4[ebp]
	mov	ecx, edx
	xorps	xmm0, xmm0
	rep movsd

; 166  : 		this->value[1] = col_type(m[1]);

	lea	esi, DWORD PTR [eax+24]
	mov	ecx, edx
	lea	edi, DWORD PTR $T3[ebp]

; 167  : 		this->value[2] = col_type(0, 0, 1);
; 168  : 		this->value[3] = col_type(0);
; 169  : 	}

	mov	eax, ebx
	rep movsd
	lea	edi, DWORD PTR [ebx+24]
	mov	ecx, edx
	lea	esi, DWORD PTR $T3[ebp]
	rep movsd
	movupd	XMMWORD PTR $T2[ebp], xmm0
	lea	edi, DWORD PTR [ebx+48]
	mov	ecx, edx
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	lea	esi, DWORD PTR $T2[ebp]
	movsd	QWORD PTR $T2[ebp+16], xmm0
	xorps	xmm0, xmm0
	rep movsd
	lea	edi, DWORD PTR [ebx+72]
	movsd	QWORD PTR $T1[ebp+16], xmm1
	mov	ecx, edx
	lea	esi, DWORD PTR $T1[ebp]
	movupd	XMMWORD PTR $T1[ebp], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x3@N$00@glm@@QAE@ABU?$tmat2x3@N$00@1@@Z ENDP	; glm::tmat4x3<double,1>::tmat4x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$00@glm@@QAE@ABU?$tmat4x4@N$00@1@@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
$T3 = -24						; size = 24
$T4 = -24						; size = 24
_m$ = 8							; size = 4
??0?$tmat4x3@N$00@glm@@QAE@ABU?$tmat4x4@N$00@1@@Z PROC	; glm::tmat4x3<double,1>::tmat4x3<double,1>, COMDAT
; _this$ = ecx

; 155  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xorps	xmm0, xmm0
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	3
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat4x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm0
	movups	XMMWORD PTR [eax-16], xmm0
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat4x3

; 156  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T4[ebp]
	push	6
	pop	edx
	mov	edi, ebx
	mov	ecx, edx
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR $T4[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR $T4[ebp+16], xmm0
	rep movsd

; 157  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+32]
	lea	edi, DWORD PTR [ebx+24]
	mov	ecx, edx
	lea	esi, DWORD PTR $T3[ebp]
	movups	XMMWORD PTR $T3[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+48]
	movsd	QWORD PTR $T3[ebp+16], xmm0
	rep movsd

; 158  : 		this->value[2] = col_type(m[2]);

	movups	xmm0, XMMWORD PTR [eax+64]
	lea	edi, DWORD PTR [ebx+48]
	mov	ecx, edx
	lea	esi, DWORD PTR $T2[ebp]
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+80]
	movsd	QWORD PTR $T2[ebp+16], xmm0
	rep movsd

; 159  : 		this->value[3] = col_type(m[3]);

	movups	xmm0, XMMWORD PTR [eax+96]
	lea	edi, DWORD PTR [ebx+72]
	mov	ecx, edx
	lea	esi, DWORD PTR $T1[ebp]
	movups	XMMWORD PTR $T1[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+112]

; 160  : 	}

	mov	eax, ebx
	movsd	QWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x3@N$00@glm@@QAE@ABU?$tmat4x4@N$00@1@@Z ENDP	; glm::tmat4x3<double,1>::tmat4x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$00@glm@@QAE@ABU?$tmat3x3@N$00@1@@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
$T3 = -24						; size = 24
$T4 = -24						; size = 24
_m$ = 8							; size = 4
??0?$tmat4x3@N$00@glm@@QAE@ABU?$tmat3x3@N$00@1@@Z PROC	; glm::tmat4x3<double,1>::tmat4x3<double,1>, COMDAT
; _this$ = ecx

; 146  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xorps	xmm1, xmm1
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	3
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat4x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm1
	movups	XMMWORD PTR [eax-16], xmm1
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat4x3

; 147  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	lea	edi, DWORD PTR $T4[ebp]
	push	6
	pop	edx
	mov	esi, eax
	mov	ecx, edx
	rep movsd
	mov	edi, ebx
	lea	esi, DWORD PTR $T4[ebp]
	mov	ecx, edx
	xorps	xmm0, xmm0
	rep movsd

; 148  : 		this->value[1] = col_type(m[1]);

	lea	esi, DWORD PTR [eax+24]
	mov	ecx, edx
	lea	edi, DWORD PTR $T3[ebp]
	rep movsd
	lea	edi, DWORD PTR [ebx+24]
	mov	ecx, edx
	lea	esi, DWORD PTR $T3[ebp]
	rep movsd

; 149  : 		this->value[2] = col_type(m[2]);

	lea	esi, DWORD PTR [eax+48]
	mov	ecx, edx
	lea	edi, DWORD PTR $T2[ebp]

; 150  : 		this->value[3] = col_type(0);
; 151  : 	}

	mov	eax, ebx
	rep movsd
	lea	edi, DWORD PTR [ebx+48]
	mov	ecx, edx
	lea	esi, DWORD PTR $T2[ebp]
	rep movsd
	lea	edi, DWORD PTR [ebx+72]
	movsd	QWORD PTR $T1[ebp+16], xmm1
	mov	ecx, edx
	lea	esi, DWORD PTR $T1[ebp]
	movupd	XMMWORD PTR $T1[ebp], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x3@N$00@glm@@QAE@ABU?$tmat3x3@N$00@1@@Z ENDP	; glm::tmat4x3<double,1>::tmat4x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$00@glm@@QAE@ABU?$tmat2x2@N$00@1@@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
$T3 = -24						; size = 24
$T4 = -24						; size = 24
_m$ = 8							; size = 4
??0?$tmat4x3@N$00@glm@@QAE@ABU?$tmat2x2@N$00@1@@Z PROC	; glm::tmat4x3<double,1>::tmat4x3<double,1>, COMDAT
; _this$ = ecx

; 137  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xorps	xmm1, xmm1
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	3
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat4x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm1
	movups	XMMWORD PTR [eax-16], xmm1
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat4x3

; 138  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T4[ebp]
	push	6
	pop	edx
	movsd	QWORD PTR $T4[ebp+16], xmm1
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]
	mov	ecx, edx
	movups	XMMWORD PTR $T4[ebp], xmm0
	rep movsd

; 139  : 		this->value[1] = col_type(m[1], 0);

	movups	xmm0, XMMWORD PTR [eax+16]
	lea	edi, DWORD PTR [ebx+24]
	mov	ecx, edx
	movsd	QWORD PTR $T3[ebp+16], xmm1
	lea	esi, DWORD PTR $T3[ebp]
	movups	XMMWORD PTR $T3[ebp], xmm0

; 140  : 		this->value[2] = col_type(0, 0, 1);
; 141  : 		this->value[3] = col_type(0);
; 142  : 	}

	mov	eax, ebx
	rep movsd
	xorps	xmm0, xmm0
	lea	edi, DWORD PTR [ebx+48]
	movupd	XMMWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	mov	ecx, edx
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR $T2[ebp+16], xmm0
	xorps	xmm0, xmm0
	rep movsd
	lea	edi, DWORD PTR [ebx+72]
	movsd	QWORD PTR $T1[ebp+16], xmm1
	mov	ecx, edx
	lea	esi, DWORD PTR $T1[ebp]
	movupd	XMMWORD PTR $T1[ebp], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x3@N$00@glm@@QAE@ABU?$tmat2x2@N$00@1@@Z ENDP	; glm::tmat4x3<double,1>::tmat4x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$00@glm@@QAE@ABU?$tvec3@N$00@1@000@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
_v3$ = 20						; size = 4
??0?$tmat4x3@N$00@glm@@QAE@ABU?$tvec3@N$00@1@000@Z PROC	; glm::tmat4x3<double,1>::tmat4x3<double,1>, COMDAT
; _this$ = ecx

; 78   : 	{

	push	ebp
	mov	ebp, esp
	mov	edx, ecx
	xorps	xmm0, xmm0
	push	3
	pop	ecx
	lea	eax, DWORD PTR [edx+16]
$LL4@tmat4x3:
	dec	ecx
	movsd	QWORD PTR [eax], xmm0
	movups	XMMWORD PTR [eax-16], xmm0
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat4x3

; 79   : 		this->value[0] = v0;

	push	esi
	mov	esi, DWORD PTR _v0$[ebp]
	push	edi
	push	6
	pop	eax
	mov	ecx, eax
	mov	edi, edx
	rep movsd

; 80   : 		this->value[1] = v1;

	mov	esi, DWORD PTR _v1$[ebp]
	lea	edi, DWORD PTR [edx+24]
	mov	ecx, eax
	rep movsd

; 81   : 		this->value[2] = v2;

	mov	esi, DWORD PTR _v2$[ebp]
	lea	edi, DWORD PTR [edx+48]
	mov	ecx, eax
	rep movsd

; 82   : 		this->value[3] = v3;

	mov	esi, DWORD PTR _v3$[ebp]
	lea	edi, DWORD PTR [edx+72]
	mov	ecx, eax

; 83   : 	}

	mov	eax, edx
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	16					; 00000010H
??0?$tmat4x3@N$00@glm@@QAE@ABU?$tvec3@N$00@1@000@Z ENDP	; glm::tmat4x3<double,1>::tmat4x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$00@glm@@QAE@ABN00000000000@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
$T3 = -24						; size = 24
$T4 = -24						; size = 24
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_z0$ = 16						; size = 4
_x1$ = 20						; size = 4
_y1$ = 24						; size = 4
_z1$ = 28						; size = 4
_x2$ = 32						; size = 4
_y2$ = 36						; size = 4
_z2$ = 40						; size = 4
_x3$ = 44						; size = 4
_y3$ = 48						; size = 4
_z3$ = 52						; size = 4
??0?$tmat4x3@N$00@glm@@QAE@ABN00000000000@Z PROC	; glm::tmat4x3<double,1>::tmat4x3<double,1>, COMDAT
; _this$ = ecx

; 63   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xorps	xmm0, xmm0
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	3
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat4x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm0
	movups	XMMWORD PTR [eax-16], xmm0
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat4x3

; 64   : 		this->value[0] = col_type(x0, y0, z0);

	mov	eax, DWORD PTR _x0$[ebp]
	lea	esi, DWORD PTR $T4[ebp]
	push	6
	pop	edx
	mov	edi, ebx
	mov	ecx, edx
	movsd	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR _y0$[ebp]
	movsd	QWORD PTR $T4[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR _z0$[ebp]
	movsd	QWORD PTR $T4[ebp+8], xmm0
	movsd	xmm0, QWORD PTR [eax]

; 65   : 		this->value[1] = col_type(x1, y1, z1);

	mov	eax, DWORD PTR _x1$[ebp]
	movsd	QWORD PTR $T4[ebp+16], xmm0
	rep movsd
	movsd	xmm0, QWORD PTR [eax]
	lea	edi, DWORD PTR [ebx+24]
	mov	eax, DWORD PTR _y1$[ebp]
	mov	ecx, edx
	movsd	QWORD PTR $T3[ebp], xmm0
	lea	esi, DWORD PTR $T3[ebp]
	movsd	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR _z1$[ebp]
	movsd	QWORD PTR $T3[ebp+8], xmm0
	movsd	xmm0, QWORD PTR [eax]

; 66   : 		this->value[2] = col_type(x2, y2, z2);

	mov	eax, DWORD PTR _x2$[ebp]
	movsd	QWORD PTR $T3[ebp+16], xmm0
	rep movsd
	movsd	xmm0, QWORD PTR [eax]
	lea	edi, DWORD PTR [ebx+48]
	mov	eax, DWORD PTR _y2$[ebp]
	mov	ecx, edx
	movsd	QWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	movsd	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR _z2$[ebp]
	movsd	QWORD PTR $T2[ebp+8], xmm0
	movsd	xmm0, QWORD PTR [eax]

; 67   : 		this->value[3] = col_type(x3, y3, z3);

	mov	eax, DWORD PTR _x3$[ebp]
	movsd	QWORD PTR $T2[ebp+16], xmm0
	rep movsd
	movsd	xmm0, QWORD PTR [eax]
	lea	edi, DWORD PTR [ebx+72]
	mov	eax, DWORD PTR _y3$[ebp]
	mov	ecx, edx
	movsd	QWORD PTR $T1[ebp], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	movsd	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR _z3$[ebp]
	movsd	QWORD PTR $T1[ebp+8], xmm0
	movsd	xmm0, QWORD PTR [eax]

; 68   : 	}

	mov	eax, ebx
	movsd	QWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	48					; 00000030H
??0?$tmat4x3@N$00@glm@@QAE@ABN00000000000@Z ENDP	; glm::tmat4x3<double,1>::tmat4x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$00@glm@@QAE@ABN@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
$T3 = -24						; size = 24
$T4 = -24						; size = 24
_s$ = 8							; size = 4
??0?$tmat4x3@N$00@glm@@QAE@ABN@Z PROC			; glm::tmat4x3<double,1>::tmat4x3<double,1>, COMDAT
; _this$ = ecx

; 48   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xorps	xmm1, xmm1
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	3
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat4x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm1
	movups	XMMWORD PTR [eax-16], xmm1
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat4x3

; 49   : 		this->value[0] = col_type(s, 0, 0);

	mov	eax, DWORD PTR _s$[ebp]
	lea	esi, DWORD PTR $T4[ebp]
	push	6
	pop	edx
	mov	edi, ebx
	mov	ecx, edx
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR $T4[ebp], xmm0
	xorps	xmm0, xmm0
	movupd	XMMWORD PTR $T4[ebp+8], xmm0
	rep movsd

; 50   : 		this->value[1] = col_type(0, s, 0);

	movsd	xmm0, QWORD PTR [eax]
	lea	edi, DWORD PTR [ebx+24]
	movsd	QWORD PTR $T3[ebp+8], xmm0
	lea	esi, DWORD PTR $T3[ebp]
	movsd	QWORD PTR $T3[ebp], xmm1
	xorps	xmm0, xmm0
	movsd	QWORD PTR $T3[ebp+16], xmm1
	mov	ecx, edx
	rep movsd
	movupd	XMMWORD PTR $T2[ebp], xmm0

; 51   : 		this->value[2] = col_type(0, 0, s);

	lea	edi, DWORD PTR [ebx+48]
	mov	ecx, edx
	movsd	xmm0, QWORD PTR [eax]
	lea	esi, DWORD PTR $T2[ebp]
	movsd	QWORD PTR $T2[ebp+16], xmm0

; 52   : 		this->value[3] = col_type(0, 0, 0);
; 53   : 	}

	mov	eax, ebx
	rep movsd
	xorps	xmm0, xmm0
	movsd	QWORD PTR $T1[ebp+16], xmm1
	lea	edi, DWORD PTR [ebx+72]
	mov	ecx, edx
	lea	esi, DWORD PTR $T1[ebp]
	movupd	XMMWORD PTR $T1[ebp], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x3@N$00@glm@@QAE@ABN@Z ENDP			; glm::tmat4x3<double,1>::tmat4x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat4x3@N$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat4x3<double,1>::tmat4x3<double,1>, COMDAT
; _this$ = ecx

; 44   : 	{}

	push	3
	pop	edx
	lea	eax, DWORD PTR [ecx+16]
	xorps	xmm0, xmm0
$LL4@tmat4x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm0
	movups	XMMWORD PTR [eax-16], xmm0
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat4x3
	mov	eax, ecx
	ret	4
??0?$tmat4x3@N$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat4x3<double,1>::tmat4x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tmat4x3@N$00@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tmat4x3@N$00@glm@@QAE@ABU01@@Z PROC		; glm::tmat4x3<double,1>::tmat4x3<double,1>, COMDAT
; _this$ = ecx

; 221  : template struct tmat4x3<float64, mediump>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	24					; 00000018H
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tmat4x3@N$00@glm@@QAE@ABU01@@Z ENDP		; glm::tmat4x3<double,1>::tmat4x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$00@glm@@QAE@XZ
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
$T3 = -24						; size = 24
$T4 = -24						; size = 24
??0?$tmat4x3@N$00@glm@@QAE@XZ PROC			; glm::tmat4x3<double,1>::tmat4x3<double,1>, COMDAT
; _this$ = ecx

; 11   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xorps	xmm1, xmm1
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	3
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat4x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm1
	movups	XMMWORD PTR [eax-16], xmm1
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat4x3

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0, 0);

	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	lea	esi, DWORD PTR $T4[ebp]
	movupd	XMMWORD PTR $T4[ebp], xmm0
	mov	edi, ebx
	movaps	xmm0, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	push	6
	pop	eax
	movsd	QWORD PTR $T4[ebp+16], xmm1
	mov	ecx, eax
	rep movsd
	movupd	XMMWORD PTR $T3[ebp], xmm0

; 14   : 				this->value[1] = col_type(0, 1, 0);

	lea	edi, DWORD PTR [ebx+24]
	mov	ecx, eax
	movsd	QWORD PTR $T3[ebp+16], xmm1
	lea	esi, DWORD PTR $T3[ebp]
	rep movsd
	xorps	xmm0, xmm0

; 15   : 				this->value[2] = col_type(0, 0, 1);

	lea	edi, DWORD PTR [ebx+48]
	movupd	XMMWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	mov	ecx, eax
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR $T2[ebp+16], xmm0
	xorps	xmm0, xmm0
	rep movsd

; 16   : 				this->value[3] = col_type(0, 0, 0);

	lea	edi, DWORD PTR [ebx+72]
	movsd	QWORD PTR $T1[ebp+16], xmm1
	mov	ecx, eax
	lea	esi, DWORD PTR $T1[ebp]
	movupd	XMMWORD PTR $T1[ebp], xmm0

; 17   : #			endif
; 18   : 		}

	mov	eax, ebx
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$tmat4x3@N$00@glm@@QAE@XZ ENDP			; glm::tmat4x3<double,1>::tmat4x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??F?$tmat4x3@M$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat4x3@M$00@glm@@QAE?AU01@H@Z PROC		; glm::tmat4x3<float,1>::operator--, COMDAT
; _this$ = ecx

; 346  : 	{

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi

; 347  : 		tmat4x3<T, P> Result(*this);

	mov	edi, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, ecx
	push	12					; 0000000cH
	pop	ecx
	mov	esi, eax
	rep movsd

; 348  : 		--*this;

	mov	ecx, eax
	call	??F?$tmat4x3@M$00@glm@@QAEAAU01@XZ	; glm::tmat4x3<float,1>::operator--

; 349  : 		return Result;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi

; 350  : 	}

	pop	ebp
	ret	8
??F?$tmat4x3@M$00@glm@@QAE?AU01@H@Z ENDP		; glm::tmat4x3<float,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??E?$tmat4x3@M$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat4x3@M$00@glm@@QAE?AU01@H@Z PROC		; glm::tmat4x3<float,1>::operator++, COMDAT
; _this$ = ecx

; 338  : 	{

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi

; 339  : 		tmat4x3<T, P> Result(*this);

	mov	edi, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, ecx
	push	12					; 0000000cH
	pop	ecx
	mov	esi, eax
	rep movsd

; 340  : 		++*this;

	mov	ecx, eax
	call	??E?$tmat4x3@M$00@glm@@QAEAAU01@XZ	; glm::tmat4x3<float,1>::operator++

; 341  : 		return Result;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi

; 342  : 	}

	pop	ebp
	ret	8
??E?$tmat4x3@M$00@glm@@QAE?AU01@H@Z ENDP		; glm::tmat4x3<float,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??F?$tmat4x3@M$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat4x3@M$00@glm@@QAEAAU01@XZ PROC			; glm::tmat4x3<float,1>::operator--, COMDAT
; _this$ = ecx

; 329  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 330  : 		--this->value[1];
; 331  : 		--this->value[2];
; 332  : 		--this->value[3];
; 333  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0

; 334  : 	}

	ret	0
??F?$tmat4x3@M$00@glm@@QAEAAU01@XZ ENDP			; glm::tmat4x3<float,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??E?$tmat4x3@M$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat4x3@M$00@glm@@QAEAAU01@XZ PROC			; glm::tmat4x3<float,1>::operator++, COMDAT
; _this$ = ecx

; 319  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 320  : 		++this->value[1];
; 321  : 		++this->value[2];
; 322  : 		++this->value[3];
; 323  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0

; 324  : 	}

	ret	0
??E?$tmat4x3@M$00@glm@@QAEAAU01@XZ ENDP			; glm::tmat4x3<float,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tmat4x3@M$00@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tmat4x3@M$00@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tmat4x3<float,1>::operator=, COMDAT
; _this$ = ecx

; 220  : template struct tmat4x3<float32, mediump>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	12					; 0000000cH
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tmat4x3@M$00@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tmat4x3<float,1>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??A?$tmat4x3@M$00@glm@@QBEABU?$tvec3@M$00@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat4x3@M$00@glm@@QBEABU?$tvec3@M$00@1@H@Z PROC	; glm::tmat4x3<float,1>::operator[], COMDAT
; _this$ = ecx

; 218  : 	{

	push	ebp
	mov	ebp, esp

; 219  : 		assert(i < this->length());
; 220  : 		return this->value[i];

	imul	eax, DWORD PTR _i$[ebp], 12
	add	eax, ecx

; 221  : 	}

	pop	ebp
	ret	4
??A?$tmat4x3@M$00@glm@@QBEABU?$tvec3@M$00@1@H@Z ENDP	; glm::tmat4x3<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??A?$tmat4x3@M$00@glm@@QAEAAU?$tvec3@M$00@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat4x3@M$00@glm@@QAEAAU?$tvec3@M$00@1@H@Z PROC	; glm::tmat4x3<float,1>::operator[], COMDAT
; _this$ = ecx

; 211  : 	{

	push	ebp
	mov	ebp, esp

; 212  : 		assert(i < this->length());
; 213  : 		return this->value[i];

	imul	eax, DWORD PTR _i$[ebp], 12
	add	eax, ecx

; 214  : 	}

	pop	ebp
	ret	4
??A?$tmat4x3@M$00@glm@@QAEAAU?$tvec3@M$00@1@H@Z ENDP	; glm::tmat4x3<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.hpp
;	COMDAT ?length@?$tmat4x3@M$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat4x3@M$00@glm@@SAHXZ PROC			; glm::tmat4x3<float,1>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	push	4
	pop	eax
	ret	0
?length@?$tmat4x3@M$00@glm@@SAHXZ ENDP			; glm::tmat4x3<float,1>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$00@glm@@QAE@ABU?$tmat3x4@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
$T4 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat4x3@M$00@glm@@QAE@ABU?$tmat3x4@M$00@1@@Z PROC	; glm::tmat4x3<float,1>::tmat4x3<float,1>, COMDAT
; _this$ = ecx

; 200  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	lea	eax, DWORD PTR [ecx+8]
	push	3
	pop	edx
$LL4@tmat4x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat4x3

; 201  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T4[ebp]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T4[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T4[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T4[ebp+8], xmm0
	movsd
	movsd
	movsd

; 202  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [eax+16]
	lea	edi, DWORD PTR [ecx+12]
	movss	DWORD PTR $T3[ebp], xmm0
	lea	esi, DWORD PTR $T3[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+24]
	movss	DWORD PTR $T3[ebp+8], xmm0
	movsd
	movsd
	movsd

; 203  : 		this->value[2] = col_type(m[2]);

	movss	xmm0, DWORD PTR [eax+32]
	lea	edi, DWORD PTR [ecx+24]
	movss	DWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	movss	xmm0, DWORD PTR [eax+36]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+40]

; 204  : 		this->value[3] = col_type(0);
; 205  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T2[ebp+8], xmm0
	movsd
	movsd
	movsd
	and	DWORD PTR $T1[ebp], 0
	lea	edi, DWORD PTR [ecx+36]
	and	DWORD PTR $T1[ebp+4], 0
	lea	esi, DWORD PTR $T1[ebp]
	and	DWORD PTR $T1[ebp+8], 0
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x3@M$00@glm@@QAE@ABU?$tmat3x4@M$00@1@@Z ENDP	; glm::tmat4x3<float,1>::tmat4x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$00@glm@@QAE@ABU?$tmat4x2@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
$T4 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat4x3@M$00@glm@@QAE@ABU?$tmat4x2@M$00@1@@Z PROC	; glm::tmat4x3<float,1>::tmat4x3<float,1>, COMDAT
; _this$ = ecx

; 191  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	lea	eax, DWORD PTR [ecx+8]
	push	3
	pop	edx
$LL4@tmat4x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat4x3

; 192  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	and	DWORD PTR $T4[ebp+8], 0
	push	esi
	push	edi
	movss	xmm0, DWORD PTR [eax]
	lea	esi, DWORD PTR $T4[ebp]
	movss	DWORD PTR $T4[ebp], xmm0
	mov	edi, ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T4[ebp+4], xmm0
	movsd
	movsd
	movsd

; 193  : 		this->value[1] = col_type(m[1], 0);

	movss	xmm0, DWORD PTR [eax+8]
	lea	edi, DWORD PTR [ecx+12]
	and	DWORD PTR $T3[ebp+8], 0
	lea	esi, DWORD PTR $T3[ebp]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movsd
	movsd
	movsd

; 194  : 		this->value[2] = col_type(m[2], 1);

	movss	xmm0, DWORD PTR [eax+16]
	lea	edi, DWORD PTR [ecx+24]
	movss	DWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	DWORD PTR $T2[ebp+8], 1065353216	; 3f800000H
	movsd
	movsd
	movsd

; 195  : 		this->value[3] = col_type(m[3], 0);

	movss	xmm0, DWORD PTR [eax+24]
	lea	edi, DWORD PTR [ecx+36]
	and	DWORD PTR $T1[ebp+8], 0
	lea	esi, DWORD PTR $T1[ebp]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+28]

; 196  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+4], xmm0
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x3@M$00@glm@@QAE@ABU?$tmat4x2@M$00@1@@Z ENDP	; glm::tmat4x3<float,1>::tmat4x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$00@glm@@QAE@ABU?$tmat2x4@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
$T4 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat4x3@M$00@glm@@QAE@ABU?$tmat2x4@M$00@1@@Z PROC	; glm::tmat4x3<float,1>::tmat4x3<float,1>, COMDAT
; _this$ = ecx

; 182  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	lea	eax, DWORD PTR [ecx+8]
	push	3
	pop	edx
$LL4@tmat4x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat4x3

; 183  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T4[ebp]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T4[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T4[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T4[ebp+8], xmm0
	movsd
	movsd
	movsd

; 184  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [eax+16]
	lea	edi, DWORD PTR [ecx+12]
	movss	DWORD PTR $T3[ebp], xmm0
	lea	esi, DWORD PTR $T3[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+24]

; 185  : 		this->value[2] = col_type(0, 0, 1);
; 186  : 		this->value[3] = col_type(0);
; 187  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T3[ebp+8], xmm0
	movsd
	movsd
	movsd
	and	DWORD PTR $T2[ebp], 0
	lea	edi, DWORD PTR [ecx+24]
	and	DWORD PTR $T2[ebp+4], 0
	lea	esi, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T2[ebp+8], 1065353216	; 3f800000H
	movsd
	movsd
	movsd
	and	DWORD PTR $T1[ebp], 0
	lea	edi, DWORD PTR [ecx+36]
	and	DWORD PTR $T1[ebp+4], 0
	lea	esi, DWORD PTR $T1[ebp]
	and	DWORD PTR $T1[ebp+8], 0
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x3@M$00@glm@@QAE@ABU?$tmat2x4@M$00@1@@Z ENDP	; glm::tmat4x3<float,1>::tmat4x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$00@glm@@QAE@ABU?$tmat3x2@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
$T4 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat4x3@M$00@glm@@QAE@ABU?$tmat3x2@M$00@1@@Z PROC	; glm::tmat4x3<float,1>::tmat4x3<float,1>, COMDAT
; _this$ = ecx

; 173  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	lea	eax, DWORD PTR [ecx+8]
	push	3
	pop	edx
$LL4@tmat4x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat4x3

; 174  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	and	DWORD PTR $T4[ebp+8], 0
	push	esi
	push	edi
	movss	xmm0, DWORD PTR [eax]
	lea	esi, DWORD PTR $T4[ebp]
	movss	DWORD PTR $T4[ebp], xmm0
	mov	edi, ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T4[ebp+4], xmm0
	movsd
	movsd
	movsd

; 175  : 		this->value[1] = col_type(m[1], 0);

	movss	xmm0, DWORD PTR [eax+8]
	lea	edi, DWORD PTR [ecx+12]
	and	DWORD PTR $T3[ebp+8], 0
	lea	esi, DWORD PTR $T3[ebp]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movsd
	movsd
	movsd

; 176  : 		this->value[2] = col_type(m[2], 1);

	movss	xmm0, DWORD PTR [eax+16]
	lea	edi, DWORD PTR [ecx+24]
	movss	DWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	movss	xmm0, DWORD PTR [eax+20]

; 177  : 		this->value[3] = col_type(0);
; 178  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	DWORD PTR $T2[ebp+8], 1065353216	; 3f800000H
	movsd
	movsd
	movsd
	and	DWORD PTR $T1[ebp], 0
	lea	edi, DWORD PTR [ecx+36]
	and	DWORD PTR $T1[ebp+4], 0
	lea	esi, DWORD PTR $T1[ebp]
	and	DWORD PTR $T1[ebp+8], 0
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x3@M$00@glm@@QAE@ABU?$tmat3x2@M$00@1@@Z ENDP	; glm::tmat4x3<float,1>::tmat4x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$00@glm@@QAE@ABU?$tmat2x3@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
$T4 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat4x3@M$00@glm@@QAE@ABU?$tmat2x3@M$00@1@@Z PROC	; glm::tmat4x3<float,1>::tmat4x3<float,1>, COMDAT
; _this$ = ecx

; 164  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	lea	eax, DWORD PTR [ecx+8]
	push	3
	pop	edx
$LL4@tmat4x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat4x3

; 165  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	esi, eax
	lea	edi, DWORD PTR $T4[ebp]
	movsd
	movsd
	movsd
	mov	edi, ecx
	lea	esi, DWORD PTR $T4[ebp]
	movsd
	movsd
	movsd

; 166  : 		this->value[1] = col_type(m[1]);

	lea	esi, DWORD PTR [eax+12]

; 167  : 		this->value[2] = col_type(0, 0, 1);
; 168  : 		this->value[3] = col_type(0);
; 169  : 	}

	mov	eax, ecx
	lea	edi, DWORD PTR $T3[ebp]
	movsd
	movsd
	movsd
	lea	edi, DWORD PTR [ecx+12]
	lea	esi, DWORD PTR $T3[ebp]
	movsd
	movsd
	movsd
	and	DWORD PTR $T2[ebp], 0
	lea	edi, DWORD PTR [ecx+24]
	and	DWORD PTR $T2[ebp+4], 0
	lea	esi, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T2[ebp+8], 1065353216	; 3f800000H
	movsd
	movsd
	movsd
	and	DWORD PTR $T1[ebp], 0
	lea	edi, DWORD PTR [ecx+36]
	and	DWORD PTR $T1[ebp+4], 0
	lea	esi, DWORD PTR $T1[ebp]
	and	DWORD PTR $T1[ebp+8], 0
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x3@M$00@glm@@QAE@ABU?$tmat2x3@M$00@1@@Z ENDP	; glm::tmat4x3<float,1>::tmat4x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$00@glm@@QAE@ABU?$tmat4x4@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
$T4 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat4x3@M$00@glm@@QAE@ABU?$tmat4x4@M$00@1@@Z PROC	; glm::tmat4x3<float,1>::tmat4x3<float,1>, COMDAT
; _this$ = ecx

; 155  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	lea	eax, DWORD PTR [ecx+8]
	push	3
	pop	edx
$LL4@tmat4x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat4x3

; 156  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T4[ebp]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T4[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T4[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T4[ebp+8], xmm0
	movsd
	movsd
	movsd

; 157  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [eax+16]
	lea	edi, DWORD PTR [ecx+12]
	movss	DWORD PTR $T3[ebp], xmm0
	lea	esi, DWORD PTR $T3[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+24]
	movss	DWORD PTR $T3[ebp+8], xmm0
	movsd
	movsd
	movsd

; 158  : 		this->value[2] = col_type(m[2]);

	movss	xmm0, DWORD PTR [eax+32]
	lea	edi, DWORD PTR [ecx+24]
	movss	DWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	movss	xmm0, DWORD PTR [eax+36]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+40]
	movss	DWORD PTR $T2[ebp+8], xmm0
	movsd
	movsd
	movsd

; 159  : 		this->value[3] = col_type(m[3]);

	movss	xmm0, DWORD PTR [eax+48]
	lea	edi, DWORD PTR [ecx+36]
	movss	DWORD PTR $T1[ebp], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	movss	xmm0, DWORD PTR [eax+52]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+56]

; 160  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+8], xmm0
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x3@M$00@glm@@QAE@ABU?$tmat4x4@M$00@1@@Z ENDP	; glm::tmat4x3<float,1>::tmat4x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$00@glm@@QAE@ABU?$tmat3x3@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
$T4 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat4x3@M$00@glm@@QAE@ABU?$tmat3x3@M$00@1@@Z PROC	; glm::tmat4x3<float,1>::tmat4x3<float,1>, COMDAT
; _this$ = ecx

; 146  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	lea	eax, DWORD PTR [ecx+8]
	push	3
	pop	edx
$LL4@tmat4x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat4x3

; 147  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	esi, eax
	lea	edi, DWORD PTR $T4[ebp]
	movsd
	movsd
	movsd
	mov	edi, ecx
	lea	esi, DWORD PTR $T4[ebp]
	movsd
	movsd
	movsd

; 148  : 		this->value[1] = col_type(m[1]);

	lea	esi, DWORD PTR [eax+12]
	lea	edi, DWORD PTR $T3[ebp]
	movsd
	movsd
	movsd
	lea	edi, DWORD PTR [ecx+12]
	lea	esi, DWORD PTR $T3[ebp]
	movsd
	movsd
	movsd

; 149  : 		this->value[2] = col_type(m[2]);

	lea	esi, DWORD PTR [eax+24]

; 150  : 		this->value[3] = col_type(0);
; 151  : 	}

	mov	eax, ecx
	lea	edi, DWORD PTR $T2[ebp]
	movsd
	movsd
	movsd
	lea	edi, DWORD PTR [ecx+24]
	lea	esi, DWORD PTR $T2[ebp]
	movsd
	movsd
	movsd
	and	DWORD PTR $T1[ebp], 0
	lea	edi, DWORD PTR [ecx+36]
	and	DWORD PTR $T1[ebp+4], 0
	lea	esi, DWORD PTR $T1[ebp]
	and	DWORD PTR $T1[ebp+8], 0
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x3@M$00@glm@@QAE@ABU?$tmat3x3@M$00@1@@Z ENDP	; glm::tmat4x3<float,1>::tmat4x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$00@glm@@QAE@ABU?$tmat2x2@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
$T4 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat4x3@M$00@glm@@QAE@ABU?$tmat2x2@M$00@1@@Z PROC	; glm::tmat4x3<float,1>::tmat4x3<float,1>, COMDAT
; _this$ = ecx

; 137  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	lea	eax, DWORD PTR [ecx+8]
	push	3
	pop	edx
$LL4@tmat4x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat4x3

; 138  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	and	DWORD PTR $T4[ebp+8], 0
	push	esi
	push	edi
	movss	xmm0, DWORD PTR [eax]
	lea	esi, DWORD PTR $T4[ebp]
	movss	DWORD PTR $T4[ebp], xmm0
	mov	edi, ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T4[ebp+4], xmm0
	movsd
	movsd
	movsd

; 139  : 		this->value[1] = col_type(m[1], 0);

	movss	xmm0, DWORD PTR [eax+8]
	lea	edi, DWORD PTR [ecx+12]
	and	DWORD PTR $T3[ebp+8], 0
	lea	esi, DWORD PTR $T3[ebp]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+12]

; 140  : 		this->value[2] = col_type(0, 0, 1);
; 141  : 		this->value[3] = col_type(0);
; 142  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T3[ebp+4], xmm0
	movsd
	movsd
	movsd
	and	DWORD PTR $T2[ebp], 0
	lea	edi, DWORD PTR [ecx+24]
	and	DWORD PTR $T2[ebp+4], 0
	lea	esi, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T2[ebp+8], 1065353216	; 3f800000H
	movsd
	movsd
	movsd
	and	DWORD PTR $T1[ebp], 0
	lea	edi, DWORD PTR [ecx+36]
	and	DWORD PTR $T1[ebp+4], 0
	lea	esi, DWORD PTR $T1[ebp]
	and	DWORD PTR $T1[ebp+8], 0
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x3@M$00@glm@@QAE@ABU?$tmat2x2@M$00@1@@Z ENDP	; glm::tmat4x3<float,1>::tmat4x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$00@glm@@QAE@ABU?$tvec3@M$00@1@000@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
_v3$ = 20						; size = 4
??0?$tmat4x3@M$00@glm@@QAE@ABU?$tvec3@M$00@1@000@Z PROC	; glm::tmat4x3<float,1>::tmat4x3<float,1>, COMDAT
; _this$ = ecx

; 78   : 	{

	push	ebp
	mov	ebp, esp
	push	3
	pop	edx
	lea	eax, DWORD PTR [ecx+8]
$LL4@tmat4x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat4x3

; 79   : 		this->value[0] = v0;

	push	esi
	mov	esi, DWORD PTR _v0$[ebp]

; 80   : 		this->value[1] = v1;
; 81   : 		this->value[2] = v2;
; 82   : 		this->value[3] = v3;
; 83   : 	}

	mov	eax, ecx
	push	edi
	mov	edi, ecx
	movsd
	movsd
	movsd
	mov	esi, DWORD PTR _v1$[ebp]
	lea	edi, DWORD PTR [ecx+12]
	movsd
	movsd
	movsd
	mov	esi, DWORD PTR _v2$[ebp]
	lea	edi, DWORD PTR [ecx+24]
	movsd
	movsd
	movsd
	mov	esi, DWORD PTR _v3$[ebp]
	lea	edi, DWORD PTR [ecx+36]
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	16					; 00000010H
??0?$tmat4x3@M$00@glm@@QAE@ABU?$tvec3@M$00@1@000@Z ENDP	; glm::tmat4x3<float,1>::tmat4x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$00@glm@@QAE@ABM00000000000@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
$T4 = -12						; size = 12
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_z0$ = 16						; size = 4
_x1$ = 20						; size = 4
_y1$ = 24						; size = 4
_z1$ = 28						; size = 4
_x2$ = 32						; size = 4
_y2$ = 36						; size = 4
_z2$ = 40						; size = 4
_x3$ = 44						; size = 4
_y3$ = 48						; size = 4
_z3$ = 52						; size = 4
??0?$tmat4x3@M$00@glm@@QAE@ABM00000000000@Z PROC	; glm::tmat4x3<float,1>::tmat4x3<float,1>, COMDAT
; _this$ = ecx

; 63   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	lea	eax, DWORD PTR [ecx+8]
	push	3
	pop	edx
$LL4@tmat4x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat4x3

; 64   : 		this->value[0] = col_type(x0, y0, z0);

	mov	eax, DWORD PTR _x0$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T4[ebp]
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _y0$[ebp]
	movss	DWORD PTR $T4[ebp], xmm0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _z0$[ebp]
	movss	DWORD PTR $T4[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax]

; 65   : 		this->value[1] = col_type(x1, y1, z1);

	mov	eax, DWORD PTR _x1$[ebp]
	movss	DWORD PTR $T4[ebp+8], xmm0
	movsd
	movsd
	movsd
	movss	xmm0, DWORD PTR [eax]
	lea	edi, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _y1$[ebp]
	lea	esi, DWORD PTR $T3[ebp]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _z1$[ebp]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax]

; 66   : 		this->value[2] = col_type(x2, y2, z2);

	mov	eax, DWORD PTR _x2$[ebp]
	movss	DWORD PTR $T3[ebp+8], xmm0
	movsd
	movsd
	movsd
	movss	xmm0, DWORD PTR [eax]
	lea	edi, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR _y2$[ebp]
	lea	esi, DWORD PTR $T2[ebp]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _z2$[ebp]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax]

; 67   : 		this->value[3] = col_type(x3, y3, z3);

	mov	eax, DWORD PTR _x3$[ebp]
	movss	DWORD PTR $T2[ebp+8], xmm0
	movsd
	movsd
	movsd
	movss	xmm0, DWORD PTR [eax]
	lea	edi, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR _y3$[ebp]
	lea	esi, DWORD PTR $T1[ebp]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _z3$[ebp]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax]

; 68   : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+8], xmm0
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	48					; 00000030H
??0?$tmat4x3@M$00@glm@@QAE@ABM00000000000@Z ENDP	; glm::tmat4x3<float,1>::tmat4x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$00@glm@@QAE@ABM@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
$T4 = -12						; size = 12
_s$ = 8							; size = 4
??0?$tmat4x3@M$00@glm@@QAE@ABM@Z PROC			; glm::tmat4x3<float,1>::tmat4x3<float,1>, COMDAT
; _this$ = ecx

; 48   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	lea	eax, DWORD PTR [ecx+8]
	push	3
	pop	edx
$LL4@tmat4x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat4x3

; 49   : 		this->value[0] = col_type(s, 0, 0);

	and	DWORD PTR $T4[ebp+4], 0
	and	DWORD PTR $T4[ebp+8], 0
	mov	eax, DWORD PTR _s$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T4[ebp]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T4[ebp], xmm0
	movsd
	movsd
	movsd

; 50   : 		this->value[1] = col_type(0, s, 0);

	movss	xmm0, DWORD PTR [eax]
	lea	edi, DWORD PTR [ecx+12]
	and	DWORD PTR $T3[ebp], 0
	lea	esi, DWORD PTR $T3[ebp]
	and	DWORD PTR $T3[ebp+8], 0
	movss	DWORD PTR $T3[ebp+4], xmm0
	movsd
	movsd
	movsd

; 51   : 		this->value[2] = col_type(0, 0, s);

	movss	xmm0, DWORD PTR [eax]
	lea	edi, DWORD PTR [ecx+24]
	and	DWORD PTR $T2[ebp], 0
	lea	esi, DWORD PTR $T2[ebp]
	and	DWORD PTR $T2[ebp+4], 0

; 52   : 		this->value[3] = col_type(0, 0, 0);
; 53   : 	}

	mov	eax, ecx
	movss	DWORD PTR $T2[ebp+8], xmm0
	movsd
	movsd
	movsd
	and	DWORD PTR $T1[ebp], 0
	lea	edi, DWORD PTR [ecx+36]
	and	DWORD PTR $T1[ebp+4], 0
	lea	esi, DWORD PTR $T1[ebp]
	and	DWORD PTR $T1[ebp+8], 0
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x3@M$00@glm@@QAE@ABM@Z ENDP			; glm::tmat4x3<float,1>::tmat4x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat4x3@M$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat4x3<float,1>::tmat4x3<float,1>, COMDAT
; _this$ = ecx

; 44   : 	{}

	push	3
	pop	edx
	lea	eax, DWORD PTR [ecx+8]
$LL4@tmat4x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat4x3
	mov	eax, ecx
	ret	4
??0?$tmat4x3@M$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat4x3<float,1>::tmat4x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tmat4x3@M$00@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tmat4x3@M$00@glm@@QAE@ABU01@@Z PROC		; glm::tmat4x3<float,1>::tmat4x3<float,1>, COMDAT
; _this$ = ecx

; 220  : template struct tmat4x3<float32, mediump>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	12					; 0000000cH
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tmat4x3@M$00@glm@@QAE@ABU01@@Z ENDP		; glm::tmat4x3<float,1>::tmat4x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$00@glm@@QAE@XZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
$T4 = -12						; size = 12
??0?$tmat4x3@M$00@glm@@QAE@XZ PROC			; glm::tmat4x3<float,1>::tmat4x3<float,1>, COMDAT
; _this$ = ecx

; 11   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	lea	eax, DWORD PTR [ecx+8]
	push	3
	pop	edx
$LL4@tmat4x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat4x3

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0, 0);

	and	DWORD PTR $T4[ebp+4], 0

; 14   : 				this->value[1] = col_type(0, 1, 0);
; 15   : 				this->value[2] = col_type(0, 0, 1);
; 16   : 				this->value[3] = col_type(0, 0, 0);
; 17   : #			endif
; 18   : 		}

	mov	eax, ecx
	and	DWORD PTR $T4[ebp+8], 0
	push	esi
	push	edi
	mov	DWORD PTR $T4[ebp], 1065353216		; 3f800000H
	lea	esi, DWORD PTR $T4[ebp]
	mov	edi, ecx
	movsd
	movsd
	movsd
	and	DWORD PTR $T3[ebp], 0
	lea	edi, DWORD PTR [ecx+12]
	and	DWORD PTR $T3[ebp+8], 0
	lea	esi, DWORD PTR $T3[ebp]
	mov	DWORD PTR $T3[ebp+4], 1065353216	; 3f800000H
	movsd
	movsd
	movsd
	and	DWORD PTR $T2[ebp], 0
	lea	edi, DWORD PTR [ecx+24]
	and	DWORD PTR $T2[ebp+4], 0
	lea	esi, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T2[ebp+8], 1065353216	; 3f800000H
	movsd
	movsd
	movsd
	and	DWORD PTR $T1[ebp], 0
	lea	edi, DWORD PTR [ecx+36]
	and	DWORD PTR $T1[ebp+4], 0
	lea	esi, DWORD PTR $T1[ebp]
	and	DWORD PTR $T1[ebp+8], 0
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$tmat4x3@M$00@glm@@QAE@XZ ENDP			; glm::tmat4x3<float,1>::tmat4x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??F?$tmat4x3@N$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat4x3@N$01@glm@@QAE?AU01@H@Z PROC		; glm::tmat4x3<double,2>::operator--, COMDAT
; _this$ = ecx

; 346  : 	{

	push	ebp
	mov	ebp, esp

; 347  : 		tmat4x3<T, P> Result(*this);
; 348  : 		--*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	mov	edx, ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	movups	xmm0, XMMWORD PTR [edx]
	push	24					; 00000018H
	pop	ecx
	subpd	xmm0, xmm1
	mov	esi, edx
	mov	edi, eax
	rep movsd
	movups	XMMWORD PTR [edx], xmm0
	pop	edi
	movups	xmm0, XMMWORD PTR [edx+16]
	pop	esi
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+16], xmm0
	movups	xmm0, XMMWORD PTR [edx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+32], xmm0
	movups	xmm0, XMMWORD PTR [edx+48]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+48], xmm0
	movups	xmm0, XMMWORD PTR [edx+64]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+64], xmm0
	movups	xmm0, XMMWORD PTR [edx+80]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+80], xmm0

; 349  : 		return Result;
; 350  : 	}

	pop	ebp
	ret	8
??F?$tmat4x3@N$01@glm@@QAE?AU01@H@Z ENDP		; glm::tmat4x3<double,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??E?$tmat4x3@N$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat4x3@N$01@glm@@QAE?AU01@H@Z PROC		; glm::tmat4x3<double,2>::operator++, COMDAT
; _this$ = ecx

; 338  : 	{

	push	ebp
	mov	ebp, esp

; 339  : 		tmat4x3<T, P> Result(*this);
; 340  : 		++*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	mov	edx, ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	movups	xmm0, XMMWORD PTR [edx]
	push	24					; 00000018H
	pop	ecx
	addpd	xmm0, xmm1
	mov	esi, edx
	mov	edi, eax
	rep movsd
	movups	XMMWORD PTR [edx], xmm0
	pop	edi
	movups	xmm0, XMMWORD PTR [edx+16]
	pop	esi
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+16], xmm0
	movups	xmm0, XMMWORD PTR [edx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+32], xmm0
	movups	xmm0, XMMWORD PTR [edx+48]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+48], xmm0
	movups	xmm0, XMMWORD PTR [edx+64]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+64], xmm0
	movups	xmm0, XMMWORD PTR [edx+80]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+80], xmm0

; 341  : 		return Result;
; 342  : 	}

	pop	ebp
	ret	8
??E?$tmat4x3@N$01@glm@@QAE?AU01@H@Z ENDP		; glm::tmat4x3<double,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??F?$tmat4x3@N$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat4x3@N$01@glm@@QAEAAU01@XZ PROC			; glm::tmat4x3<double,2>::operator--, COMDAT
; _this$ = ecx

; 329  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 330  : 		--this->value[1];
; 331  : 		--this->value[2];
; 332  : 		--this->value[3];
; 333  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	xmm0, XMMWORD PTR [ecx+64]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	xmm0, XMMWORD PTR [ecx+80]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+80], xmm0

; 334  : 	}

	ret	0
??F?$tmat4x3@N$01@glm@@QAEAAU01@XZ ENDP			; glm::tmat4x3<double,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??E?$tmat4x3@N$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat4x3@N$01@glm@@QAEAAU01@XZ PROC			; glm::tmat4x3<double,2>::operator++, COMDAT
; _this$ = ecx

; 319  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 320  : 		++this->value[1];
; 321  : 		++this->value[2];
; 322  : 		++this->value[3];
; 323  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	xmm0, XMMWORD PTR [ecx+64]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	xmm0, XMMWORD PTR [ecx+80]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+80], xmm0

; 324  : 	}

	ret	0
??E?$tmat4x3@N$01@glm@@QAEAAU01@XZ ENDP			; glm::tmat4x3<double,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tmat4x3@N$01@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tmat4x3@N$01@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tmat4x3<double,2>::operator=, COMDAT
; _this$ = ecx

; 218  : template struct tmat4x3<float64, lowp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	24					; 00000018H
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tmat4x3@N$01@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tmat4x3<double,2>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??A?$tmat4x3@N$01@glm@@QBEABU?$tvec3@N$01@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat4x3@N$01@glm@@QBEABU?$tvec3@N$01@1@H@Z PROC	; glm::tmat4x3<double,2>::operator[], COMDAT
; _this$ = ecx

; 218  : 	{

	push	ebp
	mov	ebp, esp

; 219  : 		assert(i < this->length());
; 220  : 		return this->value[i];

	imul	eax, DWORD PTR _i$[ebp], 24
	add	eax, ecx

; 221  : 	}

	pop	ebp
	ret	4
??A?$tmat4x3@N$01@glm@@QBEABU?$tvec3@N$01@1@H@Z ENDP	; glm::tmat4x3<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??A?$tmat4x3@N$01@glm@@QAEAAU?$tvec3@N$01@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat4x3@N$01@glm@@QAEAAU?$tvec3@N$01@1@H@Z PROC	; glm::tmat4x3<double,2>::operator[], COMDAT
; _this$ = ecx

; 211  : 	{

	push	ebp
	mov	ebp, esp

; 212  : 		assert(i < this->length());
; 213  : 		return this->value[i];

	imul	eax, DWORD PTR _i$[ebp], 24
	add	eax, ecx

; 214  : 	}

	pop	ebp
	ret	4
??A?$tmat4x3@N$01@glm@@QAEAAU?$tvec3@N$01@1@H@Z ENDP	; glm::tmat4x3<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.hpp
;	COMDAT ?length@?$tmat4x3@N$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat4x3@N$01@glm@@SAHXZ PROC			; glm::tmat4x3<double,2>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	push	4
	pop	eax
	ret	0
?length@?$tmat4x3@N$01@glm@@SAHXZ ENDP			; glm::tmat4x3<double,2>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$01@glm@@QAE@ABU?$tmat3x4@N$01@1@@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
$T3 = -24						; size = 24
$T4 = -24						; size = 24
_m$ = 8							; size = 4
??0?$tmat4x3@N$01@glm@@QAE@ABU?$tmat3x4@N$01@1@@Z PROC	; glm::tmat4x3<double,2>::tmat4x3<double,2>, COMDAT
; _this$ = ecx

; 200  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xorps	xmm1, xmm1
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	3
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat4x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm1
	movups	XMMWORD PTR [eax-16], xmm1
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat4x3

; 201  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T4[ebp]
	push	6
	pop	edx
	mov	edi, ebx
	mov	ecx, edx
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR $T4[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR $T4[ebp+16], xmm0
	rep movsd

; 202  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+32]
	lea	edi, DWORD PTR [ebx+24]
	mov	ecx, edx
	lea	esi, DWORD PTR $T3[ebp]
	movups	XMMWORD PTR $T3[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+48]
	movsd	QWORD PTR $T3[ebp+16], xmm0
	rep movsd

; 203  : 		this->value[2] = col_type(m[2]);

	movups	xmm0, XMMWORD PTR [eax+64]
	lea	edi, DWORD PTR [ebx+48]
	mov	ecx, edx
	lea	esi, DWORD PTR $T2[ebp]
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+80]

; 204  : 		this->value[3] = col_type(0);
; 205  : 	}

	mov	eax, ebx
	movsd	QWORD PTR $T2[ebp+16], xmm0
	xorps	xmm0, xmm0
	rep movsd
	lea	edi, DWORD PTR [ebx+72]
	movsd	QWORD PTR $T1[ebp+16], xmm1
	mov	ecx, edx
	lea	esi, DWORD PTR $T1[ebp]
	movupd	XMMWORD PTR $T1[ebp], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x3@N$01@glm@@QAE@ABU?$tmat3x4@N$01@1@@Z ENDP	; glm::tmat4x3<double,2>::tmat4x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$01@glm@@QAE@ABU?$tmat4x2@N$01@1@@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
$T3 = -24						; size = 24
$T4 = -24						; size = 24
_m$ = 8							; size = 4
??0?$tmat4x3@N$01@glm@@QAE@ABU?$tmat4x2@N$01@1@@Z PROC	; glm::tmat4x3<double,2>::tmat4x3<double,2>, COMDAT
; _this$ = ecx

; 191  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xorps	xmm1, xmm1
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	3
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat4x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm1
	movups	XMMWORD PTR [eax-16], xmm1
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat4x3

; 192  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T4[ebp]
	push	6
	pop	edx
	movsd	QWORD PTR $T4[ebp+16], xmm1
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]
	mov	ecx, edx
	movups	XMMWORD PTR $T4[ebp], xmm0
	rep movsd

; 193  : 		this->value[1] = col_type(m[1], 0);

	movups	xmm0, XMMWORD PTR [eax+16]
	lea	edi, DWORD PTR [ebx+24]
	mov	ecx, edx
	movsd	QWORD PTR $T3[ebp+16], xmm1
	lea	esi, DWORD PTR $T3[ebp]
	movups	XMMWORD PTR $T3[ebp], xmm0
	rep movsd

; 194  : 		this->value[2] = col_type(m[2], 1);

	movups	xmm0, XMMWORD PTR [eax+32]
	lea	edi, DWORD PTR [ebx+48]
	mov	ecx, edx
	lea	esi, DWORD PTR $T2[ebp]
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR $T2[ebp+16], xmm0
	rep movsd

; 195  : 		this->value[3] = col_type(m[3], 0);

	movups	xmm0, XMMWORD PTR [eax+48]
	lea	edi, DWORD PTR [ebx+72]
	mov	ecx, edx
	lea	esi, DWORD PTR $T1[ebp]
	movsd	QWORD PTR $T1[ebp+16], xmm1
	movups	XMMWORD PTR $T1[ebp], xmm0

; 196  : 	}

	mov	eax, ebx
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x3@N$01@glm@@QAE@ABU?$tmat4x2@N$01@1@@Z ENDP	; glm::tmat4x3<double,2>::tmat4x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$01@glm@@QAE@ABU?$tmat2x4@N$01@1@@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
$T3 = -24						; size = 24
$T4 = -24						; size = 24
_m$ = 8							; size = 4
??0?$tmat4x3@N$01@glm@@QAE@ABU?$tmat2x4@N$01@1@@Z PROC	; glm::tmat4x3<double,2>::tmat4x3<double,2>, COMDAT
; _this$ = ecx

; 182  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xorps	xmm1, xmm1
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	3
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat4x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm1
	movups	XMMWORD PTR [eax-16], xmm1
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat4x3

; 183  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T4[ebp]
	push	6
	pop	edx
	mov	edi, ebx
	mov	ecx, edx
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR $T4[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR $T4[ebp+16], xmm0
	rep movsd

; 184  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+32]
	lea	edi, DWORD PTR [ebx+24]
	mov	ecx, edx
	lea	esi, DWORD PTR $T3[ebp]
	movups	XMMWORD PTR $T3[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+48]

; 185  : 		this->value[2] = col_type(0, 0, 1);
; 186  : 		this->value[3] = col_type(0);
; 187  : 	}

	mov	eax, ebx
	movsd	QWORD PTR $T3[ebp+16], xmm0
	xorps	xmm0, xmm0
	rep movsd
	movupd	XMMWORD PTR $T2[ebp], xmm0
	lea	edi, DWORD PTR [ebx+48]
	mov	ecx, edx
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	lea	esi, DWORD PTR $T2[ebp]
	movsd	QWORD PTR $T2[ebp+16], xmm0
	xorps	xmm0, xmm0
	rep movsd
	lea	edi, DWORD PTR [ebx+72]
	movsd	QWORD PTR $T1[ebp+16], xmm1
	mov	ecx, edx
	lea	esi, DWORD PTR $T1[ebp]
	movupd	XMMWORD PTR $T1[ebp], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x3@N$01@glm@@QAE@ABU?$tmat2x4@N$01@1@@Z ENDP	; glm::tmat4x3<double,2>::tmat4x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$01@glm@@QAE@ABU?$tmat3x2@N$01@1@@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
$T3 = -24						; size = 24
$T4 = -24						; size = 24
_m$ = 8							; size = 4
??0?$tmat4x3@N$01@glm@@QAE@ABU?$tmat3x2@N$01@1@@Z PROC	; glm::tmat4x3<double,2>::tmat4x3<double,2>, COMDAT
; _this$ = ecx

; 173  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xorps	xmm1, xmm1
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	3
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat4x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm1
	movups	XMMWORD PTR [eax-16], xmm1
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat4x3

; 174  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T4[ebp]
	push	6
	pop	edx
	movsd	QWORD PTR $T4[ebp+16], xmm1
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]
	mov	ecx, edx
	movups	XMMWORD PTR $T4[ebp], xmm0
	rep movsd

; 175  : 		this->value[1] = col_type(m[1], 0);

	movups	xmm0, XMMWORD PTR [eax+16]
	lea	edi, DWORD PTR [ebx+24]
	mov	ecx, edx
	movsd	QWORD PTR $T3[ebp+16], xmm1
	lea	esi, DWORD PTR $T3[ebp]
	movups	XMMWORD PTR $T3[ebp], xmm0
	rep movsd

; 176  : 		this->value[2] = col_type(m[2], 1);

	movups	xmm0, XMMWORD PTR [eax+32]
	lea	edi, DWORD PTR [ebx+48]
	mov	ecx, edx
	lea	esi, DWORD PTR $T2[ebp]

; 177  : 		this->value[3] = col_type(0);
; 178  : 	}

	mov	eax, ebx
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR $T2[ebp+16], xmm0
	xorps	xmm0, xmm0
	rep movsd
	lea	edi, DWORD PTR [ebx+72]
	movsd	QWORD PTR $T1[ebp+16], xmm1
	mov	ecx, edx
	lea	esi, DWORD PTR $T1[ebp]
	movupd	XMMWORD PTR $T1[ebp], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x3@N$01@glm@@QAE@ABU?$tmat3x2@N$01@1@@Z ENDP	; glm::tmat4x3<double,2>::tmat4x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$01@glm@@QAE@ABU?$tmat2x3@N$01@1@@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
$T3 = -24						; size = 24
$T4 = -24						; size = 24
_m$ = 8							; size = 4
??0?$tmat4x3@N$01@glm@@QAE@ABU?$tmat2x3@N$01@1@@Z PROC	; glm::tmat4x3<double,2>::tmat4x3<double,2>, COMDAT
; _this$ = ecx

; 164  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xorps	xmm1, xmm1
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	3
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat4x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm1
	movups	XMMWORD PTR [eax-16], xmm1
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat4x3

; 165  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	lea	edi, DWORD PTR $T4[ebp]
	push	6
	pop	edx
	mov	esi, eax
	mov	ecx, edx
	rep movsd
	mov	edi, ebx
	lea	esi, DWORD PTR $T4[ebp]
	mov	ecx, edx
	xorps	xmm0, xmm0
	rep movsd

; 166  : 		this->value[1] = col_type(m[1]);

	lea	esi, DWORD PTR [eax+24]
	mov	ecx, edx
	lea	edi, DWORD PTR $T3[ebp]

; 167  : 		this->value[2] = col_type(0, 0, 1);
; 168  : 		this->value[3] = col_type(0);
; 169  : 	}

	mov	eax, ebx
	rep movsd
	lea	edi, DWORD PTR [ebx+24]
	mov	ecx, edx
	lea	esi, DWORD PTR $T3[ebp]
	rep movsd
	movupd	XMMWORD PTR $T2[ebp], xmm0
	lea	edi, DWORD PTR [ebx+48]
	mov	ecx, edx
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	lea	esi, DWORD PTR $T2[ebp]
	movsd	QWORD PTR $T2[ebp+16], xmm0
	xorps	xmm0, xmm0
	rep movsd
	lea	edi, DWORD PTR [ebx+72]
	movsd	QWORD PTR $T1[ebp+16], xmm1
	mov	ecx, edx
	lea	esi, DWORD PTR $T1[ebp]
	movupd	XMMWORD PTR $T1[ebp], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x3@N$01@glm@@QAE@ABU?$tmat2x3@N$01@1@@Z ENDP	; glm::tmat4x3<double,2>::tmat4x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$01@glm@@QAE@ABU?$tmat4x4@N$01@1@@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
$T3 = -24						; size = 24
$T4 = -24						; size = 24
_m$ = 8							; size = 4
??0?$tmat4x3@N$01@glm@@QAE@ABU?$tmat4x4@N$01@1@@Z PROC	; glm::tmat4x3<double,2>::tmat4x3<double,2>, COMDAT
; _this$ = ecx

; 155  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xorps	xmm0, xmm0
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	3
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat4x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm0
	movups	XMMWORD PTR [eax-16], xmm0
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat4x3

; 156  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T4[ebp]
	push	6
	pop	edx
	mov	edi, ebx
	mov	ecx, edx
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR $T4[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR $T4[ebp+16], xmm0
	rep movsd

; 157  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+32]
	lea	edi, DWORD PTR [ebx+24]
	mov	ecx, edx
	lea	esi, DWORD PTR $T3[ebp]
	movups	XMMWORD PTR $T3[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+48]
	movsd	QWORD PTR $T3[ebp+16], xmm0
	rep movsd

; 158  : 		this->value[2] = col_type(m[2]);

	movups	xmm0, XMMWORD PTR [eax+64]
	lea	edi, DWORD PTR [ebx+48]
	mov	ecx, edx
	lea	esi, DWORD PTR $T2[ebp]
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+80]
	movsd	QWORD PTR $T2[ebp+16], xmm0
	rep movsd

; 159  : 		this->value[3] = col_type(m[3]);

	movups	xmm0, XMMWORD PTR [eax+96]
	lea	edi, DWORD PTR [ebx+72]
	mov	ecx, edx
	lea	esi, DWORD PTR $T1[ebp]
	movups	XMMWORD PTR $T1[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+112]

; 160  : 	}

	mov	eax, ebx
	movsd	QWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x3@N$01@glm@@QAE@ABU?$tmat4x4@N$01@1@@Z ENDP	; glm::tmat4x3<double,2>::tmat4x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$01@glm@@QAE@ABU?$tmat3x3@N$01@1@@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
$T3 = -24						; size = 24
$T4 = -24						; size = 24
_m$ = 8							; size = 4
??0?$tmat4x3@N$01@glm@@QAE@ABU?$tmat3x3@N$01@1@@Z PROC	; glm::tmat4x3<double,2>::tmat4x3<double,2>, COMDAT
; _this$ = ecx

; 146  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xorps	xmm1, xmm1
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	3
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat4x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm1
	movups	XMMWORD PTR [eax-16], xmm1
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat4x3

; 147  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	lea	edi, DWORD PTR $T4[ebp]
	push	6
	pop	edx
	mov	esi, eax
	mov	ecx, edx
	rep movsd
	mov	edi, ebx
	lea	esi, DWORD PTR $T4[ebp]
	mov	ecx, edx
	xorps	xmm0, xmm0
	rep movsd

; 148  : 		this->value[1] = col_type(m[1]);

	lea	esi, DWORD PTR [eax+24]
	mov	ecx, edx
	lea	edi, DWORD PTR $T3[ebp]
	rep movsd
	lea	edi, DWORD PTR [ebx+24]
	mov	ecx, edx
	lea	esi, DWORD PTR $T3[ebp]
	rep movsd

; 149  : 		this->value[2] = col_type(m[2]);

	lea	esi, DWORD PTR [eax+48]
	mov	ecx, edx
	lea	edi, DWORD PTR $T2[ebp]

; 150  : 		this->value[3] = col_type(0);
; 151  : 	}

	mov	eax, ebx
	rep movsd
	lea	edi, DWORD PTR [ebx+48]
	mov	ecx, edx
	lea	esi, DWORD PTR $T2[ebp]
	rep movsd
	lea	edi, DWORD PTR [ebx+72]
	movsd	QWORD PTR $T1[ebp+16], xmm1
	mov	ecx, edx
	lea	esi, DWORD PTR $T1[ebp]
	movupd	XMMWORD PTR $T1[ebp], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x3@N$01@glm@@QAE@ABU?$tmat3x3@N$01@1@@Z ENDP	; glm::tmat4x3<double,2>::tmat4x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$01@glm@@QAE@ABU?$tmat2x2@N$01@1@@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
$T3 = -24						; size = 24
$T4 = -24						; size = 24
_m$ = 8							; size = 4
??0?$tmat4x3@N$01@glm@@QAE@ABU?$tmat2x2@N$01@1@@Z PROC	; glm::tmat4x3<double,2>::tmat4x3<double,2>, COMDAT
; _this$ = ecx

; 137  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xorps	xmm1, xmm1
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	3
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat4x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm1
	movups	XMMWORD PTR [eax-16], xmm1
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat4x3

; 138  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T4[ebp]
	push	6
	pop	edx
	movsd	QWORD PTR $T4[ebp+16], xmm1
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]
	mov	ecx, edx
	movups	XMMWORD PTR $T4[ebp], xmm0
	rep movsd

; 139  : 		this->value[1] = col_type(m[1], 0);

	movups	xmm0, XMMWORD PTR [eax+16]
	lea	edi, DWORD PTR [ebx+24]
	mov	ecx, edx
	movsd	QWORD PTR $T3[ebp+16], xmm1
	lea	esi, DWORD PTR $T3[ebp]
	movups	XMMWORD PTR $T3[ebp], xmm0

; 140  : 		this->value[2] = col_type(0, 0, 1);
; 141  : 		this->value[3] = col_type(0);
; 142  : 	}

	mov	eax, ebx
	rep movsd
	xorps	xmm0, xmm0
	lea	edi, DWORD PTR [ebx+48]
	movupd	XMMWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	mov	ecx, edx
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR $T2[ebp+16], xmm0
	xorps	xmm0, xmm0
	rep movsd
	lea	edi, DWORD PTR [ebx+72]
	movsd	QWORD PTR $T1[ebp+16], xmm1
	mov	ecx, edx
	lea	esi, DWORD PTR $T1[ebp]
	movupd	XMMWORD PTR $T1[ebp], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x3@N$01@glm@@QAE@ABU?$tmat2x2@N$01@1@@Z ENDP	; glm::tmat4x3<double,2>::tmat4x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$01@glm@@QAE@ABU?$tvec3@N$01@1@000@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
_v3$ = 20						; size = 4
??0?$tmat4x3@N$01@glm@@QAE@ABU?$tvec3@N$01@1@000@Z PROC	; glm::tmat4x3<double,2>::tmat4x3<double,2>, COMDAT
; _this$ = ecx

; 78   : 	{

	push	ebp
	mov	ebp, esp
	mov	edx, ecx
	xorps	xmm0, xmm0
	push	3
	pop	ecx
	lea	eax, DWORD PTR [edx+16]
$LL4@tmat4x3:
	dec	ecx
	movsd	QWORD PTR [eax], xmm0
	movups	XMMWORD PTR [eax-16], xmm0
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat4x3

; 79   : 		this->value[0] = v0;

	push	esi
	mov	esi, DWORD PTR _v0$[ebp]
	push	edi
	push	6
	pop	eax
	mov	ecx, eax
	mov	edi, edx
	rep movsd

; 80   : 		this->value[1] = v1;

	mov	esi, DWORD PTR _v1$[ebp]
	lea	edi, DWORD PTR [edx+24]
	mov	ecx, eax
	rep movsd

; 81   : 		this->value[2] = v2;

	mov	esi, DWORD PTR _v2$[ebp]
	lea	edi, DWORD PTR [edx+48]
	mov	ecx, eax
	rep movsd

; 82   : 		this->value[3] = v3;

	mov	esi, DWORD PTR _v3$[ebp]
	lea	edi, DWORD PTR [edx+72]
	mov	ecx, eax

; 83   : 	}

	mov	eax, edx
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	16					; 00000010H
??0?$tmat4x3@N$01@glm@@QAE@ABU?$tvec3@N$01@1@000@Z ENDP	; glm::tmat4x3<double,2>::tmat4x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$01@glm@@QAE@ABN00000000000@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
$T3 = -24						; size = 24
$T4 = -24						; size = 24
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_z0$ = 16						; size = 4
_x1$ = 20						; size = 4
_y1$ = 24						; size = 4
_z1$ = 28						; size = 4
_x2$ = 32						; size = 4
_y2$ = 36						; size = 4
_z2$ = 40						; size = 4
_x3$ = 44						; size = 4
_y3$ = 48						; size = 4
_z3$ = 52						; size = 4
??0?$tmat4x3@N$01@glm@@QAE@ABN00000000000@Z PROC	; glm::tmat4x3<double,2>::tmat4x3<double,2>, COMDAT
; _this$ = ecx

; 63   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xorps	xmm0, xmm0
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	3
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat4x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm0
	movups	XMMWORD PTR [eax-16], xmm0
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat4x3

; 64   : 		this->value[0] = col_type(x0, y0, z0);

	mov	eax, DWORD PTR _x0$[ebp]
	lea	esi, DWORD PTR $T4[ebp]
	push	6
	pop	edx
	mov	edi, ebx
	mov	ecx, edx
	movsd	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR _y0$[ebp]
	movsd	QWORD PTR $T4[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR _z0$[ebp]
	movsd	QWORD PTR $T4[ebp+8], xmm0
	movsd	xmm0, QWORD PTR [eax]

; 65   : 		this->value[1] = col_type(x1, y1, z1);

	mov	eax, DWORD PTR _x1$[ebp]
	movsd	QWORD PTR $T4[ebp+16], xmm0
	rep movsd
	movsd	xmm0, QWORD PTR [eax]
	lea	edi, DWORD PTR [ebx+24]
	mov	eax, DWORD PTR _y1$[ebp]
	mov	ecx, edx
	movsd	QWORD PTR $T3[ebp], xmm0
	lea	esi, DWORD PTR $T3[ebp]
	movsd	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR _z1$[ebp]
	movsd	QWORD PTR $T3[ebp+8], xmm0
	movsd	xmm0, QWORD PTR [eax]

; 66   : 		this->value[2] = col_type(x2, y2, z2);

	mov	eax, DWORD PTR _x2$[ebp]
	movsd	QWORD PTR $T3[ebp+16], xmm0
	rep movsd
	movsd	xmm0, QWORD PTR [eax]
	lea	edi, DWORD PTR [ebx+48]
	mov	eax, DWORD PTR _y2$[ebp]
	mov	ecx, edx
	movsd	QWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	movsd	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR _z2$[ebp]
	movsd	QWORD PTR $T2[ebp+8], xmm0
	movsd	xmm0, QWORD PTR [eax]

; 67   : 		this->value[3] = col_type(x3, y3, z3);

	mov	eax, DWORD PTR _x3$[ebp]
	movsd	QWORD PTR $T2[ebp+16], xmm0
	rep movsd
	movsd	xmm0, QWORD PTR [eax]
	lea	edi, DWORD PTR [ebx+72]
	mov	eax, DWORD PTR _y3$[ebp]
	mov	ecx, edx
	movsd	QWORD PTR $T1[ebp], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	movsd	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR _z3$[ebp]
	movsd	QWORD PTR $T1[ebp+8], xmm0
	movsd	xmm0, QWORD PTR [eax]

; 68   : 	}

	mov	eax, ebx
	movsd	QWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	48					; 00000030H
??0?$tmat4x3@N$01@glm@@QAE@ABN00000000000@Z ENDP	; glm::tmat4x3<double,2>::tmat4x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$01@glm@@QAE@ABN@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
$T3 = -24						; size = 24
$T4 = -24						; size = 24
_s$ = 8							; size = 4
??0?$tmat4x3@N$01@glm@@QAE@ABN@Z PROC			; glm::tmat4x3<double,2>::tmat4x3<double,2>, COMDAT
; _this$ = ecx

; 48   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xorps	xmm1, xmm1
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	3
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat4x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm1
	movups	XMMWORD PTR [eax-16], xmm1
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat4x3

; 49   : 		this->value[0] = col_type(s, 0, 0);

	mov	eax, DWORD PTR _s$[ebp]
	lea	esi, DWORD PTR $T4[ebp]
	push	6
	pop	edx
	mov	edi, ebx
	mov	ecx, edx
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR $T4[ebp], xmm0
	xorps	xmm0, xmm0
	movupd	XMMWORD PTR $T4[ebp+8], xmm0
	rep movsd

; 50   : 		this->value[1] = col_type(0, s, 0);

	movsd	xmm0, QWORD PTR [eax]
	lea	edi, DWORD PTR [ebx+24]
	movsd	QWORD PTR $T3[ebp+8], xmm0
	lea	esi, DWORD PTR $T3[ebp]
	movsd	QWORD PTR $T3[ebp], xmm1
	xorps	xmm0, xmm0
	movsd	QWORD PTR $T3[ebp+16], xmm1
	mov	ecx, edx
	rep movsd
	movupd	XMMWORD PTR $T2[ebp], xmm0

; 51   : 		this->value[2] = col_type(0, 0, s);

	lea	edi, DWORD PTR [ebx+48]
	mov	ecx, edx
	movsd	xmm0, QWORD PTR [eax]
	lea	esi, DWORD PTR $T2[ebp]
	movsd	QWORD PTR $T2[ebp+16], xmm0

; 52   : 		this->value[3] = col_type(0, 0, 0);
; 53   : 	}

	mov	eax, ebx
	rep movsd
	xorps	xmm0, xmm0
	movsd	QWORD PTR $T1[ebp+16], xmm1
	lea	edi, DWORD PTR [ebx+72]
	mov	ecx, edx
	lea	esi, DWORD PTR $T1[ebp]
	movupd	XMMWORD PTR $T1[ebp], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x3@N$01@glm@@QAE@ABN@Z ENDP			; glm::tmat4x3<double,2>::tmat4x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat4x3@N$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat4x3<double,2>::tmat4x3<double,2>, COMDAT
; _this$ = ecx

; 44   : 	{}

	push	3
	pop	edx
	lea	eax, DWORD PTR [ecx+16]
	xorps	xmm0, xmm0
$LL4@tmat4x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm0
	movups	XMMWORD PTR [eax-16], xmm0
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat4x3
	mov	eax, ecx
	ret	4
??0?$tmat4x3@N$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat4x3<double,2>::tmat4x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tmat4x3@N$01@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tmat4x3@N$01@glm@@QAE@ABU01@@Z PROC		; glm::tmat4x3<double,2>::tmat4x3<double,2>, COMDAT
; _this$ = ecx

; 218  : template struct tmat4x3<float64, lowp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	24					; 00000018H
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tmat4x3@N$01@glm@@QAE@ABU01@@Z ENDP		; glm::tmat4x3<double,2>::tmat4x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$01@glm@@QAE@XZ
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
$T3 = -24						; size = 24
$T4 = -24						; size = 24
??0?$tmat4x3@N$01@glm@@QAE@XZ PROC			; glm::tmat4x3<double,2>::tmat4x3<double,2>, COMDAT
; _this$ = ecx

; 11   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xorps	xmm1, xmm1
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	3
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat4x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm1
	movups	XMMWORD PTR [eax-16], xmm1
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat4x3

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0, 0);

	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	lea	esi, DWORD PTR $T4[ebp]
	movupd	XMMWORD PTR $T4[ebp], xmm0
	mov	edi, ebx
	movaps	xmm0, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	push	6
	pop	eax
	movsd	QWORD PTR $T4[ebp+16], xmm1
	mov	ecx, eax
	rep movsd
	movupd	XMMWORD PTR $T3[ebp], xmm0

; 14   : 				this->value[1] = col_type(0, 1, 0);

	lea	edi, DWORD PTR [ebx+24]
	mov	ecx, eax
	movsd	QWORD PTR $T3[ebp+16], xmm1
	lea	esi, DWORD PTR $T3[ebp]
	rep movsd
	xorps	xmm0, xmm0

; 15   : 				this->value[2] = col_type(0, 0, 1);

	lea	edi, DWORD PTR [ebx+48]
	movupd	XMMWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	mov	ecx, eax
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR $T2[ebp+16], xmm0
	xorps	xmm0, xmm0
	rep movsd

; 16   : 				this->value[3] = col_type(0, 0, 0);

	lea	edi, DWORD PTR [ebx+72]
	movsd	QWORD PTR $T1[ebp+16], xmm1
	mov	ecx, eax
	lea	esi, DWORD PTR $T1[ebp]
	movupd	XMMWORD PTR $T1[ebp], xmm0

; 17   : #			endif
; 18   : 		}

	mov	eax, ebx
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$tmat4x3@N$01@glm@@QAE@XZ ENDP			; glm::tmat4x3<double,2>::tmat4x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??F?$tmat4x3@M$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat4x3@M$01@glm@@QAE?AU01@H@Z PROC		; glm::tmat4x3<float,2>::operator--, COMDAT
; _this$ = ecx

; 346  : 	{

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi

; 347  : 		tmat4x3<T, P> Result(*this);

	mov	edi, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, ecx
	push	12					; 0000000cH
	pop	ecx
	mov	esi, eax
	rep movsd

; 348  : 		--*this;

	mov	ecx, eax
	call	??F?$tmat4x3@M$01@glm@@QAEAAU01@XZ	; glm::tmat4x3<float,2>::operator--

; 349  : 		return Result;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi

; 350  : 	}

	pop	ebp
	ret	8
??F?$tmat4x3@M$01@glm@@QAE?AU01@H@Z ENDP		; glm::tmat4x3<float,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??E?$tmat4x3@M$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat4x3@M$01@glm@@QAE?AU01@H@Z PROC		; glm::tmat4x3<float,2>::operator++, COMDAT
; _this$ = ecx

; 338  : 	{

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi

; 339  : 		tmat4x3<T, P> Result(*this);

	mov	edi, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, ecx
	push	12					; 0000000cH
	pop	ecx
	mov	esi, eax
	rep movsd

; 340  : 		++*this;

	mov	ecx, eax
	call	??E?$tmat4x3@M$01@glm@@QAEAAU01@XZ	; glm::tmat4x3<float,2>::operator++

; 341  : 		return Result;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi

; 342  : 	}

	pop	ebp
	ret	8
??E?$tmat4x3@M$01@glm@@QAE?AU01@H@Z ENDP		; glm::tmat4x3<float,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??F?$tmat4x3@M$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat4x3@M$01@glm@@QAEAAU01@XZ PROC			; glm::tmat4x3<float,2>::operator--, COMDAT
; _this$ = ecx

; 329  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 330  : 		--this->value[1];
; 331  : 		--this->value[2];
; 332  : 		--this->value[3];
; 333  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0

; 334  : 	}

	ret	0
??F?$tmat4x3@M$01@glm@@QAEAAU01@XZ ENDP			; glm::tmat4x3<float,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??E?$tmat4x3@M$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat4x3@M$01@glm@@QAEAAU01@XZ PROC			; glm::tmat4x3<float,2>::operator++, COMDAT
; _this$ = ecx

; 319  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 320  : 		++this->value[1];
; 321  : 		++this->value[2];
; 322  : 		++this->value[3];
; 323  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0

; 324  : 	}

	ret	0
??E?$tmat4x3@M$01@glm@@QAEAAU01@XZ ENDP			; glm::tmat4x3<float,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tmat4x3@M$01@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tmat4x3@M$01@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tmat4x3<float,2>::operator=, COMDAT
; _this$ = ecx

; 217  : template struct tmat4x3<float32, lowp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	12					; 0000000cH
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tmat4x3@M$01@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tmat4x3<float,2>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??A?$tmat4x3@M$01@glm@@QBEABU?$tvec3@M$01@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat4x3@M$01@glm@@QBEABU?$tvec3@M$01@1@H@Z PROC	; glm::tmat4x3<float,2>::operator[], COMDAT
; _this$ = ecx

; 218  : 	{

	push	ebp
	mov	ebp, esp

; 219  : 		assert(i < this->length());
; 220  : 		return this->value[i];

	imul	eax, DWORD PTR _i$[ebp], 12
	add	eax, ecx

; 221  : 	}

	pop	ebp
	ret	4
??A?$tmat4x3@M$01@glm@@QBEABU?$tvec3@M$01@1@H@Z ENDP	; glm::tmat4x3<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??A?$tmat4x3@M$01@glm@@QAEAAU?$tvec3@M$01@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat4x3@M$01@glm@@QAEAAU?$tvec3@M$01@1@H@Z PROC	; glm::tmat4x3<float,2>::operator[], COMDAT
; _this$ = ecx

; 211  : 	{

	push	ebp
	mov	ebp, esp

; 212  : 		assert(i < this->length());
; 213  : 		return this->value[i];

	imul	eax, DWORD PTR _i$[ebp], 12
	add	eax, ecx

; 214  : 	}

	pop	ebp
	ret	4
??A?$tmat4x3@M$01@glm@@QAEAAU?$tvec3@M$01@1@H@Z ENDP	; glm::tmat4x3<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.hpp
;	COMDAT ?length@?$tmat4x3@M$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat4x3@M$01@glm@@SAHXZ PROC			; glm::tmat4x3<float,2>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	push	4
	pop	eax
	ret	0
?length@?$tmat4x3@M$01@glm@@SAHXZ ENDP			; glm::tmat4x3<float,2>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$01@glm@@QAE@ABU?$tmat3x4@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
$T4 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat4x3@M$01@glm@@QAE@ABU?$tmat3x4@M$01@1@@Z PROC	; glm::tmat4x3<float,2>::tmat4x3<float,2>, COMDAT
; _this$ = ecx

; 200  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	lea	eax, DWORD PTR [ecx+8]
	push	3
	pop	edx
$LL4@tmat4x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat4x3

; 201  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T4[ebp]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T4[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T4[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T4[ebp+8], xmm0
	movsd
	movsd
	movsd

; 202  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [eax+16]
	lea	edi, DWORD PTR [ecx+12]
	movss	DWORD PTR $T3[ebp], xmm0
	lea	esi, DWORD PTR $T3[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+24]
	movss	DWORD PTR $T3[ebp+8], xmm0
	movsd
	movsd
	movsd

; 203  : 		this->value[2] = col_type(m[2]);

	movss	xmm0, DWORD PTR [eax+32]
	lea	edi, DWORD PTR [ecx+24]
	movss	DWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	movss	xmm0, DWORD PTR [eax+36]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+40]

; 204  : 		this->value[3] = col_type(0);
; 205  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T2[ebp+8], xmm0
	movsd
	movsd
	movsd
	and	DWORD PTR $T1[ebp], 0
	lea	edi, DWORD PTR [ecx+36]
	and	DWORD PTR $T1[ebp+4], 0
	lea	esi, DWORD PTR $T1[ebp]
	and	DWORD PTR $T1[ebp+8], 0
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x3@M$01@glm@@QAE@ABU?$tmat3x4@M$01@1@@Z ENDP	; glm::tmat4x3<float,2>::tmat4x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$01@glm@@QAE@ABU?$tmat4x2@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
$T4 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat4x3@M$01@glm@@QAE@ABU?$tmat4x2@M$01@1@@Z PROC	; glm::tmat4x3<float,2>::tmat4x3<float,2>, COMDAT
; _this$ = ecx

; 191  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	lea	eax, DWORD PTR [ecx+8]
	push	3
	pop	edx
$LL4@tmat4x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat4x3

; 192  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	and	DWORD PTR $T4[ebp+8], 0
	push	esi
	push	edi
	movss	xmm0, DWORD PTR [eax]
	lea	esi, DWORD PTR $T4[ebp]
	movss	DWORD PTR $T4[ebp], xmm0
	mov	edi, ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T4[ebp+4], xmm0
	movsd
	movsd
	movsd

; 193  : 		this->value[1] = col_type(m[1], 0);

	movss	xmm0, DWORD PTR [eax+8]
	lea	edi, DWORD PTR [ecx+12]
	and	DWORD PTR $T3[ebp+8], 0
	lea	esi, DWORD PTR $T3[ebp]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movsd
	movsd
	movsd

; 194  : 		this->value[2] = col_type(m[2], 1);

	movss	xmm0, DWORD PTR [eax+16]
	lea	edi, DWORD PTR [ecx+24]
	movss	DWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	DWORD PTR $T2[ebp+8], 1065353216	; 3f800000H
	movsd
	movsd
	movsd

; 195  : 		this->value[3] = col_type(m[3], 0);

	movss	xmm0, DWORD PTR [eax+24]
	lea	edi, DWORD PTR [ecx+36]
	and	DWORD PTR $T1[ebp+8], 0
	lea	esi, DWORD PTR $T1[ebp]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+28]

; 196  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+4], xmm0
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x3@M$01@glm@@QAE@ABU?$tmat4x2@M$01@1@@Z ENDP	; glm::tmat4x3<float,2>::tmat4x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$01@glm@@QAE@ABU?$tmat2x4@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
$T4 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat4x3@M$01@glm@@QAE@ABU?$tmat2x4@M$01@1@@Z PROC	; glm::tmat4x3<float,2>::tmat4x3<float,2>, COMDAT
; _this$ = ecx

; 182  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	lea	eax, DWORD PTR [ecx+8]
	push	3
	pop	edx
$LL4@tmat4x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat4x3

; 183  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T4[ebp]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T4[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T4[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T4[ebp+8], xmm0
	movsd
	movsd
	movsd

; 184  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [eax+16]
	lea	edi, DWORD PTR [ecx+12]
	movss	DWORD PTR $T3[ebp], xmm0
	lea	esi, DWORD PTR $T3[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+24]

; 185  : 		this->value[2] = col_type(0, 0, 1);
; 186  : 		this->value[3] = col_type(0);
; 187  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T3[ebp+8], xmm0
	movsd
	movsd
	movsd
	and	DWORD PTR $T2[ebp], 0
	lea	edi, DWORD PTR [ecx+24]
	and	DWORD PTR $T2[ebp+4], 0
	lea	esi, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T2[ebp+8], 1065353216	; 3f800000H
	movsd
	movsd
	movsd
	and	DWORD PTR $T1[ebp], 0
	lea	edi, DWORD PTR [ecx+36]
	and	DWORD PTR $T1[ebp+4], 0
	lea	esi, DWORD PTR $T1[ebp]
	and	DWORD PTR $T1[ebp+8], 0
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x3@M$01@glm@@QAE@ABU?$tmat2x4@M$01@1@@Z ENDP	; glm::tmat4x3<float,2>::tmat4x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$01@glm@@QAE@ABU?$tmat3x2@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
$T4 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat4x3@M$01@glm@@QAE@ABU?$tmat3x2@M$01@1@@Z PROC	; glm::tmat4x3<float,2>::tmat4x3<float,2>, COMDAT
; _this$ = ecx

; 173  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	lea	eax, DWORD PTR [ecx+8]
	push	3
	pop	edx
$LL4@tmat4x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat4x3

; 174  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	and	DWORD PTR $T4[ebp+8], 0
	push	esi
	push	edi
	movss	xmm0, DWORD PTR [eax]
	lea	esi, DWORD PTR $T4[ebp]
	movss	DWORD PTR $T4[ebp], xmm0
	mov	edi, ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T4[ebp+4], xmm0
	movsd
	movsd
	movsd

; 175  : 		this->value[1] = col_type(m[1], 0);

	movss	xmm0, DWORD PTR [eax+8]
	lea	edi, DWORD PTR [ecx+12]
	and	DWORD PTR $T3[ebp+8], 0
	lea	esi, DWORD PTR $T3[ebp]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movsd
	movsd
	movsd

; 176  : 		this->value[2] = col_type(m[2], 1);

	movss	xmm0, DWORD PTR [eax+16]
	lea	edi, DWORD PTR [ecx+24]
	movss	DWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	movss	xmm0, DWORD PTR [eax+20]

; 177  : 		this->value[3] = col_type(0);
; 178  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	DWORD PTR $T2[ebp+8], 1065353216	; 3f800000H
	movsd
	movsd
	movsd
	and	DWORD PTR $T1[ebp], 0
	lea	edi, DWORD PTR [ecx+36]
	and	DWORD PTR $T1[ebp+4], 0
	lea	esi, DWORD PTR $T1[ebp]
	and	DWORD PTR $T1[ebp+8], 0
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x3@M$01@glm@@QAE@ABU?$tmat3x2@M$01@1@@Z ENDP	; glm::tmat4x3<float,2>::tmat4x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$01@glm@@QAE@ABU?$tmat2x3@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
$T4 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat4x3@M$01@glm@@QAE@ABU?$tmat2x3@M$01@1@@Z PROC	; glm::tmat4x3<float,2>::tmat4x3<float,2>, COMDAT
; _this$ = ecx

; 164  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	lea	eax, DWORD PTR [ecx+8]
	push	3
	pop	edx
$LL4@tmat4x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat4x3

; 165  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	esi, eax
	lea	edi, DWORD PTR $T4[ebp]
	movsd
	movsd
	movsd
	mov	edi, ecx
	lea	esi, DWORD PTR $T4[ebp]
	movsd
	movsd
	movsd

; 166  : 		this->value[1] = col_type(m[1]);

	lea	esi, DWORD PTR [eax+12]

; 167  : 		this->value[2] = col_type(0, 0, 1);
; 168  : 		this->value[3] = col_type(0);
; 169  : 	}

	mov	eax, ecx
	lea	edi, DWORD PTR $T3[ebp]
	movsd
	movsd
	movsd
	lea	edi, DWORD PTR [ecx+12]
	lea	esi, DWORD PTR $T3[ebp]
	movsd
	movsd
	movsd
	and	DWORD PTR $T2[ebp], 0
	lea	edi, DWORD PTR [ecx+24]
	and	DWORD PTR $T2[ebp+4], 0
	lea	esi, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T2[ebp+8], 1065353216	; 3f800000H
	movsd
	movsd
	movsd
	and	DWORD PTR $T1[ebp], 0
	lea	edi, DWORD PTR [ecx+36]
	and	DWORD PTR $T1[ebp+4], 0
	lea	esi, DWORD PTR $T1[ebp]
	and	DWORD PTR $T1[ebp+8], 0
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x3@M$01@glm@@QAE@ABU?$tmat2x3@M$01@1@@Z ENDP	; glm::tmat4x3<float,2>::tmat4x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$01@glm@@QAE@ABU?$tmat4x4@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
$T4 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat4x3@M$01@glm@@QAE@ABU?$tmat4x4@M$01@1@@Z PROC	; glm::tmat4x3<float,2>::tmat4x3<float,2>, COMDAT
; _this$ = ecx

; 155  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	lea	eax, DWORD PTR [ecx+8]
	push	3
	pop	edx
$LL4@tmat4x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat4x3

; 156  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T4[ebp]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T4[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T4[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T4[ebp+8], xmm0
	movsd
	movsd
	movsd

; 157  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [eax+16]
	lea	edi, DWORD PTR [ecx+12]
	movss	DWORD PTR $T3[ebp], xmm0
	lea	esi, DWORD PTR $T3[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+24]
	movss	DWORD PTR $T3[ebp+8], xmm0
	movsd
	movsd
	movsd

; 158  : 		this->value[2] = col_type(m[2]);

	movss	xmm0, DWORD PTR [eax+32]
	lea	edi, DWORD PTR [ecx+24]
	movss	DWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	movss	xmm0, DWORD PTR [eax+36]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+40]
	movss	DWORD PTR $T2[ebp+8], xmm0
	movsd
	movsd
	movsd

; 159  : 		this->value[3] = col_type(m[3]);

	movss	xmm0, DWORD PTR [eax+48]
	lea	edi, DWORD PTR [ecx+36]
	movss	DWORD PTR $T1[ebp], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	movss	xmm0, DWORD PTR [eax+52]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+56]

; 160  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+8], xmm0
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x3@M$01@glm@@QAE@ABU?$tmat4x4@M$01@1@@Z ENDP	; glm::tmat4x3<float,2>::tmat4x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$01@glm@@QAE@ABU?$tmat3x3@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
$T4 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat4x3@M$01@glm@@QAE@ABU?$tmat3x3@M$01@1@@Z PROC	; glm::tmat4x3<float,2>::tmat4x3<float,2>, COMDAT
; _this$ = ecx

; 146  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	lea	eax, DWORD PTR [ecx+8]
	push	3
	pop	edx
$LL4@tmat4x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat4x3

; 147  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	esi, eax
	lea	edi, DWORD PTR $T4[ebp]
	movsd
	movsd
	movsd
	mov	edi, ecx
	lea	esi, DWORD PTR $T4[ebp]
	movsd
	movsd
	movsd

; 148  : 		this->value[1] = col_type(m[1]);

	lea	esi, DWORD PTR [eax+12]
	lea	edi, DWORD PTR $T3[ebp]
	movsd
	movsd
	movsd
	lea	edi, DWORD PTR [ecx+12]
	lea	esi, DWORD PTR $T3[ebp]
	movsd
	movsd
	movsd

; 149  : 		this->value[2] = col_type(m[2]);

	lea	esi, DWORD PTR [eax+24]

; 150  : 		this->value[3] = col_type(0);
; 151  : 	}

	mov	eax, ecx
	lea	edi, DWORD PTR $T2[ebp]
	movsd
	movsd
	movsd
	lea	edi, DWORD PTR [ecx+24]
	lea	esi, DWORD PTR $T2[ebp]
	movsd
	movsd
	movsd
	and	DWORD PTR $T1[ebp], 0
	lea	edi, DWORD PTR [ecx+36]
	and	DWORD PTR $T1[ebp+4], 0
	lea	esi, DWORD PTR $T1[ebp]
	and	DWORD PTR $T1[ebp+8], 0
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x3@M$01@glm@@QAE@ABU?$tmat3x3@M$01@1@@Z ENDP	; glm::tmat4x3<float,2>::tmat4x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$01@glm@@QAE@ABU?$tmat2x2@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
$T4 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat4x3@M$01@glm@@QAE@ABU?$tmat2x2@M$01@1@@Z PROC	; glm::tmat4x3<float,2>::tmat4x3<float,2>, COMDAT
; _this$ = ecx

; 137  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	lea	eax, DWORD PTR [ecx+8]
	push	3
	pop	edx
$LL4@tmat4x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat4x3

; 138  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	and	DWORD PTR $T4[ebp+8], 0
	push	esi
	push	edi
	movss	xmm0, DWORD PTR [eax]
	lea	esi, DWORD PTR $T4[ebp]
	movss	DWORD PTR $T4[ebp], xmm0
	mov	edi, ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T4[ebp+4], xmm0
	movsd
	movsd
	movsd

; 139  : 		this->value[1] = col_type(m[1], 0);

	movss	xmm0, DWORD PTR [eax+8]
	lea	edi, DWORD PTR [ecx+12]
	and	DWORD PTR $T3[ebp+8], 0
	lea	esi, DWORD PTR $T3[ebp]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+12]

; 140  : 		this->value[2] = col_type(0, 0, 1);
; 141  : 		this->value[3] = col_type(0);
; 142  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T3[ebp+4], xmm0
	movsd
	movsd
	movsd
	and	DWORD PTR $T2[ebp], 0
	lea	edi, DWORD PTR [ecx+24]
	and	DWORD PTR $T2[ebp+4], 0
	lea	esi, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T2[ebp+8], 1065353216	; 3f800000H
	movsd
	movsd
	movsd
	and	DWORD PTR $T1[ebp], 0
	lea	edi, DWORD PTR [ecx+36]
	and	DWORD PTR $T1[ebp+4], 0
	lea	esi, DWORD PTR $T1[ebp]
	and	DWORD PTR $T1[ebp+8], 0
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x3@M$01@glm@@QAE@ABU?$tmat2x2@M$01@1@@Z ENDP	; glm::tmat4x3<float,2>::tmat4x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$01@glm@@QAE@ABU?$tvec3@M$01@1@000@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
_v3$ = 20						; size = 4
??0?$tmat4x3@M$01@glm@@QAE@ABU?$tvec3@M$01@1@000@Z PROC	; glm::tmat4x3<float,2>::tmat4x3<float,2>, COMDAT
; _this$ = ecx

; 78   : 	{

	push	ebp
	mov	ebp, esp
	push	3
	pop	edx
	lea	eax, DWORD PTR [ecx+8]
$LL4@tmat4x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat4x3

; 79   : 		this->value[0] = v0;

	push	esi
	mov	esi, DWORD PTR _v0$[ebp]

; 80   : 		this->value[1] = v1;
; 81   : 		this->value[2] = v2;
; 82   : 		this->value[3] = v3;
; 83   : 	}

	mov	eax, ecx
	push	edi
	mov	edi, ecx
	movsd
	movsd
	movsd
	mov	esi, DWORD PTR _v1$[ebp]
	lea	edi, DWORD PTR [ecx+12]
	movsd
	movsd
	movsd
	mov	esi, DWORD PTR _v2$[ebp]
	lea	edi, DWORD PTR [ecx+24]
	movsd
	movsd
	movsd
	mov	esi, DWORD PTR _v3$[ebp]
	lea	edi, DWORD PTR [ecx+36]
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	16					; 00000010H
??0?$tmat4x3@M$01@glm@@QAE@ABU?$tvec3@M$01@1@000@Z ENDP	; glm::tmat4x3<float,2>::tmat4x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$01@glm@@QAE@ABM00000000000@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
$T4 = -12						; size = 12
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_z0$ = 16						; size = 4
_x1$ = 20						; size = 4
_y1$ = 24						; size = 4
_z1$ = 28						; size = 4
_x2$ = 32						; size = 4
_y2$ = 36						; size = 4
_z2$ = 40						; size = 4
_x3$ = 44						; size = 4
_y3$ = 48						; size = 4
_z3$ = 52						; size = 4
??0?$tmat4x3@M$01@glm@@QAE@ABM00000000000@Z PROC	; glm::tmat4x3<float,2>::tmat4x3<float,2>, COMDAT
; _this$ = ecx

; 63   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	lea	eax, DWORD PTR [ecx+8]
	push	3
	pop	edx
$LL4@tmat4x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat4x3

; 64   : 		this->value[0] = col_type(x0, y0, z0);

	mov	eax, DWORD PTR _x0$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T4[ebp]
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _y0$[ebp]
	movss	DWORD PTR $T4[ebp], xmm0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _z0$[ebp]
	movss	DWORD PTR $T4[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax]

; 65   : 		this->value[1] = col_type(x1, y1, z1);

	mov	eax, DWORD PTR _x1$[ebp]
	movss	DWORD PTR $T4[ebp+8], xmm0
	movsd
	movsd
	movsd
	movss	xmm0, DWORD PTR [eax]
	lea	edi, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _y1$[ebp]
	lea	esi, DWORD PTR $T3[ebp]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _z1$[ebp]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax]

; 66   : 		this->value[2] = col_type(x2, y2, z2);

	mov	eax, DWORD PTR _x2$[ebp]
	movss	DWORD PTR $T3[ebp+8], xmm0
	movsd
	movsd
	movsd
	movss	xmm0, DWORD PTR [eax]
	lea	edi, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR _y2$[ebp]
	lea	esi, DWORD PTR $T2[ebp]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _z2$[ebp]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax]

; 67   : 		this->value[3] = col_type(x3, y3, z3);

	mov	eax, DWORD PTR _x3$[ebp]
	movss	DWORD PTR $T2[ebp+8], xmm0
	movsd
	movsd
	movsd
	movss	xmm0, DWORD PTR [eax]
	lea	edi, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR _y3$[ebp]
	lea	esi, DWORD PTR $T1[ebp]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _z3$[ebp]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax]

; 68   : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+8], xmm0
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	48					; 00000030H
??0?$tmat4x3@M$01@glm@@QAE@ABM00000000000@Z ENDP	; glm::tmat4x3<float,2>::tmat4x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$01@glm@@QAE@ABM@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
$T4 = -12						; size = 12
_s$ = 8							; size = 4
??0?$tmat4x3@M$01@glm@@QAE@ABM@Z PROC			; glm::tmat4x3<float,2>::tmat4x3<float,2>, COMDAT
; _this$ = ecx

; 48   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	lea	eax, DWORD PTR [ecx+8]
	push	3
	pop	edx
$LL4@tmat4x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat4x3

; 49   : 		this->value[0] = col_type(s, 0, 0);

	and	DWORD PTR $T4[ebp+4], 0
	and	DWORD PTR $T4[ebp+8], 0
	mov	eax, DWORD PTR _s$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T4[ebp]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T4[ebp], xmm0
	movsd
	movsd
	movsd

; 50   : 		this->value[1] = col_type(0, s, 0);

	movss	xmm0, DWORD PTR [eax]
	lea	edi, DWORD PTR [ecx+12]
	and	DWORD PTR $T3[ebp], 0
	lea	esi, DWORD PTR $T3[ebp]
	and	DWORD PTR $T3[ebp+8], 0
	movss	DWORD PTR $T3[ebp+4], xmm0
	movsd
	movsd
	movsd

; 51   : 		this->value[2] = col_type(0, 0, s);

	movss	xmm0, DWORD PTR [eax]
	lea	edi, DWORD PTR [ecx+24]
	and	DWORD PTR $T2[ebp], 0
	lea	esi, DWORD PTR $T2[ebp]
	and	DWORD PTR $T2[ebp+4], 0

; 52   : 		this->value[3] = col_type(0, 0, 0);
; 53   : 	}

	mov	eax, ecx
	movss	DWORD PTR $T2[ebp+8], xmm0
	movsd
	movsd
	movsd
	and	DWORD PTR $T1[ebp], 0
	lea	edi, DWORD PTR [ecx+36]
	and	DWORD PTR $T1[ebp+4], 0
	lea	esi, DWORD PTR $T1[ebp]
	and	DWORD PTR $T1[ebp+8], 0
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x3@M$01@glm@@QAE@ABM@Z ENDP			; glm::tmat4x3<float,2>::tmat4x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat4x3@M$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat4x3<float,2>::tmat4x3<float,2>, COMDAT
; _this$ = ecx

; 44   : 	{}

	push	3
	pop	edx
	lea	eax, DWORD PTR [ecx+8]
$LL4@tmat4x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat4x3
	mov	eax, ecx
	ret	4
??0?$tmat4x3@M$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat4x3<float,2>::tmat4x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tmat4x3@M$01@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tmat4x3@M$01@glm@@QAE@ABU01@@Z PROC		; glm::tmat4x3<float,2>::tmat4x3<float,2>, COMDAT
; _this$ = ecx

; 217  : template struct tmat4x3<float32, lowp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	12					; 0000000cH
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tmat4x3@M$01@glm@@QAE@ABU01@@Z ENDP		; glm::tmat4x3<float,2>::tmat4x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$01@glm@@QAE@XZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
$T4 = -12						; size = 12
??0?$tmat4x3@M$01@glm@@QAE@XZ PROC			; glm::tmat4x3<float,2>::tmat4x3<float,2>, COMDAT
; _this$ = ecx

; 11   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	lea	eax, DWORD PTR [ecx+8]
	push	3
	pop	edx
$LL4@tmat4x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat4x3

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0, 0);

	and	DWORD PTR $T4[ebp+4], 0

; 14   : 				this->value[1] = col_type(0, 1, 0);
; 15   : 				this->value[2] = col_type(0, 0, 1);
; 16   : 				this->value[3] = col_type(0, 0, 0);
; 17   : #			endif
; 18   : 		}

	mov	eax, ecx
	and	DWORD PTR $T4[ebp+8], 0
	push	esi
	push	edi
	mov	DWORD PTR $T4[ebp], 1065353216		; 3f800000H
	lea	esi, DWORD PTR $T4[ebp]
	mov	edi, ecx
	movsd
	movsd
	movsd
	and	DWORD PTR $T3[ebp], 0
	lea	edi, DWORD PTR [ecx+12]
	and	DWORD PTR $T3[ebp+8], 0
	lea	esi, DWORD PTR $T3[ebp]
	mov	DWORD PTR $T3[ebp+4], 1065353216	; 3f800000H
	movsd
	movsd
	movsd
	and	DWORD PTR $T2[ebp], 0
	lea	edi, DWORD PTR [ecx+24]
	and	DWORD PTR $T2[ebp+4], 0
	lea	esi, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T2[ebp+8], 1065353216	; 3f800000H
	movsd
	movsd
	movsd
	and	DWORD PTR $T1[ebp], 0
	lea	edi, DWORD PTR [ecx+36]
	and	DWORD PTR $T1[ebp+4], 0
	lea	esi, DWORD PTR $T1[ebp]
	and	DWORD PTR $T1[ebp+8], 0
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$tmat4x3@M$01@glm@@QAE@XZ ENDP			; glm::tmat4x3<float,2>::tmat4x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??F?$tmat4x2@N$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat4x2@N$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tmat4x2<double,0>::operator--, COMDAT
; _this$ = ecx

; 353  : 	{

	push	ebp
	mov	ebp, esp

; 354  : 		tmat4x2<T, P> Result(*this);
; 355  : 		--*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	mov	edx, ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	movups	xmm0, XMMWORD PTR [edx]
	push	16					; 00000010H
	pop	ecx
	subpd	xmm0, xmm1
	mov	esi, edx
	mov	edi, eax
	rep movsd
	movups	XMMWORD PTR [edx], xmm0
	pop	edi
	movups	xmm0, XMMWORD PTR [edx+16]
	pop	esi
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+16], xmm0
	movups	xmm0, XMMWORD PTR [edx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+32], xmm0
	movups	xmm0, XMMWORD PTR [edx+48]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+48], xmm0

; 356  : 		return Result;
; 357  : 	}

	pop	ebp
	ret	8
??F?$tmat4x2@N$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tmat4x2<double,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??E?$tmat4x2@N$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat4x2@N$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tmat4x2<double,0>::operator++, COMDAT
; _this$ = ecx

; 345  : 	{

	push	ebp
	mov	ebp, esp

; 346  : 		tmat4x2<T, P> Result(*this);
; 347  : 		++*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	mov	edx, ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	movups	xmm0, XMMWORD PTR [edx]
	push	16					; 00000010H
	pop	ecx
	addpd	xmm0, xmm1
	mov	esi, edx
	mov	edi, eax
	rep movsd
	movups	XMMWORD PTR [edx], xmm0
	pop	edi
	movups	xmm0, XMMWORD PTR [edx+16]
	pop	esi
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+16], xmm0
	movups	xmm0, XMMWORD PTR [edx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+32], xmm0
	movups	xmm0, XMMWORD PTR [edx+48]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+48], xmm0

; 348  : 		return Result;
; 349  : 	}

	pop	ebp
	ret	8
??E?$tmat4x2@N$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tmat4x2<double,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??F?$tmat4x2@N$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat4x2@N$0A@@glm@@QAEAAU01@XZ PROC		; glm::tmat4x2<double,0>::operator--, COMDAT
; _this$ = ecx

; 336  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 337  : 		--this->value[1];
; 338  : 		--this->value[2];
; 339  : 		--this->value[3];
; 340  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0

; 341  : 	}

	ret	0
??F?$tmat4x2@N$0A@@glm@@QAEAAU01@XZ ENDP		; glm::tmat4x2<double,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??E?$tmat4x2@N$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat4x2@N$0A@@glm@@QAEAAU01@XZ PROC		; glm::tmat4x2<double,0>::operator++, COMDAT
; _this$ = ecx

; 326  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 327  : 		++this->value[1];
; 328  : 		++this->value[2];
; 329  : 		++this->value[3];
; 330  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0

; 331  : 	}

	ret	0
??E?$tmat4x2@N$0A@@glm@@QAEAAU01@XZ ENDP		; glm::tmat4x2<double,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tmat4x2@N$0A@@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tmat4x2@N$0A@@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tmat4x2<double,0>::operator=, COMDAT
; _this$ = ecx

; 214  : template struct tmat4x2<float64, highp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	16					; 00000010H
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tmat4x2@N$0A@@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tmat4x2<double,0>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??A?$tmat4x2@N$0A@@glm@@QBEABU?$tvec2@N$0A@@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat4x2@N$0A@@glm@@QBEABU?$tvec2@N$0A@@1@H@Z PROC	; glm::tmat4x2<double,0>::operator[], COMDAT
; _this$ = ecx

; 225  : 	{

	push	ebp
	mov	ebp, esp

; 226  : 		assert(i < this->length());
; 227  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, ecx

; 228  : 	}

	pop	ebp
	ret	4
??A?$tmat4x2@N$0A@@glm@@QBEABU?$tvec2@N$0A@@1@H@Z ENDP	; glm::tmat4x2<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??A?$tmat4x2@N$0A@@glm@@QAEAAU?$tvec2@N$0A@@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat4x2@N$0A@@glm@@QAEAAU?$tvec2@N$0A@@1@H@Z PROC	; glm::tmat4x2<double,0>::operator[], COMDAT
; _this$ = ecx

; 218  : 	{

	push	ebp
	mov	ebp, esp

; 219  : 		assert(i < this->length());
; 220  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, ecx

; 221  : 	}

	pop	ebp
	ret	4
??A?$tmat4x2@N$0A@@glm@@QAEAAU?$tvec2@N$0A@@1@H@Z ENDP	; glm::tmat4x2<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.hpp
;	COMDAT ?length@?$tmat4x2@N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat4x2@N$0A@@glm@@SAHXZ PROC			; glm::tmat4x2<double,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	push	4
	pop	eax
	ret	0
?length@?$tmat4x2@N$0A@@glm@@SAHXZ ENDP			; glm::tmat4x2<double,0>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$0A@@glm@@QAE@ABU?$tmat3x4@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
$T4 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat4x2@N$0A@@glm@@QAE@ABU?$tmat3x4@N$0A@@1@@Z PROC ; glm::tmat4x2<double,0>::tmat4x2<double,0>, COMDAT
; _this$ = ecx

; 207  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	xorps	xmm0, xmm0
	push	3
	pop	edx
$LL4@tmat4x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat4x2

; 208  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T4[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR $T4[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 209  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+32]
	lea	edi, DWORD PTR [ecx+16]
	lea	esi, DWORD PTR $T3[ebp]
	movups	XMMWORD PTR $T3[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 210  : 		this->value[2] = col_type(m[2]);

	movups	xmm0, XMMWORD PTR [eax+64]
	lea	edi, DWORD PTR [ecx+32]

; 211  : 		this->value[3] = col_type(0);
; 212  : 	}

	mov	eax, ecx
	lea	esi, DWORD PTR $T2[ebp]
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd
	xorps	xmm0, xmm0
	movsd
	movsd
	movsd
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+48]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x2@N$0A@@glm@@QAE@ABU?$tmat3x4@N$0A@@1@@Z ENDP ; glm::tmat4x2<double,0>::tmat4x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$0A@@glm@@QAE@ABU?$tmat4x3@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
$T4 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat4x2@N$0A@@glm@@QAE@ABU?$tmat4x3@N$0A@@1@@Z PROC ; glm::tmat4x2<double,0>::tmat4x2<double,0>, COMDAT
; _this$ = ecx

; 198  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	xorps	xmm0, xmm0
	push	3
	pop	edx
$LL4@tmat4x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat4x2

; 199  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T4[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR $T4[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 200  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+24]
	lea	edi, DWORD PTR [ecx+16]
	lea	esi, DWORD PTR $T3[ebp]
	movups	XMMWORD PTR $T3[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 201  : 		this->value[2] = col_type(m[2]);

	movups	xmm0, XMMWORD PTR [eax+48]
	lea	edi, DWORD PTR [ecx+32]
	lea	esi, DWORD PTR $T2[ebp]
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 202  : 		this->value[3] = col_type(m[3]);

	movups	xmm0, XMMWORD PTR [eax+72]
	lea	edi, DWORD PTR [ecx+48]

; 203  : 	}

	mov	eax, ecx
	lea	esi, DWORD PTR $T1[ebp]
	movups	XMMWORD PTR $T1[ebp], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x2@N$0A@@glm@@QAE@ABU?$tmat4x3@N$0A@@1@@Z ENDP ; glm::tmat4x2<double,0>::tmat4x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$0A@@glm@@QAE@ABU?$tmat2x4@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
$T4 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat4x2@N$0A@@glm@@QAE@ABU?$tmat2x4@N$0A@@1@@Z PROC ; glm::tmat4x2<double,0>::tmat4x2<double,0>, COMDAT
; _this$ = ecx

; 189  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	xorps	xmm0, xmm0
	push	3
	pop	edx
$LL4@tmat4x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat4x2

; 190  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T4[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR $T4[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 191  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+32]
	lea	edi, DWORD PTR [ecx+16]

; 192  : 		this->value[2] = col_type(0);
; 193  : 		this->value[3] = col_type(0);
; 194  : 	}

	mov	eax, ecx
	lea	esi, DWORD PTR $T3[ebp]
	movups	XMMWORD PTR $T3[ebp], xmm0
	movsd
	xorps	xmm0, xmm0
	movsd
	movsd
	movsd
	movupd	XMMWORD PTR $T2[ebp], xmm0
	lea	edi, DWORD PTR [ecx+32]
	lea	esi, DWORD PTR $T2[ebp]
	movsd
	movsd
	movsd
	movsd
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+48]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x2@N$0A@@glm@@QAE@ABU?$tmat2x4@N$0A@@1@@Z ENDP ; glm::tmat4x2<double,0>::tmat4x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$0A@@glm@@QAE@ABU?$tmat3x2@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
$T4 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat4x2@N$0A@@glm@@QAE@ABU?$tmat3x2@N$0A@@1@@Z PROC ; glm::tmat4x2<double,0>::tmat4x2<double,0>, COMDAT
; _this$ = ecx

; 180  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	xorps	xmm0, xmm0
	push	3
	pop	edx
$LL4@tmat4x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat4x2

; 181  : 		this->value[0] = col_type(m[0]);

	push	esi
	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	push	edi
	mov	esi, eax
	lea	edi, DWORD PTR $T4[ebp]
	movsd
	movsd
	movsd
	movsd
	mov	edi, ecx
	lea	esi, DWORD PTR $T4[ebp]
	movsd
	movsd
	movsd
	movsd

; 182  : 		this->value[1] = col_type(m[1]);

	lea	esi, DWORD PTR [eax+16]
	lea	edi, DWORD PTR $T3[ebp]
	movsd
	movsd
	movsd
	movsd
	lea	edi, DWORD PTR [ecx+16]
	lea	esi, DWORD PTR $T3[ebp]
	movsd
	movsd
	movsd
	movsd

; 183  : 		this->value[2] = col_type(m[2]);

	lea	esi, DWORD PTR [eax+32]

; 184  : 		this->value[3] = col_type(0);
; 185  : 	}

	mov	eax, ecx
	lea	edi, DWORD PTR $T2[ebp]
	movsd
	movsd
	movsd
	movsd
	lea	edi, DWORD PTR [ecx+32]
	lea	esi, DWORD PTR $T2[ebp]
	movsd
	movsd
	movsd
	movsd
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+48]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x2@N$0A@@glm@@QAE@ABU?$tmat3x2@N$0A@@1@@Z ENDP ; glm::tmat4x2<double,0>::tmat4x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$0A@@glm@@QAE@ABU?$tmat2x3@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
$T4 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat4x2@N$0A@@glm@@QAE@ABU?$tmat2x3@N$0A@@1@@Z PROC ; glm::tmat4x2<double,0>::tmat4x2<double,0>, COMDAT
; _this$ = ecx

; 171  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	xorps	xmm0, xmm0
	push	3
	pop	edx
$LL4@tmat4x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat4x2

; 172  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T4[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR $T4[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 173  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+24]
	lea	edi, DWORD PTR [ecx+16]

; 174  : 		this->value[2] = col_type(0);
; 175  : 		this->value[3] = col_type(0);
; 176  : 	}

	mov	eax, ecx
	lea	esi, DWORD PTR $T3[ebp]
	movups	XMMWORD PTR $T3[ebp], xmm0
	movsd
	xorps	xmm0, xmm0
	movsd
	movsd
	movsd
	movupd	XMMWORD PTR $T2[ebp], xmm0
	lea	edi, DWORD PTR [ecx+32]
	lea	esi, DWORD PTR $T2[ebp]
	movsd
	movsd
	movsd
	movsd
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+48]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x2@N$0A@@glm@@QAE@ABU?$tmat2x3@N$0A@@1@@Z ENDP ; glm::tmat4x2<double,0>::tmat4x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$0A@@glm@@QAE@ABU?$tmat4x4@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
$T4 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat4x2@N$0A@@glm@@QAE@ABU?$tmat4x4@N$0A@@1@@Z PROC ; glm::tmat4x2<double,0>::tmat4x2<double,0>, COMDAT
; _this$ = ecx

; 162  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	xorps	xmm0, xmm0
	push	3
	pop	edx
$LL4@tmat4x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat4x2

; 163  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T4[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR $T4[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 164  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+32]
	lea	edi, DWORD PTR [ecx+16]
	lea	esi, DWORD PTR $T3[ebp]
	movups	XMMWORD PTR $T3[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 165  : 		this->value[2] = col_type(m[2]);

	movups	xmm0, XMMWORD PTR [eax+64]
	lea	edi, DWORD PTR [ecx+32]
	lea	esi, DWORD PTR $T2[ebp]
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 166  : 		this->value[3] = col_type(m[3]);

	movups	xmm0, XMMWORD PTR [eax+96]
	lea	edi, DWORD PTR [ecx+48]

; 167  : 	}

	mov	eax, ecx
	lea	esi, DWORD PTR $T1[ebp]
	movups	XMMWORD PTR $T1[ebp], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x2@N$0A@@glm@@QAE@ABU?$tmat4x4@N$0A@@1@@Z ENDP ; glm::tmat4x2<double,0>::tmat4x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$0A@@glm@@QAE@ABU?$tmat3x3@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
$T4 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat4x2@N$0A@@glm@@QAE@ABU?$tmat3x3@N$0A@@1@@Z PROC ; glm::tmat4x2<double,0>::tmat4x2<double,0>, COMDAT
; _this$ = ecx

; 153  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	xorps	xmm0, xmm0
	push	3
	pop	edx
$LL4@tmat4x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat4x2

; 154  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T4[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR $T4[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 155  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+24]
	lea	edi, DWORD PTR [ecx+16]
	lea	esi, DWORD PTR $T3[ebp]
	movups	XMMWORD PTR $T3[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 156  : 		this->value[2] = col_type(m[2]);

	movups	xmm0, XMMWORD PTR [eax+48]
	lea	edi, DWORD PTR [ecx+32]

; 157  : 		this->value[3] = col_type(0);
; 158  : 	}

	mov	eax, ecx
	lea	esi, DWORD PTR $T2[ebp]
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd
	xorps	xmm0, xmm0
	movsd
	movsd
	movsd
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+48]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x2@N$0A@@glm@@QAE@ABU?$tmat3x3@N$0A@@1@@Z ENDP ; glm::tmat4x2<double,0>::tmat4x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$0A@@glm@@QAE@ABU?$tmat2x2@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
$T4 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat4x2@N$0A@@glm@@QAE@ABU?$tmat2x2@N$0A@@1@@Z PROC ; glm::tmat4x2<double,0>::tmat4x2<double,0>, COMDAT
; _this$ = ecx

; 144  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	xorps	xmm0, xmm0
	push	3
	pop	edx
$LL4@tmat4x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat4x2

; 145  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	push	esi
	push	edi
	mov	esi, eax
	lea	edi, DWORD PTR $T4[ebp]
	movsd
	movsd
	movsd
	movsd
	mov	edi, ecx
	lea	esi, DWORD PTR $T4[ebp]
	movsd
	movsd
	movsd
	movsd

; 146  : 		this->value[1] = col_type(m[1]);

	lea	esi, DWORD PTR [eax+16]

; 147  : 		this->value[2] = col_type(0);
; 148  : 		this->value[3] = col_type(0);
; 149  : 	}

	mov	eax, ecx
	lea	edi, DWORD PTR $T3[ebp]
	movsd
	movsd
	movsd
	movsd
	lea	edi, DWORD PTR [ecx+16]
	lea	esi, DWORD PTR $T3[ebp]
	movsd
	movsd
	movsd
	movsd
	movupd	XMMWORD PTR $T2[ebp], xmm0
	lea	edi, DWORD PTR [ecx+32]
	lea	esi, DWORD PTR $T2[ebp]
	movsd
	movsd
	movsd
	movsd
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+48]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x2@N$0A@@glm@@QAE@ABU?$tmat2x2@N$0A@@1@@Z ENDP ; glm::tmat4x2<double,0>::tmat4x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$0A@@glm@@QAE@ABU?$tvec2@N$0A@@1@000@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
_v3$ = 20						; size = 4
??0?$tmat4x2@N$0A@@glm@@QAE@ABU?$tvec2@N$0A@@1@000@Z PROC ; glm::tmat4x2<double,0>::tmat4x2<double,0>, COMDAT
; _this$ = ecx

; 85   : 	{

	push	ebp
	mov	ebp, esp
	push	3
	mov	eax, ecx
	xorps	xmm0, xmm0
	pop	edx
$LL4@tmat4x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat4x2

; 86   : 		this->value[0] = v0;

	push	esi
	mov	esi, DWORD PTR _v0$[ebp]

; 87   : 		this->value[1] = v1;
; 88   : 		this->value[2] = v2;
; 89   : 		this->value[3] = v3;
; 90   : 	}

	mov	eax, ecx
	push	edi
	mov	edi, ecx
	movsd
	movsd
	movsd
	movsd
	mov	esi, DWORD PTR _v1$[ebp]
	lea	edi, DWORD PTR [ecx+16]
	movsd
	movsd
	movsd
	movsd
	mov	esi, DWORD PTR _v2$[ebp]
	lea	edi, DWORD PTR [ecx+32]
	movsd
	movsd
	movsd
	movsd
	mov	esi, DWORD PTR _v3$[ebp]
	lea	edi, DWORD PTR [ecx+48]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	16					; 00000010H
??0?$tmat4x2@N$0A@@glm@@QAE@ABU?$tvec2@N$0A@@1@000@Z ENDP ; glm::tmat4x2<double,0>::tmat4x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$0A@@glm@@QAE@NNNNNNNN@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
$T4 = -16						; size = 16
_x0$ = 8						; size = 8
_y0$ = 16						; size = 8
_x1$ = 24						; size = 8
_y1$ = 32						; size = 8
_x2$ = 40						; size = 8
_y2$ = 48						; size = 8
_x3$ = 56						; size = 8
_y3$ = 64						; size = 8
??0?$tmat4x2@N$0A@@glm@@QAE@NNNNNNNN@Z PROC		; glm::tmat4x2<double,0>::tmat4x2<double,0>, COMDAT
; _this$ = ecx

; 70   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	xorps	xmm0, xmm0
	push	3
	pop	edx
$LL4@tmat4x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat4x2

; 71   : 		this->value[0] = col_type(x0, y0);

	movsd	xmm0, QWORD PTR _x0$[ebp]

; 72   : 		this->value[1] = col_type(x1, y1);
; 73   : 		this->value[2] = col_type(x2, y2);
; 74   : 		this->value[3] = col_type(x3, y3);
; 75   : 	}

	mov	eax, ecx
	push	esi
	push	edi
	movsd	QWORD PTR $T4[ebp], xmm0
	lea	esi, DWORD PTR $T4[ebp]
	movsd	xmm0, QWORD PTR _y0$[ebp]
	mov	edi, ecx
	movsd	QWORD PTR $T4[ebp+8], xmm0
	movsd	xmm0, QWORD PTR _x1$[ebp]
	movsd
	movsd
	movsd
	movsd
	movsd	QWORD PTR $T3[ebp], xmm0
	lea	edi, DWORD PTR [ecx+16]
	movsd	xmm0, QWORD PTR _y1$[ebp]
	lea	esi, DWORD PTR $T3[ebp]
	movsd	QWORD PTR $T3[ebp+8], xmm0
	movsd
	movsd	xmm0, QWORD PTR _x2$[ebp]
	movsd
	movsd
	movsd
	movsd	QWORD PTR $T2[ebp], xmm0
	lea	edi, DWORD PTR [ecx+32]
	movsd	xmm0, QWORD PTR _y2$[ebp]
	lea	esi, DWORD PTR $T2[ebp]
	movsd	QWORD PTR $T2[ebp+8], xmm0
	movsd	xmm0, QWORD PTR _x3$[ebp]
	movsd
	movsd
	movsd
	movsd
	movsd	QWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+48]
	movsd	xmm0, QWORD PTR _y3$[ebp]
	lea	esi, DWORD PTR $T1[ebp]
	movsd	QWORD PTR $T1[ebp+8], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	64					; 00000040H
??0?$tmat4x2@N$0A@@glm@@QAE@NNNNNNNN@Z ENDP		; glm::tmat4x2<double,0>::tmat4x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$0A@@glm@@QAE@N@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
$T4 = -16						; size = 16
_scalar$ = 8						; size = 8
??0?$tmat4x2@N$0A@@glm@@QAE@N@Z PROC			; glm::tmat4x2<double,0>::tmat4x2<double,0>, COMDAT
; _this$ = ecx

; 55   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	xorps	xmm1, xmm1
	push	3
	pop	edx
$LL4@tmat4x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm1
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat4x2

; 56   : 		this->value[0] = col_type(scalar, 0);

	movsd	xmm0, QWORD PTR _scalar$[ebp]

; 57   : 		this->value[1] = col_type(0, scalar);
; 58   : 		this->value[2] = col_type(0, 0);
; 59   : 		this->value[3] = col_type(0, 0);
; 60   : 	}

	mov	eax, ecx
	push	esi
	push	edi
	movsd	QWORD PTR $T4[ebp], xmm0
	lea	esi, DWORD PTR $T4[ebp]
	movsd	QWORD PTR $T4[ebp+8], xmm1
	mov	edi, ecx
	movsd
	movsd
	movsd
	movsd
	movsd	QWORD PTR $T3[ebp+8], xmm0
	lea	edi, DWORD PTR [ecx+16]
	movsd	QWORD PTR $T3[ebp], xmm1
	lea	esi, DWORD PTR $T3[ebp]
	movsd
	xorps	xmm0, xmm0
	movsd
	movsd
	movsd
	movupd	XMMWORD PTR $T2[ebp], xmm0
	lea	edi, DWORD PTR [ecx+32]
	lea	esi, DWORD PTR $T2[ebp]
	movsd
	movsd
	movsd
	movsd
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+48]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$tmat4x2@N$0A@@glm@@QAE@N@Z ENDP			; glm::tmat4x2<double,0>::tmat4x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat4x2@N$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat4x2<double,0>::tmat4x2<double,0>, COMDAT
; _this$ = ecx

; 51   : 	{}

	push	3
	mov	eax, ecx
	xorps	xmm0, xmm0
	pop	edx
$LL4@tmat4x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat4x2
	mov	eax, ecx
	ret	4
??0?$tmat4x2@N$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat4x2<double,0>::tmat4x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tmat4x2@N$0A@@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tmat4x2@N$0A@@glm@@QAE@ABU01@@Z PROC		; glm::tmat4x2<double,0>::tmat4x2<double,0>, COMDAT
; _this$ = ecx

; 214  : template struct tmat4x2<float64, highp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	16					; 00000010H
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tmat4x2@N$0A@@glm@@QAE@ABU01@@Z ENDP		; glm::tmat4x2<double,0>::tmat4x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
$T4 = -16						; size = 16
??0?$tmat4x2@N$0A@@glm@@QAE@XZ PROC			; glm::tmat4x2<double,0>::tmat4x2<double,0>, COMDAT
; _this$ = ecx

; 18   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	xorps	xmm0, xmm0
	push	3
	pop	edx
$LL4@tmat4x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat4x2

; 19   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 20   : 				this->value[0] = col_type(1, 0);
; 21   : 				this->value[1] = col_type(0, 1);
; 22   : 				this->value[2] = col_type(0, 0);
; 23   : 				this->value[3] = col_type(0, 0);
; 24   : #			endif
; 25   : 		}

	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	mov	eax, ecx
	push	esi
	push	edi
	movupd	XMMWORD PTR $T4[ebp], xmm0
	lea	esi, DWORD PTR $T4[ebp]
	mov	edi, ecx
	movaps	xmm0, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	movsd
	movsd
	movsd
	movsd
	movupd	XMMWORD PTR $T3[ebp], xmm0
	lea	edi, DWORD PTR [ecx+16]
	lea	esi, DWORD PTR $T3[ebp]
	xorps	xmm0, xmm0
	movsd
	movsd
	movsd
	movsd
	movupd	XMMWORD PTR $T2[ebp], xmm0
	lea	edi, DWORD PTR [ecx+32]
	lea	esi, DWORD PTR $T2[ebp]
	movsd
	movsd
	movsd
	movsd
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+48]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$tmat4x2@N$0A@@glm@@QAE@XZ ENDP			; glm::tmat4x2<double,0>::tmat4x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??F?$tmat4x2@M$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat4x2@M$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tmat4x2<float,0>::operator--, COMDAT
; _this$ = ecx

; 353  : 	{

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi

; 354  : 		tmat4x2<T, P> Result(*this);

	mov	edi, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, ecx
	push	8
	pop	ecx
	mov	esi, eax
	rep movsd

; 355  : 		--*this;

	mov	ecx, eax
	call	??F?$tmat4x2@M$0A@@glm@@QAEAAU01@XZ	; glm::tmat4x2<float,0>::operator--

; 356  : 		return Result;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi

; 357  : 	}

	pop	ebp
	ret	8
??F?$tmat4x2@M$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tmat4x2<float,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??E?$tmat4x2@M$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat4x2@M$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tmat4x2<float,0>::operator++, COMDAT
; _this$ = ecx

; 345  : 	{

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi

; 346  : 		tmat4x2<T, P> Result(*this);

	mov	edi, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, ecx
	push	8
	pop	ecx
	mov	esi, eax
	rep movsd

; 347  : 		++*this;

	mov	ecx, eax
	call	??E?$tmat4x2@M$0A@@glm@@QAEAAU01@XZ	; glm::tmat4x2<float,0>::operator++

; 348  : 		return Result;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi

; 349  : 	}

	pop	ebp
	ret	8
??E?$tmat4x2@M$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tmat4x2<float,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??F?$tmat4x2@M$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat4x2@M$0A@@glm@@QAEAAU01@XZ PROC		; glm::tmat4x2<float,0>::operator--, COMDAT
; _this$ = ecx

; 336  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 337  : 		--this->value[1];
; 338  : 		--this->value[2];
; 339  : 		--this->value[3];
; 340  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0

; 341  : 	}

	ret	0
??F?$tmat4x2@M$0A@@glm@@QAEAAU01@XZ ENDP		; glm::tmat4x2<float,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??E?$tmat4x2@M$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat4x2@M$0A@@glm@@QAEAAU01@XZ PROC		; glm::tmat4x2<float,0>::operator++, COMDAT
; _this$ = ecx

; 326  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 327  : 		++this->value[1];
; 328  : 		++this->value[2];
; 329  : 		++this->value[3];
; 330  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0

; 331  : 	}

	ret	0
??E?$tmat4x2@M$0A@@glm@@QAEAAU01@XZ ENDP		; glm::tmat4x2<float,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tmat4x2@M$0A@@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tmat4x2@M$0A@@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tmat4x2<float,0>::operator=, COMDAT
; _this$ = ecx

; 213  : template struct tmat4x2<float32, highp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	8
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tmat4x2@M$0A@@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tmat4x2<float,0>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??A?$tmat4x2@M$0A@@glm@@QBEABU?$tvec2@M$0A@@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat4x2@M$0A@@glm@@QBEABU?$tvec2@M$0A@@1@H@Z PROC	; glm::tmat4x2<float,0>::operator[], COMDAT
; _this$ = ecx

; 225  : 	{

	push	ebp
	mov	ebp, esp

; 226  : 		assert(i < this->length());
; 227  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 228  : 	}

	pop	ebp
	ret	4
??A?$tmat4x2@M$0A@@glm@@QBEABU?$tvec2@M$0A@@1@H@Z ENDP	; glm::tmat4x2<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??A?$tmat4x2@M$0A@@glm@@QAEAAU?$tvec2@M$0A@@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat4x2@M$0A@@glm@@QAEAAU?$tvec2@M$0A@@1@H@Z PROC	; glm::tmat4x2<float,0>::operator[], COMDAT
; _this$ = ecx

; 218  : 	{

	push	ebp
	mov	ebp, esp

; 219  : 		assert(i < this->length());
; 220  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 221  : 	}

	pop	ebp
	ret	4
??A?$tmat4x2@M$0A@@glm@@QAEAAU?$tvec2@M$0A@@1@H@Z ENDP	; glm::tmat4x2<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.hpp
;	COMDAT ?length@?$tmat4x2@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat4x2@M$0A@@glm@@SAHXZ PROC			; glm::tmat4x2<float,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	push	4
	pop	eax
	ret	0
?length@?$tmat4x2@M$0A@@glm@@SAHXZ ENDP			; glm::tmat4x2<float,0>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$0A@@glm@@QAE@ABU?$tmat3x4@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
$T4 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat4x2@M$0A@@glm@@QAE@ABU?$tmat3x4@M$0A@@1@@Z PROC ; glm::tmat4x2<float,0>::tmat4x2<float,0>, COMDAT
; _this$ = ecx

; 207  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	mov	edx, ecx
	push	3
	mov	eax, edx
	pop	ecx
$LL4@tmat4x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	ecx
	jns	SHORT $LL4@tmat4x2

; 208  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T4[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T4[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T4[ebp+4], xmm0
	mov	eax, DWORD PTR $T4[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 209  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+16]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [edx+12], eax

; 210  : 		this->value[2] = col_type(m[2]);

	movss	xmm0, DWORD PTR [ecx+32]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR $T2[ebp]

; 211  : 		this->value[3] = col_type(0);

	and	DWORD PTR $T1[ebp], 0
	mov	DWORD PTR [edx+16], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	and	DWORD PTR $T1[ebp+4], 0
	mov	DWORD PTR [edx+20], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+24], eax
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+28], eax

; 212  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x2@M$0A@@glm@@QAE@ABU?$tmat3x4@M$0A@@1@@Z ENDP ; glm::tmat4x2<float,0>::tmat4x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$0A@@glm@@QAE@ABU?$tmat4x3@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
$T4 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat4x2@M$0A@@glm@@QAE@ABU?$tmat4x3@M$0A@@1@@Z PROC ; glm::tmat4x2<float,0>::tmat4x2<float,0>, COMDAT
; _this$ = ecx

; 198  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	mov	edx, ecx
	push	3
	mov	eax, edx
	pop	ecx
$LL4@tmat4x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	ecx
	jns	SHORT $LL4@tmat4x2

; 199  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T4[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T4[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T4[ebp+4], xmm0
	mov	eax, DWORD PTR $T4[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 200  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+12]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [edx+12], eax

; 201  : 		this->value[2] = col_type(m[2]);

	movss	xmm0, DWORD PTR [ecx+24]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx+16], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [edx+20], eax

; 202  : 		this->value[3] = col_type(m[3]);

	movss	xmm0, DWORD PTR [ecx+36]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+40]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+24], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+28], eax

; 203  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x2@M$0A@@glm@@QAE@ABU?$tmat4x3@M$0A@@1@@Z ENDP ; glm::tmat4x2<float,0>::tmat4x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$0A@@glm@@QAE@ABU?$tmat2x4@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
$T4 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat4x2@M$0A@@glm@@QAE@ABU?$tmat2x4@M$0A@@1@@Z PROC ; glm::tmat4x2<float,0>::tmat4x2<float,0>, COMDAT
; _this$ = ecx

; 189  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	mov	edx, ecx
	push	3
	mov	eax, edx
	pop	ecx
$LL4@tmat4x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	ecx
	jns	SHORT $LL4@tmat4x2

; 190  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T4[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T4[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T4[ebp+4], xmm0
	mov	eax, DWORD PTR $T4[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 191  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+16]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR $T3[ebp]

; 192  : 		this->value[2] = col_type(0);

	and	DWORD PTR $T2[ebp], 0
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	eax, DWORD PTR $T3[ebp+4]
	and	DWORD PTR $T2[ebp+4], 0
	mov	DWORD PTR [edx+12], eax
	mov	eax, DWORD PTR $T2[ebp]

; 193  : 		this->value[3] = col_type(0);

	and	DWORD PTR $T1[ebp], 0
	mov	DWORD PTR [edx+16], eax
	mov	eax, DWORD PTR $T2[ebp+4]
	and	DWORD PTR $T1[ebp+4], 0
	mov	DWORD PTR [edx+20], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+24], eax
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+28], eax

; 194  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x2@M$0A@@glm@@QAE@ABU?$tmat2x4@M$0A@@1@@Z ENDP ; glm::tmat4x2<float,0>::tmat4x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$0A@@glm@@QAE@ABU?$tmat3x2@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat4x2@M$0A@@glm@@QAE@ABU?$tmat3x2@M$0A@@1@@Z PROC ; glm::tmat4x2<float,0>::tmat4x2<float,0>, COMDAT
; _this$ = ecx

; 180  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	esi
	mov	esi, ecx
	push	3
	mov	eax, esi
	pop	ecx
$LL4@tmat4x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	ecx
	jns	SHORT $LL4@tmat4x2

; 181  : 		this->value[0] = col_type(m[0]);

	mov	edx, DWORD PTR _m$[ebp]

; 182  : 		this->value[1] = col_type(m[1]);
; 183  : 		this->value[2] = col_type(m[2]);
; 184  : 		this->value[3] = col_type(0);

	and	DWORD PTR $T1[ebp], 0
	and	DWORD PTR $T1[ebp+4], 0
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], ecx
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR [esi+8], eax
	mov	DWORD PTR [esi+12], ecx
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [edx+20]
	mov	DWORD PTR [esi+16], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [esi+24], eax
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [esi+28], eax

; 185  : 	}

	mov	eax, esi
	mov	DWORD PTR [esi+20], ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x2@M$0A@@glm@@QAE@ABU?$tmat3x2@M$0A@@1@@Z ENDP ; glm::tmat4x2<float,0>::tmat4x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$0A@@glm@@QAE@ABU?$tmat2x3@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
$T4 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat4x2@M$0A@@glm@@QAE@ABU?$tmat2x3@M$0A@@1@@Z PROC ; glm::tmat4x2<float,0>::tmat4x2<float,0>, COMDAT
; _this$ = ecx

; 171  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	mov	edx, ecx
	push	3
	mov	eax, edx
	pop	ecx
$LL4@tmat4x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	ecx
	jns	SHORT $LL4@tmat4x2

; 172  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T4[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T4[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T4[ebp+4], xmm0
	mov	eax, DWORD PTR $T4[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 173  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+12]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR $T3[ebp]

; 174  : 		this->value[2] = col_type(0);

	and	DWORD PTR $T2[ebp], 0
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	eax, DWORD PTR $T3[ebp+4]
	and	DWORD PTR $T2[ebp+4], 0
	mov	DWORD PTR [edx+12], eax
	mov	eax, DWORD PTR $T2[ebp]

; 175  : 		this->value[3] = col_type(0);

	and	DWORD PTR $T1[ebp], 0
	mov	DWORD PTR [edx+16], eax
	mov	eax, DWORD PTR $T2[ebp+4]
	and	DWORD PTR $T1[ebp+4], 0
	mov	DWORD PTR [edx+20], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+24], eax
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+28], eax

; 176  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x2@M$0A@@glm@@QAE@ABU?$tmat2x3@M$0A@@1@@Z ENDP ; glm::tmat4x2<float,0>::tmat4x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$0A@@glm@@QAE@ABU?$tmat4x4@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
$T4 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat4x2@M$0A@@glm@@QAE@ABU?$tmat4x4@M$0A@@1@@Z PROC ; glm::tmat4x2<float,0>::tmat4x2<float,0>, COMDAT
; _this$ = ecx

; 162  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	mov	edx, ecx
	push	3
	mov	eax, edx
	pop	ecx
$LL4@tmat4x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	ecx
	jns	SHORT $LL4@tmat4x2

; 163  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T4[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T4[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T4[ebp+4], xmm0
	mov	eax, DWORD PTR $T4[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 164  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+16]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [edx+12], eax

; 165  : 		this->value[2] = col_type(m[2]);

	movss	xmm0, DWORD PTR [ecx+32]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx+16], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [edx+20], eax

; 166  : 		this->value[3] = col_type(m[3]);

	movss	xmm0, DWORD PTR [ecx+48]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+24], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+28], eax

; 167  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x2@M$0A@@glm@@QAE@ABU?$tmat4x4@M$0A@@1@@Z ENDP ; glm::tmat4x2<float,0>::tmat4x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$0A@@glm@@QAE@ABU?$tmat3x3@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
$T4 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat4x2@M$0A@@glm@@QAE@ABU?$tmat3x3@M$0A@@1@@Z PROC ; glm::tmat4x2<float,0>::tmat4x2<float,0>, COMDAT
; _this$ = ecx

; 153  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	mov	edx, ecx
	push	3
	mov	eax, edx
	pop	ecx
$LL4@tmat4x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	ecx
	jns	SHORT $LL4@tmat4x2

; 154  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T4[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T4[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T4[ebp+4], xmm0
	mov	eax, DWORD PTR $T4[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 155  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+12]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [edx+12], eax

; 156  : 		this->value[2] = col_type(m[2]);

	movss	xmm0, DWORD PTR [ecx+24]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR $T2[ebp]

; 157  : 		this->value[3] = col_type(0);

	and	DWORD PTR $T1[ebp], 0
	mov	DWORD PTR [edx+16], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	and	DWORD PTR $T1[ebp+4], 0
	mov	DWORD PTR [edx+20], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+24], eax
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+28], eax

; 158  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x2@M$0A@@glm@@QAE@ABU?$tmat3x3@M$0A@@1@@Z ENDP ; glm::tmat4x2<float,0>::tmat4x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$0A@@glm@@QAE@ABU?$tmat2x2@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat4x2@M$0A@@glm@@QAE@ABU?$tmat2x2@M$0A@@1@@Z PROC ; glm::tmat4x2<float,0>::tmat4x2<float,0>, COMDAT
; _this$ = ecx

; 144  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	esi
	mov	esi, ecx
	push	3
	mov	eax, esi
	pop	ecx
$LL4@tmat4x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	ecx
	jns	SHORT $LL4@tmat4x2

; 145  : 		this->value[0] = col_type(m[0]);

	mov	edx, DWORD PTR _m$[ebp]

; 146  : 		this->value[1] = col_type(m[1]);
; 147  : 		this->value[2] = col_type(0);

	and	DWORD PTR $T2[ebp], 0
	and	DWORD PTR $T2[ebp+4], 0
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], ecx
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR [esi+8], eax
	mov	eax, DWORD PTR $T2[ebp]

; 148  : 		this->value[3] = col_type(0);

	and	DWORD PTR $T1[ebp], 0
	mov	DWORD PTR [esi+16], eax
	mov	eax, DWORD PTR $T2[ebp+4]
	and	DWORD PTR $T1[ebp+4], 0
	mov	DWORD PTR [esi+20], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [esi+24], eax
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [esi+28], eax

; 149  : 	}

	mov	eax, esi
	mov	DWORD PTR [esi+12], ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x2@M$0A@@glm@@QAE@ABU?$tmat2x2@M$0A@@1@@Z ENDP ; glm::tmat4x2<float,0>::tmat4x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$0A@@glm@@QAE@ABU?$tvec2@M$0A@@1@000@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
_v3$ = 20						; size = 4
??0?$tmat4x2@M$0A@@glm@@QAE@ABU?$tvec2@M$0A@@1@000@Z PROC ; glm::tmat4x2<float,0>::tmat4x2<float,0>, COMDAT
; _this$ = ecx

; 85   : 	{

	push	ebp
	mov	ebp, esp
	mov	edx, ecx
	push	3
	mov	eax, edx
	pop	ecx
$LL4@tmat4x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	ecx
	jns	SHORT $LL4@tmat4x2

; 86   : 		this->value[0] = v0;

	mov	ecx, DWORD PTR _v0$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]

; 87   : 		this->value[1] = v1;

	mov	ecx, DWORD PTR _v1$[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR [ecx+4]

; 88   : 		this->value[2] = v2;

	mov	ecx, DWORD PTR _v2$[ebp]
	mov	DWORD PTR [edx+12], eax
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx+16], eax
	mov	eax, DWORD PTR [ecx+4]

; 89   : 		this->value[3] = v3;

	mov	ecx, DWORD PTR _v3$[ebp]
	mov	DWORD PTR [edx+20], eax
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx+24], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+28], eax

; 90   : 	}

	mov	eax, edx
	pop	ebp
	ret	16					; 00000010H
??0?$tmat4x2@M$0A@@glm@@QAE@ABU?$tvec2@M$0A@@1@000@Z ENDP ; glm::tmat4x2<float,0>::tmat4x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$0A@@glm@@QAE@MMMMMMMM@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
$T4 = -8						; size = 8
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_x1$ = 16						; size = 4
_y1$ = 20						; size = 4
_x2$ = 24						; size = 4
_y2$ = 28						; size = 4
_x3$ = 32						; size = 4
_y3$ = 36						; size = 4
??0?$tmat4x2@M$0A@@glm@@QAE@MMMMMMMM@Z PROC		; glm::tmat4x2<float,0>::tmat4x2<float,0>, COMDAT
; _this$ = ecx

; 70   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	3
	mov	eax, ecx
	pop	edx
$LL4@tmat4x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	edx
	jns	SHORT $LL4@tmat4x2

; 71   : 		this->value[0] = col_type(x0, y0);

	movss	xmm0, DWORD PTR _x0$[ebp]
	movss	DWORD PTR $T4[ebp], xmm0
	movss	xmm0, DWORD PTR _y0$[ebp]
	mov	eax, DWORD PTR $T4[ebp]
	movss	DWORD PTR $T4[ebp+4], xmm0

; 72   : 		this->value[1] = col_type(x1, y1);

	movss	xmm0, DWORD PTR _x1$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR $T4[ebp+4]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR _y1$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR $T3[ebp]
	movss	DWORD PTR $T3[ebp+4], xmm0

; 73   : 		this->value[2] = col_type(x2, y2);

	movss	xmm0, DWORD PTR _x2$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR $T3[ebp+4]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR _y2$[ebp]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR $T2[ebp]
	movss	DWORD PTR $T2[ebp+4], xmm0

; 74   : 		this->value[3] = col_type(x3, y3);

	movss	xmm0, DWORD PTR _x3$[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [ecx+20], eax
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR _y3$[ebp]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx+24], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [ecx+28], eax

; 75   : 	}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	32					; 00000020H
??0?$tmat4x2@M$0A@@glm@@QAE@MMMMMMMM@Z ENDP		; glm::tmat4x2<float,0>::tmat4x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$0A@@glm@@QAE@M@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
$T4 = -8						; size = 8
_scalar$ = 8						; size = 4
??0?$tmat4x2@M$0A@@glm@@QAE@M@Z PROC			; glm::tmat4x2<float,0>::tmat4x2<float,0>, COMDAT
; _this$ = ecx

; 55   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	3
	mov	eax, ecx
	pop	edx
$LL4@tmat4x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	edx
	jns	SHORT $LL4@tmat4x2

; 56   : 		this->value[0] = col_type(scalar, 0);

	movss	xmm0, DWORD PTR _scalar$[ebp]
	and	DWORD PTR $T4[ebp+4], 0
	movss	DWORD PTR $T4[ebp], xmm0
	mov	eax, DWORD PTR $T4[ebp]

; 57   : 		this->value[1] = col_type(0, scalar);

	and	DWORD PTR $T3[ebp], 0
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR $T4[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR $T3[ebp]

; 58   : 		this->value[2] = col_type(0, 0);

	and	DWORD PTR $T2[ebp], 0
	mov	DWORD PTR [ecx+8], eax
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	eax, DWORD PTR $T3[ebp+4]
	and	DWORD PTR $T2[ebp+4], 0
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR $T2[ebp]

; 59   : 		this->value[3] = col_type(0, 0);

	and	DWORD PTR $T1[ebp], 0
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR $T2[ebp+4]
	and	DWORD PTR $T1[ebp+4], 0
	mov	DWORD PTR [ecx+20], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx+24], eax
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [ecx+28], eax

; 60   : 	}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x2@M$0A@@glm@@QAE@M@Z ENDP			; glm::tmat4x2<float,0>::tmat4x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat4x2@M$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat4x2<float,0>::tmat4x2<float,0>, COMDAT
; _this$ = ecx

; 51   : 	{}

	push	3
	mov	eax, ecx
	pop	edx
$LL4@tmat4x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	edx
	jns	SHORT $LL4@tmat4x2
	mov	eax, ecx
	ret	4
??0?$tmat4x2@M$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat4x2<float,0>::tmat4x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tmat4x2@M$0A@@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tmat4x2@M$0A@@glm@@QAE@ABU01@@Z PROC		; glm::tmat4x2<float,0>::tmat4x2<float,0>, COMDAT
; _this$ = ecx

; 213  : template struct tmat4x2<float32, highp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	8
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tmat4x2@M$0A@@glm@@QAE@ABU01@@Z ENDP		; glm::tmat4x2<float,0>::tmat4x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
$T4 = -8						; size = 8
??0?$tmat4x2@M$0A@@glm@@QAE@XZ PROC			; glm::tmat4x2<float,0>::tmat4x2<float,0>, COMDAT
; _this$ = ecx

; 18   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	3
	mov	eax, ecx
	pop	edx
$LL4@tmat4x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	edx
	jns	SHORT $LL4@tmat4x2

; 19   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 20   : 				this->value[0] = col_type(1, 0);

	and	DWORD PTR $T4[ebp+4], 0
	mov	DWORD PTR $T4[ebp], 1065353216		; 3f800000H
	mov	eax, DWORD PTR $T4[ebp]

; 21   : 				this->value[1] = col_type(0, 1);

	and	DWORD PTR $T3[ebp], 0
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR $T4[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR $T3[ebp]

; 22   : 				this->value[2] = col_type(0, 0);

	and	DWORD PTR $T2[ebp], 0
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR $T3[ebp+4], 1065353216	; 3f800000H
	mov	eax, DWORD PTR $T3[ebp+4]
	and	DWORD PTR $T2[ebp+4], 0
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR $T2[ebp]

; 23   : 				this->value[3] = col_type(0, 0);

	and	DWORD PTR $T1[ebp], 0
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR $T2[ebp+4]
	and	DWORD PTR $T1[ebp+4], 0
	mov	DWORD PTR [ecx+20], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx+24], eax
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [ecx+28], eax

; 24   : #			endif
; 25   : 		}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$tmat4x2@M$0A@@glm@@QAE@XZ ENDP			; glm::tmat4x2<float,0>::tmat4x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??F?$tmat4x2@N$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat4x2@N$00@glm@@QAE?AU01@H@Z PROC		; glm::tmat4x2<double,1>::operator--, COMDAT
; _this$ = ecx

; 353  : 	{

	push	ebp
	mov	ebp, esp

; 354  : 		tmat4x2<T, P> Result(*this);
; 355  : 		--*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	mov	edx, ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	movups	xmm0, XMMWORD PTR [edx]
	push	16					; 00000010H
	pop	ecx
	subpd	xmm0, xmm1
	mov	esi, edx
	mov	edi, eax
	rep movsd
	movups	XMMWORD PTR [edx], xmm0
	pop	edi
	movups	xmm0, XMMWORD PTR [edx+16]
	pop	esi
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+16], xmm0
	movups	xmm0, XMMWORD PTR [edx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+32], xmm0
	movups	xmm0, XMMWORD PTR [edx+48]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+48], xmm0

; 356  : 		return Result;
; 357  : 	}

	pop	ebp
	ret	8
??F?$tmat4x2@N$00@glm@@QAE?AU01@H@Z ENDP		; glm::tmat4x2<double,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??E?$tmat4x2@N$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat4x2@N$00@glm@@QAE?AU01@H@Z PROC		; glm::tmat4x2<double,1>::operator++, COMDAT
; _this$ = ecx

; 345  : 	{

	push	ebp
	mov	ebp, esp

; 346  : 		tmat4x2<T, P> Result(*this);
; 347  : 		++*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	mov	edx, ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	movups	xmm0, XMMWORD PTR [edx]
	push	16					; 00000010H
	pop	ecx
	addpd	xmm0, xmm1
	mov	esi, edx
	mov	edi, eax
	rep movsd
	movups	XMMWORD PTR [edx], xmm0
	pop	edi
	movups	xmm0, XMMWORD PTR [edx+16]
	pop	esi
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+16], xmm0
	movups	xmm0, XMMWORD PTR [edx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+32], xmm0
	movups	xmm0, XMMWORD PTR [edx+48]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+48], xmm0

; 348  : 		return Result;
; 349  : 	}

	pop	ebp
	ret	8
??E?$tmat4x2@N$00@glm@@QAE?AU01@H@Z ENDP		; glm::tmat4x2<double,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??F?$tmat4x2@N$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat4x2@N$00@glm@@QAEAAU01@XZ PROC			; glm::tmat4x2<double,1>::operator--, COMDAT
; _this$ = ecx

; 336  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 337  : 		--this->value[1];
; 338  : 		--this->value[2];
; 339  : 		--this->value[3];
; 340  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0

; 341  : 	}

	ret	0
??F?$tmat4x2@N$00@glm@@QAEAAU01@XZ ENDP			; glm::tmat4x2<double,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??E?$tmat4x2@N$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat4x2@N$00@glm@@QAEAAU01@XZ PROC			; glm::tmat4x2<double,1>::operator++, COMDAT
; _this$ = ecx

; 326  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 327  : 		++this->value[1];
; 328  : 		++this->value[2];
; 329  : 		++this->value[3];
; 330  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0

; 331  : 	}

	ret	0
??E?$tmat4x2@N$00@glm@@QAEAAU01@XZ ENDP			; glm::tmat4x2<double,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tmat4x2@N$00@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tmat4x2@N$00@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tmat4x2<double,1>::operator=, COMDAT
; _this$ = ecx

; 211  : template struct tmat4x2<float64, mediump>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	16					; 00000010H
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tmat4x2@N$00@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tmat4x2<double,1>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??A?$tmat4x2@N$00@glm@@QBEABU?$tvec2@N$00@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat4x2@N$00@glm@@QBEABU?$tvec2@N$00@1@H@Z PROC	; glm::tmat4x2<double,1>::operator[], COMDAT
; _this$ = ecx

; 225  : 	{

	push	ebp
	mov	ebp, esp

; 226  : 		assert(i < this->length());
; 227  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, ecx

; 228  : 	}

	pop	ebp
	ret	4
??A?$tmat4x2@N$00@glm@@QBEABU?$tvec2@N$00@1@H@Z ENDP	; glm::tmat4x2<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??A?$tmat4x2@N$00@glm@@QAEAAU?$tvec2@N$00@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat4x2@N$00@glm@@QAEAAU?$tvec2@N$00@1@H@Z PROC	; glm::tmat4x2<double,1>::operator[], COMDAT
; _this$ = ecx

; 218  : 	{

	push	ebp
	mov	ebp, esp

; 219  : 		assert(i < this->length());
; 220  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, ecx

; 221  : 	}

	pop	ebp
	ret	4
??A?$tmat4x2@N$00@glm@@QAEAAU?$tvec2@N$00@1@H@Z ENDP	; glm::tmat4x2<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.hpp
;	COMDAT ?length@?$tmat4x2@N$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat4x2@N$00@glm@@SAHXZ PROC			; glm::tmat4x2<double,1>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	push	4
	pop	eax
	ret	0
?length@?$tmat4x2@N$00@glm@@SAHXZ ENDP			; glm::tmat4x2<double,1>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$00@glm@@QAE@ABU?$tmat3x4@N$00@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
$T4 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat4x2@N$00@glm@@QAE@ABU?$tmat3x4@N$00@1@@Z PROC	; glm::tmat4x2<double,1>::tmat4x2<double,1>, COMDAT
; _this$ = ecx

; 207  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	xorps	xmm0, xmm0
	push	3
	pop	edx
$LL4@tmat4x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat4x2

; 208  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T4[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR $T4[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 209  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+32]
	lea	edi, DWORD PTR [ecx+16]
	lea	esi, DWORD PTR $T3[ebp]
	movups	XMMWORD PTR $T3[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 210  : 		this->value[2] = col_type(m[2]);

	movups	xmm0, XMMWORD PTR [eax+64]
	lea	edi, DWORD PTR [ecx+32]

; 211  : 		this->value[3] = col_type(0);
; 212  : 	}

	mov	eax, ecx
	lea	esi, DWORD PTR $T2[ebp]
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd
	xorps	xmm0, xmm0
	movsd
	movsd
	movsd
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+48]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x2@N$00@glm@@QAE@ABU?$tmat3x4@N$00@1@@Z ENDP	; glm::tmat4x2<double,1>::tmat4x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$00@glm@@QAE@ABU?$tmat4x3@N$00@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
$T4 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat4x2@N$00@glm@@QAE@ABU?$tmat4x3@N$00@1@@Z PROC	; glm::tmat4x2<double,1>::tmat4x2<double,1>, COMDAT
; _this$ = ecx

; 198  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	xorps	xmm0, xmm0
	push	3
	pop	edx
$LL4@tmat4x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat4x2

; 199  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T4[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR $T4[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 200  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+24]
	lea	edi, DWORD PTR [ecx+16]
	lea	esi, DWORD PTR $T3[ebp]
	movups	XMMWORD PTR $T3[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 201  : 		this->value[2] = col_type(m[2]);

	movups	xmm0, XMMWORD PTR [eax+48]
	lea	edi, DWORD PTR [ecx+32]
	lea	esi, DWORD PTR $T2[ebp]
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 202  : 		this->value[3] = col_type(m[3]);

	movups	xmm0, XMMWORD PTR [eax+72]
	lea	edi, DWORD PTR [ecx+48]

; 203  : 	}

	mov	eax, ecx
	lea	esi, DWORD PTR $T1[ebp]
	movups	XMMWORD PTR $T1[ebp], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x2@N$00@glm@@QAE@ABU?$tmat4x3@N$00@1@@Z ENDP	; glm::tmat4x2<double,1>::tmat4x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$00@glm@@QAE@ABU?$tmat2x4@N$00@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
$T4 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat4x2@N$00@glm@@QAE@ABU?$tmat2x4@N$00@1@@Z PROC	; glm::tmat4x2<double,1>::tmat4x2<double,1>, COMDAT
; _this$ = ecx

; 189  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	xorps	xmm0, xmm0
	push	3
	pop	edx
$LL4@tmat4x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat4x2

; 190  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T4[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR $T4[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 191  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+32]
	lea	edi, DWORD PTR [ecx+16]

; 192  : 		this->value[2] = col_type(0);
; 193  : 		this->value[3] = col_type(0);
; 194  : 	}

	mov	eax, ecx
	lea	esi, DWORD PTR $T3[ebp]
	movups	XMMWORD PTR $T3[ebp], xmm0
	movsd
	xorps	xmm0, xmm0
	movsd
	movsd
	movsd
	movupd	XMMWORD PTR $T2[ebp], xmm0
	lea	edi, DWORD PTR [ecx+32]
	lea	esi, DWORD PTR $T2[ebp]
	movsd
	movsd
	movsd
	movsd
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+48]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x2@N$00@glm@@QAE@ABU?$tmat2x4@N$00@1@@Z ENDP	; glm::tmat4x2<double,1>::tmat4x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$00@glm@@QAE@ABU?$tmat3x2@N$00@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
$T4 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat4x2@N$00@glm@@QAE@ABU?$tmat3x2@N$00@1@@Z PROC	; glm::tmat4x2<double,1>::tmat4x2<double,1>, COMDAT
; _this$ = ecx

; 180  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	xorps	xmm0, xmm0
	push	3
	pop	edx
$LL4@tmat4x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat4x2

; 181  : 		this->value[0] = col_type(m[0]);

	push	esi
	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	push	edi
	mov	esi, eax
	lea	edi, DWORD PTR $T4[ebp]
	movsd
	movsd
	movsd
	movsd
	mov	edi, ecx
	lea	esi, DWORD PTR $T4[ebp]
	movsd
	movsd
	movsd
	movsd

; 182  : 		this->value[1] = col_type(m[1]);

	lea	esi, DWORD PTR [eax+16]
	lea	edi, DWORD PTR $T3[ebp]
	movsd
	movsd
	movsd
	movsd
	lea	edi, DWORD PTR [ecx+16]
	lea	esi, DWORD PTR $T3[ebp]
	movsd
	movsd
	movsd
	movsd

; 183  : 		this->value[2] = col_type(m[2]);

	lea	esi, DWORD PTR [eax+32]

; 184  : 		this->value[3] = col_type(0);
; 185  : 	}

	mov	eax, ecx
	lea	edi, DWORD PTR $T2[ebp]
	movsd
	movsd
	movsd
	movsd
	lea	edi, DWORD PTR [ecx+32]
	lea	esi, DWORD PTR $T2[ebp]
	movsd
	movsd
	movsd
	movsd
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+48]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x2@N$00@glm@@QAE@ABU?$tmat3x2@N$00@1@@Z ENDP	; glm::tmat4x2<double,1>::tmat4x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$00@glm@@QAE@ABU?$tmat2x3@N$00@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
$T4 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat4x2@N$00@glm@@QAE@ABU?$tmat2x3@N$00@1@@Z PROC	; glm::tmat4x2<double,1>::tmat4x2<double,1>, COMDAT
; _this$ = ecx

; 171  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	xorps	xmm0, xmm0
	push	3
	pop	edx
$LL4@tmat4x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat4x2

; 172  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T4[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR $T4[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 173  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+24]
	lea	edi, DWORD PTR [ecx+16]

; 174  : 		this->value[2] = col_type(0);
; 175  : 		this->value[3] = col_type(0);
; 176  : 	}

	mov	eax, ecx
	lea	esi, DWORD PTR $T3[ebp]
	movups	XMMWORD PTR $T3[ebp], xmm0
	movsd
	xorps	xmm0, xmm0
	movsd
	movsd
	movsd
	movupd	XMMWORD PTR $T2[ebp], xmm0
	lea	edi, DWORD PTR [ecx+32]
	lea	esi, DWORD PTR $T2[ebp]
	movsd
	movsd
	movsd
	movsd
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+48]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x2@N$00@glm@@QAE@ABU?$tmat2x3@N$00@1@@Z ENDP	; glm::tmat4x2<double,1>::tmat4x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$00@glm@@QAE@ABU?$tmat4x4@N$00@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
$T4 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat4x2@N$00@glm@@QAE@ABU?$tmat4x4@N$00@1@@Z PROC	; glm::tmat4x2<double,1>::tmat4x2<double,1>, COMDAT
; _this$ = ecx

; 162  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	xorps	xmm0, xmm0
	push	3
	pop	edx
$LL4@tmat4x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat4x2

; 163  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T4[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR $T4[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 164  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+32]
	lea	edi, DWORD PTR [ecx+16]
	lea	esi, DWORD PTR $T3[ebp]
	movups	XMMWORD PTR $T3[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 165  : 		this->value[2] = col_type(m[2]);

	movups	xmm0, XMMWORD PTR [eax+64]
	lea	edi, DWORD PTR [ecx+32]
	lea	esi, DWORD PTR $T2[ebp]
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 166  : 		this->value[3] = col_type(m[3]);

	movups	xmm0, XMMWORD PTR [eax+96]
	lea	edi, DWORD PTR [ecx+48]

; 167  : 	}

	mov	eax, ecx
	lea	esi, DWORD PTR $T1[ebp]
	movups	XMMWORD PTR $T1[ebp], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x2@N$00@glm@@QAE@ABU?$tmat4x4@N$00@1@@Z ENDP	; glm::tmat4x2<double,1>::tmat4x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$00@glm@@QAE@ABU?$tmat3x3@N$00@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
$T4 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat4x2@N$00@glm@@QAE@ABU?$tmat3x3@N$00@1@@Z PROC	; glm::tmat4x2<double,1>::tmat4x2<double,1>, COMDAT
; _this$ = ecx

; 153  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	xorps	xmm0, xmm0
	push	3
	pop	edx
$LL4@tmat4x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat4x2

; 154  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T4[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR $T4[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 155  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+24]
	lea	edi, DWORD PTR [ecx+16]
	lea	esi, DWORD PTR $T3[ebp]
	movups	XMMWORD PTR $T3[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 156  : 		this->value[2] = col_type(m[2]);

	movups	xmm0, XMMWORD PTR [eax+48]
	lea	edi, DWORD PTR [ecx+32]

; 157  : 		this->value[3] = col_type(0);
; 158  : 	}

	mov	eax, ecx
	lea	esi, DWORD PTR $T2[ebp]
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd
	xorps	xmm0, xmm0
	movsd
	movsd
	movsd
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+48]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x2@N$00@glm@@QAE@ABU?$tmat3x3@N$00@1@@Z ENDP	; glm::tmat4x2<double,1>::tmat4x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$00@glm@@QAE@ABU?$tmat2x2@N$00@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
$T4 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat4x2@N$00@glm@@QAE@ABU?$tmat2x2@N$00@1@@Z PROC	; glm::tmat4x2<double,1>::tmat4x2<double,1>, COMDAT
; _this$ = ecx

; 144  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	xorps	xmm0, xmm0
	push	3
	pop	edx
$LL4@tmat4x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat4x2

; 145  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	push	esi
	push	edi
	mov	esi, eax
	lea	edi, DWORD PTR $T4[ebp]
	movsd
	movsd
	movsd
	movsd
	mov	edi, ecx
	lea	esi, DWORD PTR $T4[ebp]
	movsd
	movsd
	movsd
	movsd

; 146  : 		this->value[1] = col_type(m[1]);

	lea	esi, DWORD PTR [eax+16]

; 147  : 		this->value[2] = col_type(0);
; 148  : 		this->value[3] = col_type(0);
; 149  : 	}

	mov	eax, ecx
	lea	edi, DWORD PTR $T3[ebp]
	movsd
	movsd
	movsd
	movsd
	lea	edi, DWORD PTR [ecx+16]
	lea	esi, DWORD PTR $T3[ebp]
	movsd
	movsd
	movsd
	movsd
	movupd	XMMWORD PTR $T2[ebp], xmm0
	lea	edi, DWORD PTR [ecx+32]
	lea	esi, DWORD PTR $T2[ebp]
	movsd
	movsd
	movsd
	movsd
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+48]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x2@N$00@glm@@QAE@ABU?$tmat2x2@N$00@1@@Z ENDP	; glm::tmat4x2<double,1>::tmat4x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$00@glm@@QAE@ABU?$tvec2@N$00@1@000@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
_v3$ = 20						; size = 4
??0?$tmat4x2@N$00@glm@@QAE@ABU?$tvec2@N$00@1@000@Z PROC	; glm::tmat4x2<double,1>::tmat4x2<double,1>, COMDAT
; _this$ = ecx

; 85   : 	{

	push	ebp
	mov	ebp, esp
	push	3
	mov	eax, ecx
	xorps	xmm0, xmm0
	pop	edx
$LL4@tmat4x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat4x2

; 86   : 		this->value[0] = v0;

	push	esi
	mov	esi, DWORD PTR _v0$[ebp]

; 87   : 		this->value[1] = v1;
; 88   : 		this->value[2] = v2;
; 89   : 		this->value[3] = v3;
; 90   : 	}

	mov	eax, ecx
	push	edi
	mov	edi, ecx
	movsd
	movsd
	movsd
	movsd
	mov	esi, DWORD PTR _v1$[ebp]
	lea	edi, DWORD PTR [ecx+16]
	movsd
	movsd
	movsd
	movsd
	mov	esi, DWORD PTR _v2$[ebp]
	lea	edi, DWORD PTR [ecx+32]
	movsd
	movsd
	movsd
	movsd
	mov	esi, DWORD PTR _v3$[ebp]
	lea	edi, DWORD PTR [ecx+48]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	16					; 00000010H
??0?$tmat4x2@N$00@glm@@QAE@ABU?$tvec2@N$00@1@000@Z ENDP	; glm::tmat4x2<double,1>::tmat4x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$00@glm@@QAE@NNNNNNNN@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
$T4 = -16						; size = 16
_x0$ = 8						; size = 8
_y0$ = 16						; size = 8
_x1$ = 24						; size = 8
_y1$ = 32						; size = 8
_x2$ = 40						; size = 8
_y2$ = 48						; size = 8
_x3$ = 56						; size = 8
_y3$ = 64						; size = 8
??0?$tmat4x2@N$00@glm@@QAE@NNNNNNNN@Z PROC		; glm::tmat4x2<double,1>::tmat4x2<double,1>, COMDAT
; _this$ = ecx

; 70   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	xorps	xmm0, xmm0
	push	3
	pop	edx
$LL4@tmat4x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat4x2

; 71   : 		this->value[0] = col_type(x0, y0);

	movsd	xmm0, QWORD PTR _x0$[ebp]

; 72   : 		this->value[1] = col_type(x1, y1);
; 73   : 		this->value[2] = col_type(x2, y2);
; 74   : 		this->value[3] = col_type(x3, y3);
; 75   : 	}

	mov	eax, ecx
	push	esi
	push	edi
	movsd	QWORD PTR $T4[ebp], xmm0
	lea	esi, DWORD PTR $T4[ebp]
	movsd	xmm0, QWORD PTR _y0$[ebp]
	mov	edi, ecx
	movsd	QWORD PTR $T4[ebp+8], xmm0
	movsd	xmm0, QWORD PTR _x1$[ebp]
	movsd
	movsd
	movsd
	movsd
	movsd	QWORD PTR $T3[ebp], xmm0
	lea	edi, DWORD PTR [ecx+16]
	movsd	xmm0, QWORD PTR _y1$[ebp]
	lea	esi, DWORD PTR $T3[ebp]
	movsd	QWORD PTR $T3[ebp+8], xmm0
	movsd
	movsd	xmm0, QWORD PTR _x2$[ebp]
	movsd
	movsd
	movsd
	movsd	QWORD PTR $T2[ebp], xmm0
	lea	edi, DWORD PTR [ecx+32]
	movsd	xmm0, QWORD PTR _y2$[ebp]
	lea	esi, DWORD PTR $T2[ebp]
	movsd	QWORD PTR $T2[ebp+8], xmm0
	movsd	xmm0, QWORD PTR _x3$[ebp]
	movsd
	movsd
	movsd
	movsd
	movsd	QWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+48]
	movsd	xmm0, QWORD PTR _y3$[ebp]
	lea	esi, DWORD PTR $T1[ebp]
	movsd	QWORD PTR $T1[ebp+8], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	64					; 00000040H
??0?$tmat4x2@N$00@glm@@QAE@NNNNNNNN@Z ENDP		; glm::tmat4x2<double,1>::tmat4x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$00@glm@@QAE@N@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
$T4 = -16						; size = 16
_scalar$ = 8						; size = 8
??0?$tmat4x2@N$00@glm@@QAE@N@Z PROC			; glm::tmat4x2<double,1>::tmat4x2<double,1>, COMDAT
; _this$ = ecx

; 55   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	xorps	xmm1, xmm1
	push	3
	pop	edx
$LL4@tmat4x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm1
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat4x2

; 56   : 		this->value[0] = col_type(scalar, 0);

	movsd	xmm0, QWORD PTR _scalar$[ebp]

; 57   : 		this->value[1] = col_type(0, scalar);
; 58   : 		this->value[2] = col_type(0, 0);
; 59   : 		this->value[3] = col_type(0, 0);
; 60   : 	}

	mov	eax, ecx
	push	esi
	push	edi
	movsd	QWORD PTR $T4[ebp], xmm0
	lea	esi, DWORD PTR $T4[ebp]
	movsd	QWORD PTR $T4[ebp+8], xmm1
	mov	edi, ecx
	movsd
	movsd
	movsd
	movsd
	movsd	QWORD PTR $T3[ebp+8], xmm0
	lea	edi, DWORD PTR [ecx+16]
	movsd	QWORD PTR $T3[ebp], xmm1
	lea	esi, DWORD PTR $T3[ebp]
	movsd
	xorps	xmm0, xmm0
	movsd
	movsd
	movsd
	movupd	XMMWORD PTR $T2[ebp], xmm0
	lea	edi, DWORD PTR [ecx+32]
	lea	esi, DWORD PTR $T2[ebp]
	movsd
	movsd
	movsd
	movsd
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+48]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$tmat4x2@N$00@glm@@QAE@N@Z ENDP			; glm::tmat4x2<double,1>::tmat4x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat4x2@N$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat4x2<double,1>::tmat4x2<double,1>, COMDAT
; _this$ = ecx

; 51   : 	{}

	push	3
	mov	eax, ecx
	xorps	xmm0, xmm0
	pop	edx
$LL4@tmat4x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat4x2
	mov	eax, ecx
	ret	4
??0?$tmat4x2@N$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat4x2<double,1>::tmat4x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tmat4x2@N$00@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tmat4x2@N$00@glm@@QAE@ABU01@@Z PROC		; glm::tmat4x2<double,1>::tmat4x2<double,1>, COMDAT
; _this$ = ecx

; 211  : template struct tmat4x2<float64, mediump>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	16					; 00000010H
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tmat4x2@N$00@glm@@QAE@ABU01@@Z ENDP		; glm::tmat4x2<double,1>::tmat4x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$00@glm@@QAE@XZ
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
$T4 = -16						; size = 16
??0?$tmat4x2@N$00@glm@@QAE@XZ PROC			; glm::tmat4x2<double,1>::tmat4x2<double,1>, COMDAT
; _this$ = ecx

; 18   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	xorps	xmm0, xmm0
	push	3
	pop	edx
$LL4@tmat4x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat4x2

; 19   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 20   : 				this->value[0] = col_type(1, 0);
; 21   : 				this->value[1] = col_type(0, 1);
; 22   : 				this->value[2] = col_type(0, 0);
; 23   : 				this->value[3] = col_type(0, 0);
; 24   : #			endif
; 25   : 		}

	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	mov	eax, ecx
	push	esi
	push	edi
	movupd	XMMWORD PTR $T4[ebp], xmm0
	lea	esi, DWORD PTR $T4[ebp]
	mov	edi, ecx
	movaps	xmm0, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	movsd
	movsd
	movsd
	movsd
	movupd	XMMWORD PTR $T3[ebp], xmm0
	lea	edi, DWORD PTR [ecx+16]
	lea	esi, DWORD PTR $T3[ebp]
	xorps	xmm0, xmm0
	movsd
	movsd
	movsd
	movsd
	movupd	XMMWORD PTR $T2[ebp], xmm0
	lea	edi, DWORD PTR [ecx+32]
	lea	esi, DWORD PTR $T2[ebp]
	movsd
	movsd
	movsd
	movsd
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+48]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$tmat4x2@N$00@glm@@QAE@XZ ENDP			; glm::tmat4x2<double,1>::tmat4x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??F?$tmat4x2@M$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat4x2@M$00@glm@@QAE?AU01@H@Z PROC		; glm::tmat4x2<float,1>::operator--, COMDAT
; _this$ = ecx

; 353  : 	{

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi

; 354  : 		tmat4x2<T, P> Result(*this);

	mov	edi, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, ecx
	push	8
	pop	ecx
	mov	esi, eax
	rep movsd

; 355  : 		--*this;

	mov	ecx, eax
	call	??F?$tmat4x2@M$00@glm@@QAEAAU01@XZ	; glm::tmat4x2<float,1>::operator--

; 356  : 		return Result;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi

; 357  : 	}

	pop	ebp
	ret	8
??F?$tmat4x2@M$00@glm@@QAE?AU01@H@Z ENDP		; glm::tmat4x2<float,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??E?$tmat4x2@M$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat4x2@M$00@glm@@QAE?AU01@H@Z PROC		; glm::tmat4x2<float,1>::operator++, COMDAT
; _this$ = ecx

; 345  : 	{

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi

; 346  : 		tmat4x2<T, P> Result(*this);

	mov	edi, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, ecx
	push	8
	pop	ecx
	mov	esi, eax
	rep movsd

; 347  : 		++*this;

	mov	ecx, eax
	call	??E?$tmat4x2@M$00@glm@@QAEAAU01@XZ	; glm::tmat4x2<float,1>::operator++

; 348  : 		return Result;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi

; 349  : 	}

	pop	ebp
	ret	8
??E?$tmat4x2@M$00@glm@@QAE?AU01@H@Z ENDP		; glm::tmat4x2<float,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??F?$tmat4x2@M$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat4x2@M$00@glm@@QAEAAU01@XZ PROC			; glm::tmat4x2<float,1>::operator--, COMDAT
; _this$ = ecx

; 336  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 337  : 		--this->value[1];
; 338  : 		--this->value[2];
; 339  : 		--this->value[3];
; 340  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0

; 341  : 	}

	ret	0
??F?$tmat4x2@M$00@glm@@QAEAAU01@XZ ENDP			; glm::tmat4x2<float,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??E?$tmat4x2@M$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat4x2@M$00@glm@@QAEAAU01@XZ PROC			; glm::tmat4x2<float,1>::operator++, COMDAT
; _this$ = ecx

; 326  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 327  : 		++this->value[1];
; 328  : 		++this->value[2];
; 329  : 		++this->value[3];
; 330  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0

; 331  : 	}

	ret	0
??E?$tmat4x2@M$00@glm@@QAEAAU01@XZ ENDP			; glm::tmat4x2<float,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tmat4x2@M$00@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tmat4x2@M$00@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tmat4x2<float,1>::operator=, COMDAT
; _this$ = ecx

; 210  : template struct tmat4x2<float32, mediump>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	8
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tmat4x2@M$00@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tmat4x2<float,1>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??A?$tmat4x2@M$00@glm@@QBEABU?$tvec2@M$00@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat4x2@M$00@glm@@QBEABU?$tvec2@M$00@1@H@Z PROC	; glm::tmat4x2<float,1>::operator[], COMDAT
; _this$ = ecx

; 225  : 	{

	push	ebp
	mov	ebp, esp

; 226  : 		assert(i < this->length());
; 227  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 228  : 	}

	pop	ebp
	ret	4
??A?$tmat4x2@M$00@glm@@QBEABU?$tvec2@M$00@1@H@Z ENDP	; glm::tmat4x2<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??A?$tmat4x2@M$00@glm@@QAEAAU?$tvec2@M$00@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat4x2@M$00@glm@@QAEAAU?$tvec2@M$00@1@H@Z PROC	; glm::tmat4x2<float,1>::operator[], COMDAT
; _this$ = ecx

; 218  : 	{

	push	ebp
	mov	ebp, esp

; 219  : 		assert(i < this->length());
; 220  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 221  : 	}

	pop	ebp
	ret	4
??A?$tmat4x2@M$00@glm@@QAEAAU?$tvec2@M$00@1@H@Z ENDP	; glm::tmat4x2<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.hpp
;	COMDAT ?length@?$tmat4x2@M$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat4x2@M$00@glm@@SAHXZ PROC			; glm::tmat4x2<float,1>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	push	4
	pop	eax
	ret	0
?length@?$tmat4x2@M$00@glm@@SAHXZ ENDP			; glm::tmat4x2<float,1>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$00@glm@@QAE@ABU?$tmat3x4@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
$T4 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat4x2@M$00@glm@@QAE@ABU?$tmat3x4@M$00@1@@Z PROC	; glm::tmat4x2<float,1>::tmat4x2<float,1>, COMDAT
; _this$ = ecx

; 207  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	mov	edx, ecx
	push	3
	mov	eax, edx
	pop	ecx
$LL4@tmat4x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	ecx
	jns	SHORT $LL4@tmat4x2

; 208  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T4[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T4[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T4[ebp+4], xmm0
	mov	eax, DWORD PTR $T4[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 209  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+16]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [edx+12], eax

; 210  : 		this->value[2] = col_type(m[2]);

	movss	xmm0, DWORD PTR [ecx+32]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR $T2[ebp]

; 211  : 		this->value[3] = col_type(0);

	and	DWORD PTR $T1[ebp], 0
	mov	DWORD PTR [edx+16], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	and	DWORD PTR $T1[ebp+4], 0
	mov	DWORD PTR [edx+20], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+24], eax
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+28], eax

; 212  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x2@M$00@glm@@QAE@ABU?$tmat3x4@M$00@1@@Z ENDP	; glm::tmat4x2<float,1>::tmat4x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$00@glm@@QAE@ABU?$tmat4x3@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
$T4 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat4x2@M$00@glm@@QAE@ABU?$tmat4x3@M$00@1@@Z PROC	; glm::tmat4x2<float,1>::tmat4x2<float,1>, COMDAT
; _this$ = ecx

; 198  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	mov	edx, ecx
	push	3
	mov	eax, edx
	pop	ecx
$LL4@tmat4x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	ecx
	jns	SHORT $LL4@tmat4x2

; 199  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T4[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T4[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T4[ebp+4], xmm0
	mov	eax, DWORD PTR $T4[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 200  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+12]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [edx+12], eax

; 201  : 		this->value[2] = col_type(m[2]);

	movss	xmm0, DWORD PTR [ecx+24]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx+16], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [edx+20], eax

; 202  : 		this->value[3] = col_type(m[3]);

	movss	xmm0, DWORD PTR [ecx+36]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+40]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+24], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+28], eax

; 203  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x2@M$00@glm@@QAE@ABU?$tmat4x3@M$00@1@@Z ENDP	; glm::tmat4x2<float,1>::tmat4x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$00@glm@@QAE@ABU?$tmat2x4@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
$T4 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat4x2@M$00@glm@@QAE@ABU?$tmat2x4@M$00@1@@Z PROC	; glm::tmat4x2<float,1>::tmat4x2<float,1>, COMDAT
; _this$ = ecx

; 189  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	mov	edx, ecx
	push	3
	mov	eax, edx
	pop	ecx
$LL4@tmat4x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	ecx
	jns	SHORT $LL4@tmat4x2

; 190  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T4[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T4[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T4[ebp+4], xmm0
	mov	eax, DWORD PTR $T4[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 191  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+16]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR $T3[ebp]

; 192  : 		this->value[2] = col_type(0);

	and	DWORD PTR $T2[ebp], 0
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	eax, DWORD PTR $T3[ebp+4]
	and	DWORD PTR $T2[ebp+4], 0
	mov	DWORD PTR [edx+12], eax
	mov	eax, DWORD PTR $T2[ebp]

; 193  : 		this->value[3] = col_type(0);

	and	DWORD PTR $T1[ebp], 0
	mov	DWORD PTR [edx+16], eax
	mov	eax, DWORD PTR $T2[ebp+4]
	and	DWORD PTR $T1[ebp+4], 0
	mov	DWORD PTR [edx+20], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+24], eax
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+28], eax

; 194  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x2@M$00@glm@@QAE@ABU?$tmat2x4@M$00@1@@Z ENDP	; glm::tmat4x2<float,1>::tmat4x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$00@glm@@QAE@ABU?$tmat3x2@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat4x2@M$00@glm@@QAE@ABU?$tmat3x2@M$00@1@@Z PROC	; glm::tmat4x2<float,1>::tmat4x2<float,1>, COMDAT
; _this$ = ecx

; 180  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	esi
	mov	esi, ecx
	push	3
	mov	eax, esi
	pop	ecx
$LL4@tmat4x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	ecx
	jns	SHORT $LL4@tmat4x2

; 181  : 		this->value[0] = col_type(m[0]);

	mov	edx, DWORD PTR _m$[ebp]

; 182  : 		this->value[1] = col_type(m[1]);
; 183  : 		this->value[2] = col_type(m[2]);
; 184  : 		this->value[3] = col_type(0);

	and	DWORD PTR $T1[ebp], 0
	and	DWORD PTR $T1[ebp+4], 0
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], ecx
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR [esi+8], eax
	mov	DWORD PTR [esi+12], ecx
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [edx+20]
	mov	DWORD PTR [esi+16], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [esi+24], eax
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [esi+28], eax

; 185  : 	}

	mov	eax, esi
	mov	DWORD PTR [esi+20], ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x2@M$00@glm@@QAE@ABU?$tmat3x2@M$00@1@@Z ENDP	; glm::tmat4x2<float,1>::tmat4x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$00@glm@@QAE@ABU?$tmat2x3@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
$T4 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat4x2@M$00@glm@@QAE@ABU?$tmat2x3@M$00@1@@Z PROC	; glm::tmat4x2<float,1>::tmat4x2<float,1>, COMDAT
; _this$ = ecx

; 171  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	mov	edx, ecx
	push	3
	mov	eax, edx
	pop	ecx
$LL4@tmat4x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	ecx
	jns	SHORT $LL4@tmat4x2

; 172  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T4[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T4[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T4[ebp+4], xmm0
	mov	eax, DWORD PTR $T4[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 173  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+12]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR $T3[ebp]

; 174  : 		this->value[2] = col_type(0);

	and	DWORD PTR $T2[ebp], 0
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	eax, DWORD PTR $T3[ebp+4]
	and	DWORD PTR $T2[ebp+4], 0
	mov	DWORD PTR [edx+12], eax
	mov	eax, DWORD PTR $T2[ebp]

; 175  : 		this->value[3] = col_type(0);

	and	DWORD PTR $T1[ebp], 0
	mov	DWORD PTR [edx+16], eax
	mov	eax, DWORD PTR $T2[ebp+4]
	and	DWORD PTR $T1[ebp+4], 0
	mov	DWORD PTR [edx+20], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+24], eax
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+28], eax

; 176  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x2@M$00@glm@@QAE@ABU?$tmat2x3@M$00@1@@Z ENDP	; glm::tmat4x2<float,1>::tmat4x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$00@glm@@QAE@ABU?$tmat4x4@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
$T4 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat4x2@M$00@glm@@QAE@ABU?$tmat4x4@M$00@1@@Z PROC	; glm::tmat4x2<float,1>::tmat4x2<float,1>, COMDAT
; _this$ = ecx

; 162  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	mov	edx, ecx
	push	3
	mov	eax, edx
	pop	ecx
$LL4@tmat4x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	ecx
	jns	SHORT $LL4@tmat4x2

; 163  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T4[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T4[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T4[ebp+4], xmm0
	mov	eax, DWORD PTR $T4[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 164  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+16]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [edx+12], eax

; 165  : 		this->value[2] = col_type(m[2]);

	movss	xmm0, DWORD PTR [ecx+32]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx+16], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [edx+20], eax

; 166  : 		this->value[3] = col_type(m[3]);

	movss	xmm0, DWORD PTR [ecx+48]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+24], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+28], eax

; 167  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x2@M$00@glm@@QAE@ABU?$tmat4x4@M$00@1@@Z ENDP	; glm::tmat4x2<float,1>::tmat4x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$00@glm@@QAE@ABU?$tmat3x3@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
$T4 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat4x2@M$00@glm@@QAE@ABU?$tmat3x3@M$00@1@@Z PROC	; glm::tmat4x2<float,1>::tmat4x2<float,1>, COMDAT
; _this$ = ecx

; 153  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	mov	edx, ecx
	push	3
	mov	eax, edx
	pop	ecx
$LL4@tmat4x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	ecx
	jns	SHORT $LL4@tmat4x2

; 154  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T4[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T4[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T4[ebp+4], xmm0
	mov	eax, DWORD PTR $T4[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 155  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+12]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [edx+12], eax

; 156  : 		this->value[2] = col_type(m[2]);

	movss	xmm0, DWORD PTR [ecx+24]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR $T2[ebp]

; 157  : 		this->value[3] = col_type(0);

	and	DWORD PTR $T1[ebp], 0
	mov	DWORD PTR [edx+16], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	and	DWORD PTR $T1[ebp+4], 0
	mov	DWORD PTR [edx+20], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+24], eax
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+28], eax

; 158  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x2@M$00@glm@@QAE@ABU?$tmat3x3@M$00@1@@Z ENDP	; glm::tmat4x2<float,1>::tmat4x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$00@glm@@QAE@ABU?$tmat2x2@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat4x2@M$00@glm@@QAE@ABU?$tmat2x2@M$00@1@@Z PROC	; glm::tmat4x2<float,1>::tmat4x2<float,1>, COMDAT
; _this$ = ecx

; 144  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	esi
	mov	esi, ecx
	push	3
	mov	eax, esi
	pop	ecx
$LL4@tmat4x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	ecx
	jns	SHORT $LL4@tmat4x2

; 145  : 		this->value[0] = col_type(m[0]);

	mov	edx, DWORD PTR _m$[ebp]

; 146  : 		this->value[1] = col_type(m[1]);
; 147  : 		this->value[2] = col_type(0);

	and	DWORD PTR $T2[ebp], 0
	and	DWORD PTR $T2[ebp+4], 0
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], ecx
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR [esi+8], eax
	mov	eax, DWORD PTR $T2[ebp]

; 148  : 		this->value[3] = col_type(0);

	and	DWORD PTR $T1[ebp], 0
	mov	DWORD PTR [esi+16], eax
	mov	eax, DWORD PTR $T2[ebp+4]
	and	DWORD PTR $T1[ebp+4], 0
	mov	DWORD PTR [esi+20], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [esi+24], eax
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [esi+28], eax

; 149  : 	}

	mov	eax, esi
	mov	DWORD PTR [esi+12], ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x2@M$00@glm@@QAE@ABU?$tmat2x2@M$00@1@@Z ENDP	; glm::tmat4x2<float,1>::tmat4x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$00@glm@@QAE@ABU?$tvec2@M$00@1@000@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
_v3$ = 20						; size = 4
??0?$tmat4x2@M$00@glm@@QAE@ABU?$tvec2@M$00@1@000@Z PROC	; glm::tmat4x2<float,1>::tmat4x2<float,1>, COMDAT
; _this$ = ecx

; 85   : 	{

	push	ebp
	mov	ebp, esp
	mov	edx, ecx
	push	3
	mov	eax, edx
	pop	ecx
$LL4@tmat4x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	ecx
	jns	SHORT $LL4@tmat4x2

; 86   : 		this->value[0] = v0;

	mov	ecx, DWORD PTR _v0$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]

; 87   : 		this->value[1] = v1;

	mov	ecx, DWORD PTR _v1$[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR [ecx+4]

; 88   : 		this->value[2] = v2;

	mov	ecx, DWORD PTR _v2$[ebp]
	mov	DWORD PTR [edx+12], eax
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx+16], eax
	mov	eax, DWORD PTR [ecx+4]

; 89   : 		this->value[3] = v3;

	mov	ecx, DWORD PTR _v3$[ebp]
	mov	DWORD PTR [edx+20], eax
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx+24], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+28], eax

; 90   : 	}

	mov	eax, edx
	pop	ebp
	ret	16					; 00000010H
??0?$tmat4x2@M$00@glm@@QAE@ABU?$tvec2@M$00@1@000@Z ENDP	; glm::tmat4x2<float,1>::tmat4x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$00@glm@@QAE@MMMMMMMM@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
$T4 = -8						; size = 8
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_x1$ = 16						; size = 4
_y1$ = 20						; size = 4
_x2$ = 24						; size = 4
_y2$ = 28						; size = 4
_x3$ = 32						; size = 4
_y3$ = 36						; size = 4
??0?$tmat4x2@M$00@glm@@QAE@MMMMMMMM@Z PROC		; glm::tmat4x2<float,1>::tmat4x2<float,1>, COMDAT
; _this$ = ecx

; 70   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	3
	mov	eax, ecx
	pop	edx
$LL4@tmat4x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	edx
	jns	SHORT $LL4@tmat4x2

; 71   : 		this->value[0] = col_type(x0, y0);

	movss	xmm0, DWORD PTR _x0$[ebp]
	movss	DWORD PTR $T4[ebp], xmm0
	movss	xmm0, DWORD PTR _y0$[ebp]
	mov	eax, DWORD PTR $T4[ebp]
	movss	DWORD PTR $T4[ebp+4], xmm0

; 72   : 		this->value[1] = col_type(x1, y1);

	movss	xmm0, DWORD PTR _x1$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR $T4[ebp+4]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR _y1$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR $T3[ebp]
	movss	DWORD PTR $T3[ebp+4], xmm0

; 73   : 		this->value[2] = col_type(x2, y2);

	movss	xmm0, DWORD PTR _x2$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR $T3[ebp+4]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR _y2$[ebp]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR $T2[ebp]
	movss	DWORD PTR $T2[ebp+4], xmm0

; 74   : 		this->value[3] = col_type(x3, y3);

	movss	xmm0, DWORD PTR _x3$[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [ecx+20], eax
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR _y3$[ebp]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx+24], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [ecx+28], eax

; 75   : 	}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	32					; 00000020H
??0?$tmat4x2@M$00@glm@@QAE@MMMMMMMM@Z ENDP		; glm::tmat4x2<float,1>::tmat4x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$00@glm@@QAE@M@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
$T4 = -8						; size = 8
_scalar$ = 8						; size = 4
??0?$tmat4x2@M$00@glm@@QAE@M@Z PROC			; glm::tmat4x2<float,1>::tmat4x2<float,1>, COMDAT
; _this$ = ecx

; 55   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	3
	mov	eax, ecx
	pop	edx
$LL4@tmat4x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	edx
	jns	SHORT $LL4@tmat4x2

; 56   : 		this->value[0] = col_type(scalar, 0);

	movss	xmm0, DWORD PTR _scalar$[ebp]
	and	DWORD PTR $T4[ebp+4], 0
	movss	DWORD PTR $T4[ebp], xmm0
	mov	eax, DWORD PTR $T4[ebp]

; 57   : 		this->value[1] = col_type(0, scalar);

	and	DWORD PTR $T3[ebp], 0
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR $T4[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR $T3[ebp]

; 58   : 		this->value[2] = col_type(0, 0);

	and	DWORD PTR $T2[ebp], 0
	mov	DWORD PTR [ecx+8], eax
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	eax, DWORD PTR $T3[ebp+4]
	and	DWORD PTR $T2[ebp+4], 0
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR $T2[ebp]

; 59   : 		this->value[3] = col_type(0, 0);

	and	DWORD PTR $T1[ebp], 0
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR $T2[ebp+4]
	and	DWORD PTR $T1[ebp+4], 0
	mov	DWORD PTR [ecx+20], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx+24], eax
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [ecx+28], eax

; 60   : 	}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x2@M$00@glm@@QAE@M@Z ENDP			; glm::tmat4x2<float,1>::tmat4x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat4x2@M$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat4x2<float,1>::tmat4x2<float,1>, COMDAT
; _this$ = ecx

; 51   : 	{}

	push	3
	mov	eax, ecx
	pop	edx
$LL4@tmat4x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	edx
	jns	SHORT $LL4@tmat4x2
	mov	eax, ecx
	ret	4
??0?$tmat4x2@M$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat4x2<float,1>::tmat4x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tmat4x2@M$00@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tmat4x2@M$00@glm@@QAE@ABU01@@Z PROC		; glm::tmat4x2<float,1>::tmat4x2<float,1>, COMDAT
; _this$ = ecx

; 210  : template struct tmat4x2<float32, mediump>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	8
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tmat4x2@M$00@glm@@QAE@ABU01@@Z ENDP		; glm::tmat4x2<float,1>::tmat4x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$00@glm@@QAE@XZ
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
$T4 = -8						; size = 8
??0?$tmat4x2@M$00@glm@@QAE@XZ PROC			; glm::tmat4x2<float,1>::tmat4x2<float,1>, COMDAT
; _this$ = ecx

; 18   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	3
	mov	eax, ecx
	pop	edx
$LL4@tmat4x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	edx
	jns	SHORT $LL4@tmat4x2

; 19   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 20   : 				this->value[0] = col_type(1, 0);

	and	DWORD PTR $T4[ebp+4], 0
	mov	DWORD PTR $T4[ebp], 1065353216		; 3f800000H
	mov	eax, DWORD PTR $T4[ebp]

; 21   : 				this->value[1] = col_type(0, 1);

	and	DWORD PTR $T3[ebp], 0
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR $T4[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR $T3[ebp]

; 22   : 				this->value[2] = col_type(0, 0);

	and	DWORD PTR $T2[ebp], 0
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR $T3[ebp+4], 1065353216	; 3f800000H
	mov	eax, DWORD PTR $T3[ebp+4]
	and	DWORD PTR $T2[ebp+4], 0
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR $T2[ebp]

; 23   : 				this->value[3] = col_type(0, 0);

	and	DWORD PTR $T1[ebp], 0
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR $T2[ebp+4]
	and	DWORD PTR $T1[ebp+4], 0
	mov	DWORD PTR [ecx+20], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx+24], eax
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [ecx+28], eax

; 24   : #			endif
; 25   : 		}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$tmat4x2@M$00@glm@@QAE@XZ ENDP			; glm::tmat4x2<float,1>::tmat4x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??F?$tmat4x2@N$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat4x2@N$01@glm@@QAE?AU01@H@Z PROC		; glm::tmat4x2<double,2>::operator--, COMDAT
; _this$ = ecx

; 353  : 	{

	push	ebp
	mov	ebp, esp

; 354  : 		tmat4x2<T, P> Result(*this);
; 355  : 		--*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	mov	edx, ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	movups	xmm0, XMMWORD PTR [edx]
	push	16					; 00000010H
	pop	ecx
	subpd	xmm0, xmm1
	mov	esi, edx
	mov	edi, eax
	rep movsd
	movups	XMMWORD PTR [edx], xmm0
	pop	edi
	movups	xmm0, XMMWORD PTR [edx+16]
	pop	esi
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+16], xmm0
	movups	xmm0, XMMWORD PTR [edx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+32], xmm0
	movups	xmm0, XMMWORD PTR [edx+48]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+48], xmm0

; 356  : 		return Result;
; 357  : 	}

	pop	ebp
	ret	8
??F?$tmat4x2@N$01@glm@@QAE?AU01@H@Z ENDP		; glm::tmat4x2<double,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??E?$tmat4x2@N$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat4x2@N$01@glm@@QAE?AU01@H@Z PROC		; glm::tmat4x2<double,2>::operator++, COMDAT
; _this$ = ecx

; 345  : 	{

	push	ebp
	mov	ebp, esp

; 346  : 		tmat4x2<T, P> Result(*this);
; 347  : 		++*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	mov	edx, ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	movups	xmm0, XMMWORD PTR [edx]
	push	16					; 00000010H
	pop	ecx
	addpd	xmm0, xmm1
	mov	esi, edx
	mov	edi, eax
	rep movsd
	movups	XMMWORD PTR [edx], xmm0
	pop	edi
	movups	xmm0, XMMWORD PTR [edx+16]
	pop	esi
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+16], xmm0
	movups	xmm0, XMMWORD PTR [edx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+32], xmm0
	movups	xmm0, XMMWORD PTR [edx+48]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+48], xmm0

; 348  : 		return Result;
; 349  : 	}

	pop	ebp
	ret	8
??E?$tmat4x2@N$01@glm@@QAE?AU01@H@Z ENDP		; glm::tmat4x2<double,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??F?$tmat4x2@N$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat4x2@N$01@glm@@QAEAAU01@XZ PROC			; glm::tmat4x2<double,2>::operator--, COMDAT
; _this$ = ecx

; 336  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 337  : 		--this->value[1];
; 338  : 		--this->value[2];
; 339  : 		--this->value[3];
; 340  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0

; 341  : 	}

	ret	0
??F?$tmat4x2@N$01@glm@@QAEAAU01@XZ ENDP			; glm::tmat4x2<double,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??E?$tmat4x2@N$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat4x2@N$01@glm@@QAEAAU01@XZ PROC			; glm::tmat4x2<double,2>::operator++, COMDAT
; _this$ = ecx

; 326  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 327  : 		++this->value[1];
; 328  : 		++this->value[2];
; 329  : 		++this->value[3];
; 330  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0

; 331  : 	}

	ret	0
??E?$tmat4x2@N$01@glm@@QAEAAU01@XZ ENDP			; glm::tmat4x2<double,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tmat4x2@N$01@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tmat4x2@N$01@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tmat4x2<double,2>::operator=, COMDAT
; _this$ = ecx

; 208  : template struct tmat4x2<float64, lowp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	16					; 00000010H
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tmat4x2@N$01@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tmat4x2<double,2>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??A?$tmat4x2@N$01@glm@@QBEABU?$tvec2@N$01@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat4x2@N$01@glm@@QBEABU?$tvec2@N$01@1@H@Z PROC	; glm::tmat4x2<double,2>::operator[], COMDAT
; _this$ = ecx

; 225  : 	{

	push	ebp
	mov	ebp, esp

; 226  : 		assert(i < this->length());
; 227  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, ecx

; 228  : 	}

	pop	ebp
	ret	4
??A?$tmat4x2@N$01@glm@@QBEABU?$tvec2@N$01@1@H@Z ENDP	; glm::tmat4x2<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??A?$tmat4x2@N$01@glm@@QAEAAU?$tvec2@N$01@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat4x2@N$01@glm@@QAEAAU?$tvec2@N$01@1@H@Z PROC	; glm::tmat4x2<double,2>::operator[], COMDAT
; _this$ = ecx

; 218  : 	{

	push	ebp
	mov	ebp, esp

; 219  : 		assert(i < this->length());
; 220  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, ecx

; 221  : 	}

	pop	ebp
	ret	4
??A?$tmat4x2@N$01@glm@@QAEAAU?$tvec2@N$01@1@H@Z ENDP	; glm::tmat4x2<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.hpp
;	COMDAT ?length@?$tmat4x2@N$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat4x2@N$01@glm@@SAHXZ PROC			; glm::tmat4x2<double,2>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	push	4
	pop	eax
	ret	0
?length@?$tmat4x2@N$01@glm@@SAHXZ ENDP			; glm::tmat4x2<double,2>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$01@glm@@QAE@ABU?$tmat3x4@N$01@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
$T4 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat4x2@N$01@glm@@QAE@ABU?$tmat3x4@N$01@1@@Z PROC	; glm::tmat4x2<double,2>::tmat4x2<double,2>, COMDAT
; _this$ = ecx

; 207  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	xorps	xmm0, xmm0
	push	3
	pop	edx
$LL4@tmat4x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat4x2

; 208  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T4[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR $T4[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 209  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+32]
	lea	edi, DWORD PTR [ecx+16]
	lea	esi, DWORD PTR $T3[ebp]
	movups	XMMWORD PTR $T3[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 210  : 		this->value[2] = col_type(m[2]);

	movups	xmm0, XMMWORD PTR [eax+64]
	lea	edi, DWORD PTR [ecx+32]

; 211  : 		this->value[3] = col_type(0);
; 212  : 	}

	mov	eax, ecx
	lea	esi, DWORD PTR $T2[ebp]
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd
	xorps	xmm0, xmm0
	movsd
	movsd
	movsd
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+48]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x2@N$01@glm@@QAE@ABU?$tmat3x4@N$01@1@@Z ENDP	; glm::tmat4x2<double,2>::tmat4x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$01@glm@@QAE@ABU?$tmat4x3@N$01@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
$T4 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat4x2@N$01@glm@@QAE@ABU?$tmat4x3@N$01@1@@Z PROC	; glm::tmat4x2<double,2>::tmat4x2<double,2>, COMDAT
; _this$ = ecx

; 198  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	xorps	xmm0, xmm0
	push	3
	pop	edx
$LL4@tmat4x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat4x2

; 199  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T4[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR $T4[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 200  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+24]
	lea	edi, DWORD PTR [ecx+16]
	lea	esi, DWORD PTR $T3[ebp]
	movups	XMMWORD PTR $T3[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 201  : 		this->value[2] = col_type(m[2]);

	movups	xmm0, XMMWORD PTR [eax+48]
	lea	edi, DWORD PTR [ecx+32]
	lea	esi, DWORD PTR $T2[ebp]
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 202  : 		this->value[3] = col_type(m[3]);

	movups	xmm0, XMMWORD PTR [eax+72]
	lea	edi, DWORD PTR [ecx+48]

; 203  : 	}

	mov	eax, ecx
	lea	esi, DWORD PTR $T1[ebp]
	movups	XMMWORD PTR $T1[ebp], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x2@N$01@glm@@QAE@ABU?$tmat4x3@N$01@1@@Z ENDP	; glm::tmat4x2<double,2>::tmat4x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$01@glm@@QAE@ABU?$tmat2x4@N$01@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
$T4 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat4x2@N$01@glm@@QAE@ABU?$tmat2x4@N$01@1@@Z PROC	; glm::tmat4x2<double,2>::tmat4x2<double,2>, COMDAT
; _this$ = ecx

; 189  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	xorps	xmm0, xmm0
	push	3
	pop	edx
$LL4@tmat4x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat4x2

; 190  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T4[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR $T4[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 191  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+32]
	lea	edi, DWORD PTR [ecx+16]

; 192  : 		this->value[2] = col_type(0);
; 193  : 		this->value[3] = col_type(0);
; 194  : 	}

	mov	eax, ecx
	lea	esi, DWORD PTR $T3[ebp]
	movups	XMMWORD PTR $T3[ebp], xmm0
	movsd
	xorps	xmm0, xmm0
	movsd
	movsd
	movsd
	movupd	XMMWORD PTR $T2[ebp], xmm0
	lea	edi, DWORD PTR [ecx+32]
	lea	esi, DWORD PTR $T2[ebp]
	movsd
	movsd
	movsd
	movsd
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+48]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x2@N$01@glm@@QAE@ABU?$tmat2x4@N$01@1@@Z ENDP	; glm::tmat4x2<double,2>::tmat4x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$01@glm@@QAE@ABU?$tmat3x2@N$01@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
$T4 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat4x2@N$01@glm@@QAE@ABU?$tmat3x2@N$01@1@@Z PROC	; glm::tmat4x2<double,2>::tmat4x2<double,2>, COMDAT
; _this$ = ecx

; 180  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	xorps	xmm0, xmm0
	push	3
	pop	edx
$LL4@tmat4x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat4x2

; 181  : 		this->value[0] = col_type(m[0]);

	push	esi
	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	push	edi
	mov	esi, eax
	lea	edi, DWORD PTR $T4[ebp]
	movsd
	movsd
	movsd
	movsd
	mov	edi, ecx
	lea	esi, DWORD PTR $T4[ebp]
	movsd
	movsd
	movsd
	movsd

; 182  : 		this->value[1] = col_type(m[1]);

	lea	esi, DWORD PTR [eax+16]
	lea	edi, DWORD PTR $T3[ebp]
	movsd
	movsd
	movsd
	movsd
	lea	edi, DWORD PTR [ecx+16]
	lea	esi, DWORD PTR $T3[ebp]
	movsd
	movsd
	movsd
	movsd

; 183  : 		this->value[2] = col_type(m[2]);

	lea	esi, DWORD PTR [eax+32]

; 184  : 		this->value[3] = col_type(0);
; 185  : 	}

	mov	eax, ecx
	lea	edi, DWORD PTR $T2[ebp]
	movsd
	movsd
	movsd
	movsd
	lea	edi, DWORD PTR [ecx+32]
	lea	esi, DWORD PTR $T2[ebp]
	movsd
	movsd
	movsd
	movsd
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+48]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x2@N$01@glm@@QAE@ABU?$tmat3x2@N$01@1@@Z ENDP	; glm::tmat4x2<double,2>::tmat4x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$01@glm@@QAE@ABU?$tmat2x3@N$01@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
$T4 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat4x2@N$01@glm@@QAE@ABU?$tmat2x3@N$01@1@@Z PROC	; glm::tmat4x2<double,2>::tmat4x2<double,2>, COMDAT
; _this$ = ecx

; 171  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	xorps	xmm0, xmm0
	push	3
	pop	edx
$LL4@tmat4x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat4x2

; 172  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T4[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR $T4[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 173  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+24]
	lea	edi, DWORD PTR [ecx+16]

; 174  : 		this->value[2] = col_type(0);
; 175  : 		this->value[3] = col_type(0);
; 176  : 	}

	mov	eax, ecx
	lea	esi, DWORD PTR $T3[ebp]
	movups	XMMWORD PTR $T3[ebp], xmm0
	movsd
	xorps	xmm0, xmm0
	movsd
	movsd
	movsd
	movupd	XMMWORD PTR $T2[ebp], xmm0
	lea	edi, DWORD PTR [ecx+32]
	lea	esi, DWORD PTR $T2[ebp]
	movsd
	movsd
	movsd
	movsd
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+48]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x2@N$01@glm@@QAE@ABU?$tmat2x3@N$01@1@@Z ENDP	; glm::tmat4x2<double,2>::tmat4x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$01@glm@@QAE@ABU?$tmat4x4@N$01@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
$T4 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat4x2@N$01@glm@@QAE@ABU?$tmat4x4@N$01@1@@Z PROC	; glm::tmat4x2<double,2>::tmat4x2<double,2>, COMDAT
; _this$ = ecx

; 162  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	xorps	xmm0, xmm0
	push	3
	pop	edx
$LL4@tmat4x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat4x2

; 163  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T4[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR $T4[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 164  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+32]
	lea	edi, DWORD PTR [ecx+16]
	lea	esi, DWORD PTR $T3[ebp]
	movups	XMMWORD PTR $T3[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 165  : 		this->value[2] = col_type(m[2]);

	movups	xmm0, XMMWORD PTR [eax+64]
	lea	edi, DWORD PTR [ecx+32]
	lea	esi, DWORD PTR $T2[ebp]
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 166  : 		this->value[3] = col_type(m[3]);

	movups	xmm0, XMMWORD PTR [eax+96]
	lea	edi, DWORD PTR [ecx+48]

; 167  : 	}

	mov	eax, ecx
	lea	esi, DWORD PTR $T1[ebp]
	movups	XMMWORD PTR $T1[ebp], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x2@N$01@glm@@QAE@ABU?$tmat4x4@N$01@1@@Z ENDP	; glm::tmat4x2<double,2>::tmat4x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$01@glm@@QAE@ABU?$tmat3x3@N$01@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
$T4 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat4x2@N$01@glm@@QAE@ABU?$tmat3x3@N$01@1@@Z PROC	; glm::tmat4x2<double,2>::tmat4x2<double,2>, COMDAT
; _this$ = ecx

; 153  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	xorps	xmm0, xmm0
	push	3
	pop	edx
$LL4@tmat4x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat4x2

; 154  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T4[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR $T4[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 155  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+24]
	lea	edi, DWORD PTR [ecx+16]
	lea	esi, DWORD PTR $T3[ebp]
	movups	XMMWORD PTR $T3[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 156  : 		this->value[2] = col_type(m[2]);

	movups	xmm0, XMMWORD PTR [eax+48]
	lea	edi, DWORD PTR [ecx+32]

; 157  : 		this->value[3] = col_type(0);
; 158  : 	}

	mov	eax, ecx
	lea	esi, DWORD PTR $T2[ebp]
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd
	xorps	xmm0, xmm0
	movsd
	movsd
	movsd
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+48]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x2@N$01@glm@@QAE@ABU?$tmat3x3@N$01@1@@Z ENDP	; glm::tmat4x2<double,2>::tmat4x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$01@glm@@QAE@ABU?$tmat2x2@N$01@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
$T4 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat4x2@N$01@glm@@QAE@ABU?$tmat2x2@N$01@1@@Z PROC	; glm::tmat4x2<double,2>::tmat4x2<double,2>, COMDAT
; _this$ = ecx

; 144  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	xorps	xmm0, xmm0
	push	3
	pop	edx
$LL4@tmat4x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat4x2

; 145  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	push	esi
	push	edi
	mov	esi, eax
	lea	edi, DWORD PTR $T4[ebp]
	movsd
	movsd
	movsd
	movsd
	mov	edi, ecx
	lea	esi, DWORD PTR $T4[ebp]
	movsd
	movsd
	movsd
	movsd

; 146  : 		this->value[1] = col_type(m[1]);

	lea	esi, DWORD PTR [eax+16]

; 147  : 		this->value[2] = col_type(0);
; 148  : 		this->value[3] = col_type(0);
; 149  : 	}

	mov	eax, ecx
	lea	edi, DWORD PTR $T3[ebp]
	movsd
	movsd
	movsd
	movsd
	lea	edi, DWORD PTR [ecx+16]
	lea	esi, DWORD PTR $T3[ebp]
	movsd
	movsd
	movsd
	movsd
	movupd	XMMWORD PTR $T2[ebp], xmm0
	lea	edi, DWORD PTR [ecx+32]
	lea	esi, DWORD PTR $T2[ebp]
	movsd
	movsd
	movsd
	movsd
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+48]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x2@N$01@glm@@QAE@ABU?$tmat2x2@N$01@1@@Z ENDP	; glm::tmat4x2<double,2>::tmat4x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$01@glm@@QAE@ABU?$tvec2@N$01@1@000@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
_v3$ = 20						; size = 4
??0?$tmat4x2@N$01@glm@@QAE@ABU?$tvec2@N$01@1@000@Z PROC	; glm::tmat4x2<double,2>::tmat4x2<double,2>, COMDAT
; _this$ = ecx

; 85   : 	{

	push	ebp
	mov	ebp, esp
	push	3
	mov	eax, ecx
	xorps	xmm0, xmm0
	pop	edx
$LL4@tmat4x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat4x2

; 86   : 		this->value[0] = v0;

	push	esi
	mov	esi, DWORD PTR _v0$[ebp]

; 87   : 		this->value[1] = v1;
; 88   : 		this->value[2] = v2;
; 89   : 		this->value[3] = v3;
; 90   : 	}

	mov	eax, ecx
	push	edi
	mov	edi, ecx
	movsd
	movsd
	movsd
	movsd
	mov	esi, DWORD PTR _v1$[ebp]
	lea	edi, DWORD PTR [ecx+16]
	movsd
	movsd
	movsd
	movsd
	mov	esi, DWORD PTR _v2$[ebp]
	lea	edi, DWORD PTR [ecx+32]
	movsd
	movsd
	movsd
	movsd
	mov	esi, DWORD PTR _v3$[ebp]
	lea	edi, DWORD PTR [ecx+48]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	16					; 00000010H
??0?$tmat4x2@N$01@glm@@QAE@ABU?$tvec2@N$01@1@000@Z ENDP	; glm::tmat4x2<double,2>::tmat4x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$01@glm@@QAE@NNNNNNNN@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
$T4 = -16						; size = 16
_x0$ = 8						; size = 8
_y0$ = 16						; size = 8
_x1$ = 24						; size = 8
_y1$ = 32						; size = 8
_x2$ = 40						; size = 8
_y2$ = 48						; size = 8
_x3$ = 56						; size = 8
_y3$ = 64						; size = 8
??0?$tmat4x2@N$01@glm@@QAE@NNNNNNNN@Z PROC		; glm::tmat4x2<double,2>::tmat4x2<double,2>, COMDAT
; _this$ = ecx

; 70   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	xorps	xmm0, xmm0
	push	3
	pop	edx
$LL4@tmat4x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat4x2

; 71   : 		this->value[0] = col_type(x0, y0);

	movsd	xmm0, QWORD PTR _x0$[ebp]

; 72   : 		this->value[1] = col_type(x1, y1);
; 73   : 		this->value[2] = col_type(x2, y2);
; 74   : 		this->value[3] = col_type(x3, y3);
; 75   : 	}

	mov	eax, ecx
	push	esi
	push	edi
	movsd	QWORD PTR $T4[ebp], xmm0
	lea	esi, DWORD PTR $T4[ebp]
	movsd	xmm0, QWORD PTR _y0$[ebp]
	mov	edi, ecx
	movsd	QWORD PTR $T4[ebp+8], xmm0
	movsd	xmm0, QWORD PTR _x1$[ebp]
	movsd
	movsd
	movsd
	movsd
	movsd	QWORD PTR $T3[ebp], xmm0
	lea	edi, DWORD PTR [ecx+16]
	movsd	xmm0, QWORD PTR _y1$[ebp]
	lea	esi, DWORD PTR $T3[ebp]
	movsd	QWORD PTR $T3[ebp+8], xmm0
	movsd
	movsd	xmm0, QWORD PTR _x2$[ebp]
	movsd
	movsd
	movsd
	movsd	QWORD PTR $T2[ebp], xmm0
	lea	edi, DWORD PTR [ecx+32]
	movsd	xmm0, QWORD PTR _y2$[ebp]
	lea	esi, DWORD PTR $T2[ebp]
	movsd	QWORD PTR $T2[ebp+8], xmm0
	movsd	xmm0, QWORD PTR _x3$[ebp]
	movsd
	movsd
	movsd
	movsd
	movsd	QWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+48]
	movsd	xmm0, QWORD PTR _y3$[ebp]
	lea	esi, DWORD PTR $T1[ebp]
	movsd	QWORD PTR $T1[ebp+8], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	64					; 00000040H
??0?$tmat4x2@N$01@glm@@QAE@NNNNNNNN@Z ENDP		; glm::tmat4x2<double,2>::tmat4x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$01@glm@@QAE@N@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
$T4 = -16						; size = 16
_scalar$ = 8						; size = 8
??0?$tmat4x2@N$01@glm@@QAE@N@Z PROC			; glm::tmat4x2<double,2>::tmat4x2<double,2>, COMDAT
; _this$ = ecx

; 55   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	xorps	xmm1, xmm1
	push	3
	pop	edx
$LL4@tmat4x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm1
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat4x2

; 56   : 		this->value[0] = col_type(scalar, 0);

	movsd	xmm0, QWORD PTR _scalar$[ebp]

; 57   : 		this->value[1] = col_type(0, scalar);
; 58   : 		this->value[2] = col_type(0, 0);
; 59   : 		this->value[3] = col_type(0, 0);
; 60   : 	}

	mov	eax, ecx
	push	esi
	push	edi
	movsd	QWORD PTR $T4[ebp], xmm0
	lea	esi, DWORD PTR $T4[ebp]
	movsd	QWORD PTR $T4[ebp+8], xmm1
	mov	edi, ecx
	movsd
	movsd
	movsd
	movsd
	movsd	QWORD PTR $T3[ebp+8], xmm0
	lea	edi, DWORD PTR [ecx+16]
	movsd	QWORD PTR $T3[ebp], xmm1
	lea	esi, DWORD PTR $T3[ebp]
	movsd
	xorps	xmm0, xmm0
	movsd
	movsd
	movsd
	movupd	XMMWORD PTR $T2[ebp], xmm0
	lea	edi, DWORD PTR [ecx+32]
	lea	esi, DWORD PTR $T2[ebp]
	movsd
	movsd
	movsd
	movsd
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+48]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$tmat4x2@N$01@glm@@QAE@N@Z ENDP			; glm::tmat4x2<double,2>::tmat4x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat4x2@N$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat4x2<double,2>::tmat4x2<double,2>, COMDAT
; _this$ = ecx

; 51   : 	{}

	push	3
	mov	eax, ecx
	xorps	xmm0, xmm0
	pop	edx
$LL4@tmat4x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat4x2
	mov	eax, ecx
	ret	4
??0?$tmat4x2@N$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat4x2<double,2>::tmat4x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tmat4x2@N$01@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tmat4x2@N$01@glm@@QAE@ABU01@@Z PROC		; glm::tmat4x2<double,2>::tmat4x2<double,2>, COMDAT
; _this$ = ecx

; 208  : template struct tmat4x2<float64, lowp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	16					; 00000010H
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tmat4x2@N$01@glm@@QAE@ABU01@@Z ENDP		; glm::tmat4x2<double,2>::tmat4x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$01@glm@@QAE@XZ
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
$T4 = -16						; size = 16
??0?$tmat4x2@N$01@glm@@QAE@XZ PROC			; glm::tmat4x2<double,2>::tmat4x2<double,2>, COMDAT
; _this$ = ecx

; 18   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	xorps	xmm0, xmm0
	push	3
	pop	edx
$LL4@tmat4x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat4x2

; 19   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 20   : 				this->value[0] = col_type(1, 0);
; 21   : 				this->value[1] = col_type(0, 1);
; 22   : 				this->value[2] = col_type(0, 0);
; 23   : 				this->value[3] = col_type(0, 0);
; 24   : #			endif
; 25   : 		}

	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	mov	eax, ecx
	push	esi
	push	edi
	movupd	XMMWORD PTR $T4[ebp], xmm0
	lea	esi, DWORD PTR $T4[ebp]
	mov	edi, ecx
	movaps	xmm0, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	movsd
	movsd
	movsd
	movsd
	movupd	XMMWORD PTR $T3[ebp], xmm0
	lea	edi, DWORD PTR [ecx+16]
	lea	esi, DWORD PTR $T3[ebp]
	xorps	xmm0, xmm0
	movsd
	movsd
	movsd
	movsd
	movupd	XMMWORD PTR $T2[ebp], xmm0
	lea	edi, DWORD PTR [ecx+32]
	lea	esi, DWORD PTR $T2[ebp]
	movsd
	movsd
	movsd
	movsd
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+48]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$tmat4x2@N$01@glm@@QAE@XZ ENDP			; glm::tmat4x2<double,2>::tmat4x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??F?$tmat4x2@M$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat4x2@M$01@glm@@QAE?AU01@H@Z PROC		; glm::tmat4x2<float,2>::operator--, COMDAT
; _this$ = ecx

; 353  : 	{

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi

; 354  : 		tmat4x2<T, P> Result(*this);

	mov	edi, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, ecx
	push	8
	pop	ecx
	mov	esi, eax
	rep movsd

; 355  : 		--*this;

	mov	ecx, eax
	call	??F?$tmat4x2@M$01@glm@@QAEAAU01@XZ	; glm::tmat4x2<float,2>::operator--

; 356  : 		return Result;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi

; 357  : 	}

	pop	ebp
	ret	8
??F?$tmat4x2@M$01@glm@@QAE?AU01@H@Z ENDP		; glm::tmat4x2<float,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??E?$tmat4x2@M$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat4x2@M$01@glm@@QAE?AU01@H@Z PROC		; glm::tmat4x2<float,2>::operator++, COMDAT
; _this$ = ecx

; 345  : 	{

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi

; 346  : 		tmat4x2<T, P> Result(*this);

	mov	edi, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, ecx
	push	8
	pop	ecx
	mov	esi, eax
	rep movsd

; 347  : 		++*this;

	mov	ecx, eax
	call	??E?$tmat4x2@M$01@glm@@QAEAAU01@XZ	; glm::tmat4x2<float,2>::operator++

; 348  : 		return Result;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi

; 349  : 	}

	pop	ebp
	ret	8
??E?$tmat4x2@M$01@glm@@QAE?AU01@H@Z ENDP		; glm::tmat4x2<float,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??F?$tmat4x2@M$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat4x2@M$01@glm@@QAEAAU01@XZ PROC			; glm::tmat4x2<float,2>::operator--, COMDAT
; _this$ = ecx

; 336  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 337  : 		--this->value[1];
; 338  : 		--this->value[2];
; 339  : 		--this->value[3];
; 340  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0

; 341  : 	}

	ret	0
??F?$tmat4x2@M$01@glm@@QAEAAU01@XZ ENDP			; glm::tmat4x2<float,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??E?$tmat4x2@M$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat4x2@M$01@glm@@QAEAAU01@XZ PROC			; glm::tmat4x2<float,2>::operator++, COMDAT
; _this$ = ecx

; 326  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 327  : 		++this->value[1];
; 328  : 		++this->value[2];
; 329  : 		++this->value[3];
; 330  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0

; 331  : 	}

	ret	0
??E?$tmat4x2@M$01@glm@@QAEAAU01@XZ ENDP			; glm::tmat4x2<float,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tmat4x2@M$01@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tmat4x2@M$01@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tmat4x2<float,2>::operator=, COMDAT
; _this$ = ecx

; 207  : template struct tmat4x2<float32, lowp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	8
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tmat4x2@M$01@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tmat4x2<float,2>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??A?$tmat4x2@M$01@glm@@QBEABU?$tvec2@M$01@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat4x2@M$01@glm@@QBEABU?$tvec2@M$01@1@H@Z PROC	; glm::tmat4x2<float,2>::operator[], COMDAT
; _this$ = ecx

; 225  : 	{

	push	ebp
	mov	ebp, esp

; 226  : 		assert(i < this->length());
; 227  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 228  : 	}

	pop	ebp
	ret	4
??A?$tmat4x2@M$01@glm@@QBEABU?$tvec2@M$01@1@H@Z ENDP	; glm::tmat4x2<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??A?$tmat4x2@M$01@glm@@QAEAAU?$tvec2@M$01@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat4x2@M$01@glm@@QAEAAU?$tvec2@M$01@1@H@Z PROC	; glm::tmat4x2<float,2>::operator[], COMDAT
; _this$ = ecx

; 218  : 	{

	push	ebp
	mov	ebp, esp

; 219  : 		assert(i < this->length());
; 220  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 221  : 	}

	pop	ebp
	ret	4
??A?$tmat4x2@M$01@glm@@QAEAAU?$tvec2@M$01@1@H@Z ENDP	; glm::tmat4x2<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.hpp
;	COMDAT ?length@?$tmat4x2@M$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat4x2@M$01@glm@@SAHXZ PROC			; glm::tmat4x2<float,2>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	push	4
	pop	eax
	ret	0
?length@?$tmat4x2@M$01@glm@@SAHXZ ENDP			; glm::tmat4x2<float,2>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$01@glm@@QAE@ABU?$tmat3x4@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
$T4 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat4x2@M$01@glm@@QAE@ABU?$tmat3x4@M$01@1@@Z PROC	; glm::tmat4x2<float,2>::tmat4x2<float,2>, COMDAT
; _this$ = ecx

; 207  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	mov	edx, ecx
	push	3
	mov	eax, edx
	pop	ecx
$LL4@tmat4x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	ecx
	jns	SHORT $LL4@tmat4x2

; 208  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T4[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T4[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T4[ebp+4], xmm0
	mov	eax, DWORD PTR $T4[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 209  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+16]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [edx+12], eax

; 210  : 		this->value[2] = col_type(m[2]);

	movss	xmm0, DWORD PTR [ecx+32]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR $T2[ebp]

; 211  : 		this->value[3] = col_type(0);

	and	DWORD PTR $T1[ebp], 0
	mov	DWORD PTR [edx+16], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	and	DWORD PTR $T1[ebp+4], 0
	mov	DWORD PTR [edx+20], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+24], eax
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+28], eax

; 212  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x2@M$01@glm@@QAE@ABU?$tmat3x4@M$01@1@@Z ENDP	; glm::tmat4x2<float,2>::tmat4x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$01@glm@@QAE@ABU?$tmat4x3@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
$T4 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat4x2@M$01@glm@@QAE@ABU?$tmat4x3@M$01@1@@Z PROC	; glm::tmat4x2<float,2>::tmat4x2<float,2>, COMDAT
; _this$ = ecx

; 198  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	mov	edx, ecx
	push	3
	mov	eax, edx
	pop	ecx
$LL4@tmat4x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	ecx
	jns	SHORT $LL4@tmat4x2

; 199  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T4[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T4[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T4[ebp+4], xmm0
	mov	eax, DWORD PTR $T4[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 200  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+12]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [edx+12], eax

; 201  : 		this->value[2] = col_type(m[2]);

	movss	xmm0, DWORD PTR [ecx+24]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx+16], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [edx+20], eax

; 202  : 		this->value[3] = col_type(m[3]);

	movss	xmm0, DWORD PTR [ecx+36]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+40]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+24], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+28], eax

; 203  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x2@M$01@glm@@QAE@ABU?$tmat4x3@M$01@1@@Z ENDP	; glm::tmat4x2<float,2>::tmat4x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$01@glm@@QAE@ABU?$tmat2x4@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
$T4 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat4x2@M$01@glm@@QAE@ABU?$tmat2x4@M$01@1@@Z PROC	; glm::tmat4x2<float,2>::tmat4x2<float,2>, COMDAT
; _this$ = ecx

; 189  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	mov	edx, ecx
	push	3
	mov	eax, edx
	pop	ecx
$LL4@tmat4x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	ecx
	jns	SHORT $LL4@tmat4x2

; 190  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T4[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T4[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T4[ebp+4], xmm0
	mov	eax, DWORD PTR $T4[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 191  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+16]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR $T3[ebp]

; 192  : 		this->value[2] = col_type(0);

	and	DWORD PTR $T2[ebp], 0
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	eax, DWORD PTR $T3[ebp+4]
	and	DWORD PTR $T2[ebp+4], 0
	mov	DWORD PTR [edx+12], eax
	mov	eax, DWORD PTR $T2[ebp]

; 193  : 		this->value[3] = col_type(0);

	and	DWORD PTR $T1[ebp], 0
	mov	DWORD PTR [edx+16], eax
	mov	eax, DWORD PTR $T2[ebp+4]
	and	DWORD PTR $T1[ebp+4], 0
	mov	DWORD PTR [edx+20], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+24], eax
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+28], eax

; 194  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x2@M$01@glm@@QAE@ABU?$tmat2x4@M$01@1@@Z ENDP	; glm::tmat4x2<float,2>::tmat4x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$01@glm@@QAE@ABU?$tmat3x2@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat4x2@M$01@glm@@QAE@ABU?$tmat3x2@M$01@1@@Z PROC	; glm::tmat4x2<float,2>::tmat4x2<float,2>, COMDAT
; _this$ = ecx

; 180  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	esi
	mov	esi, ecx
	push	3
	mov	eax, esi
	pop	ecx
$LL4@tmat4x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	ecx
	jns	SHORT $LL4@tmat4x2

; 181  : 		this->value[0] = col_type(m[0]);

	mov	edx, DWORD PTR _m$[ebp]

; 182  : 		this->value[1] = col_type(m[1]);
; 183  : 		this->value[2] = col_type(m[2]);
; 184  : 		this->value[3] = col_type(0);

	and	DWORD PTR $T1[ebp], 0
	and	DWORD PTR $T1[ebp+4], 0
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], ecx
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR [esi+8], eax
	mov	DWORD PTR [esi+12], ecx
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [edx+20]
	mov	DWORD PTR [esi+16], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [esi+24], eax
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [esi+28], eax

; 185  : 	}

	mov	eax, esi
	mov	DWORD PTR [esi+20], ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x2@M$01@glm@@QAE@ABU?$tmat3x2@M$01@1@@Z ENDP	; glm::tmat4x2<float,2>::tmat4x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$01@glm@@QAE@ABU?$tmat2x3@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
$T4 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat4x2@M$01@glm@@QAE@ABU?$tmat2x3@M$01@1@@Z PROC	; glm::tmat4x2<float,2>::tmat4x2<float,2>, COMDAT
; _this$ = ecx

; 171  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	mov	edx, ecx
	push	3
	mov	eax, edx
	pop	ecx
$LL4@tmat4x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	ecx
	jns	SHORT $LL4@tmat4x2

; 172  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T4[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T4[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T4[ebp+4], xmm0
	mov	eax, DWORD PTR $T4[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 173  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+12]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR $T3[ebp]

; 174  : 		this->value[2] = col_type(0);

	and	DWORD PTR $T2[ebp], 0
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	eax, DWORD PTR $T3[ebp+4]
	and	DWORD PTR $T2[ebp+4], 0
	mov	DWORD PTR [edx+12], eax
	mov	eax, DWORD PTR $T2[ebp]

; 175  : 		this->value[3] = col_type(0);

	and	DWORD PTR $T1[ebp], 0
	mov	DWORD PTR [edx+16], eax
	mov	eax, DWORD PTR $T2[ebp+4]
	and	DWORD PTR $T1[ebp+4], 0
	mov	DWORD PTR [edx+20], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+24], eax
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+28], eax

; 176  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x2@M$01@glm@@QAE@ABU?$tmat2x3@M$01@1@@Z ENDP	; glm::tmat4x2<float,2>::tmat4x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$01@glm@@QAE@ABU?$tmat4x4@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
$T4 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat4x2@M$01@glm@@QAE@ABU?$tmat4x4@M$01@1@@Z PROC	; glm::tmat4x2<float,2>::tmat4x2<float,2>, COMDAT
; _this$ = ecx

; 162  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	mov	edx, ecx
	push	3
	mov	eax, edx
	pop	ecx
$LL4@tmat4x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	ecx
	jns	SHORT $LL4@tmat4x2

; 163  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T4[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T4[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T4[ebp+4], xmm0
	mov	eax, DWORD PTR $T4[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 164  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+16]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [edx+12], eax

; 165  : 		this->value[2] = col_type(m[2]);

	movss	xmm0, DWORD PTR [ecx+32]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx+16], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [edx+20], eax

; 166  : 		this->value[3] = col_type(m[3]);

	movss	xmm0, DWORD PTR [ecx+48]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+24], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+28], eax

; 167  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x2@M$01@glm@@QAE@ABU?$tmat4x4@M$01@1@@Z ENDP	; glm::tmat4x2<float,2>::tmat4x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$01@glm@@QAE@ABU?$tmat3x3@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
$T4 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat4x2@M$01@glm@@QAE@ABU?$tmat3x3@M$01@1@@Z PROC	; glm::tmat4x2<float,2>::tmat4x2<float,2>, COMDAT
; _this$ = ecx

; 153  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	mov	edx, ecx
	push	3
	mov	eax, edx
	pop	ecx
$LL4@tmat4x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	ecx
	jns	SHORT $LL4@tmat4x2

; 154  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T4[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T4[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T4[ebp+4], xmm0
	mov	eax, DWORD PTR $T4[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 155  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+12]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [edx+12], eax

; 156  : 		this->value[2] = col_type(m[2]);

	movss	xmm0, DWORD PTR [ecx+24]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR $T2[ebp]

; 157  : 		this->value[3] = col_type(0);

	and	DWORD PTR $T1[ebp], 0
	mov	DWORD PTR [edx+16], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	and	DWORD PTR $T1[ebp+4], 0
	mov	DWORD PTR [edx+20], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+24], eax
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+28], eax

; 158  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x2@M$01@glm@@QAE@ABU?$tmat3x3@M$01@1@@Z ENDP	; glm::tmat4x2<float,2>::tmat4x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$01@glm@@QAE@ABU?$tmat2x2@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat4x2@M$01@glm@@QAE@ABU?$tmat2x2@M$01@1@@Z PROC	; glm::tmat4x2<float,2>::tmat4x2<float,2>, COMDAT
; _this$ = ecx

; 144  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	esi
	mov	esi, ecx
	push	3
	mov	eax, esi
	pop	ecx
$LL4@tmat4x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	ecx
	jns	SHORT $LL4@tmat4x2

; 145  : 		this->value[0] = col_type(m[0]);

	mov	edx, DWORD PTR _m$[ebp]

; 146  : 		this->value[1] = col_type(m[1]);
; 147  : 		this->value[2] = col_type(0);

	and	DWORD PTR $T2[ebp], 0
	and	DWORD PTR $T2[ebp+4], 0
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], ecx
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR [esi+8], eax
	mov	eax, DWORD PTR $T2[ebp]

; 148  : 		this->value[3] = col_type(0);

	and	DWORD PTR $T1[ebp], 0
	mov	DWORD PTR [esi+16], eax
	mov	eax, DWORD PTR $T2[ebp+4]
	and	DWORD PTR $T1[ebp+4], 0
	mov	DWORD PTR [esi+20], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [esi+24], eax
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [esi+28], eax

; 149  : 	}

	mov	eax, esi
	mov	DWORD PTR [esi+12], ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x2@M$01@glm@@QAE@ABU?$tmat2x2@M$01@1@@Z ENDP	; glm::tmat4x2<float,2>::tmat4x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$01@glm@@QAE@ABU?$tvec2@M$01@1@000@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
_v3$ = 20						; size = 4
??0?$tmat4x2@M$01@glm@@QAE@ABU?$tvec2@M$01@1@000@Z PROC	; glm::tmat4x2<float,2>::tmat4x2<float,2>, COMDAT
; _this$ = ecx

; 85   : 	{

	push	ebp
	mov	ebp, esp
	mov	edx, ecx
	push	3
	mov	eax, edx
	pop	ecx
$LL4@tmat4x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	ecx
	jns	SHORT $LL4@tmat4x2

; 86   : 		this->value[0] = v0;

	mov	ecx, DWORD PTR _v0$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]

; 87   : 		this->value[1] = v1;

	mov	ecx, DWORD PTR _v1$[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR [ecx+4]

; 88   : 		this->value[2] = v2;

	mov	ecx, DWORD PTR _v2$[ebp]
	mov	DWORD PTR [edx+12], eax
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx+16], eax
	mov	eax, DWORD PTR [ecx+4]

; 89   : 		this->value[3] = v3;

	mov	ecx, DWORD PTR _v3$[ebp]
	mov	DWORD PTR [edx+20], eax
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx+24], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+28], eax

; 90   : 	}

	mov	eax, edx
	pop	ebp
	ret	16					; 00000010H
??0?$tmat4x2@M$01@glm@@QAE@ABU?$tvec2@M$01@1@000@Z ENDP	; glm::tmat4x2<float,2>::tmat4x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$01@glm@@QAE@MMMMMMMM@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
$T4 = -8						; size = 8
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_x1$ = 16						; size = 4
_y1$ = 20						; size = 4
_x2$ = 24						; size = 4
_y2$ = 28						; size = 4
_x3$ = 32						; size = 4
_y3$ = 36						; size = 4
??0?$tmat4x2@M$01@glm@@QAE@MMMMMMMM@Z PROC		; glm::tmat4x2<float,2>::tmat4x2<float,2>, COMDAT
; _this$ = ecx

; 70   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	3
	mov	eax, ecx
	pop	edx
$LL4@tmat4x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	edx
	jns	SHORT $LL4@tmat4x2

; 71   : 		this->value[0] = col_type(x0, y0);

	movss	xmm0, DWORD PTR _x0$[ebp]
	movss	DWORD PTR $T4[ebp], xmm0
	movss	xmm0, DWORD PTR _y0$[ebp]
	mov	eax, DWORD PTR $T4[ebp]
	movss	DWORD PTR $T4[ebp+4], xmm0

; 72   : 		this->value[1] = col_type(x1, y1);

	movss	xmm0, DWORD PTR _x1$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR $T4[ebp+4]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR _y1$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR $T3[ebp]
	movss	DWORD PTR $T3[ebp+4], xmm0

; 73   : 		this->value[2] = col_type(x2, y2);

	movss	xmm0, DWORD PTR _x2$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR $T3[ebp+4]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR _y2$[ebp]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR $T2[ebp]
	movss	DWORD PTR $T2[ebp+4], xmm0

; 74   : 		this->value[3] = col_type(x3, y3);

	movss	xmm0, DWORD PTR _x3$[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [ecx+20], eax
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR _y3$[ebp]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx+24], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [ecx+28], eax

; 75   : 	}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	32					; 00000020H
??0?$tmat4x2@M$01@glm@@QAE@MMMMMMMM@Z ENDP		; glm::tmat4x2<float,2>::tmat4x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$01@glm@@QAE@M@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
$T4 = -8						; size = 8
_scalar$ = 8						; size = 4
??0?$tmat4x2@M$01@glm@@QAE@M@Z PROC			; glm::tmat4x2<float,2>::tmat4x2<float,2>, COMDAT
; _this$ = ecx

; 55   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	3
	mov	eax, ecx
	pop	edx
$LL4@tmat4x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	edx
	jns	SHORT $LL4@tmat4x2

; 56   : 		this->value[0] = col_type(scalar, 0);

	movss	xmm0, DWORD PTR _scalar$[ebp]
	and	DWORD PTR $T4[ebp+4], 0
	movss	DWORD PTR $T4[ebp], xmm0
	mov	eax, DWORD PTR $T4[ebp]

; 57   : 		this->value[1] = col_type(0, scalar);

	and	DWORD PTR $T3[ebp], 0
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR $T4[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR $T3[ebp]

; 58   : 		this->value[2] = col_type(0, 0);

	and	DWORD PTR $T2[ebp], 0
	mov	DWORD PTR [ecx+8], eax
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	eax, DWORD PTR $T3[ebp+4]
	and	DWORD PTR $T2[ebp+4], 0
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR $T2[ebp]

; 59   : 		this->value[3] = col_type(0, 0);

	and	DWORD PTR $T1[ebp], 0
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR $T2[ebp+4]
	and	DWORD PTR $T1[ebp+4], 0
	mov	DWORD PTR [ecx+20], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx+24], eax
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [ecx+28], eax

; 60   : 	}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x2@M$01@glm@@QAE@M@Z ENDP			; glm::tmat4x2<float,2>::tmat4x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat4x2@M$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat4x2<float,2>::tmat4x2<float,2>, COMDAT
; _this$ = ecx

; 51   : 	{}

	push	3
	mov	eax, ecx
	pop	edx
$LL4@tmat4x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	edx
	jns	SHORT $LL4@tmat4x2
	mov	eax, ecx
	ret	4
??0?$tmat4x2@M$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat4x2<float,2>::tmat4x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tmat4x2@M$01@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tmat4x2@M$01@glm@@QAE@ABU01@@Z PROC		; glm::tmat4x2<float,2>::tmat4x2<float,2>, COMDAT
; _this$ = ecx

; 207  : template struct tmat4x2<float32, lowp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	8
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tmat4x2@M$01@glm@@QAE@ABU01@@Z ENDP		; glm::tmat4x2<float,2>::tmat4x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$01@glm@@QAE@XZ
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
$T4 = -8						; size = 8
??0?$tmat4x2@M$01@glm@@QAE@XZ PROC			; glm::tmat4x2<float,2>::tmat4x2<float,2>, COMDAT
; _this$ = ecx

; 18   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	3
	mov	eax, ecx
	pop	edx
$LL4@tmat4x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	edx
	jns	SHORT $LL4@tmat4x2

; 19   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 20   : 				this->value[0] = col_type(1, 0);

	and	DWORD PTR $T4[ebp+4], 0
	mov	DWORD PTR $T4[ebp], 1065353216		; 3f800000H
	mov	eax, DWORD PTR $T4[ebp]

; 21   : 				this->value[1] = col_type(0, 1);

	and	DWORD PTR $T3[ebp], 0
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR $T4[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR $T3[ebp]

; 22   : 				this->value[2] = col_type(0, 0);

	and	DWORD PTR $T2[ebp], 0
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR $T3[ebp+4], 1065353216	; 3f800000H
	mov	eax, DWORD PTR $T3[ebp+4]
	and	DWORD PTR $T2[ebp+4], 0
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR $T2[ebp]

; 23   : 				this->value[3] = col_type(0, 0);

	and	DWORD PTR $T1[ebp], 0
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR $T2[ebp+4]
	and	DWORD PTR $T1[ebp+4], 0
	mov	DWORD PTR [ecx+20], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx+24], eax
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [ecx+28], eax

; 24   : #			endif
; 25   : 		}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$tmat4x2@M$01@glm@@QAE@XZ ENDP			; glm::tmat4x2<float,2>::tmat4x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??F?$tmat3x4@N$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat3x4@N$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tmat3x4<double,0>::operator--, COMDAT
; _this$ = ecx

; 314  : 	{

	push	ebp
	mov	ebp, esp

; 315  : 		tmat3x4<T, P> Result(*this);
; 316  : 		--*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	mov	edx, ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	movups	xmm0, XMMWORD PTR [edx]
	push	24					; 00000018H
	pop	ecx
	subpd	xmm0, xmm1
	mov	esi, edx
	mov	edi, eax
	rep movsd
	movups	XMMWORD PTR [edx], xmm0
	pop	edi
	movups	xmm0, XMMWORD PTR [edx+16]
	pop	esi
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+16], xmm0
	movups	xmm0, XMMWORD PTR [edx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+32], xmm0
	movups	xmm0, XMMWORD PTR [edx+48]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+48], xmm0
	movups	xmm0, XMMWORD PTR [edx+64]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+64], xmm0
	movups	xmm0, XMMWORD PTR [edx+80]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+80], xmm0

; 317  : 		return Result;
; 318  : 	}

	pop	ebp
	ret	8
??F?$tmat3x4@N$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tmat3x4<double,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??E?$tmat3x4@N$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat3x4@N$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tmat3x4<double,0>::operator++, COMDAT
; _this$ = ecx

; 306  : 	{

	push	ebp
	mov	ebp, esp

; 307  : 		tmat3x4<T, P> Result(*this);
; 308  : 		++*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	mov	edx, ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	movups	xmm0, XMMWORD PTR [edx]
	push	24					; 00000018H
	pop	ecx
	addpd	xmm0, xmm1
	mov	esi, edx
	mov	edi, eax
	rep movsd
	movups	XMMWORD PTR [edx], xmm0
	pop	edi
	movups	xmm0, XMMWORD PTR [edx+16]
	pop	esi
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+16], xmm0
	movups	xmm0, XMMWORD PTR [edx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+32], xmm0
	movups	xmm0, XMMWORD PTR [edx+48]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+48], xmm0
	movups	xmm0, XMMWORD PTR [edx+64]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+64], xmm0
	movups	xmm0, XMMWORD PTR [edx+80]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+80], xmm0

; 309  : 		return Result;
; 310  : 	}

	pop	ebp
	ret	8
??E?$tmat3x4@N$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tmat3x4<double,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??F?$tmat3x4@N$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat3x4@N$0A@@glm@@QAEAAU01@XZ PROC		; glm::tmat3x4<double,0>::operator--, COMDAT
; _this$ = ecx

; 298  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 299  : 		--this->value[1];
; 300  : 		--this->value[2];
; 301  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	xmm0, XMMWORD PTR [ecx+64]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	xmm0, XMMWORD PTR [ecx+80]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+80], xmm0

; 302  : 	}

	ret	0
??F?$tmat3x4@N$0A@@glm@@QAEAAU01@XZ ENDP		; glm::tmat3x4<double,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??E?$tmat3x4@N$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat3x4@N$0A@@glm@@QAEAAU01@XZ PROC		; glm::tmat3x4<double,0>::operator++, COMDAT
; _this$ = ecx

; 289  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 290  : 		++this->value[1];
; 291  : 		++this->value[2];
; 292  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	xmm0, XMMWORD PTR [ecx+64]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	xmm0, XMMWORD PTR [ecx+80]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+80], xmm0

; 293  : 	}

	ret	0
??E?$tmat3x4@N$0A@@glm@@QAEAAU01@XZ ENDP		; glm::tmat3x4<double,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tmat3x4@N$0A@@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tmat3x4@N$0A@@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tmat3x4<double,0>::operator=, COMDAT
; _this$ = ecx

; 204  : template struct tmat3x4<float64, highp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	24					; 00000018H
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tmat3x4@N$0A@@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tmat3x4<double,0>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??A?$tmat3x4@N$0A@@glm@@QBEABU?$tvec4@N$0A@@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat3x4@N$0A@@glm@@QBEABU?$tvec4@N$0A@@1@H@Z PROC	; glm::tmat3x4<double,0>::operator[], COMDAT
; _this$ = ecx

; 196  : 	{

	push	ebp
	mov	ebp, esp

; 197  : 		assert(i < this->length());
; 198  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	add	eax, ecx

; 199  : 	}

	pop	ebp
	ret	4
??A?$tmat3x4@N$0A@@glm@@QBEABU?$tvec4@N$0A@@1@H@Z ENDP	; glm::tmat3x4<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??A?$tmat3x4@N$0A@@glm@@QAEAAU?$tvec4@N$0A@@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat3x4@N$0A@@glm@@QAEAAU?$tvec4@N$0A@@1@H@Z PROC	; glm::tmat3x4<double,0>::operator[], COMDAT
; _this$ = ecx

; 189  : 	{

	push	ebp
	mov	ebp, esp

; 190  : 		assert(i < this->length());
; 191  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	add	eax, ecx

; 192  : 	}

	pop	ebp
	ret	4
??A?$tmat3x4@N$0A@@glm@@QAEAAU?$tvec4@N$0A@@1@H@Z ENDP	; glm::tmat3x4<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.hpp
;	COMDAT ?length@?$tmat3x4@N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat3x4@N$0A@@glm@@SAHXZ PROC			; glm::tmat3x4<double,0>::length, COMDAT

; 80   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	push	3
	pop	eax
	ret	0
?length@?$tmat3x4@N$0A@@glm@@SAHXZ ENDP			; glm::tmat3x4<double,0>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$0A@@glm@@QAE@ABU?$tmat4x3@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
$T3 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tmat3x4@N$0A@@glm@@QAE@ABU?$tmat4x3@N$0A@@1@@Z PROC ; glm::tmat3x4<double,0>::tmat3x4<double,0>, COMDAT
; _this$ = ecx

; 179  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xorps	xmm1, xmm1
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	2
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat3x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm1
	movups	XMMWORD PTR [eax], xmm1
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat3x4

; 180  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T3[ebp]
	push	8
	pop	ecx
	movsd	QWORD PTR $T3[ebp+24], xmm1
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]

; 181  : 		this->value[1] = col_type(m[1], 0);

	push	8
	movups	XMMWORD PTR $T3[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR $T3[ebp+16], xmm0
	rep movsd
	movups	xmm0, XMMWORD PTR [eax+24]
	pop	ecx
	movsd	QWORD PTR $T2[ebp+24], xmm1
	lea	edi, DWORD PTR [ebx+32]
	movups	XMMWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	movsd	xmm0, QWORD PTR [eax+40]
	movsd	QWORD PTR $T2[ebp+16], xmm0
	rep movsd

; 182  : 		this->value[2] = col_type(m[2], 0);

	movups	xmm0, XMMWORD PTR [eax+48]
	push	8
	pop	ecx
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ebx+64]
	movsd	xmm0, QWORD PTR [eax+64]
	lea	esi, DWORD PTR $T1[ebp]
	movsd	QWORD PTR $T1[ebp+16], xmm0

; 183  : 	}

	mov	eax, ebx
	movsd	QWORD PTR $T1[ebp+24], xmm1
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x4@N$0A@@glm@@QAE@ABU?$tmat4x3@N$0A@@1@@Z ENDP ; glm::tmat3x4<double,0>::tmat3x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$0A@@glm@@QAE@ABU?$tmat4x2@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
$T3 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tmat3x4@N$0A@@glm@@QAE@ABU?$tmat4x2@N$0A@@1@@Z PROC ; glm::tmat3x4<double,0>::tmat3x4<double,0>, COMDAT
; _this$ = ecx

; 171  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xorps	xmm0, xmm0
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	2
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat3x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm0
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat3x4

; 172  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T3[ebp]
	push	8
	pop	ecx
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]

; 173  : 		this->value[1] = col_type(m[1], 0, 0);

	push	8
	movups	XMMWORD PTR $T3[ebp], xmm0
	xorps	xmm0, xmm0
	movupd	XMMWORD PTR $T3[ebp+16], xmm0
	rep movsd
	movups	xmm0, XMMWORD PTR [eax+16]
	pop	ecx
	lea	edi, DWORD PTR [ebx+32]
	movups	XMMWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	xorps	xmm0, xmm0
	movupd	XMMWORD PTR $T2[ebp+16], xmm0

; 174  : 		this->value[2] = col_type(m[2], 1, 0);

	push	8
	rep movsd
	movups	xmm0, XMMWORD PTR [eax+32]
	pop	ecx
	lea	edi, DWORD PTR [ebx+64]

; 175  : 	}

	mov	eax, ebx
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	movupd	XMMWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x4@N$0A@@glm@@QAE@ABU?$tmat4x2@N$0A@@1@@Z ENDP ; glm::tmat3x4<double,0>::tmat3x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$0A@@glm@@QAE@ABU?$tmat2x4@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
$T3 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tmat3x4@N$0A@@glm@@QAE@ABU?$tmat2x4@N$0A@@1@@Z PROC ; glm::tmat3x4<double,0>::tmat3x4<double,0>, COMDAT
; _this$ = ecx

; 163  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xorps	xmm0, xmm0
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	2
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat3x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm0
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat3x4

; 164  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	lea	edi, DWORD PTR $T3[ebp]
	push	8
	pop	edx
	mov	esi, eax
	mov	ecx, edx
	rep movsd
	mov	edi, ebx
	lea	esi, DWORD PTR $T3[ebp]
	mov	ecx, edx
	xorps	xmm0, xmm0
	rep movsd

; 165  : 		this->value[1] = col_type(m[1]);

	lea	esi, DWORD PTR [eax+32]
	mov	ecx, edx
	lea	edi, DWORD PTR $T2[ebp]

; 166  : 		this->value[2] = col_type(0, 0, 1, 0);
; 167  : 	}

	mov	eax, ebx
	rep movsd
	lea	edi, DWORD PTR [ebx+32]
	mov	ecx, edx
	lea	esi, DWORD PTR $T2[ebp]
	rep movsd
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ebx+64]
	mov	ecx, edx
	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	lea	esi, DWORD PTR $T1[ebp]
	movupd	XMMWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x4@N$0A@@glm@@QAE@ABU?$tmat2x4@N$0A@@1@@Z ENDP ; glm::tmat3x4<double,0>::tmat3x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$0A@@glm@@QAE@ABU?$tmat3x2@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
$T3 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tmat3x4@N$0A@@glm@@QAE@ABU?$tmat3x2@N$0A@@1@@Z PROC ; glm::tmat3x4<double,0>::tmat3x4<double,0>, COMDAT
; _this$ = ecx

; 155  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xorps	xmm0, xmm0
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	2
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat3x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm0
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat3x4

; 156  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T3[ebp]
	push	8
	pop	ecx
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]

; 157  : 		this->value[1] = col_type(m[1], 0, 0);

	push	8
	movups	XMMWORD PTR $T3[ebp], xmm0
	xorps	xmm0, xmm0
	movupd	XMMWORD PTR $T3[ebp+16], xmm0
	rep movsd
	movups	xmm0, XMMWORD PTR [eax+16]
	pop	ecx
	lea	edi, DWORD PTR [ebx+32]
	movups	XMMWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	xorps	xmm0, xmm0
	movupd	XMMWORD PTR $T2[ebp+16], xmm0

; 158  : 		this->value[2] = col_type(m[2], 1, 0);

	push	8
	rep movsd
	movups	xmm0, XMMWORD PTR [eax+32]
	pop	ecx
	lea	edi, DWORD PTR [ebx+64]

; 159  : 	}

	mov	eax, ebx
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	movupd	XMMWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x4@N$0A@@glm@@QAE@ABU?$tmat3x2@N$0A@@1@@Z ENDP ; glm::tmat3x4<double,0>::tmat3x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$0A@@glm@@QAE@ABU?$tmat2x3@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
$T3 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tmat3x4@N$0A@@glm@@QAE@ABU?$tmat2x3@N$0A@@1@@Z PROC ; glm::tmat3x4<double,0>::tmat3x4<double,0>, COMDAT
; _this$ = ecx

; 147  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xorps	xmm1, xmm1
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	2
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat3x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm1
	movups	XMMWORD PTR [eax], xmm1
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat3x4

; 148  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T3[ebp]
	push	8
	pop	ecx
	movsd	QWORD PTR $T3[ebp+24], xmm1
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]

; 149  : 		this->value[1] = col_type(m[1], 0);

	push	8
	movups	XMMWORD PTR $T3[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR $T3[ebp+16], xmm0
	rep movsd
	movups	xmm0, XMMWORD PTR [eax+24]
	pop	ecx
	movsd	QWORD PTR $T2[ebp+24], xmm1
	lea	edi, DWORD PTR [ebx+32]
	movups	XMMWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	movsd	xmm0, QWORD PTR [eax+40]

; 150  : 		this->value[2] = col_type(0, 0, 1, 0);
; 151  : 	}

	mov	eax, ebx
	movsd	QWORD PTR $T2[ebp+16], xmm0
	xorps	xmm0, xmm0
	rep movsd
	push	8
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ebx+64]
	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	lea	esi, DWORD PTR $T1[ebp]
	pop	ecx
	movupd	XMMWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x4@N$0A@@glm@@QAE@ABU?$tmat2x3@N$0A@@1@@Z ENDP ; glm::tmat3x4<double,0>::tmat3x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$0A@@glm@@QAE@ABU?$tmat4x4@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
$T3 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tmat3x4@N$0A@@glm@@QAE@ABU?$tmat4x4@N$0A@@1@@Z PROC ; glm::tmat3x4<double,0>::tmat3x4<double,0>, COMDAT
; _this$ = ecx

; 139  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xorps	xmm0, xmm0
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	2
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat3x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm0
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat3x4

; 140  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	lea	edi, DWORD PTR $T3[ebp]
	push	8
	pop	edx
	mov	esi, eax
	mov	ecx, edx
	rep movsd
	mov	edi, ebx
	lea	esi, DWORD PTR $T3[ebp]
	mov	ecx, edx
	rep movsd

; 141  : 		this->value[1] = col_type(m[1]);

	lea	esi, DWORD PTR [eax+32]
	mov	ecx, edx
	lea	edi, DWORD PTR $T2[ebp]
	rep movsd
	lea	edi, DWORD PTR [ebx+32]
	mov	ecx, edx
	lea	esi, DWORD PTR $T2[ebp]
	rep movsd

; 142  : 		this->value[2] = col_type(m[2]);

	lea	esi, DWORD PTR [eax+64]
	mov	ecx, edx
	lea	edi, DWORD PTR $T1[ebp]

; 143  : 	}

	mov	eax, ebx
	rep movsd
	lea	edi, DWORD PTR [ebx+64]
	mov	ecx, edx
	lea	esi, DWORD PTR $T1[ebp]
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x4@N$0A@@glm@@QAE@ABU?$tmat4x4@N$0A@@1@@Z ENDP ; glm::tmat3x4<double,0>::tmat3x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$0A@@glm@@QAE@ABU?$tmat3x3@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
$T3 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tmat3x4@N$0A@@glm@@QAE@ABU?$tmat3x3@N$0A@@1@@Z PROC ; glm::tmat3x4<double,0>::tmat3x4<double,0>, COMDAT
; _this$ = ecx

; 131  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xorps	xmm1, xmm1
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	2
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat3x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm1
	movups	XMMWORD PTR [eax], xmm1
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat3x4

; 132  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T3[ebp]
	push	8
	pop	ecx
	movsd	QWORD PTR $T3[ebp+24], xmm1
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]

; 133  : 		this->value[1] = col_type(m[1], 0);

	push	8
	movups	XMMWORD PTR $T3[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR $T3[ebp+16], xmm0
	rep movsd
	movups	xmm0, XMMWORD PTR [eax+24]
	pop	ecx
	movsd	QWORD PTR $T2[ebp+24], xmm1
	lea	edi, DWORD PTR [ebx+32]
	movups	XMMWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	movsd	xmm0, QWORD PTR [eax+40]
	movsd	QWORD PTR $T2[ebp+16], xmm0
	rep movsd

; 134  : 		this->value[2] = col_type(m[2], 0);

	movups	xmm0, XMMWORD PTR [eax+48]
	push	8
	pop	ecx
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ebx+64]
	movsd	xmm0, QWORD PTR [eax+64]
	lea	esi, DWORD PTR $T1[ebp]
	movsd	QWORD PTR $T1[ebp+16], xmm0

; 135  : 	}

	mov	eax, ebx
	movsd	QWORD PTR $T1[ebp+24], xmm1
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x4@N$0A@@glm@@QAE@ABU?$tmat3x3@N$0A@@1@@Z ENDP ; glm::tmat3x4<double,0>::tmat3x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$0A@@glm@@QAE@ABU?$tmat2x2@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
$T3 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tmat3x4@N$0A@@glm@@QAE@ABU?$tmat2x2@N$0A@@1@@Z PROC ; glm::tmat3x4<double,0>::tmat3x4<double,0>, COMDAT
; _this$ = ecx

; 123  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xorps	xmm0, xmm0
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	2
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat3x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm0
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat3x4

; 124  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T3[ebp]
	push	8
	pop	ecx
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]

; 125  : 		this->value[1] = col_type(m[1], 0, 0);

	push	8
	movups	XMMWORD PTR $T3[ebp], xmm0
	xorps	xmm0, xmm0
	movupd	XMMWORD PTR $T3[ebp+16], xmm0
	rep movsd
	movups	xmm0, XMMWORD PTR [eax+16]
	pop	ecx
	lea	edi, DWORD PTR [ebx+32]

; 126  : 		this->value[2] = col_type(0, 0, 1, 0);
; 127  : 	}

	mov	eax, ebx
	movups	XMMWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	xorps	xmm0, xmm0
	movupd	XMMWORD PTR $T2[ebp+16], xmm0
	push	8
	rep movsd
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ebx+64]
	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	lea	esi, DWORD PTR $T1[ebp]
	pop	ecx
	movupd	XMMWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x4@N$0A@@glm@@QAE@ABU?$tmat2x2@N$0A@@1@@Z ENDP ; glm::tmat3x4<double,0>::tmat3x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$0A@@glm@@QAE@ABU?$tvec4@N$0A@@1@00@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??0?$tmat3x4@N$0A@@glm@@QAE@ABU?$tvec4@N$0A@@1@00@Z PROC ; glm::tmat3x4<double,0>::tmat3x4<double,0>, COMDAT
; _this$ = ecx

; 71   : 	{

	push	ebp
	mov	ebp, esp
	mov	edx, ecx
	xorps	xmm0, xmm0
	push	2
	pop	ecx
	lea	eax, DWORD PTR [edx+16]
$LL4@tmat3x4:
	dec	ecx
	movups	XMMWORD PTR [eax-16], xmm0
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat3x4

; 72   : 		this->value[0] = v0;

	push	esi
	mov	esi, DWORD PTR _v0$[ebp]

; 73   : 		this->value[1] = v1;
; 74   : 		this->value[2] = v2;
; 75   : 	}

	mov	eax, edx
	push	edi
	push	8
	pop	ecx
	push	8
	mov	edi, edx
	rep movsd
	mov	esi, DWORD PTR _v1$[ebp]
	lea	edi, DWORD PTR [edx+32]
	pop	ecx
	rep movsd
	mov	esi, DWORD PTR _v2$[ebp]
	lea	edi, DWORD PTR [edx+64]
	push	8
	pop	ecx
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	12					; 0000000cH
??0?$tmat3x4@N$0A@@glm@@QAE@ABU?$tvec4@N$0A@@1@00@Z ENDP ; glm::tmat3x4<double,0>::tmat3x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$0A@@glm@@QAE@NNNNNNNNNNNN@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
$T3 = -32						; size = 32
_x0$ = 8						; size = 8
_y0$ = 16						; size = 8
_z0$ = 24						; size = 8
_w0$ = 32						; size = 8
_x1$ = 40						; size = 8
_y1$ = 48						; size = 8
_z1$ = 56						; size = 8
_w1$ = 64						; size = 8
_x2$ = 72						; size = 8
_y2$ = 80						; size = 8
_z2$ = 88						; size = 8
_w2$ = 96						; size = 8
??0?$tmat3x4@N$0A@@glm@@QAE@NNNNNNNNNNNN@Z PROC		; glm::tmat3x4<double,0>::tmat3x4<double,0>, COMDAT
; _this$ = ecx

; 58   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xorps	xmm0, xmm0
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	2
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat3x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm0
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat3x4

; 59   : 		this->value[0] = col_type(x0, y0, z0, w0);

	movsd	xmm0, QWORD PTR _x0$[ebp]
	lea	esi, DWORD PTR $T3[ebp]
	movsd	QWORD PTR $T3[ebp], xmm0
	mov	edi, ebx
	movsd	xmm0, QWORD PTR _y0$[ebp]

; 60   : 		this->value[1] = col_type(x1, y1, z1, w1);
; 61   : 		this->value[2] = col_type(x2, y2, z2, w2);
; 62   : 	}

	mov	eax, ebx
	movsd	QWORD PTR $T3[ebp+8], xmm0
	movsd	xmm0, QWORD PTR _z0$[ebp]
	movsd	QWORD PTR $T3[ebp+16], xmm0
	movsd	xmm0, QWORD PTR _w0$[ebp]
	movsd	QWORD PTR $T3[ebp+24], xmm0
	movsd	xmm0, QWORD PTR _x1$[ebp]
	push	8
	pop	ecx
	rep movsd
	movsd	QWORD PTR $T2[ebp], xmm0
	lea	edi, DWORD PTR [ebx+32]
	movsd	xmm0, QWORD PTR _y1$[ebp]
	lea	esi, DWORD PTR $T2[ebp]
	movsd	QWORD PTR $T2[ebp+8], xmm0
	movsd	xmm0, QWORD PTR _z1$[ebp]
	movsd	QWORD PTR $T2[ebp+16], xmm0
	movsd	xmm0, QWORD PTR _w1$[ebp]
	push	8
	movsd	QWORD PTR $T2[ebp+24], xmm0
	movsd	xmm0, QWORD PTR _x2$[ebp]
	pop	ecx
	rep movsd
	movsd	QWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ebx+64]
	movsd	xmm0, QWORD PTR _y2$[ebp]
	lea	esi, DWORD PTR $T1[ebp]
	movsd	QWORD PTR $T1[ebp+8], xmm0
	movsd	xmm0, QWORD PTR _z2$[ebp]
	push	8
	movsd	QWORD PTR $T1[ebp+16], xmm0
	movsd	xmm0, QWORD PTR _w2$[ebp]
	pop	ecx
	movsd	QWORD PTR $T1[ebp+24], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	96					; 00000060H
??0?$tmat3x4@N$0A@@glm@@QAE@NNNNNNNNNNNN@Z ENDP		; glm::tmat3x4<double,0>::tmat3x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$0A@@glm@@QAE@N@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
$T3 = -32						; size = 32
_scalar$ = 8						; size = 8
??0?$tmat3x4@N$0A@@glm@@QAE@N@Z PROC			; glm::tmat3x4<double,0>::tmat3x4<double,0>, COMDAT
; _this$ = ecx

; 45   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xorps	xmm2, xmm2
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	2
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat3x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm2
	movups	XMMWORD PTR [eax], xmm2
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat3x4

; 46   : 		this->value[0] = col_type(scalar, 0, 0, 0);

	movsd	xmm1, QWORD PTR _scalar$[ebp]
	lea	esi, DWORD PTR $T3[ebp]
	push	8
	pop	ecx
	movsd	QWORD PTR $T3[ebp], xmm1
	xorps	xmm0, xmm0
	movupd	XMMWORD PTR $T3[ebp+8], xmm0

; 47   : 		this->value[1] = col_type(0, scalar, 0, 0);

	push	8
	movsd	QWORD PTR $T3[ebp+24], xmm2
	mov	edi, ebx
	rep movsd
	pop	ecx
	movupd	XMMWORD PTR $T2[ebp+16], xmm0
	lea	edi, DWORD PTR [ebx+32]

; 48   : 		this->value[2] = col_type(0, 0, scalar, 0);
; 49   : 	}

	mov	eax, ebx
	movsd	QWORD PTR $T2[ebp], xmm2
	lea	esi, DWORD PTR $T2[ebp]
	movsd	QWORD PTR $T2[ebp+8], xmm1
	rep movsd
	push	8
	pop	ecx
	lea	edi, DWORD PTR [ebx+64]
	movsd	QWORD PTR $T1[ebp+16], xmm1
	lea	esi, DWORD PTR $T1[ebp]
	movsd	QWORD PTR $T1[ebp+24], xmm2
	movupd	XMMWORD PTR $T1[ebp], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$tmat3x4@N$0A@@glm@@QAE@N@Z ENDP			; glm::tmat3x4<double,0>::tmat3x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat3x4@N$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat3x4<double,0>::tmat3x4<double,0>, COMDAT
; _this$ = ecx

; 41   : 	{}

	push	2
	pop	edx
	lea	eax, DWORD PTR [ecx+16]
	xorps	xmm0, xmm0
$LL4@tmat3x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm0
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat3x4
	mov	eax, ecx
	ret	4
??0?$tmat3x4@N$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat3x4<double,0>::tmat3x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tmat3x4@N$0A@@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tmat3x4@N$0A@@glm@@QAE@ABU01@@Z PROC		; glm::tmat3x4<double,0>::tmat3x4<double,0>, COMDAT
; _this$ = ecx

; 204  : template struct tmat3x4<float64, highp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	24					; 00000018H
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tmat3x4@N$0A@@glm@@QAE@ABU01@@Z ENDP		; glm::tmat3x4<double,0>::tmat3x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
$T3 = -32						; size = 32
??0?$tmat3x4@N$0A@@glm@@QAE@XZ PROC			; glm::tmat3x4<double,0>::tmat3x4<double,0>, COMDAT
; _this$ = ecx

; 11   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xorps	xmm0, xmm0
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	2
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat3x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm0
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat3x4

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0, 0, 0);

	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	lea	esi, DWORD PTR $T3[ebp]
	movupd	XMMWORD PTR $T3[ebp], xmm0
	push	8
	pop	ecx
	xorps	xmm0, xmm0
	mov	edi, ebx
	movupd	XMMWORD PTR $T3[ebp+16], xmm0

; 14   : 				this->value[1] = col_type(0, 1, 0, 0);
; 15   : 				this->value[2] = col_type(0, 0, 1, 0);
; 16   : #			endif
; 17   : 		}

	mov	eax, ebx
	movaps	xmm0, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	rep movsd
	push	8
	movupd	XMMWORD PTR $T2[ebp], xmm0
	pop	ecx
	xorps	xmm0, xmm0
	lea	edi, DWORD PTR [ebx+32]
	movupd	XMMWORD PTR $T2[ebp+16], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	rep movsd
	push	8
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ebx+64]
	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	lea	esi, DWORD PTR $T1[ebp]
	pop	ecx
	movupd	XMMWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$tmat3x4@N$0A@@glm@@QAE@XZ ENDP			; glm::tmat3x4<double,0>::tmat3x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??F?$tmat3x4@M$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat3x4@M$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tmat3x4<float,0>::operator--, COMDAT
; _this$ = ecx

; 314  : 	{

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi

; 315  : 		tmat3x4<T, P> Result(*this);

	mov	edi, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, ecx
	push	12					; 0000000cH
	pop	ecx
	mov	esi, eax
	rep movsd

; 316  : 		--*this;

	mov	ecx, eax
	call	??F?$tmat3x4@M$0A@@glm@@QAEAAU01@XZ	; glm::tmat3x4<float,0>::operator--

; 317  : 		return Result;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi

; 318  : 	}

	pop	ebp
	ret	8
??F?$tmat3x4@M$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tmat3x4<float,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??E?$tmat3x4@M$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat3x4@M$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tmat3x4<float,0>::operator++, COMDAT
; _this$ = ecx

; 306  : 	{

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi

; 307  : 		tmat3x4<T, P> Result(*this);

	mov	edi, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, ecx
	push	12					; 0000000cH
	pop	ecx
	mov	esi, eax
	rep movsd

; 308  : 		++*this;

	mov	ecx, eax
	call	??E?$tmat3x4@M$0A@@glm@@QAEAAU01@XZ	; glm::tmat3x4<float,0>::operator++

; 309  : 		return Result;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi

; 310  : 	}

	pop	ebp
	ret	8
??E?$tmat3x4@M$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tmat3x4<float,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??F?$tmat3x4@M$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat3x4@M$0A@@glm@@QAEAAU01@XZ PROC		; glm::tmat3x4<float,0>::operator--, COMDAT
; _this$ = ecx

; 298  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 299  : 		--this->value[1];
; 300  : 		--this->value[2];
; 301  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0

; 302  : 	}

	ret	0
??F?$tmat3x4@M$0A@@glm@@QAEAAU01@XZ ENDP		; glm::tmat3x4<float,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??E?$tmat3x4@M$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat3x4@M$0A@@glm@@QAEAAU01@XZ PROC		; glm::tmat3x4<float,0>::operator++, COMDAT
; _this$ = ecx

; 289  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 290  : 		++this->value[1];
; 291  : 		++this->value[2];
; 292  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0

; 293  : 	}

	ret	0
??E?$tmat3x4@M$0A@@glm@@QAEAAU01@XZ ENDP		; glm::tmat3x4<float,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tmat3x4@M$0A@@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tmat3x4@M$0A@@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tmat3x4<float,0>::operator=, COMDAT
; _this$ = ecx

; 203  : template struct tmat3x4<float32, highp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	12					; 0000000cH
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tmat3x4@M$0A@@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tmat3x4<float,0>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??A?$tmat3x4@M$0A@@glm@@QBEABU?$tvec4@M$0A@@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat3x4@M$0A@@glm@@QBEABU?$tvec4@M$0A@@1@H@Z PROC	; glm::tmat3x4<float,0>::operator[], COMDAT
; _this$ = ecx

; 196  : 	{

	push	ebp
	mov	ebp, esp

; 197  : 		assert(i < this->length());
; 198  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, ecx

; 199  : 	}

	pop	ebp
	ret	4
??A?$tmat3x4@M$0A@@glm@@QBEABU?$tvec4@M$0A@@1@H@Z ENDP	; glm::tmat3x4<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??A?$tmat3x4@M$0A@@glm@@QAEAAU?$tvec4@M$0A@@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat3x4@M$0A@@glm@@QAEAAU?$tvec4@M$0A@@1@H@Z PROC	; glm::tmat3x4<float,0>::operator[], COMDAT
; _this$ = ecx

; 189  : 	{

	push	ebp
	mov	ebp, esp

; 190  : 		assert(i < this->length());
; 191  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, ecx

; 192  : 	}

	pop	ebp
	ret	4
??A?$tmat3x4@M$0A@@glm@@QAEAAU?$tvec4@M$0A@@1@H@Z ENDP	; glm::tmat3x4<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.hpp
;	COMDAT ?length@?$tmat3x4@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat3x4@M$0A@@glm@@SAHXZ PROC			; glm::tmat3x4<float,0>::length, COMDAT

; 80   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	push	3
	pop	eax
	ret	0
?length@?$tmat3x4@M$0A@@glm@@SAHXZ ENDP			; glm::tmat3x4<float,0>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$0A@@glm@@QAE@ABU?$tmat4x3@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat3x4@M$0A@@glm@@QAE@ABU?$tmat4x3@M$0A@@1@@Z PROC ; glm::tmat3x4<float,0>::tmat3x4<float,0>, COMDAT
; _this$ = ecx

; 179  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	lea	eax, DWORD PTR [ecx+8]
	push	2
	pop	edx
$LL4@tmat3x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat3x4

; 180  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	and	DWORD PTR $T3[ebp+12], 0
	push	esi
	push	edi
	movss	xmm0, DWORD PTR [eax]
	lea	esi, DWORD PTR $T3[ebp]
	movss	DWORD PTR $T3[ebp], xmm0
	mov	edi, ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T3[ebp+8], xmm0
	movsd
	movsd
	movsd
	movsd

; 181  : 		this->value[1] = col_type(m[1], 0);

	movss	xmm0, DWORD PTR [eax+12]
	lea	edi, DWORD PTR [ecx+16]
	and	DWORD PTR $T2[ebp+12], 0
	lea	esi, DWORD PTR $T2[ebp]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR $T2[ebp+8], xmm0
	movsd
	movsd
	movsd
	movsd

; 182  : 		this->value[2] = col_type(m[2], 0);

	movss	xmm0, DWORD PTR [eax+24]
	lea	edi, DWORD PTR [ecx+32]
	and	DWORD PTR $T1[ebp+12], 0
	lea	esi, DWORD PTR $T1[ebp]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+28]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+32]

; 183  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+8], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x4@M$0A@@glm@@QAE@ABU?$tmat4x3@M$0A@@1@@Z ENDP ; glm::tmat3x4<float,0>::tmat3x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$0A@@glm@@QAE@ABU?$tmat4x2@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat3x4@M$0A@@glm@@QAE@ABU?$tmat4x2@M$0A@@1@@Z PROC ; glm::tmat3x4<float,0>::tmat3x4<float,0>, COMDAT
; _this$ = ecx

; 171  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	lea	eax, DWORD PTR [ecx+8]
	push	2
	pop	edx
$LL4@tmat3x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat3x4

; 172  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	and	DWORD PTR $T3[ebp+8], 0
	and	DWORD PTR $T3[ebp+12], 0
	push	esi
	movss	xmm0, DWORD PTR [eax]
	lea	esi, DWORD PTR $T3[ebp]
	push	edi
	movss	DWORD PTR $T3[ebp], xmm0
	mov	edi, ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movsd
	movsd
	movsd
	movsd

; 173  : 		this->value[1] = col_type(m[1], 0, 0);

	movss	xmm0, DWORD PTR [eax+8]
	lea	edi, DWORD PTR [ecx+16]
	and	DWORD PTR $T2[ebp+8], 0
	lea	esi, DWORD PTR $T2[ebp]
	and	DWORD PTR $T2[ebp+12], 0
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movsd
	movsd
	movsd
	movsd

; 174  : 		this->value[2] = col_type(m[2], 1, 0);

	movss	xmm0, DWORD PTR [eax+16]
	lea	edi, DWORD PTR [ecx+32]
	and	DWORD PTR $T1[ebp+12], 0
	lea	esi, DWORD PTR $T1[ebp]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+20]

; 175  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	DWORD PTR $T1[ebp+8], 1065353216	; 3f800000H
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x4@M$0A@@glm@@QAE@ABU?$tmat4x2@M$0A@@1@@Z ENDP ; glm::tmat3x4<float,0>::tmat3x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$0A@@glm@@QAE@ABU?$tmat2x4@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat3x4@M$0A@@glm@@QAE@ABU?$tmat2x4@M$0A@@1@@Z PROC ; glm::tmat3x4<float,0>::tmat3x4<float,0>, COMDAT
; _this$ = ecx

; 163  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	lea	eax, DWORD PTR [ecx+8]
	push	2
	pop	edx
$LL4@tmat3x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat3x4

; 164  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	esi, eax
	movaps	xmm0, XMMWORD PTR __xmm@000000003f8000000000000000000000
	lea	edi, DWORD PTR $T3[ebp]
	movsd
	movsd
	movsd
	movsd
	mov	edi, ecx
	lea	esi, DWORD PTR $T3[ebp]
	movsd
	movsd
	movsd
	movsd

; 165  : 		this->value[1] = col_type(m[1]);

	lea	esi, DWORD PTR [eax+16]

; 166  : 		this->value[2] = col_type(0, 0, 1, 0);
; 167  : 	}

	mov	eax, ecx
	lea	edi, DWORD PTR $T2[ebp]
	movsd
	movsd
	movsd
	movsd
	lea	edi, DWORD PTR [ecx+16]
	lea	esi, DWORD PTR $T2[ebp]
	movsd
	movsd
	movsd
	movsd
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+32]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x4@M$0A@@glm@@QAE@ABU?$tmat2x4@M$0A@@1@@Z ENDP ; glm::tmat3x4<float,0>::tmat3x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$0A@@glm@@QAE@ABU?$tmat3x2@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat3x4@M$0A@@glm@@QAE@ABU?$tmat3x2@M$0A@@1@@Z PROC ; glm::tmat3x4<float,0>::tmat3x4<float,0>, COMDAT
; _this$ = ecx

; 155  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	lea	eax, DWORD PTR [ecx+8]
	push	2
	pop	edx
$LL4@tmat3x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat3x4

; 156  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	and	DWORD PTR $T3[ebp+8], 0
	and	DWORD PTR $T3[ebp+12], 0
	push	esi
	movss	xmm0, DWORD PTR [eax]
	lea	esi, DWORD PTR $T3[ebp]
	push	edi
	movss	DWORD PTR $T3[ebp], xmm0
	mov	edi, ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movsd
	movsd
	movsd
	movsd

; 157  : 		this->value[1] = col_type(m[1], 0, 0);

	movss	xmm0, DWORD PTR [eax+8]
	lea	edi, DWORD PTR [ecx+16]
	and	DWORD PTR $T2[ebp+8], 0
	lea	esi, DWORD PTR $T2[ebp]
	and	DWORD PTR $T2[ebp+12], 0
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movsd
	movsd
	movsd
	movsd

; 158  : 		this->value[2] = col_type(m[2], 1, 0);

	movss	xmm0, DWORD PTR [eax+16]
	lea	edi, DWORD PTR [ecx+32]
	and	DWORD PTR $T1[ebp+12], 0
	lea	esi, DWORD PTR $T1[ebp]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+20]

; 159  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	DWORD PTR $T1[ebp+8], 1065353216	; 3f800000H
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x4@M$0A@@glm@@QAE@ABU?$tmat3x2@M$0A@@1@@Z ENDP ; glm::tmat3x4<float,0>::tmat3x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$0A@@glm@@QAE@ABU?$tmat2x3@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat3x4@M$0A@@glm@@QAE@ABU?$tmat2x3@M$0A@@1@@Z PROC ; glm::tmat3x4<float,0>::tmat3x4<float,0>, COMDAT
; _this$ = ecx

; 147  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	lea	eax, DWORD PTR [ecx+8]
	push	2
	pop	edx
$LL4@tmat3x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat3x4

; 148  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	and	DWORD PTR $T3[ebp+12], 0
	push	esi
	push	edi
	movss	xmm0, DWORD PTR [eax]
	lea	esi, DWORD PTR $T3[ebp]
	movss	DWORD PTR $T3[ebp], xmm0
	mov	edi, ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T3[ebp+8], xmm0
	movsd
	movsd
	movsd
	movsd

; 149  : 		this->value[1] = col_type(m[1], 0);

	movss	xmm0, DWORD PTR [eax+12]
	lea	edi, DWORD PTR [ecx+16]
	and	DWORD PTR $T2[ebp+12], 0
	lea	esi, DWORD PTR $T2[ebp]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+20]

; 150  : 		this->value[2] = col_type(0, 0, 1, 0);
; 151  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T2[ebp+8], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@000000003f8000000000000000000000
	movsd
	movsd
	movsd
	movsd
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+32]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x4@M$0A@@glm@@QAE@ABU?$tmat2x3@M$0A@@1@@Z ENDP ; glm::tmat3x4<float,0>::tmat3x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$0A@@glm@@QAE@ABU?$tmat4x4@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat3x4@M$0A@@glm@@QAE@ABU?$tmat4x4@M$0A@@1@@Z PROC ; glm::tmat3x4<float,0>::tmat3x4<float,0>, COMDAT
; _this$ = ecx

; 139  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	lea	eax, DWORD PTR [ecx+8]
	push	2
	pop	edx
$LL4@tmat3x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat3x4

; 140  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	esi, eax
	lea	edi, DWORD PTR $T3[ebp]
	movsd
	movsd
	movsd
	movsd
	mov	edi, ecx
	lea	esi, DWORD PTR $T3[ebp]
	movsd
	movsd
	movsd
	movsd

; 141  : 		this->value[1] = col_type(m[1]);

	lea	esi, DWORD PTR [eax+16]
	lea	edi, DWORD PTR $T2[ebp]
	movsd
	movsd
	movsd
	movsd
	lea	edi, DWORD PTR [ecx+16]
	lea	esi, DWORD PTR $T2[ebp]
	movsd
	movsd
	movsd
	movsd

; 142  : 		this->value[2] = col_type(m[2]);

	lea	esi, DWORD PTR [eax+32]

; 143  : 	}

	mov	eax, ecx
	lea	edi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	lea	edi, DWORD PTR [ecx+32]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x4@M$0A@@glm@@QAE@ABU?$tmat4x4@M$0A@@1@@Z ENDP ; glm::tmat3x4<float,0>::tmat3x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$0A@@glm@@QAE@ABU?$tmat3x3@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat3x4@M$0A@@glm@@QAE@ABU?$tmat3x3@M$0A@@1@@Z PROC ; glm::tmat3x4<float,0>::tmat3x4<float,0>, COMDAT
; _this$ = ecx

; 131  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	lea	eax, DWORD PTR [ecx+8]
	push	2
	pop	edx
$LL4@tmat3x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat3x4

; 132  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	and	DWORD PTR $T3[ebp+12], 0
	push	esi
	push	edi
	movss	xmm0, DWORD PTR [eax]
	lea	esi, DWORD PTR $T3[ebp]
	movss	DWORD PTR $T3[ebp], xmm0
	mov	edi, ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T3[ebp+8], xmm0
	movsd
	movsd
	movsd
	movsd

; 133  : 		this->value[1] = col_type(m[1], 0);

	movss	xmm0, DWORD PTR [eax+12]
	lea	edi, DWORD PTR [ecx+16]
	and	DWORD PTR $T2[ebp+12], 0
	lea	esi, DWORD PTR $T2[ebp]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR $T2[ebp+8], xmm0
	movsd
	movsd
	movsd
	movsd

; 134  : 		this->value[2] = col_type(m[2], 0);

	movss	xmm0, DWORD PTR [eax+24]
	lea	edi, DWORD PTR [ecx+32]
	and	DWORD PTR $T1[ebp+12], 0
	lea	esi, DWORD PTR $T1[ebp]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+28]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+32]

; 135  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+8], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x4@M$0A@@glm@@QAE@ABU?$tmat3x3@M$0A@@1@@Z ENDP ; glm::tmat3x4<float,0>::tmat3x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$0A@@glm@@QAE@ABU?$tmat2x2@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat3x4@M$0A@@glm@@QAE@ABU?$tmat2x2@M$0A@@1@@Z PROC ; glm::tmat3x4<float,0>::tmat3x4<float,0>, COMDAT
; _this$ = ecx

; 123  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	lea	eax, DWORD PTR [ecx+8]
	push	2
	pop	edx
$LL4@tmat3x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat3x4

; 124  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	and	DWORD PTR $T3[ebp+8], 0
	and	DWORD PTR $T3[ebp+12], 0
	push	esi
	movss	xmm0, DWORD PTR [eax]
	lea	esi, DWORD PTR $T3[ebp]
	push	edi
	movss	DWORD PTR $T3[ebp], xmm0
	mov	edi, ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movsd
	movsd
	movsd
	movsd

; 125  : 		this->value[1] = col_type(m[1], 0, 0);

	movss	xmm0, DWORD PTR [eax+8]
	lea	edi, DWORD PTR [ecx+16]
	and	DWORD PTR $T2[ebp+8], 0
	lea	esi, DWORD PTR $T2[ebp]
	and	DWORD PTR $T2[ebp+12], 0
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+12]

; 126  : 		this->value[2] = col_type(0, 0, 1, 0);
; 127  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T2[ebp+4], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@000000003f8000000000000000000000
	movsd
	movsd
	movsd
	movsd
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+32]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x4@M$0A@@glm@@QAE@ABU?$tmat2x2@M$0A@@1@@Z ENDP ; glm::tmat3x4<float,0>::tmat3x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$0A@@glm@@QAE@ABU?$tvec4@M$0A@@1@00@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??0?$tmat3x4@M$0A@@glm@@QAE@ABU?$tvec4@M$0A@@1@00@Z PROC ; glm::tmat3x4<float,0>::tmat3x4<float,0>, COMDAT
; _this$ = ecx

; 71   : 	{

	push	ebp
	mov	ebp, esp
	push	2
	pop	edx
	lea	eax, DWORD PTR [ecx+8]
$LL4@tmat3x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat3x4

; 72   : 		this->value[0] = v0;

	push	esi
	mov	esi, DWORD PTR _v0$[ebp]

; 73   : 		this->value[1] = v1;
; 74   : 		this->value[2] = v2;
; 75   : 	}

	mov	eax, ecx
	push	edi
	mov	edi, ecx
	movsd
	movsd
	movsd
	movsd
	mov	esi, DWORD PTR _v1$[ebp]
	lea	edi, DWORD PTR [ecx+16]
	movsd
	movsd
	movsd
	movsd
	mov	esi, DWORD PTR _v2$[ebp]
	lea	edi, DWORD PTR [ecx+32]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	12					; 0000000cH
??0?$tmat3x4@M$0A@@glm@@QAE@ABU?$tvec4@M$0A@@1@00@Z ENDP ; glm::tmat3x4<float,0>::tmat3x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$0A@@glm@@QAE@MMMMMMMMMMMM@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_z0$ = 16						; size = 4
_w0$ = 20						; size = 4
_x1$ = 24						; size = 4
_y1$ = 28						; size = 4
_z1$ = 32						; size = 4
_w1$ = 36						; size = 4
_x2$ = 40						; size = 4
_y2$ = 44						; size = 4
_z2$ = 48						; size = 4
_w2$ = 52						; size = 4
??0?$tmat3x4@M$0A@@glm@@QAE@MMMMMMMMMMMM@Z PROC		; glm::tmat3x4<float,0>::tmat3x4<float,0>, COMDAT
; _this$ = ecx

; 58   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	lea	eax, DWORD PTR [ecx+8]
	push	2
	pop	edx
$LL4@tmat3x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat3x4

; 59   : 		this->value[0] = col_type(x0, y0, z0, w0);

	movss	xmm0, DWORD PTR _x0$[ebp]

; 60   : 		this->value[1] = col_type(x1, y1, z1, w1);
; 61   : 		this->value[2] = col_type(x2, y2, z2, w2);
; 62   : 	}

	mov	eax, ecx
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR _y0$[ebp]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movss	xmm0, DWORD PTR _z0$[ebp]
	push	esi
	movss	DWORD PTR $T3[ebp+8], xmm0
	lea	esi, DWORD PTR $T3[ebp]
	movss	xmm0, DWORD PTR _w0$[ebp]
	push	edi
	movss	DWORD PTR $T3[ebp+12], xmm0
	mov	edi, ecx
	movss	xmm0, DWORD PTR _x1$[ebp]
	movsd
	movsd
	movsd
	movsd
	movss	DWORD PTR $T2[ebp], xmm0
	lea	edi, DWORD PTR [ecx+16]
	movss	xmm0, DWORD PTR _y1$[ebp]
	lea	esi, DWORD PTR $T2[ebp]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR _z1$[ebp]
	movss	DWORD PTR $T2[ebp+8], xmm0
	movss	xmm0, DWORD PTR _w1$[ebp]
	movss	DWORD PTR $T2[ebp+12], xmm0
	movss	xmm0, DWORD PTR _x2$[ebp]
	movsd
	movsd
	movsd
	movsd
	movss	DWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+32]
	movss	xmm0, DWORD PTR _y2$[ebp]
	lea	esi, DWORD PTR $T1[ebp]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR _z2$[ebp]
	movss	DWORD PTR $T1[ebp+8], xmm0
	movss	xmm0, DWORD PTR _w2$[ebp]
	movss	DWORD PTR $T1[ebp+12], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	48					; 00000030H
??0?$tmat3x4@M$0A@@glm@@QAE@MMMMMMMMMMMM@Z ENDP		; glm::tmat3x4<float,0>::tmat3x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$0A@@glm@@QAE@M@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
_scalar$ = 8						; size = 4
??0?$tmat3x4@M$0A@@glm@@QAE@M@Z PROC			; glm::tmat3x4<float,0>::tmat3x4<float,0>, COMDAT
; _this$ = ecx

; 45   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	lea	eax, DWORD PTR [ecx+8]
	push	2
	pop	edx
$LL4@tmat3x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat3x4

; 46   : 		this->value[0] = col_type(scalar, 0, 0, 0);

	and	DWORD PTR $T3[ebp+4], 0

; 47   : 		this->value[1] = col_type(0, scalar, 0, 0);
; 48   : 		this->value[2] = col_type(0, 0, scalar, 0);
; 49   : 	}

	mov	eax, ecx
	and	DWORD PTR $T3[ebp+8], 0
	and	DWORD PTR $T3[ebp+12], 0
	movss	xmm0, DWORD PTR _scalar$[ebp]
	push	esi
	push	edi
	movss	DWORD PTR $T3[ebp], xmm0
	lea	esi, DWORD PTR $T3[ebp]
	mov	edi, ecx
	movsd
	movsd
	movsd
	movsd
	and	DWORD PTR $T2[ebp], 0
	lea	edi, DWORD PTR [ecx+16]
	and	DWORD PTR $T2[ebp+8], 0
	lea	esi, DWORD PTR $T2[ebp]
	and	DWORD PTR $T2[ebp+12], 0
	movss	DWORD PTR $T2[ebp+4], xmm0
	movsd
	movsd
	movsd
	movsd
	and	DWORD PTR $T1[ebp], 0
	lea	edi, DWORD PTR [ecx+32]
	and	DWORD PTR $T1[ebp+4], 0
	lea	esi, DWORD PTR $T1[ebp]
	and	DWORD PTR $T1[ebp+12], 0
	movss	DWORD PTR $T1[ebp+8], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x4@M$0A@@glm@@QAE@M@Z ENDP			; glm::tmat3x4<float,0>::tmat3x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat3x4@M$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat3x4<float,0>::tmat3x4<float,0>, COMDAT
; _this$ = ecx

; 41   : 	{}

	push	2
	pop	edx
	lea	eax, DWORD PTR [ecx+8]
$LL4@tmat3x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat3x4
	mov	eax, ecx
	ret	4
??0?$tmat3x4@M$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat3x4<float,0>::tmat3x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tmat3x4@M$0A@@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tmat3x4@M$0A@@glm@@QAE@ABU01@@Z PROC		; glm::tmat3x4<float,0>::tmat3x4<float,0>, COMDAT
; _this$ = ecx

; 203  : template struct tmat3x4<float32, highp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	12					; 0000000cH
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tmat3x4@M$0A@@glm@@QAE@ABU01@@Z ENDP		; glm::tmat3x4<float,0>::tmat3x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
??0?$tmat3x4@M$0A@@glm@@QAE@XZ PROC			; glm::tmat3x4<float,0>::tmat3x4<float,0>, COMDAT
; _this$ = ecx

; 11   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	lea	eax, DWORD PTR [ecx+8]
	push	2
	pop	edx
$LL4@tmat3x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat3x4

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0, 0, 0);
; 14   : 				this->value[1] = col_type(0, 1, 0, 0);
; 15   : 				this->value[2] = col_type(0, 0, 1, 0);
; 16   : #			endif
; 17   : 		}

	movaps	xmm0, XMMWORD PTR __xmm@0000000000000000000000003f800000
	mov	eax, ecx
	push	esi
	push	edi
	movups	XMMWORD PTR $T3[ebp], xmm0
	lea	esi, DWORD PTR $T3[ebp]
	mov	edi, ecx
	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003f80000000000000
	movsd
	movsd
	movsd
	movsd
	movups	XMMWORD PTR $T2[ebp], xmm0
	lea	edi, DWORD PTR [ecx+16]
	movaps	xmm0, XMMWORD PTR __xmm@000000003f8000000000000000000000
	lea	esi, DWORD PTR $T2[ebp]
	movsd
	movsd
	movsd
	movsd
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+32]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$tmat3x4@M$0A@@glm@@QAE@XZ ENDP			; glm::tmat3x4<float,0>::tmat3x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??F?$tmat3x4@N$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat3x4@N$00@glm@@QAE?AU01@H@Z PROC		; glm::tmat3x4<double,1>::operator--, COMDAT
; _this$ = ecx

; 314  : 	{

	push	ebp
	mov	ebp, esp

; 315  : 		tmat3x4<T, P> Result(*this);
; 316  : 		--*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	mov	edx, ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	movups	xmm0, XMMWORD PTR [edx]
	push	24					; 00000018H
	pop	ecx
	subpd	xmm0, xmm1
	mov	esi, edx
	mov	edi, eax
	rep movsd
	movups	XMMWORD PTR [edx], xmm0
	pop	edi
	movups	xmm0, XMMWORD PTR [edx+16]
	pop	esi
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+16], xmm0
	movups	xmm0, XMMWORD PTR [edx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+32], xmm0
	movups	xmm0, XMMWORD PTR [edx+48]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+48], xmm0
	movups	xmm0, XMMWORD PTR [edx+64]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+64], xmm0
	movups	xmm0, XMMWORD PTR [edx+80]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+80], xmm0

; 317  : 		return Result;
; 318  : 	}

	pop	ebp
	ret	8
??F?$tmat3x4@N$00@glm@@QAE?AU01@H@Z ENDP		; glm::tmat3x4<double,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??E?$tmat3x4@N$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat3x4@N$00@glm@@QAE?AU01@H@Z PROC		; glm::tmat3x4<double,1>::operator++, COMDAT
; _this$ = ecx

; 306  : 	{

	push	ebp
	mov	ebp, esp

; 307  : 		tmat3x4<T, P> Result(*this);
; 308  : 		++*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	mov	edx, ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	movups	xmm0, XMMWORD PTR [edx]
	push	24					; 00000018H
	pop	ecx
	addpd	xmm0, xmm1
	mov	esi, edx
	mov	edi, eax
	rep movsd
	movups	XMMWORD PTR [edx], xmm0
	pop	edi
	movups	xmm0, XMMWORD PTR [edx+16]
	pop	esi
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+16], xmm0
	movups	xmm0, XMMWORD PTR [edx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+32], xmm0
	movups	xmm0, XMMWORD PTR [edx+48]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+48], xmm0
	movups	xmm0, XMMWORD PTR [edx+64]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+64], xmm0
	movups	xmm0, XMMWORD PTR [edx+80]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+80], xmm0

; 309  : 		return Result;
; 310  : 	}

	pop	ebp
	ret	8
??E?$tmat3x4@N$00@glm@@QAE?AU01@H@Z ENDP		; glm::tmat3x4<double,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??F?$tmat3x4@N$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat3x4@N$00@glm@@QAEAAU01@XZ PROC			; glm::tmat3x4<double,1>::operator--, COMDAT
; _this$ = ecx

; 298  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 299  : 		--this->value[1];
; 300  : 		--this->value[2];
; 301  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	xmm0, XMMWORD PTR [ecx+64]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	xmm0, XMMWORD PTR [ecx+80]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+80], xmm0

; 302  : 	}

	ret	0
??F?$tmat3x4@N$00@glm@@QAEAAU01@XZ ENDP			; glm::tmat3x4<double,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??E?$tmat3x4@N$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat3x4@N$00@glm@@QAEAAU01@XZ PROC			; glm::tmat3x4<double,1>::operator++, COMDAT
; _this$ = ecx

; 289  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 290  : 		++this->value[1];
; 291  : 		++this->value[2];
; 292  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	xmm0, XMMWORD PTR [ecx+64]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	xmm0, XMMWORD PTR [ecx+80]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+80], xmm0

; 293  : 	}

	ret	0
??E?$tmat3x4@N$00@glm@@QAEAAU01@XZ ENDP			; glm::tmat3x4<double,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tmat3x4@N$00@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tmat3x4@N$00@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tmat3x4<double,1>::operator=, COMDAT
; _this$ = ecx

; 201  : template struct tmat3x4<float64, mediump>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	24					; 00000018H
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tmat3x4@N$00@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tmat3x4<double,1>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??A?$tmat3x4@N$00@glm@@QBEABU?$tvec4@N$00@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat3x4@N$00@glm@@QBEABU?$tvec4@N$00@1@H@Z PROC	; glm::tmat3x4<double,1>::operator[], COMDAT
; _this$ = ecx

; 196  : 	{

	push	ebp
	mov	ebp, esp

; 197  : 		assert(i < this->length());
; 198  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	add	eax, ecx

; 199  : 	}

	pop	ebp
	ret	4
??A?$tmat3x4@N$00@glm@@QBEABU?$tvec4@N$00@1@H@Z ENDP	; glm::tmat3x4<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??A?$tmat3x4@N$00@glm@@QAEAAU?$tvec4@N$00@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat3x4@N$00@glm@@QAEAAU?$tvec4@N$00@1@H@Z PROC	; glm::tmat3x4<double,1>::operator[], COMDAT
; _this$ = ecx

; 189  : 	{

	push	ebp
	mov	ebp, esp

; 190  : 		assert(i < this->length());
; 191  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	add	eax, ecx

; 192  : 	}

	pop	ebp
	ret	4
??A?$tmat3x4@N$00@glm@@QAEAAU?$tvec4@N$00@1@H@Z ENDP	; glm::tmat3x4<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.hpp
;	COMDAT ?length@?$tmat3x4@N$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat3x4@N$00@glm@@SAHXZ PROC			; glm::tmat3x4<double,1>::length, COMDAT

; 80   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	push	3
	pop	eax
	ret	0
?length@?$tmat3x4@N$00@glm@@SAHXZ ENDP			; glm::tmat3x4<double,1>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$00@glm@@QAE@ABU?$tmat4x3@N$00@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
$T3 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tmat3x4@N$00@glm@@QAE@ABU?$tmat4x3@N$00@1@@Z PROC	; glm::tmat3x4<double,1>::tmat3x4<double,1>, COMDAT
; _this$ = ecx

; 179  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xorps	xmm1, xmm1
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	2
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat3x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm1
	movups	XMMWORD PTR [eax], xmm1
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat3x4

; 180  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T3[ebp]
	push	8
	pop	ecx
	movsd	QWORD PTR $T3[ebp+24], xmm1
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]

; 181  : 		this->value[1] = col_type(m[1], 0);

	push	8
	movups	XMMWORD PTR $T3[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR $T3[ebp+16], xmm0
	rep movsd
	movups	xmm0, XMMWORD PTR [eax+24]
	pop	ecx
	movsd	QWORD PTR $T2[ebp+24], xmm1
	lea	edi, DWORD PTR [ebx+32]
	movups	XMMWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	movsd	xmm0, QWORD PTR [eax+40]
	movsd	QWORD PTR $T2[ebp+16], xmm0
	rep movsd

; 182  : 		this->value[2] = col_type(m[2], 0);

	movups	xmm0, XMMWORD PTR [eax+48]
	push	8
	pop	ecx
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ebx+64]
	movsd	xmm0, QWORD PTR [eax+64]
	lea	esi, DWORD PTR $T1[ebp]
	movsd	QWORD PTR $T1[ebp+16], xmm0

; 183  : 	}

	mov	eax, ebx
	movsd	QWORD PTR $T1[ebp+24], xmm1
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x4@N$00@glm@@QAE@ABU?$tmat4x3@N$00@1@@Z ENDP	; glm::tmat3x4<double,1>::tmat3x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$00@glm@@QAE@ABU?$tmat4x2@N$00@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
$T3 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tmat3x4@N$00@glm@@QAE@ABU?$tmat4x2@N$00@1@@Z PROC	; glm::tmat3x4<double,1>::tmat3x4<double,1>, COMDAT
; _this$ = ecx

; 171  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xorps	xmm0, xmm0
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	2
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat3x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm0
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat3x4

; 172  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T3[ebp]
	push	8
	pop	ecx
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]

; 173  : 		this->value[1] = col_type(m[1], 0, 0);

	push	8
	movups	XMMWORD PTR $T3[ebp], xmm0
	xorps	xmm0, xmm0
	movupd	XMMWORD PTR $T3[ebp+16], xmm0
	rep movsd
	movups	xmm0, XMMWORD PTR [eax+16]
	pop	ecx
	lea	edi, DWORD PTR [ebx+32]
	movups	XMMWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	xorps	xmm0, xmm0
	movupd	XMMWORD PTR $T2[ebp+16], xmm0

; 174  : 		this->value[2] = col_type(m[2], 1, 0);

	push	8
	rep movsd
	movups	xmm0, XMMWORD PTR [eax+32]
	pop	ecx
	lea	edi, DWORD PTR [ebx+64]

; 175  : 	}

	mov	eax, ebx
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	movupd	XMMWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x4@N$00@glm@@QAE@ABU?$tmat4x2@N$00@1@@Z ENDP	; glm::tmat3x4<double,1>::tmat3x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$00@glm@@QAE@ABU?$tmat2x4@N$00@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
$T3 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tmat3x4@N$00@glm@@QAE@ABU?$tmat2x4@N$00@1@@Z PROC	; glm::tmat3x4<double,1>::tmat3x4<double,1>, COMDAT
; _this$ = ecx

; 163  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xorps	xmm0, xmm0
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	2
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat3x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm0
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat3x4

; 164  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	lea	edi, DWORD PTR $T3[ebp]
	push	8
	pop	edx
	mov	esi, eax
	mov	ecx, edx
	rep movsd
	mov	edi, ebx
	lea	esi, DWORD PTR $T3[ebp]
	mov	ecx, edx
	xorps	xmm0, xmm0
	rep movsd

; 165  : 		this->value[1] = col_type(m[1]);

	lea	esi, DWORD PTR [eax+32]
	mov	ecx, edx
	lea	edi, DWORD PTR $T2[ebp]

; 166  : 		this->value[2] = col_type(0, 0, 1, 0);
; 167  : 	}

	mov	eax, ebx
	rep movsd
	lea	edi, DWORD PTR [ebx+32]
	mov	ecx, edx
	lea	esi, DWORD PTR $T2[ebp]
	rep movsd
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ebx+64]
	mov	ecx, edx
	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	lea	esi, DWORD PTR $T1[ebp]
	movupd	XMMWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x4@N$00@glm@@QAE@ABU?$tmat2x4@N$00@1@@Z ENDP	; glm::tmat3x4<double,1>::tmat3x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$00@glm@@QAE@ABU?$tmat3x2@N$00@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
$T3 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tmat3x4@N$00@glm@@QAE@ABU?$tmat3x2@N$00@1@@Z PROC	; glm::tmat3x4<double,1>::tmat3x4<double,1>, COMDAT
; _this$ = ecx

; 155  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xorps	xmm0, xmm0
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	2
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat3x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm0
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat3x4

; 156  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T3[ebp]
	push	8
	pop	ecx
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]

; 157  : 		this->value[1] = col_type(m[1], 0, 0);

	push	8
	movups	XMMWORD PTR $T3[ebp], xmm0
	xorps	xmm0, xmm0
	movupd	XMMWORD PTR $T3[ebp+16], xmm0
	rep movsd
	movups	xmm0, XMMWORD PTR [eax+16]
	pop	ecx
	lea	edi, DWORD PTR [ebx+32]
	movups	XMMWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	xorps	xmm0, xmm0
	movupd	XMMWORD PTR $T2[ebp+16], xmm0

; 158  : 		this->value[2] = col_type(m[2], 1, 0);

	push	8
	rep movsd
	movups	xmm0, XMMWORD PTR [eax+32]
	pop	ecx
	lea	edi, DWORD PTR [ebx+64]

; 159  : 	}

	mov	eax, ebx
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	movupd	XMMWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x4@N$00@glm@@QAE@ABU?$tmat3x2@N$00@1@@Z ENDP	; glm::tmat3x4<double,1>::tmat3x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$00@glm@@QAE@ABU?$tmat2x3@N$00@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
$T3 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tmat3x4@N$00@glm@@QAE@ABU?$tmat2x3@N$00@1@@Z PROC	; glm::tmat3x4<double,1>::tmat3x4<double,1>, COMDAT
; _this$ = ecx

; 147  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xorps	xmm1, xmm1
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	2
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat3x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm1
	movups	XMMWORD PTR [eax], xmm1
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat3x4

; 148  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T3[ebp]
	push	8
	pop	ecx
	movsd	QWORD PTR $T3[ebp+24], xmm1
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]

; 149  : 		this->value[1] = col_type(m[1], 0);

	push	8
	movups	XMMWORD PTR $T3[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR $T3[ebp+16], xmm0
	rep movsd
	movups	xmm0, XMMWORD PTR [eax+24]
	pop	ecx
	movsd	QWORD PTR $T2[ebp+24], xmm1
	lea	edi, DWORD PTR [ebx+32]
	movups	XMMWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	movsd	xmm0, QWORD PTR [eax+40]

; 150  : 		this->value[2] = col_type(0, 0, 1, 0);
; 151  : 	}

	mov	eax, ebx
	movsd	QWORD PTR $T2[ebp+16], xmm0
	xorps	xmm0, xmm0
	rep movsd
	push	8
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ebx+64]
	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	lea	esi, DWORD PTR $T1[ebp]
	pop	ecx
	movupd	XMMWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x4@N$00@glm@@QAE@ABU?$tmat2x3@N$00@1@@Z ENDP	; glm::tmat3x4<double,1>::tmat3x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$00@glm@@QAE@ABU?$tmat4x4@N$00@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
$T3 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tmat3x4@N$00@glm@@QAE@ABU?$tmat4x4@N$00@1@@Z PROC	; glm::tmat3x4<double,1>::tmat3x4<double,1>, COMDAT
; _this$ = ecx

; 139  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xorps	xmm0, xmm0
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	2
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat3x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm0
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat3x4

; 140  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	lea	edi, DWORD PTR $T3[ebp]
	push	8
	pop	edx
	mov	esi, eax
	mov	ecx, edx
	rep movsd
	mov	edi, ebx
	lea	esi, DWORD PTR $T3[ebp]
	mov	ecx, edx
	rep movsd

; 141  : 		this->value[1] = col_type(m[1]);

	lea	esi, DWORD PTR [eax+32]
	mov	ecx, edx
	lea	edi, DWORD PTR $T2[ebp]
	rep movsd
	lea	edi, DWORD PTR [ebx+32]
	mov	ecx, edx
	lea	esi, DWORD PTR $T2[ebp]
	rep movsd

; 142  : 		this->value[2] = col_type(m[2]);

	lea	esi, DWORD PTR [eax+64]
	mov	ecx, edx
	lea	edi, DWORD PTR $T1[ebp]

; 143  : 	}

	mov	eax, ebx
	rep movsd
	lea	edi, DWORD PTR [ebx+64]
	mov	ecx, edx
	lea	esi, DWORD PTR $T1[ebp]
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x4@N$00@glm@@QAE@ABU?$tmat4x4@N$00@1@@Z ENDP	; glm::tmat3x4<double,1>::tmat3x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$00@glm@@QAE@ABU?$tmat3x3@N$00@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
$T3 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tmat3x4@N$00@glm@@QAE@ABU?$tmat3x3@N$00@1@@Z PROC	; glm::tmat3x4<double,1>::tmat3x4<double,1>, COMDAT
; _this$ = ecx

; 131  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xorps	xmm1, xmm1
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	2
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat3x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm1
	movups	XMMWORD PTR [eax], xmm1
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat3x4

; 132  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T3[ebp]
	push	8
	pop	ecx
	movsd	QWORD PTR $T3[ebp+24], xmm1
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]

; 133  : 		this->value[1] = col_type(m[1], 0);

	push	8
	movups	XMMWORD PTR $T3[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR $T3[ebp+16], xmm0
	rep movsd
	movups	xmm0, XMMWORD PTR [eax+24]
	pop	ecx
	movsd	QWORD PTR $T2[ebp+24], xmm1
	lea	edi, DWORD PTR [ebx+32]
	movups	XMMWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	movsd	xmm0, QWORD PTR [eax+40]
	movsd	QWORD PTR $T2[ebp+16], xmm0
	rep movsd

; 134  : 		this->value[2] = col_type(m[2], 0);

	movups	xmm0, XMMWORD PTR [eax+48]
	push	8
	pop	ecx
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ebx+64]
	movsd	xmm0, QWORD PTR [eax+64]
	lea	esi, DWORD PTR $T1[ebp]
	movsd	QWORD PTR $T1[ebp+16], xmm0

; 135  : 	}

	mov	eax, ebx
	movsd	QWORD PTR $T1[ebp+24], xmm1
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x4@N$00@glm@@QAE@ABU?$tmat3x3@N$00@1@@Z ENDP	; glm::tmat3x4<double,1>::tmat3x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$00@glm@@QAE@ABU?$tmat2x2@N$00@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
$T3 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tmat3x4@N$00@glm@@QAE@ABU?$tmat2x2@N$00@1@@Z PROC	; glm::tmat3x4<double,1>::tmat3x4<double,1>, COMDAT
; _this$ = ecx

; 123  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xorps	xmm0, xmm0
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	2
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat3x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm0
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat3x4

; 124  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T3[ebp]
	push	8
	pop	ecx
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]

; 125  : 		this->value[1] = col_type(m[1], 0, 0);

	push	8
	movups	XMMWORD PTR $T3[ebp], xmm0
	xorps	xmm0, xmm0
	movupd	XMMWORD PTR $T3[ebp+16], xmm0
	rep movsd
	movups	xmm0, XMMWORD PTR [eax+16]
	pop	ecx
	lea	edi, DWORD PTR [ebx+32]

; 126  : 		this->value[2] = col_type(0, 0, 1, 0);
; 127  : 	}

	mov	eax, ebx
	movups	XMMWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	xorps	xmm0, xmm0
	movupd	XMMWORD PTR $T2[ebp+16], xmm0
	push	8
	rep movsd
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ebx+64]
	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	lea	esi, DWORD PTR $T1[ebp]
	pop	ecx
	movupd	XMMWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x4@N$00@glm@@QAE@ABU?$tmat2x2@N$00@1@@Z ENDP	; glm::tmat3x4<double,1>::tmat3x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$00@glm@@QAE@ABU?$tvec4@N$00@1@00@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??0?$tmat3x4@N$00@glm@@QAE@ABU?$tvec4@N$00@1@00@Z PROC	; glm::tmat3x4<double,1>::tmat3x4<double,1>, COMDAT
; _this$ = ecx

; 71   : 	{

	push	ebp
	mov	ebp, esp
	mov	edx, ecx
	xorps	xmm0, xmm0
	push	2
	pop	ecx
	lea	eax, DWORD PTR [edx+16]
$LL4@tmat3x4:
	dec	ecx
	movups	XMMWORD PTR [eax-16], xmm0
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat3x4

; 72   : 		this->value[0] = v0;

	push	esi
	mov	esi, DWORD PTR _v0$[ebp]

; 73   : 		this->value[1] = v1;
; 74   : 		this->value[2] = v2;
; 75   : 	}

	mov	eax, edx
	push	edi
	push	8
	pop	ecx
	push	8
	mov	edi, edx
	rep movsd
	mov	esi, DWORD PTR _v1$[ebp]
	lea	edi, DWORD PTR [edx+32]
	pop	ecx
	rep movsd
	mov	esi, DWORD PTR _v2$[ebp]
	lea	edi, DWORD PTR [edx+64]
	push	8
	pop	ecx
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	12					; 0000000cH
??0?$tmat3x4@N$00@glm@@QAE@ABU?$tvec4@N$00@1@00@Z ENDP	; glm::tmat3x4<double,1>::tmat3x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$00@glm@@QAE@NNNNNNNNNNNN@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
$T3 = -32						; size = 32
_x0$ = 8						; size = 8
_y0$ = 16						; size = 8
_z0$ = 24						; size = 8
_w0$ = 32						; size = 8
_x1$ = 40						; size = 8
_y1$ = 48						; size = 8
_z1$ = 56						; size = 8
_w1$ = 64						; size = 8
_x2$ = 72						; size = 8
_y2$ = 80						; size = 8
_z2$ = 88						; size = 8
_w2$ = 96						; size = 8
??0?$tmat3x4@N$00@glm@@QAE@NNNNNNNNNNNN@Z PROC		; glm::tmat3x4<double,1>::tmat3x4<double,1>, COMDAT
; _this$ = ecx

; 58   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xorps	xmm0, xmm0
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	2
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat3x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm0
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat3x4

; 59   : 		this->value[0] = col_type(x0, y0, z0, w0);

	movsd	xmm0, QWORD PTR _x0$[ebp]
	lea	esi, DWORD PTR $T3[ebp]
	movsd	QWORD PTR $T3[ebp], xmm0
	mov	edi, ebx
	movsd	xmm0, QWORD PTR _y0$[ebp]

; 60   : 		this->value[1] = col_type(x1, y1, z1, w1);
; 61   : 		this->value[2] = col_type(x2, y2, z2, w2);
; 62   : 	}

	mov	eax, ebx
	movsd	QWORD PTR $T3[ebp+8], xmm0
	movsd	xmm0, QWORD PTR _z0$[ebp]
	movsd	QWORD PTR $T3[ebp+16], xmm0
	movsd	xmm0, QWORD PTR _w0$[ebp]
	movsd	QWORD PTR $T3[ebp+24], xmm0
	movsd	xmm0, QWORD PTR _x1$[ebp]
	push	8
	pop	ecx
	rep movsd
	movsd	QWORD PTR $T2[ebp], xmm0
	lea	edi, DWORD PTR [ebx+32]
	movsd	xmm0, QWORD PTR _y1$[ebp]
	lea	esi, DWORD PTR $T2[ebp]
	movsd	QWORD PTR $T2[ebp+8], xmm0
	movsd	xmm0, QWORD PTR _z1$[ebp]
	movsd	QWORD PTR $T2[ebp+16], xmm0
	movsd	xmm0, QWORD PTR _w1$[ebp]
	push	8
	movsd	QWORD PTR $T2[ebp+24], xmm0
	movsd	xmm0, QWORD PTR _x2$[ebp]
	pop	ecx
	rep movsd
	movsd	QWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ebx+64]
	movsd	xmm0, QWORD PTR _y2$[ebp]
	lea	esi, DWORD PTR $T1[ebp]
	movsd	QWORD PTR $T1[ebp+8], xmm0
	movsd	xmm0, QWORD PTR _z2$[ebp]
	push	8
	movsd	QWORD PTR $T1[ebp+16], xmm0
	movsd	xmm0, QWORD PTR _w2$[ebp]
	pop	ecx
	movsd	QWORD PTR $T1[ebp+24], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	96					; 00000060H
??0?$tmat3x4@N$00@glm@@QAE@NNNNNNNNNNNN@Z ENDP		; glm::tmat3x4<double,1>::tmat3x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$00@glm@@QAE@N@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
$T3 = -32						; size = 32
_scalar$ = 8						; size = 8
??0?$tmat3x4@N$00@glm@@QAE@N@Z PROC			; glm::tmat3x4<double,1>::tmat3x4<double,1>, COMDAT
; _this$ = ecx

; 45   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xorps	xmm2, xmm2
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	2
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat3x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm2
	movups	XMMWORD PTR [eax], xmm2
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat3x4

; 46   : 		this->value[0] = col_type(scalar, 0, 0, 0);

	movsd	xmm1, QWORD PTR _scalar$[ebp]
	lea	esi, DWORD PTR $T3[ebp]
	push	8
	pop	ecx
	movsd	QWORD PTR $T3[ebp], xmm1
	xorps	xmm0, xmm0
	movupd	XMMWORD PTR $T3[ebp+8], xmm0

; 47   : 		this->value[1] = col_type(0, scalar, 0, 0);

	push	8
	movsd	QWORD PTR $T3[ebp+24], xmm2
	mov	edi, ebx
	rep movsd
	pop	ecx
	movupd	XMMWORD PTR $T2[ebp+16], xmm0
	lea	edi, DWORD PTR [ebx+32]

; 48   : 		this->value[2] = col_type(0, 0, scalar, 0);
; 49   : 	}

	mov	eax, ebx
	movsd	QWORD PTR $T2[ebp], xmm2
	lea	esi, DWORD PTR $T2[ebp]
	movsd	QWORD PTR $T2[ebp+8], xmm1
	rep movsd
	push	8
	pop	ecx
	lea	edi, DWORD PTR [ebx+64]
	movsd	QWORD PTR $T1[ebp+16], xmm1
	lea	esi, DWORD PTR $T1[ebp]
	movsd	QWORD PTR $T1[ebp+24], xmm2
	movupd	XMMWORD PTR $T1[ebp], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$tmat3x4@N$00@glm@@QAE@N@Z ENDP			; glm::tmat3x4<double,1>::tmat3x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat3x4@N$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat3x4<double,1>::tmat3x4<double,1>, COMDAT
; _this$ = ecx

; 41   : 	{}

	push	2
	pop	edx
	lea	eax, DWORD PTR [ecx+16]
	xorps	xmm0, xmm0
$LL4@tmat3x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm0
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat3x4
	mov	eax, ecx
	ret	4
??0?$tmat3x4@N$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat3x4<double,1>::tmat3x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tmat3x4@N$00@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tmat3x4@N$00@glm@@QAE@ABU01@@Z PROC		; glm::tmat3x4<double,1>::tmat3x4<double,1>, COMDAT
; _this$ = ecx

; 201  : template struct tmat3x4<float64, mediump>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	24					; 00000018H
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tmat3x4@N$00@glm@@QAE@ABU01@@Z ENDP		; glm::tmat3x4<double,1>::tmat3x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$00@glm@@QAE@XZ
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
$T3 = -32						; size = 32
??0?$tmat3x4@N$00@glm@@QAE@XZ PROC			; glm::tmat3x4<double,1>::tmat3x4<double,1>, COMDAT
; _this$ = ecx

; 11   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xorps	xmm0, xmm0
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	2
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat3x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm0
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat3x4

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0, 0, 0);

	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	lea	esi, DWORD PTR $T3[ebp]
	movupd	XMMWORD PTR $T3[ebp], xmm0
	push	8
	pop	ecx
	xorps	xmm0, xmm0
	mov	edi, ebx
	movupd	XMMWORD PTR $T3[ebp+16], xmm0

; 14   : 				this->value[1] = col_type(0, 1, 0, 0);
; 15   : 				this->value[2] = col_type(0, 0, 1, 0);
; 16   : #			endif
; 17   : 		}

	mov	eax, ebx
	movaps	xmm0, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	rep movsd
	push	8
	movupd	XMMWORD PTR $T2[ebp], xmm0
	pop	ecx
	xorps	xmm0, xmm0
	lea	edi, DWORD PTR [ebx+32]
	movupd	XMMWORD PTR $T2[ebp+16], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	rep movsd
	push	8
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ebx+64]
	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	lea	esi, DWORD PTR $T1[ebp]
	pop	ecx
	movupd	XMMWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$tmat3x4@N$00@glm@@QAE@XZ ENDP			; glm::tmat3x4<double,1>::tmat3x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??F?$tmat3x4@M$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat3x4@M$00@glm@@QAE?AU01@H@Z PROC		; glm::tmat3x4<float,1>::operator--, COMDAT
; _this$ = ecx

; 314  : 	{

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi

; 315  : 		tmat3x4<T, P> Result(*this);

	mov	edi, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, ecx
	push	12					; 0000000cH
	pop	ecx
	mov	esi, eax
	rep movsd

; 316  : 		--*this;

	mov	ecx, eax
	call	??F?$tmat3x4@M$00@glm@@QAEAAU01@XZ	; glm::tmat3x4<float,1>::operator--

; 317  : 		return Result;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi

; 318  : 	}

	pop	ebp
	ret	8
??F?$tmat3x4@M$00@glm@@QAE?AU01@H@Z ENDP		; glm::tmat3x4<float,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??E?$tmat3x4@M$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat3x4@M$00@glm@@QAE?AU01@H@Z PROC		; glm::tmat3x4<float,1>::operator++, COMDAT
; _this$ = ecx

; 306  : 	{

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi

; 307  : 		tmat3x4<T, P> Result(*this);

	mov	edi, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, ecx
	push	12					; 0000000cH
	pop	ecx
	mov	esi, eax
	rep movsd

; 308  : 		++*this;

	mov	ecx, eax
	call	??E?$tmat3x4@M$00@glm@@QAEAAU01@XZ	; glm::tmat3x4<float,1>::operator++

; 309  : 		return Result;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi

; 310  : 	}

	pop	ebp
	ret	8
??E?$tmat3x4@M$00@glm@@QAE?AU01@H@Z ENDP		; glm::tmat3x4<float,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??F?$tmat3x4@M$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat3x4@M$00@glm@@QAEAAU01@XZ PROC			; glm::tmat3x4<float,1>::operator--, COMDAT
; _this$ = ecx

; 298  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 299  : 		--this->value[1];
; 300  : 		--this->value[2];
; 301  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0

; 302  : 	}

	ret	0
??F?$tmat3x4@M$00@glm@@QAEAAU01@XZ ENDP			; glm::tmat3x4<float,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??E?$tmat3x4@M$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat3x4@M$00@glm@@QAEAAU01@XZ PROC			; glm::tmat3x4<float,1>::operator++, COMDAT
; _this$ = ecx

; 289  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 290  : 		++this->value[1];
; 291  : 		++this->value[2];
; 292  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0

; 293  : 	}

	ret	0
??E?$tmat3x4@M$00@glm@@QAEAAU01@XZ ENDP			; glm::tmat3x4<float,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tmat3x4@M$00@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tmat3x4@M$00@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tmat3x4<float,1>::operator=, COMDAT
; _this$ = ecx

; 200  : template struct tmat3x4<float32, mediump>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	12					; 0000000cH
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tmat3x4@M$00@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tmat3x4<float,1>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??A?$tmat3x4@M$00@glm@@QBEABU?$tvec4@M$00@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat3x4@M$00@glm@@QBEABU?$tvec4@M$00@1@H@Z PROC	; glm::tmat3x4<float,1>::operator[], COMDAT
; _this$ = ecx

; 196  : 	{

	push	ebp
	mov	ebp, esp

; 197  : 		assert(i < this->length());
; 198  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, ecx

; 199  : 	}

	pop	ebp
	ret	4
??A?$tmat3x4@M$00@glm@@QBEABU?$tvec4@M$00@1@H@Z ENDP	; glm::tmat3x4<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??A?$tmat3x4@M$00@glm@@QAEAAU?$tvec4@M$00@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat3x4@M$00@glm@@QAEAAU?$tvec4@M$00@1@H@Z PROC	; glm::tmat3x4<float,1>::operator[], COMDAT
; _this$ = ecx

; 189  : 	{

	push	ebp
	mov	ebp, esp

; 190  : 		assert(i < this->length());
; 191  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, ecx

; 192  : 	}

	pop	ebp
	ret	4
??A?$tmat3x4@M$00@glm@@QAEAAU?$tvec4@M$00@1@H@Z ENDP	; glm::tmat3x4<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.hpp
;	COMDAT ?length@?$tmat3x4@M$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat3x4@M$00@glm@@SAHXZ PROC			; glm::tmat3x4<float,1>::length, COMDAT

; 80   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	push	3
	pop	eax
	ret	0
?length@?$tmat3x4@M$00@glm@@SAHXZ ENDP			; glm::tmat3x4<float,1>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$00@glm@@QAE@ABU?$tmat4x3@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat3x4@M$00@glm@@QAE@ABU?$tmat4x3@M$00@1@@Z PROC	; glm::tmat3x4<float,1>::tmat3x4<float,1>, COMDAT
; _this$ = ecx

; 179  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	lea	eax, DWORD PTR [ecx+8]
	push	2
	pop	edx
$LL4@tmat3x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat3x4

; 180  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	and	DWORD PTR $T3[ebp+12], 0
	push	esi
	push	edi
	movss	xmm0, DWORD PTR [eax]
	lea	esi, DWORD PTR $T3[ebp]
	movss	DWORD PTR $T3[ebp], xmm0
	mov	edi, ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T3[ebp+8], xmm0
	movsd
	movsd
	movsd
	movsd

; 181  : 		this->value[1] = col_type(m[1], 0);

	movss	xmm0, DWORD PTR [eax+12]
	lea	edi, DWORD PTR [ecx+16]
	and	DWORD PTR $T2[ebp+12], 0
	lea	esi, DWORD PTR $T2[ebp]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR $T2[ebp+8], xmm0
	movsd
	movsd
	movsd
	movsd

; 182  : 		this->value[2] = col_type(m[2], 0);

	movss	xmm0, DWORD PTR [eax+24]
	lea	edi, DWORD PTR [ecx+32]
	and	DWORD PTR $T1[ebp+12], 0
	lea	esi, DWORD PTR $T1[ebp]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+28]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+32]

; 183  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+8], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x4@M$00@glm@@QAE@ABU?$tmat4x3@M$00@1@@Z ENDP	; glm::tmat3x4<float,1>::tmat3x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$00@glm@@QAE@ABU?$tmat4x2@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat3x4@M$00@glm@@QAE@ABU?$tmat4x2@M$00@1@@Z PROC	; glm::tmat3x4<float,1>::tmat3x4<float,1>, COMDAT
; _this$ = ecx

; 171  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	lea	eax, DWORD PTR [ecx+8]
	push	2
	pop	edx
$LL4@tmat3x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat3x4

; 172  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	and	DWORD PTR $T3[ebp+8], 0
	and	DWORD PTR $T3[ebp+12], 0
	push	esi
	movss	xmm0, DWORD PTR [eax]
	lea	esi, DWORD PTR $T3[ebp]
	push	edi
	movss	DWORD PTR $T3[ebp], xmm0
	mov	edi, ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movsd
	movsd
	movsd
	movsd

; 173  : 		this->value[1] = col_type(m[1], 0, 0);

	movss	xmm0, DWORD PTR [eax+8]
	lea	edi, DWORD PTR [ecx+16]
	and	DWORD PTR $T2[ebp+8], 0
	lea	esi, DWORD PTR $T2[ebp]
	and	DWORD PTR $T2[ebp+12], 0
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movsd
	movsd
	movsd
	movsd

; 174  : 		this->value[2] = col_type(m[2], 1, 0);

	movss	xmm0, DWORD PTR [eax+16]
	lea	edi, DWORD PTR [ecx+32]
	and	DWORD PTR $T1[ebp+12], 0
	lea	esi, DWORD PTR $T1[ebp]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+20]

; 175  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	DWORD PTR $T1[ebp+8], 1065353216	; 3f800000H
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x4@M$00@glm@@QAE@ABU?$tmat4x2@M$00@1@@Z ENDP	; glm::tmat3x4<float,1>::tmat3x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$00@glm@@QAE@ABU?$tmat2x4@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat3x4@M$00@glm@@QAE@ABU?$tmat2x4@M$00@1@@Z PROC	; glm::tmat3x4<float,1>::tmat3x4<float,1>, COMDAT
; _this$ = ecx

; 163  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	lea	eax, DWORD PTR [ecx+8]
	push	2
	pop	edx
$LL4@tmat3x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat3x4

; 164  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	esi, eax
	movaps	xmm0, XMMWORD PTR __xmm@000000003f8000000000000000000000
	lea	edi, DWORD PTR $T3[ebp]
	movsd
	movsd
	movsd
	movsd
	mov	edi, ecx
	lea	esi, DWORD PTR $T3[ebp]
	movsd
	movsd
	movsd
	movsd

; 165  : 		this->value[1] = col_type(m[1]);

	lea	esi, DWORD PTR [eax+16]

; 166  : 		this->value[2] = col_type(0, 0, 1, 0);
; 167  : 	}

	mov	eax, ecx
	lea	edi, DWORD PTR $T2[ebp]
	movsd
	movsd
	movsd
	movsd
	lea	edi, DWORD PTR [ecx+16]
	lea	esi, DWORD PTR $T2[ebp]
	movsd
	movsd
	movsd
	movsd
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+32]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x4@M$00@glm@@QAE@ABU?$tmat2x4@M$00@1@@Z ENDP	; glm::tmat3x4<float,1>::tmat3x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$00@glm@@QAE@ABU?$tmat3x2@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat3x4@M$00@glm@@QAE@ABU?$tmat3x2@M$00@1@@Z PROC	; glm::tmat3x4<float,1>::tmat3x4<float,1>, COMDAT
; _this$ = ecx

; 155  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	lea	eax, DWORD PTR [ecx+8]
	push	2
	pop	edx
$LL4@tmat3x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat3x4

; 156  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	and	DWORD PTR $T3[ebp+8], 0
	and	DWORD PTR $T3[ebp+12], 0
	push	esi
	movss	xmm0, DWORD PTR [eax]
	lea	esi, DWORD PTR $T3[ebp]
	push	edi
	movss	DWORD PTR $T3[ebp], xmm0
	mov	edi, ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movsd
	movsd
	movsd
	movsd

; 157  : 		this->value[1] = col_type(m[1], 0, 0);

	movss	xmm0, DWORD PTR [eax+8]
	lea	edi, DWORD PTR [ecx+16]
	and	DWORD PTR $T2[ebp+8], 0
	lea	esi, DWORD PTR $T2[ebp]
	and	DWORD PTR $T2[ebp+12], 0
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movsd
	movsd
	movsd
	movsd

; 158  : 		this->value[2] = col_type(m[2], 1, 0);

	movss	xmm0, DWORD PTR [eax+16]
	lea	edi, DWORD PTR [ecx+32]
	and	DWORD PTR $T1[ebp+12], 0
	lea	esi, DWORD PTR $T1[ebp]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+20]

; 159  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	DWORD PTR $T1[ebp+8], 1065353216	; 3f800000H
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x4@M$00@glm@@QAE@ABU?$tmat3x2@M$00@1@@Z ENDP	; glm::tmat3x4<float,1>::tmat3x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$00@glm@@QAE@ABU?$tmat2x3@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat3x4@M$00@glm@@QAE@ABU?$tmat2x3@M$00@1@@Z PROC	; glm::tmat3x4<float,1>::tmat3x4<float,1>, COMDAT
; _this$ = ecx

; 147  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	lea	eax, DWORD PTR [ecx+8]
	push	2
	pop	edx
$LL4@tmat3x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat3x4

; 148  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	and	DWORD PTR $T3[ebp+12], 0
	push	esi
	push	edi
	movss	xmm0, DWORD PTR [eax]
	lea	esi, DWORD PTR $T3[ebp]
	movss	DWORD PTR $T3[ebp], xmm0
	mov	edi, ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T3[ebp+8], xmm0
	movsd
	movsd
	movsd
	movsd

; 149  : 		this->value[1] = col_type(m[1], 0);

	movss	xmm0, DWORD PTR [eax+12]
	lea	edi, DWORD PTR [ecx+16]
	and	DWORD PTR $T2[ebp+12], 0
	lea	esi, DWORD PTR $T2[ebp]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+20]

; 150  : 		this->value[2] = col_type(0, 0, 1, 0);
; 151  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T2[ebp+8], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@000000003f8000000000000000000000
	movsd
	movsd
	movsd
	movsd
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+32]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x4@M$00@glm@@QAE@ABU?$tmat2x3@M$00@1@@Z ENDP	; glm::tmat3x4<float,1>::tmat3x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$00@glm@@QAE@ABU?$tmat4x4@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat3x4@M$00@glm@@QAE@ABU?$tmat4x4@M$00@1@@Z PROC	; glm::tmat3x4<float,1>::tmat3x4<float,1>, COMDAT
; _this$ = ecx

; 139  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	lea	eax, DWORD PTR [ecx+8]
	push	2
	pop	edx
$LL4@tmat3x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat3x4

; 140  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	esi, eax
	lea	edi, DWORD PTR $T3[ebp]
	movsd
	movsd
	movsd
	movsd
	mov	edi, ecx
	lea	esi, DWORD PTR $T3[ebp]
	movsd
	movsd
	movsd
	movsd

; 141  : 		this->value[1] = col_type(m[1]);

	lea	esi, DWORD PTR [eax+16]
	lea	edi, DWORD PTR $T2[ebp]
	movsd
	movsd
	movsd
	movsd
	lea	edi, DWORD PTR [ecx+16]
	lea	esi, DWORD PTR $T2[ebp]
	movsd
	movsd
	movsd
	movsd

; 142  : 		this->value[2] = col_type(m[2]);

	lea	esi, DWORD PTR [eax+32]

; 143  : 	}

	mov	eax, ecx
	lea	edi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	lea	edi, DWORD PTR [ecx+32]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x4@M$00@glm@@QAE@ABU?$tmat4x4@M$00@1@@Z ENDP	; glm::tmat3x4<float,1>::tmat3x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$00@glm@@QAE@ABU?$tmat3x3@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat3x4@M$00@glm@@QAE@ABU?$tmat3x3@M$00@1@@Z PROC	; glm::tmat3x4<float,1>::tmat3x4<float,1>, COMDAT
; _this$ = ecx

; 131  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	lea	eax, DWORD PTR [ecx+8]
	push	2
	pop	edx
$LL4@tmat3x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat3x4

; 132  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	and	DWORD PTR $T3[ebp+12], 0
	push	esi
	push	edi
	movss	xmm0, DWORD PTR [eax]
	lea	esi, DWORD PTR $T3[ebp]
	movss	DWORD PTR $T3[ebp], xmm0
	mov	edi, ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T3[ebp+8], xmm0
	movsd
	movsd
	movsd
	movsd

; 133  : 		this->value[1] = col_type(m[1], 0);

	movss	xmm0, DWORD PTR [eax+12]
	lea	edi, DWORD PTR [ecx+16]
	and	DWORD PTR $T2[ebp+12], 0
	lea	esi, DWORD PTR $T2[ebp]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR $T2[ebp+8], xmm0
	movsd
	movsd
	movsd
	movsd

; 134  : 		this->value[2] = col_type(m[2], 0);

	movss	xmm0, DWORD PTR [eax+24]
	lea	edi, DWORD PTR [ecx+32]
	and	DWORD PTR $T1[ebp+12], 0
	lea	esi, DWORD PTR $T1[ebp]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+28]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+32]

; 135  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+8], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x4@M$00@glm@@QAE@ABU?$tmat3x3@M$00@1@@Z ENDP	; glm::tmat3x4<float,1>::tmat3x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$00@glm@@QAE@ABU?$tmat2x2@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat3x4@M$00@glm@@QAE@ABU?$tmat2x2@M$00@1@@Z PROC	; glm::tmat3x4<float,1>::tmat3x4<float,1>, COMDAT
; _this$ = ecx

; 123  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	lea	eax, DWORD PTR [ecx+8]
	push	2
	pop	edx
$LL4@tmat3x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat3x4

; 124  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	and	DWORD PTR $T3[ebp+8], 0
	and	DWORD PTR $T3[ebp+12], 0
	push	esi
	movss	xmm0, DWORD PTR [eax]
	lea	esi, DWORD PTR $T3[ebp]
	push	edi
	movss	DWORD PTR $T3[ebp], xmm0
	mov	edi, ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movsd
	movsd
	movsd
	movsd

; 125  : 		this->value[1] = col_type(m[1], 0, 0);

	movss	xmm0, DWORD PTR [eax+8]
	lea	edi, DWORD PTR [ecx+16]
	and	DWORD PTR $T2[ebp+8], 0
	lea	esi, DWORD PTR $T2[ebp]
	and	DWORD PTR $T2[ebp+12], 0
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+12]

; 126  : 		this->value[2] = col_type(0, 0, 1, 0);
; 127  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T2[ebp+4], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@000000003f8000000000000000000000
	movsd
	movsd
	movsd
	movsd
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+32]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x4@M$00@glm@@QAE@ABU?$tmat2x2@M$00@1@@Z ENDP	; glm::tmat3x4<float,1>::tmat3x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$00@glm@@QAE@ABU?$tvec4@M$00@1@00@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??0?$tmat3x4@M$00@glm@@QAE@ABU?$tvec4@M$00@1@00@Z PROC	; glm::tmat3x4<float,1>::tmat3x4<float,1>, COMDAT
; _this$ = ecx

; 71   : 	{

	push	ebp
	mov	ebp, esp
	push	2
	pop	edx
	lea	eax, DWORD PTR [ecx+8]
$LL4@tmat3x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat3x4

; 72   : 		this->value[0] = v0;

	push	esi
	mov	esi, DWORD PTR _v0$[ebp]

; 73   : 		this->value[1] = v1;
; 74   : 		this->value[2] = v2;
; 75   : 	}

	mov	eax, ecx
	push	edi
	mov	edi, ecx
	movsd
	movsd
	movsd
	movsd
	mov	esi, DWORD PTR _v1$[ebp]
	lea	edi, DWORD PTR [ecx+16]
	movsd
	movsd
	movsd
	movsd
	mov	esi, DWORD PTR _v2$[ebp]
	lea	edi, DWORD PTR [ecx+32]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	12					; 0000000cH
??0?$tmat3x4@M$00@glm@@QAE@ABU?$tvec4@M$00@1@00@Z ENDP	; glm::tmat3x4<float,1>::tmat3x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$00@glm@@QAE@MMMMMMMMMMMM@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_z0$ = 16						; size = 4
_w0$ = 20						; size = 4
_x1$ = 24						; size = 4
_y1$ = 28						; size = 4
_z1$ = 32						; size = 4
_w1$ = 36						; size = 4
_x2$ = 40						; size = 4
_y2$ = 44						; size = 4
_z2$ = 48						; size = 4
_w2$ = 52						; size = 4
??0?$tmat3x4@M$00@glm@@QAE@MMMMMMMMMMMM@Z PROC		; glm::tmat3x4<float,1>::tmat3x4<float,1>, COMDAT
; _this$ = ecx

; 58   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	lea	eax, DWORD PTR [ecx+8]
	push	2
	pop	edx
$LL4@tmat3x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat3x4

; 59   : 		this->value[0] = col_type(x0, y0, z0, w0);

	movss	xmm0, DWORD PTR _x0$[ebp]

; 60   : 		this->value[1] = col_type(x1, y1, z1, w1);
; 61   : 		this->value[2] = col_type(x2, y2, z2, w2);
; 62   : 	}

	mov	eax, ecx
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR _y0$[ebp]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movss	xmm0, DWORD PTR _z0$[ebp]
	push	esi
	movss	DWORD PTR $T3[ebp+8], xmm0
	lea	esi, DWORD PTR $T3[ebp]
	movss	xmm0, DWORD PTR _w0$[ebp]
	push	edi
	movss	DWORD PTR $T3[ebp+12], xmm0
	mov	edi, ecx
	movss	xmm0, DWORD PTR _x1$[ebp]
	movsd
	movsd
	movsd
	movsd
	movss	DWORD PTR $T2[ebp], xmm0
	lea	edi, DWORD PTR [ecx+16]
	movss	xmm0, DWORD PTR _y1$[ebp]
	lea	esi, DWORD PTR $T2[ebp]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR _z1$[ebp]
	movss	DWORD PTR $T2[ebp+8], xmm0
	movss	xmm0, DWORD PTR _w1$[ebp]
	movss	DWORD PTR $T2[ebp+12], xmm0
	movss	xmm0, DWORD PTR _x2$[ebp]
	movsd
	movsd
	movsd
	movsd
	movss	DWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+32]
	movss	xmm0, DWORD PTR _y2$[ebp]
	lea	esi, DWORD PTR $T1[ebp]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR _z2$[ebp]
	movss	DWORD PTR $T1[ebp+8], xmm0
	movss	xmm0, DWORD PTR _w2$[ebp]
	movss	DWORD PTR $T1[ebp+12], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	48					; 00000030H
??0?$tmat3x4@M$00@glm@@QAE@MMMMMMMMMMMM@Z ENDP		; glm::tmat3x4<float,1>::tmat3x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$00@glm@@QAE@M@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
_scalar$ = 8						; size = 4
??0?$tmat3x4@M$00@glm@@QAE@M@Z PROC			; glm::tmat3x4<float,1>::tmat3x4<float,1>, COMDAT
; _this$ = ecx

; 45   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	lea	eax, DWORD PTR [ecx+8]
	push	2
	pop	edx
$LL4@tmat3x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat3x4

; 46   : 		this->value[0] = col_type(scalar, 0, 0, 0);

	and	DWORD PTR $T3[ebp+4], 0

; 47   : 		this->value[1] = col_type(0, scalar, 0, 0);
; 48   : 		this->value[2] = col_type(0, 0, scalar, 0);
; 49   : 	}

	mov	eax, ecx
	and	DWORD PTR $T3[ebp+8], 0
	and	DWORD PTR $T3[ebp+12], 0
	movss	xmm0, DWORD PTR _scalar$[ebp]
	push	esi
	push	edi
	movss	DWORD PTR $T3[ebp], xmm0
	lea	esi, DWORD PTR $T3[ebp]
	mov	edi, ecx
	movsd
	movsd
	movsd
	movsd
	and	DWORD PTR $T2[ebp], 0
	lea	edi, DWORD PTR [ecx+16]
	and	DWORD PTR $T2[ebp+8], 0
	lea	esi, DWORD PTR $T2[ebp]
	and	DWORD PTR $T2[ebp+12], 0
	movss	DWORD PTR $T2[ebp+4], xmm0
	movsd
	movsd
	movsd
	movsd
	and	DWORD PTR $T1[ebp], 0
	lea	edi, DWORD PTR [ecx+32]
	and	DWORD PTR $T1[ebp+4], 0
	lea	esi, DWORD PTR $T1[ebp]
	and	DWORD PTR $T1[ebp+12], 0
	movss	DWORD PTR $T1[ebp+8], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x4@M$00@glm@@QAE@M@Z ENDP			; glm::tmat3x4<float,1>::tmat3x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat3x4@M$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat3x4<float,1>::tmat3x4<float,1>, COMDAT
; _this$ = ecx

; 41   : 	{}

	push	2
	pop	edx
	lea	eax, DWORD PTR [ecx+8]
$LL4@tmat3x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat3x4
	mov	eax, ecx
	ret	4
??0?$tmat3x4@M$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat3x4<float,1>::tmat3x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tmat3x4@M$00@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tmat3x4@M$00@glm@@QAE@ABU01@@Z PROC		; glm::tmat3x4<float,1>::tmat3x4<float,1>, COMDAT
; _this$ = ecx

; 200  : template struct tmat3x4<float32, mediump>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	12					; 0000000cH
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tmat3x4@M$00@glm@@QAE@ABU01@@Z ENDP		; glm::tmat3x4<float,1>::tmat3x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$00@glm@@QAE@XZ
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
??0?$tmat3x4@M$00@glm@@QAE@XZ PROC			; glm::tmat3x4<float,1>::tmat3x4<float,1>, COMDAT
; _this$ = ecx

; 11   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	lea	eax, DWORD PTR [ecx+8]
	push	2
	pop	edx
$LL4@tmat3x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat3x4

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0, 0, 0);
; 14   : 				this->value[1] = col_type(0, 1, 0, 0);
; 15   : 				this->value[2] = col_type(0, 0, 1, 0);
; 16   : #			endif
; 17   : 		}

	movaps	xmm0, XMMWORD PTR __xmm@0000000000000000000000003f800000
	mov	eax, ecx
	push	esi
	push	edi
	movups	XMMWORD PTR $T3[ebp], xmm0
	lea	esi, DWORD PTR $T3[ebp]
	mov	edi, ecx
	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003f80000000000000
	movsd
	movsd
	movsd
	movsd
	movups	XMMWORD PTR $T2[ebp], xmm0
	lea	edi, DWORD PTR [ecx+16]
	movaps	xmm0, XMMWORD PTR __xmm@000000003f8000000000000000000000
	lea	esi, DWORD PTR $T2[ebp]
	movsd
	movsd
	movsd
	movsd
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+32]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$tmat3x4@M$00@glm@@QAE@XZ ENDP			; glm::tmat3x4<float,1>::tmat3x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??F?$tmat3x4@N$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat3x4@N$01@glm@@QAE?AU01@H@Z PROC		; glm::tmat3x4<double,2>::operator--, COMDAT
; _this$ = ecx

; 314  : 	{

	push	ebp
	mov	ebp, esp

; 315  : 		tmat3x4<T, P> Result(*this);
; 316  : 		--*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	mov	edx, ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	movups	xmm0, XMMWORD PTR [edx]
	push	24					; 00000018H
	pop	ecx
	subpd	xmm0, xmm1
	mov	esi, edx
	mov	edi, eax
	rep movsd
	movups	XMMWORD PTR [edx], xmm0
	pop	edi
	movups	xmm0, XMMWORD PTR [edx+16]
	pop	esi
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+16], xmm0
	movups	xmm0, XMMWORD PTR [edx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+32], xmm0
	movups	xmm0, XMMWORD PTR [edx+48]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+48], xmm0
	movups	xmm0, XMMWORD PTR [edx+64]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+64], xmm0
	movups	xmm0, XMMWORD PTR [edx+80]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+80], xmm0

; 317  : 		return Result;
; 318  : 	}

	pop	ebp
	ret	8
??F?$tmat3x4@N$01@glm@@QAE?AU01@H@Z ENDP		; glm::tmat3x4<double,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??E?$tmat3x4@N$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat3x4@N$01@glm@@QAE?AU01@H@Z PROC		; glm::tmat3x4<double,2>::operator++, COMDAT
; _this$ = ecx

; 306  : 	{

	push	ebp
	mov	ebp, esp

; 307  : 		tmat3x4<T, P> Result(*this);
; 308  : 		++*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	mov	edx, ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	movups	xmm0, XMMWORD PTR [edx]
	push	24					; 00000018H
	pop	ecx
	addpd	xmm0, xmm1
	mov	esi, edx
	mov	edi, eax
	rep movsd
	movups	XMMWORD PTR [edx], xmm0
	pop	edi
	movups	xmm0, XMMWORD PTR [edx+16]
	pop	esi
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+16], xmm0
	movups	xmm0, XMMWORD PTR [edx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+32], xmm0
	movups	xmm0, XMMWORD PTR [edx+48]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+48], xmm0
	movups	xmm0, XMMWORD PTR [edx+64]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+64], xmm0
	movups	xmm0, XMMWORD PTR [edx+80]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+80], xmm0

; 309  : 		return Result;
; 310  : 	}

	pop	ebp
	ret	8
??E?$tmat3x4@N$01@glm@@QAE?AU01@H@Z ENDP		; glm::tmat3x4<double,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??F?$tmat3x4@N$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat3x4@N$01@glm@@QAEAAU01@XZ PROC			; glm::tmat3x4<double,2>::operator--, COMDAT
; _this$ = ecx

; 298  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 299  : 		--this->value[1];
; 300  : 		--this->value[2];
; 301  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	xmm0, XMMWORD PTR [ecx+64]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	xmm0, XMMWORD PTR [ecx+80]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+80], xmm0

; 302  : 	}

	ret	0
??F?$tmat3x4@N$01@glm@@QAEAAU01@XZ ENDP			; glm::tmat3x4<double,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??E?$tmat3x4@N$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat3x4@N$01@glm@@QAEAAU01@XZ PROC			; glm::tmat3x4<double,2>::operator++, COMDAT
; _this$ = ecx

; 289  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 290  : 		++this->value[1];
; 291  : 		++this->value[2];
; 292  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	xmm0, XMMWORD PTR [ecx+64]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	xmm0, XMMWORD PTR [ecx+80]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+80], xmm0

; 293  : 	}

	ret	0
??E?$tmat3x4@N$01@glm@@QAEAAU01@XZ ENDP			; glm::tmat3x4<double,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tmat3x4@N$01@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tmat3x4@N$01@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tmat3x4<double,2>::operator=, COMDAT
; _this$ = ecx

; 198  : template struct tmat3x4<float64, lowp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	24					; 00000018H
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tmat3x4@N$01@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tmat3x4<double,2>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??A?$tmat3x4@N$01@glm@@QBEABU?$tvec4@N$01@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat3x4@N$01@glm@@QBEABU?$tvec4@N$01@1@H@Z PROC	; glm::tmat3x4<double,2>::operator[], COMDAT
; _this$ = ecx

; 196  : 	{

	push	ebp
	mov	ebp, esp

; 197  : 		assert(i < this->length());
; 198  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	add	eax, ecx

; 199  : 	}

	pop	ebp
	ret	4
??A?$tmat3x4@N$01@glm@@QBEABU?$tvec4@N$01@1@H@Z ENDP	; glm::tmat3x4<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??A?$tmat3x4@N$01@glm@@QAEAAU?$tvec4@N$01@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat3x4@N$01@glm@@QAEAAU?$tvec4@N$01@1@H@Z PROC	; glm::tmat3x4<double,2>::operator[], COMDAT
; _this$ = ecx

; 189  : 	{

	push	ebp
	mov	ebp, esp

; 190  : 		assert(i < this->length());
; 191  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	add	eax, ecx

; 192  : 	}

	pop	ebp
	ret	4
??A?$tmat3x4@N$01@glm@@QAEAAU?$tvec4@N$01@1@H@Z ENDP	; glm::tmat3x4<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.hpp
;	COMDAT ?length@?$tmat3x4@N$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat3x4@N$01@glm@@SAHXZ PROC			; glm::tmat3x4<double,2>::length, COMDAT

; 80   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	push	3
	pop	eax
	ret	0
?length@?$tmat3x4@N$01@glm@@SAHXZ ENDP			; glm::tmat3x4<double,2>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$01@glm@@QAE@ABU?$tmat4x3@N$01@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
$T3 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tmat3x4@N$01@glm@@QAE@ABU?$tmat4x3@N$01@1@@Z PROC	; glm::tmat3x4<double,2>::tmat3x4<double,2>, COMDAT
; _this$ = ecx

; 179  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xorps	xmm1, xmm1
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	2
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat3x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm1
	movups	XMMWORD PTR [eax], xmm1
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat3x4

; 180  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T3[ebp]
	push	8
	pop	ecx
	movsd	QWORD PTR $T3[ebp+24], xmm1
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]

; 181  : 		this->value[1] = col_type(m[1], 0);

	push	8
	movups	XMMWORD PTR $T3[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR $T3[ebp+16], xmm0
	rep movsd
	movups	xmm0, XMMWORD PTR [eax+24]
	pop	ecx
	movsd	QWORD PTR $T2[ebp+24], xmm1
	lea	edi, DWORD PTR [ebx+32]
	movups	XMMWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	movsd	xmm0, QWORD PTR [eax+40]
	movsd	QWORD PTR $T2[ebp+16], xmm0
	rep movsd

; 182  : 		this->value[2] = col_type(m[2], 0);

	movups	xmm0, XMMWORD PTR [eax+48]
	push	8
	pop	ecx
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ebx+64]
	movsd	xmm0, QWORD PTR [eax+64]
	lea	esi, DWORD PTR $T1[ebp]
	movsd	QWORD PTR $T1[ebp+16], xmm0

; 183  : 	}

	mov	eax, ebx
	movsd	QWORD PTR $T1[ebp+24], xmm1
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x4@N$01@glm@@QAE@ABU?$tmat4x3@N$01@1@@Z ENDP	; glm::tmat3x4<double,2>::tmat3x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$01@glm@@QAE@ABU?$tmat4x2@N$01@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
$T3 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tmat3x4@N$01@glm@@QAE@ABU?$tmat4x2@N$01@1@@Z PROC	; glm::tmat3x4<double,2>::tmat3x4<double,2>, COMDAT
; _this$ = ecx

; 171  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xorps	xmm0, xmm0
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	2
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat3x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm0
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat3x4

; 172  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T3[ebp]
	push	8
	pop	ecx
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]

; 173  : 		this->value[1] = col_type(m[1], 0, 0);

	push	8
	movups	XMMWORD PTR $T3[ebp], xmm0
	xorps	xmm0, xmm0
	movupd	XMMWORD PTR $T3[ebp+16], xmm0
	rep movsd
	movups	xmm0, XMMWORD PTR [eax+16]
	pop	ecx
	lea	edi, DWORD PTR [ebx+32]
	movups	XMMWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	xorps	xmm0, xmm0
	movupd	XMMWORD PTR $T2[ebp+16], xmm0

; 174  : 		this->value[2] = col_type(m[2], 1, 0);

	push	8
	rep movsd
	movups	xmm0, XMMWORD PTR [eax+32]
	pop	ecx
	lea	edi, DWORD PTR [ebx+64]

; 175  : 	}

	mov	eax, ebx
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	movupd	XMMWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x4@N$01@glm@@QAE@ABU?$tmat4x2@N$01@1@@Z ENDP	; glm::tmat3x4<double,2>::tmat3x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$01@glm@@QAE@ABU?$tmat2x4@N$01@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
$T3 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tmat3x4@N$01@glm@@QAE@ABU?$tmat2x4@N$01@1@@Z PROC	; glm::tmat3x4<double,2>::tmat3x4<double,2>, COMDAT
; _this$ = ecx

; 163  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xorps	xmm0, xmm0
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	2
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat3x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm0
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat3x4

; 164  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	lea	edi, DWORD PTR $T3[ebp]
	push	8
	pop	edx
	mov	esi, eax
	mov	ecx, edx
	rep movsd
	mov	edi, ebx
	lea	esi, DWORD PTR $T3[ebp]
	mov	ecx, edx
	xorps	xmm0, xmm0
	rep movsd

; 165  : 		this->value[1] = col_type(m[1]);

	lea	esi, DWORD PTR [eax+32]
	mov	ecx, edx
	lea	edi, DWORD PTR $T2[ebp]

; 166  : 		this->value[2] = col_type(0, 0, 1, 0);
; 167  : 	}

	mov	eax, ebx
	rep movsd
	lea	edi, DWORD PTR [ebx+32]
	mov	ecx, edx
	lea	esi, DWORD PTR $T2[ebp]
	rep movsd
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ebx+64]
	mov	ecx, edx
	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	lea	esi, DWORD PTR $T1[ebp]
	movupd	XMMWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x4@N$01@glm@@QAE@ABU?$tmat2x4@N$01@1@@Z ENDP	; glm::tmat3x4<double,2>::tmat3x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$01@glm@@QAE@ABU?$tmat3x2@N$01@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
$T3 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tmat3x4@N$01@glm@@QAE@ABU?$tmat3x2@N$01@1@@Z PROC	; glm::tmat3x4<double,2>::tmat3x4<double,2>, COMDAT
; _this$ = ecx

; 155  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xorps	xmm0, xmm0
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	2
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat3x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm0
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat3x4

; 156  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T3[ebp]
	push	8
	pop	ecx
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]

; 157  : 		this->value[1] = col_type(m[1], 0, 0);

	push	8
	movups	XMMWORD PTR $T3[ebp], xmm0
	xorps	xmm0, xmm0
	movupd	XMMWORD PTR $T3[ebp+16], xmm0
	rep movsd
	movups	xmm0, XMMWORD PTR [eax+16]
	pop	ecx
	lea	edi, DWORD PTR [ebx+32]
	movups	XMMWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	xorps	xmm0, xmm0
	movupd	XMMWORD PTR $T2[ebp+16], xmm0

; 158  : 		this->value[2] = col_type(m[2], 1, 0);

	push	8
	rep movsd
	movups	xmm0, XMMWORD PTR [eax+32]
	pop	ecx
	lea	edi, DWORD PTR [ebx+64]

; 159  : 	}

	mov	eax, ebx
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	movupd	XMMWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x4@N$01@glm@@QAE@ABU?$tmat3x2@N$01@1@@Z ENDP	; glm::tmat3x4<double,2>::tmat3x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$01@glm@@QAE@ABU?$tmat2x3@N$01@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
$T3 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tmat3x4@N$01@glm@@QAE@ABU?$tmat2x3@N$01@1@@Z PROC	; glm::tmat3x4<double,2>::tmat3x4<double,2>, COMDAT
; _this$ = ecx

; 147  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xorps	xmm1, xmm1
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	2
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat3x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm1
	movups	XMMWORD PTR [eax], xmm1
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat3x4

; 148  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T3[ebp]
	push	8
	pop	ecx
	movsd	QWORD PTR $T3[ebp+24], xmm1
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]

; 149  : 		this->value[1] = col_type(m[1], 0);

	push	8
	movups	XMMWORD PTR $T3[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR $T3[ebp+16], xmm0
	rep movsd
	movups	xmm0, XMMWORD PTR [eax+24]
	pop	ecx
	movsd	QWORD PTR $T2[ebp+24], xmm1
	lea	edi, DWORD PTR [ebx+32]
	movups	XMMWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	movsd	xmm0, QWORD PTR [eax+40]

; 150  : 		this->value[2] = col_type(0, 0, 1, 0);
; 151  : 	}

	mov	eax, ebx
	movsd	QWORD PTR $T2[ebp+16], xmm0
	xorps	xmm0, xmm0
	rep movsd
	push	8
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ebx+64]
	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	lea	esi, DWORD PTR $T1[ebp]
	pop	ecx
	movupd	XMMWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x4@N$01@glm@@QAE@ABU?$tmat2x3@N$01@1@@Z ENDP	; glm::tmat3x4<double,2>::tmat3x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$01@glm@@QAE@ABU?$tmat4x4@N$01@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
$T3 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tmat3x4@N$01@glm@@QAE@ABU?$tmat4x4@N$01@1@@Z PROC	; glm::tmat3x4<double,2>::tmat3x4<double,2>, COMDAT
; _this$ = ecx

; 139  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xorps	xmm0, xmm0
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	2
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat3x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm0
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat3x4

; 140  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	lea	edi, DWORD PTR $T3[ebp]
	push	8
	pop	edx
	mov	esi, eax
	mov	ecx, edx
	rep movsd
	mov	edi, ebx
	lea	esi, DWORD PTR $T3[ebp]
	mov	ecx, edx
	rep movsd

; 141  : 		this->value[1] = col_type(m[1]);

	lea	esi, DWORD PTR [eax+32]
	mov	ecx, edx
	lea	edi, DWORD PTR $T2[ebp]
	rep movsd
	lea	edi, DWORD PTR [ebx+32]
	mov	ecx, edx
	lea	esi, DWORD PTR $T2[ebp]
	rep movsd

; 142  : 		this->value[2] = col_type(m[2]);

	lea	esi, DWORD PTR [eax+64]
	mov	ecx, edx
	lea	edi, DWORD PTR $T1[ebp]

; 143  : 	}

	mov	eax, ebx
	rep movsd
	lea	edi, DWORD PTR [ebx+64]
	mov	ecx, edx
	lea	esi, DWORD PTR $T1[ebp]
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x4@N$01@glm@@QAE@ABU?$tmat4x4@N$01@1@@Z ENDP	; glm::tmat3x4<double,2>::tmat3x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$01@glm@@QAE@ABU?$tmat3x3@N$01@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
$T3 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tmat3x4@N$01@glm@@QAE@ABU?$tmat3x3@N$01@1@@Z PROC	; glm::tmat3x4<double,2>::tmat3x4<double,2>, COMDAT
; _this$ = ecx

; 131  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xorps	xmm1, xmm1
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	2
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat3x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm1
	movups	XMMWORD PTR [eax], xmm1
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat3x4

; 132  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T3[ebp]
	push	8
	pop	ecx
	movsd	QWORD PTR $T3[ebp+24], xmm1
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]

; 133  : 		this->value[1] = col_type(m[1], 0);

	push	8
	movups	XMMWORD PTR $T3[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR $T3[ebp+16], xmm0
	rep movsd
	movups	xmm0, XMMWORD PTR [eax+24]
	pop	ecx
	movsd	QWORD PTR $T2[ebp+24], xmm1
	lea	edi, DWORD PTR [ebx+32]
	movups	XMMWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	movsd	xmm0, QWORD PTR [eax+40]
	movsd	QWORD PTR $T2[ebp+16], xmm0
	rep movsd

; 134  : 		this->value[2] = col_type(m[2], 0);

	movups	xmm0, XMMWORD PTR [eax+48]
	push	8
	pop	ecx
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ebx+64]
	movsd	xmm0, QWORD PTR [eax+64]
	lea	esi, DWORD PTR $T1[ebp]
	movsd	QWORD PTR $T1[ebp+16], xmm0

; 135  : 	}

	mov	eax, ebx
	movsd	QWORD PTR $T1[ebp+24], xmm1
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x4@N$01@glm@@QAE@ABU?$tmat3x3@N$01@1@@Z ENDP	; glm::tmat3x4<double,2>::tmat3x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$01@glm@@QAE@ABU?$tmat2x2@N$01@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
$T3 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tmat3x4@N$01@glm@@QAE@ABU?$tmat2x2@N$01@1@@Z PROC	; glm::tmat3x4<double,2>::tmat3x4<double,2>, COMDAT
; _this$ = ecx

; 123  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xorps	xmm0, xmm0
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	2
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat3x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm0
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat3x4

; 124  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T3[ebp]
	push	8
	pop	ecx
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]

; 125  : 		this->value[1] = col_type(m[1], 0, 0);

	push	8
	movups	XMMWORD PTR $T3[ebp], xmm0
	xorps	xmm0, xmm0
	movupd	XMMWORD PTR $T3[ebp+16], xmm0
	rep movsd
	movups	xmm0, XMMWORD PTR [eax+16]
	pop	ecx
	lea	edi, DWORD PTR [ebx+32]

; 126  : 		this->value[2] = col_type(0, 0, 1, 0);
; 127  : 	}

	mov	eax, ebx
	movups	XMMWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	xorps	xmm0, xmm0
	movupd	XMMWORD PTR $T2[ebp+16], xmm0
	push	8
	rep movsd
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ebx+64]
	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	lea	esi, DWORD PTR $T1[ebp]
	pop	ecx
	movupd	XMMWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x4@N$01@glm@@QAE@ABU?$tmat2x2@N$01@1@@Z ENDP	; glm::tmat3x4<double,2>::tmat3x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$01@glm@@QAE@ABU?$tvec4@N$01@1@00@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??0?$tmat3x4@N$01@glm@@QAE@ABU?$tvec4@N$01@1@00@Z PROC	; glm::tmat3x4<double,2>::tmat3x4<double,2>, COMDAT
; _this$ = ecx

; 71   : 	{

	push	ebp
	mov	ebp, esp
	mov	edx, ecx
	xorps	xmm0, xmm0
	push	2
	pop	ecx
	lea	eax, DWORD PTR [edx+16]
$LL4@tmat3x4:
	dec	ecx
	movups	XMMWORD PTR [eax-16], xmm0
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat3x4

; 72   : 		this->value[0] = v0;

	push	esi
	mov	esi, DWORD PTR _v0$[ebp]

; 73   : 		this->value[1] = v1;
; 74   : 		this->value[2] = v2;
; 75   : 	}

	mov	eax, edx
	push	edi
	push	8
	pop	ecx
	push	8
	mov	edi, edx
	rep movsd
	mov	esi, DWORD PTR _v1$[ebp]
	lea	edi, DWORD PTR [edx+32]
	pop	ecx
	rep movsd
	mov	esi, DWORD PTR _v2$[ebp]
	lea	edi, DWORD PTR [edx+64]
	push	8
	pop	ecx
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	12					; 0000000cH
??0?$tmat3x4@N$01@glm@@QAE@ABU?$tvec4@N$01@1@00@Z ENDP	; glm::tmat3x4<double,2>::tmat3x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$01@glm@@QAE@NNNNNNNNNNNN@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
$T3 = -32						; size = 32
_x0$ = 8						; size = 8
_y0$ = 16						; size = 8
_z0$ = 24						; size = 8
_w0$ = 32						; size = 8
_x1$ = 40						; size = 8
_y1$ = 48						; size = 8
_z1$ = 56						; size = 8
_w1$ = 64						; size = 8
_x2$ = 72						; size = 8
_y2$ = 80						; size = 8
_z2$ = 88						; size = 8
_w2$ = 96						; size = 8
??0?$tmat3x4@N$01@glm@@QAE@NNNNNNNNNNNN@Z PROC		; glm::tmat3x4<double,2>::tmat3x4<double,2>, COMDAT
; _this$ = ecx

; 58   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xorps	xmm0, xmm0
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	2
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat3x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm0
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat3x4

; 59   : 		this->value[0] = col_type(x0, y0, z0, w0);

	movsd	xmm0, QWORD PTR _x0$[ebp]
	lea	esi, DWORD PTR $T3[ebp]
	movsd	QWORD PTR $T3[ebp], xmm0
	mov	edi, ebx
	movsd	xmm0, QWORD PTR _y0$[ebp]

; 60   : 		this->value[1] = col_type(x1, y1, z1, w1);
; 61   : 		this->value[2] = col_type(x2, y2, z2, w2);
; 62   : 	}

	mov	eax, ebx
	movsd	QWORD PTR $T3[ebp+8], xmm0
	movsd	xmm0, QWORD PTR _z0$[ebp]
	movsd	QWORD PTR $T3[ebp+16], xmm0
	movsd	xmm0, QWORD PTR _w0$[ebp]
	movsd	QWORD PTR $T3[ebp+24], xmm0
	movsd	xmm0, QWORD PTR _x1$[ebp]
	push	8
	pop	ecx
	rep movsd
	movsd	QWORD PTR $T2[ebp], xmm0
	lea	edi, DWORD PTR [ebx+32]
	movsd	xmm0, QWORD PTR _y1$[ebp]
	lea	esi, DWORD PTR $T2[ebp]
	movsd	QWORD PTR $T2[ebp+8], xmm0
	movsd	xmm0, QWORD PTR _z1$[ebp]
	movsd	QWORD PTR $T2[ebp+16], xmm0
	movsd	xmm0, QWORD PTR _w1$[ebp]
	push	8
	movsd	QWORD PTR $T2[ebp+24], xmm0
	movsd	xmm0, QWORD PTR _x2$[ebp]
	pop	ecx
	rep movsd
	movsd	QWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ebx+64]
	movsd	xmm0, QWORD PTR _y2$[ebp]
	lea	esi, DWORD PTR $T1[ebp]
	movsd	QWORD PTR $T1[ebp+8], xmm0
	movsd	xmm0, QWORD PTR _z2$[ebp]
	push	8
	movsd	QWORD PTR $T1[ebp+16], xmm0
	movsd	xmm0, QWORD PTR _w2$[ebp]
	pop	ecx
	movsd	QWORD PTR $T1[ebp+24], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	96					; 00000060H
??0?$tmat3x4@N$01@glm@@QAE@NNNNNNNNNNNN@Z ENDP		; glm::tmat3x4<double,2>::tmat3x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$01@glm@@QAE@N@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
$T3 = -32						; size = 32
_scalar$ = 8						; size = 8
??0?$tmat3x4@N$01@glm@@QAE@N@Z PROC			; glm::tmat3x4<double,2>::tmat3x4<double,2>, COMDAT
; _this$ = ecx

; 45   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xorps	xmm2, xmm2
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	2
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat3x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm2
	movups	XMMWORD PTR [eax], xmm2
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat3x4

; 46   : 		this->value[0] = col_type(scalar, 0, 0, 0);

	movsd	xmm1, QWORD PTR _scalar$[ebp]
	lea	esi, DWORD PTR $T3[ebp]
	push	8
	pop	ecx
	movsd	QWORD PTR $T3[ebp], xmm1
	xorps	xmm0, xmm0
	movupd	XMMWORD PTR $T3[ebp+8], xmm0

; 47   : 		this->value[1] = col_type(0, scalar, 0, 0);

	push	8
	movsd	QWORD PTR $T3[ebp+24], xmm2
	mov	edi, ebx
	rep movsd
	pop	ecx
	movupd	XMMWORD PTR $T2[ebp+16], xmm0
	lea	edi, DWORD PTR [ebx+32]

; 48   : 		this->value[2] = col_type(0, 0, scalar, 0);
; 49   : 	}

	mov	eax, ebx
	movsd	QWORD PTR $T2[ebp], xmm2
	lea	esi, DWORD PTR $T2[ebp]
	movsd	QWORD PTR $T2[ebp+8], xmm1
	rep movsd
	push	8
	pop	ecx
	lea	edi, DWORD PTR [ebx+64]
	movsd	QWORD PTR $T1[ebp+16], xmm1
	lea	esi, DWORD PTR $T1[ebp]
	movsd	QWORD PTR $T1[ebp+24], xmm2
	movupd	XMMWORD PTR $T1[ebp], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$tmat3x4@N$01@glm@@QAE@N@Z ENDP			; glm::tmat3x4<double,2>::tmat3x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat3x4@N$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat3x4<double,2>::tmat3x4<double,2>, COMDAT
; _this$ = ecx

; 41   : 	{}

	push	2
	pop	edx
	lea	eax, DWORD PTR [ecx+16]
	xorps	xmm0, xmm0
$LL4@tmat3x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm0
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat3x4
	mov	eax, ecx
	ret	4
??0?$tmat3x4@N$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat3x4<double,2>::tmat3x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tmat3x4@N$01@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tmat3x4@N$01@glm@@QAE@ABU01@@Z PROC		; glm::tmat3x4<double,2>::tmat3x4<double,2>, COMDAT
; _this$ = ecx

; 198  : template struct tmat3x4<float64, lowp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	24					; 00000018H
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tmat3x4@N$01@glm@@QAE@ABU01@@Z ENDP		; glm::tmat3x4<double,2>::tmat3x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$01@glm@@QAE@XZ
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
$T3 = -32						; size = 32
??0?$tmat3x4@N$01@glm@@QAE@XZ PROC			; glm::tmat3x4<double,2>::tmat3x4<double,2>, COMDAT
; _this$ = ecx

; 11   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xorps	xmm0, xmm0
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	2
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat3x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm0
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat3x4

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0, 0, 0);

	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	lea	esi, DWORD PTR $T3[ebp]
	movupd	XMMWORD PTR $T3[ebp], xmm0
	push	8
	pop	ecx
	xorps	xmm0, xmm0
	mov	edi, ebx
	movupd	XMMWORD PTR $T3[ebp+16], xmm0

; 14   : 				this->value[1] = col_type(0, 1, 0, 0);
; 15   : 				this->value[2] = col_type(0, 0, 1, 0);
; 16   : #			endif
; 17   : 		}

	mov	eax, ebx
	movaps	xmm0, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	rep movsd
	push	8
	movupd	XMMWORD PTR $T2[ebp], xmm0
	pop	ecx
	xorps	xmm0, xmm0
	lea	edi, DWORD PTR [ebx+32]
	movupd	XMMWORD PTR $T2[ebp+16], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	rep movsd
	push	8
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ebx+64]
	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	lea	esi, DWORD PTR $T1[ebp]
	pop	ecx
	movupd	XMMWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$tmat3x4@N$01@glm@@QAE@XZ ENDP			; glm::tmat3x4<double,2>::tmat3x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??F?$tmat3x4@M$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat3x4@M$01@glm@@QAE?AU01@H@Z PROC		; glm::tmat3x4<float,2>::operator--, COMDAT
; _this$ = ecx

; 314  : 	{

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi

; 315  : 		tmat3x4<T, P> Result(*this);

	mov	edi, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, ecx
	push	12					; 0000000cH
	pop	ecx
	mov	esi, eax
	rep movsd

; 316  : 		--*this;

	mov	ecx, eax
	call	??F?$tmat3x4@M$01@glm@@QAEAAU01@XZ	; glm::tmat3x4<float,2>::operator--

; 317  : 		return Result;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi

; 318  : 	}

	pop	ebp
	ret	8
??F?$tmat3x4@M$01@glm@@QAE?AU01@H@Z ENDP		; glm::tmat3x4<float,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??E?$tmat3x4@M$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat3x4@M$01@glm@@QAE?AU01@H@Z PROC		; glm::tmat3x4<float,2>::operator++, COMDAT
; _this$ = ecx

; 306  : 	{

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi

; 307  : 		tmat3x4<T, P> Result(*this);

	mov	edi, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, ecx
	push	12					; 0000000cH
	pop	ecx
	mov	esi, eax
	rep movsd

; 308  : 		++*this;

	mov	ecx, eax
	call	??E?$tmat3x4@M$01@glm@@QAEAAU01@XZ	; glm::tmat3x4<float,2>::operator++

; 309  : 		return Result;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi

; 310  : 	}

	pop	ebp
	ret	8
??E?$tmat3x4@M$01@glm@@QAE?AU01@H@Z ENDP		; glm::tmat3x4<float,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??F?$tmat3x4@M$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat3x4@M$01@glm@@QAEAAU01@XZ PROC			; glm::tmat3x4<float,2>::operator--, COMDAT
; _this$ = ecx

; 298  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 299  : 		--this->value[1];
; 300  : 		--this->value[2];
; 301  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0

; 302  : 	}

	ret	0
??F?$tmat3x4@M$01@glm@@QAEAAU01@XZ ENDP			; glm::tmat3x4<float,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??E?$tmat3x4@M$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat3x4@M$01@glm@@QAEAAU01@XZ PROC			; glm::tmat3x4<float,2>::operator++, COMDAT
; _this$ = ecx

; 289  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 290  : 		++this->value[1];
; 291  : 		++this->value[2];
; 292  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0

; 293  : 	}

	ret	0
??E?$tmat3x4@M$01@glm@@QAEAAU01@XZ ENDP			; glm::tmat3x4<float,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tmat3x4@M$01@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tmat3x4@M$01@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tmat3x4<float,2>::operator=, COMDAT
; _this$ = ecx

; 197  : template struct tmat3x4<float32, lowp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	12					; 0000000cH
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tmat3x4@M$01@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tmat3x4<float,2>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??A?$tmat3x4@M$01@glm@@QBEABU?$tvec4@M$01@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat3x4@M$01@glm@@QBEABU?$tvec4@M$01@1@H@Z PROC	; glm::tmat3x4<float,2>::operator[], COMDAT
; _this$ = ecx

; 196  : 	{

	push	ebp
	mov	ebp, esp

; 197  : 		assert(i < this->length());
; 198  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, ecx

; 199  : 	}

	pop	ebp
	ret	4
??A?$tmat3x4@M$01@glm@@QBEABU?$tvec4@M$01@1@H@Z ENDP	; glm::tmat3x4<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??A?$tmat3x4@M$01@glm@@QAEAAU?$tvec4@M$01@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat3x4@M$01@glm@@QAEAAU?$tvec4@M$01@1@H@Z PROC	; glm::tmat3x4<float,2>::operator[], COMDAT
; _this$ = ecx

; 189  : 	{

	push	ebp
	mov	ebp, esp

; 190  : 		assert(i < this->length());
; 191  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, ecx

; 192  : 	}

	pop	ebp
	ret	4
??A?$tmat3x4@M$01@glm@@QAEAAU?$tvec4@M$01@1@H@Z ENDP	; glm::tmat3x4<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.hpp
;	COMDAT ?length@?$tmat3x4@M$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat3x4@M$01@glm@@SAHXZ PROC			; glm::tmat3x4<float,2>::length, COMDAT

; 80   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	push	3
	pop	eax
	ret	0
?length@?$tmat3x4@M$01@glm@@SAHXZ ENDP			; glm::tmat3x4<float,2>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$01@glm@@QAE@ABU?$tmat4x3@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat3x4@M$01@glm@@QAE@ABU?$tmat4x3@M$01@1@@Z PROC	; glm::tmat3x4<float,2>::tmat3x4<float,2>, COMDAT
; _this$ = ecx

; 179  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	lea	eax, DWORD PTR [ecx+8]
	push	2
	pop	edx
$LL4@tmat3x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat3x4

; 180  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	and	DWORD PTR $T3[ebp+12], 0
	push	esi
	push	edi
	movss	xmm0, DWORD PTR [eax]
	lea	esi, DWORD PTR $T3[ebp]
	movss	DWORD PTR $T3[ebp], xmm0
	mov	edi, ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T3[ebp+8], xmm0
	movsd
	movsd
	movsd
	movsd

; 181  : 		this->value[1] = col_type(m[1], 0);

	movss	xmm0, DWORD PTR [eax+12]
	lea	edi, DWORD PTR [ecx+16]
	and	DWORD PTR $T2[ebp+12], 0
	lea	esi, DWORD PTR $T2[ebp]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR $T2[ebp+8], xmm0
	movsd
	movsd
	movsd
	movsd

; 182  : 		this->value[2] = col_type(m[2], 0);

	movss	xmm0, DWORD PTR [eax+24]
	lea	edi, DWORD PTR [ecx+32]
	and	DWORD PTR $T1[ebp+12], 0
	lea	esi, DWORD PTR $T1[ebp]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+28]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+32]

; 183  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+8], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x4@M$01@glm@@QAE@ABU?$tmat4x3@M$01@1@@Z ENDP	; glm::tmat3x4<float,2>::tmat3x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$01@glm@@QAE@ABU?$tmat4x2@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat3x4@M$01@glm@@QAE@ABU?$tmat4x2@M$01@1@@Z PROC	; glm::tmat3x4<float,2>::tmat3x4<float,2>, COMDAT
; _this$ = ecx

; 171  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	lea	eax, DWORD PTR [ecx+8]
	push	2
	pop	edx
$LL4@tmat3x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat3x4

; 172  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	and	DWORD PTR $T3[ebp+8], 0
	and	DWORD PTR $T3[ebp+12], 0
	push	esi
	movss	xmm0, DWORD PTR [eax]
	lea	esi, DWORD PTR $T3[ebp]
	push	edi
	movss	DWORD PTR $T3[ebp], xmm0
	mov	edi, ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movsd
	movsd
	movsd
	movsd

; 173  : 		this->value[1] = col_type(m[1], 0, 0);

	movss	xmm0, DWORD PTR [eax+8]
	lea	edi, DWORD PTR [ecx+16]
	and	DWORD PTR $T2[ebp+8], 0
	lea	esi, DWORD PTR $T2[ebp]
	and	DWORD PTR $T2[ebp+12], 0
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movsd
	movsd
	movsd
	movsd

; 174  : 		this->value[2] = col_type(m[2], 1, 0);

	movss	xmm0, DWORD PTR [eax+16]
	lea	edi, DWORD PTR [ecx+32]
	and	DWORD PTR $T1[ebp+12], 0
	lea	esi, DWORD PTR $T1[ebp]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+20]

; 175  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	DWORD PTR $T1[ebp+8], 1065353216	; 3f800000H
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x4@M$01@glm@@QAE@ABU?$tmat4x2@M$01@1@@Z ENDP	; glm::tmat3x4<float,2>::tmat3x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$01@glm@@QAE@ABU?$tmat2x4@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat3x4@M$01@glm@@QAE@ABU?$tmat2x4@M$01@1@@Z PROC	; glm::tmat3x4<float,2>::tmat3x4<float,2>, COMDAT
; _this$ = ecx

; 163  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	lea	eax, DWORD PTR [ecx+8]
	push	2
	pop	edx
$LL4@tmat3x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat3x4

; 164  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	esi, eax
	movaps	xmm0, XMMWORD PTR __xmm@000000003f8000000000000000000000
	lea	edi, DWORD PTR $T3[ebp]
	movsd
	movsd
	movsd
	movsd
	mov	edi, ecx
	lea	esi, DWORD PTR $T3[ebp]
	movsd
	movsd
	movsd
	movsd

; 165  : 		this->value[1] = col_type(m[1]);

	lea	esi, DWORD PTR [eax+16]

; 166  : 		this->value[2] = col_type(0, 0, 1, 0);
; 167  : 	}

	mov	eax, ecx
	lea	edi, DWORD PTR $T2[ebp]
	movsd
	movsd
	movsd
	movsd
	lea	edi, DWORD PTR [ecx+16]
	lea	esi, DWORD PTR $T2[ebp]
	movsd
	movsd
	movsd
	movsd
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+32]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x4@M$01@glm@@QAE@ABU?$tmat2x4@M$01@1@@Z ENDP	; glm::tmat3x4<float,2>::tmat3x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$01@glm@@QAE@ABU?$tmat3x2@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat3x4@M$01@glm@@QAE@ABU?$tmat3x2@M$01@1@@Z PROC	; glm::tmat3x4<float,2>::tmat3x4<float,2>, COMDAT
; _this$ = ecx

; 155  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	lea	eax, DWORD PTR [ecx+8]
	push	2
	pop	edx
$LL4@tmat3x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat3x4

; 156  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	and	DWORD PTR $T3[ebp+8], 0
	and	DWORD PTR $T3[ebp+12], 0
	push	esi
	movss	xmm0, DWORD PTR [eax]
	lea	esi, DWORD PTR $T3[ebp]
	push	edi
	movss	DWORD PTR $T3[ebp], xmm0
	mov	edi, ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movsd
	movsd
	movsd
	movsd

; 157  : 		this->value[1] = col_type(m[1], 0, 0);

	movss	xmm0, DWORD PTR [eax+8]
	lea	edi, DWORD PTR [ecx+16]
	and	DWORD PTR $T2[ebp+8], 0
	lea	esi, DWORD PTR $T2[ebp]
	and	DWORD PTR $T2[ebp+12], 0
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movsd
	movsd
	movsd
	movsd

; 158  : 		this->value[2] = col_type(m[2], 1, 0);

	movss	xmm0, DWORD PTR [eax+16]
	lea	edi, DWORD PTR [ecx+32]
	and	DWORD PTR $T1[ebp+12], 0
	lea	esi, DWORD PTR $T1[ebp]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+20]

; 159  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	DWORD PTR $T1[ebp+8], 1065353216	; 3f800000H
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x4@M$01@glm@@QAE@ABU?$tmat3x2@M$01@1@@Z ENDP	; glm::tmat3x4<float,2>::tmat3x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$01@glm@@QAE@ABU?$tmat2x3@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat3x4@M$01@glm@@QAE@ABU?$tmat2x3@M$01@1@@Z PROC	; glm::tmat3x4<float,2>::tmat3x4<float,2>, COMDAT
; _this$ = ecx

; 147  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	lea	eax, DWORD PTR [ecx+8]
	push	2
	pop	edx
$LL4@tmat3x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat3x4

; 148  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	and	DWORD PTR $T3[ebp+12], 0
	push	esi
	push	edi
	movss	xmm0, DWORD PTR [eax]
	lea	esi, DWORD PTR $T3[ebp]
	movss	DWORD PTR $T3[ebp], xmm0
	mov	edi, ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T3[ebp+8], xmm0
	movsd
	movsd
	movsd
	movsd

; 149  : 		this->value[1] = col_type(m[1], 0);

	movss	xmm0, DWORD PTR [eax+12]
	lea	edi, DWORD PTR [ecx+16]
	and	DWORD PTR $T2[ebp+12], 0
	lea	esi, DWORD PTR $T2[ebp]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+20]

; 150  : 		this->value[2] = col_type(0, 0, 1, 0);
; 151  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T2[ebp+8], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@000000003f8000000000000000000000
	movsd
	movsd
	movsd
	movsd
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+32]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x4@M$01@glm@@QAE@ABU?$tmat2x3@M$01@1@@Z ENDP	; glm::tmat3x4<float,2>::tmat3x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$01@glm@@QAE@ABU?$tmat4x4@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat3x4@M$01@glm@@QAE@ABU?$tmat4x4@M$01@1@@Z PROC	; glm::tmat3x4<float,2>::tmat3x4<float,2>, COMDAT
; _this$ = ecx

; 139  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	lea	eax, DWORD PTR [ecx+8]
	push	2
	pop	edx
$LL4@tmat3x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat3x4

; 140  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	esi, eax
	lea	edi, DWORD PTR $T3[ebp]
	movsd
	movsd
	movsd
	movsd
	mov	edi, ecx
	lea	esi, DWORD PTR $T3[ebp]
	movsd
	movsd
	movsd
	movsd

; 141  : 		this->value[1] = col_type(m[1]);

	lea	esi, DWORD PTR [eax+16]
	lea	edi, DWORD PTR $T2[ebp]
	movsd
	movsd
	movsd
	movsd
	lea	edi, DWORD PTR [ecx+16]
	lea	esi, DWORD PTR $T2[ebp]
	movsd
	movsd
	movsd
	movsd

; 142  : 		this->value[2] = col_type(m[2]);

	lea	esi, DWORD PTR [eax+32]

; 143  : 	}

	mov	eax, ecx
	lea	edi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	lea	edi, DWORD PTR [ecx+32]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x4@M$01@glm@@QAE@ABU?$tmat4x4@M$01@1@@Z ENDP	; glm::tmat3x4<float,2>::tmat3x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$01@glm@@QAE@ABU?$tmat3x3@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat3x4@M$01@glm@@QAE@ABU?$tmat3x3@M$01@1@@Z PROC	; glm::tmat3x4<float,2>::tmat3x4<float,2>, COMDAT
; _this$ = ecx

; 131  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	lea	eax, DWORD PTR [ecx+8]
	push	2
	pop	edx
$LL4@tmat3x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat3x4

; 132  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	and	DWORD PTR $T3[ebp+12], 0
	push	esi
	push	edi
	movss	xmm0, DWORD PTR [eax]
	lea	esi, DWORD PTR $T3[ebp]
	movss	DWORD PTR $T3[ebp], xmm0
	mov	edi, ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T3[ebp+8], xmm0
	movsd
	movsd
	movsd
	movsd

; 133  : 		this->value[1] = col_type(m[1], 0);

	movss	xmm0, DWORD PTR [eax+12]
	lea	edi, DWORD PTR [ecx+16]
	and	DWORD PTR $T2[ebp+12], 0
	lea	esi, DWORD PTR $T2[ebp]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR $T2[ebp+8], xmm0
	movsd
	movsd
	movsd
	movsd

; 134  : 		this->value[2] = col_type(m[2], 0);

	movss	xmm0, DWORD PTR [eax+24]
	lea	edi, DWORD PTR [ecx+32]
	and	DWORD PTR $T1[ebp+12], 0
	lea	esi, DWORD PTR $T1[ebp]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+28]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+32]

; 135  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+8], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x4@M$01@glm@@QAE@ABU?$tmat3x3@M$01@1@@Z ENDP	; glm::tmat3x4<float,2>::tmat3x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$01@glm@@QAE@ABU?$tmat2x2@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat3x4@M$01@glm@@QAE@ABU?$tmat2x2@M$01@1@@Z PROC	; glm::tmat3x4<float,2>::tmat3x4<float,2>, COMDAT
; _this$ = ecx

; 123  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	lea	eax, DWORD PTR [ecx+8]
	push	2
	pop	edx
$LL4@tmat3x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat3x4

; 124  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	and	DWORD PTR $T3[ebp+8], 0
	and	DWORD PTR $T3[ebp+12], 0
	push	esi
	movss	xmm0, DWORD PTR [eax]
	lea	esi, DWORD PTR $T3[ebp]
	push	edi
	movss	DWORD PTR $T3[ebp], xmm0
	mov	edi, ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movsd
	movsd
	movsd
	movsd

; 125  : 		this->value[1] = col_type(m[1], 0, 0);

	movss	xmm0, DWORD PTR [eax+8]
	lea	edi, DWORD PTR [ecx+16]
	and	DWORD PTR $T2[ebp+8], 0
	lea	esi, DWORD PTR $T2[ebp]
	and	DWORD PTR $T2[ebp+12], 0
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+12]

; 126  : 		this->value[2] = col_type(0, 0, 1, 0);
; 127  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T2[ebp+4], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@000000003f8000000000000000000000
	movsd
	movsd
	movsd
	movsd
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+32]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x4@M$01@glm@@QAE@ABU?$tmat2x2@M$01@1@@Z ENDP	; glm::tmat3x4<float,2>::tmat3x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$01@glm@@QAE@ABU?$tvec4@M$01@1@00@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??0?$tmat3x4@M$01@glm@@QAE@ABU?$tvec4@M$01@1@00@Z PROC	; glm::tmat3x4<float,2>::tmat3x4<float,2>, COMDAT
; _this$ = ecx

; 71   : 	{

	push	ebp
	mov	ebp, esp
	push	2
	pop	edx
	lea	eax, DWORD PTR [ecx+8]
$LL4@tmat3x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat3x4

; 72   : 		this->value[0] = v0;

	push	esi
	mov	esi, DWORD PTR _v0$[ebp]

; 73   : 		this->value[1] = v1;
; 74   : 		this->value[2] = v2;
; 75   : 	}

	mov	eax, ecx
	push	edi
	mov	edi, ecx
	movsd
	movsd
	movsd
	movsd
	mov	esi, DWORD PTR _v1$[ebp]
	lea	edi, DWORD PTR [ecx+16]
	movsd
	movsd
	movsd
	movsd
	mov	esi, DWORD PTR _v2$[ebp]
	lea	edi, DWORD PTR [ecx+32]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	12					; 0000000cH
??0?$tmat3x4@M$01@glm@@QAE@ABU?$tvec4@M$01@1@00@Z ENDP	; glm::tmat3x4<float,2>::tmat3x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$01@glm@@QAE@MMMMMMMMMMMM@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_z0$ = 16						; size = 4
_w0$ = 20						; size = 4
_x1$ = 24						; size = 4
_y1$ = 28						; size = 4
_z1$ = 32						; size = 4
_w1$ = 36						; size = 4
_x2$ = 40						; size = 4
_y2$ = 44						; size = 4
_z2$ = 48						; size = 4
_w2$ = 52						; size = 4
??0?$tmat3x4@M$01@glm@@QAE@MMMMMMMMMMMM@Z PROC		; glm::tmat3x4<float,2>::tmat3x4<float,2>, COMDAT
; _this$ = ecx

; 58   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	lea	eax, DWORD PTR [ecx+8]
	push	2
	pop	edx
$LL4@tmat3x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat3x4

; 59   : 		this->value[0] = col_type(x0, y0, z0, w0);

	movss	xmm0, DWORD PTR _x0$[ebp]

; 60   : 		this->value[1] = col_type(x1, y1, z1, w1);
; 61   : 		this->value[2] = col_type(x2, y2, z2, w2);
; 62   : 	}

	mov	eax, ecx
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR _y0$[ebp]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movss	xmm0, DWORD PTR _z0$[ebp]
	push	esi
	movss	DWORD PTR $T3[ebp+8], xmm0
	lea	esi, DWORD PTR $T3[ebp]
	movss	xmm0, DWORD PTR _w0$[ebp]
	push	edi
	movss	DWORD PTR $T3[ebp+12], xmm0
	mov	edi, ecx
	movss	xmm0, DWORD PTR _x1$[ebp]
	movsd
	movsd
	movsd
	movsd
	movss	DWORD PTR $T2[ebp], xmm0
	lea	edi, DWORD PTR [ecx+16]
	movss	xmm0, DWORD PTR _y1$[ebp]
	lea	esi, DWORD PTR $T2[ebp]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR _z1$[ebp]
	movss	DWORD PTR $T2[ebp+8], xmm0
	movss	xmm0, DWORD PTR _w1$[ebp]
	movss	DWORD PTR $T2[ebp+12], xmm0
	movss	xmm0, DWORD PTR _x2$[ebp]
	movsd
	movsd
	movsd
	movsd
	movss	DWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+32]
	movss	xmm0, DWORD PTR _y2$[ebp]
	lea	esi, DWORD PTR $T1[ebp]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR _z2$[ebp]
	movss	DWORD PTR $T1[ebp+8], xmm0
	movss	xmm0, DWORD PTR _w2$[ebp]
	movss	DWORD PTR $T1[ebp+12], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	48					; 00000030H
??0?$tmat3x4@M$01@glm@@QAE@MMMMMMMMMMMM@Z ENDP		; glm::tmat3x4<float,2>::tmat3x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$01@glm@@QAE@M@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
_scalar$ = 8						; size = 4
??0?$tmat3x4@M$01@glm@@QAE@M@Z PROC			; glm::tmat3x4<float,2>::tmat3x4<float,2>, COMDAT
; _this$ = ecx

; 45   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	lea	eax, DWORD PTR [ecx+8]
	push	2
	pop	edx
$LL4@tmat3x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat3x4

; 46   : 		this->value[0] = col_type(scalar, 0, 0, 0);

	and	DWORD PTR $T3[ebp+4], 0

; 47   : 		this->value[1] = col_type(0, scalar, 0, 0);
; 48   : 		this->value[2] = col_type(0, 0, scalar, 0);
; 49   : 	}

	mov	eax, ecx
	and	DWORD PTR $T3[ebp+8], 0
	and	DWORD PTR $T3[ebp+12], 0
	movss	xmm0, DWORD PTR _scalar$[ebp]
	push	esi
	push	edi
	movss	DWORD PTR $T3[ebp], xmm0
	lea	esi, DWORD PTR $T3[ebp]
	mov	edi, ecx
	movsd
	movsd
	movsd
	movsd
	and	DWORD PTR $T2[ebp], 0
	lea	edi, DWORD PTR [ecx+16]
	and	DWORD PTR $T2[ebp+8], 0
	lea	esi, DWORD PTR $T2[ebp]
	and	DWORD PTR $T2[ebp+12], 0
	movss	DWORD PTR $T2[ebp+4], xmm0
	movsd
	movsd
	movsd
	movsd
	and	DWORD PTR $T1[ebp], 0
	lea	edi, DWORD PTR [ecx+32]
	and	DWORD PTR $T1[ebp+4], 0
	lea	esi, DWORD PTR $T1[ebp]
	and	DWORD PTR $T1[ebp+12], 0
	movss	DWORD PTR $T1[ebp+8], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x4@M$01@glm@@QAE@M@Z ENDP			; glm::tmat3x4<float,2>::tmat3x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat3x4@M$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat3x4<float,2>::tmat3x4<float,2>, COMDAT
; _this$ = ecx

; 41   : 	{}

	push	2
	pop	edx
	lea	eax, DWORD PTR [ecx+8]
$LL4@tmat3x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat3x4
	mov	eax, ecx
	ret	4
??0?$tmat3x4@M$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat3x4<float,2>::tmat3x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tmat3x4@M$01@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tmat3x4@M$01@glm@@QAE@ABU01@@Z PROC		; glm::tmat3x4<float,2>::tmat3x4<float,2>, COMDAT
; _this$ = ecx

; 197  : template struct tmat3x4<float32, lowp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	12					; 0000000cH
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tmat3x4@M$01@glm@@QAE@ABU01@@Z ENDP		; glm::tmat3x4<float,2>::tmat3x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$01@glm@@QAE@XZ
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
??0?$tmat3x4@M$01@glm@@QAE@XZ PROC			; glm::tmat3x4<float,2>::tmat3x4<float,2>, COMDAT
; _this$ = ecx

; 11   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	lea	eax, DWORD PTR [ecx+8]
	push	2
	pop	edx
$LL4@tmat3x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat3x4

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0, 0, 0);
; 14   : 				this->value[1] = col_type(0, 1, 0, 0);
; 15   : 				this->value[2] = col_type(0, 0, 1, 0);
; 16   : #			endif
; 17   : 		}

	movaps	xmm0, XMMWORD PTR __xmm@0000000000000000000000003f800000
	mov	eax, ecx
	push	esi
	push	edi
	movups	XMMWORD PTR $T3[ebp], xmm0
	lea	esi, DWORD PTR $T3[ebp]
	mov	edi, ecx
	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003f80000000000000
	movsd
	movsd
	movsd
	movsd
	movups	XMMWORD PTR $T2[ebp], xmm0
	lea	edi, DWORD PTR [ecx+16]
	movaps	xmm0, XMMWORD PTR __xmm@000000003f8000000000000000000000
	lea	esi, DWORD PTR $T2[ebp]
	movsd
	movsd
	movsd
	movsd
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+32]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$tmat3x4@M$01@glm@@QAE@XZ ENDP			; glm::tmat3x4<float,2>::tmat3x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??F?$tmat3x3@N$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat3x3@N$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tmat3x3<double,0>::operator--, COMDAT
; _this$ = ecx

; 330  : 	{

	push	ebp
	mov	ebp, esp

; 331  : 		tmat3x3<T, P> Result(*this);
; 332  : 		--*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	mov	edx, ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	movups	xmm0, XMMWORD PTR [edx]
	push	18					; 00000012H
	pop	ecx
	subpd	xmm0, xmm1
	mov	esi, edx
	mov	edi, eax
	rep movsd
	movups	XMMWORD PTR [edx], xmm0
	pop	edi
	movups	xmm0, XMMWORD PTR [edx+16]
	pop	esi
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+16], xmm0
	movups	xmm0, XMMWORD PTR [edx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+32], xmm0
	movups	xmm0, XMMWORD PTR [edx+48]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+48], xmm0
	movsd	xmm0, QWORD PTR [edx+64]
	subsd	xmm0, xmm1
	movsd	QWORD PTR [edx+64], xmm0

; 333  : 		return Result;
; 334  : 	}

	pop	ebp
	ret	8
??F?$tmat3x3@N$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tmat3x3<double,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??E?$tmat3x3@N$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat3x3@N$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tmat3x3<double,0>::operator++, COMDAT
; _this$ = ecx

; 322  : 	{

	push	ebp
	mov	ebp, esp

; 323  : 		tmat3x3<T, P> Result(*this);
; 324  : 		++*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	mov	edx, ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	movups	xmm0, XMMWORD PTR [edx]
	push	18					; 00000012H
	pop	ecx
	addpd	xmm0, xmm1
	mov	esi, edx
	mov	edi, eax
	rep movsd
	movups	XMMWORD PTR [edx], xmm0
	pop	edi
	movups	xmm0, XMMWORD PTR [edx+16]
	pop	esi
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+16], xmm0
	movups	xmm0, XMMWORD PTR [edx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+32], xmm0
	movups	xmm0, XMMWORD PTR [edx+48]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+48], xmm0
	movsd	xmm0, QWORD PTR [edx+64]
	addsd	xmm0, xmm1
	movsd	QWORD PTR [edx+64], xmm0

; 325  : 		return Result;
; 326  : 	}

	pop	ebp
	ret	8
??E?$tmat3x3@N$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tmat3x3<double,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??F?$tmat3x3@N$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat3x3@N$0A@@glm@@QAEAAU01@XZ PROC		; glm::tmat3x3<double,0>::operator--, COMDAT
; _this$ = ecx

; 314  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 315  : 		--this->value[1];
; 316  : 		--this->value[2];
; 317  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0
	movsd	xmm0, QWORD PTR [ecx+64]
	subsd	xmm0, xmm1
	movsd	QWORD PTR [ecx+64], xmm0

; 318  : 	}

	ret	0
??F?$tmat3x3@N$0A@@glm@@QAEAAU01@XZ ENDP		; glm::tmat3x3<double,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??E?$tmat3x3@N$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat3x3@N$0A@@glm@@QAEAAU01@XZ PROC		; glm::tmat3x3<double,0>::operator++, COMDAT
; _this$ = ecx

; 305  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 306  : 		++this->value[1];
; 307  : 		++this->value[2];
; 308  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0
	movsd	xmm0, QWORD PTR [ecx+64]
	addsd	xmm0, xmm1
	movsd	QWORD PTR [ecx+64], xmm0

; 309  : 	}

	ret	0
??E?$tmat3x3@N$0A@@glm@@QAEAAU01@XZ ENDP		; glm::tmat3x3<double,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tmat3x3@N$0A@@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tmat3x3@N$0A@@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tmat3x3<double,0>::operator=, COMDAT
; _this$ = ecx

; 194  : template struct tmat3x3<float64, highp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	18					; 00000012H
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tmat3x3@N$0A@@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tmat3x3<double,0>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??A?$tmat3x3@N$0A@@glm@@QBEABU?$tvec3@N$0A@@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat3x3@N$0A@@glm@@QBEABU?$tvec3@N$0A@@1@H@Z PROC	; glm::tmat3x3<double,0>::operator[], COMDAT
; _this$ = ecx

; 198  : 	{

	push	ebp
	mov	ebp, esp

; 199  : 		assert(i < this->length());
; 200  : 		return this->value[i];

	imul	eax, DWORD PTR _i$[ebp], 24
	add	eax, ecx

; 201  : 	}

	pop	ebp
	ret	4
??A?$tmat3x3@N$0A@@glm@@QBEABU?$tvec3@N$0A@@1@H@Z ENDP	; glm::tmat3x3<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??A?$tmat3x3@N$0A@@glm@@QAEAAU?$tvec3@N$0A@@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat3x3@N$0A@@glm@@QAEAAU?$tvec3@N$0A@@1@H@Z PROC	; glm::tmat3x3<double,0>::operator[], COMDAT
; _this$ = ecx

; 191  : 	{

	push	ebp
	mov	ebp, esp

; 192  : 		assert(i < this->length());
; 193  : 		return this->value[i];

	imul	eax, DWORD PTR _i$[ebp], 24
	add	eax, ecx

; 194  : 	}

	pop	ebp
	ret	4
??A?$tmat3x3@N$0A@@glm@@QAEAAU?$tvec3@N$0A@@1@H@Z ENDP	; glm::tmat3x3<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.hpp
;	COMDAT ?length@?$tmat3x3@N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat3x3@N$0A@@glm@@SAHXZ PROC			; glm::tmat3x3<double,0>::length, COMDAT

; 79   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	push	3
	pop	eax
	ret	0
?length@?$tmat3x3@N$0A@@glm@@SAHXZ ENDP			; glm::tmat3x3<double,0>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$0A@@glm@@QAE@ABU?$tmat4x3@N$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x3@N$0A@@glm@@QAE@ABU?$tmat4x3@N$0A@@1@@Z PROC ; glm::tmat3x3<double,0>::tmat3x3<double,0>, COMDAT
; _this$ = ecx

; 181  : 	{

	push	ebp
	mov	ebp, esp
	mov	edx, ecx
	xorps	xmm0, xmm0
	push	2
	pop	ecx
	lea	eax, DWORD PTR [edx+16]
$LL4@tmat3x3:
	dec	ecx
	movsd	QWORD PTR [eax], xmm0
	movups	XMMWORD PTR [eax-16], xmm0
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat3x3

; 182  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	push	6
	pop	ecx

; 183  : 		this->value[1] = m[1];

	push	6
	mov	esi, eax
	mov	edi, edx
	rep movsd
	pop	ecx
	lea	esi, DWORD PTR [eax+24]
	lea	edi, DWORD PTR [edx+24]
	rep movsd

; 184  : 		this->value[2] = m[2];

	push	6
	pop	ecx
	lea	esi, DWORD PTR [eax+48]

; 185  : 	}

	mov	eax, edx
	lea	edi, DWORD PTR [edx+48]
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tmat3x3@N$0A@@glm@@QAE@ABU?$tmat4x3@N$0A@@1@@Z ENDP ; glm::tmat3x3<double,0>::tmat3x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$0A@@glm@@QAE@ABU?$tmat3x4@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
$T3 = -24						; size = 24
_m$ = 8							; size = 4
??0?$tmat3x3@N$0A@@glm@@QAE@ABU?$tmat3x4@N$0A@@1@@Z PROC ; glm::tmat3x3<double,0>::tmat3x3<double,0>, COMDAT
; _this$ = ecx

; 173  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xorps	xmm0, xmm0
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	2
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat3x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm0
	movups	XMMWORD PTR [eax-16], xmm0
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat3x3

; 174  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T3[ebp]
	push	6
	pop	ecx
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]

; 175  : 		this->value[1] = col_type(m[1]);

	push	6
	movups	XMMWORD PTR $T3[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR $T3[ebp+16], xmm0
	rep movsd
	movups	xmm0, XMMWORD PTR [eax+32]
	pop	ecx
	lea	edi, DWORD PTR [ebx+24]
	movups	XMMWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	movsd	xmm0, QWORD PTR [eax+48]
	movsd	QWORD PTR $T2[ebp+16], xmm0
	rep movsd

; 176  : 		this->value[2] = col_type(m[2]);

	movups	xmm0, XMMWORD PTR [eax+64]
	push	6
	pop	ecx
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ebx+48]
	movsd	xmm0, QWORD PTR [eax+80]
	lea	esi, DWORD PTR $T1[ebp]
	movsd	QWORD PTR $T1[ebp+16], xmm0

; 177  : 	}

	mov	eax, ebx
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x3@N$0A@@glm@@QAE@ABU?$tmat3x4@N$0A@@1@@Z ENDP ; glm::tmat3x3<double,0>::tmat3x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$0A@@glm@@QAE@ABU?$tmat4x2@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
$T3 = -24						; size = 24
_m$ = 8							; size = 4
??0?$tmat3x3@N$0A@@glm@@QAE@ABU?$tmat4x2@N$0A@@1@@Z PROC ; glm::tmat3x3<double,0>::tmat3x3<double,0>, COMDAT
; _this$ = ecx

; 165  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xorps	xmm1, xmm1
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	2
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat3x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm1
	movups	XMMWORD PTR [eax-16], xmm1
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat3x3

; 166  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T3[ebp]
	push	6
	pop	ecx
	movsd	QWORD PTR $T3[ebp+16], xmm1
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]

; 167  : 		this->value[1] = col_type(m[1], 0);

	push	6
	movups	XMMWORD PTR $T3[ebp], xmm0
	rep movsd
	movups	xmm0, XMMWORD PTR [eax+16]
	pop	ecx
	movsd	QWORD PTR $T2[ebp+16], xmm1
	lea	edi, DWORD PTR [ebx+24]
	movups	XMMWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	rep movsd

; 168  : 		this->value[2] = col_type(m[2], 1);

	movups	xmm0, XMMWORD PTR [eax+32]
	push	6
	pop	ecx
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ebx+48]

; 169  : 	}

	mov	eax, ebx
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	lea	esi, DWORD PTR $T1[ebp]
	movsd	QWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x3@N$0A@@glm@@QAE@ABU?$tmat4x2@N$0A@@1@@Z ENDP ; glm::tmat3x3<double,0>::tmat3x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$0A@@glm@@QAE@ABU?$tmat2x4@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
$T3 = -24						; size = 24
_m$ = 8							; size = 4
??0?$tmat3x3@N$0A@@glm@@QAE@ABU?$tmat2x4@N$0A@@1@@Z PROC ; glm::tmat3x3<double,0>::tmat3x3<double,0>, COMDAT
; _this$ = ecx

; 157  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xorps	xmm0, xmm0
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	2
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat3x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm0
	movups	XMMWORD PTR [eax-16], xmm0
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat3x3

; 158  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T3[ebp]
	push	6
	pop	ecx
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]

; 159  : 		this->value[1] = col_type(m[1]);

	push	6
	movups	XMMWORD PTR $T3[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR $T3[ebp+16], xmm0
	rep movsd
	movups	xmm0, XMMWORD PTR [eax+32]
	pop	ecx
	lea	edi, DWORD PTR [ebx+24]
	movups	XMMWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	movsd	xmm0, QWORD PTR [eax+48]

; 160  : 		this->value[2] = col_type(0, 0, 1);
; 161  : 	}

	mov	eax, ebx
	movsd	QWORD PTR $T2[ebp+16], xmm0
	xorps	xmm0, xmm0
	rep movsd
	push	6
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ebx+48]
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	lea	esi, DWORD PTR $T1[ebp]
	pop	ecx
	movsd	QWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x3@N$0A@@glm@@QAE@ABU?$tmat2x4@N$0A@@1@@Z ENDP ; glm::tmat3x3<double,0>::tmat3x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$0A@@glm@@QAE@ABU?$tmat3x2@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
$T3 = -24						; size = 24
_m$ = 8							; size = 4
??0?$tmat3x3@N$0A@@glm@@QAE@ABU?$tmat3x2@N$0A@@1@@Z PROC ; glm::tmat3x3<double,0>::tmat3x3<double,0>, COMDAT
; _this$ = ecx

; 149  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xorps	xmm1, xmm1
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	2
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat3x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm1
	movups	XMMWORD PTR [eax-16], xmm1
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat3x3

; 150  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T3[ebp]
	push	6
	pop	ecx
	movsd	QWORD PTR $T3[ebp+16], xmm1
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]

; 151  : 		this->value[1] = col_type(m[1], 0);

	push	6
	movups	XMMWORD PTR $T3[ebp], xmm0
	rep movsd
	movups	xmm0, XMMWORD PTR [eax+16]
	pop	ecx
	movsd	QWORD PTR $T2[ebp+16], xmm1
	lea	edi, DWORD PTR [ebx+24]
	movups	XMMWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	rep movsd

; 152  : 		this->value[2] = col_type(m[2], 1);

	movups	xmm0, XMMWORD PTR [eax+32]
	push	6
	pop	ecx
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ebx+48]

; 153  : 	}

	mov	eax, ebx
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	lea	esi, DWORD PTR $T1[ebp]
	movsd	QWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x3@N$0A@@glm@@QAE@ABU?$tmat3x2@N$0A@@1@@Z ENDP ; glm::tmat3x3<double,0>::tmat3x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$0A@@glm@@QAE@ABU?$tmat2x3@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
_m$ = 8							; size = 4
??0?$tmat3x3@N$0A@@glm@@QAE@ABU?$tmat2x3@N$0A@@1@@Z PROC ; glm::tmat3x3<double,0>::tmat3x3<double,0>, COMDAT
; _this$ = ecx

; 141  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	edx, ecx
	xorps	xmm0, xmm0
	push	2
	pop	ecx
	lea	eax, DWORD PTR [edx+16]
$LL4@tmat3x3:
	dec	ecx
	movsd	QWORD PTR [eax], xmm0
	movups	XMMWORD PTR [eax-16], xmm0
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat3x3

; 142  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	push	esi
	push	edi
	push	6
	pop	ecx

; 143  : 		this->value[1] = m[1];

	push	6
	mov	esi, eax
	mov	edi, edx
	rep movsd
	pop	ecx
	lea	esi, DWORD PTR [eax+24]

; 144  : 		this->value[2] = col_type(0, 0, 1);
; 145  : 	}

	mov	eax, edx
	lea	edi, DWORD PTR [edx+24]
	rep movsd
	push	6
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [edx+48]
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	lea	esi, DWORD PTR $T1[ebp]
	pop	ecx
	movsd	QWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x3@N$0A@@glm@@QAE@ABU?$tmat2x3@N$0A@@1@@Z ENDP ; glm::tmat3x3<double,0>::tmat3x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$0A@@glm@@QAE@ABU?$tmat4x4@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
$T3 = -24						; size = 24
_m$ = 8							; size = 4
??0?$tmat3x3@N$0A@@glm@@QAE@ABU?$tmat4x4@N$0A@@1@@Z PROC ; glm::tmat3x3<double,0>::tmat3x3<double,0>, COMDAT
; _this$ = ecx

; 133  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xorps	xmm0, xmm0
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	2
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat3x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm0
	movups	XMMWORD PTR [eax-16], xmm0
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat3x3

; 134  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T3[ebp]
	push	6
	pop	ecx
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]

; 135  : 		this->value[1] = col_type(m[1]);

	push	6
	movups	XMMWORD PTR $T3[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR $T3[ebp+16], xmm0
	rep movsd
	movups	xmm0, XMMWORD PTR [eax+32]
	pop	ecx
	lea	edi, DWORD PTR [ebx+24]
	movups	XMMWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	movsd	xmm0, QWORD PTR [eax+48]
	movsd	QWORD PTR $T2[ebp+16], xmm0
	rep movsd

; 136  : 		this->value[2] = col_type(m[2]);

	movups	xmm0, XMMWORD PTR [eax+64]
	push	6
	pop	ecx
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ebx+48]
	movsd	xmm0, QWORD PTR [eax+80]
	lea	esi, DWORD PTR $T1[ebp]
	movsd	QWORD PTR $T1[ebp+16], xmm0

; 137  : 	}

	mov	eax, ebx
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x3@N$0A@@glm@@QAE@ABU?$tmat4x4@N$0A@@1@@Z ENDP ; glm::tmat3x3<double,0>::tmat3x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$0A@@glm@@QAE@ABU?$tmat2x2@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
$T3 = -24						; size = 24
_m$ = 8							; size = 4
??0?$tmat3x3@N$0A@@glm@@QAE@ABU?$tmat2x2@N$0A@@1@@Z PROC ; glm::tmat3x3<double,0>::tmat3x3<double,0>, COMDAT
; _this$ = ecx

; 125  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xorps	xmm1, xmm1
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	2
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat3x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm1
	movups	XMMWORD PTR [eax-16], xmm1
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat3x3

; 126  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T3[ebp]
	push	6
	pop	ecx
	movsd	QWORD PTR $T3[ebp+16], xmm1
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]

; 127  : 		this->value[1] = col_type(m[1], 0);

	push	6
	movups	XMMWORD PTR $T3[ebp], xmm0
	rep movsd
	movups	xmm0, XMMWORD PTR [eax+16]
	pop	ecx
	movsd	QWORD PTR $T2[ebp+16], xmm1
	lea	edi, DWORD PTR [ebx+24]
	movups	XMMWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]

; 128  : 		this->value[2] = col_type(0, 0, 1);
; 129  : 	}

	mov	eax, ebx
	xorps	xmm0, xmm0
	rep movsd
	push	6
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ebx+48]
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	lea	esi, DWORD PTR $T1[ebp]
	pop	ecx
	movsd	QWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x3@N$0A@@glm@@QAE@ABU?$tmat2x2@N$0A@@1@@Z ENDP ; glm::tmat3x3<double,0>::tmat3x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$0A@@glm@@QAE@ABU?$tvec3@N$0A@@1@00@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??0?$tmat3x3@N$0A@@glm@@QAE@ABU?$tvec3@N$0A@@1@00@Z PROC ; glm::tmat3x3<double,0>::tmat3x3<double,0>, COMDAT
; _this$ = ecx

; 73   : 	{

	push	ebp
	mov	ebp, esp
	mov	edx, ecx
	xorps	xmm0, xmm0
	push	2
	pop	ecx
	lea	eax, DWORD PTR [edx+16]
$LL4@tmat3x3:
	dec	ecx
	movsd	QWORD PTR [eax], xmm0
	movups	XMMWORD PTR [eax-16], xmm0
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat3x3

; 74   : 		this->value[0] = v0;

	push	esi
	mov	esi, DWORD PTR _v0$[ebp]

; 75   : 		this->value[1] = v1;
; 76   : 		this->value[2] = v2;
; 77   : 	}

	mov	eax, edx
	push	edi
	push	6
	pop	ecx
	push	6
	mov	edi, edx
	rep movsd
	mov	esi, DWORD PTR _v1$[ebp]
	lea	edi, DWORD PTR [edx+24]
	pop	ecx
	rep movsd
	mov	esi, DWORD PTR _v2$[ebp]
	lea	edi, DWORD PTR [edx+48]
	push	6
	pop	ecx
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	12					; 0000000cH
??0?$tmat3x3@N$0A@@glm@@QAE@ABU?$tvec3@N$0A@@1@00@Z ENDP ; glm::tmat3x3<double,0>::tmat3x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$0A@@glm@@QAE@NNNNNNNNN@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
$T3 = -24						; size = 24
_x0$ = 8						; size = 8
_y0$ = 16						; size = 8
_z0$ = 24						; size = 8
_x1$ = 32						; size = 8
_y1$ = 40						; size = 8
_z1$ = 48						; size = 8
_x2$ = 56						; size = 8
_y2$ = 64						; size = 8
_z2$ = 72						; size = 8
??0?$tmat3x3@N$0A@@glm@@QAE@NNNNNNNNN@Z PROC		; glm::tmat3x3<double,0>::tmat3x3<double,0>, COMDAT
; _this$ = ecx

; 60   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xorps	xmm0, xmm0
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	2
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat3x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm0
	movups	XMMWORD PTR [eax-16], xmm0
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat3x3

; 61   : 		this->value[0] = col_type(x0, y0, z0);

	movsd	xmm0, QWORD PTR _x0$[ebp]
	lea	esi, DWORD PTR $T3[ebp]
	movsd	QWORD PTR $T3[ebp], xmm0
	mov	edi, ebx
	movsd	xmm0, QWORD PTR _y0$[ebp]

; 62   : 		this->value[1] = col_type(x1, y1, z1);
; 63   : 		this->value[2] = col_type(x2, y2, z2);
; 64   : 	}

	mov	eax, ebx
	movsd	QWORD PTR $T3[ebp+8], xmm0
	movsd	xmm0, QWORD PTR _z0$[ebp]
	movsd	QWORD PTR $T3[ebp+16], xmm0
	movsd	xmm0, QWORD PTR _x1$[ebp]
	push	6
	pop	ecx
	rep movsd
	movsd	QWORD PTR $T2[ebp], xmm0
	lea	edi, DWORD PTR [ebx+24]
	movsd	xmm0, QWORD PTR _y1$[ebp]
	lea	esi, DWORD PTR $T2[ebp]
	movsd	QWORD PTR $T2[ebp+8], xmm0
	movsd	xmm0, QWORD PTR _z1$[ebp]
	push	6
	movsd	QWORD PTR $T2[ebp+16], xmm0
	movsd	xmm0, QWORD PTR _x2$[ebp]
	pop	ecx
	rep movsd
	movsd	QWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ebx+48]
	movsd	xmm0, QWORD PTR _y2$[ebp]
	lea	esi, DWORD PTR $T1[ebp]
	push	6
	movsd	QWORD PTR $T1[ebp+8], xmm0
	movsd	xmm0, QWORD PTR _z2$[ebp]
	pop	ecx
	movsd	QWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	72					; 00000048H
??0?$tmat3x3@N$0A@@glm@@QAE@NNNNNNNNN@Z ENDP		; glm::tmat3x3<double,0>::tmat3x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$0A@@glm@@QAE@N@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
$T3 = -24						; size = 24
_scalar$ = 8						; size = 8
??0?$tmat3x3@N$0A@@glm@@QAE@N@Z PROC			; glm::tmat3x3<double,0>::tmat3x3<double,0>, COMDAT
; _this$ = ecx

; 47   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xorps	xmm2, xmm2
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	2
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat3x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm2
	movups	XMMWORD PTR [eax-16], xmm2
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat3x3

; 48   : 		this->value[0] = col_type(scalar, 0, 0);

	movsd	xmm1, QWORD PTR _scalar$[ebp]
	lea	esi, DWORD PTR $T3[ebp]
	push	6
	pop	ecx
	movsd	QWORD PTR $T3[ebp], xmm1
	xorps	xmm0, xmm0
	movupd	XMMWORD PTR $T3[ebp+8], xmm0

; 49   : 		this->value[1] = col_type(0, scalar, 0);

	push	6
	mov	edi, ebx

; 50   : 		this->value[2] = col_type(0, 0, scalar);
; 51   : 	}

	mov	eax, ebx
	rep movsd
	pop	ecx
	movsd	QWORD PTR $T2[ebp], xmm2
	lea	edi, DWORD PTR [ebx+24]
	movsd	QWORD PTR $T2[ebp+8], xmm1
	lea	esi, DWORD PTR $T2[ebp]
	movsd	QWORD PTR $T2[ebp+16], xmm2
	rep movsd
	push	6
	pop	ecx
	lea	edi, DWORD PTR [ebx+48]
	movsd	QWORD PTR $T1[ebp+16], xmm1
	lea	esi, DWORD PTR $T1[ebp]
	movupd	XMMWORD PTR $T1[ebp], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$tmat3x3@N$0A@@glm@@QAE@N@Z ENDP			; glm::tmat3x3<double,0>::tmat3x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat3x3@N$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat3x3<double,0>::tmat3x3<double,0>, COMDAT
; _this$ = ecx

; 43   : 	{}

	push	2
	pop	edx
	lea	eax, DWORD PTR [ecx+16]
	xorps	xmm0, xmm0
$LL4@tmat3x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm0
	movups	XMMWORD PTR [eax-16], xmm0
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat3x3
	mov	eax, ecx
	ret	4
??0?$tmat3x3@N$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat3x3<double,0>::tmat3x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tmat3x3@N$0A@@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tmat3x3@N$0A@@glm@@QAE@ABU01@@Z PROC		; glm::tmat3x3<double,0>::tmat3x3<double,0>, COMDAT
; _this$ = ecx

; 194  : template struct tmat3x3<float64, highp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	18					; 00000012H
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tmat3x3@N$0A@@glm@@QAE@ABU01@@Z ENDP		; glm::tmat3x3<double,0>::tmat3x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
$T3 = -24						; size = 24
??0?$tmat3x3@N$0A@@glm@@QAE@XZ PROC			; glm::tmat3x3<double,0>::tmat3x3<double,0>, COMDAT
; _this$ = ecx

; 13   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xorps	xmm1, xmm1
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	2
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat3x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm1
	movups	XMMWORD PTR [eax-16], xmm1
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat3x3

; 14   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 15   : 				this->value[0] = col_type(1, 0, 0);

	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	lea	esi, DWORD PTR $T3[ebp]
	push	6
	pop	ecx
	movupd	XMMWORD PTR $T3[ebp], xmm0
	mov	edi, ebx

; 16   : 				this->value[1] = col_type(0, 1, 0);
; 17   : 				this->value[2] = col_type(0, 0, 1);
; 18   : #			endif
; 19   : 		}

	mov	eax, ebx
	movaps	xmm0, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	push	6
	movsd	QWORD PTR $T3[ebp+16], xmm1
	rep movsd
	pop	ecx
	movupd	XMMWORD PTR $T2[ebp], xmm0
	lea	edi, DWORD PTR [ebx+24]
	movsd	QWORD PTR $T2[ebp+16], xmm1
	lea	esi, DWORD PTR $T2[ebp]
	rep movsd
	xorps	xmm0, xmm0
	lea	edi, DWORD PTR [ebx+48]
	push	6
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	pop	ecx
	movsd	QWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$tmat3x3@N$0A@@glm@@QAE@XZ ENDP			; glm::tmat3x3<double,0>::tmat3x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??F?$tmat3x3@M$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat3x3@M$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tmat3x3<float,0>::operator--, COMDAT
; _this$ = ecx

; 330  : 	{

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi

; 331  : 		tmat3x3<T, P> Result(*this);

	mov	edi, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, ecx
	push	9
	pop	ecx
	mov	esi, eax
	rep movsd

; 332  : 		--*this;

	mov	ecx, eax
	call	??F?$tmat3x3@M$0A@@glm@@QAEAAU01@XZ	; glm::tmat3x3<float,0>::operator--

; 333  : 		return Result;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi

; 334  : 	}

	pop	ebp
	ret	8
??F?$tmat3x3@M$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tmat3x3<float,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??E?$tmat3x3@M$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat3x3@M$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tmat3x3<float,0>::operator++, COMDAT
; _this$ = ecx

; 322  : 	{

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi

; 323  : 		tmat3x3<T, P> Result(*this);

	mov	edi, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, ecx
	push	9
	pop	ecx
	mov	esi, eax
	rep movsd

; 324  : 		++*this;

	mov	ecx, eax
	call	??E?$tmat3x3@M$0A@@glm@@QAEAAU01@XZ	; glm::tmat3x3<float,0>::operator++

; 325  : 		return Result;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi

; 326  : 	}

	pop	ebp
	ret	8
??E?$tmat3x3@M$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tmat3x3<float,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??F?$tmat3x3@M$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat3x3@M$0A@@glm@@QAEAAU01@XZ PROC		; glm::tmat3x3<float,0>::operator--, COMDAT
; _this$ = ecx

; 314  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 315  : 		--this->value[1];
; 316  : 		--this->value[2];
; 317  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movss	xmm0, DWORD PTR [ecx+32]
	subss	xmm0, xmm1
	movss	DWORD PTR [ecx+32], xmm0

; 318  : 	}

	ret	0
??F?$tmat3x3@M$0A@@glm@@QAEAAU01@XZ ENDP		; glm::tmat3x3<float,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??E?$tmat3x3@M$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat3x3@M$0A@@glm@@QAEAAU01@XZ PROC		; glm::tmat3x3<float,0>::operator++, COMDAT
; _this$ = ecx

; 305  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 306  : 		++this->value[1];
; 307  : 		++this->value[2];
; 308  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movss	xmm0, DWORD PTR [ecx+32]
	addss	xmm0, xmm1
	movss	DWORD PTR [ecx+32], xmm0

; 309  : 	}

	ret	0
??E?$tmat3x3@M$0A@@glm@@QAEAAU01@XZ ENDP		; glm::tmat3x3<float,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tmat3x3@M$0A@@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tmat3x3@M$0A@@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tmat3x3<float,0>::operator=, COMDAT
; _this$ = ecx

; 193  : template struct tmat3x3<float32, highp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	9
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tmat3x3@M$0A@@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tmat3x3<float,0>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??A?$tmat3x3@M$0A@@glm@@QBEABU?$tvec3@M$0A@@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat3x3@M$0A@@glm@@QBEABU?$tvec3@M$0A@@1@H@Z PROC	; glm::tmat3x3<float,0>::operator[], COMDAT
; _this$ = ecx

; 198  : 	{

	push	ebp
	mov	ebp, esp

; 199  : 		assert(i < this->length());
; 200  : 		return this->value[i];

	imul	eax, DWORD PTR _i$[ebp], 12
	add	eax, ecx

; 201  : 	}

	pop	ebp
	ret	4
??A?$tmat3x3@M$0A@@glm@@QBEABU?$tvec3@M$0A@@1@H@Z ENDP	; glm::tmat3x3<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??A?$tmat3x3@M$0A@@glm@@QAEAAU?$tvec3@M$0A@@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat3x3@M$0A@@glm@@QAEAAU?$tvec3@M$0A@@1@H@Z PROC	; glm::tmat3x3<float,0>::operator[], COMDAT
; _this$ = ecx

; 191  : 	{

	push	ebp
	mov	ebp, esp

; 192  : 		assert(i < this->length());
; 193  : 		return this->value[i];

	imul	eax, DWORD PTR _i$[ebp], 12
	add	eax, ecx

; 194  : 	}

	pop	ebp
	ret	4
??A?$tmat3x3@M$0A@@glm@@QAEAAU?$tvec3@M$0A@@1@H@Z ENDP	; glm::tmat3x3<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.hpp
;	COMDAT ?length@?$tmat3x3@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat3x3@M$0A@@glm@@SAHXZ PROC			; glm::tmat3x3<float,0>::length, COMDAT

; 79   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	push	3
	pop	eax
	ret	0
?length@?$tmat3x3@M$0A@@glm@@SAHXZ ENDP			; glm::tmat3x3<float,0>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$0A@@glm@@QAE@ABU?$tmat4x3@M$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x3@M$0A@@glm@@QAE@ABU?$tmat4x3@M$0A@@1@@Z PROC ; glm::tmat3x3<float,0>::tmat3x3<float,0>, COMDAT
; _this$ = ecx

; 181  : 	{

	push	ebp
	mov	ebp, esp
	push	2
	pop	edx
	lea	eax, DWORD PTR [ecx+8]
$LL4@tmat3x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat3x3

; 182  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	esi, eax
	mov	edi, ecx
	movsd
	movsd
	movsd

; 183  : 		this->value[1] = m[1];

	lea	esi, DWORD PTR [eax+12]
	lea	edi, DWORD PTR [ecx+12]
	movsd
	movsd
	movsd

; 184  : 		this->value[2] = m[2];

	lea	esi, DWORD PTR [eax+24]

; 185  : 	}

	mov	eax, ecx
	lea	edi, DWORD PTR [ecx+24]
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tmat3x3@M$0A@@glm@@QAE@ABU?$tmat4x3@M$0A@@1@@Z ENDP ; glm::tmat3x3<float,0>::tmat3x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$0A@@glm@@QAE@ABU?$tmat3x4@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat3x3@M$0A@@glm@@QAE@ABU?$tmat3x4@M$0A@@1@@Z PROC ; glm::tmat3x3<float,0>::tmat3x3<float,0>, COMDAT
; _this$ = ecx

; 173  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	lea	eax, DWORD PTR [ecx+8]
	push	2
	pop	edx
$LL4@tmat3x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat3x3

; 174  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T3[ebp]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T3[ebp+8], xmm0
	movsd
	movsd
	movsd

; 175  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [eax+16]
	lea	edi, DWORD PTR [ecx+12]
	movss	DWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+24]
	movss	DWORD PTR $T2[ebp+8], xmm0
	movsd
	movsd
	movsd

; 176  : 		this->value[2] = col_type(m[2]);

	movss	xmm0, DWORD PTR [eax+32]
	lea	edi, DWORD PTR [ecx+24]
	movss	DWORD PTR $T1[ebp], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	movss	xmm0, DWORD PTR [eax+36]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+40]

; 177  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+8], xmm0
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x3@M$0A@@glm@@QAE@ABU?$tmat3x4@M$0A@@1@@Z ENDP ; glm::tmat3x3<float,0>::tmat3x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$0A@@glm@@QAE@ABU?$tmat4x2@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat3x3@M$0A@@glm@@QAE@ABU?$tmat4x2@M$0A@@1@@Z PROC ; glm::tmat3x3<float,0>::tmat3x3<float,0>, COMDAT
; _this$ = ecx

; 165  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	lea	eax, DWORD PTR [ecx+8]
	push	2
	pop	edx
$LL4@tmat3x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat3x3

; 166  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	and	DWORD PTR $T3[ebp+8], 0
	push	esi
	push	edi
	movss	xmm0, DWORD PTR [eax]
	lea	esi, DWORD PTR $T3[ebp]
	movss	DWORD PTR $T3[ebp], xmm0
	mov	edi, ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movsd
	movsd
	movsd

; 167  : 		this->value[1] = col_type(m[1], 0);

	movss	xmm0, DWORD PTR [eax+8]
	lea	edi, DWORD PTR [ecx+12]
	and	DWORD PTR $T2[ebp+8], 0
	lea	esi, DWORD PTR $T2[ebp]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movsd
	movsd
	movsd

; 168  : 		this->value[2] = col_type(m[2], 1);

	movss	xmm0, DWORD PTR [eax+16]
	lea	edi, DWORD PTR [ecx+24]
	movss	DWORD PTR $T1[ebp], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	movss	xmm0, DWORD PTR [eax+20]

; 169  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	DWORD PTR $T1[ebp+8], 1065353216	; 3f800000H
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x3@M$0A@@glm@@QAE@ABU?$tmat4x2@M$0A@@1@@Z ENDP ; glm::tmat3x3<float,0>::tmat3x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$0A@@glm@@QAE@ABU?$tmat2x4@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat3x3@M$0A@@glm@@QAE@ABU?$tmat2x4@M$0A@@1@@Z PROC ; glm::tmat3x3<float,0>::tmat3x3<float,0>, COMDAT
; _this$ = ecx

; 157  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	lea	eax, DWORD PTR [ecx+8]
	push	2
	pop	edx
$LL4@tmat3x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat3x3

; 158  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T3[ebp]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T3[ebp+8], xmm0
	movsd
	movsd
	movsd

; 159  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [eax+16]
	lea	edi, DWORD PTR [ecx+12]
	movss	DWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+24]

; 160  : 		this->value[2] = col_type(0, 0, 1);
; 161  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T2[ebp+8], xmm0
	movsd
	movsd
	movsd
	and	DWORD PTR $T1[ebp], 0
	lea	edi, DWORD PTR [ecx+24]
	and	DWORD PTR $T1[ebp+4], 0
	lea	esi, DWORD PTR $T1[ebp]
	mov	DWORD PTR $T1[ebp+8], 1065353216	; 3f800000H
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x3@M$0A@@glm@@QAE@ABU?$tmat2x4@M$0A@@1@@Z ENDP ; glm::tmat3x3<float,0>::tmat3x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$0A@@glm@@QAE@ABU?$tmat3x2@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat3x3@M$0A@@glm@@QAE@ABU?$tmat3x2@M$0A@@1@@Z PROC ; glm::tmat3x3<float,0>::tmat3x3<float,0>, COMDAT
; _this$ = ecx

; 149  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	lea	eax, DWORD PTR [ecx+8]
	push	2
	pop	edx
$LL4@tmat3x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat3x3

; 150  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	and	DWORD PTR $T3[ebp+8], 0
	push	esi
	push	edi
	movss	xmm0, DWORD PTR [eax]
	lea	esi, DWORD PTR $T3[ebp]
	movss	DWORD PTR $T3[ebp], xmm0
	mov	edi, ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movsd
	movsd
	movsd

; 151  : 		this->value[1] = col_type(m[1], 0);

	movss	xmm0, DWORD PTR [eax+8]
	lea	edi, DWORD PTR [ecx+12]
	and	DWORD PTR $T2[ebp+8], 0
	lea	esi, DWORD PTR $T2[ebp]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movsd
	movsd
	movsd

; 152  : 		this->value[2] = col_type(m[2], 1);

	movss	xmm0, DWORD PTR [eax+16]
	lea	edi, DWORD PTR [ecx+24]
	movss	DWORD PTR $T1[ebp], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	movss	xmm0, DWORD PTR [eax+20]

; 153  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	DWORD PTR $T1[ebp+8], 1065353216	; 3f800000H
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x3@M$0A@@glm@@QAE@ABU?$tmat3x2@M$0A@@1@@Z ENDP ; glm::tmat3x3<float,0>::tmat3x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$0A@@glm@@QAE@ABU?$tmat2x3@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat3x3@M$0A@@glm@@QAE@ABU?$tmat2x3@M$0A@@1@@Z PROC ; glm::tmat3x3<float,0>::tmat3x3<float,0>, COMDAT
; _this$ = ecx

; 141  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	lea	eax, DWORD PTR [ecx+8]
	push	2
	pop	edx
$LL4@tmat3x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat3x3

; 142  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi

; 143  : 		this->value[1] = m[1];
; 144  : 		this->value[2] = col_type(0, 0, 1);

	and	DWORD PTR $T1[ebp], 0
	mov	esi, eax
	and	DWORD PTR $T1[ebp+4], 0
	mov	edi, ecx
	mov	DWORD PTR $T1[ebp+8], 1065353216	; 3f800000H
	movsd
	movsd
	movsd
	lea	esi, DWORD PTR [eax+12]

; 145  : 	}

	mov	eax, ecx
	lea	edi, DWORD PTR [ecx+12]
	movsd
	movsd
	movsd
	lea	edi, DWORD PTR [ecx+24]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x3@M$0A@@glm@@QAE@ABU?$tmat2x3@M$0A@@1@@Z ENDP ; glm::tmat3x3<float,0>::tmat3x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$0A@@glm@@QAE@ABU?$tmat4x4@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat3x3@M$0A@@glm@@QAE@ABU?$tmat4x4@M$0A@@1@@Z PROC ; glm::tmat3x3<float,0>::tmat3x3<float,0>, COMDAT
; _this$ = ecx

; 133  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	lea	eax, DWORD PTR [ecx+8]
	push	2
	pop	edx
$LL4@tmat3x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat3x3

; 134  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T3[ebp]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T3[ebp+8], xmm0
	movsd
	movsd
	movsd

; 135  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [eax+16]
	lea	edi, DWORD PTR [ecx+12]
	movss	DWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+24]
	movss	DWORD PTR $T2[ebp+8], xmm0
	movsd
	movsd
	movsd

; 136  : 		this->value[2] = col_type(m[2]);

	movss	xmm0, DWORD PTR [eax+32]
	lea	edi, DWORD PTR [ecx+24]
	movss	DWORD PTR $T1[ebp], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	movss	xmm0, DWORD PTR [eax+36]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+40]

; 137  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+8], xmm0
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x3@M$0A@@glm@@QAE@ABU?$tmat4x4@M$0A@@1@@Z ENDP ; glm::tmat3x3<float,0>::tmat3x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$0A@@glm@@QAE@ABU?$tmat2x2@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat3x3@M$0A@@glm@@QAE@ABU?$tmat2x2@M$0A@@1@@Z PROC ; glm::tmat3x3<float,0>::tmat3x3<float,0>, COMDAT
; _this$ = ecx

; 125  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	lea	eax, DWORD PTR [ecx+8]
	push	2
	pop	edx
$LL4@tmat3x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat3x3

; 126  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	and	DWORD PTR $T3[ebp+8], 0
	push	esi
	push	edi
	movss	xmm0, DWORD PTR [eax]
	lea	esi, DWORD PTR $T3[ebp]
	movss	DWORD PTR $T3[ebp], xmm0
	mov	edi, ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movsd
	movsd
	movsd

; 127  : 		this->value[1] = col_type(m[1], 0);

	movss	xmm0, DWORD PTR [eax+8]
	lea	edi, DWORD PTR [ecx+12]
	and	DWORD PTR $T2[ebp+8], 0
	lea	esi, DWORD PTR $T2[ebp]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+12]

; 128  : 		this->value[2] = col_type(0, 0, 1);
; 129  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T2[ebp+4], xmm0
	movsd
	movsd
	movsd
	and	DWORD PTR $T1[ebp], 0
	lea	edi, DWORD PTR [ecx+24]
	and	DWORD PTR $T1[ebp+4], 0
	lea	esi, DWORD PTR $T1[ebp]
	mov	DWORD PTR $T1[ebp+8], 1065353216	; 3f800000H
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x3@M$0A@@glm@@QAE@ABU?$tmat2x2@M$0A@@1@@Z ENDP ; glm::tmat3x3<float,0>::tmat3x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$0A@@glm@@QAE@ABU?$tvec3@M$0A@@1@00@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??0?$tmat3x3@M$0A@@glm@@QAE@ABU?$tvec3@M$0A@@1@00@Z PROC ; glm::tmat3x3<float,0>::tmat3x3<float,0>, COMDAT
; _this$ = ecx

; 73   : 	{

	push	ebp
	mov	ebp, esp
	push	2
	pop	edx
	lea	eax, DWORD PTR [ecx+8]
$LL4@tmat3x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat3x3

; 74   : 		this->value[0] = v0;

	push	esi
	mov	esi, DWORD PTR _v0$[ebp]

; 75   : 		this->value[1] = v1;
; 76   : 		this->value[2] = v2;
; 77   : 	}

	mov	eax, ecx
	push	edi
	mov	edi, ecx
	movsd
	movsd
	movsd
	mov	esi, DWORD PTR _v1$[ebp]
	lea	edi, DWORD PTR [ecx+12]
	movsd
	movsd
	movsd
	mov	esi, DWORD PTR _v2$[ebp]
	lea	edi, DWORD PTR [ecx+24]
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	12					; 0000000cH
??0?$tmat3x3@M$0A@@glm@@QAE@ABU?$tvec3@M$0A@@1@00@Z ENDP ; glm::tmat3x3<float,0>::tmat3x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$0A@@glm@@QAE@MMMMMMMMM@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_z0$ = 16						; size = 4
_x1$ = 20						; size = 4
_y1$ = 24						; size = 4
_z1$ = 28						; size = 4
_x2$ = 32						; size = 4
_y2$ = 36						; size = 4
_z2$ = 40						; size = 4
??0?$tmat3x3@M$0A@@glm@@QAE@MMMMMMMMM@Z PROC		; glm::tmat3x3<float,0>::tmat3x3<float,0>, COMDAT
; _this$ = ecx

; 60   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	lea	eax, DWORD PTR [ecx+8]
	push	2
	pop	edx
$LL4@tmat3x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat3x3

; 61   : 		this->value[0] = col_type(x0, y0, z0);

	movss	xmm0, DWORD PTR _x0$[ebp]

; 62   : 		this->value[1] = col_type(x1, y1, z1);
; 63   : 		this->value[2] = col_type(x2, y2, z2);
; 64   : 	}

	mov	eax, ecx
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR _y0$[ebp]
	push	esi
	movss	DWORD PTR $T3[ebp+4], xmm0
	lea	esi, DWORD PTR $T3[ebp]
	movss	xmm0, DWORD PTR _z0$[ebp]
	push	edi
	movss	DWORD PTR $T3[ebp+8], xmm0
	mov	edi, ecx
	movss	xmm0, DWORD PTR _x1$[ebp]
	movsd
	movsd
	movsd
	movss	DWORD PTR $T2[ebp], xmm0
	lea	edi, DWORD PTR [ecx+12]
	movss	xmm0, DWORD PTR _y1$[ebp]
	lea	esi, DWORD PTR $T2[ebp]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR _z1$[ebp]
	movss	DWORD PTR $T2[ebp+8], xmm0
	movss	xmm0, DWORD PTR _x2$[ebp]
	movsd
	movsd
	movsd
	movss	DWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+24]
	movss	xmm0, DWORD PTR _y2$[ebp]
	lea	esi, DWORD PTR $T1[ebp]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR _z2$[ebp]
	movss	DWORD PTR $T1[ebp+8], xmm0
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	36					; 00000024H
??0?$tmat3x3@M$0A@@glm@@QAE@MMMMMMMMM@Z ENDP		; glm::tmat3x3<float,0>::tmat3x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$0A@@glm@@QAE@M@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
_scalar$ = 8						; size = 4
??0?$tmat3x3@M$0A@@glm@@QAE@M@Z PROC			; glm::tmat3x3<float,0>::tmat3x3<float,0>, COMDAT
; _this$ = ecx

; 47   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	lea	eax, DWORD PTR [ecx+8]
	push	2
	pop	edx
$LL4@tmat3x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat3x3

; 48   : 		this->value[0] = col_type(scalar, 0, 0);

	and	DWORD PTR $T3[ebp+8], 0

; 49   : 		this->value[1] = col_type(0, scalar, 0);
; 50   : 		this->value[2] = col_type(0, 0, scalar);
; 51   : 	}

	mov	eax, ecx
	and	DWORD PTR $T3[ebp+4], 0
	movss	xmm0, DWORD PTR _scalar$[ebp]
	push	esi
	push	edi
	movss	DWORD PTR $T3[ebp], xmm0
	lea	esi, DWORD PTR $T3[ebp]
	mov	edi, ecx
	movsd
	movsd
	movsd
	and	DWORD PTR $T2[ebp], 0
	lea	edi, DWORD PTR [ecx+12]
	and	DWORD PTR $T2[ebp+8], 0
	lea	esi, DWORD PTR $T2[ebp]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movsd
	movsd
	movsd
	and	DWORD PTR $T1[ebp], 0
	lea	edi, DWORD PTR [ecx+24]
	and	DWORD PTR $T1[ebp+4], 0
	lea	esi, DWORD PTR $T1[ebp]
	movss	DWORD PTR $T1[ebp+8], xmm0
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x3@M$0A@@glm@@QAE@M@Z ENDP			; glm::tmat3x3<float,0>::tmat3x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat3x3@M$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat3x3<float,0>::tmat3x3<float,0>, COMDAT
; _this$ = ecx

; 43   : 	{}

	push	2
	pop	edx
	lea	eax, DWORD PTR [ecx+8]
$LL4@tmat3x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat3x3
	mov	eax, ecx
	ret	4
??0?$tmat3x3@M$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat3x3<float,0>::tmat3x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tmat3x3@M$0A@@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tmat3x3@M$0A@@glm@@QAE@ABU01@@Z PROC		; glm::tmat3x3<float,0>::tmat3x3<float,0>, COMDAT
; _this$ = ecx

; 193  : template struct tmat3x3<float32, highp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	9
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tmat3x3@M$0A@@glm@@QAE@ABU01@@Z ENDP		; glm::tmat3x3<float,0>::tmat3x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
??0?$tmat3x3@M$0A@@glm@@QAE@XZ PROC			; glm::tmat3x3<float,0>::tmat3x3<float,0>, COMDAT
; _this$ = ecx

; 13   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	lea	eax, DWORD PTR [ecx+8]
	push	2
	pop	edx
$LL4@tmat3x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat3x3

; 14   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 15   : 				this->value[0] = col_type(1, 0, 0);

	and	DWORD PTR $T3[ebp+8], 0

; 16   : 				this->value[1] = col_type(0, 1, 0);
; 17   : 				this->value[2] = col_type(0, 0, 1);
; 18   : #			endif
; 19   : 		}

	mov	eax, ecx
	and	DWORD PTR $T3[ebp+4], 0
	push	esi
	push	edi
	mov	DWORD PTR $T3[ebp], 1065353216		; 3f800000H
	lea	esi, DWORD PTR $T3[ebp]
	mov	edi, ecx
	movsd
	movsd
	movsd
	and	DWORD PTR $T2[ebp], 0
	lea	edi, DWORD PTR [ecx+12]
	and	DWORD PTR $T2[ebp+8], 0
	lea	esi, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T2[ebp+4], 1065353216	; 3f800000H
	movsd
	movsd
	movsd
	and	DWORD PTR $T1[ebp], 0
	lea	edi, DWORD PTR [ecx+24]
	and	DWORD PTR $T1[ebp+4], 0
	lea	esi, DWORD PTR $T1[ebp]
	mov	DWORD PTR $T1[ebp+8], 1065353216	; 3f800000H
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$tmat3x3@M$0A@@glm@@QAE@XZ ENDP			; glm::tmat3x3<float,0>::tmat3x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??F?$tmat3x3@N$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat3x3@N$00@glm@@QAE?AU01@H@Z PROC		; glm::tmat3x3<double,1>::operator--, COMDAT
; _this$ = ecx

; 330  : 	{

	push	ebp
	mov	ebp, esp

; 331  : 		tmat3x3<T, P> Result(*this);
; 332  : 		--*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	mov	edx, ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	movups	xmm0, XMMWORD PTR [edx]
	push	18					; 00000012H
	pop	ecx
	subpd	xmm0, xmm1
	mov	esi, edx
	mov	edi, eax
	rep movsd
	movups	XMMWORD PTR [edx], xmm0
	pop	edi
	movups	xmm0, XMMWORD PTR [edx+16]
	pop	esi
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+16], xmm0
	movups	xmm0, XMMWORD PTR [edx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+32], xmm0
	movups	xmm0, XMMWORD PTR [edx+48]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+48], xmm0
	movsd	xmm0, QWORD PTR [edx+64]
	subsd	xmm0, xmm1
	movsd	QWORD PTR [edx+64], xmm0

; 333  : 		return Result;
; 334  : 	}

	pop	ebp
	ret	8
??F?$tmat3x3@N$00@glm@@QAE?AU01@H@Z ENDP		; glm::tmat3x3<double,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??E?$tmat3x3@N$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat3x3@N$00@glm@@QAE?AU01@H@Z PROC		; glm::tmat3x3<double,1>::operator++, COMDAT
; _this$ = ecx

; 322  : 	{

	push	ebp
	mov	ebp, esp

; 323  : 		tmat3x3<T, P> Result(*this);
; 324  : 		++*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	mov	edx, ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	movups	xmm0, XMMWORD PTR [edx]
	push	18					; 00000012H
	pop	ecx
	addpd	xmm0, xmm1
	mov	esi, edx
	mov	edi, eax
	rep movsd
	movups	XMMWORD PTR [edx], xmm0
	pop	edi
	movups	xmm0, XMMWORD PTR [edx+16]
	pop	esi
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+16], xmm0
	movups	xmm0, XMMWORD PTR [edx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+32], xmm0
	movups	xmm0, XMMWORD PTR [edx+48]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+48], xmm0
	movsd	xmm0, QWORD PTR [edx+64]
	addsd	xmm0, xmm1
	movsd	QWORD PTR [edx+64], xmm0

; 325  : 		return Result;
; 326  : 	}

	pop	ebp
	ret	8
??E?$tmat3x3@N$00@glm@@QAE?AU01@H@Z ENDP		; glm::tmat3x3<double,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??F?$tmat3x3@N$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat3x3@N$00@glm@@QAEAAU01@XZ PROC			; glm::tmat3x3<double,1>::operator--, COMDAT
; _this$ = ecx

; 314  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 315  : 		--this->value[1];
; 316  : 		--this->value[2];
; 317  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0
	movsd	xmm0, QWORD PTR [ecx+64]
	subsd	xmm0, xmm1
	movsd	QWORD PTR [ecx+64], xmm0

; 318  : 	}

	ret	0
??F?$tmat3x3@N$00@glm@@QAEAAU01@XZ ENDP			; glm::tmat3x3<double,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??E?$tmat3x3@N$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat3x3@N$00@glm@@QAEAAU01@XZ PROC			; glm::tmat3x3<double,1>::operator++, COMDAT
; _this$ = ecx

; 305  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 306  : 		++this->value[1];
; 307  : 		++this->value[2];
; 308  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0
	movsd	xmm0, QWORD PTR [ecx+64]
	addsd	xmm0, xmm1
	movsd	QWORD PTR [ecx+64], xmm0

; 309  : 	}

	ret	0
??E?$tmat3x3@N$00@glm@@QAEAAU01@XZ ENDP			; glm::tmat3x3<double,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tmat3x3@N$00@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tmat3x3@N$00@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tmat3x3<double,1>::operator=, COMDAT
; _this$ = ecx

; 191  : template struct tmat3x3<float64, mediump>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	18					; 00000012H
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tmat3x3@N$00@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tmat3x3<double,1>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??A?$tmat3x3@N$00@glm@@QBEABU?$tvec3@N$00@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat3x3@N$00@glm@@QBEABU?$tvec3@N$00@1@H@Z PROC	; glm::tmat3x3<double,1>::operator[], COMDAT
; _this$ = ecx

; 198  : 	{

	push	ebp
	mov	ebp, esp

; 199  : 		assert(i < this->length());
; 200  : 		return this->value[i];

	imul	eax, DWORD PTR _i$[ebp], 24
	add	eax, ecx

; 201  : 	}

	pop	ebp
	ret	4
??A?$tmat3x3@N$00@glm@@QBEABU?$tvec3@N$00@1@H@Z ENDP	; glm::tmat3x3<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??A?$tmat3x3@N$00@glm@@QAEAAU?$tvec3@N$00@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat3x3@N$00@glm@@QAEAAU?$tvec3@N$00@1@H@Z PROC	; glm::tmat3x3<double,1>::operator[], COMDAT
; _this$ = ecx

; 191  : 	{

	push	ebp
	mov	ebp, esp

; 192  : 		assert(i < this->length());
; 193  : 		return this->value[i];

	imul	eax, DWORD PTR _i$[ebp], 24
	add	eax, ecx

; 194  : 	}

	pop	ebp
	ret	4
??A?$tmat3x3@N$00@glm@@QAEAAU?$tvec3@N$00@1@H@Z ENDP	; glm::tmat3x3<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.hpp
;	COMDAT ?length@?$tmat3x3@N$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat3x3@N$00@glm@@SAHXZ PROC			; glm::tmat3x3<double,1>::length, COMDAT

; 79   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	push	3
	pop	eax
	ret	0
?length@?$tmat3x3@N$00@glm@@SAHXZ ENDP			; glm::tmat3x3<double,1>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$00@glm@@QAE@ABU?$tmat4x3@N$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x3@N$00@glm@@QAE@ABU?$tmat4x3@N$00@1@@Z PROC	; glm::tmat3x3<double,1>::tmat3x3<double,1>, COMDAT
; _this$ = ecx

; 181  : 	{

	push	ebp
	mov	ebp, esp
	mov	edx, ecx
	xorps	xmm0, xmm0
	push	2
	pop	ecx
	lea	eax, DWORD PTR [edx+16]
$LL4@tmat3x3:
	dec	ecx
	movsd	QWORD PTR [eax], xmm0
	movups	XMMWORD PTR [eax-16], xmm0
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat3x3

; 182  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	push	6
	pop	ecx

; 183  : 		this->value[1] = m[1];

	push	6
	mov	esi, eax
	mov	edi, edx
	rep movsd
	pop	ecx
	lea	esi, DWORD PTR [eax+24]
	lea	edi, DWORD PTR [edx+24]
	rep movsd

; 184  : 		this->value[2] = m[2];

	push	6
	pop	ecx
	lea	esi, DWORD PTR [eax+48]

; 185  : 	}

	mov	eax, edx
	lea	edi, DWORD PTR [edx+48]
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tmat3x3@N$00@glm@@QAE@ABU?$tmat4x3@N$00@1@@Z ENDP	; glm::tmat3x3<double,1>::tmat3x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$00@glm@@QAE@ABU?$tmat3x4@N$00@1@@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
$T3 = -24						; size = 24
_m$ = 8							; size = 4
??0?$tmat3x3@N$00@glm@@QAE@ABU?$tmat3x4@N$00@1@@Z PROC	; glm::tmat3x3<double,1>::tmat3x3<double,1>, COMDAT
; _this$ = ecx

; 173  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xorps	xmm0, xmm0
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	2
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat3x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm0
	movups	XMMWORD PTR [eax-16], xmm0
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat3x3

; 174  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T3[ebp]
	push	6
	pop	ecx
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]

; 175  : 		this->value[1] = col_type(m[1]);

	push	6
	movups	XMMWORD PTR $T3[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR $T3[ebp+16], xmm0
	rep movsd
	movups	xmm0, XMMWORD PTR [eax+32]
	pop	ecx
	lea	edi, DWORD PTR [ebx+24]
	movups	XMMWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	movsd	xmm0, QWORD PTR [eax+48]
	movsd	QWORD PTR $T2[ebp+16], xmm0
	rep movsd

; 176  : 		this->value[2] = col_type(m[2]);

	movups	xmm0, XMMWORD PTR [eax+64]
	push	6
	pop	ecx
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ebx+48]
	movsd	xmm0, QWORD PTR [eax+80]
	lea	esi, DWORD PTR $T1[ebp]
	movsd	QWORD PTR $T1[ebp+16], xmm0

; 177  : 	}

	mov	eax, ebx
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x3@N$00@glm@@QAE@ABU?$tmat3x4@N$00@1@@Z ENDP	; glm::tmat3x3<double,1>::tmat3x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$00@glm@@QAE@ABU?$tmat4x2@N$00@1@@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
$T3 = -24						; size = 24
_m$ = 8							; size = 4
??0?$tmat3x3@N$00@glm@@QAE@ABU?$tmat4x2@N$00@1@@Z PROC	; glm::tmat3x3<double,1>::tmat3x3<double,1>, COMDAT
; _this$ = ecx

; 165  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xorps	xmm1, xmm1
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	2
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat3x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm1
	movups	XMMWORD PTR [eax-16], xmm1
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat3x3

; 166  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T3[ebp]
	push	6
	pop	ecx
	movsd	QWORD PTR $T3[ebp+16], xmm1
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]

; 167  : 		this->value[1] = col_type(m[1], 0);

	push	6
	movups	XMMWORD PTR $T3[ebp], xmm0
	rep movsd
	movups	xmm0, XMMWORD PTR [eax+16]
	pop	ecx
	movsd	QWORD PTR $T2[ebp+16], xmm1
	lea	edi, DWORD PTR [ebx+24]
	movups	XMMWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	rep movsd

; 168  : 		this->value[2] = col_type(m[2], 1);

	movups	xmm0, XMMWORD PTR [eax+32]
	push	6
	pop	ecx
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ebx+48]

; 169  : 	}

	mov	eax, ebx
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	lea	esi, DWORD PTR $T1[ebp]
	movsd	QWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x3@N$00@glm@@QAE@ABU?$tmat4x2@N$00@1@@Z ENDP	; glm::tmat3x3<double,1>::tmat3x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$00@glm@@QAE@ABU?$tmat2x4@N$00@1@@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
$T3 = -24						; size = 24
_m$ = 8							; size = 4
??0?$tmat3x3@N$00@glm@@QAE@ABU?$tmat2x4@N$00@1@@Z PROC	; glm::tmat3x3<double,1>::tmat3x3<double,1>, COMDAT
; _this$ = ecx

; 157  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xorps	xmm0, xmm0
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	2
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat3x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm0
	movups	XMMWORD PTR [eax-16], xmm0
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat3x3

; 158  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T3[ebp]
	push	6
	pop	ecx
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]

; 159  : 		this->value[1] = col_type(m[1]);

	push	6
	movups	XMMWORD PTR $T3[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR $T3[ebp+16], xmm0
	rep movsd
	movups	xmm0, XMMWORD PTR [eax+32]
	pop	ecx
	lea	edi, DWORD PTR [ebx+24]
	movups	XMMWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	movsd	xmm0, QWORD PTR [eax+48]

; 160  : 		this->value[2] = col_type(0, 0, 1);
; 161  : 	}

	mov	eax, ebx
	movsd	QWORD PTR $T2[ebp+16], xmm0
	xorps	xmm0, xmm0
	rep movsd
	push	6
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ebx+48]
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	lea	esi, DWORD PTR $T1[ebp]
	pop	ecx
	movsd	QWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x3@N$00@glm@@QAE@ABU?$tmat2x4@N$00@1@@Z ENDP	; glm::tmat3x3<double,1>::tmat3x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$00@glm@@QAE@ABU?$tmat3x2@N$00@1@@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
$T3 = -24						; size = 24
_m$ = 8							; size = 4
??0?$tmat3x3@N$00@glm@@QAE@ABU?$tmat3x2@N$00@1@@Z PROC	; glm::tmat3x3<double,1>::tmat3x3<double,1>, COMDAT
; _this$ = ecx

; 149  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xorps	xmm1, xmm1
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	2
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat3x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm1
	movups	XMMWORD PTR [eax-16], xmm1
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat3x3

; 150  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T3[ebp]
	push	6
	pop	ecx
	movsd	QWORD PTR $T3[ebp+16], xmm1
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]

; 151  : 		this->value[1] = col_type(m[1], 0);

	push	6
	movups	XMMWORD PTR $T3[ebp], xmm0
	rep movsd
	movups	xmm0, XMMWORD PTR [eax+16]
	pop	ecx
	movsd	QWORD PTR $T2[ebp+16], xmm1
	lea	edi, DWORD PTR [ebx+24]
	movups	XMMWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	rep movsd

; 152  : 		this->value[2] = col_type(m[2], 1);

	movups	xmm0, XMMWORD PTR [eax+32]
	push	6
	pop	ecx
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ebx+48]

; 153  : 	}

	mov	eax, ebx
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	lea	esi, DWORD PTR $T1[ebp]
	movsd	QWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x3@N$00@glm@@QAE@ABU?$tmat3x2@N$00@1@@Z ENDP	; glm::tmat3x3<double,1>::tmat3x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$00@glm@@QAE@ABU?$tmat2x3@N$00@1@@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
_m$ = 8							; size = 4
??0?$tmat3x3@N$00@glm@@QAE@ABU?$tmat2x3@N$00@1@@Z PROC	; glm::tmat3x3<double,1>::tmat3x3<double,1>, COMDAT
; _this$ = ecx

; 141  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	edx, ecx
	xorps	xmm0, xmm0
	push	2
	pop	ecx
	lea	eax, DWORD PTR [edx+16]
$LL4@tmat3x3:
	dec	ecx
	movsd	QWORD PTR [eax], xmm0
	movups	XMMWORD PTR [eax-16], xmm0
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat3x3

; 142  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	push	esi
	push	edi
	push	6
	pop	ecx

; 143  : 		this->value[1] = m[1];

	push	6
	mov	esi, eax
	mov	edi, edx
	rep movsd
	pop	ecx
	lea	esi, DWORD PTR [eax+24]

; 144  : 		this->value[2] = col_type(0, 0, 1);
; 145  : 	}

	mov	eax, edx
	lea	edi, DWORD PTR [edx+24]
	rep movsd
	push	6
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [edx+48]
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	lea	esi, DWORD PTR $T1[ebp]
	pop	ecx
	movsd	QWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x3@N$00@glm@@QAE@ABU?$tmat2x3@N$00@1@@Z ENDP	; glm::tmat3x3<double,1>::tmat3x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$00@glm@@QAE@ABU?$tmat4x4@N$00@1@@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
$T3 = -24						; size = 24
_m$ = 8							; size = 4
??0?$tmat3x3@N$00@glm@@QAE@ABU?$tmat4x4@N$00@1@@Z PROC	; glm::tmat3x3<double,1>::tmat3x3<double,1>, COMDAT
; _this$ = ecx

; 133  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xorps	xmm0, xmm0
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	2
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat3x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm0
	movups	XMMWORD PTR [eax-16], xmm0
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat3x3

; 134  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T3[ebp]
	push	6
	pop	ecx
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]

; 135  : 		this->value[1] = col_type(m[1]);

	push	6
	movups	XMMWORD PTR $T3[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR $T3[ebp+16], xmm0
	rep movsd
	movups	xmm0, XMMWORD PTR [eax+32]
	pop	ecx
	lea	edi, DWORD PTR [ebx+24]
	movups	XMMWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	movsd	xmm0, QWORD PTR [eax+48]
	movsd	QWORD PTR $T2[ebp+16], xmm0
	rep movsd

; 136  : 		this->value[2] = col_type(m[2]);

	movups	xmm0, XMMWORD PTR [eax+64]
	push	6
	pop	ecx
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ebx+48]
	movsd	xmm0, QWORD PTR [eax+80]
	lea	esi, DWORD PTR $T1[ebp]
	movsd	QWORD PTR $T1[ebp+16], xmm0

; 137  : 	}

	mov	eax, ebx
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x3@N$00@glm@@QAE@ABU?$tmat4x4@N$00@1@@Z ENDP	; glm::tmat3x3<double,1>::tmat3x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$00@glm@@QAE@ABU?$tmat2x2@N$00@1@@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
$T3 = -24						; size = 24
_m$ = 8							; size = 4
??0?$tmat3x3@N$00@glm@@QAE@ABU?$tmat2x2@N$00@1@@Z PROC	; glm::tmat3x3<double,1>::tmat3x3<double,1>, COMDAT
; _this$ = ecx

; 125  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xorps	xmm1, xmm1
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	2
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat3x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm1
	movups	XMMWORD PTR [eax-16], xmm1
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat3x3

; 126  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T3[ebp]
	push	6
	pop	ecx
	movsd	QWORD PTR $T3[ebp+16], xmm1
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]

; 127  : 		this->value[1] = col_type(m[1], 0);

	push	6
	movups	XMMWORD PTR $T3[ebp], xmm0
	rep movsd
	movups	xmm0, XMMWORD PTR [eax+16]
	pop	ecx
	movsd	QWORD PTR $T2[ebp+16], xmm1
	lea	edi, DWORD PTR [ebx+24]
	movups	XMMWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]

; 128  : 		this->value[2] = col_type(0, 0, 1);
; 129  : 	}

	mov	eax, ebx
	xorps	xmm0, xmm0
	rep movsd
	push	6
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ebx+48]
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	lea	esi, DWORD PTR $T1[ebp]
	pop	ecx
	movsd	QWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x3@N$00@glm@@QAE@ABU?$tmat2x2@N$00@1@@Z ENDP	; glm::tmat3x3<double,1>::tmat3x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$00@glm@@QAE@ABU?$tvec3@N$00@1@00@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??0?$tmat3x3@N$00@glm@@QAE@ABU?$tvec3@N$00@1@00@Z PROC	; glm::tmat3x3<double,1>::tmat3x3<double,1>, COMDAT
; _this$ = ecx

; 73   : 	{

	push	ebp
	mov	ebp, esp
	mov	edx, ecx
	xorps	xmm0, xmm0
	push	2
	pop	ecx
	lea	eax, DWORD PTR [edx+16]
$LL4@tmat3x3:
	dec	ecx
	movsd	QWORD PTR [eax], xmm0
	movups	XMMWORD PTR [eax-16], xmm0
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat3x3

; 74   : 		this->value[0] = v0;

	push	esi
	mov	esi, DWORD PTR _v0$[ebp]

; 75   : 		this->value[1] = v1;
; 76   : 		this->value[2] = v2;
; 77   : 	}

	mov	eax, edx
	push	edi
	push	6
	pop	ecx
	push	6
	mov	edi, edx
	rep movsd
	mov	esi, DWORD PTR _v1$[ebp]
	lea	edi, DWORD PTR [edx+24]
	pop	ecx
	rep movsd
	mov	esi, DWORD PTR _v2$[ebp]
	lea	edi, DWORD PTR [edx+48]
	push	6
	pop	ecx
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	12					; 0000000cH
??0?$tmat3x3@N$00@glm@@QAE@ABU?$tvec3@N$00@1@00@Z ENDP	; glm::tmat3x3<double,1>::tmat3x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$00@glm@@QAE@NNNNNNNNN@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
$T3 = -24						; size = 24
_x0$ = 8						; size = 8
_y0$ = 16						; size = 8
_z0$ = 24						; size = 8
_x1$ = 32						; size = 8
_y1$ = 40						; size = 8
_z1$ = 48						; size = 8
_x2$ = 56						; size = 8
_y2$ = 64						; size = 8
_z2$ = 72						; size = 8
??0?$tmat3x3@N$00@glm@@QAE@NNNNNNNNN@Z PROC		; glm::tmat3x3<double,1>::tmat3x3<double,1>, COMDAT
; _this$ = ecx

; 60   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xorps	xmm0, xmm0
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	2
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat3x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm0
	movups	XMMWORD PTR [eax-16], xmm0
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat3x3

; 61   : 		this->value[0] = col_type(x0, y0, z0);

	movsd	xmm0, QWORD PTR _x0$[ebp]
	lea	esi, DWORD PTR $T3[ebp]
	movsd	QWORD PTR $T3[ebp], xmm0
	mov	edi, ebx
	movsd	xmm0, QWORD PTR _y0$[ebp]

; 62   : 		this->value[1] = col_type(x1, y1, z1);
; 63   : 		this->value[2] = col_type(x2, y2, z2);
; 64   : 	}

	mov	eax, ebx
	movsd	QWORD PTR $T3[ebp+8], xmm0
	movsd	xmm0, QWORD PTR _z0$[ebp]
	movsd	QWORD PTR $T3[ebp+16], xmm0
	movsd	xmm0, QWORD PTR _x1$[ebp]
	push	6
	pop	ecx
	rep movsd
	movsd	QWORD PTR $T2[ebp], xmm0
	lea	edi, DWORD PTR [ebx+24]
	movsd	xmm0, QWORD PTR _y1$[ebp]
	lea	esi, DWORD PTR $T2[ebp]
	movsd	QWORD PTR $T2[ebp+8], xmm0
	movsd	xmm0, QWORD PTR _z1$[ebp]
	push	6
	movsd	QWORD PTR $T2[ebp+16], xmm0
	movsd	xmm0, QWORD PTR _x2$[ebp]
	pop	ecx
	rep movsd
	movsd	QWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ebx+48]
	movsd	xmm0, QWORD PTR _y2$[ebp]
	lea	esi, DWORD PTR $T1[ebp]
	push	6
	movsd	QWORD PTR $T1[ebp+8], xmm0
	movsd	xmm0, QWORD PTR _z2$[ebp]
	pop	ecx
	movsd	QWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	72					; 00000048H
??0?$tmat3x3@N$00@glm@@QAE@NNNNNNNNN@Z ENDP		; glm::tmat3x3<double,1>::tmat3x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$00@glm@@QAE@N@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
$T3 = -24						; size = 24
_scalar$ = 8						; size = 8
??0?$tmat3x3@N$00@glm@@QAE@N@Z PROC			; glm::tmat3x3<double,1>::tmat3x3<double,1>, COMDAT
; _this$ = ecx

; 47   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xorps	xmm2, xmm2
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	2
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat3x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm2
	movups	XMMWORD PTR [eax-16], xmm2
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat3x3

; 48   : 		this->value[0] = col_type(scalar, 0, 0);

	movsd	xmm1, QWORD PTR _scalar$[ebp]
	lea	esi, DWORD PTR $T3[ebp]
	push	6
	pop	ecx
	movsd	QWORD PTR $T3[ebp], xmm1
	xorps	xmm0, xmm0
	movupd	XMMWORD PTR $T3[ebp+8], xmm0

; 49   : 		this->value[1] = col_type(0, scalar, 0);

	push	6
	mov	edi, ebx

; 50   : 		this->value[2] = col_type(0, 0, scalar);
; 51   : 	}

	mov	eax, ebx
	rep movsd
	pop	ecx
	movsd	QWORD PTR $T2[ebp], xmm2
	lea	edi, DWORD PTR [ebx+24]
	movsd	QWORD PTR $T2[ebp+8], xmm1
	lea	esi, DWORD PTR $T2[ebp]
	movsd	QWORD PTR $T2[ebp+16], xmm2
	rep movsd
	push	6
	pop	ecx
	lea	edi, DWORD PTR [ebx+48]
	movsd	QWORD PTR $T1[ebp+16], xmm1
	lea	esi, DWORD PTR $T1[ebp]
	movupd	XMMWORD PTR $T1[ebp], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$tmat3x3@N$00@glm@@QAE@N@Z ENDP			; glm::tmat3x3<double,1>::tmat3x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat3x3@N$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat3x3<double,1>::tmat3x3<double,1>, COMDAT
; _this$ = ecx

; 43   : 	{}

	push	2
	pop	edx
	lea	eax, DWORD PTR [ecx+16]
	xorps	xmm0, xmm0
$LL4@tmat3x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm0
	movups	XMMWORD PTR [eax-16], xmm0
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat3x3
	mov	eax, ecx
	ret	4
??0?$tmat3x3@N$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat3x3<double,1>::tmat3x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tmat3x3@N$00@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tmat3x3@N$00@glm@@QAE@ABU01@@Z PROC		; glm::tmat3x3<double,1>::tmat3x3<double,1>, COMDAT
; _this$ = ecx

; 191  : template struct tmat3x3<float64, mediump>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	18					; 00000012H
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tmat3x3@N$00@glm@@QAE@ABU01@@Z ENDP		; glm::tmat3x3<double,1>::tmat3x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$00@glm@@QAE@XZ
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
$T3 = -24						; size = 24
??0?$tmat3x3@N$00@glm@@QAE@XZ PROC			; glm::tmat3x3<double,1>::tmat3x3<double,1>, COMDAT
; _this$ = ecx

; 13   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xorps	xmm1, xmm1
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	2
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat3x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm1
	movups	XMMWORD PTR [eax-16], xmm1
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat3x3

; 14   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 15   : 				this->value[0] = col_type(1, 0, 0);

	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	lea	esi, DWORD PTR $T3[ebp]
	push	6
	pop	ecx
	movupd	XMMWORD PTR $T3[ebp], xmm0
	mov	edi, ebx

; 16   : 				this->value[1] = col_type(0, 1, 0);
; 17   : 				this->value[2] = col_type(0, 0, 1);
; 18   : #			endif
; 19   : 		}

	mov	eax, ebx
	movaps	xmm0, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	push	6
	movsd	QWORD PTR $T3[ebp+16], xmm1
	rep movsd
	pop	ecx
	movupd	XMMWORD PTR $T2[ebp], xmm0
	lea	edi, DWORD PTR [ebx+24]
	movsd	QWORD PTR $T2[ebp+16], xmm1
	lea	esi, DWORD PTR $T2[ebp]
	rep movsd
	xorps	xmm0, xmm0
	lea	edi, DWORD PTR [ebx+48]
	push	6
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	pop	ecx
	movsd	QWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$tmat3x3@N$00@glm@@QAE@XZ ENDP			; glm::tmat3x3<double,1>::tmat3x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??F?$tmat3x3@M$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat3x3@M$00@glm@@QAE?AU01@H@Z PROC		; glm::tmat3x3<float,1>::operator--, COMDAT
; _this$ = ecx

; 330  : 	{

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi

; 331  : 		tmat3x3<T, P> Result(*this);

	mov	edi, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, ecx
	push	9
	pop	ecx
	mov	esi, eax
	rep movsd

; 332  : 		--*this;

	mov	ecx, eax
	call	??F?$tmat3x3@M$00@glm@@QAEAAU01@XZ	; glm::tmat3x3<float,1>::operator--

; 333  : 		return Result;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi

; 334  : 	}

	pop	ebp
	ret	8
??F?$tmat3x3@M$00@glm@@QAE?AU01@H@Z ENDP		; glm::tmat3x3<float,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??E?$tmat3x3@M$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat3x3@M$00@glm@@QAE?AU01@H@Z PROC		; glm::tmat3x3<float,1>::operator++, COMDAT
; _this$ = ecx

; 322  : 	{

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi

; 323  : 		tmat3x3<T, P> Result(*this);

	mov	edi, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, ecx
	push	9
	pop	ecx
	mov	esi, eax
	rep movsd

; 324  : 		++*this;

	mov	ecx, eax
	call	??E?$tmat3x3@M$00@glm@@QAEAAU01@XZ	; glm::tmat3x3<float,1>::operator++

; 325  : 		return Result;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi

; 326  : 	}

	pop	ebp
	ret	8
??E?$tmat3x3@M$00@glm@@QAE?AU01@H@Z ENDP		; glm::tmat3x3<float,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??F?$tmat3x3@M$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat3x3@M$00@glm@@QAEAAU01@XZ PROC			; glm::tmat3x3<float,1>::operator--, COMDAT
; _this$ = ecx

; 314  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 315  : 		--this->value[1];
; 316  : 		--this->value[2];
; 317  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movss	xmm0, DWORD PTR [ecx+32]
	subss	xmm0, xmm1
	movss	DWORD PTR [ecx+32], xmm0

; 318  : 	}

	ret	0
??F?$tmat3x3@M$00@glm@@QAEAAU01@XZ ENDP			; glm::tmat3x3<float,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??E?$tmat3x3@M$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat3x3@M$00@glm@@QAEAAU01@XZ PROC			; glm::tmat3x3<float,1>::operator++, COMDAT
; _this$ = ecx

; 305  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 306  : 		++this->value[1];
; 307  : 		++this->value[2];
; 308  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movss	xmm0, DWORD PTR [ecx+32]
	addss	xmm0, xmm1
	movss	DWORD PTR [ecx+32], xmm0

; 309  : 	}

	ret	0
??E?$tmat3x3@M$00@glm@@QAEAAU01@XZ ENDP			; glm::tmat3x3<float,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tmat3x3@M$00@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tmat3x3@M$00@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tmat3x3<float,1>::operator=, COMDAT
; _this$ = ecx

; 190  : template struct tmat3x3<float32, mediump>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	9
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tmat3x3@M$00@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tmat3x3<float,1>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??A?$tmat3x3@M$00@glm@@QBEABU?$tvec3@M$00@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat3x3@M$00@glm@@QBEABU?$tvec3@M$00@1@H@Z PROC	; glm::tmat3x3<float,1>::operator[], COMDAT
; _this$ = ecx

; 198  : 	{

	push	ebp
	mov	ebp, esp

; 199  : 		assert(i < this->length());
; 200  : 		return this->value[i];

	imul	eax, DWORD PTR _i$[ebp], 12
	add	eax, ecx

; 201  : 	}

	pop	ebp
	ret	4
??A?$tmat3x3@M$00@glm@@QBEABU?$tvec3@M$00@1@H@Z ENDP	; glm::tmat3x3<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??A?$tmat3x3@M$00@glm@@QAEAAU?$tvec3@M$00@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat3x3@M$00@glm@@QAEAAU?$tvec3@M$00@1@H@Z PROC	; glm::tmat3x3<float,1>::operator[], COMDAT
; _this$ = ecx

; 191  : 	{

	push	ebp
	mov	ebp, esp

; 192  : 		assert(i < this->length());
; 193  : 		return this->value[i];

	imul	eax, DWORD PTR _i$[ebp], 12
	add	eax, ecx

; 194  : 	}

	pop	ebp
	ret	4
??A?$tmat3x3@M$00@glm@@QAEAAU?$tvec3@M$00@1@H@Z ENDP	; glm::tmat3x3<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.hpp
;	COMDAT ?length@?$tmat3x3@M$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat3x3@M$00@glm@@SAHXZ PROC			; glm::tmat3x3<float,1>::length, COMDAT

; 79   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	push	3
	pop	eax
	ret	0
?length@?$tmat3x3@M$00@glm@@SAHXZ ENDP			; glm::tmat3x3<float,1>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$00@glm@@QAE@ABU?$tmat4x3@M$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x3@M$00@glm@@QAE@ABU?$tmat4x3@M$00@1@@Z PROC	; glm::tmat3x3<float,1>::tmat3x3<float,1>, COMDAT
; _this$ = ecx

; 181  : 	{

	push	ebp
	mov	ebp, esp
	push	2
	pop	edx
	lea	eax, DWORD PTR [ecx+8]
$LL4@tmat3x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat3x3

; 182  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	esi, eax
	mov	edi, ecx
	movsd
	movsd
	movsd

; 183  : 		this->value[1] = m[1];

	lea	esi, DWORD PTR [eax+12]
	lea	edi, DWORD PTR [ecx+12]
	movsd
	movsd
	movsd

; 184  : 		this->value[2] = m[2];

	lea	esi, DWORD PTR [eax+24]

; 185  : 	}

	mov	eax, ecx
	lea	edi, DWORD PTR [ecx+24]
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tmat3x3@M$00@glm@@QAE@ABU?$tmat4x3@M$00@1@@Z ENDP	; glm::tmat3x3<float,1>::tmat3x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$00@glm@@QAE@ABU?$tmat3x4@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat3x3@M$00@glm@@QAE@ABU?$tmat3x4@M$00@1@@Z PROC	; glm::tmat3x3<float,1>::tmat3x3<float,1>, COMDAT
; _this$ = ecx

; 173  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	lea	eax, DWORD PTR [ecx+8]
	push	2
	pop	edx
$LL4@tmat3x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat3x3

; 174  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T3[ebp]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T3[ebp+8], xmm0
	movsd
	movsd
	movsd

; 175  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [eax+16]
	lea	edi, DWORD PTR [ecx+12]
	movss	DWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+24]
	movss	DWORD PTR $T2[ebp+8], xmm0
	movsd
	movsd
	movsd

; 176  : 		this->value[2] = col_type(m[2]);

	movss	xmm0, DWORD PTR [eax+32]
	lea	edi, DWORD PTR [ecx+24]
	movss	DWORD PTR $T1[ebp], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	movss	xmm0, DWORD PTR [eax+36]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+40]

; 177  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+8], xmm0
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x3@M$00@glm@@QAE@ABU?$tmat3x4@M$00@1@@Z ENDP	; glm::tmat3x3<float,1>::tmat3x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$00@glm@@QAE@ABU?$tmat4x2@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat3x3@M$00@glm@@QAE@ABU?$tmat4x2@M$00@1@@Z PROC	; glm::tmat3x3<float,1>::tmat3x3<float,1>, COMDAT
; _this$ = ecx

; 165  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	lea	eax, DWORD PTR [ecx+8]
	push	2
	pop	edx
$LL4@tmat3x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat3x3

; 166  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	and	DWORD PTR $T3[ebp+8], 0
	push	esi
	push	edi
	movss	xmm0, DWORD PTR [eax]
	lea	esi, DWORD PTR $T3[ebp]
	movss	DWORD PTR $T3[ebp], xmm0
	mov	edi, ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movsd
	movsd
	movsd

; 167  : 		this->value[1] = col_type(m[1], 0);

	movss	xmm0, DWORD PTR [eax+8]
	lea	edi, DWORD PTR [ecx+12]
	and	DWORD PTR $T2[ebp+8], 0
	lea	esi, DWORD PTR $T2[ebp]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movsd
	movsd
	movsd

; 168  : 		this->value[2] = col_type(m[2], 1);

	movss	xmm0, DWORD PTR [eax+16]
	lea	edi, DWORD PTR [ecx+24]
	movss	DWORD PTR $T1[ebp], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	movss	xmm0, DWORD PTR [eax+20]

; 169  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	DWORD PTR $T1[ebp+8], 1065353216	; 3f800000H
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x3@M$00@glm@@QAE@ABU?$tmat4x2@M$00@1@@Z ENDP	; glm::tmat3x3<float,1>::tmat3x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$00@glm@@QAE@ABU?$tmat2x4@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat3x3@M$00@glm@@QAE@ABU?$tmat2x4@M$00@1@@Z PROC	; glm::tmat3x3<float,1>::tmat3x3<float,1>, COMDAT
; _this$ = ecx

; 157  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	lea	eax, DWORD PTR [ecx+8]
	push	2
	pop	edx
$LL4@tmat3x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat3x3

; 158  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T3[ebp]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T3[ebp+8], xmm0
	movsd
	movsd
	movsd

; 159  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [eax+16]
	lea	edi, DWORD PTR [ecx+12]
	movss	DWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+24]

; 160  : 		this->value[2] = col_type(0, 0, 1);
; 161  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T2[ebp+8], xmm0
	movsd
	movsd
	movsd
	and	DWORD PTR $T1[ebp], 0
	lea	edi, DWORD PTR [ecx+24]
	and	DWORD PTR $T1[ebp+4], 0
	lea	esi, DWORD PTR $T1[ebp]
	mov	DWORD PTR $T1[ebp+8], 1065353216	; 3f800000H
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x3@M$00@glm@@QAE@ABU?$tmat2x4@M$00@1@@Z ENDP	; glm::tmat3x3<float,1>::tmat3x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$00@glm@@QAE@ABU?$tmat3x2@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat3x3@M$00@glm@@QAE@ABU?$tmat3x2@M$00@1@@Z PROC	; glm::tmat3x3<float,1>::tmat3x3<float,1>, COMDAT
; _this$ = ecx

; 149  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	lea	eax, DWORD PTR [ecx+8]
	push	2
	pop	edx
$LL4@tmat3x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat3x3

; 150  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	and	DWORD PTR $T3[ebp+8], 0
	push	esi
	push	edi
	movss	xmm0, DWORD PTR [eax]
	lea	esi, DWORD PTR $T3[ebp]
	movss	DWORD PTR $T3[ebp], xmm0
	mov	edi, ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movsd
	movsd
	movsd

; 151  : 		this->value[1] = col_type(m[1], 0);

	movss	xmm0, DWORD PTR [eax+8]
	lea	edi, DWORD PTR [ecx+12]
	and	DWORD PTR $T2[ebp+8], 0
	lea	esi, DWORD PTR $T2[ebp]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movsd
	movsd
	movsd

; 152  : 		this->value[2] = col_type(m[2], 1);

	movss	xmm0, DWORD PTR [eax+16]
	lea	edi, DWORD PTR [ecx+24]
	movss	DWORD PTR $T1[ebp], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	movss	xmm0, DWORD PTR [eax+20]

; 153  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	DWORD PTR $T1[ebp+8], 1065353216	; 3f800000H
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x3@M$00@glm@@QAE@ABU?$tmat3x2@M$00@1@@Z ENDP	; glm::tmat3x3<float,1>::tmat3x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$00@glm@@QAE@ABU?$tmat2x3@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat3x3@M$00@glm@@QAE@ABU?$tmat2x3@M$00@1@@Z PROC	; glm::tmat3x3<float,1>::tmat3x3<float,1>, COMDAT
; _this$ = ecx

; 141  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	lea	eax, DWORD PTR [ecx+8]
	push	2
	pop	edx
$LL4@tmat3x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat3x3

; 142  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi

; 143  : 		this->value[1] = m[1];
; 144  : 		this->value[2] = col_type(0, 0, 1);

	and	DWORD PTR $T1[ebp], 0
	mov	esi, eax
	and	DWORD PTR $T1[ebp+4], 0
	mov	edi, ecx
	mov	DWORD PTR $T1[ebp+8], 1065353216	; 3f800000H
	movsd
	movsd
	movsd
	lea	esi, DWORD PTR [eax+12]

; 145  : 	}

	mov	eax, ecx
	lea	edi, DWORD PTR [ecx+12]
	movsd
	movsd
	movsd
	lea	edi, DWORD PTR [ecx+24]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x3@M$00@glm@@QAE@ABU?$tmat2x3@M$00@1@@Z ENDP	; glm::tmat3x3<float,1>::tmat3x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$00@glm@@QAE@ABU?$tmat4x4@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat3x3@M$00@glm@@QAE@ABU?$tmat4x4@M$00@1@@Z PROC	; glm::tmat3x3<float,1>::tmat3x3<float,1>, COMDAT
; _this$ = ecx

; 133  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	lea	eax, DWORD PTR [ecx+8]
	push	2
	pop	edx
$LL4@tmat3x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat3x3

; 134  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T3[ebp]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T3[ebp+8], xmm0
	movsd
	movsd
	movsd

; 135  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [eax+16]
	lea	edi, DWORD PTR [ecx+12]
	movss	DWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+24]
	movss	DWORD PTR $T2[ebp+8], xmm0
	movsd
	movsd
	movsd

; 136  : 		this->value[2] = col_type(m[2]);

	movss	xmm0, DWORD PTR [eax+32]
	lea	edi, DWORD PTR [ecx+24]
	movss	DWORD PTR $T1[ebp], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	movss	xmm0, DWORD PTR [eax+36]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+40]

; 137  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+8], xmm0
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x3@M$00@glm@@QAE@ABU?$tmat4x4@M$00@1@@Z ENDP	; glm::tmat3x3<float,1>::tmat3x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$00@glm@@QAE@ABU?$tmat2x2@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat3x3@M$00@glm@@QAE@ABU?$tmat2x2@M$00@1@@Z PROC	; glm::tmat3x3<float,1>::tmat3x3<float,1>, COMDAT
; _this$ = ecx

; 125  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	lea	eax, DWORD PTR [ecx+8]
	push	2
	pop	edx
$LL4@tmat3x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat3x3

; 126  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	and	DWORD PTR $T3[ebp+8], 0
	push	esi
	push	edi
	movss	xmm0, DWORD PTR [eax]
	lea	esi, DWORD PTR $T3[ebp]
	movss	DWORD PTR $T3[ebp], xmm0
	mov	edi, ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movsd
	movsd
	movsd

; 127  : 		this->value[1] = col_type(m[1], 0);

	movss	xmm0, DWORD PTR [eax+8]
	lea	edi, DWORD PTR [ecx+12]
	and	DWORD PTR $T2[ebp+8], 0
	lea	esi, DWORD PTR $T2[ebp]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+12]

; 128  : 		this->value[2] = col_type(0, 0, 1);
; 129  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T2[ebp+4], xmm0
	movsd
	movsd
	movsd
	and	DWORD PTR $T1[ebp], 0
	lea	edi, DWORD PTR [ecx+24]
	and	DWORD PTR $T1[ebp+4], 0
	lea	esi, DWORD PTR $T1[ebp]
	mov	DWORD PTR $T1[ebp+8], 1065353216	; 3f800000H
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x3@M$00@glm@@QAE@ABU?$tmat2x2@M$00@1@@Z ENDP	; glm::tmat3x3<float,1>::tmat3x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$00@glm@@QAE@ABU?$tvec3@M$00@1@00@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??0?$tmat3x3@M$00@glm@@QAE@ABU?$tvec3@M$00@1@00@Z PROC	; glm::tmat3x3<float,1>::tmat3x3<float,1>, COMDAT
; _this$ = ecx

; 73   : 	{

	push	ebp
	mov	ebp, esp
	push	2
	pop	edx
	lea	eax, DWORD PTR [ecx+8]
$LL4@tmat3x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat3x3

; 74   : 		this->value[0] = v0;

	push	esi
	mov	esi, DWORD PTR _v0$[ebp]

; 75   : 		this->value[1] = v1;
; 76   : 		this->value[2] = v2;
; 77   : 	}

	mov	eax, ecx
	push	edi
	mov	edi, ecx
	movsd
	movsd
	movsd
	mov	esi, DWORD PTR _v1$[ebp]
	lea	edi, DWORD PTR [ecx+12]
	movsd
	movsd
	movsd
	mov	esi, DWORD PTR _v2$[ebp]
	lea	edi, DWORD PTR [ecx+24]
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	12					; 0000000cH
??0?$tmat3x3@M$00@glm@@QAE@ABU?$tvec3@M$00@1@00@Z ENDP	; glm::tmat3x3<float,1>::tmat3x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$00@glm@@QAE@MMMMMMMMM@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_z0$ = 16						; size = 4
_x1$ = 20						; size = 4
_y1$ = 24						; size = 4
_z1$ = 28						; size = 4
_x2$ = 32						; size = 4
_y2$ = 36						; size = 4
_z2$ = 40						; size = 4
??0?$tmat3x3@M$00@glm@@QAE@MMMMMMMMM@Z PROC		; glm::tmat3x3<float,1>::tmat3x3<float,1>, COMDAT
; _this$ = ecx

; 60   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	lea	eax, DWORD PTR [ecx+8]
	push	2
	pop	edx
$LL4@tmat3x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat3x3

; 61   : 		this->value[0] = col_type(x0, y0, z0);

	movss	xmm0, DWORD PTR _x0$[ebp]

; 62   : 		this->value[1] = col_type(x1, y1, z1);
; 63   : 		this->value[2] = col_type(x2, y2, z2);
; 64   : 	}

	mov	eax, ecx
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR _y0$[ebp]
	push	esi
	movss	DWORD PTR $T3[ebp+4], xmm0
	lea	esi, DWORD PTR $T3[ebp]
	movss	xmm0, DWORD PTR _z0$[ebp]
	push	edi
	movss	DWORD PTR $T3[ebp+8], xmm0
	mov	edi, ecx
	movss	xmm0, DWORD PTR _x1$[ebp]
	movsd
	movsd
	movsd
	movss	DWORD PTR $T2[ebp], xmm0
	lea	edi, DWORD PTR [ecx+12]
	movss	xmm0, DWORD PTR _y1$[ebp]
	lea	esi, DWORD PTR $T2[ebp]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR _z1$[ebp]
	movss	DWORD PTR $T2[ebp+8], xmm0
	movss	xmm0, DWORD PTR _x2$[ebp]
	movsd
	movsd
	movsd
	movss	DWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+24]
	movss	xmm0, DWORD PTR _y2$[ebp]
	lea	esi, DWORD PTR $T1[ebp]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR _z2$[ebp]
	movss	DWORD PTR $T1[ebp+8], xmm0
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	36					; 00000024H
??0?$tmat3x3@M$00@glm@@QAE@MMMMMMMMM@Z ENDP		; glm::tmat3x3<float,1>::tmat3x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$00@glm@@QAE@M@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
_scalar$ = 8						; size = 4
??0?$tmat3x3@M$00@glm@@QAE@M@Z PROC			; glm::tmat3x3<float,1>::tmat3x3<float,1>, COMDAT
; _this$ = ecx

; 47   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	lea	eax, DWORD PTR [ecx+8]
	push	2
	pop	edx
$LL4@tmat3x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat3x3

; 48   : 		this->value[0] = col_type(scalar, 0, 0);

	and	DWORD PTR $T3[ebp+8], 0

; 49   : 		this->value[1] = col_type(0, scalar, 0);
; 50   : 		this->value[2] = col_type(0, 0, scalar);
; 51   : 	}

	mov	eax, ecx
	and	DWORD PTR $T3[ebp+4], 0
	movss	xmm0, DWORD PTR _scalar$[ebp]
	push	esi
	push	edi
	movss	DWORD PTR $T3[ebp], xmm0
	lea	esi, DWORD PTR $T3[ebp]
	mov	edi, ecx
	movsd
	movsd
	movsd
	and	DWORD PTR $T2[ebp], 0
	lea	edi, DWORD PTR [ecx+12]
	and	DWORD PTR $T2[ebp+8], 0
	lea	esi, DWORD PTR $T2[ebp]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movsd
	movsd
	movsd
	and	DWORD PTR $T1[ebp], 0
	lea	edi, DWORD PTR [ecx+24]
	and	DWORD PTR $T1[ebp+4], 0
	lea	esi, DWORD PTR $T1[ebp]
	movss	DWORD PTR $T1[ebp+8], xmm0
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x3@M$00@glm@@QAE@M@Z ENDP			; glm::tmat3x3<float,1>::tmat3x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat3x3@M$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat3x3<float,1>::tmat3x3<float,1>, COMDAT
; _this$ = ecx

; 43   : 	{}

	push	2
	pop	edx
	lea	eax, DWORD PTR [ecx+8]
$LL4@tmat3x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat3x3
	mov	eax, ecx
	ret	4
??0?$tmat3x3@M$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat3x3<float,1>::tmat3x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tmat3x3@M$00@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tmat3x3@M$00@glm@@QAE@ABU01@@Z PROC		; glm::tmat3x3<float,1>::tmat3x3<float,1>, COMDAT
; _this$ = ecx

; 190  : template struct tmat3x3<float32, mediump>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	9
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tmat3x3@M$00@glm@@QAE@ABU01@@Z ENDP		; glm::tmat3x3<float,1>::tmat3x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$00@glm@@QAE@XZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
??0?$tmat3x3@M$00@glm@@QAE@XZ PROC			; glm::tmat3x3<float,1>::tmat3x3<float,1>, COMDAT
; _this$ = ecx

; 13   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	lea	eax, DWORD PTR [ecx+8]
	push	2
	pop	edx
$LL4@tmat3x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat3x3

; 14   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 15   : 				this->value[0] = col_type(1, 0, 0);

	and	DWORD PTR $T3[ebp+8], 0

; 16   : 				this->value[1] = col_type(0, 1, 0);
; 17   : 				this->value[2] = col_type(0, 0, 1);
; 18   : #			endif
; 19   : 		}

	mov	eax, ecx
	and	DWORD PTR $T3[ebp+4], 0
	push	esi
	push	edi
	mov	DWORD PTR $T3[ebp], 1065353216		; 3f800000H
	lea	esi, DWORD PTR $T3[ebp]
	mov	edi, ecx
	movsd
	movsd
	movsd
	and	DWORD PTR $T2[ebp], 0
	lea	edi, DWORD PTR [ecx+12]
	and	DWORD PTR $T2[ebp+8], 0
	lea	esi, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T2[ebp+4], 1065353216	; 3f800000H
	movsd
	movsd
	movsd
	and	DWORD PTR $T1[ebp], 0
	lea	edi, DWORD PTR [ecx+24]
	and	DWORD PTR $T1[ebp+4], 0
	lea	esi, DWORD PTR $T1[ebp]
	mov	DWORD PTR $T1[ebp+8], 1065353216	; 3f800000H
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$tmat3x3@M$00@glm@@QAE@XZ ENDP			; glm::tmat3x3<float,1>::tmat3x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??F?$tmat3x3@N$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat3x3@N$01@glm@@QAE?AU01@H@Z PROC		; glm::tmat3x3<double,2>::operator--, COMDAT
; _this$ = ecx

; 330  : 	{

	push	ebp
	mov	ebp, esp

; 331  : 		tmat3x3<T, P> Result(*this);
; 332  : 		--*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	mov	edx, ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	movups	xmm0, XMMWORD PTR [edx]
	push	18					; 00000012H
	pop	ecx
	subpd	xmm0, xmm1
	mov	esi, edx
	mov	edi, eax
	rep movsd
	movups	XMMWORD PTR [edx], xmm0
	pop	edi
	movups	xmm0, XMMWORD PTR [edx+16]
	pop	esi
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+16], xmm0
	movups	xmm0, XMMWORD PTR [edx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+32], xmm0
	movups	xmm0, XMMWORD PTR [edx+48]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+48], xmm0
	movsd	xmm0, QWORD PTR [edx+64]
	subsd	xmm0, xmm1
	movsd	QWORD PTR [edx+64], xmm0

; 333  : 		return Result;
; 334  : 	}

	pop	ebp
	ret	8
??F?$tmat3x3@N$01@glm@@QAE?AU01@H@Z ENDP		; glm::tmat3x3<double,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??E?$tmat3x3@N$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat3x3@N$01@glm@@QAE?AU01@H@Z PROC		; glm::tmat3x3<double,2>::operator++, COMDAT
; _this$ = ecx

; 322  : 	{

	push	ebp
	mov	ebp, esp

; 323  : 		tmat3x3<T, P> Result(*this);
; 324  : 		++*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	mov	edx, ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	movups	xmm0, XMMWORD PTR [edx]
	push	18					; 00000012H
	pop	ecx
	addpd	xmm0, xmm1
	mov	esi, edx
	mov	edi, eax
	rep movsd
	movups	XMMWORD PTR [edx], xmm0
	pop	edi
	movups	xmm0, XMMWORD PTR [edx+16]
	pop	esi
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+16], xmm0
	movups	xmm0, XMMWORD PTR [edx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+32], xmm0
	movups	xmm0, XMMWORD PTR [edx+48]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+48], xmm0
	movsd	xmm0, QWORD PTR [edx+64]
	addsd	xmm0, xmm1
	movsd	QWORD PTR [edx+64], xmm0

; 325  : 		return Result;
; 326  : 	}

	pop	ebp
	ret	8
??E?$tmat3x3@N$01@glm@@QAE?AU01@H@Z ENDP		; glm::tmat3x3<double,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??F?$tmat3x3@N$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat3x3@N$01@glm@@QAEAAU01@XZ PROC			; glm::tmat3x3<double,2>::operator--, COMDAT
; _this$ = ecx

; 314  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 315  : 		--this->value[1];
; 316  : 		--this->value[2];
; 317  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0
	movsd	xmm0, QWORD PTR [ecx+64]
	subsd	xmm0, xmm1
	movsd	QWORD PTR [ecx+64], xmm0

; 318  : 	}

	ret	0
??F?$tmat3x3@N$01@glm@@QAEAAU01@XZ ENDP			; glm::tmat3x3<double,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??E?$tmat3x3@N$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat3x3@N$01@glm@@QAEAAU01@XZ PROC			; glm::tmat3x3<double,2>::operator++, COMDAT
; _this$ = ecx

; 305  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 306  : 		++this->value[1];
; 307  : 		++this->value[2];
; 308  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0
	movsd	xmm0, QWORD PTR [ecx+64]
	addsd	xmm0, xmm1
	movsd	QWORD PTR [ecx+64], xmm0

; 309  : 	}

	ret	0
??E?$tmat3x3@N$01@glm@@QAEAAU01@XZ ENDP			; glm::tmat3x3<double,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tmat3x3@N$01@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tmat3x3@N$01@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tmat3x3<double,2>::operator=, COMDAT
; _this$ = ecx

; 188  : template struct tmat3x3<float64, lowp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	18					; 00000012H
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tmat3x3@N$01@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tmat3x3<double,2>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??A?$tmat3x3@N$01@glm@@QBEABU?$tvec3@N$01@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat3x3@N$01@glm@@QBEABU?$tvec3@N$01@1@H@Z PROC	; glm::tmat3x3<double,2>::operator[], COMDAT
; _this$ = ecx

; 198  : 	{

	push	ebp
	mov	ebp, esp

; 199  : 		assert(i < this->length());
; 200  : 		return this->value[i];

	imul	eax, DWORD PTR _i$[ebp], 24
	add	eax, ecx

; 201  : 	}

	pop	ebp
	ret	4
??A?$tmat3x3@N$01@glm@@QBEABU?$tvec3@N$01@1@H@Z ENDP	; glm::tmat3x3<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??A?$tmat3x3@N$01@glm@@QAEAAU?$tvec3@N$01@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat3x3@N$01@glm@@QAEAAU?$tvec3@N$01@1@H@Z PROC	; glm::tmat3x3<double,2>::operator[], COMDAT
; _this$ = ecx

; 191  : 	{

	push	ebp
	mov	ebp, esp

; 192  : 		assert(i < this->length());
; 193  : 		return this->value[i];

	imul	eax, DWORD PTR _i$[ebp], 24
	add	eax, ecx

; 194  : 	}

	pop	ebp
	ret	4
??A?$tmat3x3@N$01@glm@@QAEAAU?$tvec3@N$01@1@H@Z ENDP	; glm::tmat3x3<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.hpp
;	COMDAT ?length@?$tmat3x3@N$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat3x3@N$01@glm@@SAHXZ PROC			; glm::tmat3x3<double,2>::length, COMDAT

; 79   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	push	3
	pop	eax
	ret	0
?length@?$tmat3x3@N$01@glm@@SAHXZ ENDP			; glm::tmat3x3<double,2>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$01@glm@@QAE@ABU?$tmat4x3@N$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x3@N$01@glm@@QAE@ABU?$tmat4x3@N$01@1@@Z PROC	; glm::tmat3x3<double,2>::tmat3x3<double,2>, COMDAT
; _this$ = ecx

; 181  : 	{

	push	ebp
	mov	ebp, esp
	mov	edx, ecx
	xorps	xmm0, xmm0
	push	2
	pop	ecx
	lea	eax, DWORD PTR [edx+16]
$LL4@tmat3x3:
	dec	ecx
	movsd	QWORD PTR [eax], xmm0
	movups	XMMWORD PTR [eax-16], xmm0
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat3x3

; 182  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	push	6
	pop	ecx

; 183  : 		this->value[1] = m[1];

	push	6
	mov	esi, eax
	mov	edi, edx
	rep movsd
	pop	ecx
	lea	esi, DWORD PTR [eax+24]
	lea	edi, DWORD PTR [edx+24]
	rep movsd

; 184  : 		this->value[2] = m[2];

	push	6
	pop	ecx
	lea	esi, DWORD PTR [eax+48]

; 185  : 	}

	mov	eax, edx
	lea	edi, DWORD PTR [edx+48]
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tmat3x3@N$01@glm@@QAE@ABU?$tmat4x3@N$01@1@@Z ENDP	; glm::tmat3x3<double,2>::tmat3x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$01@glm@@QAE@ABU?$tmat3x4@N$01@1@@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
$T3 = -24						; size = 24
_m$ = 8							; size = 4
??0?$tmat3x3@N$01@glm@@QAE@ABU?$tmat3x4@N$01@1@@Z PROC	; glm::tmat3x3<double,2>::tmat3x3<double,2>, COMDAT
; _this$ = ecx

; 173  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xorps	xmm0, xmm0
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	2
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat3x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm0
	movups	XMMWORD PTR [eax-16], xmm0
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat3x3

; 174  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T3[ebp]
	push	6
	pop	ecx
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]

; 175  : 		this->value[1] = col_type(m[1]);

	push	6
	movups	XMMWORD PTR $T3[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR $T3[ebp+16], xmm0
	rep movsd
	movups	xmm0, XMMWORD PTR [eax+32]
	pop	ecx
	lea	edi, DWORD PTR [ebx+24]
	movups	XMMWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	movsd	xmm0, QWORD PTR [eax+48]
	movsd	QWORD PTR $T2[ebp+16], xmm0
	rep movsd

; 176  : 		this->value[2] = col_type(m[2]);

	movups	xmm0, XMMWORD PTR [eax+64]
	push	6
	pop	ecx
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ebx+48]
	movsd	xmm0, QWORD PTR [eax+80]
	lea	esi, DWORD PTR $T1[ebp]
	movsd	QWORD PTR $T1[ebp+16], xmm0

; 177  : 	}

	mov	eax, ebx
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x3@N$01@glm@@QAE@ABU?$tmat3x4@N$01@1@@Z ENDP	; glm::tmat3x3<double,2>::tmat3x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$01@glm@@QAE@ABU?$tmat4x2@N$01@1@@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
$T3 = -24						; size = 24
_m$ = 8							; size = 4
??0?$tmat3x3@N$01@glm@@QAE@ABU?$tmat4x2@N$01@1@@Z PROC	; glm::tmat3x3<double,2>::tmat3x3<double,2>, COMDAT
; _this$ = ecx

; 165  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xorps	xmm1, xmm1
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	2
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat3x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm1
	movups	XMMWORD PTR [eax-16], xmm1
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat3x3

; 166  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T3[ebp]
	push	6
	pop	ecx
	movsd	QWORD PTR $T3[ebp+16], xmm1
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]

; 167  : 		this->value[1] = col_type(m[1], 0);

	push	6
	movups	XMMWORD PTR $T3[ebp], xmm0
	rep movsd
	movups	xmm0, XMMWORD PTR [eax+16]
	pop	ecx
	movsd	QWORD PTR $T2[ebp+16], xmm1
	lea	edi, DWORD PTR [ebx+24]
	movups	XMMWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	rep movsd

; 168  : 		this->value[2] = col_type(m[2], 1);

	movups	xmm0, XMMWORD PTR [eax+32]
	push	6
	pop	ecx
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ebx+48]

; 169  : 	}

	mov	eax, ebx
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	lea	esi, DWORD PTR $T1[ebp]
	movsd	QWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x3@N$01@glm@@QAE@ABU?$tmat4x2@N$01@1@@Z ENDP	; glm::tmat3x3<double,2>::tmat3x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$01@glm@@QAE@ABU?$tmat2x4@N$01@1@@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
$T3 = -24						; size = 24
_m$ = 8							; size = 4
??0?$tmat3x3@N$01@glm@@QAE@ABU?$tmat2x4@N$01@1@@Z PROC	; glm::tmat3x3<double,2>::tmat3x3<double,2>, COMDAT
; _this$ = ecx

; 157  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xorps	xmm0, xmm0
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	2
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat3x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm0
	movups	XMMWORD PTR [eax-16], xmm0
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat3x3

; 158  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T3[ebp]
	push	6
	pop	ecx
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]

; 159  : 		this->value[1] = col_type(m[1]);

	push	6
	movups	XMMWORD PTR $T3[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR $T3[ebp+16], xmm0
	rep movsd
	movups	xmm0, XMMWORD PTR [eax+32]
	pop	ecx
	lea	edi, DWORD PTR [ebx+24]
	movups	XMMWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	movsd	xmm0, QWORD PTR [eax+48]

; 160  : 		this->value[2] = col_type(0, 0, 1);
; 161  : 	}

	mov	eax, ebx
	movsd	QWORD PTR $T2[ebp+16], xmm0
	xorps	xmm0, xmm0
	rep movsd
	push	6
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ebx+48]
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	lea	esi, DWORD PTR $T1[ebp]
	pop	ecx
	movsd	QWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x3@N$01@glm@@QAE@ABU?$tmat2x4@N$01@1@@Z ENDP	; glm::tmat3x3<double,2>::tmat3x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$01@glm@@QAE@ABU?$tmat3x2@N$01@1@@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
$T3 = -24						; size = 24
_m$ = 8							; size = 4
??0?$tmat3x3@N$01@glm@@QAE@ABU?$tmat3x2@N$01@1@@Z PROC	; glm::tmat3x3<double,2>::tmat3x3<double,2>, COMDAT
; _this$ = ecx

; 149  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xorps	xmm1, xmm1
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	2
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat3x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm1
	movups	XMMWORD PTR [eax-16], xmm1
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat3x3

; 150  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T3[ebp]
	push	6
	pop	ecx
	movsd	QWORD PTR $T3[ebp+16], xmm1
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]

; 151  : 		this->value[1] = col_type(m[1], 0);

	push	6
	movups	XMMWORD PTR $T3[ebp], xmm0
	rep movsd
	movups	xmm0, XMMWORD PTR [eax+16]
	pop	ecx
	movsd	QWORD PTR $T2[ebp+16], xmm1
	lea	edi, DWORD PTR [ebx+24]
	movups	XMMWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	rep movsd

; 152  : 		this->value[2] = col_type(m[2], 1);

	movups	xmm0, XMMWORD PTR [eax+32]
	push	6
	pop	ecx
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ebx+48]

; 153  : 	}

	mov	eax, ebx
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	lea	esi, DWORD PTR $T1[ebp]
	movsd	QWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x3@N$01@glm@@QAE@ABU?$tmat3x2@N$01@1@@Z ENDP	; glm::tmat3x3<double,2>::tmat3x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$01@glm@@QAE@ABU?$tmat2x3@N$01@1@@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
_m$ = 8							; size = 4
??0?$tmat3x3@N$01@glm@@QAE@ABU?$tmat2x3@N$01@1@@Z PROC	; glm::tmat3x3<double,2>::tmat3x3<double,2>, COMDAT
; _this$ = ecx

; 141  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	edx, ecx
	xorps	xmm0, xmm0
	push	2
	pop	ecx
	lea	eax, DWORD PTR [edx+16]
$LL4@tmat3x3:
	dec	ecx
	movsd	QWORD PTR [eax], xmm0
	movups	XMMWORD PTR [eax-16], xmm0
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat3x3

; 142  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	push	esi
	push	edi
	push	6
	pop	ecx

; 143  : 		this->value[1] = m[1];

	push	6
	mov	esi, eax
	mov	edi, edx
	rep movsd
	pop	ecx
	lea	esi, DWORD PTR [eax+24]

; 144  : 		this->value[2] = col_type(0, 0, 1);
; 145  : 	}

	mov	eax, edx
	lea	edi, DWORD PTR [edx+24]
	rep movsd
	push	6
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [edx+48]
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	lea	esi, DWORD PTR $T1[ebp]
	pop	ecx
	movsd	QWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x3@N$01@glm@@QAE@ABU?$tmat2x3@N$01@1@@Z ENDP	; glm::tmat3x3<double,2>::tmat3x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$01@glm@@QAE@ABU?$tmat4x4@N$01@1@@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
$T3 = -24						; size = 24
_m$ = 8							; size = 4
??0?$tmat3x3@N$01@glm@@QAE@ABU?$tmat4x4@N$01@1@@Z PROC	; glm::tmat3x3<double,2>::tmat3x3<double,2>, COMDAT
; _this$ = ecx

; 133  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xorps	xmm0, xmm0
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	2
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat3x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm0
	movups	XMMWORD PTR [eax-16], xmm0
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat3x3

; 134  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T3[ebp]
	push	6
	pop	ecx
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]

; 135  : 		this->value[1] = col_type(m[1]);

	push	6
	movups	XMMWORD PTR $T3[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR $T3[ebp+16], xmm0
	rep movsd
	movups	xmm0, XMMWORD PTR [eax+32]
	pop	ecx
	lea	edi, DWORD PTR [ebx+24]
	movups	XMMWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	movsd	xmm0, QWORD PTR [eax+48]
	movsd	QWORD PTR $T2[ebp+16], xmm0
	rep movsd

; 136  : 		this->value[2] = col_type(m[2]);

	movups	xmm0, XMMWORD PTR [eax+64]
	push	6
	pop	ecx
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ebx+48]
	movsd	xmm0, QWORD PTR [eax+80]
	lea	esi, DWORD PTR $T1[ebp]
	movsd	QWORD PTR $T1[ebp+16], xmm0

; 137  : 	}

	mov	eax, ebx
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x3@N$01@glm@@QAE@ABU?$tmat4x4@N$01@1@@Z ENDP	; glm::tmat3x3<double,2>::tmat3x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$01@glm@@QAE@ABU?$tmat2x2@N$01@1@@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
$T3 = -24						; size = 24
_m$ = 8							; size = 4
??0?$tmat3x3@N$01@glm@@QAE@ABU?$tmat2x2@N$01@1@@Z PROC	; glm::tmat3x3<double,2>::tmat3x3<double,2>, COMDAT
; _this$ = ecx

; 125  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xorps	xmm1, xmm1
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	2
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat3x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm1
	movups	XMMWORD PTR [eax-16], xmm1
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat3x3

; 126  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T3[ebp]
	push	6
	pop	ecx
	movsd	QWORD PTR $T3[ebp+16], xmm1
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]

; 127  : 		this->value[1] = col_type(m[1], 0);

	push	6
	movups	XMMWORD PTR $T3[ebp], xmm0
	rep movsd
	movups	xmm0, XMMWORD PTR [eax+16]
	pop	ecx
	movsd	QWORD PTR $T2[ebp+16], xmm1
	lea	edi, DWORD PTR [ebx+24]
	movups	XMMWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]

; 128  : 		this->value[2] = col_type(0, 0, 1);
; 129  : 	}

	mov	eax, ebx
	xorps	xmm0, xmm0
	rep movsd
	push	6
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ebx+48]
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	lea	esi, DWORD PTR $T1[ebp]
	pop	ecx
	movsd	QWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x3@N$01@glm@@QAE@ABU?$tmat2x2@N$01@1@@Z ENDP	; glm::tmat3x3<double,2>::tmat3x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$01@glm@@QAE@ABU?$tvec3@N$01@1@00@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??0?$tmat3x3@N$01@glm@@QAE@ABU?$tvec3@N$01@1@00@Z PROC	; glm::tmat3x3<double,2>::tmat3x3<double,2>, COMDAT
; _this$ = ecx

; 73   : 	{

	push	ebp
	mov	ebp, esp
	mov	edx, ecx
	xorps	xmm0, xmm0
	push	2
	pop	ecx
	lea	eax, DWORD PTR [edx+16]
$LL4@tmat3x3:
	dec	ecx
	movsd	QWORD PTR [eax], xmm0
	movups	XMMWORD PTR [eax-16], xmm0
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat3x3

; 74   : 		this->value[0] = v0;

	push	esi
	mov	esi, DWORD PTR _v0$[ebp]

; 75   : 		this->value[1] = v1;
; 76   : 		this->value[2] = v2;
; 77   : 	}

	mov	eax, edx
	push	edi
	push	6
	pop	ecx
	push	6
	mov	edi, edx
	rep movsd
	mov	esi, DWORD PTR _v1$[ebp]
	lea	edi, DWORD PTR [edx+24]
	pop	ecx
	rep movsd
	mov	esi, DWORD PTR _v2$[ebp]
	lea	edi, DWORD PTR [edx+48]
	push	6
	pop	ecx
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	12					; 0000000cH
??0?$tmat3x3@N$01@glm@@QAE@ABU?$tvec3@N$01@1@00@Z ENDP	; glm::tmat3x3<double,2>::tmat3x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$01@glm@@QAE@NNNNNNNNN@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
$T3 = -24						; size = 24
_x0$ = 8						; size = 8
_y0$ = 16						; size = 8
_z0$ = 24						; size = 8
_x1$ = 32						; size = 8
_y1$ = 40						; size = 8
_z1$ = 48						; size = 8
_x2$ = 56						; size = 8
_y2$ = 64						; size = 8
_z2$ = 72						; size = 8
??0?$tmat3x3@N$01@glm@@QAE@NNNNNNNNN@Z PROC		; glm::tmat3x3<double,2>::tmat3x3<double,2>, COMDAT
; _this$ = ecx

; 60   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xorps	xmm0, xmm0
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	2
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat3x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm0
	movups	XMMWORD PTR [eax-16], xmm0
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat3x3

; 61   : 		this->value[0] = col_type(x0, y0, z0);

	movsd	xmm0, QWORD PTR _x0$[ebp]
	lea	esi, DWORD PTR $T3[ebp]
	movsd	QWORD PTR $T3[ebp], xmm0
	mov	edi, ebx
	movsd	xmm0, QWORD PTR _y0$[ebp]

; 62   : 		this->value[1] = col_type(x1, y1, z1);
; 63   : 		this->value[2] = col_type(x2, y2, z2);
; 64   : 	}

	mov	eax, ebx
	movsd	QWORD PTR $T3[ebp+8], xmm0
	movsd	xmm0, QWORD PTR _z0$[ebp]
	movsd	QWORD PTR $T3[ebp+16], xmm0
	movsd	xmm0, QWORD PTR _x1$[ebp]
	push	6
	pop	ecx
	rep movsd
	movsd	QWORD PTR $T2[ebp], xmm0
	lea	edi, DWORD PTR [ebx+24]
	movsd	xmm0, QWORD PTR _y1$[ebp]
	lea	esi, DWORD PTR $T2[ebp]
	movsd	QWORD PTR $T2[ebp+8], xmm0
	movsd	xmm0, QWORD PTR _z1$[ebp]
	push	6
	movsd	QWORD PTR $T2[ebp+16], xmm0
	movsd	xmm0, QWORD PTR _x2$[ebp]
	pop	ecx
	rep movsd
	movsd	QWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ebx+48]
	movsd	xmm0, QWORD PTR _y2$[ebp]
	lea	esi, DWORD PTR $T1[ebp]
	push	6
	movsd	QWORD PTR $T1[ebp+8], xmm0
	movsd	xmm0, QWORD PTR _z2$[ebp]
	pop	ecx
	movsd	QWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	72					; 00000048H
??0?$tmat3x3@N$01@glm@@QAE@NNNNNNNNN@Z ENDP		; glm::tmat3x3<double,2>::tmat3x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$01@glm@@QAE@N@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
$T3 = -24						; size = 24
_scalar$ = 8						; size = 8
??0?$tmat3x3@N$01@glm@@QAE@N@Z PROC			; glm::tmat3x3<double,2>::tmat3x3<double,2>, COMDAT
; _this$ = ecx

; 47   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xorps	xmm2, xmm2
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	2
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat3x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm2
	movups	XMMWORD PTR [eax-16], xmm2
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat3x3

; 48   : 		this->value[0] = col_type(scalar, 0, 0);

	movsd	xmm1, QWORD PTR _scalar$[ebp]
	lea	esi, DWORD PTR $T3[ebp]
	push	6
	pop	ecx
	movsd	QWORD PTR $T3[ebp], xmm1
	xorps	xmm0, xmm0
	movupd	XMMWORD PTR $T3[ebp+8], xmm0

; 49   : 		this->value[1] = col_type(0, scalar, 0);

	push	6
	mov	edi, ebx

; 50   : 		this->value[2] = col_type(0, 0, scalar);
; 51   : 	}

	mov	eax, ebx
	rep movsd
	pop	ecx
	movsd	QWORD PTR $T2[ebp], xmm2
	lea	edi, DWORD PTR [ebx+24]
	movsd	QWORD PTR $T2[ebp+8], xmm1
	lea	esi, DWORD PTR $T2[ebp]
	movsd	QWORD PTR $T2[ebp+16], xmm2
	rep movsd
	push	6
	pop	ecx
	lea	edi, DWORD PTR [ebx+48]
	movsd	QWORD PTR $T1[ebp+16], xmm1
	lea	esi, DWORD PTR $T1[ebp]
	movupd	XMMWORD PTR $T1[ebp], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$tmat3x3@N$01@glm@@QAE@N@Z ENDP			; glm::tmat3x3<double,2>::tmat3x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat3x3@N$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat3x3<double,2>::tmat3x3<double,2>, COMDAT
; _this$ = ecx

; 43   : 	{}

	push	2
	pop	edx
	lea	eax, DWORD PTR [ecx+16]
	xorps	xmm0, xmm0
$LL4@tmat3x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm0
	movups	XMMWORD PTR [eax-16], xmm0
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat3x3
	mov	eax, ecx
	ret	4
??0?$tmat3x3@N$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat3x3<double,2>::tmat3x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tmat3x3@N$01@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tmat3x3@N$01@glm@@QAE@ABU01@@Z PROC		; glm::tmat3x3<double,2>::tmat3x3<double,2>, COMDAT
; _this$ = ecx

; 188  : template struct tmat3x3<float64, lowp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	18					; 00000012H
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tmat3x3@N$01@glm@@QAE@ABU01@@Z ENDP		; glm::tmat3x3<double,2>::tmat3x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$01@glm@@QAE@XZ
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
$T3 = -24						; size = 24
??0?$tmat3x3@N$01@glm@@QAE@XZ PROC			; glm::tmat3x3<double,2>::tmat3x3<double,2>, COMDAT
; _this$ = ecx

; 13   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xorps	xmm1, xmm1
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	push	2
	pop	edx
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat3x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm1
	movups	XMMWORD PTR [eax-16], xmm1
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat3x3

; 14   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 15   : 				this->value[0] = col_type(1, 0, 0);

	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	lea	esi, DWORD PTR $T3[ebp]
	push	6
	pop	ecx
	movupd	XMMWORD PTR $T3[ebp], xmm0
	mov	edi, ebx

; 16   : 				this->value[1] = col_type(0, 1, 0);
; 17   : 				this->value[2] = col_type(0, 0, 1);
; 18   : #			endif
; 19   : 		}

	mov	eax, ebx
	movaps	xmm0, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	push	6
	movsd	QWORD PTR $T3[ebp+16], xmm1
	rep movsd
	pop	ecx
	movupd	XMMWORD PTR $T2[ebp], xmm0
	lea	edi, DWORD PTR [ebx+24]
	movsd	QWORD PTR $T2[ebp+16], xmm1
	lea	esi, DWORD PTR $T2[ebp]
	rep movsd
	xorps	xmm0, xmm0
	lea	edi, DWORD PTR [ebx+48]
	push	6
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	pop	ecx
	movsd	QWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$tmat3x3@N$01@glm@@QAE@XZ ENDP			; glm::tmat3x3<double,2>::tmat3x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??F?$tmat3x3@M$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat3x3@M$01@glm@@QAE?AU01@H@Z PROC		; glm::tmat3x3<float,2>::operator--, COMDAT
; _this$ = ecx

; 330  : 	{

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi

; 331  : 		tmat3x3<T, P> Result(*this);

	mov	edi, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, ecx
	push	9
	pop	ecx
	mov	esi, eax
	rep movsd

; 332  : 		--*this;

	mov	ecx, eax
	call	??F?$tmat3x3@M$01@glm@@QAEAAU01@XZ	; glm::tmat3x3<float,2>::operator--

; 333  : 		return Result;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi

; 334  : 	}

	pop	ebp
	ret	8
??F?$tmat3x3@M$01@glm@@QAE?AU01@H@Z ENDP		; glm::tmat3x3<float,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??E?$tmat3x3@M$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat3x3@M$01@glm@@QAE?AU01@H@Z PROC		; glm::tmat3x3<float,2>::operator++, COMDAT
; _this$ = ecx

; 322  : 	{

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi

; 323  : 		tmat3x3<T, P> Result(*this);

	mov	edi, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, ecx
	push	9
	pop	ecx
	mov	esi, eax
	rep movsd

; 324  : 		++*this;

	mov	ecx, eax
	call	??E?$tmat3x3@M$01@glm@@QAEAAU01@XZ	; glm::tmat3x3<float,2>::operator++

; 325  : 		return Result;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi

; 326  : 	}

	pop	ebp
	ret	8
??E?$tmat3x3@M$01@glm@@QAE?AU01@H@Z ENDP		; glm::tmat3x3<float,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??F?$tmat3x3@M$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat3x3@M$01@glm@@QAEAAU01@XZ PROC			; glm::tmat3x3<float,2>::operator--, COMDAT
; _this$ = ecx

; 314  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 315  : 		--this->value[1];
; 316  : 		--this->value[2];
; 317  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movss	xmm0, DWORD PTR [ecx+32]
	subss	xmm0, xmm1
	movss	DWORD PTR [ecx+32], xmm0

; 318  : 	}

	ret	0
??F?$tmat3x3@M$01@glm@@QAEAAU01@XZ ENDP			; glm::tmat3x3<float,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??E?$tmat3x3@M$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat3x3@M$01@glm@@QAEAAU01@XZ PROC			; glm::tmat3x3<float,2>::operator++, COMDAT
; _this$ = ecx

; 305  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 306  : 		++this->value[1];
; 307  : 		++this->value[2];
; 308  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movss	xmm0, DWORD PTR [ecx+32]
	addss	xmm0, xmm1
	movss	DWORD PTR [ecx+32], xmm0

; 309  : 	}

	ret	0
??E?$tmat3x3@M$01@glm@@QAEAAU01@XZ ENDP			; glm::tmat3x3<float,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tmat3x3@M$01@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tmat3x3@M$01@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tmat3x3<float,2>::operator=, COMDAT
; _this$ = ecx

; 187  : template struct tmat3x3<float32, lowp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	9
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tmat3x3@M$01@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tmat3x3<float,2>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??A?$tmat3x3@M$01@glm@@QBEABU?$tvec3@M$01@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat3x3@M$01@glm@@QBEABU?$tvec3@M$01@1@H@Z PROC	; glm::tmat3x3<float,2>::operator[], COMDAT
; _this$ = ecx

; 198  : 	{

	push	ebp
	mov	ebp, esp

; 199  : 		assert(i < this->length());
; 200  : 		return this->value[i];

	imul	eax, DWORD PTR _i$[ebp], 12
	add	eax, ecx

; 201  : 	}

	pop	ebp
	ret	4
??A?$tmat3x3@M$01@glm@@QBEABU?$tvec3@M$01@1@H@Z ENDP	; glm::tmat3x3<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??A?$tmat3x3@M$01@glm@@QAEAAU?$tvec3@M$01@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat3x3@M$01@glm@@QAEAAU?$tvec3@M$01@1@H@Z PROC	; glm::tmat3x3<float,2>::operator[], COMDAT
; _this$ = ecx

; 191  : 	{

	push	ebp
	mov	ebp, esp

; 192  : 		assert(i < this->length());
; 193  : 		return this->value[i];

	imul	eax, DWORD PTR _i$[ebp], 12
	add	eax, ecx

; 194  : 	}

	pop	ebp
	ret	4
??A?$tmat3x3@M$01@glm@@QAEAAU?$tvec3@M$01@1@H@Z ENDP	; glm::tmat3x3<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.hpp
;	COMDAT ?length@?$tmat3x3@M$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat3x3@M$01@glm@@SAHXZ PROC			; glm::tmat3x3<float,2>::length, COMDAT

; 79   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	push	3
	pop	eax
	ret	0
?length@?$tmat3x3@M$01@glm@@SAHXZ ENDP			; glm::tmat3x3<float,2>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$01@glm@@QAE@ABU?$tmat4x3@M$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x3@M$01@glm@@QAE@ABU?$tmat4x3@M$01@1@@Z PROC	; glm::tmat3x3<float,2>::tmat3x3<float,2>, COMDAT
; _this$ = ecx

; 181  : 	{

	push	ebp
	mov	ebp, esp
	push	2
	pop	edx
	lea	eax, DWORD PTR [ecx+8]
$LL4@tmat3x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat3x3

; 182  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	esi, eax
	mov	edi, ecx
	movsd
	movsd
	movsd

; 183  : 		this->value[1] = m[1];

	lea	esi, DWORD PTR [eax+12]
	lea	edi, DWORD PTR [ecx+12]
	movsd
	movsd
	movsd

; 184  : 		this->value[2] = m[2];

	lea	esi, DWORD PTR [eax+24]

; 185  : 	}

	mov	eax, ecx
	lea	edi, DWORD PTR [ecx+24]
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tmat3x3@M$01@glm@@QAE@ABU?$tmat4x3@M$01@1@@Z ENDP	; glm::tmat3x3<float,2>::tmat3x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$01@glm@@QAE@ABU?$tmat3x4@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat3x3@M$01@glm@@QAE@ABU?$tmat3x4@M$01@1@@Z PROC	; glm::tmat3x3<float,2>::tmat3x3<float,2>, COMDAT
; _this$ = ecx

; 173  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	lea	eax, DWORD PTR [ecx+8]
	push	2
	pop	edx
$LL4@tmat3x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat3x3

; 174  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T3[ebp]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T3[ebp+8], xmm0
	movsd
	movsd
	movsd

; 175  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [eax+16]
	lea	edi, DWORD PTR [ecx+12]
	movss	DWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+24]
	movss	DWORD PTR $T2[ebp+8], xmm0
	movsd
	movsd
	movsd

; 176  : 		this->value[2] = col_type(m[2]);

	movss	xmm0, DWORD PTR [eax+32]
	lea	edi, DWORD PTR [ecx+24]
	movss	DWORD PTR $T1[ebp], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	movss	xmm0, DWORD PTR [eax+36]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+40]

; 177  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+8], xmm0
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x3@M$01@glm@@QAE@ABU?$tmat3x4@M$01@1@@Z ENDP	; glm::tmat3x3<float,2>::tmat3x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$01@glm@@QAE@ABU?$tmat4x2@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat3x3@M$01@glm@@QAE@ABU?$tmat4x2@M$01@1@@Z PROC	; glm::tmat3x3<float,2>::tmat3x3<float,2>, COMDAT
; _this$ = ecx

; 165  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	lea	eax, DWORD PTR [ecx+8]
	push	2
	pop	edx
$LL4@tmat3x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat3x3

; 166  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	and	DWORD PTR $T3[ebp+8], 0
	push	esi
	push	edi
	movss	xmm0, DWORD PTR [eax]
	lea	esi, DWORD PTR $T3[ebp]
	movss	DWORD PTR $T3[ebp], xmm0
	mov	edi, ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movsd
	movsd
	movsd

; 167  : 		this->value[1] = col_type(m[1], 0);

	movss	xmm0, DWORD PTR [eax+8]
	lea	edi, DWORD PTR [ecx+12]
	and	DWORD PTR $T2[ebp+8], 0
	lea	esi, DWORD PTR $T2[ebp]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movsd
	movsd
	movsd

; 168  : 		this->value[2] = col_type(m[2], 1);

	movss	xmm0, DWORD PTR [eax+16]
	lea	edi, DWORD PTR [ecx+24]
	movss	DWORD PTR $T1[ebp], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	movss	xmm0, DWORD PTR [eax+20]

; 169  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	DWORD PTR $T1[ebp+8], 1065353216	; 3f800000H
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x3@M$01@glm@@QAE@ABU?$tmat4x2@M$01@1@@Z ENDP	; glm::tmat3x3<float,2>::tmat3x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$01@glm@@QAE@ABU?$tmat2x4@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat3x3@M$01@glm@@QAE@ABU?$tmat2x4@M$01@1@@Z PROC	; glm::tmat3x3<float,2>::tmat3x3<float,2>, COMDAT
; _this$ = ecx

; 157  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	lea	eax, DWORD PTR [ecx+8]
	push	2
	pop	edx
$LL4@tmat3x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat3x3

; 158  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T3[ebp]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T3[ebp+8], xmm0
	movsd
	movsd
	movsd

; 159  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [eax+16]
	lea	edi, DWORD PTR [ecx+12]
	movss	DWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+24]

; 160  : 		this->value[2] = col_type(0, 0, 1);
; 161  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T2[ebp+8], xmm0
	movsd
	movsd
	movsd
	and	DWORD PTR $T1[ebp], 0
	lea	edi, DWORD PTR [ecx+24]
	and	DWORD PTR $T1[ebp+4], 0
	lea	esi, DWORD PTR $T1[ebp]
	mov	DWORD PTR $T1[ebp+8], 1065353216	; 3f800000H
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x3@M$01@glm@@QAE@ABU?$tmat2x4@M$01@1@@Z ENDP	; glm::tmat3x3<float,2>::tmat3x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$01@glm@@QAE@ABU?$tmat3x2@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat3x3@M$01@glm@@QAE@ABU?$tmat3x2@M$01@1@@Z PROC	; glm::tmat3x3<float,2>::tmat3x3<float,2>, COMDAT
; _this$ = ecx

; 149  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	lea	eax, DWORD PTR [ecx+8]
	push	2
	pop	edx
$LL4@tmat3x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat3x3

; 150  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	and	DWORD PTR $T3[ebp+8], 0
	push	esi
	push	edi
	movss	xmm0, DWORD PTR [eax]
	lea	esi, DWORD PTR $T3[ebp]
	movss	DWORD PTR $T3[ebp], xmm0
	mov	edi, ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movsd
	movsd
	movsd

; 151  : 		this->value[1] = col_type(m[1], 0);

	movss	xmm0, DWORD PTR [eax+8]
	lea	edi, DWORD PTR [ecx+12]
	and	DWORD PTR $T2[ebp+8], 0
	lea	esi, DWORD PTR $T2[ebp]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movsd
	movsd
	movsd

; 152  : 		this->value[2] = col_type(m[2], 1);

	movss	xmm0, DWORD PTR [eax+16]
	lea	edi, DWORD PTR [ecx+24]
	movss	DWORD PTR $T1[ebp], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	movss	xmm0, DWORD PTR [eax+20]

; 153  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	DWORD PTR $T1[ebp+8], 1065353216	; 3f800000H
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x3@M$01@glm@@QAE@ABU?$tmat3x2@M$01@1@@Z ENDP	; glm::tmat3x3<float,2>::tmat3x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$01@glm@@QAE@ABU?$tmat2x3@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat3x3@M$01@glm@@QAE@ABU?$tmat2x3@M$01@1@@Z PROC	; glm::tmat3x3<float,2>::tmat3x3<float,2>, COMDAT
; _this$ = ecx

; 141  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	lea	eax, DWORD PTR [ecx+8]
	push	2
	pop	edx
$LL4@tmat3x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat3x3

; 142  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi

; 143  : 		this->value[1] = m[1];
; 144  : 		this->value[2] = col_type(0, 0, 1);

	and	DWORD PTR $T1[ebp], 0
	mov	esi, eax
	and	DWORD PTR $T1[ebp+4], 0
	mov	edi, ecx
	mov	DWORD PTR $T1[ebp+8], 1065353216	; 3f800000H
	movsd
	movsd
	movsd
	lea	esi, DWORD PTR [eax+12]

; 145  : 	}

	mov	eax, ecx
	lea	edi, DWORD PTR [ecx+12]
	movsd
	movsd
	movsd
	lea	edi, DWORD PTR [ecx+24]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x3@M$01@glm@@QAE@ABU?$tmat2x3@M$01@1@@Z ENDP	; glm::tmat3x3<float,2>::tmat3x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$01@glm@@QAE@ABU?$tmat4x4@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat3x3@M$01@glm@@QAE@ABU?$tmat4x4@M$01@1@@Z PROC	; glm::tmat3x3<float,2>::tmat3x3<float,2>, COMDAT
; _this$ = ecx

; 133  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	lea	eax, DWORD PTR [ecx+8]
	push	2
	pop	edx
$LL4@tmat3x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat3x3

; 134  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T3[ebp]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T3[ebp+8], xmm0
	movsd
	movsd
	movsd

; 135  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [eax+16]
	lea	edi, DWORD PTR [ecx+12]
	movss	DWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+24]
	movss	DWORD PTR $T2[ebp+8], xmm0
	movsd
	movsd
	movsd

; 136  : 		this->value[2] = col_type(m[2]);

	movss	xmm0, DWORD PTR [eax+32]
	lea	edi, DWORD PTR [ecx+24]
	movss	DWORD PTR $T1[ebp], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	movss	xmm0, DWORD PTR [eax+36]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+40]

; 137  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+8], xmm0
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x3@M$01@glm@@QAE@ABU?$tmat4x4@M$01@1@@Z ENDP	; glm::tmat3x3<float,2>::tmat3x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$01@glm@@QAE@ABU?$tmat2x2@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat3x3@M$01@glm@@QAE@ABU?$tmat2x2@M$01@1@@Z PROC	; glm::tmat3x3<float,2>::tmat3x3<float,2>, COMDAT
; _this$ = ecx

; 125  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	lea	eax, DWORD PTR [ecx+8]
	push	2
	pop	edx
$LL4@tmat3x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat3x3

; 126  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	and	DWORD PTR $T3[ebp+8], 0
	push	esi
	push	edi
	movss	xmm0, DWORD PTR [eax]
	lea	esi, DWORD PTR $T3[ebp]
	movss	DWORD PTR $T3[ebp], xmm0
	mov	edi, ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movsd
	movsd
	movsd

; 127  : 		this->value[1] = col_type(m[1], 0);

	movss	xmm0, DWORD PTR [eax+8]
	lea	edi, DWORD PTR [ecx+12]
	and	DWORD PTR $T2[ebp+8], 0
	lea	esi, DWORD PTR $T2[ebp]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+12]

; 128  : 		this->value[2] = col_type(0, 0, 1);
; 129  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T2[ebp+4], xmm0
	movsd
	movsd
	movsd
	and	DWORD PTR $T1[ebp], 0
	lea	edi, DWORD PTR [ecx+24]
	and	DWORD PTR $T1[ebp+4], 0
	lea	esi, DWORD PTR $T1[ebp]
	mov	DWORD PTR $T1[ebp+8], 1065353216	; 3f800000H
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x3@M$01@glm@@QAE@ABU?$tmat2x2@M$01@1@@Z ENDP	; glm::tmat3x3<float,2>::tmat3x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$01@glm@@QAE@ABU?$tvec3@M$01@1@00@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??0?$tmat3x3@M$01@glm@@QAE@ABU?$tvec3@M$01@1@00@Z PROC	; glm::tmat3x3<float,2>::tmat3x3<float,2>, COMDAT
; _this$ = ecx

; 73   : 	{

	push	ebp
	mov	ebp, esp
	push	2
	pop	edx
	lea	eax, DWORD PTR [ecx+8]
$LL4@tmat3x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat3x3

; 74   : 		this->value[0] = v0;

	push	esi
	mov	esi, DWORD PTR _v0$[ebp]

; 75   : 		this->value[1] = v1;
; 76   : 		this->value[2] = v2;
; 77   : 	}

	mov	eax, ecx
	push	edi
	mov	edi, ecx
	movsd
	movsd
	movsd
	mov	esi, DWORD PTR _v1$[ebp]
	lea	edi, DWORD PTR [ecx+12]
	movsd
	movsd
	movsd
	mov	esi, DWORD PTR _v2$[ebp]
	lea	edi, DWORD PTR [ecx+24]
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	12					; 0000000cH
??0?$tmat3x3@M$01@glm@@QAE@ABU?$tvec3@M$01@1@00@Z ENDP	; glm::tmat3x3<float,2>::tmat3x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$01@glm@@QAE@MMMMMMMMM@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_z0$ = 16						; size = 4
_x1$ = 20						; size = 4
_y1$ = 24						; size = 4
_z1$ = 28						; size = 4
_x2$ = 32						; size = 4
_y2$ = 36						; size = 4
_z2$ = 40						; size = 4
??0?$tmat3x3@M$01@glm@@QAE@MMMMMMMMM@Z PROC		; glm::tmat3x3<float,2>::tmat3x3<float,2>, COMDAT
; _this$ = ecx

; 60   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	lea	eax, DWORD PTR [ecx+8]
	push	2
	pop	edx
$LL4@tmat3x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat3x3

; 61   : 		this->value[0] = col_type(x0, y0, z0);

	movss	xmm0, DWORD PTR _x0$[ebp]

; 62   : 		this->value[1] = col_type(x1, y1, z1);
; 63   : 		this->value[2] = col_type(x2, y2, z2);
; 64   : 	}

	mov	eax, ecx
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR _y0$[ebp]
	push	esi
	movss	DWORD PTR $T3[ebp+4], xmm0
	lea	esi, DWORD PTR $T3[ebp]
	movss	xmm0, DWORD PTR _z0$[ebp]
	push	edi
	movss	DWORD PTR $T3[ebp+8], xmm0
	mov	edi, ecx
	movss	xmm0, DWORD PTR _x1$[ebp]
	movsd
	movsd
	movsd
	movss	DWORD PTR $T2[ebp], xmm0
	lea	edi, DWORD PTR [ecx+12]
	movss	xmm0, DWORD PTR _y1$[ebp]
	lea	esi, DWORD PTR $T2[ebp]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR _z1$[ebp]
	movss	DWORD PTR $T2[ebp+8], xmm0
	movss	xmm0, DWORD PTR _x2$[ebp]
	movsd
	movsd
	movsd
	movss	DWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+24]
	movss	xmm0, DWORD PTR _y2$[ebp]
	lea	esi, DWORD PTR $T1[ebp]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR _z2$[ebp]
	movss	DWORD PTR $T1[ebp+8], xmm0
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	36					; 00000024H
??0?$tmat3x3@M$01@glm@@QAE@MMMMMMMMM@Z ENDP		; glm::tmat3x3<float,2>::tmat3x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$01@glm@@QAE@M@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
_scalar$ = 8						; size = 4
??0?$tmat3x3@M$01@glm@@QAE@M@Z PROC			; glm::tmat3x3<float,2>::tmat3x3<float,2>, COMDAT
; _this$ = ecx

; 47   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	lea	eax, DWORD PTR [ecx+8]
	push	2
	pop	edx
$LL4@tmat3x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat3x3

; 48   : 		this->value[0] = col_type(scalar, 0, 0);

	and	DWORD PTR $T3[ebp+8], 0

; 49   : 		this->value[1] = col_type(0, scalar, 0);
; 50   : 		this->value[2] = col_type(0, 0, scalar);
; 51   : 	}

	mov	eax, ecx
	and	DWORD PTR $T3[ebp+4], 0
	movss	xmm0, DWORD PTR _scalar$[ebp]
	push	esi
	push	edi
	movss	DWORD PTR $T3[ebp], xmm0
	lea	esi, DWORD PTR $T3[ebp]
	mov	edi, ecx
	movsd
	movsd
	movsd
	and	DWORD PTR $T2[ebp], 0
	lea	edi, DWORD PTR [ecx+12]
	and	DWORD PTR $T2[ebp+8], 0
	lea	esi, DWORD PTR $T2[ebp]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movsd
	movsd
	movsd
	and	DWORD PTR $T1[ebp], 0
	lea	edi, DWORD PTR [ecx+24]
	and	DWORD PTR $T1[ebp+4], 0
	lea	esi, DWORD PTR $T1[ebp]
	movss	DWORD PTR $T1[ebp+8], xmm0
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x3@M$01@glm@@QAE@M@Z ENDP			; glm::tmat3x3<float,2>::tmat3x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat3x3@M$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat3x3<float,2>::tmat3x3<float,2>, COMDAT
; _this$ = ecx

; 43   : 	{}

	push	2
	pop	edx
	lea	eax, DWORD PTR [ecx+8]
$LL4@tmat3x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat3x3
	mov	eax, ecx
	ret	4
??0?$tmat3x3@M$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat3x3<float,2>::tmat3x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tmat3x3@M$01@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tmat3x3@M$01@glm@@QAE@ABU01@@Z PROC		; glm::tmat3x3<float,2>::tmat3x3<float,2>, COMDAT
; _this$ = ecx

; 187  : template struct tmat3x3<float32, lowp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	9
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tmat3x3@M$01@glm@@QAE@ABU01@@Z ENDP		; glm::tmat3x3<float,2>::tmat3x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$01@glm@@QAE@XZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
??0?$tmat3x3@M$01@glm@@QAE@XZ PROC			; glm::tmat3x3<float,2>::tmat3x3<float,2>, COMDAT
; _this$ = ecx

; 13   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	lea	eax, DWORD PTR [ecx+8]
	push	2
	pop	edx
$LL4@tmat3x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat3x3

; 14   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 15   : 				this->value[0] = col_type(1, 0, 0);

	and	DWORD PTR $T3[ebp+8], 0

; 16   : 				this->value[1] = col_type(0, 1, 0);
; 17   : 				this->value[2] = col_type(0, 0, 1);
; 18   : #			endif
; 19   : 		}

	mov	eax, ecx
	and	DWORD PTR $T3[ebp+4], 0
	push	esi
	push	edi
	mov	DWORD PTR $T3[ebp], 1065353216		; 3f800000H
	lea	esi, DWORD PTR $T3[ebp]
	mov	edi, ecx
	movsd
	movsd
	movsd
	and	DWORD PTR $T2[ebp], 0
	lea	edi, DWORD PTR [ecx+12]
	and	DWORD PTR $T2[ebp+8], 0
	lea	esi, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T2[ebp+4], 1065353216	; 3f800000H
	movsd
	movsd
	movsd
	and	DWORD PTR $T1[ebp], 0
	lea	edi, DWORD PTR [ecx+24]
	and	DWORD PTR $T1[ebp+4], 0
	lea	esi, DWORD PTR $T1[ebp]
	mov	DWORD PTR $T1[ebp+8], 1065353216	; 3f800000H
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$tmat3x3@M$01@glm@@QAE@XZ ENDP			; glm::tmat3x3<float,2>::tmat3x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??F?$tmat3x2@N$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat3x2@N$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tmat3x2<double,0>::operator--, COMDAT
; _this$ = ecx

; 314  : 	{

	push	ebp
	mov	ebp, esp

; 315  : 		tmat3x2<T, P> Result(*this);
; 316  : 		--*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	mov	edx, ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	movups	xmm0, XMMWORD PTR [edx]
	push	12					; 0000000cH
	pop	ecx
	subpd	xmm0, xmm1
	mov	esi, edx
	mov	edi, eax
	rep movsd
	movups	XMMWORD PTR [edx], xmm0
	pop	edi
	movups	xmm0, XMMWORD PTR [edx+16]
	pop	esi
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+16], xmm0
	movups	xmm0, XMMWORD PTR [edx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+32], xmm0

; 317  : 		return Result;
; 318  : 	}

	pop	ebp
	ret	8
??F?$tmat3x2@N$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tmat3x2<double,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??E?$tmat3x2@N$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat3x2@N$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tmat3x2<double,0>::operator++, COMDAT
; _this$ = ecx

; 306  : 	{

	push	ebp
	mov	ebp, esp

; 307  : 		tmat3x2<T, P> Result(*this);
; 308  : 		++*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	mov	edx, ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	movups	xmm0, XMMWORD PTR [edx]
	push	12					; 0000000cH
	pop	ecx
	addpd	xmm0, xmm1
	mov	esi, edx
	mov	edi, eax
	rep movsd
	movups	XMMWORD PTR [edx], xmm0
	pop	edi
	movups	xmm0, XMMWORD PTR [edx+16]
	pop	esi
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+16], xmm0
	movups	xmm0, XMMWORD PTR [edx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+32], xmm0

; 309  : 		return Result;
; 310  : 	}

	pop	ebp
	ret	8
??E?$tmat3x2@N$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tmat3x2<double,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??F?$tmat3x2@N$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat3x2@N$0A@@glm@@QAEAAU01@XZ PROC		; glm::tmat3x2<double,0>::operator--, COMDAT
; _this$ = ecx

; 298  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 299  : 		--this->value[1];
; 300  : 		--this->value[2];
; 301  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0

; 302  : 	}

	ret	0
??F?$tmat3x2@N$0A@@glm@@QAEAAU01@XZ ENDP		; glm::tmat3x2<double,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??E?$tmat3x2@N$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat3x2@N$0A@@glm@@QAEAAU01@XZ PROC		; glm::tmat3x2<double,0>::operator++, COMDAT
; _this$ = ecx

; 289  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 290  : 		++this->value[1];
; 291  : 		++this->value[2];
; 292  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0

; 293  : 	}

	ret	0
??E?$tmat3x2@N$0A@@glm@@QAEAAU01@XZ ENDP		; glm::tmat3x2<double,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tmat3x2@N$0A@@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tmat3x2@N$0A@@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tmat3x2<double,0>::operator=, COMDAT
; _this$ = ecx

; 184  : template struct tmat3x2<float64, highp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	12					; 0000000cH
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tmat3x2@N$0A@@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tmat3x2<double,0>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??A?$tmat3x2@N$0A@@glm@@QBEABU?$tvec2@N$0A@@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat3x2@N$0A@@glm@@QBEABU?$tvec2@N$0A@@1@H@Z PROC	; glm::tmat3x2<double,0>::operator[], COMDAT
; _this$ = ecx

; 196  : 	{

	push	ebp
	mov	ebp, esp

; 197  : 		assert(i < this->length());
; 198  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, ecx

; 199  : 	}

	pop	ebp
	ret	4
??A?$tmat3x2@N$0A@@glm@@QBEABU?$tvec2@N$0A@@1@H@Z ENDP	; glm::tmat3x2<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??A?$tmat3x2@N$0A@@glm@@QAEAAU?$tvec2@N$0A@@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat3x2@N$0A@@glm@@QAEAAU?$tvec2@N$0A@@1@H@Z PROC	; glm::tmat3x2<double,0>::operator[], COMDAT
; _this$ = ecx

; 189  : 	{

	push	ebp
	mov	ebp, esp

; 190  : 		assert(i < this->length());
; 191  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, ecx

; 192  : 	}

	pop	ebp
	ret	4
??A?$tmat3x2@N$0A@@glm@@QAEAAU?$tvec2@N$0A@@1@H@Z ENDP	; glm::tmat3x2<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.hpp
;	COMDAT ?length@?$tmat3x2@N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat3x2@N$0A@@glm@@SAHXZ PROC			; glm::tmat3x2<double,0>::length, COMDAT

; 80   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	push	3
	pop	eax
	ret	0
?length@?$tmat3x2@N$0A@@glm@@SAHXZ ENDP			; glm::tmat3x2<double,0>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$0A@@glm@@QAE@ABU?$tmat4x3@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat3x2@N$0A@@glm@@QAE@ABU?$tmat4x3@N$0A@@1@@Z PROC ; glm::tmat3x2<double,0>::tmat3x2<double,0>, COMDAT
; _this$ = ecx

; 179  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	xorps	xmm0, xmm0
	push	2
	pop	edx
$LL4@tmat3x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat3x2

; 180  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T3[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR $T3[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 181  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+24]
	lea	edi, DWORD PTR [ecx+16]
	lea	esi, DWORD PTR $T2[ebp]
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 182  : 		this->value[2] = col_type(m[2]);

	movups	xmm0, XMMWORD PTR [eax+48]
	lea	edi, DWORD PTR [ecx+32]

; 183  : 	}

	mov	eax, ecx
	lea	esi, DWORD PTR $T1[ebp]
	movups	XMMWORD PTR $T1[ebp], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x2@N$0A@@glm@@QAE@ABU?$tmat4x3@N$0A@@1@@Z ENDP ; glm::tmat3x2<double,0>::tmat3x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$0A@@glm@@QAE@ABU?$tmat4x2@N$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x2@N$0A@@glm@@QAE@ABU?$tmat4x2@N$0A@@1@@Z PROC ; glm::tmat3x2<double,0>::tmat3x2<double,0>, COMDAT
; _this$ = ecx

; 171  : 	{

	push	ebp
	mov	ebp, esp
	push	2
	mov	eax, ecx
	xorps	xmm0, xmm0
	pop	edx
$LL4@tmat3x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat3x2

; 172  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	esi, eax
	mov	edi, ecx
	movsd
	movsd
	movsd
	movsd

; 173  : 		this->value[1] = m[1];

	lea	esi, DWORD PTR [eax+16]
	lea	edi, DWORD PTR [ecx+16]
	movsd
	movsd
	movsd
	movsd

; 174  : 		this->value[2] = m[2];

	lea	esi, DWORD PTR [eax+32]

; 175  : 	}

	mov	eax, ecx
	lea	edi, DWORD PTR [ecx+32]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tmat3x2@N$0A@@glm@@QAE@ABU?$tmat4x2@N$0A@@1@@Z ENDP ; glm::tmat3x2<double,0>::tmat3x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$0A@@glm@@QAE@ABU?$tmat3x4@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat3x2@N$0A@@glm@@QAE@ABU?$tmat3x4@N$0A@@1@@Z PROC ; glm::tmat3x2<double,0>::tmat3x2<double,0>, COMDAT
; _this$ = ecx

; 163  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	xorps	xmm0, xmm0
	push	2
	pop	edx
$LL4@tmat3x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat3x2

; 164  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T3[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR $T3[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 165  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+32]
	lea	edi, DWORD PTR [ecx+16]
	lea	esi, DWORD PTR $T2[ebp]
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 166  : 		this->value[2] = col_type(m[2]);

	movups	xmm0, XMMWORD PTR [eax+64]
	lea	edi, DWORD PTR [ecx+32]

; 167  : 	}

	mov	eax, ecx
	lea	esi, DWORD PTR $T1[ebp]
	movups	XMMWORD PTR $T1[ebp], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x2@N$0A@@glm@@QAE@ABU?$tmat3x4@N$0A@@1@@Z ENDP ; glm::tmat3x2<double,0>::tmat3x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$0A@@glm@@QAE@ABU?$tmat2x4@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat3x2@N$0A@@glm@@QAE@ABU?$tmat2x4@N$0A@@1@@Z PROC ; glm::tmat3x2<double,0>::tmat3x2<double,0>, COMDAT
; _this$ = ecx

; 155  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	xorps	xmm0, xmm0
	push	2
	pop	edx
$LL4@tmat3x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat3x2

; 156  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T3[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR $T3[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 157  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+32]
	lea	edi, DWORD PTR [ecx+16]

; 158  : 		this->value[2] = col_type(T(0));
; 159  : 	}

	mov	eax, ecx
	lea	esi, DWORD PTR $T2[ebp]
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd
	xorps	xmm0, xmm0
	movsd
	movsd
	movsd
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+32]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x2@N$0A@@glm@@QAE@ABU?$tmat2x4@N$0A@@1@@Z ENDP ; glm::tmat3x2<double,0>::tmat3x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$0A@@glm@@QAE@ABU?$tmat2x3@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat3x2@N$0A@@glm@@QAE@ABU?$tmat2x3@N$0A@@1@@Z PROC ; glm::tmat3x2<double,0>::tmat3x2<double,0>, COMDAT
; _this$ = ecx

; 147  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	xorps	xmm0, xmm0
	push	2
	pop	edx
$LL4@tmat3x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat3x2

; 148  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T3[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR $T3[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 149  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+24]
	lea	edi, DWORD PTR [ecx+16]

; 150  : 		this->value[2] = col_type(T(0));
; 151  : 	}

	mov	eax, ecx
	lea	esi, DWORD PTR $T2[ebp]
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd
	xorps	xmm0, xmm0
	movsd
	movsd
	movsd
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+32]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x2@N$0A@@glm@@QAE@ABU?$tmat2x3@N$0A@@1@@Z ENDP ; glm::tmat3x2<double,0>::tmat3x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$0A@@glm@@QAE@ABU?$tmat4x4@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat3x2@N$0A@@glm@@QAE@ABU?$tmat4x4@N$0A@@1@@Z PROC ; glm::tmat3x2<double,0>::tmat3x2<double,0>, COMDAT
; _this$ = ecx

; 139  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	xorps	xmm0, xmm0
	push	2
	pop	edx
$LL4@tmat3x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat3x2

; 140  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T3[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR $T3[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 141  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+32]
	lea	edi, DWORD PTR [ecx+16]
	lea	esi, DWORD PTR $T2[ebp]
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 142  : 		this->value[2] = col_type(m[2]);

	movups	xmm0, XMMWORD PTR [eax+64]
	lea	edi, DWORD PTR [ecx+32]

; 143  : 	}

	mov	eax, ecx
	lea	esi, DWORD PTR $T1[ebp]
	movups	XMMWORD PTR $T1[ebp], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x2@N$0A@@glm@@QAE@ABU?$tmat4x4@N$0A@@1@@Z ENDP ; glm::tmat3x2<double,0>::tmat3x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$0A@@glm@@QAE@ABU?$tmat3x3@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat3x2@N$0A@@glm@@QAE@ABU?$tmat3x3@N$0A@@1@@Z PROC ; glm::tmat3x2<double,0>::tmat3x2<double,0>, COMDAT
; _this$ = ecx

; 131  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	xorps	xmm0, xmm0
	push	2
	pop	edx
$LL4@tmat3x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat3x2

; 132  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T3[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR $T3[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 133  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+24]
	lea	edi, DWORD PTR [ecx+16]
	lea	esi, DWORD PTR $T2[ebp]
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 134  : 		this->value[2] = col_type(m[2]);

	movups	xmm0, XMMWORD PTR [eax+48]
	lea	edi, DWORD PTR [ecx+32]

; 135  : 	}

	mov	eax, ecx
	lea	esi, DWORD PTR $T1[ebp]
	movups	XMMWORD PTR $T1[ebp], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x2@N$0A@@glm@@QAE@ABU?$tmat3x3@N$0A@@1@@Z ENDP ; glm::tmat3x2<double,0>::tmat3x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$0A@@glm@@QAE@ABU?$tmat2x2@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat3x2@N$0A@@glm@@QAE@ABU?$tmat2x2@N$0A@@1@@Z PROC ; glm::tmat3x2<double,0>::tmat3x2<double,0>, COMDAT
; _this$ = ecx

; 123  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	xorps	xmm0, xmm0
	push	2
	pop	edx
$LL4@tmat3x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat3x2

; 124  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	push	esi
	push	edi
	mov	esi, eax
	mov	edi, ecx
	movupd	XMMWORD PTR $T1[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 125  : 		this->value[1] = m[1];

	lea	esi, DWORD PTR [eax+16]

; 126  : 		this->value[2] = col_type(0);
; 127  : 	}

	mov	eax, ecx
	lea	edi, DWORD PTR [ecx+16]
	movsd
	movsd
	movsd
	movsd
	lea	edi, DWORD PTR [ecx+32]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x2@N$0A@@glm@@QAE@ABU?$tmat2x2@N$0A@@1@@Z ENDP ; glm::tmat3x2<double,0>::tmat3x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$0A@@glm@@QAE@ABU?$tvec2@N$0A@@1@00@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??0?$tmat3x2@N$0A@@glm@@QAE@ABU?$tvec2@N$0A@@1@00@Z PROC ; glm::tmat3x2<double,0>::tmat3x2<double,0>, COMDAT
; _this$ = ecx

; 71   : 	{

	push	ebp
	mov	ebp, esp
	push	2
	mov	eax, ecx
	xorps	xmm0, xmm0
	pop	edx
$LL4@tmat3x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat3x2

; 72   : 		this->value[0] = v0;

	push	esi
	mov	esi, DWORD PTR _v0$[ebp]

; 73   : 		this->value[1] = v1;
; 74   : 		this->value[2] = v2;
; 75   : 	}

	mov	eax, ecx
	push	edi
	mov	edi, ecx
	movsd
	movsd
	movsd
	movsd
	mov	esi, DWORD PTR _v1$[ebp]
	lea	edi, DWORD PTR [ecx+16]
	movsd
	movsd
	movsd
	movsd
	mov	esi, DWORD PTR _v2$[ebp]
	lea	edi, DWORD PTR [ecx+32]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	12					; 0000000cH
??0?$tmat3x2@N$0A@@glm@@QAE@ABU?$tvec2@N$0A@@1@00@Z ENDP ; glm::tmat3x2<double,0>::tmat3x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$0A@@glm@@QAE@NNNNNN@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
_x0$ = 8						; size = 8
_y0$ = 16						; size = 8
_x1$ = 24						; size = 8
_y1$ = 32						; size = 8
_x2$ = 40						; size = 8
_y2$ = 48						; size = 8
??0?$tmat3x2@N$0A@@glm@@QAE@NNNNNN@Z PROC		; glm::tmat3x2<double,0>::tmat3x2<double,0>, COMDAT
; _this$ = ecx

; 58   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	xorps	xmm0, xmm0
	push	2
	pop	edx
$LL4@tmat3x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat3x2

; 59   : 		this->value[0] = col_type(x0, y0);

	movsd	xmm0, QWORD PTR _x0$[ebp]

; 60   : 		this->value[1] = col_type(x1, y1);
; 61   : 		this->value[2] = col_type(x2, y2);
; 62   : 	}

	mov	eax, ecx
	push	esi
	push	edi
	movsd	QWORD PTR $T3[ebp], xmm0
	lea	esi, DWORD PTR $T3[ebp]
	movsd	xmm0, QWORD PTR _y0$[ebp]
	mov	edi, ecx
	movsd	QWORD PTR $T3[ebp+8], xmm0
	movsd	xmm0, QWORD PTR _x1$[ebp]
	movsd
	movsd
	movsd
	movsd
	movsd	QWORD PTR $T2[ebp], xmm0
	lea	edi, DWORD PTR [ecx+16]
	movsd	xmm0, QWORD PTR _y1$[ebp]
	lea	esi, DWORD PTR $T2[ebp]
	movsd	QWORD PTR $T2[ebp+8], xmm0
	movsd	xmm0, QWORD PTR _x2$[ebp]
	movsd
	movsd
	movsd
	movsd
	movsd	QWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+32]
	movsd	xmm0, QWORD PTR _y2$[ebp]
	lea	esi, DWORD PTR $T1[ebp]
	movsd	QWORD PTR $T1[ebp+8], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	48					; 00000030H
??0?$tmat3x2@N$0A@@glm@@QAE@NNNNNN@Z ENDP		; glm::tmat3x2<double,0>::tmat3x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$0A@@glm@@QAE@N@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
_scalar$ = 8						; size = 8
??0?$tmat3x2@N$0A@@glm@@QAE@N@Z PROC			; glm::tmat3x2<double,0>::tmat3x2<double,0>, COMDAT
; _this$ = ecx

; 45   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	xorps	xmm1, xmm1
	push	2
	pop	edx
$LL4@tmat3x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm1
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat3x2

; 46   : 		this->value[0] = col_type(scalar, 0);

	movsd	xmm0, QWORD PTR _scalar$[ebp]

; 47   : 		this->value[1] = col_type(0, scalar);
; 48   : 		this->value[2] = col_type(0, 0);
; 49   : 	}

	mov	eax, ecx
	push	esi
	push	edi
	movsd	QWORD PTR $T3[ebp], xmm0
	lea	esi, DWORD PTR $T3[ebp]
	movsd	QWORD PTR $T3[ebp+8], xmm1
	mov	edi, ecx
	movsd
	movsd
	movsd
	movsd
	movsd	QWORD PTR $T2[ebp+8], xmm0
	lea	edi, DWORD PTR [ecx+16]
	movsd	QWORD PTR $T2[ebp], xmm1
	lea	esi, DWORD PTR $T2[ebp]
	movsd
	xorps	xmm0, xmm0
	movsd
	movsd
	movsd
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+32]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$tmat3x2@N$0A@@glm@@QAE@N@Z ENDP			; glm::tmat3x2<double,0>::tmat3x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat3x2@N$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat3x2<double,0>::tmat3x2<double,0>, COMDAT
; _this$ = ecx

; 41   : 	{}

	push	2
	mov	eax, ecx
	xorps	xmm0, xmm0
	pop	edx
$LL4@tmat3x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat3x2
	mov	eax, ecx
	ret	4
??0?$tmat3x2@N$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat3x2<double,0>::tmat3x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tmat3x2@N$0A@@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tmat3x2@N$0A@@glm@@QAE@ABU01@@Z PROC		; glm::tmat3x2<double,0>::tmat3x2<double,0>, COMDAT
; _this$ = ecx

; 184  : template struct tmat3x2<float64, highp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	12					; 0000000cH
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tmat3x2@N$0A@@glm@@QAE@ABU01@@Z ENDP		; glm::tmat3x2<double,0>::tmat3x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
??0?$tmat3x2@N$0A@@glm@@QAE@XZ PROC			; glm::tmat3x2<double,0>::tmat3x2<double,0>, COMDAT
; _this$ = ecx

; 11   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	xorps	xmm0, xmm0
	push	2
	pop	edx
$LL4@tmat3x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat3x2

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0);
; 14   : 				this->value[1] = col_type(0, 1);
; 15   : 				this->value[2] = col_type(0, 0);
; 16   : #			endif
; 17   : 		}

	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	mov	eax, ecx
	push	esi
	push	edi
	movupd	XMMWORD PTR $T3[ebp], xmm0
	lea	esi, DWORD PTR $T3[ebp]
	mov	edi, ecx
	movaps	xmm0, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	movsd
	movsd
	movsd
	movsd
	movupd	XMMWORD PTR $T2[ebp], xmm0
	lea	edi, DWORD PTR [ecx+16]
	lea	esi, DWORD PTR $T2[ebp]
	xorps	xmm0, xmm0
	movsd
	movsd
	movsd
	movsd
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+32]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$tmat3x2@N$0A@@glm@@QAE@XZ ENDP			; glm::tmat3x2<double,0>::tmat3x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??F?$tmat3x2@M$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat3x2@M$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tmat3x2<float,0>::operator--, COMDAT
; _this$ = ecx

; 314  : 	{

	push	ebp
	mov	ebp, esp

; 315  : 		tmat3x2<T, P> Result(*this);
; 316  : 		--*this;

	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	mov	edx, ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	movups	xmm0, XMMWORD PTR [edx]
	push	6
	pop	ecx
	subps	xmm0, xmm1
	mov	esi, edx
	mov	edi, eax
	rep movsd
	movups	XMMWORD PTR [edx], xmm0
	pop	edi
	movss	xmm0, DWORD PTR [edx+16]
	subss	xmm0, xmm1
	pop	esi
	movss	DWORD PTR [edx+16], xmm0
	movss	xmm0, DWORD PTR [edx+20]
	subss	xmm0, xmm1
	movss	DWORD PTR [edx+20], xmm0

; 317  : 		return Result;
; 318  : 	}

	pop	ebp
	ret	8
??F?$tmat3x2@M$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tmat3x2<float,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??E?$tmat3x2@M$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat3x2@M$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tmat3x2<float,0>::operator++, COMDAT
; _this$ = ecx

; 306  : 	{

	push	ebp
	mov	ebp, esp

; 307  : 		tmat3x2<T, P> Result(*this);
; 308  : 		++*this;

	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	mov	edx, ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	movups	xmm0, XMMWORD PTR [edx]
	push	6
	pop	ecx
	addps	xmm0, xmm1
	mov	esi, edx
	mov	edi, eax
	rep movsd
	movups	XMMWORD PTR [edx], xmm0
	pop	edi
	movss	xmm0, DWORD PTR [edx+16]
	addss	xmm0, xmm1
	pop	esi
	movss	DWORD PTR [edx+16], xmm0
	movss	xmm0, DWORD PTR [edx+20]
	addss	xmm0, xmm1
	movss	DWORD PTR [edx+20], xmm0

; 309  : 		return Result;
; 310  : 	}

	pop	ebp
	ret	8
??E?$tmat3x2@M$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tmat3x2<float,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??F?$tmat3x2@M$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat3x2@M$0A@@glm@@QAEAAU01@XZ PROC		; glm::tmat3x2<float,0>::operator--, COMDAT
; _this$ = ecx

; 298  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 299  : 		--this->value[1];
; 300  : 		--this->value[2];
; 301  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	subss	xmm0, xmm1
	movss	DWORD PTR [ecx+16], xmm0
	movss	xmm0, DWORD PTR [ecx+20]
	subss	xmm0, xmm1
	movss	DWORD PTR [ecx+20], xmm0

; 302  : 	}

	ret	0
??F?$tmat3x2@M$0A@@glm@@QAEAAU01@XZ ENDP		; glm::tmat3x2<float,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??E?$tmat3x2@M$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat3x2@M$0A@@glm@@QAEAAU01@XZ PROC		; glm::tmat3x2<float,0>::operator++, COMDAT
; _this$ = ecx

; 289  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 290  : 		++this->value[1];
; 291  : 		++this->value[2];
; 292  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	addss	xmm0, xmm1
	movss	DWORD PTR [ecx+16], xmm0
	movss	xmm0, DWORD PTR [ecx+20]
	addss	xmm0, xmm1
	movss	DWORD PTR [ecx+20], xmm0

; 293  : 	}

	ret	0
??E?$tmat3x2@M$0A@@glm@@QAEAAU01@XZ ENDP		; glm::tmat3x2<float,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tmat3x2@M$0A@@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tmat3x2@M$0A@@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tmat3x2<float,0>::operator=, COMDAT
; _this$ = ecx

; 183  : template struct tmat3x2<float32, highp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	6
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tmat3x2@M$0A@@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tmat3x2<float,0>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??A?$tmat3x2@M$0A@@glm@@QBEABU?$tvec2@M$0A@@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat3x2@M$0A@@glm@@QBEABU?$tvec2@M$0A@@1@H@Z PROC	; glm::tmat3x2<float,0>::operator[], COMDAT
; _this$ = ecx

; 196  : 	{

	push	ebp
	mov	ebp, esp

; 197  : 		assert(i < this->length());
; 198  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 199  : 	}

	pop	ebp
	ret	4
??A?$tmat3x2@M$0A@@glm@@QBEABU?$tvec2@M$0A@@1@H@Z ENDP	; glm::tmat3x2<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??A?$tmat3x2@M$0A@@glm@@QAEAAU?$tvec2@M$0A@@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat3x2@M$0A@@glm@@QAEAAU?$tvec2@M$0A@@1@H@Z PROC	; glm::tmat3x2<float,0>::operator[], COMDAT
; _this$ = ecx

; 189  : 	{

	push	ebp
	mov	ebp, esp

; 190  : 		assert(i < this->length());
; 191  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 192  : 	}

	pop	ebp
	ret	4
??A?$tmat3x2@M$0A@@glm@@QAEAAU?$tvec2@M$0A@@1@H@Z ENDP	; glm::tmat3x2<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.hpp
;	COMDAT ?length@?$tmat3x2@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat3x2@M$0A@@glm@@SAHXZ PROC			; glm::tmat3x2<float,0>::length, COMDAT

; 80   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	push	3
	pop	eax
	ret	0
?length@?$tmat3x2@M$0A@@glm@@SAHXZ ENDP			; glm::tmat3x2<float,0>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$0A@@glm@@QAE@ABU?$tmat4x3@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat3x2@M$0A@@glm@@QAE@ABU?$tmat4x3@M$0A@@1@@Z PROC ; glm::tmat3x2<float,0>::tmat3x2<float,0>, COMDAT
; _this$ = ecx

; 179  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	mov	edx, ecx
	push	2
	mov	eax, edx
	pop	ecx
$LL4@tmat3x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	ecx
	jns	SHORT $LL4@tmat3x2

; 180  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 181  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+12]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [edx+12], eax

; 182  : 		this->value[2] = col_type(m[2]);

	movss	xmm0, DWORD PTR [ecx+24]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+16], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+20], eax

; 183  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x2@M$0A@@glm@@QAE@ABU?$tmat4x3@M$0A@@1@@Z ENDP ; glm::tmat3x2<float,0>::tmat3x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$0A@@glm@@QAE@ABU?$tmat4x2@M$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x2@M$0A@@glm@@QAE@ABU?$tmat4x2@M$0A@@1@@Z PROC ; glm::tmat3x2<float,0>::tmat3x2<float,0>, COMDAT
; _this$ = ecx

; 171  : 	{

	push	ebp
	mov	ebp, esp
	mov	edx, ecx
	push	2
	mov	eax, edx
	pop	ecx
$LL4@tmat3x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	ecx
	jns	SHORT $LL4@tmat3x2

; 172  : 		this->value[0] = m[0];

	mov	ecx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax

; 173  : 		this->value[1] = m[1];

	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], eax

; 174  : 		this->value[2] = m[2];

	mov	eax, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+16], eax
	mov	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR [edx+20], eax

; 175  : 	}

	mov	eax, edx
	pop	ebp
	ret	4
??0?$tmat3x2@M$0A@@glm@@QAE@ABU?$tmat4x2@M$0A@@1@@Z ENDP ; glm::tmat3x2<float,0>::tmat3x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$0A@@glm@@QAE@ABU?$tmat3x4@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat3x2@M$0A@@glm@@QAE@ABU?$tmat3x4@M$0A@@1@@Z PROC ; glm::tmat3x2<float,0>::tmat3x2<float,0>, COMDAT
; _this$ = ecx

; 163  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	mov	edx, ecx
	push	2
	mov	eax, edx
	pop	ecx
$LL4@tmat3x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	ecx
	jns	SHORT $LL4@tmat3x2

; 164  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 165  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+16]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [edx+12], eax

; 166  : 		this->value[2] = col_type(m[2]);

	movss	xmm0, DWORD PTR [ecx+32]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+16], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+20], eax

; 167  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x2@M$0A@@glm@@QAE@ABU?$tmat3x4@M$0A@@1@@Z ENDP ; glm::tmat3x2<float,0>::tmat3x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$0A@@glm@@QAE@ABU?$tmat2x4@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat3x2@M$0A@@glm@@QAE@ABU?$tmat2x4@M$0A@@1@@Z PROC ; glm::tmat3x2<float,0>::tmat3x2<float,0>, COMDAT
; _this$ = ecx

; 155  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	mov	edx, ecx
	push	2
	mov	eax, edx
	pop	ecx
$LL4@tmat3x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	ecx
	jns	SHORT $LL4@tmat3x2

; 156  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 157  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+16]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR $T2[ebp]

; 158  : 		this->value[2] = col_type(T(0));

	and	DWORD PTR $T1[ebp], 0
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	and	DWORD PTR $T1[ebp+4], 0
	mov	DWORD PTR [edx+12], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+16], eax
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+20], eax

; 159  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x2@M$0A@@glm@@QAE@ABU?$tmat2x4@M$0A@@1@@Z ENDP ; glm::tmat3x2<float,0>::tmat3x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$0A@@glm@@QAE@ABU?$tmat2x3@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat3x2@M$0A@@glm@@QAE@ABU?$tmat2x3@M$0A@@1@@Z PROC ; glm::tmat3x2<float,0>::tmat3x2<float,0>, COMDAT
; _this$ = ecx

; 147  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	mov	edx, ecx
	push	2
	mov	eax, edx
	pop	ecx
$LL4@tmat3x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	ecx
	jns	SHORT $LL4@tmat3x2

; 148  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 149  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+12]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR $T2[ebp]

; 150  : 		this->value[2] = col_type(T(0));

	and	DWORD PTR $T1[ebp], 0
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	and	DWORD PTR $T1[ebp+4], 0
	mov	DWORD PTR [edx+12], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+16], eax
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+20], eax

; 151  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x2@M$0A@@glm@@QAE@ABU?$tmat2x3@M$0A@@1@@Z ENDP ; glm::tmat3x2<float,0>::tmat3x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$0A@@glm@@QAE@ABU?$tmat4x4@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat3x2@M$0A@@glm@@QAE@ABU?$tmat4x4@M$0A@@1@@Z PROC ; glm::tmat3x2<float,0>::tmat3x2<float,0>, COMDAT
; _this$ = ecx

; 139  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	mov	edx, ecx
	push	2
	mov	eax, edx
	pop	ecx
$LL4@tmat3x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	ecx
	jns	SHORT $LL4@tmat3x2

; 140  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 141  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+16]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [edx+12], eax

; 142  : 		this->value[2] = col_type(m[2]);

	movss	xmm0, DWORD PTR [ecx+32]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+16], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+20], eax

; 143  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x2@M$0A@@glm@@QAE@ABU?$tmat4x4@M$0A@@1@@Z ENDP ; glm::tmat3x2<float,0>::tmat3x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$0A@@glm@@QAE@ABU?$tmat3x3@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat3x2@M$0A@@glm@@QAE@ABU?$tmat3x3@M$0A@@1@@Z PROC ; glm::tmat3x2<float,0>::tmat3x2<float,0>, COMDAT
; _this$ = ecx

; 131  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	mov	edx, ecx
	push	2
	mov	eax, edx
	pop	ecx
$LL4@tmat3x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	ecx
	jns	SHORT $LL4@tmat3x2

; 132  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 133  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+12]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [edx+12], eax

; 134  : 		this->value[2] = col_type(m[2]);

	movss	xmm0, DWORD PTR [ecx+24]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+16], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+20], eax

; 135  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x2@M$0A@@glm@@QAE@ABU?$tmat3x3@M$0A@@1@@Z ENDP ; glm::tmat3x2<float,0>::tmat3x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$0A@@glm@@QAE@ABU?$tmat2x2@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat3x2@M$0A@@glm@@QAE@ABU?$tmat2x2@M$0A@@1@@Z PROC ; glm::tmat3x2<float,0>::tmat3x2<float,0>, COMDAT
; _this$ = ecx

; 123  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	mov	edx, ecx
	push	2
	mov	eax, edx
	pop	ecx
$LL4@tmat3x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	ecx
	jns	SHORT $LL4@tmat3x2

; 124  : 		this->value[0] = m[0];

	mov	ecx, DWORD PTR _m$[ebp]

; 125  : 		this->value[1] = m[1];
; 126  : 		this->value[2] = col_type(0);

	and	DWORD PTR $T1[ebp], 0
	and	DWORD PTR $T1[ebp+4], 0
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+16], eax
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+20], eax

; 127  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x2@M$0A@@glm@@QAE@ABU?$tmat2x2@M$0A@@1@@Z ENDP ; glm::tmat3x2<float,0>::tmat3x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$0A@@glm@@QAE@ABU?$tvec2@M$0A@@1@00@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??0?$tmat3x2@M$0A@@glm@@QAE@ABU?$tvec2@M$0A@@1@00@Z PROC ; glm::tmat3x2<float,0>::tmat3x2<float,0>, COMDAT
; _this$ = ecx

; 71   : 	{

	push	ebp
	mov	ebp, esp
	mov	edx, ecx
	push	2
	mov	eax, edx
	pop	ecx
$LL4@tmat3x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	ecx
	jns	SHORT $LL4@tmat3x2

; 72   : 		this->value[0] = v0;

	mov	ecx, DWORD PTR _v0$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]

; 73   : 		this->value[1] = v1;

	mov	ecx, DWORD PTR _v1$[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR [ecx+4]

; 74   : 		this->value[2] = v2;

	mov	ecx, DWORD PTR _v2$[ebp]
	mov	DWORD PTR [edx+12], eax
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx+16], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+20], eax

; 75   : 	}

	mov	eax, edx
	pop	ebp
	ret	12					; 0000000cH
??0?$tmat3x2@M$0A@@glm@@QAE@ABU?$tvec2@M$0A@@1@00@Z ENDP ; glm::tmat3x2<float,0>::tmat3x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$0A@@glm@@QAE@MMMMMM@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_x1$ = 16						; size = 4
_y1$ = 20						; size = 4
_x2$ = 24						; size = 4
_y2$ = 28						; size = 4
??0?$tmat3x2@M$0A@@glm@@QAE@MMMMMM@Z PROC		; glm::tmat3x2<float,0>::tmat3x2<float,0>, COMDAT
; _this$ = ecx

; 58   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	2
	mov	eax, ecx
	pop	edx
$LL4@tmat3x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	edx
	jns	SHORT $LL4@tmat3x2

; 59   : 		this->value[0] = col_type(x0, y0);

	movss	xmm0, DWORD PTR _x0$[ebp]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR _y0$[ebp]
	mov	eax, DWORD PTR $T3[ebp]
	movss	DWORD PTR $T3[ebp+4], xmm0

; 60   : 		this->value[1] = col_type(x1, y1);

	movss	xmm0, DWORD PTR _x1$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR $T3[ebp+4]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR _y1$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR $T2[ebp]
	movss	DWORD PTR $T2[ebp+4], xmm0

; 61   : 		this->value[2] = col_type(x2, y2);

	movss	xmm0, DWORD PTR _x2$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [ecx+12], eax
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR _y2$[ebp]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx+16], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [ecx+20], eax

; 62   : 	}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
??0?$tmat3x2@M$0A@@glm@@QAE@MMMMMM@Z ENDP		; glm::tmat3x2<float,0>::tmat3x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$0A@@glm@@QAE@M@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
_scalar$ = 8						; size = 4
??0?$tmat3x2@M$0A@@glm@@QAE@M@Z PROC			; glm::tmat3x2<float,0>::tmat3x2<float,0>, COMDAT
; _this$ = ecx

; 45   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	2
	mov	eax, ecx
	pop	edx
$LL4@tmat3x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	edx
	jns	SHORT $LL4@tmat3x2

; 46   : 		this->value[0] = col_type(scalar, 0);

	movss	xmm0, DWORD PTR _scalar$[ebp]
	and	DWORD PTR $T3[ebp+4], 0
	movss	DWORD PTR $T3[ebp], xmm0
	mov	eax, DWORD PTR $T3[ebp]

; 47   : 		this->value[1] = col_type(0, scalar);

	and	DWORD PTR $T2[ebp], 0
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR $T2[ebp]

; 48   : 		this->value[2] = col_type(0, 0);

	and	DWORD PTR $T1[ebp], 0
	mov	DWORD PTR [ecx+8], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	and	DWORD PTR $T1[ebp+4], 0
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [ecx+20], eax

; 49   : 	}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x2@M$0A@@glm@@QAE@M@Z ENDP			; glm::tmat3x2<float,0>::tmat3x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat3x2@M$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat3x2<float,0>::tmat3x2<float,0>, COMDAT
; _this$ = ecx

; 41   : 	{}

	push	2
	mov	eax, ecx
	pop	edx
$LL4@tmat3x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	edx
	jns	SHORT $LL4@tmat3x2
	mov	eax, ecx
	ret	4
??0?$tmat3x2@M$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat3x2<float,0>::tmat3x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tmat3x2@M$0A@@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tmat3x2@M$0A@@glm@@QAE@ABU01@@Z PROC		; glm::tmat3x2<float,0>::tmat3x2<float,0>, COMDAT
; _this$ = ecx

; 183  : template struct tmat3x2<float32, highp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	6
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tmat3x2@M$0A@@glm@@QAE@ABU01@@Z ENDP		; glm::tmat3x2<float,0>::tmat3x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
??0?$tmat3x2@M$0A@@glm@@QAE@XZ PROC			; glm::tmat3x2<float,0>::tmat3x2<float,0>, COMDAT
; _this$ = ecx

; 11   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	2
	mov	eax, ecx
	pop	edx
$LL4@tmat3x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	edx
	jns	SHORT $LL4@tmat3x2

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0);

	and	DWORD PTR $T3[ebp+4], 0
	mov	DWORD PTR $T3[ebp], 1065353216		; 3f800000H
	mov	eax, DWORD PTR $T3[ebp]

; 14   : 				this->value[1] = col_type(0, 1);

	and	DWORD PTR $T2[ebp], 0
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR $T2[ebp]

; 15   : 				this->value[2] = col_type(0, 0);

	and	DWORD PTR $T1[ebp], 0
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR $T2[ebp+4], 1065353216	; 3f800000H
	mov	eax, DWORD PTR $T2[ebp+4]
	and	DWORD PTR $T1[ebp+4], 0
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [ecx+20], eax

; 16   : #			endif
; 17   : 		}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$tmat3x2@M$0A@@glm@@QAE@XZ ENDP			; glm::tmat3x2<float,0>::tmat3x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??F?$tmat3x2@N$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat3x2@N$00@glm@@QAE?AU01@H@Z PROC		; glm::tmat3x2<double,1>::operator--, COMDAT
; _this$ = ecx

; 314  : 	{

	push	ebp
	mov	ebp, esp

; 315  : 		tmat3x2<T, P> Result(*this);
; 316  : 		--*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	mov	edx, ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	movups	xmm0, XMMWORD PTR [edx]
	push	12					; 0000000cH
	pop	ecx
	subpd	xmm0, xmm1
	mov	esi, edx
	mov	edi, eax
	rep movsd
	movups	XMMWORD PTR [edx], xmm0
	pop	edi
	movups	xmm0, XMMWORD PTR [edx+16]
	pop	esi
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+16], xmm0
	movups	xmm0, XMMWORD PTR [edx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+32], xmm0

; 317  : 		return Result;
; 318  : 	}

	pop	ebp
	ret	8
??F?$tmat3x2@N$00@glm@@QAE?AU01@H@Z ENDP		; glm::tmat3x2<double,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??E?$tmat3x2@N$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat3x2@N$00@glm@@QAE?AU01@H@Z PROC		; glm::tmat3x2<double,1>::operator++, COMDAT
; _this$ = ecx

; 306  : 	{

	push	ebp
	mov	ebp, esp

; 307  : 		tmat3x2<T, P> Result(*this);
; 308  : 		++*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	mov	edx, ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	movups	xmm0, XMMWORD PTR [edx]
	push	12					; 0000000cH
	pop	ecx
	addpd	xmm0, xmm1
	mov	esi, edx
	mov	edi, eax
	rep movsd
	movups	XMMWORD PTR [edx], xmm0
	pop	edi
	movups	xmm0, XMMWORD PTR [edx+16]
	pop	esi
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+16], xmm0
	movups	xmm0, XMMWORD PTR [edx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+32], xmm0

; 309  : 		return Result;
; 310  : 	}

	pop	ebp
	ret	8
??E?$tmat3x2@N$00@glm@@QAE?AU01@H@Z ENDP		; glm::tmat3x2<double,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??F?$tmat3x2@N$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat3x2@N$00@glm@@QAEAAU01@XZ PROC			; glm::tmat3x2<double,1>::operator--, COMDAT
; _this$ = ecx

; 298  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 299  : 		--this->value[1];
; 300  : 		--this->value[2];
; 301  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0

; 302  : 	}

	ret	0
??F?$tmat3x2@N$00@glm@@QAEAAU01@XZ ENDP			; glm::tmat3x2<double,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??E?$tmat3x2@N$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat3x2@N$00@glm@@QAEAAU01@XZ PROC			; glm::tmat3x2<double,1>::operator++, COMDAT
; _this$ = ecx

; 289  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 290  : 		++this->value[1];
; 291  : 		++this->value[2];
; 292  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0

; 293  : 	}

	ret	0
??E?$tmat3x2@N$00@glm@@QAEAAU01@XZ ENDP			; glm::tmat3x2<double,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tmat3x2@N$00@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tmat3x2@N$00@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tmat3x2<double,1>::operator=, COMDAT
; _this$ = ecx

; 181  : template struct tmat3x2<float64, mediump>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	12					; 0000000cH
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tmat3x2@N$00@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tmat3x2<double,1>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??A?$tmat3x2@N$00@glm@@QBEABU?$tvec2@N$00@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat3x2@N$00@glm@@QBEABU?$tvec2@N$00@1@H@Z PROC	; glm::tmat3x2<double,1>::operator[], COMDAT
; _this$ = ecx

; 196  : 	{

	push	ebp
	mov	ebp, esp

; 197  : 		assert(i < this->length());
; 198  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, ecx

; 199  : 	}

	pop	ebp
	ret	4
??A?$tmat3x2@N$00@glm@@QBEABU?$tvec2@N$00@1@H@Z ENDP	; glm::tmat3x2<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??A?$tmat3x2@N$00@glm@@QAEAAU?$tvec2@N$00@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat3x2@N$00@glm@@QAEAAU?$tvec2@N$00@1@H@Z PROC	; glm::tmat3x2<double,1>::operator[], COMDAT
; _this$ = ecx

; 189  : 	{

	push	ebp
	mov	ebp, esp

; 190  : 		assert(i < this->length());
; 191  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, ecx

; 192  : 	}

	pop	ebp
	ret	4
??A?$tmat3x2@N$00@glm@@QAEAAU?$tvec2@N$00@1@H@Z ENDP	; glm::tmat3x2<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.hpp
;	COMDAT ?length@?$tmat3x2@N$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat3x2@N$00@glm@@SAHXZ PROC			; glm::tmat3x2<double,1>::length, COMDAT

; 80   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	push	3
	pop	eax
	ret	0
?length@?$tmat3x2@N$00@glm@@SAHXZ ENDP			; glm::tmat3x2<double,1>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$00@glm@@QAE@ABU?$tmat4x3@N$00@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat3x2@N$00@glm@@QAE@ABU?$tmat4x3@N$00@1@@Z PROC	; glm::tmat3x2<double,1>::tmat3x2<double,1>, COMDAT
; _this$ = ecx

; 179  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	xorps	xmm0, xmm0
	push	2
	pop	edx
$LL4@tmat3x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat3x2

; 180  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T3[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR $T3[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 181  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+24]
	lea	edi, DWORD PTR [ecx+16]
	lea	esi, DWORD PTR $T2[ebp]
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 182  : 		this->value[2] = col_type(m[2]);

	movups	xmm0, XMMWORD PTR [eax+48]
	lea	edi, DWORD PTR [ecx+32]

; 183  : 	}

	mov	eax, ecx
	lea	esi, DWORD PTR $T1[ebp]
	movups	XMMWORD PTR $T1[ebp], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x2@N$00@glm@@QAE@ABU?$tmat4x3@N$00@1@@Z ENDP	; glm::tmat3x2<double,1>::tmat3x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$00@glm@@QAE@ABU?$tmat4x2@N$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x2@N$00@glm@@QAE@ABU?$tmat4x2@N$00@1@@Z PROC	; glm::tmat3x2<double,1>::tmat3x2<double,1>, COMDAT
; _this$ = ecx

; 171  : 	{

	push	ebp
	mov	ebp, esp
	push	2
	mov	eax, ecx
	xorps	xmm0, xmm0
	pop	edx
$LL4@tmat3x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat3x2

; 172  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	esi, eax
	mov	edi, ecx
	movsd
	movsd
	movsd
	movsd

; 173  : 		this->value[1] = m[1];

	lea	esi, DWORD PTR [eax+16]
	lea	edi, DWORD PTR [ecx+16]
	movsd
	movsd
	movsd
	movsd

; 174  : 		this->value[2] = m[2];

	lea	esi, DWORD PTR [eax+32]

; 175  : 	}

	mov	eax, ecx
	lea	edi, DWORD PTR [ecx+32]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tmat3x2@N$00@glm@@QAE@ABU?$tmat4x2@N$00@1@@Z ENDP	; glm::tmat3x2<double,1>::tmat3x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$00@glm@@QAE@ABU?$tmat3x4@N$00@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat3x2@N$00@glm@@QAE@ABU?$tmat3x4@N$00@1@@Z PROC	; glm::tmat3x2<double,1>::tmat3x2<double,1>, COMDAT
; _this$ = ecx

; 163  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	xorps	xmm0, xmm0
	push	2
	pop	edx
$LL4@tmat3x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat3x2

; 164  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T3[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR $T3[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 165  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+32]
	lea	edi, DWORD PTR [ecx+16]
	lea	esi, DWORD PTR $T2[ebp]
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 166  : 		this->value[2] = col_type(m[2]);

	movups	xmm0, XMMWORD PTR [eax+64]
	lea	edi, DWORD PTR [ecx+32]

; 167  : 	}

	mov	eax, ecx
	lea	esi, DWORD PTR $T1[ebp]
	movups	XMMWORD PTR $T1[ebp], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x2@N$00@glm@@QAE@ABU?$tmat3x4@N$00@1@@Z ENDP	; glm::tmat3x2<double,1>::tmat3x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$00@glm@@QAE@ABU?$tmat2x4@N$00@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat3x2@N$00@glm@@QAE@ABU?$tmat2x4@N$00@1@@Z PROC	; glm::tmat3x2<double,1>::tmat3x2<double,1>, COMDAT
; _this$ = ecx

; 155  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	xorps	xmm0, xmm0
	push	2
	pop	edx
$LL4@tmat3x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat3x2

; 156  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T3[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR $T3[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 157  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+32]
	lea	edi, DWORD PTR [ecx+16]

; 158  : 		this->value[2] = col_type(T(0));
; 159  : 	}

	mov	eax, ecx
	lea	esi, DWORD PTR $T2[ebp]
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd
	xorps	xmm0, xmm0
	movsd
	movsd
	movsd
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+32]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x2@N$00@glm@@QAE@ABU?$tmat2x4@N$00@1@@Z ENDP	; glm::tmat3x2<double,1>::tmat3x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$00@glm@@QAE@ABU?$tmat2x3@N$00@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat3x2@N$00@glm@@QAE@ABU?$tmat2x3@N$00@1@@Z PROC	; glm::tmat3x2<double,1>::tmat3x2<double,1>, COMDAT
; _this$ = ecx

; 147  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	xorps	xmm0, xmm0
	push	2
	pop	edx
$LL4@tmat3x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat3x2

; 148  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T3[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR $T3[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 149  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+24]
	lea	edi, DWORD PTR [ecx+16]

; 150  : 		this->value[2] = col_type(T(0));
; 151  : 	}

	mov	eax, ecx
	lea	esi, DWORD PTR $T2[ebp]
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd
	xorps	xmm0, xmm0
	movsd
	movsd
	movsd
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+32]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x2@N$00@glm@@QAE@ABU?$tmat2x3@N$00@1@@Z ENDP	; glm::tmat3x2<double,1>::tmat3x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$00@glm@@QAE@ABU?$tmat4x4@N$00@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat3x2@N$00@glm@@QAE@ABU?$tmat4x4@N$00@1@@Z PROC	; glm::tmat3x2<double,1>::tmat3x2<double,1>, COMDAT
; _this$ = ecx

; 139  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	xorps	xmm0, xmm0
	push	2
	pop	edx
$LL4@tmat3x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat3x2

; 140  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T3[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR $T3[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 141  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+32]
	lea	edi, DWORD PTR [ecx+16]
	lea	esi, DWORD PTR $T2[ebp]
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 142  : 		this->value[2] = col_type(m[2]);

	movups	xmm0, XMMWORD PTR [eax+64]
	lea	edi, DWORD PTR [ecx+32]

; 143  : 	}

	mov	eax, ecx
	lea	esi, DWORD PTR $T1[ebp]
	movups	XMMWORD PTR $T1[ebp], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x2@N$00@glm@@QAE@ABU?$tmat4x4@N$00@1@@Z ENDP	; glm::tmat3x2<double,1>::tmat3x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$00@glm@@QAE@ABU?$tmat3x3@N$00@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat3x2@N$00@glm@@QAE@ABU?$tmat3x3@N$00@1@@Z PROC	; glm::tmat3x2<double,1>::tmat3x2<double,1>, COMDAT
; _this$ = ecx

; 131  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	xorps	xmm0, xmm0
	push	2
	pop	edx
$LL4@tmat3x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat3x2

; 132  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T3[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR $T3[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 133  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+24]
	lea	edi, DWORD PTR [ecx+16]
	lea	esi, DWORD PTR $T2[ebp]
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 134  : 		this->value[2] = col_type(m[2]);

	movups	xmm0, XMMWORD PTR [eax+48]
	lea	edi, DWORD PTR [ecx+32]

; 135  : 	}

	mov	eax, ecx
	lea	esi, DWORD PTR $T1[ebp]
	movups	XMMWORD PTR $T1[ebp], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x2@N$00@glm@@QAE@ABU?$tmat3x3@N$00@1@@Z ENDP	; glm::tmat3x2<double,1>::tmat3x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$00@glm@@QAE@ABU?$tmat2x2@N$00@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat3x2@N$00@glm@@QAE@ABU?$tmat2x2@N$00@1@@Z PROC	; glm::tmat3x2<double,1>::tmat3x2<double,1>, COMDAT
; _this$ = ecx

; 123  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	xorps	xmm0, xmm0
	push	2
	pop	edx
$LL4@tmat3x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat3x2

; 124  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	push	esi
	push	edi
	mov	esi, eax
	mov	edi, ecx
	movupd	XMMWORD PTR $T1[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 125  : 		this->value[1] = m[1];

	lea	esi, DWORD PTR [eax+16]

; 126  : 		this->value[2] = col_type(0);
; 127  : 	}

	mov	eax, ecx
	lea	edi, DWORD PTR [ecx+16]
	movsd
	movsd
	movsd
	movsd
	lea	edi, DWORD PTR [ecx+32]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x2@N$00@glm@@QAE@ABU?$tmat2x2@N$00@1@@Z ENDP	; glm::tmat3x2<double,1>::tmat3x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$00@glm@@QAE@ABU?$tvec2@N$00@1@00@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??0?$tmat3x2@N$00@glm@@QAE@ABU?$tvec2@N$00@1@00@Z PROC	; glm::tmat3x2<double,1>::tmat3x2<double,1>, COMDAT
; _this$ = ecx

; 71   : 	{

	push	ebp
	mov	ebp, esp
	push	2
	mov	eax, ecx
	xorps	xmm0, xmm0
	pop	edx
$LL4@tmat3x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat3x2

; 72   : 		this->value[0] = v0;

	push	esi
	mov	esi, DWORD PTR _v0$[ebp]

; 73   : 		this->value[1] = v1;
; 74   : 		this->value[2] = v2;
; 75   : 	}

	mov	eax, ecx
	push	edi
	mov	edi, ecx
	movsd
	movsd
	movsd
	movsd
	mov	esi, DWORD PTR _v1$[ebp]
	lea	edi, DWORD PTR [ecx+16]
	movsd
	movsd
	movsd
	movsd
	mov	esi, DWORD PTR _v2$[ebp]
	lea	edi, DWORD PTR [ecx+32]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	12					; 0000000cH
??0?$tmat3x2@N$00@glm@@QAE@ABU?$tvec2@N$00@1@00@Z ENDP	; glm::tmat3x2<double,1>::tmat3x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$00@glm@@QAE@NNNNNN@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
_x0$ = 8						; size = 8
_y0$ = 16						; size = 8
_x1$ = 24						; size = 8
_y1$ = 32						; size = 8
_x2$ = 40						; size = 8
_y2$ = 48						; size = 8
??0?$tmat3x2@N$00@glm@@QAE@NNNNNN@Z PROC		; glm::tmat3x2<double,1>::tmat3x2<double,1>, COMDAT
; _this$ = ecx

; 58   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	xorps	xmm0, xmm0
	push	2
	pop	edx
$LL4@tmat3x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat3x2

; 59   : 		this->value[0] = col_type(x0, y0);

	movsd	xmm0, QWORD PTR _x0$[ebp]

; 60   : 		this->value[1] = col_type(x1, y1);
; 61   : 		this->value[2] = col_type(x2, y2);
; 62   : 	}

	mov	eax, ecx
	push	esi
	push	edi
	movsd	QWORD PTR $T3[ebp], xmm0
	lea	esi, DWORD PTR $T3[ebp]
	movsd	xmm0, QWORD PTR _y0$[ebp]
	mov	edi, ecx
	movsd	QWORD PTR $T3[ebp+8], xmm0
	movsd	xmm0, QWORD PTR _x1$[ebp]
	movsd
	movsd
	movsd
	movsd
	movsd	QWORD PTR $T2[ebp], xmm0
	lea	edi, DWORD PTR [ecx+16]
	movsd	xmm0, QWORD PTR _y1$[ebp]
	lea	esi, DWORD PTR $T2[ebp]
	movsd	QWORD PTR $T2[ebp+8], xmm0
	movsd	xmm0, QWORD PTR _x2$[ebp]
	movsd
	movsd
	movsd
	movsd
	movsd	QWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+32]
	movsd	xmm0, QWORD PTR _y2$[ebp]
	lea	esi, DWORD PTR $T1[ebp]
	movsd	QWORD PTR $T1[ebp+8], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	48					; 00000030H
??0?$tmat3x2@N$00@glm@@QAE@NNNNNN@Z ENDP		; glm::tmat3x2<double,1>::tmat3x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$00@glm@@QAE@N@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
_scalar$ = 8						; size = 8
??0?$tmat3x2@N$00@glm@@QAE@N@Z PROC			; glm::tmat3x2<double,1>::tmat3x2<double,1>, COMDAT
; _this$ = ecx

; 45   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	xorps	xmm1, xmm1
	push	2
	pop	edx
$LL4@tmat3x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm1
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat3x2

; 46   : 		this->value[0] = col_type(scalar, 0);

	movsd	xmm0, QWORD PTR _scalar$[ebp]

; 47   : 		this->value[1] = col_type(0, scalar);
; 48   : 		this->value[2] = col_type(0, 0);
; 49   : 	}

	mov	eax, ecx
	push	esi
	push	edi
	movsd	QWORD PTR $T3[ebp], xmm0
	lea	esi, DWORD PTR $T3[ebp]
	movsd	QWORD PTR $T3[ebp+8], xmm1
	mov	edi, ecx
	movsd
	movsd
	movsd
	movsd
	movsd	QWORD PTR $T2[ebp+8], xmm0
	lea	edi, DWORD PTR [ecx+16]
	movsd	QWORD PTR $T2[ebp], xmm1
	lea	esi, DWORD PTR $T2[ebp]
	movsd
	xorps	xmm0, xmm0
	movsd
	movsd
	movsd
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+32]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$tmat3x2@N$00@glm@@QAE@N@Z ENDP			; glm::tmat3x2<double,1>::tmat3x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat3x2@N$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat3x2<double,1>::tmat3x2<double,1>, COMDAT
; _this$ = ecx

; 41   : 	{}

	push	2
	mov	eax, ecx
	xorps	xmm0, xmm0
	pop	edx
$LL4@tmat3x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat3x2
	mov	eax, ecx
	ret	4
??0?$tmat3x2@N$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat3x2<double,1>::tmat3x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tmat3x2@N$00@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tmat3x2@N$00@glm@@QAE@ABU01@@Z PROC		; glm::tmat3x2<double,1>::tmat3x2<double,1>, COMDAT
; _this$ = ecx

; 181  : template struct tmat3x2<float64, mediump>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	12					; 0000000cH
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tmat3x2@N$00@glm@@QAE@ABU01@@Z ENDP		; glm::tmat3x2<double,1>::tmat3x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$00@glm@@QAE@XZ
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
??0?$tmat3x2@N$00@glm@@QAE@XZ PROC			; glm::tmat3x2<double,1>::tmat3x2<double,1>, COMDAT
; _this$ = ecx

; 11   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	xorps	xmm0, xmm0
	push	2
	pop	edx
$LL4@tmat3x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat3x2

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0);
; 14   : 				this->value[1] = col_type(0, 1);
; 15   : 				this->value[2] = col_type(0, 0);
; 16   : #			endif
; 17   : 		}

	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	mov	eax, ecx
	push	esi
	push	edi
	movupd	XMMWORD PTR $T3[ebp], xmm0
	lea	esi, DWORD PTR $T3[ebp]
	mov	edi, ecx
	movaps	xmm0, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	movsd
	movsd
	movsd
	movsd
	movupd	XMMWORD PTR $T2[ebp], xmm0
	lea	edi, DWORD PTR [ecx+16]
	lea	esi, DWORD PTR $T2[ebp]
	xorps	xmm0, xmm0
	movsd
	movsd
	movsd
	movsd
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+32]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$tmat3x2@N$00@glm@@QAE@XZ ENDP			; glm::tmat3x2<double,1>::tmat3x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??F?$tmat3x2@M$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat3x2@M$00@glm@@QAE?AU01@H@Z PROC		; glm::tmat3x2<float,1>::operator--, COMDAT
; _this$ = ecx

; 314  : 	{

	push	ebp
	mov	ebp, esp

; 315  : 		tmat3x2<T, P> Result(*this);
; 316  : 		--*this;

	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	mov	edx, ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	movups	xmm0, XMMWORD PTR [edx]
	push	6
	pop	ecx
	subps	xmm0, xmm1
	mov	esi, edx
	mov	edi, eax
	rep movsd
	movups	XMMWORD PTR [edx], xmm0
	pop	edi
	movss	xmm0, DWORD PTR [edx+16]
	subss	xmm0, xmm1
	pop	esi
	movss	DWORD PTR [edx+16], xmm0
	movss	xmm0, DWORD PTR [edx+20]
	subss	xmm0, xmm1
	movss	DWORD PTR [edx+20], xmm0

; 317  : 		return Result;
; 318  : 	}

	pop	ebp
	ret	8
??F?$tmat3x2@M$00@glm@@QAE?AU01@H@Z ENDP		; glm::tmat3x2<float,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??E?$tmat3x2@M$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat3x2@M$00@glm@@QAE?AU01@H@Z PROC		; glm::tmat3x2<float,1>::operator++, COMDAT
; _this$ = ecx

; 306  : 	{

	push	ebp
	mov	ebp, esp

; 307  : 		tmat3x2<T, P> Result(*this);
; 308  : 		++*this;

	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	mov	edx, ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	movups	xmm0, XMMWORD PTR [edx]
	push	6
	pop	ecx
	addps	xmm0, xmm1
	mov	esi, edx
	mov	edi, eax
	rep movsd
	movups	XMMWORD PTR [edx], xmm0
	pop	edi
	movss	xmm0, DWORD PTR [edx+16]
	addss	xmm0, xmm1
	pop	esi
	movss	DWORD PTR [edx+16], xmm0
	movss	xmm0, DWORD PTR [edx+20]
	addss	xmm0, xmm1
	movss	DWORD PTR [edx+20], xmm0

; 309  : 		return Result;
; 310  : 	}

	pop	ebp
	ret	8
??E?$tmat3x2@M$00@glm@@QAE?AU01@H@Z ENDP		; glm::tmat3x2<float,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??F?$tmat3x2@M$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat3x2@M$00@glm@@QAEAAU01@XZ PROC			; glm::tmat3x2<float,1>::operator--, COMDAT
; _this$ = ecx

; 298  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 299  : 		--this->value[1];
; 300  : 		--this->value[2];
; 301  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	subss	xmm0, xmm1
	movss	DWORD PTR [ecx+16], xmm0
	movss	xmm0, DWORD PTR [ecx+20]
	subss	xmm0, xmm1
	movss	DWORD PTR [ecx+20], xmm0

; 302  : 	}

	ret	0
??F?$tmat3x2@M$00@glm@@QAEAAU01@XZ ENDP			; glm::tmat3x2<float,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??E?$tmat3x2@M$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat3x2@M$00@glm@@QAEAAU01@XZ PROC			; glm::tmat3x2<float,1>::operator++, COMDAT
; _this$ = ecx

; 289  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 290  : 		++this->value[1];
; 291  : 		++this->value[2];
; 292  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	addss	xmm0, xmm1
	movss	DWORD PTR [ecx+16], xmm0
	movss	xmm0, DWORD PTR [ecx+20]
	addss	xmm0, xmm1
	movss	DWORD PTR [ecx+20], xmm0

; 293  : 	}

	ret	0
??E?$tmat3x2@M$00@glm@@QAEAAU01@XZ ENDP			; glm::tmat3x2<float,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tmat3x2@M$00@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tmat3x2@M$00@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tmat3x2<float,1>::operator=, COMDAT
; _this$ = ecx

; 180  : template struct tmat3x2<float32, mediump>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	6
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tmat3x2@M$00@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tmat3x2<float,1>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??A?$tmat3x2@M$00@glm@@QBEABU?$tvec2@M$00@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat3x2@M$00@glm@@QBEABU?$tvec2@M$00@1@H@Z PROC	; glm::tmat3x2<float,1>::operator[], COMDAT
; _this$ = ecx

; 196  : 	{

	push	ebp
	mov	ebp, esp

; 197  : 		assert(i < this->length());
; 198  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 199  : 	}

	pop	ebp
	ret	4
??A?$tmat3x2@M$00@glm@@QBEABU?$tvec2@M$00@1@H@Z ENDP	; glm::tmat3x2<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??A?$tmat3x2@M$00@glm@@QAEAAU?$tvec2@M$00@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat3x2@M$00@glm@@QAEAAU?$tvec2@M$00@1@H@Z PROC	; glm::tmat3x2<float,1>::operator[], COMDAT
; _this$ = ecx

; 189  : 	{

	push	ebp
	mov	ebp, esp

; 190  : 		assert(i < this->length());
; 191  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 192  : 	}

	pop	ebp
	ret	4
??A?$tmat3x2@M$00@glm@@QAEAAU?$tvec2@M$00@1@H@Z ENDP	; glm::tmat3x2<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.hpp
;	COMDAT ?length@?$tmat3x2@M$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat3x2@M$00@glm@@SAHXZ PROC			; glm::tmat3x2<float,1>::length, COMDAT

; 80   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	push	3
	pop	eax
	ret	0
?length@?$tmat3x2@M$00@glm@@SAHXZ ENDP			; glm::tmat3x2<float,1>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$00@glm@@QAE@ABU?$tmat4x3@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat3x2@M$00@glm@@QAE@ABU?$tmat4x3@M$00@1@@Z PROC	; glm::tmat3x2<float,1>::tmat3x2<float,1>, COMDAT
; _this$ = ecx

; 179  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	mov	edx, ecx
	push	2
	mov	eax, edx
	pop	ecx
$LL4@tmat3x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	ecx
	jns	SHORT $LL4@tmat3x2

; 180  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 181  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+12]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [edx+12], eax

; 182  : 		this->value[2] = col_type(m[2]);

	movss	xmm0, DWORD PTR [ecx+24]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+16], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+20], eax

; 183  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x2@M$00@glm@@QAE@ABU?$tmat4x3@M$00@1@@Z ENDP	; glm::tmat3x2<float,1>::tmat3x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$00@glm@@QAE@ABU?$tmat4x2@M$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x2@M$00@glm@@QAE@ABU?$tmat4x2@M$00@1@@Z PROC	; glm::tmat3x2<float,1>::tmat3x2<float,1>, COMDAT
; _this$ = ecx

; 171  : 	{

	push	ebp
	mov	ebp, esp
	mov	edx, ecx
	push	2
	mov	eax, edx
	pop	ecx
$LL4@tmat3x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	ecx
	jns	SHORT $LL4@tmat3x2

; 172  : 		this->value[0] = m[0];

	mov	ecx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax

; 173  : 		this->value[1] = m[1];

	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], eax

; 174  : 		this->value[2] = m[2];

	mov	eax, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+16], eax
	mov	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR [edx+20], eax

; 175  : 	}

	mov	eax, edx
	pop	ebp
	ret	4
??0?$tmat3x2@M$00@glm@@QAE@ABU?$tmat4x2@M$00@1@@Z ENDP	; glm::tmat3x2<float,1>::tmat3x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$00@glm@@QAE@ABU?$tmat3x4@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat3x2@M$00@glm@@QAE@ABU?$tmat3x4@M$00@1@@Z PROC	; glm::tmat3x2<float,1>::tmat3x2<float,1>, COMDAT
; _this$ = ecx

; 163  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	mov	edx, ecx
	push	2
	mov	eax, edx
	pop	ecx
$LL4@tmat3x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	ecx
	jns	SHORT $LL4@tmat3x2

; 164  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 165  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+16]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [edx+12], eax

; 166  : 		this->value[2] = col_type(m[2]);

	movss	xmm0, DWORD PTR [ecx+32]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+16], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+20], eax

; 167  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x2@M$00@glm@@QAE@ABU?$tmat3x4@M$00@1@@Z ENDP	; glm::tmat3x2<float,1>::tmat3x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$00@glm@@QAE@ABU?$tmat2x4@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat3x2@M$00@glm@@QAE@ABU?$tmat2x4@M$00@1@@Z PROC	; glm::tmat3x2<float,1>::tmat3x2<float,1>, COMDAT
; _this$ = ecx

; 155  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	mov	edx, ecx
	push	2
	mov	eax, edx
	pop	ecx
$LL4@tmat3x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	ecx
	jns	SHORT $LL4@tmat3x2

; 156  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 157  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+16]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR $T2[ebp]

; 158  : 		this->value[2] = col_type(T(0));

	and	DWORD PTR $T1[ebp], 0
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	and	DWORD PTR $T1[ebp+4], 0
	mov	DWORD PTR [edx+12], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+16], eax
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+20], eax

; 159  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x2@M$00@glm@@QAE@ABU?$tmat2x4@M$00@1@@Z ENDP	; glm::tmat3x2<float,1>::tmat3x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$00@glm@@QAE@ABU?$tmat2x3@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat3x2@M$00@glm@@QAE@ABU?$tmat2x3@M$00@1@@Z PROC	; glm::tmat3x2<float,1>::tmat3x2<float,1>, COMDAT
; _this$ = ecx

; 147  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	mov	edx, ecx
	push	2
	mov	eax, edx
	pop	ecx
$LL4@tmat3x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	ecx
	jns	SHORT $LL4@tmat3x2

; 148  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 149  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+12]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR $T2[ebp]

; 150  : 		this->value[2] = col_type(T(0));

	and	DWORD PTR $T1[ebp], 0
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	and	DWORD PTR $T1[ebp+4], 0
	mov	DWORD PTR [edx+12], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+16], eax
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+20], eax

; 151  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x2@M$00@glm@@QAE@ABU?$tmat2x3@M$00@1@@Z ENDP	; glm::tmat3x2<float,1>::tmat3x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$00@glm@@QAE@ABU?$tmat4x4@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat3x2@M$00@glm@@QAE@ABU?$tmat4x4@M$00@1@@Z PROC	; glm::tmat3x2<float,1>::tmat3x2<float,1>, COMDAT
; _this$ = ecx

; 139  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	mov	edx, ecx
	push	2
	mov	eax, edx
	pop	ecx
$LL4@tmat3x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	ecx
	jns	SHORT $LL4@tmat3x2

; 140  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 141  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+16]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [edx+12], eax

; 142  : 		this->value[2] = col_type(m[2]);

	movss	xmm0, DWORD PTR [ecx+32]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+16], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+20], eax

; 143  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x2@M$00@glm@@QAE@ABU?$tmat4x4@M$00@1@@Z ENDP	; glm::tmat3x2<float,1>::tmat3x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$00@glm@@QAE@ABU?$tmat3x3@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat3x2@M$00@glm@@QAE@ABU?$tmat3x3@M$00@1@@Z PROC	; glm::tmat3x2<float,1>::tmat3x2<float,1>, COMDAT
; _this$ = ecx

; 131  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	mov	edx, ecx
	push	2
	mov	eax, edx
	pop	ecx
$LL4@tmat3x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	ecx
	jns	SHORT $LL4@tmat3x2

; 132  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 133  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+12]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [edx+12], eax

; 134  : 		this->value[2] = col_type(m[2]);

	movss	xmm0, DWORD PTR [ecx+24]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+16], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+20], eax

; 135  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x2@M$00@glm@@QAE@ABU?$tmat3x3@M$00@1@@Z ENDP	; glm::tmat3x2<float,1>::tmat3x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$00@glm@@QAE@ABU?$tmat2x2@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat3x2@M$00@glm@@QAE@ABU?$tmat2x2@M$00@1@@Z PROC	; glm::tmat3x2<float,1>::tmat3x2<float,1>, COMDAT
; _this$ = ecx

; 123  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	mov	edx, ecx
	push	2
	mov	eax, edx
	pop	ecx
$LL4@tmat3x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	ecx
	jns	SHORT $LL4@tmat3x2

; 124  : 		this->value[0] = m[0];

	mov	ecx, DWORD PTR _m$[ebp]

; 125  : 		this->value[1] = m[1];
; 126  : 		this->value[2] = col_type(0);

	and	DWORD PTR $T1[ebp], 0
	and	DWORD PTR $T1[ebp+4], 0
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+16], eax
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+20], eax

; 127  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x2@M$00@glm@@QAE@ABU?$tmat2x2@M$00@1@@Z ENDP	; glm::tmat3x2<float,1>::tmat3x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$00@glm@@QAE@ABU?$tvec2@M$00@1@00@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??0?$tmat3x2@M$00@glm@@QAE@ABU?$tvec2@M$00@1@00@Z PROC	; glm::tmat3x2<float,1>::tmat3x2<float,1>, COMDAT
; _this$ = ecx

; 71   : 	{

	push	ebp
	mov	ebp, esp
	mov	edx, ecx
	push	2
	mov	eax, edx
	pop	ecx
$LL4@tmat3x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	ecx
	jns	SHORT $LL4@tmat3x2

; 72   : 		this->value[0] = v0;

	mov	ecx, DWORD PTR _v0$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]

; 73   : 		this->value[1] = v1;

	mov	ecx, DWORD PTR _v1$[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR [ecx+4]

; 74   : 		this->value[2] = v2;

	mov	ecx, DWORD PTR _v2$[ebp]
	mov	DWORD PTR [edx+12], eax
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx+16], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+20], eax

; 75   : 	}

	mov	eax, edx
	pop	ebp
	ret	12					; 0000000cH
??0?$tmat3x2@M$00@glm@@QAE@ABU?$tvec2@M$00@1@00@Z ENDP	; glm::tmat3x2<float,1>::tmat3x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$00@glm@@QAE@MMMMMM@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_x1$ = 16						; size = 4
_y1$ = 20						; size = 4
_x2$ = 24						; size = 4
_y2$ = 28						; size = 4
??0?$tmat3x2@M$00@glm@@QAE@MMMMMM@Z PROC		; glm::tmat3x2<float,1>::tmat3x2<float,1>, COMDAT
; _this$ = ecx

; 58   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	2
	mov	eax, ecx
	pop	edx
$LL4@tmat3x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	edx
	jns	SHORT $LL4@tmat3x2

; 59   : 		this->value[0] = col_type(x0, y0);

	movss	xmm0, DWORD PTR _x0$[ebp]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR _y0$[ebp]
	mov	eax, DWORD PTR $T3[ebp]
	movss	DWORD PTR $T3[ebp+4], xmm0

; 60   : 		this->value[1] = col_type(x1, y1);

	movss	xmm0, DWORD PTR _x1$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR $T3[ebp+4]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR _y1$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR $T2[ebp]
	movss	DWORD PTR $T2[ebp+4], xmm0

; 61   : 		this->value[2] = col_type(x2, y2);

	movss	xmm0, DWORD PTR _x2$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [ecx+12], eax
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR _y2$[ebp]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx+16], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [ecx+20], eax

; 62   : 	}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
??0?$tmat3x2@M$00@glm@@QAE@MMMMMM@Z ENDP		; glm::tmat3x2<float,1>::tmat3x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$00@glm@@QAE@M@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
_scalar$ = 8						; size = 4
??0?$tmat3x2@M$00@glm@@QAE@M@Z PROC			; glm::tmat3x2<float,1>::tmat3x2<float,1>, COMDAT
; _this$ = ecx

; 45   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	2
	mov	eax, ecx
	pop	edx
$LL4@tmat3x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	edx
	jns	SHORT $LL4@tmat3x2

; 46   : 		this->value[0] = col_type(scalar, 0);

	movss	xmm0, DWORD PTR _scalar$[ebp]
	and	DWORD PTR $T3[ebp+4], 0
	movss	DWORD PTR $T3[ebp], xmm0
	mov	eax, DWORD PTR $T3[ebp]

; 47   : 		this->value[1] = col_type(0, scalar);

	and	DWORD PTR $T2[ebp], 0
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR $T2[ebp]

; 48   : 		this->value[2] = col_type(0, 0);

	and	DWORD PTR $T1[ebp], 0
	mov	DWORD PTR [ecx+8], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	and	DWORD PTR $T1[ebp+4], 0
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [ecx+20], eax

; 49   : 	}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x2@M$00@glm@@QAE@M@Z ENDP			; glm::tmat3x2<float,1>::tmat3x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat3x2@M$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat3x2<float,1>::tmat3x2<float,1>, COMDAT
; _this$ = ecx

; 41   : 	{}

	push	2
	mov	eax, ecx
	pop	edx
$LL4@tmat3x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	edx
	jns	SHORT $LL4@tmat3x2
	mov	eax, ecx
	ret	4
??0?$tmat3x2@M$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat3x2<float,1>::tmat3x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tmat3x2@M$00@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tmat3x2@M$00@glm@@QAE@ABU01@@Z PROC		; glm::tmat3x2<float,1>::tmat3x2<float,1>, COMDAT
; _this$ = ecx

; 180  : template struct tmat3x2<float32, mediump>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	6
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tmat3x2@M$00@glm@@QAE@ABU01@@Z ENDP		; glm::tmat3x2<float,1>::tmat3x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$00@glm@@QAE@XZ
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
??0?$tmat3x2@M$00@glm@@QAE@XZ PROC			; glm::tmat3x2<float,1>::tmat3x2<float,1>, COMDAT
; _this$ = ecx

; 11   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	2
	mov	eax, ecx
	pop	edx
$LL4@tmat3x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	edx
	jns	SHORT $LL4@tmat3x2

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0);

	and	DWORD PTR $T3[ebp+4], 0
	mov	DWORD PTR $T3[ebp], 1065353216		; 3f800000H
	mov	eax, DWORD PTR $T3[ebp]

; 14   : 				this->value[1] = col_type(0, 1);

	and	DWORD PTR $T2[ebp], 0
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR $T2[ebp]

; 15   : 				this->value[2] = col_type(0, 0);

	and	DWORD PTR $T1[ebp], 0
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR $T2[ebp+4], 1065353216	; 3f800000H
	mov	eax, DWORD PTR $T2[ebp+4]
	and	DWORD PTR $T1[ebp+4], 0
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [ecx+20], eax

; 16   : #			endif
; 17   : 		}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$tmat3x2@M$00@glm@@QAE@XZ ENDP			; glm::tmat3x2<float,1>::tmat3x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??F?$tmat3x2@N$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat3x2@N$01@glm@@QAE?AU01@H@Z PROC		; glm::tmat3x2<double,2>::operator--, COMDAT
; _this$ = ecx

; 314  : 	{

	push	ebp
	mov	ebp, esp

; 315  : 		tmat3x2<T, P> Result(*this);
; 316  : 		--*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	mov	edx, ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	movups	xmm0, XMMWORD PTR [edx]
	push	12					; 0000000cH
	pop	ecx
	subpd	xmm0, xmm1
	mov	esi, edx
	mov	edi, eax
	rep movsd
	movups	XMMWORD PTR [edx], xmm0
	pop	edi
	movups	xmm0, XMMWORD PTR [edx+16]
	pop	esi
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+16], xmm0
	movups	xmm0, XMMWORD PTR [edx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+32], xmm0

; 317  : 		return Result;
; 318  : 	}

	pop	ebp
	ret	8
??F?$tmat3x2@N$01@glm@@QAE?AU01@H@Z ENDP		; glm::tmat3x2<double,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??E?$tmat3x2@N$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat3x2@N$01@glm@@QAE?AU01@H@Z PROC		; glm::tmat3x2<double,2>::operator++, COMDAT
; _this$ = ecx

; 306  : 	{

	push	ebp
	mov	ebp, esp

; 307  : 		tmat3x2<T, P> Result(*this);
; 308  : 		++*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	mov	edx, ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	movups	xmm0, XMMWORD PTR [edx]
	push	12					; 0000000cH
	pop	ecx
	addpd	xmm0, xmm1
	mov	esi, edx
	mov	edi, eax
	rep movsd
	movups	XMMWORD PTR [edx], xmm0
	pop	edi
	movups	xmm0, XMMWORD PTR [edx+16]
	pop	esi
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+16], xmm0
	movups	xmm0, XMMWORD PTR [edx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+32], xmm0

; 309  : 		return Result;
; 310  : 	}

	pop	ebp
	ret	8
??E?$tmat3x2@N$01@glm@@QAE?AU01@H@Z ENDP		; glm::tmat3x2<double,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??F?$tmat3x2@N$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat3x2@N$01@glm@@QAEAAU01@XZ PROC			; glm::tmat3x2<double,2>::operator--, COMDAT
; _this$ = ecx

; 298  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 299  : 		--this->value[1];
; 300  : 		--this->value[2];
; 301  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0

; 302  : 	}

	ret	0
??F?$tmat3x2@N$01@glm@@QAEAAU01@XZ ENDP			; glm::tmat3x2<double,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??E?$tmat3x2@N$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat3x2@N$01@glm@@QAEAAU01@XZ PROC			; glm::tmat3x2<double,2>::operator++, COMDAT
; _this$ = ecx

; 289  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 290  : 		++this->value[1];
; 291  : 		++this->value[2];
; 292  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0

; 293  : 	}

	ret	0
??E?$tmat3x2@N$01@glm@@QAEAAU01@XZ ENDP			; glm::tmat3x2<double,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tmat3x2@N$01@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tmat3x2@N$01@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tmat3x2<double,2>::operator=, COMDAT
; _this$ = ecx

; 178  : template struct tmat3x2<float64, lowp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	12					; 0000000cH
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tmat3x2@N$01@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tmat3x2<double,2>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??A?$tmat3x2@N$01@glm@@QBEABU?$tvec2@N$01@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat3x2@N$01@glm@@QBEABU?$tvec2@N$01@1@H@Z PROC	; glm::tmat3x2<double,2>::operator[], COMDAT
; _this$ = ecx

; 196  : 	{

	push	ebp
	mov	ebp, esp

; 197  : 		assert(i < this->length());
; 198  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, ecx

; 199  : 	}

	pop	ebp
	ret	4
??A?$tmat3x2@N$01@glm@@QBEABU?$tvec2@N$01@1@H@Z ENDP	; glm::tmat3x2<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??A?$tmat3x2@N$01@glm@@QAEAAU?$tvec2@N$01@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat3x2@N$01@glm@@QAEAAU?$tvec2@N$01@1@H@Z PROC	; glm::tmat3x2<double,2>::operator[], COMDAT
; _this$ = ecx

; 189  : 	{

	push	ebp
	mov	ebp, esp

; 190  : 		assert(i < this->length());
; 191  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, ecx

; 192  : 	}

	pop	ebp
	ret	4
??A?$tmat3x2@N$01@glm@@QAEAAU?$tvec2@N$01@1@H@Z ENDP	; glm::tmat3x2<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.hpp
;	COMDAT ?length@?$tmat3x2@N$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat3x2@N$01@glm@@SAHXZ PROC			; glm::tmat3x2<double,2>::length, COMDAT

; 80   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	push	3
	pop	eax
	ret	0
?length@?$tmat3x2@N$01@glm@@SAHXZ ENDP			; glm::tmat3x2<double,2>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$01@glm@@QAE@ABU?$tmat4x3@N$01@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat3x2@N$01@glm@@QAE@ABU?$tmat4x3@N$01@1@@Z PROC	; glm::tmat3x2<double,2>::tmat3x2<double,2>, COMDAT
; _this$ = ecx

; 179  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	xorps	xmm0, xmm0
	push	2
	pop	edx
$LL4@tmat3x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat3x2

; 180  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T3[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR $T3[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 181  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+24]
	lea	edi, DWORD PTR [ecx+16]
	lea	esi, DWORD PTR $T2[ebp]
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 182  : 		this->value[2] = col_type(m[2]);

	movups	xmm0, XMMWORD PTR [eax+48]
	lea	edi, DWORD PTR [ecx+32]

; 183  : 	}

	mov	eax, ecx
	lea	esi, DWORD PTR $T1[ebp]
	movups	XMMWORD PTR $T1[ebp], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x2@N$01@glm@@QAE@ABU?$tmat4x3@N$01@1@@Z ENDP	; glm::tmat3x2<double,2>::tmat3x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$01@glm@@QAE@ABU?$tmat4x2@N$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x2@N$01@glm@@QAE@ABU?$tmat4x2@N$01@1@@Z PROC	; glm::tmat3x2<double,2>::tmat3x2<double,2>, COMDAT
; _this$ = ecx

; 171  : 	{

	push	ebp
	mov	ebp, esp
	push	2
	mov	eax, ecx
	xorps	xmm0, xmm0
	pop	edx
$LL4@tmat3x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat3x2

; 172  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	esi, eax
	mov	edi, ecx
	movsd
	movsd
	movsd
	movsd

; 173  : 		this->value[1] = m[1];

	lea	esi, DWORD PTR [eax+16]
	lea	edi, DWORD PTR [ecx+16]
	movsd
	movsd
	movsd
	movsd

; 174  : 		this->value[2] = m[2];

	lea	esi, DWORD PTR [eax+32]

; 175  : 	}

	mov	eax, ecx
	lea	edi, DWORD PTR [ecx+32]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tmat3x2@N$01@glm@@QAE@ABU?$tmat4x2@N$01@1@@Z ENDP	; glm::tmat3x2<double,2>::tmat3x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$01@glm@@QAE@ABU?$tmat3x4@N$01@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat3x2@N$01@glm@@QAE@ABU?$tmat3x4@N$01@1@@Z PROC	; glm::tmat3x2<double,2>::tmat3x2<double,2>, COMDAT
; _this$ = ecx

; 163  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	xorps	xmm0, xmm0
	push	2
	pop	edx
$LL4@tmat3x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat3x2

; 164  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T3[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR $T3[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 165  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+32]
	lea	edi, DWORD PTR [ecx+16]
	lea	esi, DWORD PTR $T2[ebp]
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 166  : 		this->value[2] = col_type(m[2]);

	movups	xmm0, XMMWORD PTR [eax+64]
	lea	edi, DWORD PTR [ecx+32]

; 167  : 	}

	mov	eax, ecx
	lea	esi, DWORD PTR $T1[ebp]
	movups	XMMWORD PTR $T1[ebp], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x2@N$01@glm@@QAE@ABU?$tmat3x4@N$01@1@@Z ENDP	; glm::tmat3x2<double,2>::tmat3x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$01@glm@@QAE@ABU?$tmat2x4@N$01@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat3x2@N$01@glm@@QAE@ABU?$tmat2x4@N$01@1@@Z PROC	; glm::tmat3x2<double,2>::tmat3x2<double,2>, COMDAT
; _this$ = ecx

; 155  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	xorps	xmm0, xmm0
	push	2
	pop	edx
$LL4@tmat3x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat3x2

; 156  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T3[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR $T3[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 157  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+32]
	lea	edi, DWORD PTR [ecx+16]

; 158  : 		this->value[2] = col_type(T(0));
; 159  : 	}

	mov	eax, ecx
	lea	esi, DWORD PTR $T2[ebp]
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd
	xorps	xmm0, xmm0
	movsd
	movsd
	movsd
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+32]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x2@N$01@glm@@QAE@ABU?$tmat2x4@N$01@1@@Z ENDP	; glm::tmat3x2<double,2>::tmat3x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$01@glm@@QAE@ABU?$tmat2x3@N$01@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat3x2@N$01@glm@@QAE@ABU?$tmat2x3@N$01@1@@Z PROC	; glm::tmat3x2<double,2>::tmat3x2<double,2>, COMDAT
; _this$ = ecx

; 147  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	xorps	xmm0, xmm0
	push	2
	pop	edx
$LL4@tmat3x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat3x2

; 148  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T3[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR $T3[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 149  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+24]
	lea	edi, DWORD PTR [ecx+16]

; 150  : 		this->value[2] = col_type(T(0));
; 151  : 	}

	mov	eax, ecx
	lea	esi, DWORD PTR $T2[ebp]
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd
	xorps	xmm0, xmm0
	movsd
	movsd
	movsd
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+32]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x2@N$01@glm@@QAE@ABU?$tmat2x3@N$01@1@@Z ENDP	; glm::tmat3x2<double,2>::tmat3x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$01@glm@@QAE@ABU?$tmat4x4@N$01@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat3x2@N$01@glm@@QAE@ABU?$tmat4x4@N$01@1@@Z PROC	; glm::tmat3x2<double,2>::tmat3x2<double,2>, COMDAT
; _this$ = ecx

; 139  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	xorps	xmm0, xmm0
	push	2
	pop	edx
$LL4@tmat3x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat3x2

; 140  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T3[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR $T3[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 141  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+32]
	lea	edi, DWORD PTR [ecx+16]
	lea	esi, DWORD PTR $T2[ebp]
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 142  : 		this->value[2] = col_type(m[2]);

	movups	xmm0, XMMWORD PTR [eax+64]
	lea	edi, DWORD PTR [ecx+32]

; 143  : 	}

	mov	eax, ecx
	lea	esi, DWORD PTR $T1[ebp]
	movups	XMMWORD PTR $T1[ebp], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x2@N$01@glm@@QAE@ABU?$tmat4x4@N$01@1@@Z ENDP	; glm::tmat3x2<double,2>::tmat3x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$01@glm@@QAE@ABU?$tmat3x3@N$01@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat3x2@N$01@glm@@QAE@ABU?$tmat3x3@N$01@1@@Z PROC	; glm::tmat3x2<double,2>::tmat3x2<double,2>, COMDAT
; _this$ = ecx

; 131  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	xorps	xmm0, xmm0
	push	2
	pop	edx
$LL4@tmat3x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat3x2

; 132  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T3[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR $T3[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 133  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+24]
	lea	edi, DWORD PTR [ecx+16]
	lea	esi, DWORD PTR $T2[ebp]
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 134  : 		this->value[2] = col_type(m[2]);

	movups	xmm0, XMMWORD PTR [eax+48]
	lea	edi, DWORD PTR [ecx+32]

; 135  : 	}

	mov	eax, ecx
	lea	esi, DWORD PTR $T1[ebp]
	movups	XMMWORD PTR $T1[ebp], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x2@N$01@glm@@QAE@ABU?$tmat3x3@N$01@1@@Z ENDP	; glm::tmat3x2<double,2>::tmat3x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$01@glm@@QAE@ABU?$tmat2x2@N$01@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat3x2@N$01@glm@@QAE@ABU?$tmat2x2@N$01@1@@Z PROC	; glm::tmat3x2<double,2>::tmat3x2<double,2>, COMDAT
; _this$ = ecx

; 123  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	xorps	xmm0, xmm0
	push	2
	pop	edx
$LL4@tmat3x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat3x2

; 124  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	push	esi
	push	edi
	mov	esi, eax
	mov	edi, ecx
	movupd	XMMWORD PTR $T1[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 125  : 		this->value[1] = m[1];

	lea	esi, DWORD PTR [eax+16]

; 126  : 		this->value[2] = col_type(0);
; 127  : 	}

	mov	eax, ecx
	lea	edi, DWORD PTR [ecx+16]
	movsd
	movsd
	movsd
	movsd
	lea	edi, DWORD PTR [ecx+32]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x2@N$01@glm@@QAE@ABU?$tmat2x2@N$01@1@@Z ENDP	; glm::tmat3x2<double,2>::tmat3x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$01@glm@@QAE@ABU?$tvec2@N$01@1@00@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??0?$tmat3x2@N$01@glm@@QAE@ABU?$tvec2@N$01@1@00@Z PROC	; glm::tmat3x2<double,2>::tmat3x2<double,2>, COMDAT
; _this$ = ecx

; 71   : 	{

	push	ebp
	mov	ebp, esp
	push	2
	mov	eax, ecx
	xorps	xmm0, xmm0
	pop	edx
$LL4@tmat3x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat3x2

; 72   : 		this->value[0] = v0;

	push	esi
	mov	esi, DWORD PTR _v0$[ebp]

; 73   : 		this->value[1] = v1;
; 74   : 		this->value[2] = v2;
; 75   : 	}

	mov	eax, ecx
	push	edi
	mov	edi, ecx
	movsd
	movsd
	movsd
	movsd
	mov	esi, DWORD PTR _v1$[ebp]
	lea	edi, DWORD PTR [ecx+16]
	movsd
	movsd
	movsd
	movsd
	mov	esi, DWORD PTR _v2$[ebp]
	lea	edi, DWORD PTR [ecx+32]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	12					; 0000000cH
??0?$tmat3x2@N$01@glm@@QAE@ABU?$tvec2@N$01@1@00@Z ENDP	; glm::tmat3x2<double,2>::tmat3x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$01@glm@@QAE@NNNNNN@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
_x0$ = 8						; size = 8
_y0$ = 16						; size = 8
_x1$ = 24						; size = 8
_y1$ = 32						; size = 8
_x2$ = 40						; size = 8
_y2$ = 48						; size = 8
??0?$tmat3x2@N$01@glm@@QAE@NNNNNN@Z PROC		; glm::tmat3x2<double,2>::tmat3x2<double,2>, COMDAT
; _this$ = ecx

; 58   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	xorps	xmm0, xmm0
	push	2
	pop	edx
$LL4@tmat3x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat3x2

; 59   : 		this->value[0] = col_type(x0, y0);

	movsd	xmm0, QWORD PTR _x0$[ebp]

; 60   : 		this->value[1] = col_type(x1, y1);
; 61   : 		this->value[2] = col_type(x2, y2);
; 62   : 	}

	mov	eax, ecx
	push	esi
	push	edi
	movsd	QWORD PTR $T3[ebp], xmm0
	lea	esi, DWORD PTR $T3[ebp]
	movsd	xmm0, QWORD PTR _y0$[ebp]
	mov	edi, ecx
	movsd	QWORD PTR $T3[ebp+8], xmm0
	movsd	xmm0, QWORD PTR _x1$[ebp]
	movsd
	movsd
	movsd
	movsd
	movsd	QWORD PTR $T2[ebp], xmm0
	lea	edi, DWORD PTR [ecx+16]
	movsd	xmm0, QWORD PTR _y1$[ebp]
	lea	esi, DWORD PTR $T2[ebp]
	movsd	QWORD PTR $T2[ebp+8], xmm0
	movsd	xmm0, QWORD PTR _x2$[ebp]
	movsd
	movsd
	movsd
	movsd
	movsd	QWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+32]
	movsd	xmm0, QWORD PTR _y2$[ebp]
	lea	esi, DWORD PTR $T1[ebp]
	movsd	QWORD PTR $T1[ebp+8], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	48					; 00000030H
??0?$tmat3x2@N$01@glm@@QAE@NNNNNN@Z ENDP		; glm::tmat3x2<double,2>::tmat3x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$01@glm@@QAE@N@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
_scalar$ = 8						; size = 8
??0?$tmat3x2@N$01@glm@@QAE@N@Z PROC			; glm::tmat3x2<double,2>::tmat3x2<double,2>, COMDAT
; _this$ = ecx

; 45   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	xorps	xmm1, xmm1
	push	2
	pop	edx
$LL4@tmat3x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm1
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat3x2

; 46   : 		this->value[0] = col_type(scalar, 0);

	movsd	xmm0, QWORD PTR _scalar$[ebp]

; 47   : 		this->value[1] = col_type(0, scalar);
; 48   : 		this->value[2] = col_type(0, 0);
; 49   : 	}

	mov	eax, ecx
	push	esi
	push	edi
	movsd	QWORD PTR $T3[ebp], xmm0
	lea	esi, DWORD PTR $T3[ebp]
	movsd	QWORD PTR $T3[ebp+8], xmm1
	mov	edi, ecx
	movsd
	movsd
	movsd
	movsd
	movsd	QWORD PTR $T2[ebp+8], xmm0
	lea	edi, DWORD PTR [ecx+16]
	movsd	QWORD PTR $T2[ebp], xmm1
	lea	esi, DWORD PTR $T2[ebp]
	movsd
	xorps	xmm0, xmm0
	movsd
	movsd
	movsd
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+32]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$tmat3x2@N$01@glm@@QAE@N@Z ENDP			; glm::tmat3x2<double,2>::tmat3x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat3x2@N$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat3x2<double,2>::tmat3x2<double,2>, COMDAT
; _this$ = ecx

; 41   : 	{}

	push	2
	mov	eax, ecx
	xorps	xmm0, xmm0
	pop	edx
$LL4@tmat3x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat3x2
	mov	eax, ecx
	ret	4
??0?$tmat3x2@N$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat3x2<double,2>::tmat3x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tmat3x2@N$01@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tmat3x2@N$01@glm@@QAE@ABU01@@Z PROC		; glm::tmat3x2<double,2>::tmat3x2<double,2>, COMDAT
; _this$ = ecx

; 178  : template struct tmat3x2<float64, lowp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	12					; 0000000cH
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tmat3x2@N$01@glm@@QAE@ABU01@@Z ENDP		; glm::tmat3x2<double,2>::tmat3x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$01@glm@@QAE@XZ
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
??0?$tmat3x2@N$01@glm@@QAE@XZ PROC			; glm::tmat3x2<double,2>::tmat3x2<double,2>, COMDAT
; _this$ = ecx

; 11   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	xorps	xmm0, xmm0
	push	2
	pop	edx
$LL4@tmat3x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat3x2

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0);
; 14   : 				this->value[1] = col_type(0, 1);
; 15   : 				this->value[2] = col_type(0, 0);
; 16   : #			endif
; 17   : 		}

	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	mov	eax, ecx
	push	esi
	push	edi
	movupd	XMMWORD PTR $T3[ebp], xmm0
	lea	esi, DWORD PTR $T3[ebp]
	mov	edi, ecx
	movaps	xmm0, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	movsd
	movsd
	movsd
	movsd
	movupd	XMMWORD PTR $T2[ebp], xmm0
	lea	edi, DWORD PTR [ecx+16]
	lea	esi, DWORD PTR $T2[ebp]
	xorps	xmm0, xmm0
	movsd
	movsd
	movsd
	movsd
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+32]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$tmat3x2@N$01@glm@@QAE@XZ ENDP			; glm::tmat3x2<double,2>::tmat3x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??F?$tmat3x2@M$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat3x2@M$01@glm@@QAE?AU01@H@Z PROC		; glm::tmat3x2<float,2>::operator--, COMDAT
; _this$ = ecx

; 314  : 	{

	push	ebp
	mov	ebp, esp

; 315  : 		tmat3x2<T, P> Result(*this);
; 316  : 		--*this;

	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	mov	edx, ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	movups	xmm0, XMMWORD PTR [edx]
	push	6
	pop	ecx
	subps	xmm0, xmm1
	mov	esi, edx
	mov	edi, eax
	rep movsd
	movups	XMMWORD PTR [edx], xmm0
	pop	edi
	movss	xmm0, DWORD PTR [edx+16]
	subss	xmm0, xmm1
	pop	esi
	movss	DWORD PTR [edx+16], xmm0
	movss	xmm0, DWORD PTR [edx+20]
	subss	xmm0, xmm1
	movss	DWORD PTR [edx+20], xmm0

; 317  : 		return Result;
; 318  : 	}

	pop	ebp
	ret	8
??F?$tmat3x2@M$01@glm@@QAE?AU01@H@Z ENDP		; glm::tmat3x2<float,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??E?$tmat3x2@M$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat3x2@M$01@glm@@QAE?AU01@H@Z PROC		; glm::tmat3x2<float,2>::operator++, COMDAT
; _this$ = ecx

; 306  : 	{

	push	ebp
	mov	ebp, esp

; 307  : 		tmat3x2<T, P> Result(*this);
; 308  : 		++*this;

	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	mov	edx, ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	movups	xmm0, XMMWORD PTR [edx]
	push	6
	pop	ecx
	addps	xmm0, xmm1
	mov	esi, edx
	mov	edi, eax
	rep movsd
	movups	XMMWORD PTR [edx], xmm0
	pop	edi
	movss	xmm0, DWORD PTR [edx+16]
	addss	xmm0, xmm1
	pop	esi
	movss	DWORD PTR [edx+16], xmm0
	movss	xmm0, DWORD PTR [edx+20]
	addss	xmm0, xmm1
	movss	DWORD PTR [edx+20], xmm0

; 309  : 		return Result;
; 310  : 	}

	pop	ebp
	ret	8
??E?$tmat3x2@M$01@glm@@QAE?AU01@H@Z ENDP		; glm::tmat3x2<float,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??F?$tmat3x2@M$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat3x2@M$01@glm@@QAEAAU01@XZ PROC			; glm::tmat3x2<float,2>::operator--, COMDAT
; _this$ = ecx

; 298  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 299  : 		--this->value[1];
; 300  : 		--this->value[2];
; 301  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	subss	xmm0, xmm1
	movss	DWORD PTR [ecx+16], xmm0
	movss	xmm0, DWORD PTR [ecx+20]
	subss	xmm0, xmm1
	movss	DWORD PTR [ecx+20], xmm0

; 302  : 	}

	ret	0
??F?$tmat3x2@M$01@glm@@QAEAAU01@XZ ENDP			; glm::tmat3x2<float,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??E?$tmat3x2@M$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat3x2@M$01@glm@@QAEAAU01@XZ PROC			; glm::tmat3x2<float,2>::operator++, COMDAT
; _this$ = ecx

; 289  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 290  : 		++this->value[1];
; 291  : 		++this->value[2];
; 292  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	addss	xmm0, xmm1
	movss	DWORD PTR [ecx+16], xmm0
	movss	xmm0, DWORD PTR [ecx+20]
	addss	xmm0, xmm1
	movss	DWORD PTR [ecx+20], xmm0

; 293  : 	}

	ret	0
??E?$tmat3x2@M$01@glm@@QAEAAU01@XZ ENDP			; glm::tmat3x2<float,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tmat3x2@M$01@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tmat3x2@M$01@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tmat3x2<float,2>::operator=, COMDAT
; _this$ = ecx

; 177  : template struct tmat3x2<float32, lowp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	6
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tmat3x2@M$01@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tmat3x2<float,2>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??A?$tmat3x2@M$01@glm@@QBEABU?$tvec2@M$01@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat3x2@M$01@glm@@QBEABU?$tvec2@M$01@1@H@Z PROC	; glm::tmat3x2<float,2>::operator[], COMDAT
; _this$ = ecx

; 196  : 	{

	push	ebp
	mov	ebp, esp

; 197  : 		assert(i < this->length());
; 198  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 199  : 	}

	pop	ebp
	ret	4
??A?$tmat3x2@M$01@glm@@QBEABU?$tvec2@M$01@1@H@Z ENDP	; glm::tmat3x2<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??A?$tmat3x2@M$01@glm@@QAEAAU?$tvec2@M$01@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat3x2@M$01@glm@@QAEAAU?$tvec2@M$01@1@H@Z PROC	; glm::tmat3x2<float,2>::operator[], COMDAT
; _this$ = ecx

; 189  : 	{

	push	ebp
	mov	ebp, esp

; 190  : 		assert(i < this->length());
; 191  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 192  : 	}

	pop	ebp
	ret	4
??A?$tmat3x2@M$01@glm@@QAEAAU?$tvec2@M$01@1@H@Z ENDP	; glm::tmat3x2<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.hpp
;	COMDAT ?length@?$tmat3x2@M$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat3x2@M$01@glm@@SAHXZ PROC			; glm::tmat3x2<float,2>::length, COMDAT

; 80   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	push	3
	pop	eax
	ret	0
?length@?$tmat3x2@M$01@glm@@SAHXZ ENDP			; glm::tmat3x2<float,2>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$01@glm@@QAE@ABU?$tmat4x3@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat3x2@M$01@glm@@QAE@ABU?$tmat4x3@M$01@1@@Z PROC	; glm::tmat3x2<float,2>::tmat3x2<float,2>, COMDAT
; _this$ = ecx

; 179  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	mov	edx, ecx
	push	2
	mov	eax, edx
	pop	ecx
$LL4@tmat3x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	ecx
	jns	SHORT $LL4@tmat3x2

; 180  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 181  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+12]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [edx+12], eax

; 182  : 		this->value[2] = col_type(m[2]);

	movss	xmm0, DWORD PTR [ecx+24]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+16], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+20], eax

; 183  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x2@M$01@glm@@QAE@ABU?$tmat4x3@M$01@1@@Z ENDP	; glm::tmat3x2<float,2>::tmat3x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$01@glm@@QAE@ABU?$tmat4x2@M$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x2@M$01@glm@@QAE@ABU?$tmat4x2@M$01@1@@Z PROC	; glm::tmat3x2<float,2>::tmat3x2<float,2>, COMDAT
; _this$ = ecx

; 171  : 	{

	push	ebp
	mov	ebp, esp
	mov	edx, ecx
	push	2
	mov	eax, edx
	pop	ecx
$LL4@tmat3x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	ecx
	jns	SHORT $LL4@tmat3x2

; 172  : 		this->value[0] = m[0];

	mov	ecx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax

; 173  : 		this->value[1] = m[1];

	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], eax

; 174  : 		this->value[2] = m[2];

	mov	eax, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+16], eax
	mov	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR [edx+20], eax

; 175  : 	}

	mov	eax, edx
	pop	ebp
	ret	4
??0?$tmat3x2@M$01@glm@@QAE@ABU?$tmat4x2@M$01@1@@Z ENDP	; glm::tmat3x2<float,2>::tmat3x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$01@glm@@QAE@ABU?$tmat3x4@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat3x2@M$01@glm@@QAE@ABU?$tmat3x4@M$01@1@@Z PROC	; glm::tmat3x2<float,2>::tmat3x2<float,2>, COMDAT
; _this$ = ecx

; 163  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	mov	edx, ecx
	push	2
	mov	eax, edx
	pop	ecx
$LL4@tmat3x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	ecx
	jns	SHORT $LL4@tmat3x2

; 164  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 165  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+16]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [edx+12], eax

; 166  : 		this->value[2] = col_type(m[2]);

	movss	xmm0, DWORD PTR [ecx+32]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+16], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+20], eax

; 167  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x2@M$01@glm@@QAE@ABU?$tmat3x4@M$01@1@@Z ENDP	; glm::tmat3x2<float,2>::tmat3x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$01@glm@@QAE@ABU?$tmat2x4@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat3x2@M$01@glm@@QAE@ABU?$tmat2x4@M$01@1@@Z PROC	; glm::tmat3x2<float,2>::tmat3x2<float,2>, COMDAT
; _this$ = ecx

; 155  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	mov	edx, ecx
	push	2
	mov	eax, edx
	pop	ecx
$LL4@tmat3x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	ecx
	jns	SHORT $LL4@tmat3x2

; 156  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 157  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+16]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR $T2[ebp]

; 158  : 		this->value[2] = col_type(T(0));

	and	DWORD PTR $T1[ebp], 0
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	and	DWORD PTR $T1[ebp+4], 0
	mov	DWORD PTR [edx+12], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+16], eax
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+20], eax

; 159  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x2@M$01@glm@@QAE@ABU?$tmat2x4@M$01@1@@Z ENDP	; glm::tmat3x2<float,2>::tmat3x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$01@glm@@QAE@ABU?$tmat2x3@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat3x2@M$01@glm@@QAE@ABU?$tmat2x3@M$01@1@@Z PROC	; glm::tmat3x2<float,2>::tmat3x2<float,2>, COMDAT
; _this$ = ecx

; 147  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	mov	edx, ecx
	push	2
	mov	eax, edx
	pop	ecx
$LL4@tmat3x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	ecx
	jns	SHORT $LL4@tmat3x2

; 148  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 149  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+12]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR $T2[ebp]

; 150  : 		this->value[2] = col_type(T(0));

	and	DWORD PTR $T1[ebp], 0
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	and	DWORD PTR $T1[ebp+4], 0
	mov	DWORD PTR [edx+12], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+16], eax
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+20], eax

; 151  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x2@M$01@glm@@QAE@ABU?$tmat2x3@M$01@1@@Z ENDP	; glm::tmat3x2<float,2>::tmat3x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$01@glm@@QAE@ABU?$tmat4x4@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat3x2@M$01@glm@@QAE@ABU?$tmat4x4@M$01@1@@Z PROC	; glm::tmat3x2<float,2>::tmat3x2<float,2>, COMDAT
; _this$ = ecx

; 139  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	mov	edx, ecx
	push	2
	mov	eax, edx
	pop	ecx
$LL4@tmat3x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	ecx
	jns	SHORT $LL4@tmat3x2

; 140  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 141  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+16]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [edx+12], eax

; 142  : 		this->value[2] = col_type(m[2]);

	movss	xmm0, DWORD PTR [ecx+32]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+16], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+20], eax

; 143  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x2@M$01@glm@@QAE@ABU?$tmat4x4@M$01@1@@Z ENDP	; glm::tmat3x2<float,2>::tmat3x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$01@glm@@QAE@ABU?$tmat3x3@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat3x2@M$01@glm@@QAE@ABU?$tmat3x3@M$01@1@@Z PROC	; glm::tmat3x2<float,2>::tmat3x2<float,2>, COMDAT
; _this$ = ecx

; 131  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	mov	edx, ecx
	push	2
	mov	eax, edx
	pop	ecx
$LL4@tmat3x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	ecx
	jns	SHORT $LL4@tmat3x2

; 132  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 133  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+12]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [edx+12], eax

; 134  : 		this->value[2] = col_type(m[2]);

	movss	xmm0, DWORD PTR [ecx+24]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+16], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+20], eax

; 135  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x2@M$01@glm@@QAE@ABU?$tmat3x3@M$01@1@@Z ENDP	; glm::tmat3x2<float,2>::tmat3x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$01@glm@@QAE@ABU?$tmat2x2@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat3x2@M$01@glm@@QAE@ABU?$tmat2x2@M$01@1@@Z PROC	; glm::tmat3x2<float,2>::tmat3x2<float,2>, COMDAT
; _this$ = ecx

; 123  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	mov	edx, ecx
	push	2
	mov	eax, edx
	pop	ecx
$LL4@tmat3x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	ecx
	jns	SHORT $LL4@tmat3x2

; 124  : 		this->value[0] = m[0];

	mov	ecx, DWORD PTR _m$[ebp]

; 125  : 		this->value[1] = m[1];
; 126  : 		this->value[2] = col_type(0);

	and	DWORD PTR $T1[ebp], 0
	and	DWORD PTR $T1[ebp+4], 0
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+16], eax
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+20], eax

; 127  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x2@M$01@glm@@QAE@ABU?$tmat2x2@M$01@1@@Z ENDP	; glm::tmat3x2<float,2>::tmat3x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$01@glm@@QAE@ABU?$tvec2@M$01@1@00@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??0?$tmat3x2@M$01@glm@@QAE@ABU?$tvec2@M$01@1@00@Z PROC	; glm::tmat3x2<float,2>::tmat3x2<float,2>, COMDAT
; _this$ = ecx

; 71   : 	{

	push	ebp
	mov	ebp, esp
	mov	edx, ecx
	push	2
	mov	eax, edx
	pop	ecx
$LL4@tmat3x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	ecx
	jns	SHORT $LL4@tmat3x2

; 72   : 		this->value[0] = v0;

	mov	ecx, DWORD PTR _v0$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]

; 73   : 		this->value[1] = v1;

	mov	ecx, DWORD PTR _v1$[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR [ecx+4]

; 74   : 		this->value[2] = v2;

	mov	ecx, DWORD PTR _v2$[ebp]
	mov	DWORD PTR [edx+12], eax
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx+16], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+20], eax

; 75   : 	}

	mov	eax, edx
	pop	ebp
	ret	12					; 0000000cH
??0?$tmat3x2@M$01@glm@@QAE@ABU?$tvec2@M$01@1@00@Z ENDP	; glm::tmat3x2<float,2>::tmat3x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$01@glm@@QAE@MMMMMM@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_x1$ = 16						; size = 4
_y1$ = 20						; size = 4
_x2$ = 24						; size = 4
_y2$ = 28						; size = 4
??0?$tmat3x2@M$01@glm@@QAE@MMMMMM@Z PROC		; glm::tmat3x2<float,2>::tmat3x2<float,2>, COMDAT
; _this$ = ecx

; 58   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	2
	mov	eax, ecx
	pop	edx
$LL4@tmat3x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	edx
	jns	SHORT $LL4@tmat3x2

; 59   : 		this->value[0] = col_type(x0, y0);

	movss	xmm0, DWORD PTR _x0$[ebp]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR _y0$[ebp]
	mov	eax, DWORD PTR $T3[ebp]
	movss	DWORD PTR $T3[ebp+4], xmm0

; 60   : 		this->value[1] = col_type(x1, y1);

	movss	xmm0, DWORD PTR _x1$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR $T3[ebp+4]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR _y1$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR $T2[ebp]
	movss	DWORD PTR $T2[ebp+4], xmm0

; 61   : 		this->value[2] = col_type(x2, y2);

	movss	xmm0, DWORD PTR _x2$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [ecx+12], eax
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR _y2$[ebp]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx+16], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [ecx+20], eax

; 62   : 	}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
??0?$tmat3x2@M$01@glm@@QAE@MMMMMM@Z ENDP		; glm::tmat3x2<float,2>::tmat3x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$01@glm@@QAE@M@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
_scalar$ = 8						; size = 4
??0?$tmat3x2@M$01@glm@@QAE@M@Z PROC			; glm::tmat3x2<float,2>::tmat3x2<float,2>, COMDAT
; _this$ = ecx

; 45   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	2
	mov	eax, ecx
	pop	edx
$LL4@tmat3x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	edx
	jns	SHORT $LL4@tmat3x2

; 46   : 		this->value[0] = col_type(scalar, 0);

	movss	xmm0, DWORD PTR _scalar$[ebp]
	and	DWORD PTR $T3[ebp+4], 0
	movss	DWORD PTR $T3[ebp], xmm0
	mov	eax, DWORD PTR $T3[ebp]

; 47   : 		this->value[1] = col_type(0, scalar);

	and	DWORD PTR $T2[ebp], 0
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR $T2[ebp]

; 48   : 		this->value[2] = col_type(0, 0);

	and	DWORD PTR $T1[ebp], 0
	mov	DWORD PTR [ecx+8], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	and	DWORD PTR $T1[ebp+4], 0
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [ecx+20], eax

; 49   : 	}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x2@M$01@glm@@QAE@M@Z ENDP			; glm::tmat3x2<float,2>::tmat3x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat3x2@M$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat3x2<float,2>::tmat3x2<float,2>, COMDAT
; _this$ = ecx

; 41   : 	{}

	push	2
	mov	eax, ecx
	pop	edx
$LL4@tmat3x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	edx
	jns	SHORT $LL4@tmat3x2
	mov	eax, ecx
	ret	4
??0?$tmat3x2@M$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat3x2<float,2>::tmat3x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tmat3x2@M$01@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tmat3x2@M$01@glm@@QAE@ABU01@@Z PROC		; glm::tmat3x2<float,2>::tmat3x2<float,2>, COMDAT
; _this$ = ecx

; 177  : template struct tmat3x2<float32, lowp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	6
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tmat3x2@M$01@glm@@QAE@ABU01@@Z ENDP		; glm::tmat3x2<float,2>::tmat3x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$01@glm@@QAE@XZ
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
??0?$tmat3x2@M$01@glm@@QAE@XZ PROC			; glm::tmat3x2<float,2>::tmat3x2<float,2>, COMDAT
; _this$ = ecx

; 11   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	2
	mov	eax, ecx
	pop	edx
$LL4@tmat3x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	edx
	jns	SHORT $LL4@tmat3x2

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0);

	and	DWORD PTR $T3[ebp+4], 0
	mov	DWORD PTR $T3[ebp], 1065353216		; 3f800000H
	mov	eax, DWORD PTR $T3[ebp]

; 14   : 				this->value[1] = col_type(0, 1);

	and	DWORD PTR $T2[ebp], 0
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR $T2[ebp]

; 15   : 				this->value[2] = col_type(0, 0);

	and	DWORD PTR $T1[ebp], 0
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR $T2[ebp+4], 1065353216	; 3f800000H
	mov	eax, DWORD PTR $T2[ebp+4]
	and	DWORD PTR $T1[ebp+4], 0
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [ecx+20], eax

; 16   : #			endif
; 17   : 		}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$tmat3x2@M$01@glm@@QAE@XZ ENDP			; glm::tmat3x2<float,2>::tmat3x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??F?$tmat2x4@N$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat2x4@N$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tmat2x4<double,0>::operator--, COMDAT
; _this$ = ecx

; 275  : 	{

	push	ebp
	mov	ebp, esp

; 276  : 		tmat2x4<T, P> Result(*this);
; 277  : 		--*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	mov	edx, ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	movups	xmm0, XMMWORD PTR [edx]
	push	16					; 00000010H
	pop	ecx
	subpd	xmm0, xmm1
	mov	esi, edx
	mov	edi, eax
	rep movsd
	movups	XMMWORD PTR [edx], xmm0
	pop	edi
	movups	xmm0, XMMWORD PTR [edx+16]
	pop	esi
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+16], xmm0
	movups	xmm0, XMMWORD PTR [edx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+32], xmm0
	movups	xmm0, XMMWORD PTR [edx+48]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+48], xmm0

; 278  : 		return Result;
; 279  : 	}

	pop	ebp
	ret	8
??F?$tmat2x4@N$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tmat2x4<double,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??E?$tmat2x4@N$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat2x4@N$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tmat2x4<double,0>::operator++, COMDAT
; _this$ = ecx

; 267  : 	{

	push	ebp
	mov	ebp, esp

; 268  : 		tmat2x4<T, P> Result(*this);
; 269  : 		++*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	mov	edx, ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	movups	xmm0, XMMWORD PTR [edx]
	push	16					; 00000010H
	pop	ecx
	addpd	xmm0, xmm1
	mov	esi, edx
	mov	edi, eax
	rep movsd
	movups	XMMWORD PTR [edx], xmm0
	pop	edi
	movups	xmm0, XMMWORD PTR [edx+16]
	pop	esi
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+16], xmm0
	movups	xmm0, XMMWORD PTR [edx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+32], xmm0
	movups	xmm0, XMMWORD PTR [edx+48]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+48], xmm0

; 270  : 		return Result;
; 271  : 	}

	pop	ebp
	ret	8
??E?$tmat2x4@N$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tmat2x4<double,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??F?$tmat2x4@N$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat2x4@N$0A@@glm@@QAEAAU01@XZ PROC		; glm::tmat2x4<double,0>::operator--, COMDAT
; _this$ = ecx

; 260  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 261  : 		--this->value[1];
; 262  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0

; 263  : 	}

	ret	0
??F?$tmat2x4@N$0A@@glm@@QAEAAU01@XZ ENDP		; glm::tmat2x4<double,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??E?$tmat2x4@N$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat2x4@N$0A@@glm@@QAEAAU01@XZ PROC		; glm::tmat2x4<double,0>::operator++, COMDAT
; _this$ = ecx

; 252  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 253  : 		++this->value[1];
; 254  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0

; 255  : 	}

	ret	0
??E?$tmat2x4@N$0A@@glm@@QAEAAU01@XZ ENDP		; glm::tmat2x4<double,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tmat2x4@N$0A@@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tmat2x4@N$0A@@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tmat2x4<double,0>::operator=, COMDAT
; _this$ = ecx

; 174  : template struct tmat2x4<float64, highp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	16					; 00000010H
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tmat2x4@N$0A@@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tmat2x4<double,0>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??A?$tmat2x4@N$0A@@glm@@QBEABU?$tvec4@N$0A@@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat2x4@N$0A@@glm@@QBEABU?$tvec4@N$0A@@1@H@Z PROC	; glm::tmat2x4<double,0>::operator[], COMDAT
; _this$ = ecx

; 167  : 	{

	push	ebp
	mov	ebp, esp

; 168  : 		assert(i < this->length());
; 169  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	add	eax, ecx

; 170  : 	}

	pop	ebp
	ret	4
??A?$tmat2x4@N$0A@@glm@@QBEABU?$tvec4@N$0A@@1@H@Z ENDP	; glm::tmat2x4<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??A?$tmat2x4@N$0A@@glm@@QAEAAU?$tvec4@N$0A@@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat2x4@N$0A@@glm@@QAEAAU?$tvec4@N$0A@@1@H@Z PROC	; glm::tmat2x4<double,0>::operator[], COMDAT
; _this$ = ecx

; 160  : 	{

	push	ebp
	mov	ebp, esp

; 161  : 		assert(i < this->length());
; 162  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	add	eax, ecx

; 163  : 	}

	pop	ebp
	ret	4
??A?$tmat2x4@N$0A@@glm@@QAEAAU?$tvec4@N$0A@@1@H@Z ENDP	; glm::tmat2x4<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.hpp
;	COMDAT ?length@?$tmat2x4@N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat2x4@N$0A@@glm@@SAHXZ PROC			; glm::tmat2x4<double,0>::length, COMDAT

; 75   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	push	2
	pop	eax
	ret	0
?length@?$tmat2x4@N$0A@@glm@@SAHXZ ENDP			; glm::tmat2x4<double,0>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$0A@@glm@@QAE@ABU?$tmat4x3@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tmat2x4@N$0A@@glm@@QAE@ABU?$tmat4x3@N$0A@@1@@Z PROC ; glm::tmat2x4<double,0>::tmat2x4<double,0>, COMDAT
; _this$ = ecx

; 151  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xor	edx, edx
	inc	edx
	xorps	xmm1, xmm1
	push	ebx
	mov	ebx, ecx
	push	esi
	push	edi
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat2x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm1
	movups	XMMWORD PTR [eax], xmm1
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat2x4

; 152  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T2[ebp]
	push	8
	pop	ecx
	movsd	QWORD PTR $T2[ebp+24], xmm1
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]

; 153  : 		this->value[1] = col_type(m[1], 0);

	push	8
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR $T2[ebp+16], xmm0
	rep movsd
	movups	xmm0, XMMWORD PTR [eax+24]
	pop	ecx
	lea	edi, DWORD PTR [ebx+32]
	movsd	QWORD PTR $T1[ebp+24], xmm1
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	movsd	xmm0, QWORD PTR [eax+40]

; 154  : 	}

	mov	eax, ebx
	movsd	QWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x4@N$0A@@glm@@QAE@ABU?$tmat4x3@N$0A@@1@@Z ENDP ; glm::tmat2x4<double,0>::tmat2x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$0A@@glm@@QAE@ABU?$tmat4x2@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tmat2x4@N$0A@@glm@@QAE@ABU?$tmat4x2@N$0A@@1@@Z PROC ; glm::tmat2x4<double,0>::tmat2x4<double,0>, COMDAT
; _this$ = ecx

; 144  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xor	edx, edx
	inc	edx
	xorps	xmm0, xmm0
	push	ebx
	mov	ebx, ecx
	push	esi
	push	edi
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat2x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm0
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat2x4

; 145  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T2[ebp]
	push	8
	pop	ecx
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]

; 146  : 		this->value[1] = col_type(m[1], 0, 0);

	push	8
	movups	XMMWORD PTR $T2[ebp], xmm0
	xorps	xmm0, xmm0
	movupd	XMMWORD PTR $T2[ebp+16], xmm0
	rep movsd
	movups	xmm0, XMMWORD PTR [eax+16]
	pop	ecx
	lea	edi, DWORD PTR [ebx+32]

; 147  : 	}

	mov	eax, ebx
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	xorps	xmm0, xmm0
	movupd	XMMWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x4@N$0A@@glm@@QAE@ABU?$tmat4x2@N$0A@@1@@Z ENDP ; glm::tmat2x4<double,0>::tmat2x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$0A@@glm@@QAE@ABU?$tmat3x4@N$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x4@N$0A@@glm@@QAE@ABU?$tmat3x4@N$0A@@1@@Z PROC ; glm::tmat2x4<double,0>::tmat2x4<double,0>, COMDAT
; _this$ = ecx

; 137  : 	{

	push	ebp
	mov	ebp, esp
	mov	edx, ecx
	xorps	xmm0, xmm0
	xor	ecx, ecx
	inc	ecx
	lea	eax, DWORD PTR [edx+16]
$LL4@tmat2x4:
	dec	ecx
	movups	XMMWORD PTR [eax-16], xmm0
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat2x4

; 138  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	push	8
	pop	ecx
	mov	esi, eax
	mov	edi, edx
	rep movsd

; 139  : 		this->value[1] = m[1];

	push	8
	pop	ecx
	lea	esi, DWORD PTR [eax+32]

; 140  : 	}

	mov	eax, edx
	lea	edi, DWORD PTR [edx+32]
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tmat2x4@N$0A@@glm@@QAE@ABU?$tmat3x4@N$0A@@1@@Z ENDP ; glm::tmat2x4<double,0>::tmat2x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$0A@@glm@@QAE@ABU?$tmat3x2@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tmat2x4@N$0A@@glm@@QAE@ABU?$tmat3x2@N$0A@@1@@Z PROC ; glm::tmat2x4<double,0>::tmat2x4<double,0>, COMDAT
; _this$ = ecx

; 130  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xor	edx, edx
	inc	edx
	xorps	xmm0, xmm0
	push	ebx
	mov	ebx, ecx
	push	esi
	push	edi
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat2x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm0
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat2x4

; 131  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T2[ebp]
	push	8
	pop	ecx
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]

; 132  : 		this->value[1] = col_type(m[1], 0, 0);

	push	8
	movups	XMMWORD PTR $T2[ebp], xmm0
	xorps	xmm0, xmm0
	movupd	XMMWORD PTR $T2[ebp+16], xmm0
	rep movsd
	movups	xmm0, XMMWORD PTR [eax+16]
	pop	ecx
	lea	edi, DWORD PTR [ebx+32]

; 133  : 	}

	mov	eax, ebx
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	xorps	xmm0, xmm0
	movupd	XMMWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x4@N$0A@@glm@@QAE@ABU?$tmat3x2@N$0A@@1@@Z ENDP ; glm::tmat2x4<double,0>::tmat2x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$0A@@glm@@QAE@ABU?$tmat2x3@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tmat2x4@N$0A@@glm@@QAE@ABU?$tmat2x3@N$0A@@1@@Z PROC ; glm::tmat2x4<double,0>::tmat2x4<double,0>, COMDAT
; _this$ = ecx

; 123  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xor	edx, edx
	inc	edx
	xorps	xmm1, xmm1
	push	ebx
	mov	ebx, ecx
	push	esi
	push	edi
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat2x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm1
	movups	XMMWORD PTR [eax], xmm1
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat2x4

; 124  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T2[ebp]
	push	8
	pop	ecx
	movsd	QWORD PTR $T2[ebp+24], xmm1
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]

; 125  : 		this->value[1] = col_type(m[1], 0);

	push	8
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR $T2[ebp+16], xmm0
	rep movsd
	movups	xmm0, XMMWORD PTR [eax+24]
	pop	ecx
	lea	edi, DWORD PTR [ebx+32]
	movsd	QWORD PTR $T1[ebp+24], xmm1
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	movsd	xmm0, QWORD PTR [eax+40]

; 126  : 	}

	mov	eax, ebx
	movsd	QWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x4@N$0A@@glm@@QAE@ABU?$tmat2x3@N$0A@@1@@Z ENDP ; glm::tmat2x4<double,0>::tmat2x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$0A@@glm@@QAE@ABU?$tmat4x4@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tmat2x4@N$0A@@glm@@QAE@ABU?$tmat4x4@N$0A@@1@@Z PROC ; glm::tmat2x4<double,0>::tmat2x4<double,0>, COMDAT
; _this$ = ecx

; 116  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xor	edx, edx
	inc	edx
	xorps	xmm0, xmm0
	push	ebx
	mov	ebx, ecx
	push	esi
	push	edi
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat2x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm0
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat2x4

; 117  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	lea	edi, DWORD PTR $T2[ebp]
	push	8
	pop	edx
	mov	esi, eax
	mov	ecx, edx
	rep movsd
	mov	edi, ebx
	lea	esi, DWORD PTR $T2[ebp]
	mov	ecx, edx
	rep movsd

; 118  : 		this->value[1] = col_type(m[1]);

	lea	esi, DWORD PTR [eax+32]
	mov	ecx, edx
	lea	edi, DWORD PTR $T1[ebp]

; 119  : 	}

	mov	eax, ebx
	rep movsd
	lea	edi, DWORD PTR [ebx+32]
	mov	ecx, edx
	lea	esi, DWORD PTR $T1[ebp]
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x4@N$0A@@glm@@QAE@ABU?$tmat4x4@N$0A@@1@@Z ENDP ; glm::tmat2x4<double,0>::tmat2x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$0A@@glm@@QAE@ABU?$tmat3x3@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tmat2x4@N$0A@@glm@@QAE@ABU?$tmat3x3@N$0A@@1@@Z PROC ; glm::tmat2x4<double,0>::tmat2x4<double,0>, COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xor	edx, edx
	inc	edx
	xorps	xmm1, xmm1
	push	ebx
	mov	ebx, ecx
	push	esi
	push	edi
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat2x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm1
	movups	XMMWORD PTR [eax], xmm1
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat2x4

; 110  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T2[ebp]
	push	8
	pop	ecx
	movsd	QWORD PTR $T2[ebp+24], xmm1
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]

; 111  : 		this->value[1] = col_type(m[1], 0);

	push	8
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR $T2[ebp+16], xmm0
	rep movsd
	movups	xmm0, XMMWORD PTR [eax+24]
	pop	ecx
	lea	edi, DWORD PTR [ebx+32]
	movsd	QWORD PTR $T1[ebp+24], xmm1
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	movsd	xmm0, QWORD PTR [eax+40]

; 112  : 	}

	mov	eax, ebx
	movsd	QWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x4@N$0A@@glm@@QAE@ABU?$tmat3x3@N$0A@@1@@Z ENDP ; glm::tmat2x4<double,0>::tmat2x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$0A@@glm@@QAE@ABU?$tmat2x2@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tmat2x4@N$0A@@glm@@QAE@ABU?$tmat2x2@N$0A@@1@@Z PROC ; glm::tmat2x4<double,0>::tmat2x4<double,0>, COMDAT
; _this$ = ecx

; 102  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xor	edx, edx
	inc	edx
	xorps	xmm0, xmm0
	push	ebx
	mov	ebx, ecx
	push	esi
	push	edi
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat2x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm0
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat2x4

; 103  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T2[ebp]
	push	8
	pop	ecx
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]

; 104  : 		this->value[1] = col_type(m[1], 0, 0);

	push	8
	movups	XMMWORD PTR $T2[ebp], xmm0
	xorps	xmm0, xmm0
	movupd	XMMWORD PTR $T2[ebp+16], xmm0
	rep movsd
	movups	xmm0, XMMWORD PTR [eax+16]
	pop	ecx
	lea	edi, DWORD PTR [ebx+32]

; 105  : 	}

	mov	eax, ebx
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	xorps	xmm0, xmm0
	movupd	XMMWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x4@N$0A@@glm@@QAE@ABU?$tmat2x2@N$0A@@1@@Z ENDP ; glm::tmat2x4<double,0>::tmat2x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$0A@@glm@@QAE@ABU?$tvec4@N$0A@@1@0@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
??0?$tmat2x4@N$0A@@glm@@QAE@ABU?$tvec4@N$0A@@1@0@Z PROC	; glm::tmat2x4<double,0>::tmat2x4<double,0>, COMDAT
; _this$ = ecx

; 61   : 	{

	push	ebp
	mov	ebp, esp
	mov	edx, ecx
	xorps	xmm0, xmm0
	xor	ecx, ecx
	inc	ecx
	lea	eax, DWORD PTR [edx+16]
$LL4@tmat2x4:
	dec	ecx
	movups	XMMWORD PTR [eax-16], xmm0
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat2x4

; 62   : 		this->value[0] = v0;

	push	esi
	mov	esi, DWORD PTR _v0$[ebp]

; 63   : 		this->value[1] = v1;
; 64   : 	}

	mov	eax, edx
	push	edi
	push	8
	pop	ecx
	mov	edi, edx
	rep movsd
	mov	esi, DWORD PTR _v1$[ebp]
	lea	edi, DWORD PTR [edx+32]
	push	8
	pop	ecx
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	8
??0?$tmat2x4@N$0A@@glm@@QAE@ABU?$tvec4@N$0A@@1@0@Z ENDP	; glm::tmat2x4<double,0>::tmat2x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$0A@@glm@@QAE@NNNNNNNN@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
_x0$ = 8						; size = 8
_y0$ = 16						; size = 8
_z0$ = 24						; size = 8
_w0$ = 32						; size = 8
_x1$ = 40						; size = 8
_y1$ = 48						; size = 8
_z1$ = 56						; size = 8
_w1$ = 64						; size = 8
??0?$tmat2x4@N$0A@@glm@@QAE@NNNNNNNN@Z PROC		; glm::tmat2x4<double,0>::tmat2x4<double,0>, COMDAT
; _this$ = ecx

; 54   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xor	edx, edx
	inc	edx
	xorps	xmm0, xmm0
	push	ebx
	mov	ebx, ecx
	push	esi
	push	edi
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat2x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm0
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat2x4

; 55   : 		this->value[0] = col_type(x0, y0, z0, w0);

	movsd	xmm0, QWORD PTR _x0$[ebp]
	lea	esi, DWORD PTR $T2[ebp]
	movsd	QWORD PTR $T2[ebp], xmm0
	mov	edi, ebx
	movsd	xmm0, QWORD PTR _y0$[ebp]

; 56   : 		this->value[1] = col_type(x1, y1, z1, w1);
; 57   : 	}

	mov	eax, ebx
	movsd	QWORD PTR $T2[ebp+8], xmm0
	movsd	xmm0, QWORD PTR _z0$[ebp]
	movsd	QWORD PTR $T2[ebp+16], xmm0
	movsd	xmm0, QWORD PTR _w0$[ebp]
	push	8
	movsd	QWORD PTR $T2[ebp+24], xmm0
	movsd	xmm0, QWORD PTR _x1$[ebp]
	pop	ecx
	rep movsd
	movsd	QWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ebx+32]
	movsd	xmm0, QWORD PTR _y1$[ebp]
	lea	esi, DWORD PTR $T1[ebp]
	movsd	QWORD PTR $T1[ebp+8], xmm0
	movsd	xmm0, QWORD PTR _z1$[ebp]
	push	8
	movsd	QWORD PTR $T1[ebp+16], xmm0
	movsd	xmm0, QWORD PTR _w1$[ebp]
	pop	ecx
	movsd	QWORD PTR $T1[ebp+24], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	64					; 00000040H
??0?$tmat2x4@N$0A@@glm@@QAE@NNNNNNNN@Z ENDP		; glm::tmat2x4<double,0>::tmat2x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$0A@@glm@@QAE@N@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
_scalar$ = 8						; size = 8
??0?$tmat2x4@N$0A@@glm@@QAE@N@Z PROC			; glm::tmat2x4<double,0>::tmat2x4<double,0>, COMDAT
; _this$ = ecx

; 42   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xor	edx, edx
	inc	edx
	xorps	xmm2, xmm2
	push	ebx
	mov	ebx, ecx
	push	esi
	push	edi
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat2x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm2
	movups	XMMWORD PTR [eax], xmm2
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat2x4

; 43   : 		value_type const Zero(0);
; 44   : 		this->value[0] = col_type(scalar, Zero, Zero, Zero);

	movsd	xmm1, QWORD PTR _scalar$[ebp]
	lea	esi, DWORD PTR $T2[ebp]
	push	8
	pop	ecx
	xorps	xmm0, xmm0
	movsd	QWORD PTR $T2[ebp], xmm1
	movupd	XMMWORD PTR $T2[ebp+8], xmm0
	mov	edi, ebx

; 45   : 		this->value[1] = col_type(Zero, scalar, Zero, Zero);
; 46   : 	}

	mov	eax, ebx
	movsd	QWORD PTR $T2[ebp+24], xmm2
	rep movsd
	push	8
	pop	ecx
	lea	edi, DWORD PTR [ebx+32]
	movsd	QWORD PTR $T1[ebp], xmm2
	lea	esi, DWORD PTR $T1[ebp]
	movsd	QWORD PTR $T1[ebp+8], xmm1
	movupd	XMMWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$tmat2x4@N$0A@@glm@@QAE@N@Z ENDP			; glm::tmat2x4<double,0>::tmat2x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat2x4@N$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat2x4<double,0>::tmat2x4<double,0>, COMDAT
; _this$ = ecx

; 38   : 	{}

	xor	edx, edx
	lea	eax, DWORD PTR [ecx+16]
	inc	edx
	xorps	xmm0, xmm0
$LL4@tmat2x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm0
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat2x4
	mov	eax, ecx
	ret	4
??0?$tmat2x4@N$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat2x4<double,0>::tmat2x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tmat2x4@N$0A@@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tmat2x4@N$0A@@glm@@QAE@ABU01@@Z PROC		; glm::tmat2x4<double,0>::tmat2x4<double,0>, COMDAT
; _this$ = ecx

; 174  : template struct tmat2x4<float64, highp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	16					; 00000010H
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tmat2x4@N$0A@@glm@@QAE@ABU01@@Z ENDP		; glm::tmat2x4<double,0>::tmat2x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
??0?$tmat2x4@N$0A@@glm@@QAE@XZ PROC			; glm::tmat2x4<double,0>::tmat2x4<double,0>, COMDAT
; _this$ = ecx

; 11   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xor	edx, edx
	inc	edx
	xorps	xmm0, xmm0
	push	ebx
	mov	ebx, ecx
	push	esi
	push	edi
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat2x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm0
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat2x4

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0, 0, 0);

	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	lea	esi, DWORD PTR $T2[ebp]
	movupd	XMMWORD PTR $T2[ebp], xmm0
	push	8
	pop	ecx
	xorps	xmm0, xmm0
	mov	edi, ebx
	movupd	XMMWORD PTR $T2[ebp+16], xmm0

; 14   : 				this->value[1] = col_type(0, 1, 0, 0);
; 15   : #			endif
; 16   : 		}

	mov	eax, ebx
	movaps	xmm0, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	rep movsd
	push	8
	movupd	XMMWORD PTR $T1[ebp], xmm0
	pop	ecx
	xorps	xmm0, xmm0
	lea	edi, DWORD PTR [ebx+32]
	lea	esi, DWORD PTR $T1[ebp]
	movupd	XMMWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$tmat2x4@N$0A@@glm@@QAE@XZ ENDP			; glm::tmat2x4<double,0>::tmat2x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??F?$tmat2x4@M$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat2x4@M$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tmat2x4<float,0>::operator--, COMDAT
; _this$ = ecx

; 275  : 	{

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi

; 276  : 		tmat2x4<T, P> Result(*this);

	mov	edi, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, ecx
	push	8
	pop	ecx
	mov	esi, eax
	rep movsd

; 277  : 		--*this;

	mov	ecx, eax
	call	??F?$tmat2x4@M$0A@@glm@@QAEAAU01@XZ	; glm::tmat2x4<float,0>::operator--

; 278  : 		return Result;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi

; 279  : 	}

	pop	ebp
	ret	8
??F?$tmat2x4@M$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tmat2x4<float,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??E?$tmat2x4@M$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat2x4@M$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tmat2x4<float,0>::operator++, COMDAT
; _this$ = ecx

; 267  : 	{

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi

; 268  : 		tmat2x4<T, P> Result(*this);

	mov	edi, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, ecx
	push	8
	pop	ecx
	mov	esi, eax
	rep movsd

; 269  : 		++*this;

	mov	ecx, eax
	call	??E?$tmat2x4@M$0A@@glm@@QAEAAU01@XZ	; glm::tmat2x4<float,0>::operator++

; 270  : 		return Result;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi

; 271  : 	}

	pop	ebp
	ret	8
??E?$tmat2x4@M$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tmat2x4<float,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??F?$tmat2x4@M$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat2x4@M$0A@@glm@@QAEAAU01@XZ PROC		; glm::tmat2x4<float,0>::operator--, COMDAT
; _this$ = ecx

; 260  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 261  : 		--this->value[1];
; 262  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0

; 263  : 	}

	ret	0
??F?$tmat2x4@M$0A@@glm@@QAEAAU01@XZ ENDP		; glm::tmat2x4<float,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??E?$tmat2x4@M$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat2x4@M$0A@@glm@@QAEAAU01@XZ PROC		; glm::tmat2x4<float,0>::operator++, COMDAT
; _this$ = ecx

; 252  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 253  : 		++this->value[1];
; 254  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0

; 255  : 	}

	ret	0
??E?$tmat2x4@M$0A@@glm@@QAEAAU01@XZ ENDP		; glm::tmat2x4<float,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tmat2x4@M$0A@@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tmat2x4@M$0A@@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tmat2x4<float,0>::operator=, COMDAT
; _this$ = ecx

; 173  : template struct tmat2x4<float32, highp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	8
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tmat2x4@M$0A@@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tmat2x4<float,0>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??A?$tmat2x4@M$0A@@glm@@QBEABU?$tvec4@M$0A@@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat2x4@M$0A@@glm@@QBEABU?$tvec4@M$0A@@1@H@Z PROC	; glm::tmat2x4<float,0>::operator[], COMDAT
; _this$ = ecx

; 167  : 	{

	push	ebp
	mov	ebp, esp

; 168  : 		assert(i < this->length());
; 169  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, ecx

; 170  : 	}

	pop	ebp
	ret	4
??A?$tmat2x4@M$0A@@glm@@QBEABU?$tvec4@M$0A@@1@H@Z ENDP	; glm::tmat2x4<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??A?$tmat2x4@M$0A@@glm@@QAEAAU?$tvec4@M$0A@@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat2x4@M$0A@@glm@@QAEAAU?$tvec4@M$0A@@1@H@Z PROC	; glm::tmat2x4<float,0>::operator[], COMDAT
; _this$ = ecx

; 160  : 	{

	push	ebp
	mov	ebp, esp

; 161  : 		assert(i < this->length());
; 162  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, ecx

; 163  : 	}

	pop	ebp
	ret	4
??A?$tmat2x4@M$0A@@glm@@QAEAAU?$tvec4@M$0A@@1@H@Z ENDP	; glm::tmat2x4<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.hpp
;	COMDAT ?length@?$tmat2x4@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat2x4@M$0A@@glm@@SAHXZ PROC			; glm::tmat2x4<float,0>::length, COMDAT

; 75   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	push	2
	pop	eax
	ret	0
?length@?$tmat2x4@M$0A@@glm@@SAHXZ ENDP			; glm::tmat2x4<float,0>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$0A@@glm@@QAE@ABU?$tmat4x3@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat2x4@M$0A@@glm@@QAE@ABU?$tmat4x3@M$0A@@1@@Z PROC ; glm::tmat2x4<float,0>::tmat2x4<float,0>, COMDAT
; _this$ = ecx

; 151  : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	lea	eax, DWORD PTR [ecx+8]
	sub	esp, 16					; 00000010H
	inc	edx
$LL4@tmat2x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat2x4

; 152  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	and	DWORD PTR $T2[ebp+12], 0
	push	esi
	push	edi
	movss	xmm0, DWORD PTR [eax]
	lea	esi, DWORD PTR $T2[ebp]
	movss	DWORD PTR $T2[ebp], xmm0
	mov	edi, ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T2[ebp+8], xmm0
	movsd
	movsd
	movsd
	movsd

; 153  : 		this->value[1] = col_type(m[1], 0);

	movss	xmm0, DWORD PTR [eax+12]
	lea	edi, DWORD PTR [ecx+16]
	and	DWORD PTR $T1[ebp+12], 0
	lea	esi, DWORD PTR $T1[ebp]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+20]

; 154  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+8], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x4@M$0A@@glm@@QAE@ABU?$tmat4x3@M$0A@@1@@Z ENDP ; glm::tmat2x4<float,0>::tmat2x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$0A@@glm@@QAE@ABU?$tmat4x2@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat2x4@M$0A@@glm@@QAE@ABU?$tmat4x2@M$0A@@1@@Z PROC ; glm::tmat2x4<float,0>::tmat2x4<float,0>, COMDAT
; _this$ = ecx

; 144  : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	lea	eax, DWORD PTR [ecx+8]
	sub	esp, 16					; 00000010H
	inc	edx
$LL4@tmat2x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat2x4

; 145  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	and	DWORD PTR $T2[ebp+8], 0
	and	DWORD PTR $T2[ebp+12], 0
	push	esi
	movss	xmm0, DWORD PTR [eax]
	lea	esi, DWORD PTR $T2[ebp]
	push	edi
	movss	DWORD PTR $T2[ebp], xmm0
	mov	edi, ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movsd
	movsd
	movsd
	movsd

; 146  : 		this->value[1] = col_type(m[1], 0, 0);

	movss	xmm0, DWORD PTR [eax+8]
	lea	edi, DWORD PTR [ecx+16]
	and	DWORD PTR $T1[ebp+8], 0
	lea	esi, DWORD PTR $T1[ebp]
	and	DWORD PTR $T1[ebp+12], 0
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+12]

; 147  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+4], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x4@M$0A@@glm@@QAE@ABU?$tmat4x2@M$0A@@1@@Z ENDP ; glm::tmat2x4<float,0>::tmat2x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$0A@@glm@@QAE@ABU?$tmat3x4@M$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x4@M$0A@@glm@@QAE@ABU?$tmat3x4@M$0A@@1@@Z PROC ; glm::tmat2x4<float,0>::tmat2x4<float,0>, COMDAT
; _this$ = ecx

; 137  : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	lea	eax, DWORD PTR [ecx+8]
	inc	edx
$LL4@tmat2x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat2x4

; 138  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	esi, eax
	mov	edi, ecx
	movsd
	movsd
	movsd
	movsd

; 139  : 		this->value[1] = m[1];

	lea	esi, DWORD PTR [eax+16]

; 140  : 	}

	mov	eax, ecx
	lea	edi, DWORD PTR [ecx+16]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tmat2x4@M$0A@@glm@@QAE@ABU?$tmat3x4@M$0A@@1@@Z ENDP ; glm::tmat2x4<float,0>::tmat2x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$0A@@glm@@QAE@ABU?$tmat3x2@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat2x4@M$0A@@glm@@QAE@ABU?$tmat3x2@M$0A@@1@@Z PROC ; glm::tmat2x4<float,0>::tmat2x4<float,0>, COMDAT
; _this$ = ecx

; 130  : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	lea	eax, DWORD PTR [ecx+8]
	sub	esp, 16					; 00000010H
	inc	edx
$LL4@tmat2x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat2x4

; 131  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	and	DWORD PTR $T2[ebp+8], 0
	and	DWORD PTR $T2[ebp+12], 0
	push	esi
	movss	xmm0, DWORD PTR [eax]
	lea	esi, DWORD PTR $T2[ebp]
	push	edi
	movss	DWORD PTR $T2[ebp], xmm0
	mov	edi, ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movsd
	movsd
	movsd
	movsd

; 132  : 		this->value[1] = col_type(m[1], 0, 0);

	movss	xmm0, DWORD PTR [eax+8]
	lea	edi, DWORD PTR [ecx+16]
	and	DWORD PTR $T1[ebp+8], 0
	lea	esi, DWORD PTR $T1[ebp]
	and	DWORD PTR $T1[ebp+12], 0
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+12]

; 133  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+4], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x4@M$0A@@glm@@QAE@ABU?$tmat3x2@M$0A@@1@@Z ENDP ; glm::tmat2x4<float,0>::tmat2x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$0A@@glm@@QAE@ABU?$tmat2x3@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat2x4@M$0A@@glm@@QAE@ABU?$tmat2x3@M$0A@@1@@Z PROC ; glm::tmat2x4<float,0>::tmat2x4<float,0>, COMDAT
; _this$ = ecx

; 123  : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	lea	eax, DWORD PTR [ecx+8]
	sub	esp, 16					; 00000010H
	inc	edx
$LL4@tmat2x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat2x4

; 124  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	and	DWORD PTR $T2[ebp+12], 0
	push	esi
	push	edi
	movss	xmm0, DWORD PTR [eax]
	lea	esi, DWORD PTR $T2[ebp]
	movss	DWORD PTR $T2[ebp], xmm0
	mov	edi, ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T2[ebp+8], xmm0
	movsd
	movsd
	movsd
	movsd

; 125  : 		this->value[1] = col_type(m[1], 0);

	movss	xmm0, DWORD PTR [eax+12]
	lea	edi, DWORD PTR [ecx+16]
	and	DWORD PTR $T1[ebp+12], 0
	lea	esi, DWORD PTR $T1[ebp]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+20]

; 126  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+8], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x4@M$0A@@glm@@QAE@ABU?$tmat2x3@M$0A@@1@@Z ENDP ; glm::tmat2x4<float,0>::tmat2x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$0A@@glm@@QAE@ABU?$tmat4x4@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat2x4@M$0A@@glm@@QAE@ABU?$tmat4x4@M$0A@@1@@Z PROC ; glm::tmat2x4<float,0>::tmat2x4<float,0>, COMDAT
; _this$ = ecx

; 116  : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	lea	eax, DWORD PTR [ecx+8]
	sub	esp, 16					; 00000010H
	inc	edx
$LL4@tmat2x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat2x4

; 117  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	esi, eax
	lea	edi, DWORD PTR $T2[ebp]
	movsd
	movsd
	movsd
	movsd
	mov	edi, ecx
	lea	esi, DWORD PTR $T2[ebp]
	movsd
	movsd
	movsd
	movsd

; 118  : 		this->value[1] = col_type(m[1]);

	lea	esi, DWORD PTR [eax+16]

; 119  : 	}

	mov	eax, ecx
	lea	edi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	lea	edi, DWORD PTR [ecx+16]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x4@M$0A@@glm@@QAE@ABU?$tmat4x4@M$0A@@1@@Z ENDP ; glm::tmat2x4<float,0>::tmat2x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$0A@@glm@@QAE@ABU?$tmat3x3@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat2x4@M$0A@@glm@@QAE@ABU?$tmat3x3@M$0A@@1@@Z PROC ; glm::tmat2x4<float,0>::tmat2x4<float,0>, COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	lea	eax, DWORD PTR [ecx+8]
	sub	esp, 16					; 00000010H
	inc	edx
$LL4@tmat2x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat2x4

; 110  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	and	DWORD PTR $T2[ebp+12], 0
	push	esi
	push	edi
	movss	xmm0, DWORD PTR [eax]
	lea	esi, DWORD PTR $T2[ebp]
	movss	DWORD PTR $T2[ebp], xmm0
	mov	edi, ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T2[ebp+8], xmm0
	movsd
	movsd
	movsd
	movsd

; 111  : 		this->value[1] = col_type(m[1], 0);

	movss	xmm0, DWORD PTR [eax+12]
	lea	edi, DWORD PTR [ecx+16]
	and	DWORD PTR $T1[ebp+12], 0
	lea	esi, DWORD PTR $T1[ebp]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+20]

; 112  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+8], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x4@M$0A@@glm@@QAE@ABU?$tmat3x3@M$0A@@1@@Z ENDP ; glm::tmat2x4<float,0>::tmat2x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$0A@@glm@@QAE@ABU?$tmat2x2@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat2x4@M$0A@@glm@@QAE@ABU?$tmat2x2@M$0A@@1@@Z PROC ; glm::tmat2x4<float,0>::tmat2x4<float,0>, COMDAT
; _this$ = ecx

; 102  : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	lea	eax, DWORD PTR [ecx+8]
	sub	esp, 16					; 00000010H
	inc	edx
$LL4@tmat2x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat2x4

; 103  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	and	DWORD PTR $T2[ebp+8], 0
	and	DWORD PTR $T2[ebp+12], 0
	push	esi
	movss	xmm0, DWORD PTR [eax]
	lea	esi, DWORD PTR $T2[ebp]
	push	edi
	movss	DWORD PTR $T2[ebp], xmm0
	mov	edi, ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movsd
	movsd
	movsd
	movsd

; 104  : 		this->value[1] = col_type(m[1], 0, 0);

	movss	xmm0, DWORD PTR [eax+8]
	lea	edi, DWORD PTR [ecx+16]
	and	DWORD PTR $T1[ebp+8], 0
	lea	esi, DWORD PTR $T1[ebp]
	and	DWORD PTR $T1[ebp+12], 0
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+12]

; 105  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+4], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x4@M$0A@@glm@@QAE@ABU?$tmat2x2@M$0A@@1@@Z ENDP ; glm::tmat2x4<float,0>::tmat2x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$0A@@glm@@QAE@ABU?$tvec4@M$0A@@1@0@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
??0?$tmat2x4@M$0A@@glm@@QAE@ABU?$tvec4@M$0A@@1@0@Z PROC	; glm::tmat2x4<float,0>::tmat2x4<float,0>, COMDAT
; _this$ = ecx

; 61   : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	lea	eax, DWORD PTR [ecx+8]
	inc	edx
$LL4@tmat2x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat2x4

; 62   : 		this->value[0] = v0;

	push	esi
	mov	esi, DWORD PTR _v0$[ebp]

; 63   : 		this->value[1] = v1;
; 64   : 	}

	mov	eax, ecx
	push	edi
	mov	edi, ecx
	movsd
	movsd
	movsd
	movsd
	mov	esi, DWORD PTR _v1$[ebp]
	lea	edi, DWORD PTR [ecx+16]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	8
??0?$tmat2x4@M$0A@@glm@@QAE@ABU?$tvec4@M$0A@@1@0@Z ENDP	; glm::tmat2x4<float,0>::tmat2x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$0A@@glm@@QAE@MMMMMMMM@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_z0$ = 16						; size = 4
_w0$ = 20						; size = 4
_x1$ = 24						; size = 4
_y1$ = 28						; size = 4
_z1$ = 32						; size = 4
_w1$ = 36						; size = 4
??0?$tmat2x4@M$0A@@glm@@QAE@MMMMMMMM@Z PROC		; glm::tmat2x4<float,0>::tmat2x4<float,0>, COMDAT
; _this$ = ecx

; 54   : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	lea	eax, DWORD PTR [ecx+8]
	sub	esp, 16					; 00000010H
	inc	edx
$LL4@tmat2x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat2x4

; 55   : 		this->value[0] = col_type(x0, y0, z0, w0);

	movss	xmm0, DWORD PTR _x0$[ebp]

; 56   : 		this->value[1] = col_type(x1, y1, z1, w1);
; 57   : 	}

	mov	eax, ecx
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR _y0$[ebp]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR _z0$[ebp]
	push	esi
	push	edi
	movss	DWORD PTR $T2[ebp+8], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	movss	xmm0, DWORD PTR _w0$[ebp]
	mov	edi, ecx
	movss	DWORD PTR $T2[ebp+12], xmm0
	movss	xmm0, DWORD PTR _x1$[ebp]
	movsd
	movsd
	movsd
	movsd
	movss	DWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+16]
	movss	xmm0, DWORD PTR _y1$[ebp]
	lea	esi, DWORD PTR $T1[ebp]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR _z1$[ebp]
	movss	DWORD PTR $T1[ebp+8], xmm0
	movss	xmm0, DWORD PTR _w1$[ebp]
	movss	DWORD PTR $T1[ebp+12], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	32					; 00000020H
??0?$tmat2x4@M$0A@@glm@@QAE@MMMMMMMM@Z ENDP		; glm::tmat2x4<float,0>::tmat2x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$0A@@glm@@QAE@M@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_scalar$ = 8						; size = 4
??0?$tmat2x4@M$0A@@glm@@QAE@M@Z PROC			; glm::tmat2x4<float,0>::tmat2x4<float,0>, COMDAT
; _this$ = ecx

; 42   : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	lea	eax, DWORD PTR [ecx+8]
	sub	esp, 16					; 00000010H
	inc	edx
$LL4@tmat2x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat2x4

; 43   : 		value_type const Zero(0);
; 44   : 		this->value[0] = col_type(scalar, Zero, Zero, Zero);

	and	DWORD PTR $T2[ebp+4], 0

; 45   : 		this->value[1] = col_type(Zero, scalar, Zero, Zero);
; 46   : 	}

	mov	eax, ecx
	and	DWORD PTR $T2[ebp+8], 0
	and	DWORD PTR $T2[ebp+12], 0
	movss	xmm0, DWORD PTR _scalar$[ebp]
	push	esi
	push	edi
	movss	DWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	mov	edi, ecx
	movsd
	movsd
	movsd
	movsd
	and	DWORD PTR $T1[ebp], 0
	lea	edi, DWORD PTR [ecx+16]
	and	DWORD PTR $T1[ebp+8], 0
	lea	esi, DWORD PTR $T1[ebp]
	and	DWORD PTR $T1[ebp+12], 0
	movss	DWORD PTR $T1[ebp+4], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x4@M$0A@@glm@@QAE@M@Z ENDP			; glm::tmat2x4<float,0>::tmat2x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat2x4@M$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat2x4<float,0>::tmat2x4<float,0>, COMDAT
; _this$ = ecx

; 38   : 	{}

	xor	edx, edx
	lea	eax, DWORD PTR [ecx+8]
	inc	edx
$LL4@tmat2x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat2x4
	mov	eax, ecx
	ret	4
??0?$tmat2x4@M$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat2x4<float,0>::tmat2x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tmat2x4@M$0A@@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tmat2x4@M$0A@@glm@@QAE@ABU01@@Z PROC		; glm::tmat2x4<float,0>::tmat2x4<float,0>, COMDAT
; _this$ = ecx

; 173  : template struct tmat2x4<float32, highp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	8
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tmat2x4@M$0A@@glm@@QAE@ABU01@@Z ENDP		; glm::tmat2x4<float,0>::tmat2x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
??0?$tmat2x4@M$0A@@glm@@QAE@XZ PROC			; glm::tmat2x4<float,0>::tmat2x4<float,0>, COMDAT
; _this$ = ecx

; 11   : 		{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	lea	eax, DWORD PTR [ecx+8]
	sub	esp, 16					; 00000010H
	inc	edx
$LL4@tmat2x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat2x4

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0, 0, 0);
; 14   : 				this->value[1] = col_type(0, 1, 0, 0);
; 15   : #			endif
; 16   : 		}

	movaps	xmm0, XMMWORD PTR __xmm@0000000000000000000000003f800000
	mov	eax, ecx
	push	esi
	push	edi
	movups	XMMWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	mov	edi, ecx
	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003f80000000000000
	movsd
	movsd
	movsd
	movsd
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+16]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$tmat2x4@M$0A@@glm@@QAE@XZ ENDP			; glm::tmat2x4<float,0>::tmat2x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??F?$tmat2x4@N$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat2x4@N$00@glm@@QAE?AU01@H@Z PROC		; glm::tmat2x4<double,1>::operator--, COMDAT
; _this$ = ecx

; 275  : 	{

	push	ebp
	mov	ebp, esp

; 276  : 		tmat2x4<T, P> Result(*this);
; 277  : 		--*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	mov	edx, ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	movups	xmm0, XMMWORD PTR [edx]
	push	16					; 00000010H
	pop	ecx
	subpd	xmm0, xmm1
	mov	esi, edx
	mov	edi, eax
	rep movsd
	movups	XMMWORD PTR [edx], xmm0
	pop	edi
	movups	xmm0, XMMWORD PTR [edx+16]
	pop	esi
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+16], xmm0
	movups	xmm0, XMMWORD PTR [edx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+32], xmm0
	movups	xmm0, XMMWORD PTR [edx+48]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+48], xmm0

; 278  : 		return Result;
; 279  : 	}

	pop	ebp
	ret	8
??F?$tmat2x4@N$00@glm@@QAE?AU01@H@Z ENDP		; glm::tmat2x4<double,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??E?$tmat2x4@N$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat2x4@N$00@glm@@QAE?AU01@H@Z PROC		; glm::tmat2x4<double,1>::operator++, COMDAT
; _this$ = ecx

; 267  : 	{

	push	ebp
	mov	ebp, esp

; 268  : 		tmat2x4<T, P> Result(*this);
; 269  : 		++*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	mov	edx, ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	movups	xmm0, XMMWORD PTR [edx]
	push	16					; 00000010H
	pop	ecx
	addpd	xmm0, xmm1
	mov	esi, edx
	mov	edi, eax
	rep movsd
	movups	XMMWORD PTR [edx], xmm0
	pop	edi
	movups	xmm0, XMMWORD PTR [edx+16]
	pop	esi
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+16], xmm0
	movups	xmm0, XMMWORD PTR [edx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+32], xmm0
	movups	xmm0, XMMWORD PTR [edx+48]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+48], xmm0

; 270  : 		return Result;
; 271  : 	}

	pop	ebp
	ret	8
??E?$tmat2x4@N$00@glm@@QAE?AU01@H@Z ENDP		; glm::tmat2x4<double,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??F?$tmat2x4@N$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat2x4@N$00@glm@@QAEAAU01@XZ PROC			; glm::tmat2x4<double,1>::operator--, COMDAT
; _this$ = ecx

; 260  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 261  : 		--this->value[1];
; 262  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0

; 263  : 	}

	ret	0
??F?$tmat2x4@N$00@glm@@QAEAAU01@XZ ENDP			; glm::tmat2x4<double,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??E?$tmat2x4@N$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat2x4@N$00@glm@@QAEAAU01@XZ PROC			; glm::tmat2x4<double,1>::operator++, COMDAT
; _this$ = ecx

; 252  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 253  : 		++this->value[1];
; 254  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0

; 255  : 	}

	ret	0
??E?$tmat2x4@N$00@glm@@QAEAAU01@XZ ENDP			; glm::tmat2x4<double,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tmat2x4@N$00@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tmat2x4@N$00@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tmat2x4<double,1>::operator=, COMDAT
; _this$ = ecx

; 171  : template struct tmat2x4<float64, mediump>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	16					; 00000010H
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tmat2x4@N$00@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tmat2x4<double,1>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??A?$tmat2x4@N$00@glm@@QBEABU?$tvec4@N$00@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat2x4@N$00@glm@@QBEABU?$tvec4@N$00@1@H@Z PROC	; glm::tmat2x4<double,1>::operator[], COMDAT
; _this$ = ecx

; 167  : 	{

	push	ebp
	mov	ebp, esp

; 168  : 		assert(i < this->length());
; 169  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	add	eax, ecx

; 170  : 	}

	pop	ebp
	ret	4
??A?$tmat2x4@N$00@glm@@QBEABU?$tvec4@N$00@1@H@Z ENDP	; glm::tmat2x4<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??A?$tmat2x4@N$00@glm@@QAEAAU?$tvec4@N$00@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat2x4@N$00@glm@@QAEAAU?$tvec4@N$00@1@H@Z PROC	; glm::tmat2x4<double,1>::operator[], COMDAT
; _this$ = ecx

; 160  : 	{

	push	ebp
	mov	ebp, esp

; 161  : 		assert(i < this->length());
; 162  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	add	eax, ecx

; 163  : 	}

	pop	ebp
	ret	4
??A?$tmat2x4@N$00@glm@@QAEAAU?$tvec4@N$00@1@H@Z ENDP	; glm::tmat2x4<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.hpp
;	COMDAT ?length@?$tmat2x4@N$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat2x4@N$00@glm@@SAHXZ PROC			; glm::tmat2x4<double,1>::length, COMDAT

; 75   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	push	2
	pop	eax
	ret	0
?length@?$tmat2x4@N$00@glm@@SAHXZ ENDP			; glm::tmat2x4<double,1>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$00@glm@@QAE@ABU?$tmat4x3@N$00@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tmat2x4@N$00@glm@@QAE@ABU?$tmat4x3@N$00@1@@Z PROC	; glm::tmat2x4<double,1>::tmat2x4<double,1>, COMDAT
; _this$ = ecx

; 151  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xor	edx, edx
	inc	edx
	xorps	xmm1, xmm1
	push	ebx
	mov	ebx, ecx
	push	esi
	push	edi
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat2x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm1
	movups	XMMWORD PTR [eax], xmm1
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat2x4

; 152  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T2[ebp]
	push	8
	pop	ecx
	movsd	QWORD PTR $T2[ebp+24], xmm1
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]

; 153  : 		this->value[1] = col_type(m[1], 0);

	push	8
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR $T2[ebp+16], xmm0
	rep movsd
	movups	xmm0, XMMWORD PTR [eax+24]
	pop	ecx
	lea	edi, DWORD PTR [ebx+32]
	movsd	QWORD PTR $T1[ebp+24], xmm1
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	movsd	xmm0, QWORD PTR [eax+40]

; 154  : 	}

	mov	eax, ebx
	movsd	QWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x4@N$00@glm@@QAE@ABU?$tmat4x3@N$00@1@@Z ENDP	; glm::tmat2x4<double,1>::tmat2x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$00@glm@@QAE@ABU?$tmat4x2@N$00@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tmat2x4@N$00@glm@@QAE@ABU?$tmat4x2@N$00@1@@Z PROC	; glm::tmat2x4<double,1>::tmat2x4<double,1>, COMDAT
; _this$ = ecx

; 144  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xor	edx, edx
	inc	edx
	xorps	xmm0, xmm0
	push	ebx
	mov	ebx, ecx
	push	esi
	push	edi
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat2x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm0
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat2x4

; 145  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T2[ebp]
	push	8
	pop	ecx
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]

; 146  : 		this->value[1] = col_type(m[1], 0, 0);

	push	8
	movups	XMMWORD PTR $T2[ebp], xmm0
	xorps	xmm0, xmm0
	movupd	XMMWORD PTR $T2[ebp+16], xmm0
	rep movsd
	movups	xmm0, XMMWORD PTR [eax+16]
	pop	ecx
	lea	edi, DWORD PTR [ebx+32]

; 147  : 	}

	mov	eax, ebx
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	xorps	xmm0, xmm0
	movupd	XMMWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x4@N$00@glm@@QAE@ABU?$tmat4x2@N$00@1@@Z ENDP	; glm::tmat2x4<double,1>::tmat2x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$00@glm@@QAE@ABU?$tmat3x4@N$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x4@N$00@glm@@QAE@ABU?$tmat3x4@N$00@1@@Z PROC	; glm::tmat2x4<double,1>::tmat2x4<double,1>, COMDAT
; _this$ = ecx

; 137  : 	{

	push	ebp
	mov	ebp, esp
	mov	edx, ecx
	xorps	xmm0, xmm0
	xor	ecx, ecx
	inc	ecx
	lea	eax, DWORD PTR [edx+16]
$LL4@tmat2x4:
	dec	ecx
	movups	XMMWORD PTR [eax-16], xmm0
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat2x4

; 138  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	push	8
	pop	ecx
	mov	esi, eax
	mov	edi, edx
	rep movsd

; 139  : 		this->value[1] = m[1];

	push	8
	pop	ecx
	lea	esi, DWORD PTR [eax+32]

; 140  : 	}

	mov	eax, edx
	lea	edi, DWORD PTR [edx+32]
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tmat2x4@N$00@glm@@QAE@ABU?$tmat3x4@N$00@1@@Z ENDP	; glm::tmat2x4<double,1>::tmat2x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$00@glm@@QAE@ABU?$tmat3x2@N$00@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tmat2x4@N$00@glm@@QAE@ABU?$tmat3x2@N$00@1@@Z PROC	; glm::tmat2x4<double,1>::tmat2x4<double,1>, COMDAT
; _this$ = ecx

; 130  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xor	edx, edx
	inc	edx
	xorps	xmm0, xmm0
	push	ebx
	mov	ebx, ecx
	push	esi
	push	edi
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat2x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm0
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat2x4

; 131  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T2[ebp]
	push	8
	pop	ecx
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]

; 132  : 		this->value[1] = col_type(m[1], 0, 0);

	push	8
	movups	XMMWORD PTR $T2[ebp], xmm0
	xorps	xmm0, xmm0
	movupd	XMMWORD PTR $T2[ebp+16], xmm0
	rep movsd
	movups	xmm0, XMMWORD PTR [eax+16]
	pop	ecx
	lea	edi, DWORD PTR [ebx+32]

; 133  : 	}

	mov	eax, ebx
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	xorps	xmm0, xmm0
	movupd	XMMWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x4@N$00@glm@@QAE@ABU?$tmat3x2@N$00@1@@Z ENDP	; glm::tmat2x4<double,1>::tmat2x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$00@glm@@QAE@ABU?$tmat2x3@N$00@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tmat2x4@N$00@glm@@QAE@ABU?$tmat2x3@N$00@1@@Z PROC	; glm::tmat2x4<double,1>::tmat2x4<double,1>, COMDAT
; _this$ = ecx

; 123  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xor	edx, edx
	inc	edx
	xorps	xmm1, xmm1
	push	ebx
	mov	ebx, ecx
	push	esi
	push	edi
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat2x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm1
	movups	XMMWORD PTR [eax], xmm1
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat2x4

; 124  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T2[ebp]
	push	8
	pop	ecx
	movsd	QWORD PTR $T2[ebp+24], xmm1
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]

; 125  : 		this->value[1] = col_type(m[1], 0);

	push	8
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR $T2[ebp+16], xmm0
	rep movsd
	movups	xmm0, XMMWORD PTR [eax+24]
	pop	ecx
	lea	edi, DWORD PTR [ebx+32]
	movsd	QWORD PTR $T1[ebp+24], xmm1
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	movsd	xmm0, QWORD PTR [eax+40]

; 126  : 	}

	mov	eax, ebx
	movsd	QWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x4@N$00@glm@@QAE@ABU?$tmat2x3@N$00@1@@Z ENDP	; glm::tmat2x4<double,1>::tmat2x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$00@glm@@QAE@ABU?$tmat4x4@N$00@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tmat2x4@N$00@glm@@QAE@ABU?$tmat4x4@N$00@1@@Z PROC	; glm::tmat2x4<double,1>::tmat2x4<double,1>, COMDAT
; _this$ = ecx

; 116  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xor	edx, edx
	inc	edx
	xorps	xmm0, xmm0
	push	ebx
	mov	ebx, ecx
	push	esi
	push	edi
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat2x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm0
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat2x4

; 117  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	lea	edi, DWORD PTR $T2[ebp]
	push	8
	pop	edx
	mov	esi, eax
	mov	ecx, edx
	rep movsd
	mov	edi, ebx
	lea	esi, DWORD PTR $T2[ebp]
	mov	ecx, edx
	rep movsd

; 118  : 		this->value[1] = col_type(m[1]);

	lea	esi, DWORD PTR [eax+32]
	mov	ecx, edx
	lea	edi, DWORD PTR $T1[ebp]

; 119  : 	}

	mov	eax, ebx
	rep movsd
	lea	edi, DWORD PTR [ebx+32]
	mov	ecx, edx
	lea	esi, DWORD PTR $T1[ebp]
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x4@N$00@glm@@QAE@ABU?$tmat4x4@N$00@1@@Z ENDP	; glm::tmat2x4<double,1>::tmat2x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$00@glm@@QAE@ABU?$tmat3x3@N$00@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tmat2x4@N$00@glm@@QAE@ABU?$tmat3x3@N$00@1@@Z PROC	; glm::tmat2x4<double,1>::tmat2x4<double,1>, COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xor	edx, edx
	inc	edx
	xorps	xmm1, xmm1
	push	ebx
	mov	ebx, ecx
	push	esi
	push	edi
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat2x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm1
	movups	XMMWORD PTR [eax], xmm1
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat2x4

; 110  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T2[ebp]
	push	8
	pop	ecx
	movsd	QWORD PTR $T2[ebp+24], xmm1
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]

; 111  : 		this->value[1] = col_type(m[1], 0);

	push	8
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR $T2[ebp+16], xmm0
	rep movsd
	movups	xmm0, XMMWORD PTR [eax+24]
	pop	ecx
	lea	edi, DWORD PTR [ebx+32]
	movsd	QWORD PTR $T1[ebp+24], xmm1
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	movsd	xmm0, QWORD PTR [eax+40]

; 112  : 	}

	mov	eax, ebx
	movsd	QWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x4@N$00@glm@@QAE@ABU?$tmat3x3@N$00@1@@Z ENDP	; glm::tmat2x4<double,1>::tmat2x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$00@glm@@QAE@ABU?$tmat2x2@N$00@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tmat2x4@N$00@glm@@QAE@ABU?$tmat2x2@N$00@1@@Z PROC	; glm::tmat2x4<double,1>::tmat2x4<double,1>, COMDAT
; _this$ = ecx

; 102  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xor	edx, edx
	inc	edx
	xorps	xmm0, xmm0
	push	ebx
	mov	ebx, ecx
	push	esi
	push	edi
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat2x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm0
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat2x4

; 103  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T2[ebp]
	push	8
	pop	ecx
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]

; 104  : 		this->value[1] = col_type(m[1], 0, 0);

	push	8
	movups	XMMWORD PTR $T2[ebp], xmm0
	xorps	xmm0, xmm0
	movupd	XMMWORD PTR $T2[ebp+16], xmm0
	rep movsd
	movups	xmm0, XMMWORD PTR [eax+16]
	pop	ecx
	lea	edi, DWORD PTR [ebx+32]

; 105  : 	}

	mov	eax, ebx
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	xorps	xmm0, xmm0
	movupd	XMMWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x4@N$00@glm@@QAE@ABU?$tmat2x2@N$00@1@@Z ENDP	; glm::tmat2x4<double,1>::tmat2x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$00@glm@@QAE@ABU?$tvec4@N$00@1@0@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
??0?$tmat2x4@N$00@glm@@QAE@ABU?$tvec4@N$00@1@0@Z PROC	; glm::tmat2x4<double,1>::tmat2x4<double,1>, COMDAT
; _this$ = ecx

; 61   : 	{

	push	ebp
	mov	ebp, esp
	mov	edx, ecx
	xorps	xmm0, xmm0
	xor	ecx, ecx
	inc	ecx
	lea	eax, DWORD PTR [edx+16]
$LL4@tmat2x4:
	dec	ecx
	movups	XMMWORD PTR [eax-16], xmm0
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat2x4

; 62   : 		this->value[0] = v0;

	push	esi
	mov	esi, DWORD PTR _v0$[ebp]

; 63   : 		this->value[1] = v1;
; 64   : 	}

	mov	eax, edx
	push	edi
	push	8
	pop	ecx
	mov	edi, edx
	rep movsd
	mov	esi, DWORD PTR _v1$[ebp]
	lea	edi, DWORD PTR [edx+32]
	push	8
	pop	ecx
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	8
??0?$tmat2x4@N$00@glm@@QAE@ABU?$tvec4@N$00@1@0@Z ENDP	; glm::tmat2x4<double,1>::tmat2x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$00@glm@@QAE@NNNNNNNN@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
_x0$ = 8						; size = 8
_y0$ = 16						; size = 8
_z0$ = 24						; size = 8
_w0$ = 32						; size = 8
_x1$ = 40						; size = 8
_y1$ = 48						; size = 8
_z1$ = 56						; size = 8
_w1$ = 64						; size = 8
??0?$tmat2x4@N$00@glm@@QAE@NNNNNNNN@Z PROC		; glm::tmat2x4<double,1>::tmat2x4<double,1>, COMDAT
; _this$ = ecx

; 54   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xor	edx, edx
	inc	edx
	xorps	xmm0, xmm0
	push	ebx
	mov	ebx, ecx
	push	esi
	push	edi
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat2x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm0
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat2x4

; 55   : 		this->value[0] = col_type(x0, y0, z0, w0);

	movsd	xmm0, QWORD PTR _x0$[ebp]
	lea	esi, DWORD PTR $T2[ebp]
	movsd	QWORD PTR $T2[ebp], xmm0
	mov	edi, ebx
	movsd	xmm0, QWORD PTR _y0$[ebp]

; 56   : 		this->value[1] = col_type(x1, y1, z1, w1);
; 57   : 	}

	mov	eax, ebx
	movsd	QWORD PTR $T2[ebp+8], xmm0
	movsd	xmm0, QWORD PTR _z0$[ebp]
	movsd	QWORD PTR $T2[ebp+16], xmm0
	movsd	xmm0, QWORD PTR _w0$[ebp]
	push	8
	movsd	QWORD PTR $T2[ebp+24], xmm0
	movsd	xmm0, QWORD PTR _x1$[ebp]
	pop	ecx
	rep movsd
	movsd	QWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ebx+32]
	movsd	xmm0, QWORD PTR _y1$[ebp]
	lea	esi, DWORD PTR $T1[ebp]
	movsd	QWORD PTR $T1[ebp+8], xmm0
	movsd	xmm0, QWORD PTR _z1$[ebp]
	push	8
	movsd	QWORD PTR $T1[ebp+16], xmm0
	movsd	xmm0, QWORD PTR _w1$[ebp]
	pop	ecx
	movsd	QWORD PTR $T1[ebp+24], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	64					; 00000040H
??0?$tmat2x4@N$00@glm@@QAE@NNNNNNNN@Z ENDP		; glm::tmat2x4<double,1>::tmat2x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$00@glm@@QAE@N@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
_scalar$ = 8						; size = 8
??0?$tmat2x4@N$00@glm@@QAE@N@Z PROC			; glm::tmat2x4<double,1>::tmat2x4<double,1>, COMDAT
; _this$ = ecx

; 42   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xor	edx, edx
	inc	edx
	xorps	xmm2, xmm2
	push	ebx
	mov	ebx, ecx
	push	esi
	push	edi
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat2x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm2
	movups	XMMWORD PTR [eax], xmm2
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat2x4

; 43   : 		value_type const Zero(0);
; 44   : 		this->value[0] = col_type(scalar, Zero, Zero, Zero);

	movsd	xmm1, QWORD PTR _scalar$[ebp]
	lea	esi, DWORD PTR $T2[ebp]
	push	8
	pop	ecx
	xorps	xmm0, xmm0
	movsd	QWORD PTR $T2[ebp], xmm1
	movupd	XMMWORD PTR $T2[ebp+8], xmm0
	mov	edi, ebx

; 45   : 		this->value[1] = col_type(Zero, scalar, Zero, Zero);
; 46   : 	}

	mov	eax, ebx
	movsd	QWORD PTR $T2[ebp+24], xmm2
	rep movsd
	push	8
	pop	ecx
	lea	edi, DWORD PTR [ebx+32]
	movsd	QWORD PTR $T1[ebp], xmm2
	lea	esi, DWORD PTR $T1[ebp]
	movsd	QWORD PTR $T1[ebp+8], xmm1
	movupd	XMMWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$tmat2x4@N$00@glm@@QAE@N@Z ENDP			; glm::tmat2x4<double,1>::tmat2x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat2x4@N$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat2x4<double,1>::tmat2x4<double,1>, COMDAT
; _this$ = ecx

; 38   : 	{}

	xor	edx, edx
	lea	eax, DWORD PTR [ecx+16]
	inc	edx
	xorps	xmm0, xmm0
$LL4@tmat2x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm0
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat2x4
	mov	eax, ecx
	ret	4
??0?$tmat2x4@N$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat2x4<double,1>::tmat2x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tmat2x4@N$00@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tmat2x4@N$00@glm@@QAE@ABU01@@Z PROC		; glm::tmat2x4<double,1>::tmat2x4<double,1>, COMDAT
; _this$ = ecx

; 171  : template struct tmat2x4<float64, mediump>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	16					; 00000010H
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tmat2x4@N$00@glm@@QAE@ABU01@@Z ENDP		; glm::tmat2x4<double,1>::tmat2x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$00@glm@@QAE@XZ
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
??0?$tmat2x4@N$00@glm@@QAE@XZ PROC			; glm::tmat2x4<double,1>::tmat2x4<double,1>, COMDAT
; _this$ = ecx

; 11   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xor	edx, edx
	inc	edx
	xorps	xmm0, xmm0
	push	ebx
	mov	ebx, ecx
	push	esi
	push	edi
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat2x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm0
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat2x4

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0, 0, 0);

	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	lea	esi, DWORD PTR $T2[ebp]
	movupd	XMMWORD PTR $T2[ebp], xmm0
	push	8
	pop	ecx
	xorps	xmm0, xmm0
	mov	edi, ebx
	movupd	XMMWORD PTR $T2[ebp+16], xmm0

; 14   : 				this->value[1] = col_type(0, 1, 0, 0);
; 15   : #			endif
; 16   : 		}

	mov	eax, ebx
	movaps	xmm0, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	rep movsd
	push	8
	movupd	XMMWORD PTR $T1[ebp], xmm0
	pop	ecx
	xorps	xmm0, xmm0
	lea	edi, DWORD PTR [ebx+32]
	lea	esi, DWORD PTR $T1[ebp]
	movupd	XMMWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$tmat2x4@N$00@glm@@QAE@XZ ENDP			; glm::tmat2x4<double,1>::tmat2x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??F?$tmat2x4@M$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat2x4@M$00@glm@@QAE?AU01@H@Z PROC		; glm::tmat2x4<float,1>::operator--, COMDAT
; _this$ = ecx

; 275  : 	{

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi

; 276  : 		tmat2x4<T, P> Result(*this);

	mov	edi, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, ecx
	push	8
	pop	ecx
	mov	esi, eax
	rep movsd

; 277  : 		--*this;

	mov	ecx, eax
	call	??F?$tmat2x4@M$00@glm@@QAEAAU01@XZ	; glm::tmat2x4<float,1>::operator--

; 278  : 		return Result;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi

; 279  : 	}

	pop	ebp
	ret	8
??F?$tmat2x4@M$00@glm@@QAE?AU01@H@Z ENDP		; glm::tmat2x4<float,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??E?$tmat2x4@M$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat2x4@M$00@glm@@QAE?AU01@H@Z PROC		; glm::tmat2x4<float,1>::operator++, COMDAT
; _this$ = ecx

; 267  : 	{

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi

; 268  : 		tmat2x4<T, P> Result(*this);

	mov	edi, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, ecx
	push	8
	pop	ecx
	mov	esi, eax
	rep movsd

; 269  : 		++*this;

	mov	ecx, eax
	call	??E?$tmat2x4@M$00@glm@@QAEAAU01@XZ	; glm::tmat2x4<float,1>::operator++

; 270  : 		return Result;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi

; 271  : 	}

	pop	ebp
	ret	8
??E?$tmat2x4@M$00@glm@@QAE?AU01@H@Z ENDP		; glm::tmat2x4<float,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??F?$tmat2x4@M$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat2x4@M$00@glm@@QAEAAU01@XZ PROC			; glm::tmat2x4<float,1>::operator--, COMDAT
; _this$ = ecx

; 260  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 261  : 		--this->value[1];
; 262  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0

; 263  : 	}

	ret	0
??F?$tmat2x4@M$00@glm@@QAEAAU01@XZ ENDP			; glm::tmat2x4<float,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??E?$tmat2x4@M$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat2x4@M$00@glm@@QAEAAU01@XZ PROC			; glm::tmat2x4<float,1>::operator++, COMDAT
; _this$ = ecx

; 252  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 253  : 		++this->value[1];
; 254  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0

; 255  : 	}

	ret	0
??E?$tmat2x4@M$00@glm@@QAEAAU01@XZ ENDP			; glm::tmat2x4<float,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tmat2x4@M$00@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tmat2x4@M$00@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tmat2x4<float,1>::operator=, COMDAT
; _this$ = ecx

; 170  : template struct tmat2x4<float32, mediump>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	8
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tmat2x4@M$00@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tmat2x4<float,1>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??A?$tmat2x4@M$00@glm@@QBEABU?$tvec4@M$00@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat2x4@M$00@glm@@QBEABU?$tvec4@M$00@1@H@Z PROC	; glm::tmat2x4<float,1>::operator[], COMDAT
; _this$ = ecx

; 167  : 	{

	push	ebp
	mov	ebp, esp

; 168  : 		assert(i < this->length());
; 169  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, ecx

; 170  : 	}

	pop	ebp
	ret	4
??A?$tmat2x4@M$00@glm@@QBEABU?$tvec4@M$00@1@H@Z ENDP	; glm::tmat2x4<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??A?$tmat2x4@M$00@glm@@QAEAAU?$tvec4@M$00@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat2x4@M$00@glm@@QAEAAU?$tvec4@M$00@1@H@Z PROC	; glm::tmat2x4<float,1>::operator[], COMDAT
; _this$ = ecx

; 160  : 	{

	push	ebp
	mov	ebp, esp

; 161  : 		assert(i < this->length());
; 162  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, ecx

; 163  : 	}

	pop	ebp
	ret	4
??A?$tmat2x4@M$00@glm@@QAEAAU?$tvec4@M$00@1@H@Z ENDP	; glm::tmat2x4<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.hpp
;	COMDAT ?length@?$tmat2x4@M$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat2x4@M$00@glm@@SAHXZ PROC			; glm::tmat2x4<float,1>::length, COMDAT

; 75   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	push	2
	pop	eax
	ret	0
?length@?$tmat2x4@M$00@glm@@SAHXZ ENDP			; glm::tmat2x4<float,1>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$00@glm@@QAE@ABU?$tmat4x3@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat2x4@M$00@glm@@QAE@ABU?$tmat4x3@M$00@1@@Z PROC	; glm::tmat2x4<float,1>::tmat2x4<float,1>, COMDAT
; _this$ = ecx

; 151  : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	lea	eax, DWORD PTR [ecx+8]
	sub	esp, 16					; 00000010H
	inc	edx
$LL4@tmat2x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat2x4

; 152  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	and	DWORD PTR $T2[ebp+12], 0
	push	esi
	push	edi
	movss	xmm0, DWORD PTR [eax]
	lea	esi, DWORD PTR $T2[ebp]
	movss	DWORD PTR $T2[ebp], xmm0
	mov	edi, ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T2[ebp+8], xmm0
	movsd
	movsd
	movsd
	movsd

; 153  : 		this->value[1] = col_type(m[1], 0);

	movss	xmm0, DWORD PTR [eax+12]
	lea	edi, DWORD PTR [ecx+16]
	and	DWORD PTR $T1[ebp+12], 0
	lea	esi, DWORD PTR $T1[ebp]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+20]

; 154  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+8], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x4@M$00@glm@@QAE@ABU?$tmat4x3@M$00@1@@Z ENDP	; glm::tmat2x4<float,1>::tmat2x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$00@glm@@QAE@ABU?$tmat4x2@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat2x4@M$00@glm@@QAE@ABU?$tmat4x2@M$00@1@@Z PROC	; glm::tmat2x4<float,1>::tmat2x4<float,1>, COMDAT
; _this$ = ecx

; 144  : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	lea	eax, DWORD PTR [ecx+8]
	sub	esp, 16					; 00000010H
	inc	edx
$LL4@tmat2x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat2x4

; 145  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	and	DWORD PTR $T2[ebp+8], 0
	and	DWORD PTR $T2[ebp+12], 0
	push	esi
	movss	xmm0, DWORD PTR [eax]
	lea	esi, DWORD PTR $T2[ebp]
	push	edi
	movss	DWORD PTR $T2[ebp], xmm0
	mov	edi, ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movsd
	movsd
	movsd
	movsd

; 146  : 		this->value[1] = col_type(m[1], 0, 0);

	movss	xmm0, DWORD PTR [eax+8]
	lea	edi, DWORD PTR [ecx+16]
	and	DWORD PTR $T1[ebp+8], 0
	lea	esi, DWORD PTR $T1[ebp]
	and	DWORD PTR $T1[ebp+12], 0
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+12]

; 147  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+4], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x4@M$00@glm@@QAE@ABU?$tmat4x2@M$00@1@@Z ENDP	; glm::tmat2x4<float,1>::tmat2x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$00@glm@@QAE@ABU?$tmat3x4@M$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x4@M$00@glm@@QAE@ABU?$tmat3x4@M$00@1@@Z PROC	; glm::tmat2x4<float,1>::tmat2x4<float,1>, COMDAT
; _this$ = ecx

; 137  : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	lea	eax, DWORD PTR [ecx+8]
	inc	edx
$LL4@tmat2x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat2x4

; 138  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	esi, eax
	mov	edi, ecx
	movsd
	movsd
	movsd
	movsd

; 139  : 		this->value[1] = m[1];

	lea	esi, DWORD PTR [eax+16]

; 140  : 	}

	mov	eax, ecx
	lea	edi, DWORD PTR [ecx+16]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tmat2x4@M$00@glm@@QAE@ABU?$tmat3x4@M$00@1@@Z ENDP	; glm::tmat2x4<float,1>::tmat2x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$00@glm@@QAE@ABU?$tmat3x2@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat2x4@M$00@glm@@QAE@ABU?$tmat3x2@M$00@1@@Z PROC	; glm::tmat2x4<float,1>::tmat2x4<float,1>, COMDAT
; _this$ = ecx

; 130  : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	lea	eax, DWORD PTR [ecx+8]
	sub	esp, 16					; 00000010H
	inc	edx
$LL4@tmat2x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat2x4

; 131  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	and	DWORD PTR $T2[ebp+8], 0
	and	DWORD PTR $T2[ebp+12], 0
	push	esi
	movss	xmm0, DWORD PTR [eax]
	lea	esi, DWORD PTR $T2[ebp]
	push	edi
	movss	DWORD PTR $T2[ebp], xmm0
	mov	edi, ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movsd
	movsd
	movsd
	movsd

; 132  : 		this->value[1] = col_type(m[1], 0, 0);

	movss	xmm0, DWORD PTR [eax+8]
	lea	edi, DWORD PTR [ecx+16]
	and	DWORD PTR $T1[ebp+8], 0
	lea	esi, DWORD PTR $T1[ebp]
	and	DWORD PTR $T1[ebp+12], 0
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+12]

; 133  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+4], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x4@M$00@glm@@QAE@ABU?$tmat3x2@M$00@1@@Z ENDP	; glm::tmat2x4<float,1>::tmat2x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$00@glm@@QAE@ABU?$tmat2x3@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat2x4@M$00@glm@@QAE@ABU?$tmat2x3@M$00@1@@Z PROC	; glm::tmat2x4<float,1>::tmat2x4<float,1>, COMDAT
; _this$ = ecx

; 123  : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	lea	eax, DWORD PTR [ecx+8]
	sub	esp, 16					; 00000010H
	inc	edx
$LL4@tmat2x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat2x4

; 124  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	and	DWORD PTR $T2[ebp+12], 0
	push	esi
	push	edi
	movss	xmm0, DWORD PTR [eax]
	lea	esi, DWORD PTR $T2[ebp]
	movss	DWORD PTR $T2[ebp], xmm0
	mov	edi, ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T2[ebp+8], xmm0
	movsd
	movsd
	movsd
	movsd

; 125  : 		this->value[1] = col_type(m[1], 0);

	movss	xmm0, DWORD PTR [eax+12]
	lea	edi, DWORD PTR [ecx+16]
	and	DWORD PTR $T1[ebp+12], 0
	lea	esi, DWORD PTR $T1[ebp]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+20]

; 126  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+8], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x4@M$00@glm@@QAE@ABU?$tmat2x3@M$00@1@@Z ENDP	; glm::tmat2x4<float,1>::tmat2x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$00@glm@@QAE@ABU?$tmat4x4@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat2x4@M$00@glm@@QAE@ABU?$tmat4x4@M$00@1@@Z PROC	; glm::tmat2x4<float,1>::tmat2x4<float,1>, COMDAT
; _this$ = ecx

; 116  : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	lea	eax, DWORD PTR [ecx+8]
	sub	esp, 16					; 00000010H
	inc	edx
$LL4@tmat2x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat2x4

; 117  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	esi, eax
	lea	edi, DWORD PTR $T2[ebp]
	movsd
	movsd
	movsd
	movsd
	mov	edi, ecx
	lea	esi, DWORD PTR $T2[ebp]
	movsd
	movsd
	movsd
	movsd

; 118  : 		this->value[1] = col_type(m[1]);

	lea	esi, DWORD PTR [eax+16]

; 119  : 	}

	mov	eax, ecx
	lea	edi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	lea	edi, DWORD PTR [ecx+16]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x4@M$00@glm@@QAE@ABU?$tmat4x4@M$00@1@@Z ENDP	; glm::tmat2x4<float,1>::tmat2x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$00@glm@@QAE@ABU?$tmat3x3@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat2x4@M$00@glm@@QAE@ABU?$tmat3x3@M$00@1@@Z PROC	; glm::tmat2x4<float,1>::tmat2x4<float,1>, COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	lea	eax, DWORD PTR [ecx+8]
	sub	esp, 16					; 00000010H
	inc	edx
$LL4@tmat2x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat2x4

; 110  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	and	DWORD PTR $T2[ebp+12], 0
	push	esi
	push	edi
	movss	xmm0, DWORD PTR [eax]
	lea	esi, DWORD PTR $T2[ebp]
	movss	DWORD PTR $T2[ebp], xmm0
	mov	edi, ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T2[ebp+8], xmm0
	movsd
	movsd
	movsd
	movsd

; 111  : 		this->value[1] = col_type(m[1], 0);

	movss	xmm0, DWORD PTR [eax+12]
	lea	edi, DWORD PTR [ecx+16]
	and	DWORD PTR $T1[ebp+12], 0
	lea	esi, DWORD PTR $T1[ebp]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+20]

; 112  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+8], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x4@M$00@glm@@QAE@ABU?$tmat3x3@M$00@1@@Z ENDP	; glm::tmat2x4<float,1>::tmat2x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$00@glm@@QAE@ABU?$tmat2x2@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat2x4@M$00@glm@@QAE@ABU?$tmat2x2@M$00@1@@Z PROC	; glm::tmat2x4<float,1>::tmat2x4<float,1>, COMDAT
; _this$ = ecx

; 102  : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	lea	eax, DWORD PTR [ecx+8]
	sub	esp, 16					; 00000010H
	inc	edx
$LL4@tmat2x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat2x4

; 103  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	and	DWORD PTR $T2[ebp+8], 0
	and	DWORD PTR $T2[ebp+12], 0
	push	esi
	movss	xmm0, DWORD PTR [eax]
	lea	esi, DWORD PTR $T2[ebp]
	push	edi
	movss	DWORD PTR $T2[ebp], xmm0
	mov	edi, ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movsd
	movsd
	movsd
	movsd

; 104  : 		this->value[1] = col_type(m[1], 0, 0);

	movss	xmm0, DWORD PTR [eax+8]
	lea	edi, DWORD PTR [ecx+16]
	and	DWORD PTR $T1[ebp+8], 0
	lea	esi, DWORD PTR $T1[ebp]
	and	DWORD PTR $T1[ebp+12], 0
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+12]

; 105  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+4], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x4@M$00@glm@@QAE@ABU?$tmat2x2@M$00@1@@Z ENDP	; glm::tmat2x4<float,1>::tmat2x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$00@glm@@QAE@ABU?$tvec4@M$00@1@0@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
??0?$tmat2x4@M$00@glm@@QAE@ABU?$tvec4@M$00@1@0@Z PROC	; glm::tmat2x4<float,1>::tmat2x4<float,1>, COMDAT
; _this$ = ecx

; 61   : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	lea	eax, DWORD PTR [ecx+8]
	inc	edx
$LL4@tmat2x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat2x4

; 62   : 		this->value[0] = v0;

	push	esi
	mov	esi, DWORD PTR _v0$[ebp]

; 63   : 		this->value[1] = v1;
; 64   : 	}

	mov	eax, ecx
	push	edi
	mov	edi, ecx
	movsd
	movsd
	movsd
	movsd
	mov	esi, DWORD PTR _v1$[ebp]
	lea	edi, DWORD PTR [ecx+16]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	8
??0?$tmat2x4@M$00@glm@@QAE@ABU?$tvec4@M$00@1@0@Z ENDP	; glm::tmat2x4<float,1>::tmat2x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$00@glm@@QAE@MMMMMMMM@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_z0$ = 16						; size = 4
_w0$ = 20						; size = 4
_x1$ = 24						; size = 4
_y1$ = 28						; size = 4
_z1$ = 32						; size = 4
_w1$ = 36						; size = 4
??0?$tmat2x4@M$00@glm@@QAE@MMMMMMMM@Z PROC		; glm::tmat2x4<float,1>::tmat2x4<float,1>, COMDAT
; _this$ = ecx

; 54   : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	lea	eax, DWORD PTR [ecx+8]
	sub	esp, 16					; 00000010H
	inc	edx
$LL4@tmat2x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat2x4

; 55   : 		this->value[0] = col_type(x0, y0, z0, w0);

	movss	xmm0, DWORD PTR _x0$[ebp]

; 56   : 		this->value[1] = col_type(x1, y1, z1, w1);
; 57   : 	}

	mov	eax, ecx
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR _y0$[ebp]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR _z0$[ebp]
	push	esi
	push	edi
	movss	DWORD PTR $T2[ebp+8], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	movss	xmm0, DWORD PTR _w0$[ebp]
	mov	edi, ecx
	movss	DWORD PTR $T2[ebp+12], xmm0
	movss	xmm0, DWORD PTR _x1$[ebp]
	movsd
	movsd
	movsd
	movsd
	movss	DWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+16]
	movss	xmm0, DWORD PTR _y1$[ebp]
	lea	esi, DWORD PTR $T1[ebp]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR _z1$[ebp]
	movss	DWORD PTR $T1[ebp+8], xmm0
	movss	xmm0, DWORD PTR _w1$[ebp]
	movss	DWORD PTR $T1[ebp+12], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	32					; 00000020H
??0?$tmat2x4@M$00@glm@@QAE@MMMMMMMM@Z ENDP		; glm::tmat2x4<float,1>::tmat2x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$00@glm@@QAE@M@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_scalar$ = 8						; size = 4
??0?$tmat2x4@M$00@glm@@QAE@M@Z PROC			; glm::tmat2x4<float,1>::tmat2x4<float,1>, COMDAT
; _this$ = ecx

; 42   : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	lea	eax, DWORD PTR [ecx+8]
	sub	esp, 16					; 00000010H
	inc	edx
$LL4@tmat2x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat2x4

; 43   : 		value_type const Zero(0);
; 44   : 		this->value[0] = col_type(scalar, Zero, Zero, Zero);

	and	DWORD PTR $T2[ebp+4], 0

; 45   : 		this->value[1] = col_type(Zero, scalar, Zero, Zero);
; 46   : 	}

	mov	eax, ecx
	and	DWORD PTR $T2[ebp+8], 0
	and	DWORD PTR $T2[ebp+12], 0
	movss	xmm0, DWORD PTR _scalar$[ebp]
	push	esi
	push	edi
	movss	DWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	mov	edi, ecx
	movsd
	movsd
	movsd
	movsd
	and	DWORD PTR $T1[ebp], 0
	lea	edi, DWORD PTR [ecx+16]
	and	DWORD PTR $T1[ebp+8], 0
	lea	esi, DWORD PTR $T1[ebp]
	and	DWORD PTR $T1[ebp+12], 0
	movss	DWORD PTR $T1[ebp+4], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x4@M$00@glm@@QAE@M@Z ENDP			; glm::tmat2x4<float,1>::tmat2x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat2x4@M$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat2x4<float,1>::tmat2x4<float,1>, COMDAT
; _this$ = ecx

; 38   : 	{}

	xor	edx, edx
	lea	eax, DWORD PTR [ecx+8]
	inc	edx
$LL4@tmat2x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat2x4
	mov	eax, ecx
	ret	4
??0?$tmat2x4@M$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat2x4<float,1>::tmat2x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tmat2x4@M$00@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tmat2x4@M$00@glm@@QAE@ABU01@@Z PROC		; glm::tmat2x4<float,1>::tmat2x4<float,1>, COMDAT
; _this$ = ecx

; 170  : template struct tmat2x4<float32, mediump>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	8
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tmat2x4@M$00@glm@@QAE@ABU01@@Z ENDP		; glm::tmat2x4<float,1>::tmat2x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$00@glm@@QAE@XZ
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
??0?$tmat2x4@M$00@glm@@QAE@XZ PROC			; glm::tmat2x4<float,1>::tmat2x4<float,1>, COMDAT
; _this$ = ecx

; 11   : 		{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	lea	eax, DWORD PTR [ecx+8]
	sub	esp, 16					; 00000010H
	inc	edx
$LL4@tmat2x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat2x4

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0, 0, 0);
; 14   : 				this->value[1] = col_type(0, 1, 0, 0);
; 15   : #			endif
; 16   : 		}

	movaps	xmm0, XMMWORD PTR __xmm@0000000000000000000000003f800000
	mov	eax, ecx
	push	esi
	push	edi
	movups	XMMWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	mov	edi, ecx
	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003f80000000000000
	movsd
	movsd
	movsd
	movsd
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+16]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$tmat2x4@M$00@glm@@QAE@XZ ENDP			; glm::tmat2x4<float,1>::tmat2x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??F?$tmat2x4@N$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat2x4@N$01@glm@@QAE?AU01@H@Z PROC		; glm::tmat2x4<double,2>::operator--, COMDAT
; _this$ = ecx

; 275  : 	{

	push	ebp
	mov	ebp, esp

; 276  : 		tmat2x4<T, P> Result(*this);
; 277  : 		--*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	mov	edx, ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	movups	xmm0, XMMWORD PTR [edx]
	push	16					; 00000010H
	pop	ecx
	subpd	xmm0, xmm1
	mov	esi, edx
	mov	edi, eax
	rep movsd
	movups	XMMWORD PTR [edx], xmm0
	pop	edi
	movups	xmm0, XMMWORD PTR [edx+16]
	pop	esi
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+16], xmm0
	movups	xmm0, XMMWORD PTR [edx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+32], xmm0
	movups	xmm0, XMMWORD PTR [edx+48]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+48], xmm0

; 278  : 		return Result;
; 279  : 	}

	pop	ebp
	ret	8
??F?$tmat2x4@N$01@glm@@QAE?AU01@H@Z ENDP		; glm::tmat2x4<double,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??E?$tmat2x4@N$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat2x4@N$01@glm@@QAE?AU01@H@Z PROC		; glm::tmat2x4<double,2>::operator++, COMDAT
; _this$ = ecx

; 267  : 	{

	push	ebp
	mov	ebp, esp

; 268  : 		tmat2x4<T, P> Result(*this);
; 269  : 		++*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	mov	edx, ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	movups	xmm0, XMMWORD PTR [edx]
	push	16					; 00000010H
	pop	ecx
	addpd	xmm0, xmm1
	mov	esi, edx
	mov	edi, eax
	rep movsd
	movups	XMMWORD PTR [edx], xmm0
	pop	edi
	movups	xmm0, XMMWORD PTR [edx+16]
	pop	esi
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+16], xmm0
	movups	xmm0, XMMWORD PTR [edx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+32], xmm0
	movups	xmm0, XMMWORD PTR [edx+48]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+48], xmm0

; 270  : 		return Result;
; 271  : 	}

	pop	ebp
	ret	8
??E?$tmat2x4@N$01@glm@@QAE?AU01@H@Z ENDP		; glm::tmat2x4<double,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??F?$tmat2x4@N$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat2x4@N$01@glm@@QAEAAU01@XZ PROC			; glm::tmat2x4<double,2>::operator--, COMDAT
; _this$ = ecx

; 260  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 261  : 		--this->value[1];
; 262  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0

; 263  : 	}

	ret	0
??F?$tmat2x4@N$01@glm@@QAEAAU01@XZ ENDP			; glm::tmat2x4<double,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??E?$tmat2x4@N$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat2x4@N$01@glm@@QAEAAU01@XZ PROC			; glm::tmat2x4<double,2>::operator++, COMDAT
; _this$ = ecx

; 252  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 253  : 		++this->value[1];
; 254  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0

; 255  : 	}

	ret	0
??E?$tmat2x4@N$01@glm@@QAEAAU01@XZ ENDP			; glm::tmat2x4<double,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tmat2x4@N$01@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tmat2x4@N$01@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tmat2x4<double,2>::operator=, COMDAT
; _this$ = ecx

; 168  : template struct tmat2x4<float64, lowp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	16					; 00000010H
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tmat2x4@N$01@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tmat2x4<double,2>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??A?$tmat2x4@N$01@glm@@QBEABU?$tvec4@N$01@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat2x4@N$01@glm@@QBEABU?$tvec4@N$01@1@H@Z PROC	; glm::tmat2x4<double,2>::operator[], COMDAT
; _this$ = ecx

; 167  : 	{

	push	ebp
	mov	ebp, esp

; 168  : 		assert(i < this->length());
; 169  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	add	eax, ecx

; 170  : 	}

	pop	ebp
	ret	4
??A?$tmat2x4@N$01@glm@@QBEABU?$tvec4@N$01@1@H@Z ENDP	; glm::tmat2x4<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??A?$tmat2x4@N$01@glm@@QAEAAU?$tvec4@N$01@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat2x4@N$01@glm@@QAEAAU?$tvec4@N$01@1@H@Z PROC	; glm::tmat2x4<double,2>::operator[], COMDAT
; _this$ = ecx

; 160  : 	{

	push	ebp
	mov	ebp, esp

; 161  : 		assert(i < this->length());
; 162  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	add	eax, ecx

; 163  : 	}

	pop	ebp
	ret	4
??A?$tmat2x4@N$01@glm@@QAEAAU?$tvec4@N$01@1@H@Z ENDP	; glm::tmat2x4<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.hpp
;	COMDAT ?length@?$tmat2x4@N$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat2x4@N$01@glm@@SAHXZ PROC			; glm::tmat2x4<double,2>::length, COMDAT

; 75   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	push	2
	pop	eax
	ret	0
?length@?$tmat2x4@N$01@glm@@SAHXZ ENDP			; glm::tmat2x4<double,2>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$01@glm@@QAE@ABU?$tmat4x3@N$01@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tmat2x4@N$01@glm@@QAE@ABU?$tmat4x3@N$01@1@@Z PROC	; glm::tmat2x4<double,2>::tmat2x4<double,2>, COMDAT
; _this$ = ecx

; 151  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xor	edx, edx
	inc	edx
	xorps	xmm1, xmm1
	push	ebx
	mov	ebx, ecx
	push	esi
	push	edi
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat2x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm1
	movups	XMMWORD PTR [eax], xmm1
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat2x4

; 152  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T2[ebp]
	push	8
	pop	ecx
	movsd	QWORD PTR $T2[ebp+24], xmm1
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]

; 153  : 		this->value[1] = col_type(m[1], 0);

	push	8
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR $T2[ebp+16], xmm0
	rep movsd
	movups	xmm0, XMMWORD PTR [eax+24]
	pop	ecx
	lea	edi, DWORD PTR [ebx+32]
	movsd	QWORD PTR $T1[ebp+24], xmm1
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	movsd	xmm0, QWORD PTR [eax+40]

; 154  : 	}

	mov	eax, ebx
	movsd	QWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x4@N$01@glm@@QAE@ABU?$tmat4x3@N$01@1@@Z ENDP	; glm::tmat2x4<double,2>::tmat2x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$01@glm@@QAE@ABU?$tmat4x2@N$01@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tmat2x4@N$01@glm@@QAE@ABU?$tmat4x2@N$01@1@@Z PROC	; glm::tmat2x4<double,2>::tmat2x4<double,2>, COMDAT
; _this$ = ecx

; 144  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xor	edx, edx
	inc	edx
	xorps	xmm0, xmm0
	push	ebx
	mov	ebx, ecx
	push	esi
	push	edi
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat2x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm0
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat2x4

; 145  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T2[ebp]
	push	8
	pop	ecx
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]

; 146  : 		this->value[1] = col_type(m[1], 0, 0);

	push	8
	movups	XMMWORD PTR $T2[ebp], xmm0
	xorps	xmm0, xmm0
	movupd	XMMWORD PTR $T2[ebp+16], xmm0
	rep movsd
	movups	xmm0, XMMWORD PTR [eax+16]
	pop	ecx
	lea	edi, DWORD PTR [ebx+32]

; 147  : 	}

	mov	eax, ebx
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	xorps	xmm0, xmm0
	movupd	XMMWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x4@N$01@glm@@QAE@ABU?$tmat4x2@N$01@1@@Z ENDP	; glm::tmat2x4<double,2>::tmat2x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$01@glm@@QAE@ABU?$tmat3x4@N$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x4@N$01@glm@@QAE@ABU?$tmat3x4@N$01@1@@Z PROC	; glm::tmat2x4<double,2>::tmat2x4<double,2>, COMDAT
; _this$ = ecx

; 137  : 	{

	push	ebp
	mov	ebp, esp
	mov	edx, ecx
	xorps	xmm0, xmm0
	xor	ecx, ecx
	inc	ecx
	lea	eax, DWORD PTR [edx+16]
$LL4@tmat2x4:
	dec	ecx
	movups	XMMWORD PTR [eax-16], xmm0
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat2x4

; 138  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	push	8
	pop	ecx
	mov	esi, eax
	mov	edi, edx
	rep movsd

; 139  : 		this->value[1] = m[1];

	push	8
	pop	ecx
	lea	esi, DWORD PTR [eax+32]

; 140  : 	}

	mov	eax, edx
	lea	edi, DWORD PTR [edx+32]
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tmat2x4@N$01@glm@@QAE@ABU?$tmat3x4@N$01@1@@Z ENDP	; glm::tmat2x4<double,2>::tmat2x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$01@glm@@QAE@ABU?$tmat3x2@N$01@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tmat2x4@N$01@glm@@QAE@ABU?$tmat3x2@N$01@1@@Z PROC	; glm::tmat2x4<double,2>::tmat2x4<double,2>, COMDAT
; _this$ = ecx

; 130  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xor	edx, edx
	inc	edx
	xorps	xmm0, xmm0
	push	ebx
	mov	ebx, ecx
	push	esi
	push	edi
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat2x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm0
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat2x4

; 131  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T2[ebp]
	push	8
	pop	ecx
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]

; 132  : 		this->value[1] = col_type(m[1], 0, 0);

	push	8
	movups	XMMWORD PTR $T2[ebp], xmm0
	xorps	xmm0, xmm0
	movupd	XMMWORD PTR $T2[ebp+16], xmm0
	rep movsd
	movups	xmm0, XMMWORD PTR [eax+16]
	pop	ecx
	lea	edi, DWORD PTR [ebx+32]

; 133  : 	}

	mov	eax, ebx
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	xorps	xmm0, xmm0
	movupd	XMMWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x4@N$01@glm@@QAE@ABU?$tmat3x2@N$01@1@@Z ENDP	; glm::tmat2x4<double,2>::tmat2x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$01@glm@@QAE@ABU?$tmat2x3@N$01@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tmat2x4@N$01@glm@@QAE@ABU?$tmat2x3@N$01@1@@Z PROC	; glm::tmat2x4<double,2>::tmat2x4<double,2>, COMDAT
; _this$ = ecx

; 123  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xor	edx, edx
	inc	edx
	xorps	xmm1, xmm1
	push	ebx
	mov	ebx, ecx
	push	esi
	push	edi
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat2x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm1
	movups	XMMWORD PTR [eax], xmm1
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat2x4

; 124  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T2[ebp]
	push	8
	pop	ecx
	movsd	QWORD PTR $T2[ebp+24], xmm1
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]

; 125  : 		this->value[1] = col_type(m[1], 0);

	push	8
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR $T2[ebp+16], xmm0
	rep movsd
	movups	xmm0, XMMWORD PTR [eax+24]
	pop	ecx
	lea	edi, DWORD PTR [ebx+32]
	movsd	QWORD PTR $T1[ebp+24], xmm1
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	movsd	xmm0, QWORD PTR [eax+40]

; 126  : 	}

	mov	eax, ebx
	movsd	QWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x4@N$01@glm@@QAE@ABU?$tmat2x3@N$01@1@@Z ENDP	; glm::tmat2x4<double,2>::tmat2x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$01@glm@@QAE@ABU?$tmat4x4@N$01@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tmat2x4@N$01@glm@@QAE@ABU?$tmat4x4@N$01@1@@Z PROC	; glm::tmat2x4<double,2>::tmat2x4<double,2>, COMDAT
; _this$ = ecx

; 116  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xor	edx, edx
	inc	edx
	xorps	xmm0, xmm0
	push	ebx
	mov	ebx, ecx
	push	esi
	push	edi
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat2x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm0
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat2x4

; 117  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	lea	edi, DWORD PTR $T2[ebp]
	push	8
	pop	edx
	mov	esi, eax
	mov	ecx, edx
	rep movsd
	mov	edi, ebx
	lea	esi, DWORD PTR $T2[ebp]
	mov	ecx, edx
	rep movsd

; 118  : 		this->value[1] = col_type(m[1]);

	lea	esi, DWORD PTR [eax+32]
	mov	ecx, edx
	lea	edi, DWORD PTR $T1[ebp]

; 119  : 	}

	mov	eax, ebx
	rep movsd
	lea	edi, DWORD PTR [ebx+32]
	mov	ecx, edx
	lea	esi, DWORD PTR $T1[ebp]
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x4@N$01@glm@@QAE@ABU?$tmat4x4@N$01@1@@Z ENDP	; glm::tmat2x4<double,2>::tmat2x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$01@glm@@QAE@ABU?$tmat3x3@N$01@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tmat2x4@N$01@glm@@QAE@ABU?$tmat3x3@N$01@1@@Z PROC	; glm::tmat2x4<double,2>::tmat2x4<double,2>, COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xor	edx, edx
	inc	edx
	xorps	xmm1, xmm1
	push	ebx
	mov	ebx, ecx
	push	esi
	push	edi
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat2x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm1
	movups	XMMWORD PTR [eax], xmm1
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat2x4

; 110  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T2[ebp]
	push	8
	pop	ecx
	movsd	QWORD PTR $T2[ebp+24], xmm1
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]

; 111  : 		this->value[1] = col_type(m[1], 0);

	push	8
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR $T2[ebp+16], xmm0
	rep movsd
	movups	xmm0, XMMWORD PTR [eax+24]
	pop	ecx
	lea	edi, DWORD PTR [ebx+32]
	movsd	QWORD PTR $T1[ebp+24], xmm1
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	movsd	xmm0, QWORD PTR [eax+40]

; 112  : 	}

	mov	eax, ebx
	movsd	QWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x4@N$01@glm@@QAE@ABU?$tmat3x3@N$01@1@@Z ENDP	; glm::tmat2x4<double,2>::tmat2x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$01@glm@@QAE@ABU?$tmat2x2@N$01@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tmat2x4@N$01@glm@@QAE@ABU?$tmat2x2@N$01@1@@Z PROC	; glm::tmat2x4<double,2>::tmat2x4<double,2>, COMDAT
; _this$ = ecx

; 102  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xor	edx, edx
	inc	edx
	xorps	xmm0, xmm0
	push	ebx
	mov	ebx, ecx
	push	esi
	push	edi
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat2x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm0
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat2x4

; 103  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T2[ebp]
	push	8
	pop	ecx
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]

; 104  : 		this->value[1] = col_type(m[1], 0, 0);

	push	8
	movups	XMMWORD PTR $T2[ebp], xmm0
	xorps	xmm0, xmm0
	movupd	XMMWORD PTR $T2[ebp+16], xmm0
	rep movsd
	movups	xmm0, XMMWORD PTR [eax+16]
	pop	ecx
	lea	edi, DWORD PTR [ebx+32]

; 105  : 	}

	mov	eax, ebx
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	xorps	xmm0, xmm0
	movupd	XMMWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x4@N$01@glm@@QAE@ABU?$tmat2x2@N$01@1@@Z ENDP	; glm::tmat2x4<double,2>::tmat2x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$01@glm@@QAE@ABU?$tvec4@N$01@1@0@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
??0?$tmat2x4@N$01@glm@@QAE@ABU?$tvec4@N$01@1@0@Z PROC	; glm::tmat2x4<double,2>::tmat2x4<double,2>, COMDAT
; _this$ = ecx

; 61   : 	{

	push	ebp
	mov	ebp, esp
	mov	edx, ecx
	xorps	xmm0, xmm0
	xor	ecx, ecx
	inc	ecx
	lea	eax, DWORD PTR [edx+16]
$LL4@tmat2x4:
	dec	ecx
	movups	XMMWORD PTR [eax-16], xmm0
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat2x4

; 62   : 		this->value[0] = v0;

	push	esi
	mov	esi, DWORD PTR _v0$[ebp]

; 63   : 		this->value[1] = v1;
; 64   : 	}

	mov	eax, edx
	push	edi
	push	8
	pop	ecx
	mov	edi, edx
	rep movsd
	mov	esi, DWORD PTR _v1$[ebp]
	lea	edi, DWORD PTR [edx+32]
	push	8
	pop	ecx
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	8
??0?$tmat2x4@N$01@glm@@QAE@ABU?$tvec4@N$01@1@0@Z ENDP	; glm::tmat2x4<double,2>::tmat2x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$01@glm@@QAE@NNNNNNNN@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
_x0$ = 8						; size = 8
_y0$ = 16						; size = 8
_z0$ = 24						; size = 8
_w0$ = 32						; size = 8
_x1$ = 40						; size = 8
_y1$ = 48						; size = 8
_z1$ = 56						; size = 8
_w1$ = 64						; size = 8
??0?$tmat2x4@N$01@glm@@QAE@NNNNNNNN@Z PROC		; glm::tmat2x4<double,2>::tmat2x4<double,2>, COMDAT
; _this$ = ecx

; 54   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xor	edx, edx
	inc	edx
	xorps	xmm0, xmm0
	push	ebx
	mov	ebx, ecx
	push	esi
	push	edi
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat2x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm0
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat2x4

; 55   : 		this->value[0] = col_type(x0, y0, z0, w0);

	movsd	xmm0, QWORD PTR _x0$[ebp]
	lea	esi, DWORD PTR $T2[ebp]
	movsd	QWORD PTR $T2[ebp], xmm0
	mov	edi, ebx
	movsd	xmm0, QWORD PTR _y0$[ebp]

; 56   : 		this->value[1] = col_type(x1, y1, z1, w1);
; 57   : 	}

	mov	eax, ebx
	movsd	QWORD PTR $T2[ebp+8], xmm0
	movsd	xmm0, QWORD PTR _z0$[ebp]
	movsd	QWORD PTR $T2[ebp+16], xmm0
	movsd	xmm0, QWORD PTR _w0$[ebp]
	push	8
	movsd	QWORD PTR $T2[ebp+24], xmm0
	movsd	xmm0, QWORD PTR _x1$[ebp]
	pop	ecx
	rep movsd
	movsd	QWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ebx+32]
	movsd	xmm0, QWORD PTR _y1$[ebp]
	lea	esi, DWORD PTR $T1[ebp]
	movsd	QWORD PTR $T1[ebp+8], xmm0
	movsd	xmm0, QWORD PTR _z1$[ebp]
	push	8
	movsd	QWORD PTR $T1[ebp+16], xmm0
	movsd	xmm0, QWORD PTR _w1$[ebp]
	pop	ecx
	movsd	QWORD PTR $T1[ebp+24], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	64					; 00000040H
??0?$tmat2x4@N$01@glm@@QAE@NNNNNNNN@Z ENDP		; glm::tmat2x4<double,2>::tmat2x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$01@glm@@QAE@N@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
_scalar$ = 8						; size = 8
??0?$tmat2x4@N$01@glm@@QAE@N@Z PROC			; glm::tmat2x4<double,2>::tmat2x4<double,2>, COMDAT
; _this$ = ecx

; 42   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xor	edx, edx
	inc	edx
	xorps	xmm2, xmm2
	push	ebx
	mov	ebx, ecx
	push	esi
	push	edi
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat2x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm2
	movups	XMMWORD PTR [eax], xmm2
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat2x4

; 43   : 		value_type const Zero(0);
; 44   : 		this->value[0] = col_type(scalar, Zero, Zero, Zero);

	movsd	xmm1, QWORD PTR _scalar$[ebp]
	lea	esi, DWORD PTR $T2[ebp]
	push	8
	pop	ecx
	xorps	xmm0, xmm0
	movsd	QWORD PTR $T2[ebp], xmm1
	movupd	XMMWORD PTR $T2[ebp+8], xmm0
	mov	edi, ebx

; 45   : 		this->value[1] = col_type(Zero, scalar, Zero, Zero);
; 46   : 	}

	mov	eax, ebx
	movsd	QWORD PTR $T2[ebp+24], xmm2
	rep movsd
	push	8
	pop	ecx
	lea	edi, DWORD PTR [ebx+32]
	movsd	QWORD PTR $T1[ebp], xmm2
	lea	esi, DWORD PTR $T1[ebp]
	movsd	QWORD PTR $T1[ebp+8], xmm1
	movupd	XMMWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$tmat2x4@N$01@glm@@QAE@N@Z ENDP			; glm::tmat2x4<double,2>::tmat2x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat2x4@N$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat2x4<double,2>::tmat2x4<double,2>, COMDAT
; _this$ = ecx

; 38   : 	{}

	xor	edx, edx
	lea	eax, DWORD PTR [ecx+16]
	inc	edx
	xorps	xmm0, xmm0
$LL4@tmat2x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm0
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat2x4
	mov	eax, ecx
	ret	4
??0?$tmat2x4@N$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat2x4<double,2>::tmat2x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tmat2x4@N$01@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tmat2x4@N$01@glm@@QAE@ABU01@@Z PROC		; glm::tmat2x4<double,2>::tmat2x4<double,2>, COMDAT
; _this$ = ecx

; 168  : template struct tmat2x4<float64, lowp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	16					; 00000010H
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tmat2x4@N$01@glm@@QAE@ABU01@@Z ENDP		; glm::tmat2x4<double,2>::tmat2x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$01@glm@@QAE@XZ
_TEXT	SEGMENT
$T1 = -32						; size = 32
$T2 = -32						; size = 32
??0?$tmat2x4@N$01@glm@@QAE@XZ PROC			; glm::tmat2x4<double,2>::tmat2x4<double,2>, COMDAT
; _this$ = ecx

; 11   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	xor	edx, edx
	inc	edx
	xorps	xmm0, xmm0
	push	ebx
	mov	ebx, ecx
	push	esi
	push	edi
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat2x4:
	dec	edx
	movups	XMMWORD PTR [eax-16], xmm0
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+32]
	jns	SHORT $LL4@tmat2x4

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0, 0, 0);

	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	lea	esi, DWORD PTR $T2[ebp]
	movupd	XMMWORD PTR $T2[ebp], xmm0
	push	8
	pop	ecx
	xorps	xmm0, xmm0
	mov	edi, ebx
	movupd	XMMWORD PTR $T2[ebp+16], xmm0

; 14   : 				this->value[1] = col_type(0, 1, 0, 0);
; 15   : #			endif
; 16   : 		}

	mov	eax, ebx
	movaps	xmm0, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	rep movsd
	push	8
	movupd	XMMWORD PTR $T1[ebp], xmm0
	pop	ecx
	xorps	xmm0, xmm0
	lea	edi, DWORD PTR [ebx+32]
	lea	esi, DWORD PTR $T1[ebp]
	movupd	XMMWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$tmat2x4@N$01@glm@@QAE@XZ ENDP			; glm::tmat2x4<double,2>::tmat2x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??F?$tmat2x4@M$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat2x4@M$01@glm@@QAE?AU01@H@Z PROC		; glm::tmat2x4<float,2>::operator--, COMDAT
; _this$ = ecx

; 275  : 	{

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi

; 276  : 		tmat2x4<T, P> Result(*this);

	mov	edi, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, ecx
	push	8
	pop	ecx
	mov	esi, eax
	rep movsd

; 277  : 		--*this;

	mov	ecx, eax
	call	??F?$tmat2x4@M$01@glm@@QAEAAU01@XZ	; glm::tmat2x4<float,2>::operator--

; 278  : 		return Result;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi

; 279  : 	}

	pop	ebp
	ret	8
??F?$tmat2x4@M$01@glm@@QAE?AU01@H@Z ENDP		; glm::tmat2x4<float,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??E?$tmat2x4@M$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat2x4@M$01@glm@@QAE?AU01@H@Z PROC		; glm::tmat2x4<float,2>::operator++, COMDAT
; _this$ = ecx

; 267  : 	{

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi

; 268  : 		tmat2x4<T, P> Result(*this);

	mov	edi, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, ecx
	push	8
	pop	ecx
	mov	esi, eax
	rep movsd

; 269  : 		++*this;

	mov	ecx, eax
	call	??E?$tmat2x4@M$01@glm@@QAEAAU01@XZ	; glm::tmat2x4<float,2>::operator++

; 270  : 		return Result;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi

; 271  : 	}

	pop	ebp
	ret	8
??E?$tmat2x4@M$01@glm@@QAE?AU01@H@Z ENDP		; glm::tmat2x4<float,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??F?$tmat2x4@M$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat2x4@M$01@glm@@QAEAAU01@XZ PROC			; glm::tmat2x4<float,2>::operator--, COMDAT
; _this$ = ecx

; 260  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 261  : 		--this->value[1];
; 262  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0

; 263  : 	}

	ret	0
??F?$tmat2x4@M$01@glm@@QAEAAU01@XZ ENDP			; glm::tmat2x4<float,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??E?$tmat2x4@M$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat2x4@M$01@glm@@QAEAAU01@XZ PROC			; glm::tmat2x4<float,2>::operator++, COMDAT
; _this$ = ecx

; 252  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 253  : 		++this->value[1];
; 254  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0

; 255  : 	}

	ret	0
??E?$tmat2x4@M$01@glm@@QAEAAU01@XZ ENDP			; glm::tmat2x4<float,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tmat2x4@M$01@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tmat2x4@M$01@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tmat2x4<float,2>::operator=, COMDAT
; _this$ = ecx

; 167  : template struct tmat2x4<float32, lowp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	8
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tmat2x4@M$01@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tmat2x4<float,2>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??A?$tmat2x4@M$01@glm@@QBEABU?$tvec4@M$01@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat2x4@M$01@glm@@QBEABU?$tvec4@M$01@1@H@Z PROC	; glm::tmat2x4<float,2>::operator[], COMDAT
; _this$ = ecx

; 167  : 	{

	push	ebp
	mov	ebp, esp

; 168  : 		assert(i < this->length());
; 169  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, ecx

; 170  : 	}

	pop	ebp
	ret	4
??A?$tmat2x4@M$01@glm@@QBEABU?$tvec4@M$01@1@H@Z ENDP	; glm::tmat2x4<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??A?$tmat2x4@M$01@glm@@QAEAAU?$tvec4@M$01@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat2x4@M$01@glm@@QAEAAU?$tvec4@M$01@1@H@Z PROC	; glm::tmat2x4<float,2>::operator[], COMDAT
; _this$ = ecx

; 160  : 	{

	push	ebp
	mov	ebp, esp

; 161  : 		assert(i < this->length());
; 162  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, ecx

; 163  : 	}

	pop	ebp
	ret	4
??A?$tmat2x4@M$01@glm@@QAEAAU?$tvec4@M$01@1@H@Z ENDP	; glm::tmat2x4<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.hpp
;	COMDAT ?length@?$tmat2x4@M$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat2x4@M$01@glm@@SAHXZ PROC			; glm::tmat2x4<float,2>::length, COMDAT

; 75   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	push	2
	pop	eax
	ret	0
?length@?$tmat2x4@M$01@glm@@SAHXZ ENDP			; glm::tmat2x4<float,2>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$01@glm@@QAE@ABU?$tmat4x3@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat2x4@M$01@glm@@QAE@ABU?$tmat4x3@M$01@1@@Z PROC	; glm::tmat2x4<float,2>::tmat2x4<float,2>, COMDAT
; _this$ = ecx

; 151  : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	lea	eax, DWORD PTR [ecx+8]
	sub	esp, 16					; 00000010H
	inc	edx
$LL4@tmat2x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat2x4

; 152  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	and	DWORD PTR $T2[ebp+12], 0
	push	esi
	push	edi
	movss	xmm0, DWORD PTR [eax]
	lea	esi, DWORD PTR $T2[ebp]
	movss	DWORD PTR $T2[ebp], xmm0
	mov	edi, ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T2[ebp+8], xmm0
	movsd
	movsd
	movsd
	movsd

; 153  : 		this->value[1] = col_type(m[1], 0);

	movss	xmm0, DWORD PTR [eax+12]
	lea	edi, DWORD PTR [ecx+16]
	and	DWORD PTR $T1[ebp+12], 0
	lea	esi, DWORD PTR $T1[ebp]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+20]

; 154  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+8], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x4@M$01@glm@@QAE@ABU?$tmat4x3@M$01@1@@Z ENDP	; glm::tmat2x4<float,2>::tmat2x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$01@glm@@QAE@ABU?$tmat4x2@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat2x4@M$01@glm@@QAE@ABU?$tmat4x2@M$01@1@@Z PROC	; glm::tmat2x4<float,2>::tmat2x4<float,2>, COMDAT
; _this$ = ecx

; 144  : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	lea	eax, DWORD PTR [ecx+8]
	sub	esp, 16					; 00000010H
	inc	edx
$LL4@tmat2x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat2x4

; 145  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	and	DWORD PTR $T2[ebp+8], 0
	and	DWORD PTR $T2[ebp+12], 0
	push	esi
	movss	xmm0, DWORD PTR [eax]
	lea	esi, DWORD PTR $T2[ebp]
	push	edi
	movss	DWORD PTR $T2[ebp], xmm0
	mov	edi, ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movsd
	movsd
	movsd
	movsd

; 146  : 		this->value[1] = col_type(m[1], 0, 0);

	movss	xmm0, DWORD PTR [eax+8]
	lea	edi, DWORD PTR [ecx+16]
	and	DWORD PTR $T1[ebp+8], 0
	lea	esi, DWORD PTR $T1[ebp]
	and	DWORD PTR $T1[ebp+12], 0
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+12]

; 147  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+4], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x4@M$01@glm@@QAE@ABU?$tmat4x2@M$01@1@@Z ENDP	; glm::tmat2x4<float,2>::tmat2x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$01@glm@@QAE@ABU?$tmat3x4@M$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x4@M$01@glm@@QAE@ABU?$tmat3x4@M$01@1@@Z PROC	; glm::tmat2x4<float,2>::tmat2x4<float,2>, COMDAT
; _this$ = ecx

; 137  : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	lea	eax, DWORD PTR [ecx+8]
	inc	edx
$LL4@tmat2x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat2x4

; 138  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	esi, eax
	mov	edi, ecx
	movsd
	movsd
	movsd
	movsd

; 139  : 		this->value[1] = m[1];

	lea	esi, DWORD PTR [eax+16]

; 140  : 	}

	mov	eax, ecx
	lea	edi, DWORD PTR [ecx+16]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tmat2x4@M$01@glm@@QAE@ABU?$tmat3x4@M$01@1@@Z ENDP	; glm::tmat2x4<float,2>::tmat2x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$01@glm@@QAE@ABU?$tmat3x2@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat2x4@M$01@glm@@QAE@ABU?$tmat3x2@M$01@1@@Z PROC	; glm::tmat2x4<float,2>::tmat2x4<float,2>, COMDAT
; _this$ = ecx

; 130  : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	lea	eax, DWORD PTR [ecx+8]
	sub	esp, 16					; 00000010H
	inc	edx
$LL4@tmat2x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat2x4

; 131  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	and	DWORD PTR $T2[ebp+8], 0
	and	DWORD PTR $T2[ebp+12], 0
	push	esi
	movss	xmm0, DWORD PTR [eax]
	lea	esi, DWORD PTR $T2[ebp]
	push	edi
	movss	DWORD PTR $T2[ebp], xmm0
	mov	edi, ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movsd
	movsd
	movsd
	movsd

; 132  : 		this->value[1] = col_type(m[1], 0, 0);

	movss	xmm0, DWORD PTR [eax+8]
	lea	edi, DWORD PTR [ecx+16]
	and	DWORD PTR $T1[ebp+8], 0
	lea	esi, DWORD PTR $T1[ebp]
	and	DWORD PTR $T1[ebp+12], 0
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+12]

; 133  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+4], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x4@M$01@glm@@QAE@ABU?$tmat3x2@M$01@1@@Z ENDP	; glm::tmat2x4<float,2>::tmat2x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$01@glm@@QAE@ABU?$tmat2x3@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat2x4@M$01@glm@@QAE@ABU?$tmat2x3@M$01@1@@Z PROC	; glm::tmat2x4<float,2>::tmat2x4<float,2>, COMDAT
; _this$ = ecx

; 123  : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	lea	eax, DWORD PTR [ecx+8]
	sub	esp, 16					; 00000010H
	inc	edx
$LL4@tmat2x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat2x4

; 124  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	and	DWORD PTR $T2[ebp+12], 0
	push	esi
	push	edi
	movss	xmm0, DWORD PTR [eax]
	lea	esi, DWORD PTR $T2[ebp]
	movss	DWORD PTR $T2[ebp], xmm0
	mov	edi, ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T2[ebp+8], xmm0
	movsd
	movsd
	movsd
	movsd

; 125  : 		this->value[1] = col_type(m[1], 0);

	movss	xmm0, DWORD PTR [eax+12]
	lea	edi, DWORD PTR [ecx+16]
	and	DWORD PTR $T1[ebp+12], 0
	lea	esi, DWORD PTR $T1[ebp]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+20]

; 126  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+8], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x4@M$01@glm@@QAE@ABU?$tmat2x3@M$01@1@@Z ENDP	; glm::tmat2x4<float,2>::tmat2x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$01@glm@@QAE@ABU?$tmat4x4@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat2x4@M$01@glm@@QAE@ABU?$tmat4x4@M$01@1@@Z PROC	; glm::tmat2x4<float,2>::tmat2x4<float,2>, COMDAT
; _this$ = ecx

; 116  : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	lea	eax, DWORD PTR [ecx+8]
	sub	esp, 16					; 00000010H
	inc	edx
$LL4@tmat2x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat2x4

; 117  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	esi, eax
	lea	edi, DWORD PTR $T2[ebp]
	movsd
	movsd
	movsd
	movsd
	mov	edi, ecx
	lea	esi, DWORD PTR $T2[ebp]
	movsd
	movsd
	movsd
	movsd

; 118  : 		this->value[1] = col_type(m[1]);

	lea	esi, DWORD PTR [eax+16]

; 119  : 	}

	mov	eax, ecx
	lea	edi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	lea	edi, DWORD PTR [ecx+16]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x4@M$01@glm@@QAE@ABU?$tmat4x4@M$01@1@@Z ENDP	; glm::tmat2x4<float,2>::tmat2x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$01@glm@@QAE@ABU?$tmat3x3@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat2x4@M$01@glm@@QAE@ABU?$tmat3x3@M$01@1@@Z PROC	; glm::tmat2x4<float,2>::tmat2x4<float,2>, COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	lea	eax, DWORD PTR [ecx+8]
	sub	esp, 16					; 00000010H
	inc	edx
$LL4@tmat2x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat2x4

; 110  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	and	DWORD PTR $T2[ebp+12], 0
	push	esi
	push	edi
	movss	xmm0, DWORD PTR [eax]
	lea	esi, DWORD PTR $T2[ebp]
	movss	DWORD PTR $T2[ebp], xmm0
	mov	edi, ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T2[ebp+8], xmm0
	movsd
	movsd
	movsd
	movsd

; 111  : 		this->value[1] = col_type(m[1], 0);

	movss	xmm0, DWORD PTR [eax+12]
	lea	edi, DWORD PTR [ecx+16]
	and	DWORD PTR $T1[ebp+12], 0
	lea	esi, DWORD PTR $T1[ebp]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+20]

; 112  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+8], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x4@M$01@glm@@QAE@ABU?$tmat3x3@M$01@1@@Z ENDP	; glm::tmat2x4<float,2>::tmat2x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$01@glm@@QAE@ABU?$tmat2x2@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat2x4@M$01@glm@@QAE@ABU?$tmat2x2@M$01@1@@Z PROC	; glm::tmat2x4<float,2>::tmat2x4<float,2>, COMDAT
; _this$ = ecx

; 102  : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	lea	eax, DWORD PTR [ecx+8]
	sub	esp, 16					; 00000010H
	inc	edx
$LL4@tmat2x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat2x4

; 103  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	and	DWORD PTR $T2[ebp+8], 0
	and	DWORD PTR $T2[ebp+12], 0
	push	esi
	movss	xmm0, DWORD PTR [eax]
	lea	esi, DWORD PTR $T2[ebp]
	push	edi
	movss	DWORD PTR $T2[ebp], xmm0
	mov	edi, ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movsd
	movsd
	movsd
	movsd

; 104  : 		this->value[1] = col_type(m[1], 0, 0);

	movss	xmm0, DWORD PTR [eax+8]
	lea	edi, DWORD PTR [ecx+16]
	and	DWORD PTR $T1[ebp+8], 0
	lea	esi, DWORD PTR $T1[ebp]
	and	DWORD PTR $T1[ebp+12], 0
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+12]

; 105  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+4], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x4@M$01@glm@@QAE@ABU?$tmat2x2@M$01@1@@Z ENDP	; glm::tmat2x4<float,2>::tmat2x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$01@glm@@QAE@ABU?$tvec4@M$01@1@0@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
??0?$tmat2x4@M$01@glm@@QAE@ABU?$tvec4@M$01@1@0@Z PROC	; glm::tmat2x4<float,2>::tmat2x4<float,2>, COMDAT
; _this$ = ecx

; 61   : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	lea	eax, DWORD PTR [ecx+8]
	inc	edx
$LL4@tmat2x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat2x4

; 62   : 		this->value[0] = v0;

	push	esi
	mov	esi, DWORD PTR _v0$[ebp]

; 63   : 		this->value[1] = v1;
; 64   : 	}

	mov	eax, ecx
	push	edi
	mov	edi, ecx
	movsd
	movsd
	movsd
	movsd
	mov	esi, DWORD PTR _v1$[ebp]
	lea	edi, DWORD PTR [ecx+16]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	8
??0?$tmat2x4@M$01@glm@@QAE@ABU?$tvec4@M$01@1@0@Z ENDP	; glm::tmat2x4<float,2>::tmat2x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$01@glm@@QAE@MMMMMMMM@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_z0$ = 16						; size = 4
_w0$ = 20						; size = 4
_x1$ = 24						; size = 4
_y1$ = 28						; size = 4
_z1$ = 32						; size = 4
_w1$ = 36						; size = 4
??0?$tmat2x4@M$01@glm@@QAE@MMMMMMMM@Z PROC		; glm::tmat2x4<float,2>::tmat2x4<float,2>, COMDAT
; _this$ = ecx

; 54   : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	lea	eax, DWORD PTR [ecx+8]
	sub	esp, 16					; 00000010H
	inc	edx
$LL4@tmat2x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat2x4

; 55   : 		this->value[0] = col_type(x0, y0, z0, w0);

	movss	xmm0, DWORD PTR _x0$[ebp]

; 56   : 		this->value[1] = col_type(x1, y1, z1, w1);
; 57   : 	}

	mov	eax, ecx
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR _y0$[ebp]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR _z0$[ebp]
	push	esi
	push	edi
	movss	DWORD PTR $T2[ebp+8], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	movss	xmm0, DWORD PTR _w0$[ebp]
	mov	edi, ecx
	movss	DWORD PTR $T2[ebp+12], xmm0
	movss	xmm0, DWORD PTR _x1$[ebp]
	movsd
	movsd
	movsd
	movsd
	movss	DWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+16]
	movss	xmm0, DWORD PTR _y1$[ebp]
	lea	esi, DWORD PTR $T1[ebp]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR _z1$[ebp]
	movss	DWORD PTR $T1[ebp+8], xmm0
	movss	xmm0, DWORD PTR _w1$[ebp]
	movss	DWORD PTR $T1[ebp+12], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	32					; 00000020H
??0?$tmat2x4@M$01@glm@@QAE@MMMMMMMM@Z ENDP		; glm::tmat2x4<float,2>::tmat2x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$01@glm@@QAE@M@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_scalar$ = 8						; size = 4
??0?$tmat2x4@M$01@glm@@QAE@M@Z PROC			; glm::tmat2x4<float,2>::tmat2x4<float,2>, COMDAT
; _this$ = ecx

; 42   : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	lea	eax, DWORD PTR [ecx+8]
	sub	esp, 16					; 00000010H
	inc	edx
$LL4@tmat2x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat2x4

; 43   : 		value_type const Zero(0);
; 44   : 		this->value[0] = col_type(scalar, Zero, Zero, Zero);

	and	DWORD PTR $T2[ebp+4], 0

; 45   : 		this->value[1] = col_type(Zero, scalar, Zero, Zero);
; 46   : 	}

	mov	eax, ecx
	and	DWORD PTR $T2[ebp+8], 0
	and	DWORD PTR $T2[ebp+12], 0
	movss	xmm0, DWORD PTR _scalar$[ebp]
	push	esi
	push	edi
	movss	DWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	mov	edi, ecx
	movsd
	movsd
	movsd
	movsd
	and	DWORD PTR $T1[ebp], 0
	lea	edi, DWORD PTR [ecx+16]
	and	DWORD PTR $T1[ebp+8], 0
	lea	esi, DWORD PTR $T1[ebp]
	and	DWORD PTR $T1[ebp+12], 0
	movss	DWORD PTR $T1[ebp+4], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x4@M$01@glm@@QAE@M@Z ENDP			; glm::tmat2x4<float,2>::tmat2x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat2x4@M$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat2x4<float,2>::tmat2x4<float,2>, COMDAT
; _this$ = ecx

; 38   : 	{}

	xor	edx, edx
	lea	eax, DWORD PTR [ecx+8]
	inc	edx
$LL4@tmat2x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat2x4
	mov	eax, ecx
	ret	4
??0?$tmat2x4@M$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat2x4<float,2>::tmat2x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tmat2x4@M$01@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tmat2x4@M$01@glm@@QAE@ABU01@@Z PROC		; glm::tmat2x4<float,2>::tmat2x4<float,2>, COMDAT
; _this$ = ecx

; 167  : template struct tmat2x4<float32, lowp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	8
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tmat2x4@M$01@glm@@QAE@ABU01@@Z ENDP		; glm::tmat2x4<float,2>::tmat2x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$01@glm@@QAE@XZ
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
??0?$tmat2x4@M$01@glm@@QAE@XZ PROC			; glm::tmat2x4<float,2>::tmat2x4<float,2>, COMDAT
; _this$ = ecx

; 11   : 		{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	lea	eax, DWORD PTR [ecx+8]
	sub	esp, 16					; 00000010H
	inc	edx
$LL4@tmat2x4:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+16]
	and	DWORD PTR [eax-12], 0
	dec	edx
	jns	SHORT $LL4@tmat2x4

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0, 0, 0);
; 14   : 				this->value[1] = col_type(0, 1, 0, 0);
; 15   : #			endif
; 16   : 		}

	movaps	xmm0, XMMWORD PTR __xmm@0000000000000000000000003f800000
	mov	eax, ecx
	push	esi
	push	edi
	movups	XMMWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	mov	edi, ecx
	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003f80000000000000
	movsd
	movsd
	movsd
	movsd
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+16]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$tmat2x4@M$01@glm@@QAE@XZ ENDP			; glm::tmat2x4<float,2>::tmat2x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??F?$tmat2x3@N$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat2x3@N$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tmat2x3<double,0>::operator--, COMDAT
; _this$ = ecx

; 274  : 	{

	push	ebp
	mov	ebp, esp

; 275  : 		tmat2x3<T, P> Result(*this);
; 276  : 		--*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	mov	edx, ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	movups	xmm0, XMMWORD PTR [edx]
	push	12					; 0000000cH
	pop	ecx
	subpd	xmm0, xmm1
	mov	esi, edx
	mov	edi, eax
	rep movsd
	movups	XMMWORD PTR [edx], xmm0
	pop	edi
	movups	xmm0, XMMWORD PTR [edx+16]
	pop	esi
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+16], xmm0
	movups	xmm0, XMMWORD PTR [edx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+32], xmm0

; 277  : 		return Result;
; 278  : 	}

	pop	ebp
	ret	8
??F?$tmat2x3@N$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tmat2x3<double,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??E?$tmat2x3@N$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat2x3@N$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tmat2x3<double,0>::operator++, COMDAT
; _this$ = ecx

; 266  : 	{

	push	ebp
	mov	ebp, esp

; 267  : 		tmat2x3<T, P> Result(*this);
; 268  : 		++*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	mov	edx, ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	movups	xmm0, XMMWORD PTR [edx]
	push	12					; 0000000cH
	pop	ecx
	addpd	xmm0, xmm1
	mov	esi, edx
	mov	edi, eax
	rep movsd
	movups	XMMWORD PTR [edx], xmm0
	pop	edi
	movups	xmm0, XMMWORD PTR [edx+16]
	pop	esi
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+16], xmm0
	movups	xmm0, XMMWORD PTR [edx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+32], xmm0

; 269  : 		return Result;
; 270  : 	}

	pop	ebp
	ret	8
??E?$tmat2x3@N$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tmat2x3<double,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??F?$tmat2x3@N$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat2x3@N$0A@@glm@@QAEAAU01@XZ PROC		; glm::tmat2x3<double,0>::operator--, COMDAT
; _this$ = ecx

; 259  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 260  : 		--this->value[1];
; 261  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0

; 262  : 	}

	ret	0
??F?$tmat2x3@N$0A@@glm@@QAEAAU01@XZ ENDP		; glm::tmat2x3<double,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??E?$tmat2x3@N$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat2x3@N$0A@@glm@@QAEAAU01@XZ PROC		; glm::tmat2x3<double,0>::operator++, COMDAT
; _this$ = ecx

; 251  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 252  : 		++this->value[1];
; 253  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0

; 254  : 	}

	ret	0
??E?$tmat2x3@N$0A@@glm@@QAEAAU01@XZ ENDP		; glm::tmat2x3<double,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tmat2x3@N$0A@@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tmat2x3@N$0A@@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tmat2x3<double,0>::operator=, COMDAT
; _this$ = ecx

; 164  : template struct tmat2x3<float64, highp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	12					; 0000000cH
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tmat2x3@N$0A@@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tmat2x3<double,0>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??A?$tmat2x3@N$0A@@glm@@QBEABU?$tvec3@N$0A@@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat2x3@N$0A@@glm@@QBEABU?$tvec3@N$0A@@1@H@Z PROC	; glm::tmat2x3<double,0>::operator[], COMDAT
; _this$ = ecx

; 166  : 	{

	push	ebp
	mov	ebp, esp

; 167  : 		assert(i < this->length());
; 168  : 		return this->value[i];

	imul	eax, DWORD PTR _i$[ebp], 24
	add	eax, ecx

; 169  : 	}

	pop	ebp
	ret	4
??A?$tmat2x3@N$0A@@glm@@QBEABU?$tvec3@N$0A@@1@H@Z ENDP	; glm::tmat2x3<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??A?$tmat2x3@N$0A@@glm@@QAEAAU?$tvec3@N$0A@@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat2x3@N$0A@@glm@@QAEAAU?$tvec3@N$0A@@1@H@Z PROC	; glm::tmat2x3<double,0>::operator[], COMDAT
; _this$ = ecx

; 159  : 	{

	push	ebp
	mov	ebp, esp

; 160  : 		assert(i < this->length());
; 161  : 		return this->value[i];

	imul	eax, DWORD PTR _i$[ebp], 24
	add	eax, ecx

; 162  : 	}

	pop	ebp
	ret	4
??A?$tmat2x3@N$0A@@glm@@QAEAAU?$tvec3@N$0A@@1@H@Z ENDP	; glm::tmat2x3<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.hpp
;	COMDAT ?length@?$tmat2x3@N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat2x3@N$0A@@glm@@SAHXZ PROC			; glm::tmat2x3<double,0>::length, COMDAT

; 73   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	push	2
	pop	eax
	ret	0
?length@?$tmat2x3@N$0A@@glm@@SAHXZ ENDP			; glm::tmat2x3<double,0>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$0A@@glm@@QAE@ABU?$tmat4x3@N$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x3@N$0A@@glm@@QAE@ABU?$tmat4x3@N$0A@@1@@Z PROC ; glm::tmat2x3<double,0>::tmat2x3<double,0>, COMDAT
; _this$ = ecx

; 150  : 	{

	push	ebp
	mov	ebp, esp
	mov	edx, ecx
	xorps	xmm0, xmm0
	xor	ecx, ecx
	inc	ecx
	lea	eax, DWORD PTR [edx+16]
$LL4@tmat2x3:
	dec	ecx
	movsd	QWORD PTR [eax], xmm0
	movups	XMMWORD PTR [eax-16], xmm0
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat2x3

; 151  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	push	6
	pop	ecx
	mov	esi, eax
	mov	edi, edx
	rep movsd

; 152  : 		this->value[1] = m[1];

	push	6
	pop	ecx
	lea	esi, DWORD PTR [eax+24]

; 153  : 	}

	mov	eax, edx
	lea	edi, DWORD PTR [edx+24]
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tmat2x3@N$0A@@glm@@QAE@ABU?$tmat4x3@N$0A@@1@@Z ENDP ; glm::tmat2x3<double,0>::tmat2x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$0A@@glm@@QAE@ABU?$tmat4x2@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
_m$ = 8							; size = 4
??0?$tmat2x3@N$0A@@glm@@QAE@ABU?$tmat4x2@N$0A@@1@@Z PROC ; glm::tmat2x3<double,0>::tmat2x3<double,0>, COMDAT
; _this$ = ecx

; 143  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xor	edx, edx
	inc	edx
	xorps	xmm1, xmm1
	push	ebx
	mov	ebx, ecx
	push	esi
	push	edi
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat2x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm1
	movups	XMMWORD PTR [eax-16], xmm1
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat2x3

; 144  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T2[ebp]
	push	6
	pop	ecx
	movsd	QWORD PTR $T2[ebp+16], xmm1
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]

; 145  : 		this->value[1] = col_type(m[1], 0);

	push	6
	movups	XMMWORD PTR $T2[ebp], xmm0
	rep movsd
	movups	xmm0, XMMWORD PTR [eax+16]
	pop	ecx
	lea	edi, DWORD PTR [ebx+24]
	movsd	QWORD PTR $T1[ebp+16], xmm1
	lea	esi, DWORD PTR $T1[ebp]

; 146  : 	}

	mov	eax, ebx
	movups	XMMWORD PTR $T1[ebp], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x3@N$0A@@glm@@QAE@ABU?$tmat4x2@N$0A@@1@@Z ENDP ; glm::tmat2x3<double,0>::tmat2x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$0A@@glm@@QAE@ABU?$tmat3x4@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
_m$ = 8							; size = 4
??0?$tmat2x3@N$0A@@glm@@QAE@ABU?$tmat3x4@N$0A@@1@@Z PROC ; glm::tmat2x3<double,0>::tmat2x3<double,0>, COMDAT
; _this$ = ecx

; 136  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xor	edx, edx
	inc	edx
	xorps	xmm0, xmm0
	push	ebx
	mov	ebx, ecx
	push	esi
	push	edi
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat2x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm0
	movups	XMMWORD PTR [eax-16], xmm0
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat2x3

; 137  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T2[ebp]
	push	6
	pop	ecx
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]

; 138  : 		this->value[1] = col_type(m[1]);

	push	6
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR $T2[ebp+16], xmm0
	rep movsd
	movups	xmm0, XMMWORD PTR [eax+32]
	pop	ecx
	lea	edi, DWORD PTR [ebx+24]
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	movsd	xmm0, QWORD PTR [eax+48]

; 139  : 	}

	mov	eax, ebx
	movsd	QWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x3@N$0A@@glm@@QAE@ABU?$tmat3x4@N$0A@@1@@Z ENDP ; glm::tmat2x3<double,0>::tmat2x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$0A@@glm@@QAE@ABU?$tmat3x2@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
_m$ = 8							; size = 4
??0?$tmat2x3@N$0A@@glm@@QAE@ABU?$tmat3x2@N$0A@@1@@Z PROC ; glm::tmat2x3<double,0>::tmat2x3<double,0>, COMDAT
; _this$ = ecx

; 129  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xor	edx, edx
	inc	edx
	xorps	xmm1, xmm1
	push	ebx
	mov	ebx, ecx
	push	esi
	push	edi
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat2x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm1
	movups	XMMWORD PTR [eax-16], xmm1
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat2x3

; 130  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T2[ebp]
	push	6
	pop	ecx
	movsd	QWORD PTR $T2[ebp+16], xmm1
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]

; 131  : 		this->value[1] = col_type(m[1], 0);

	push	6
	movups	XMMWORD PTR $T2[ebp], xmm0
	rep movsd
	movups	xmm0, XMMWORD PTR [eax+16]
	pop	ecx
	lea	edi, DWORD PTR [ebx+24]
	movsd	QWORD PTR $T1[ebp+16], xmm1
	lea	esi, DWORD PTR $T1[ebp]

; 132  : 	}

	mov	eax, ebx
	movups	XMMWORD PTR $T1[ebp], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x3@N$0A@@glm@@QAE@ABU?$tmat3x2@N$0A@@1@@Z ENDP ; glm::tmat2x3<double,0>::tmat2x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$0A@@glm@@QAE@ABU?$tmat2x4@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
_m$ = 8							; size = 4
??0?$tmat2x3@N$0A@@glm@@QAE@ABU?$tmat2x4@N$0A@@1@@Z PROC ; glm::tmat2x3<double,0>::tmat2x3<double,0>, COMDAT
; _this$ = ecx

; 122  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xor	edx, edx
	inc	edx
	xorps	xmm0, xmm0
	push	ebx
	mov	ebx, ecx
	push	esi
	push	edi
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat2x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm0
	movups	XMMWORD PTR [eax-16], xmm0
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat2x3

; 123  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T2[ebp]
	push	6
	pop	ecx
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]

; 124  : 		this->value[1] = col_type(m[1]);

	push	6
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR $T2[ebp+16], xmm0
	rep movsd
	movups	xmm0, XMMWORD PTR [eax+32]
	pop	ecx
	lea	edi, DWORD PTR [ebx+24]
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	movsd	xmm0, QWORD PTR [eax+48]

; 125  : 	}

	mov	eax, ebx
	movsd	QWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x3@N$0A@@glm@@QAE@ABU?$tmat2x4@N$0A@@1@@Z ENDP ; glm::tmat2x3<double,0>::tmat2x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$0A@@glm@@QAE@ABU?$tmat4x4@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
_m$ = 8							; size = 4
??0?$tmat2x3@N$0A@@glm@@QAE@ABU?$tmat4x4@N$0A@@1@@Z PROC ; glm::tmat2x3<double,0>::tmat2x3<double,0>, COMDAT
; _this$ = ecx

; 115  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xor	edx, edx
	inc	edx
	xorps	xmm0, xmm0
	push	ebx
	mov	ebx, ecx
	push	esi
	push	edi
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat2x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm0
	movups	XMMWORD PTR [eax-16], xmm0
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat2x3

; 116  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T2[ebp]
	push	6
	pop	ecx
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]

; 117  : 		this->value[1] = col_type(m[1]);

	push	6
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR $T2[ebp+16], xmm0
	rep movsd
	movups	xmm0, XMMWORD PTR [eax+32]
	pop	ecx
	lea	edi, DWORD PTR [ebx+24]
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	movsd	xmm0, QWORD PTR [eax+48]

; 118  : 	}

	mov	eax, ebx
	movsd	QWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x3@N$0A@@glm@@QAE@ABU?$tmat4x4@N$0A@@1@@Z ENDP ; glm::tmat2x3<double,0>::tmat2x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$0A@@glm@@QAE@ABU?$tmat3x3@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
_m$ = 8							; size = 4
??0?$tmat2x3@N$0A@@glm@@QAE@ABU?$tmat3x3@N$0A@@1@@Z PROC ; glm::tmat2x3<double,0>::tmat2x3<double,0>, COMDAT
; _this$ = ecx

; 108  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xor	edx, edx
	inc	edx
	xorps	xmm0, xmm0
	push	ebx
	mov	ebx, ecx
	push	esi
	push	edi
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat2x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm0
	movups	XMMWORD PTR [eax-16], xmm0
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat2x3

; 109  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	lea	edi, DWORD PTR $T2[ebp]
	push	6
	pop	edx
	mov	esi, eax
	mov	ecx, edx
	rep movsd
	mov	edi, ebx
	lea	esi, DWORD PTR $T2[ebp]
	mov	ecx, edx
	rep movsd

; 110  : 		this->value[1] = col_type(m[1]);

	lea	esi, DWORD PTR [eax+24]
	mov	ecx, edx
	lea	edi, DWORD PTR $T1[ebp]

; 111  : 	}

	mov	eax, ebx
	rep movsd
	lea	edi, DWORD PTR [ebx+24]
	mov	ecx, edx
	lea	esi, DWORD PTR $T1[ebp]
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x3@N$0A@@glm@@QAE@ABU?$tmat3x3@N$0A@@1@@Z ENDP ; glm::tmat2x3<double,0>::tmat2x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$0A@@glm@@QAE@ABU?$tmat2x2@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
_m$ = 8							; size = 4
??0?$tmat2x3@N$0A@@glm@@QAE@ABU?$tmat2x2@N$0A@@1@@Z PROC ; glm::tmat2x3<double,0>::tmat2x3<double,0>, COMDAT
; _this$ = ecx

; 101  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xor	edx, edx
	inc	edx
	xorps	xmm1, xmm1
	push	ebx
	mov	ebx, ecx
	push	esi
	push	edi
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat2x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm1
	movups	XMMWORD PTR [eax-16], xmm1
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat2x3

; 102  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T2[ebp]
	push	6
	pop	ecx
	movsd	QWORD PTR $T2[ebp+16], xmm1
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]

; 103  : 		this->value[1] = col_type(m[1], 0);

	push	6
	movups	XMMWORD PTR $T2[ebp], xmm0
	rep movsd
	movups	xmm0, XMMWORD PTR [eax+16]
	pop	ecx
	lea	edi, DWORD PTR [ebx+24]
	movsd	QWORD PTR $T1[ebp+16], xmm1
	lea	esi, DWORD PTR $T1[ebp]

; 104  : 	}

	mov	eax, ebx
	movups	XMMWORD PTR $T1[ebp], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x3@N$0A@@glm@@QAE@ABU?$tmat2x2@N$0A@@1@@Z ENDP ; glm::tmat2x3<double,0>::tmat2x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$0A@@glm@@QAE@ABU?$tvec3@N$0A@@1@0@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
??0?$tmat2x3@N$0A@@glm@@QAE@ABU?$tvec3@N$0A@@1@0@Z PROC	; glm::tmat2x3<double,0>::tmat2x3<double,0>, COMDAT
; _this$ = ecx

; 60   : 	{

	push	ebp
	mov	ebp, esp
	mov	edx, ecx
	xorps	xmm0, xmm0
	xor	ecx, ecx
	inc	ecx
	lea	eax, DWORD PTR [edx+16]
$LL4@tmat2x3:
	dec	ecx
	movsd	QWORD PTR [eax], xmm0
	movups	XMMWORD PTR [eax-16], xmm0
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat2x3

; 61   : 		this->value[0] = v0;

	push	esi
	mov	esi, DWORD PTR _v0$[ebp]

; 62   : 		this->value[1] = v1;
; 63   : 	}

	mov	eax, edx
	push	edi
	push	6
	pop	ecx
	mov	edi, edx
	rep movsd
	mov	esi, DWORD PTR _v1$[ebp]
	lea	edi, DWORD PTR [edx+24]
	push	6
	pop	ecx
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	8
??0?$tmat2x3@N$0A@@glm@@QAE@ABU?$tvec3@N$0A@@1@0@Z ENDP	; glm::tmat2x3<double,0>::tmat2x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$0A@@glm@@QAE@NNNNNN@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
_x0$ = 8						; size = 8
_y0$ = 16						; size = 8
_z0$ = 24						; size = 8
_x1$ = 32						; size = 8
_y1$ = 40						; size = 8
_z1$ = 48						; size = 8
??0?$tmat2x3@N$0A@@glm@@QAE@NNNNNN@Z PROC		; glm::tmat2x3<double,0>::tmat2x3<double,0>, COMDAT
; _this$ = ecx

; 53   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xor	edx, edx
	inc	edx
	xorps	xmm0, xmm0
	push	ebx
	mov	ebx, ecx
	push	esi
	push	edi
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat2x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm0
	movups	XMMWORD PTR [eax-16], xmm0
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat2x3

; 54   : 		this->value[0] = col_type(x0, y0, z0);

	movsd	xmm0, QWORD PTR _x0$[ebp]
	lea	esi, DWORD PTR $T2[ebp]
	movsd	QWORD PTR $T2[ebp], xmm0
	mov	edi, ebx
	movsd	xmm0, QWORD PTR _y0$[ebp]

; 55   : 		this->value[1] = col_type(x1, y1, z1);
; 56   : 	}

	mov	eax, ebx
	movsd	QWORD PTR $T2[ebp+8], xmm0
	movsd	xmm0, QWORD PTR _z0$[ebp]
	push	6
	movsd	QWORD PTR $T2[ebp+16], xmm0
	movsd	xmm0, QWORD PTR _x1$[ebp]
	pop	ecx
	rep movsd
	movsd	QWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ebx+24]
	movsd	xmm0, QWORD PTR _y1$[ebp]
	lea	esi, DWORD PTR $T1[ebp]
	push	6
	movsd	QWORD PTR $T1[ebp+8], xmm0
	movsd	xmm0, QWORD PTR _z1$[ebp]
	pop	ecx
	movsd	QWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	48					; 00000030H
??0?$tmat2x3@N$0A@@glm@@QAE@NNNNNN@Z ENDP		; glm::tmat2x3<double,0>::tmat2x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$0A@@glm@@QAE@N@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
_scalar$ = 8						; size = 8
??0?$tmat2x3@N$0A@@glm@@QAE@N@Z PROC			; glm::tmat2x3<double,0>::tmat2x3<double,0>, COMDAT
; _this$ = ecx

; 42   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xor	edx, edx
	inc	edx
	xorps	xmm2, xmm2
	push	ebx
	mov	ebx, ecx
	push	esi
	push	edi
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat2x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm2
	movups	XMMWORD PTR [eax-16], xmm2
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat2x3

; 43   : 		this->value[0] = col_type(scalar, 0, 0);

	movsd	xmm1, QWORD PTR _scalar$[ebp]
	lea	esi, DWORD PTR $T2[ebp]
	push	6
	pop	ecx
	movsd	QWORD PTR $T2[ebp], xmm1
	xorps	xmm0, xmm0
	movupd	XMMWORD PTR $T2[ebp+8], xmm0
	mov	edi, ebx

; 44   : 		this->value[1] = col_type(0, scalar, 0);
; 45   : 	}

	mov	eax, ebx
	rep movsd
	push	6
	pop	ecx
	lea	edi, DWORD PTR [ebx+24]
	movsd	QWORD PTR $T1[ebp], xmm2
	lea	esi, DWORD PTR $T1[ebp]
	movsd	QWORD PTR $T1[ebp+8], xmm1
	movsd	QWORD PTR $T1[ebp+16], xmm2
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$tmat2x3@N$0A@@glm@@QAE@N@Z ENDP			; glm::tmat2x3<double,0>::tmat2x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat2x3@N$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat2x3<double,0>::tmat2x3<double,0>, COMDAT
; _this$ = ecx

; 38   : 	{}

	xor	edx, edx
	lea	eax, DWORD PTR [ecx+16]
	inc	edx
	xorps	xmm0, xmm0
$LL4@tmat2x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm0
	movups	XMMWORD PTR [eax-16], xmm0
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat2x3
	mov	eax, ecx
	ret	4
??0?$tmat2x3@N$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat2x3<double,0>::tmat2x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tmat2x3@N$0A@@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tmat2x3@N$0A@@glm@@QAE@ABU01@@Z PROC		; glm::tmat2x3<double,0>::tmat2x3<double,0>, COMDAT
; _this$ = ecx

; 164  : template struct tmat2x3<float64, highp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	12					; 0000000cH
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tmat2x3@N$0A@@glm@@QAE@ABU01@@Z ENDP		; glm::tmat2x3<double,0>::tmat2x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
??0?$tmat2x3@N$0A@@glm@@QAE@XZ PROC			; glm::tmat2x3<double,0>::tmat2x3<double,0>, COMDAT
; _this$ = ecx

; 11   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xor	edx, edx
	inc	edx
	xorps	xmm1, xmm1
	push	ebx
	mov	ebx, ecx
	push	esi
	push	edi
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat2x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm1
	movups	XMMWORD PTR [eax-16], xmm1
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat2x3

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0, 0);

	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	lea	esi, DWORD PTR $T2[ebp]
	push	6
	pop	ecx
	movupd	XMMWORD PTR $T2[ebp], xmm0
	mov	edi, ebx

; 14   : 				this->value[1] = col_type(0, 1, 0);
; 15   : #			endif
; 16   : 		}

	mov	eax, ebx
	movaps	xmm0, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	movsd	QWORD PTR $T2[ebp+16], xmm1
	rep movsd
	push	6
	pop	ecx
	lea	edi, DWORD PTR [ebx+24]
	movsd	QWORD PTR $T1[ebp+16], xmm1
	lea	esi, DWORD PTR $T1[ebp]
	movupd	XMMWORD PTR $T1[ebp], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$tmat2x3@N$0A@@glm@@QAE@XZ ENDP			; glm::tmat2x3<double,0>::tmat2x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??F?$tmat2x3@M$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat2x3@M$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tmat2x3<float,0>::operator--, COMDAT
; _this$ = ecx

; 274  : 	{

	push	ebp
	mov	ebp, esp

; 275  : 		tmat2x3<T, P> Result(*this);
; 276  : 		--*this;

	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	mov	edx, ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	movups	xmm0, XMMWORD PTR [edx]
	push	6
	pop	ecx
	subps	xmm0, xmm1
	mov	esi, edx
	mov	edi, eax
	rep movsd
	movups	XMMWORD PTR [edx], xmm0
	pop	edi
	movss	xmm0, DWORD PTR [edx+16]
	subss	xmm0, xmm1
	pop	esi
	movss	DWORD PTR [edx+16], xmm0
	movss	xmm0, DWORD PTR [edx+20]
	subss	xmm0, xmm1
	movss	DWORD PTR [edx+20], xmm0

; 277  : 		return Result;
; 278  : 	}

	pop	ebp
	ret	8
??F?$tmat2x3@M$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tmat2x3<float,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??E?$tmat2x3@M$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat2x3@M$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tmat2x3<float,0>::operator++, COMDAT
; _this$ = ecx

; 266  : 	{

	push	ebp
	mov	ebp, esp

; 267  : 		tmat2x3<T, P> Result(*this);
; 268  : 		++*this;

	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	mov	edx, ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	movups	xmm0, XMMWORD PTR [edx]
	push	6
	pop	ecx
	addps	xmm0, xmm1
	mov	esi, edx
	mov	edi, eax
	rep movsd
	movups	XMMWORD PTR [edx], xmm0
	pop	edi
	movss	xmm0, DWORD PTR [edx+16]
	addss	xmm0, xmm1
	pop	esi
	movss	DWORD PTR [edx+16], xmm0
	movss	xmm0, DWORD PTR [edx+20]
	addss	xmm0, xmm1
	movss	DWORD PTR [edx+20], xmm0

; 269  : 		return Result;
; 270  : 	}

	pop	ebp
	ret	8
??E?$tmat2x3@M$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tmat2x3<float,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??F?$tmat2x3@M$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat2x3@M$0A@@glm@@QAEAAU01@XZ PROC		; glm::tmat2x3<float,0>::operator--, COMDAT
; _this$ = ecx

; 259  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 260  : 		--this->value[1];
; 261  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	subss	xmm0, xmm1
	movss	DWORD PTR [ecx+16], xmm0
	movss	xmm0, DWORD PTR [ecx+20]
	subss	xmm0, xmm1
	movss	DWORD PTR [ecx+20], xmm0

; 262  : 	}

	ret	0
??F?$tmat2x3@M$0A@@glm@@QAEAAU01@XZ ENDP		; glm::tmat2x3<float,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??E?$tmat2x3@M$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat2x3@M$0A@@glm@@QAEAAU01@XZ PROC		; glm::tmat2x3<float,0>::operator++, COMDAT
; _this$ = ecx

; 251  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 252  : 		++this->value[1];
; 253  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	addss	xmm0, xmm1
	movss	DWORD PTR [ecx+16], xmm0
	movss	xmm0, DWORD PTR [ecx+20]
	addss	xmm0, xmm1
	movss	DWORD PTR [ecx+20], xmm0

; 254  : 	}

	ret	0
??E?$tmat2x3@M$0A@@glm@@QAEAAU01@XZ ENDP		; glm::tmat2x3<float,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tmat2x3@M$0A@@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tmat2x3@M$0A@@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tmat2x3<float,0>::operator=, COMDAT
; _this$ = ecx

; 163  : template struct tmat2x3<float32, highp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	6
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tmat2x3@M$0A@@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tmat2x3<float,0>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??A?$tmat2x3@M$0A@@glm@@QBEABU?$tvec3@M$0A@@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat2x3@M$0A@@glm@@QBEABU?$tvec3@M$0A@@1@H@Z PROC	; glm::tmat2x3<float,0>::operator[], COMDAT
; _this$ = ecx

; 166  : 	{

	push	ebp
	mov	ebp, esp

; 167  : 		assert(i < this->length());
; 168  : 		return this->value[i];

	imul	eax, DWORD PTR _i$[ebp], 12
	add	eax, ecx

; 169  : 	}

	pop	ebp
	ret	4
??A?$tmat2x3@M$0A@@glm@@QBEABU?$tvec3@M$0A@@1@H@Z ENDP	; glm::tmat2x3<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??A?$tmat2x3@M$0A@@glm@@QAEAAU?$tvec3@M$0A@@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat2x3@M$0A@@glm@@QAEAAU?$tvec3@M$0A@@1@H@Z PROC	; glm::tmat2x3<float,0>::operator[], COMDAT
; _this$ = ecx

; 159  : 	{

	push	ebp
	mov	ebp, esp

; 160  : 		assert(i < this->length());
; 161  : 		return this->value[i];

	imul	eax, DWORD PTR _i$[ebp], 12
	add	eax, ecx

; 162  : 	}

	pop	ebp
	ret	4
??A?$tmat2x3@M$0A@@glm@@QAEAAU?$tvec3@M$0A@@1@H@Z ENDP	; glm::tmat2x3<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.hpp
;	COMDAT ?length@?$tmat2x3@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat2x3@M$0A@@glm@@SAHXZ PROC			; glm::tmat2x3<float,0>::length, COMDAT

; 73   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	push	2
	pop	eax
	ret	0
?length@?$tmat2x3@M$0A@@glm@@SAHXZ ENDP			; glm::tmat2x3<float,0>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$0A@@glm@@QAE@ABU?$tmat4x3@M$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x3@M$0A@@glm@@QAE@ABU?$tmat4x3@M$0A@@1@@Z PROC ; glm::tmat2x3<float,0>::tmat2x3<float,0>, COMDAT
; _this$ = ecx

; 150  : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	lea	eax, DWORD PTR [ecx+8]
	inc	edx
$LL4@tmat2x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat2x3

; 151  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	esi, eax
	mov	edi, ecx
	movsd
	movsd
	movsd

; 152  : 		this->value[1] = m[1];

	lea	esi, DWORD PTR [eax+12]

; 153  : 	}

	mov	eax, ecx
	lea	edi, DWORD PTR [ecx+12]
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tmat2x3@M$0A@@glm@@QAE@ABU?$tmat4x3@M$0A@@1@@Z ENDP ; glm::tmat2x3<float,0>::tmat2x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$0A@@glm@@QAE@ABU?$tmat4x2@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat2x3@M$0A@@glm@@QAE@ABU?$tmat4x2@M$0A@@1@@Z PROC ; glm::tmat2x3<float,0>::tmat2x3<float,0>, COMDAT
; _this$ = ecx

; 143  : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	lea	eax, DWORD PTR [ecx+8]
	sub	esp, 12					; 0000000cH
	inc	edx
$LL4@tmat2x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat2x3

; 144  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	and	DWORD PTR $T2[ebp+8], 0
	push	esi
	push	edi
	movss	xmm0, DWORD PTR [eax]
	lea	esi, DWORD PTR $T2[ebp]
	movss	DWORD PTR $T2[ebp], xmm0
	mov	edi, ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movsd
	movsd
	movsd

; 145  : 		this->value[1] = col_type(m[1], 0);

	movss	xmm0, DWORD PTR [eax+8]
	lea	edi, DWORD PTR [ecx+12]
	and	DWORD PTR $T1[ebp+8], 0
	lea	esi, DWORD PTR $T1[ebp]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+12]

; 146  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+4], xmm0
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x3@M$0A@@glm@@QAE@ABU?$tmat4x2@M$0A@@1@@Z ENDP ; glm::tmat2x3<float,0>::tmat2x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$0A@@glm@@QAE@ABU?$tmat3x4@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat2x3@M$0A@@glm@@QAE@ABU?$tmat3x4@M$0A@@1@@Z PROC ; glm::tmat2x3<float,0>::tmat2x3<float,0>, COMDAT
; _this$ = ecx

; 136  : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	lea	eax, DWORD PTR [ecx+8]
	sub	esp, 12					; 0000000cH
	inc	edx
$LL4@tmat2x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat2x3

; 137  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T2[ebp]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T2[ebp+8], xmm0
	movsd
	movsd
	movsd

; 138  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [eax+16]
	lea	edi, DWORD PTR [ecx+12]
	movss	DWORD PTR $T1[ebp], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+24]

; 139  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+8], xmm0
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x3@M$0A@@glm@@QAE@ABU?$tmat3x4@M$0A@@1@@Z ENDP ; glm::tmat2x3<float,0>::tmat2x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$0A@@glm@@QAE@ABU?$tmat3x2@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat2x3@M$0A@@glm@@QAE@ABU?$tmat3x2@M$0A@@1@@Z PROC ; glm::tmat2x3<float,0>::tmat2x3<float,0>, COMDAT
; _this$ = ecx

; 129  : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	lea	eax, DWORD PTR [ecx+8]
	sub	esp, 12					; 0000000cH
	inc	edx
$LL4@tmat2x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat2x3

; 130  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	and	DWORD PTR $T2[ebp+8], 0
	push	esi
	push	edi
	movss	xmm0, DWORD PTR [eax]
	lea	esi, DWORD PTR $T2[ebp]
	movss	DWORD PTR $T2[ebp], xmm0
	mov	edi, ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movsd
	movsd
	movsd

; 131  : 		this->value[1] = col_type(m[1], 0);

	movss	xmm0, DWORD PTR [eax+8]
	lea	edi, DWORD PTR [ecx+12]
	and	DWORD PTR $T1[ebp+8], 0
	lea	esi, DWORD PTR $T1[ebp]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+12]

; 132  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+4], xmm0
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x3@M$0A@@glm@@QAE@ABU?$tmat3x2@M$0A@@1@@Z ENDP ; glm::tmat2x3<float,0>::tmat2x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$0A@@glm@@QAE@ABU?$tmat2x4@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat2x3@M$0A@@glm@@QAE@ABU?$tmat2x4@M$0A@@1@@Z PROC ; glm::tmat2x3<float,0>::tmat2x3<float,0>, COMDAT
; _this$ = ecx

; 122  : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	lea	eax, DWORD PTR [ecx+8]
	sub	esp, 12					; 0000000cH
	inc	edx
$LL4@tmat2x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat2x3

; 123  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T2[ebp]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T2[ebp+8], xmm0
	movsd
	movsd
	movsd

; 124  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [eax+16]
	lea	edi, DWORD PTR [ecx+12]
	movss	DWORD PTR $T1[ebp], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+24]

; 125  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+8], xmm0
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x3@M$0A@@glm@@QAE@ABU?$tmat2x4@M$0A@@1@@Z ENDP ; glm::tmat2x3<float,0>::tmat2x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$0A@@glm@@QAE@ABU?$tmat4x4@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat2x3@M$0A@@glm@@QAE@ABU?$tmat4x4@M$0A@@1@@Z PROC ; glm::tmat2x3<float,0>::tmat2x3<float,0>, COMDAT
; _this$ = ecx

; 115  : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	lea	eax, DWORD PTR [ecx+8]
	sub	esp, 12					; 0000000cH
	inc	edx
$LL4@tmat2x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat2x3

; 116  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T2[ebp]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T2[ebp+8], xmm0
	movsd
	movsd
	movsd

; 117  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [eax+16]
	lea	edi, DWORD PTR [ecx+12]
	movss	DWORD PTR $T1[ebp], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+24]

; 118  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+8], xmm0
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x3@M$0A@@glm@@QAE@ABU?$tmat4x4@M$0A@@1@@Z ENDP ; glm::tmat2x3<float,0>::tmat2x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$0A@@glm@@QAE@ABU?$tmat3x3@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat2x3@M$0A@@glm@@QAE@ABU?$tmat3x3@M$0A@@1@@Z PROC ; glm::tmat2x3<float,0>::tmat2x3<float,0>, COMDAT
; _this$ = ecx

; 108  : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	lea	eax, DWORD PTR [ecx+8]
	sub	esp, 12					; 0000000cH
	inc	edx
$LL4@tmat2x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat2x3

; 109  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	esi, eax
	lea	edi, DWORD PTR $T2[ebp]
	movsd
	movsd
	movsd
	mov	edi, ecx
	lea	esi, DWORD PTR $T2[ebp]
	movsd
	movsd
	movsd

; 110  : 		this->value[1] = col_type(m[1]);

	lea	esi, DWORD PTR [eax+12]

; 111  : 	}

	mov	eax, ecx
	lea	edi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	lea	edi, DWORD PTR [ecx+12]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x3@M$0A@@glm@@QAE@ABU?$tmat3x3@M$0A@@1@@Z ENDP ; glm::tmat2x3<float,0>::tmat2x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$0A@@glm@@QAE@ABU?$tmat2x2@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat2x3@M$0A@@glm@@QAE@ABU?$tmat2x2@M$0A@@1@@Z PROC ; glm::tmat2x3<float,0>::tmat2x3<float,0>, COMDAT
; _this$ = ecx

; 101  : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	lea	eax, DWORD PTR [ecx+8]
	sub	esp, 12					; 0000000cH
	inc	edx
$LL4@tmat2x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat2x3

; 102  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	and	DWORD PTR $T2[ebp+8], 0
	push	esi
	push	edi
	movss	xmm0, DWORD PTR [eax]
	lea	esi, DWORD PTR $T2[ebp]
	movss	DWORD PTR $T2[ebp], xmm0
	mov	edi, ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movsd
	movsd
	movsd

; 103  : 		this->value[1] = col_type(m[1], 0);

	movss	xmm0, DWORD PTR [eax+8]
	lea	edi, DWORD PTR [ecx+12]
	and	DWORD PTR $T1[ebp+8], 0
	lea	esi, DWORD PTR $T1[ebp]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+12]

; 104  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+4], xmm0
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x3@M$0A@@glm@@QAE@ABU?$tmat2x2@M$0A@@1@@Z ENDP ; glm::tmat2x3<float,0>::tmat2x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$0A@@glm@@QAE@ABU?$tvec3@M$0A@@1@0@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
??0?$tmat2x3@M$0A@@glm@@QAE@ABU?$tvec3@M$0A@@1@0@Z PROC	; glm::tmat2x3<float,0>::tmat2x3<float,0>, COMDAT
; _this$ = ecx

; 60   : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	lea	eax, DWORD PTR [ecx+8]
	inc	edx
$LL4@tmat2x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat2x3

; 61   : 		this->value[0] = v0;

	push	esi
	mov	esi, DWORD PTR _v0$[ebp]

; 62   : 		this->value[1] = v1;
; 63   : 	}

	mov	eax, ecx
	push	edi
	mov	edi, ecx
	movsd
	movsd
	movsd
	mov	esi, DWORD PTR _v1$[ebp]
	lea	edi, DWORD PTR [ecx+12]
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	8
??0?$tmat2x3@M$0A@@glm@@QAE@ABU?$tvec3@M$0A@@1@0@Z ENDP	; glm::tmat2x3<float,0>::tmat2x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$0A@@glm@@QAE@MMMMMM@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_z0$ = 16						; size = 4
_x1$ = 20						; size = 4
_y1$ = 24						; size = 4
_z1$ = 28						; size = 4
??0?$tmat2x3@M$0A@@glm@@QAE@MMMMMM@Z PROC		; glm::tmat2x3<float,0>::tmat2x3<float,0>, COMDAT
; _this$ = ecx

; 53   : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	lea	eax, DWORD PTR [ecx+8]
	sub	esp, 12					; 0000000cH
	inc	edx
$LL4@tmat2x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat2x3

; 54   : 		this->value[0] = col_type(x0, y0, z0);

	movss	xmm0, DWORD PTR _x0$[ebp]

; 55   : 		this->value[1] = col_type(x1, y1, z1);
; 56   : 	}

	mov	eax, ecx
	push	esi
	movss	DWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	movss	xmm0, DWORD PTR _y0$[ebp]
	push	edi
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	edi, ecx
	movss	xmm0, DWORD PTR _z0$[ebp]
	movss	DWORD PTR $T2[ebp+8], xmm0
	movss	xmm0, DWORD PTR _x1$[ebp]
	movsd
	movsd
	movsd
	movss	DWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+12]
	movss	xmm0, DWORD PTR _y1$[ebp]
	lea	esi, DWORD PTR $T1[ebp]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR _z1$[ebp]
	movss	DWORD PTR $T1[ebp+8], xmm0
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
??0?$tmat2x3@M$0A@@glm@@QAE@MMMMMM@Z ENDP		; glm::tmat2x3<float,0>::tmat2x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$0A@@glm@@QAE@M@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
_scalar$ = 8						; size = 4
??0?$tmat2x3@M$0A@@glm@@QAE@M@Z PROC			; glm::tmat2x3<float,0>::tmat2x3<float,0>, COMDAT
; _this$ = ecx

; 42   : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	lea	eax, DWORD PTR [ecx+8]
	sub	esp, 12					; 0000000cH
	inc	edx
$LL4@tmat2x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat2x3

; 43   : 		this->value[0] = col_type(scalar, 0, 0);

	and	DWORD PTR $T2[ebp+4], 0

; 44   : 		this->value[1] = col_type(0, scalar, 0);
; 45   : 	}

	mov	eax, ecx
	and	DWORD PTR $T2[ebp+8], 0
	movss	xmm0, DWORD PTR _scalar$[ebp]
	push	esi
	push	edi
	movss	DWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	mov	edi, ecx
	movsd
	movsd
	movsd
	and	DWORD PTR $T1[ebp], 0
	lea	edi, DWORD PTR [ecx+12]
	and	DWORD PTR $T1[ebp+8], 0
	lea	esi, DWORD PTR $T1[ebp]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x3@M$0A@@glm@@QAE@M@Z ENDP			; glm::tmat2x3<float,0>::tmat2x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat2x3@M$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat2x3<float,0>::tmat2x3<float,0>, COMDAT
; _this$ = ecx

; 38   : 	{}

	xor	edx, edx
	lea	eax, DWORD PTR [ecx+8]
	inc	edx
$LL4@tmat2x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat2x3
	mov	eax, ecx
	ret	4
??0?$tmat2x3@M$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat2x3<float,0>::tmat2x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tmat2x3@M$0A@@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tmat2x3@M$0A@@glm@@QAE@ABU01@@Z PROC		; glm::tmat2x3<float,0>::tmat2x3<float,0>, COMDAT
; _this$ = ecx

; 163  : template struct tmat2x3<float32, highp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	6
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tmat2x3@M$0A@@glm@@QAE@ABU01@@Z ENDP		; glm::tmat2x3<float,0>::tmat2x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
??0?$tmat2x3@M$0A@@glm@@QAE@XZ PROC			; glm::tmat2x3<float,0>::tmat2x3<float,0>, COMDAT
; _this$ = ecx

; 11   : 		{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	lea	eax, DWORD PTR [ecx+8]
	sub	esp, 12					; 0000000cH
	inc	edx
$LL4@tmat2x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat2x3

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0, 0);

	and	DWORD PTR $T2[ebp+4], 0

; 14   : 				this->value[1] = col_type(0, 1, 0);
; 15   : #			endif
; 16   : 		}

	mov	eax, ecx
	and	DWORD PTR $T2[ebp+8], 0
	push	esi
	push	edi
	mov	DWORD PTR $T2[ebp], 1065353216		; 3f800000H
	lea	esi, DWORD PTR $T2[ebp]
	mov	edi, ecx
	movsd
	movsd
	movsd
	and	DWORD PTR $T1[ebp], 0
	lea	edi, DWORD PTR [ecx+12]
	and	DWORD PTR $T1[ebp+8], 0
	lea	esi, DWORD PTR $T1[ebp]
	mov	DWORD PTR $T1[ebp+4], 1065353216	; 3f800000H
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$tmat2x3@M$0A@@glm@@QAE@XZ ENDP			; glm::tmat2x3<float,0>::tmat2x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??F?$tmat2x3@N$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat2x3@N$00@glm@@QAE?AU01@H@Z PROC		; glm::tmat2x3<double,1>::operator--, COMDAT
; _this$ = ecx

; 274  : 	{

	push	ebp
	mov	ebp, esp

; 275  : 		tmat2x3<T, P> Result(*this);
; 276  : 		--*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	mov	edx, ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	movups	xmm0, XMMWORD PTR [edx]
	push	12					; 0000000cH
	pop	ecx
	subpd	xmm0, xmm1
	mov	esi, edx
	mov	edi, eax
	rep movsd
	movups	XMMWORD PTR [edx], xmm0
	pop	edi
	movups	xmm0, XMMWORD PTR [edx+16]
	pop	esi
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+16], xmm0
	movups	xmm0, XMMWORD PTR [edx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+32], xmm0

; 277  : 		return Result;
; 278  : 	}

	pop	ebp
	ret	8
??F?$tmat2x3@N$00@glm@@QAE?AU01@H@Z ENDP		; glm::tmat2x3<double,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??E?$tmat2x3@N$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat2x3@N$00@glm@@QAE?AU01@H@Z PROC		; glm::tmat2x3<double,1>::operator++, COMDAT
; _this$ = ecx

; 266  : 	{

	push	ebp
	mov	ebp, esp

; 267  : 		tmat2x3<T, P> Result(*this);
; 268  : 		++*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	mov	edx, ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	movups	xmm0, XMMWORD PTR [edx]
	push	12					; 0000000cH
	pop	ecx
	addpd	xmm0, xmm1
	mov	esi, edx
	mov	edi, eax
	rep movsd
	movups	XMMWORD PTR [edx], xmm0
	pop	edi
	movups	xmm0, XMMWORD PTR [edx+16]
	pop	esi
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+16], xmm0
	movups	xmm0, XMMWORD PTR [edx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+32], xmm0

; 269  : 		return Result;
; 270  : 	}

	pop	ebp
	ret	8
??E?$tmat2x3@N$00@glm@@QAE?AU01@H@Z ENDP		; glm::tmat2x3<double,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??F?$tmat2x3@N$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat2x3@N$00@glm@@QAEAAU01@XZ PROC			; glm::tmat2x3<double,1>::operator--, COMDAT
; _this$ = ecx

; 259  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 260  : 		--this->value[1];
; 261  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0

; 262  : 	}

	ret	0
??F?$tmat2x3@N$00@glm@@QAEAAU01@XZ ENDP			; glm::tmat2x3<double,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??E?$tmat2x3@N$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat2x3@N$00@glm@@QAEAAU01@XZ PROC			; glm::tmat2x3<double,1>::operator++, COMDAT
; _this$ = ecx

; 251  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 252  : 		++this->value[1];
; 253  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0

; 254  : 	}

	ret	0
??E?$tmat2x3@N$00@glm@@QAEAAU01@XZ ENDP			; glm::tmat2x3<double,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tmat2x3@N$00@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tmat2x3@N$00@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tmat2x3<double,1>::operator=, COMDAT
; _this$ = ecx

; 161  : template struct tmat2x3<float64, mediump>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	12					; 0000000cH
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tmat2x3@N$00@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tmat2x3<double,1>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??A?$tmat2x3@N$00@glm@@QBEABU?$tvec3@N$00@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat2x3@N$00@glm@@QBEABU?$tvec3@N$00@1@H@Z PROC	; glm::tmat2x3<double,1>::operator[], COMDAT
; _this$ = ecx

; 166  : 	{

	push	ebp
	mov	ebp, esp

; 167  : 		assert(i < this->length());
; 168  : 		return this->value[i];

	imul	eax, DWORD PTR _i$[ebp], 24
	add	eax, ecx

; 169  : 	}

	pop	ebp
	ret	4
??A?$tmat2x3@N$00@glm@@QBEABU?$tvec3@N$00@1@H@Z ENDP	; glm::tmat2x3<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??A?$tmat2x3@N$00@glm@@QAEAAU?$tvec3@N$00@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat2x3@N$00@glm@@QAEAAU?$tvec3@N$00@1@H@Z PROC	; glm::tmat2x3<double,1>::operator[], COMDAT
; _this$ = ecx

; 159  : 	{

	push	ebp
	mov	ebp, esp

; 160  : 		assert(i < this->length());
; 161  : 		return this->value[i];

	imul	eax, DWORD PTR _i$[ebp], 24
	add	eax, ecx

; 162  : 	}

	pop	ebp
	ret	4
??A?$tmat2x3@N$00@glm@@QAEAAU?$tvec3@N$00@1@H@Z ENDP	; glm::tmat2x3<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.hpp
;	COMDAT ?length@?$tmat2x3@N$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat2x3@N$00@glm@@SAHXZ PROC			; glm::tmat2x3<double,1>::length, COMDAT

; 73   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	push	2
	pop	eax
	ret	0
?length@?$tmat2x3@N$00@glm@@SAHXZ ENDP			; glm::tmat2x3<double,1>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$00@glm@@QAE@ABU?$tmat4x3@N$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x3@N$00@glm@@QAE@ABU?$tmat4x3@N$00@1@@Z PROC	; glm::tmat2x3<double,1>::tmat2x3<double,1>, COMDAT
; _this$ = ecx

; 150  : 	{

	push	ebp
	mov	ebp, esp
	mov	edx, ecx
	xorps	xmm0, xmm0
	xor	ecx, ecx
	inc	ecx
	lea	eax, DWORD PTR [edx+16]
$LL4@tmat2x3:
	dec	ecx
	movsd	QWORD PTR [eax], xmm0
	movups	XMMWORD PTR [eax-16], xmm0
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat2x3

; 151  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	push	6
	pop	ecx
	mov	esi, eax
	mov	edi, edx
	rep movsd

; 152  : 		this->value[1] = m[1];

	push	6
	pop	ecx
	lea	esi, DWORD PTR [eax+24]

; 153  : 	}

	mov	eax, edx
	lea	edi, DWORD PTR [edx+24]
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tmat2x3@N$00@glm@@QAE@ABU?$tmat4x3@N$00@1@@Z ENDP	; glm::tmat2x3<double,1>::tmat2x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$00@glm@@QAE@ABU?$tmat4x2@N$00@1@@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
_m$ = 8							; size = 4
??0?$tmat2x3@N$00@glm@@QAE@ABU?$tmat4x2@N$00@1@@Z PROC	; glm::tmat2x3<double,1>::tmat2x3<double,1>, COMDAT
; _this$ = ecx

; 143  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xor	edx, edx
	inc	edx
	xorps	xmm1, xmm1
	push	ebx
	mov	ebx, ecx
	push	esi
	push	edi
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat2x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm1
	movups	XMMWORD PTR [eax-16], xmm1
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat2x3

; 144  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T2[ebp]
	push	6
	pop	ecx
	movsd	QWORD PTR $T2[ebp+16], xmm1
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]

; 145  : 		this->value[1] = col_type(m[1], 0);

	push	6
	movups	XMMWORD PTR $T2[ebp], xmm0
	rep movsd
	movups	xmm0, XMMWORD PTR [eax+16]
	pop	ecx
	lea	edi, DWORD PTR [ebx+24]
	movsd	QWORD PTR $T1[ebp+16], xmm1
	lea	esi, DWORD PTR $T1[ebp]

; 146  : 	}

	mov	eax, ebx
	movups	XMMWORD PTR $T1[ebp], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x3@N$00@glm@@QAE@ABU?$tmat4x2@N$00@1@@Z ENDP	; glm::tmat2x3<double,1>::tmat2x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$00@glm@@QAE@ABU?$tmat3x4@N$00@1@@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
_m$ = 8							; size = 4
??0?$tmat2x3@N$00@glm@@QAE@ABU?$tmat3x4@N$00@1@@Z PROC	; glm::tmat2x3<double,1>::tmat2x3<double,1>, COMDAT
; _this$ = ecx

; 136  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xor	edx, edx
	inc	edx
	xorps	xmm0, xmm0
	push	ebx
	mov	ebx, ecx
	push	esi
	push	edi
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat2x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm0
	movups	XMMWORD PTR [eax-16], xmm0
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat2x3

; 137  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T2[ebp]
	push	6
	pop	ecx
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]

; 138  : 		this->value[1] = col_type(m[1]);

	push	6
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR $T2[ebp+16], xmm0
	rep movsd
	movups	xmm0, XMMWORD PTR [eax+32]
	pop	ecx
	lea	edi, DWORD PTR [ebx+24]
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	movsd	xmm0, QWORD PTR [eax+48]

; 139  : 	}

	mov	eax, ebx
	movsd	QWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x3@N$00@glm@@QAE@ABU?$tmat3x4@N$00@1@@Z ENDP	; glm::tmat2x3<double,1>::tmat2x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$00@glm@@QAE@ABU?$tmat3x2@N$00@1@@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
_m$ = 8							; size = 4
??0?$tmat2x3@N$00@glm@@QAE@ABU?$tmat3x2@N$00@1@@Z PROC	; glm::tmat2x3<double,1>::tmat2x3<double,1>, COMDAT
; _this$ = ecx

; 129  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xor	edx, edx
	inc	edx
	xorps	xmm1, xmm1
	push	ebx
	mov	ebx, ecx
	push	esi
	push	edi
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat2x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm1
	movups	XMMWORD PTR [eax-16], xmm1
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat2x3

; 130  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T2[ebp]
	push	6
	pop	ecx
	movsd	QWORD PTR $T2[ebp+16], xmm1
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]

; 131  : 		this->value[1] = col_type(m[1], 0);

	push	6
	movups	XMMWORD PTR $T2[ebp], xmm0
	rep movsd
	movups	xmm0, XMMWORD PTR [eax+16]
	pop	ecx
	lea	edi, DWORD PTR [ebx+24]
	movsd	QWORD PTR $T1[ebp+16], xmm1
	lea	esi, DWORD PTR $T1[ebp]

; 132  : 	}

	mov	eax, ebx
	movups	XMMWORD PTR $T1[ebp], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x3@N$00@glm@@QAE@ABU?$tmat3x2@N$00@1@@Z ENDP	; glm::tmat2x3<double,1>::tmat2x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$00@glm@@QAE@ABU?$tmat2x4@N$00@1@@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
_m$ = 8							; size = 4
??0?$tmat2x3@N$00@glm@@QAE@ABU?$tmat2x4@N$00@1@@Z PROC	; glm::tmat2x3<double,1>::tmat2x3<double,1>, COMDAT
; _this$ = ecx

; 122  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xor	edx, edx
	inc	edx
	xorps	xmm0, xmm0
	push	ebx
	mov	ebx, ecx
	push	esi
	push	edi
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat2x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm0
	movups	XMMWORD PTR [eax-16], xmm0
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat2x3

; 123  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T2[ebp]
	push	6
	pop	ecx
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]

; 124  : 		this->value[1] = col_type(m[1]);

	push	6
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR $T2[ebp+16], xmm0
	rep movsd
	movups	xmm0, XMMWORD PTR [eax+32]
	pop	ecx
	lea	edi, DWORD PTR [ebx+24]
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	movsd	xmm0, QWORD PTR [eax+48]

; 125  : 	}

	mov	eax, ebx
	movsd	QWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x3@N$00@glm@@QAE@ABU?$tmat2x4@N$00@1@@Z ENDP	; glm::tmat2x3<double,1>::tmat2x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$00@glm@@QAE@ABU?$tmat4x4@N$00@1@@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
_m$ = 8							; size = 4
??0?$tmat2x3@N$00@glm@@QAE@ABU?$tmat4x4@N$00@1@@Z PROC	; glm::tmat2x3<double,1>::tmat2x3<double,1>, COMDAT
; _this$ = ecx

; 115  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xor	edx, edx
	inc	edx
	xorps	xmm0, xmm0
	push	ebx
	mov	ebx, ecx
	push	esi
	push	edi
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat2x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm0
	movups	XMMWORD PTR [eax-16], xmm0
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat2x3

; 116  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T2[ebp]
	push	6
	pop	ecx
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]

; 117  : 		this->value[1] = col_type(m[1]);

	push	6
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR $T2[ebp+16], xmm0
	rep movsd
	movups	xmm0, XMMWORD PTR [eax+32]
	pop	ecx
	lea	edi, DWORD PTR [ebx+24]
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	movsd	xmm0, QWORD PTR [eax+48]

; 118  : 	}

	mov	eax, ebx
	movsd	QWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x3@N$00@glm@@QAE@ABU?$tmat4x4@N$00@1@@Z ENDP	; glm::tmat2x3<double,1>::tmat2x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$00@glm@@QAE@ABU?$tmat3x3@N$00@1@@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
_m$ = 8							; size = 4
??0?$tmat2x3@N$00@glm@@QAE@ABU?$tmat3x3@N$00@1@@Z PROC	; glm::tmat2x3<double,1>::tmat2x3<double,1>, COMDAT
; _this$ = ecx

; 108  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xor	edx, edx
	inc	edx
	xorps	xmm0, xmm0
	push	ebx
	mov	ebx, ecx
	push	esi
	push	edi
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat2x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm0
	movups	XMMWORD PTR [eax-16], xmm0
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat2x3

; 109  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	lea	edi, DWORD PTR $T2[ebp]
	push	6
	pop	edx
	mov	esi, eax
	mov	ecx, edx
	rep movsd
	mov	edi, ebx
	lea	esi, DWORD PTR $T2[ebp]
	mov	ecx, edx
	rep movsd

; 110  : 		this->value[1] = col_type(m[1]);

	lea	esi, DWORD PTR [eax+24]
	mov	ecx, edx
	lea	edi, DWORD PTR $T1[ebp]

; 111  : 	}

	mov	eax, ebx
	rep movsd
	lea	edi, DWORD PTR [ebx+24]
	mov	ecx, edx
	lea	esi, DWORD PTR $T1[ebp]
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x3@N$00@glm@@QAE@ABU?$tmat3x3@N$00@1@@Z ENDP	; glm::tmat2x3<double,1>::tmat2x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$00@glm@@QAE@ABU?$tmat2x2@N$00@1@@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
_m$ = 8							; size = 4
??0?$tmat2x3@N$00@glm@@QAE@ABU?$tmat2x2@N$00@1@@Z PROC	; glm::tmat2x3<double,1>::tmat2x3<double,1>, COMDAT
; _this$ = ecx

; 101  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xor	edx, edx
	inc	edx
	xorps	xmm1, xmm1
	push	ebx
	mov	ebx, ecx
	push	esi
	push	edi
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat2x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm1
	movups	XMMWORD PTR [eax-16], xmm1
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat2x3

; 102  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T2[ebp]
	push	6
	pop	ecx
	movsd	QWORD PTR $T2[ebp+16], xmm1
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]

; 103  : 		this->value[1] = col_type(m[1], 0);

	push	6
	movups	XMMWORD PTR $T2[ebp], xmm0
	rep movsd
	movups	xmm0, XMMWORD PTR [eax+16]
	pop	ecx
	lea	edi, DWORD PTR [ebx+24]
	movsd	QWORD PTR $T1[ebp+16], xmm1
	lea	esi, DWORD PTR $T1[ebp]

; 104  : 	}

	mov	eax, ebx
	movups	XMMWORD PTR $T1[ebp], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x3@N$00@glm@@QAE@ABU?$tmat2x2@N$00@1@@Z ENDP	; glm::tmat2x3<double,1>::tmat2x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$00@glm@@QAE@ABU?$tvec3@N$00@1@0@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
??0?$tmat2x3@N$00@glm@@QAE@ABU?$tvec3@N$00@1@0@Z PROC	; glm::tmat2x3<double,1>::tmat2x3<double,1>, COMDAT
; _this$ = ecx

; 60   : 	{

	push	ebp
	mov	ebp, esp
	mov	edx, ecx
	xorps	xmm0, xmm0
	xor	ecx, ecx
	inc	ecx
	lea	eax, DWORD PTR [edx+16]
$LL4@tmat2x3:
	dec	ecx
	movsd	QWORD PTR [eax], xmm0
	movups	XMMWORD PTR [eax-16], xmm0
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat2x3

; 61   : 		this->value[0] = v0;

	push	esi
	mov	esi, DWORD PTR _v0$[ebp]

; 62   : 		this->value[1] = v1;
; 63   : 	}

	mov	eax, edx
	push	edi
	push	6
	pop	ecx
	mov	edi, edx
	rep movsd
	mov	esi, DWORD PTR _v1$[ebp]
	lea	edi, DWORD PTR [edx+24]
	push	6
	pop	ecx
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	8
??0?$tmat2x3@N$00@glm@@QAE@ABU?$tvec3@N$00@1@0@Z ENDP	; glm::tmat2x3<double,1>::tmat2x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$00@glm@@QAE@NNNNNN@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
_x0$ = 8						; size = 8
_y0$ = 16						; size = 8
_z0$ = 24						; size = 8
_x1$ = 32						; size = 8
_y1$ = 40						; size = 8
_z1$ = 48						; size = 8
??0?$tmat2x3@N$00@glm@@QAE@NNNNNN@Z PROC		; glm::tmat2x3<double,1>::tmat2x3<double,1>, COMDAT
; _this$ = ecx

; 53   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xor	edx, edx
	inc	edx
	xorps	xmm0, xmm0
	push	ebx
	mov	ebx, ecx
	push	esi
	push	edi
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat2x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm0
	movups	XMMWORD PTR [eax-16], xmm0
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat2x3

; 54   : 		this->value[0] = col_type(x0, y0, z0);

	movsd	xmm0, QWORD PTR _x0$[ebp]
	lea	esi, DWORD PTR $T2[ebp]
	movsd	QWORD PTR $T2[ebp], xmm0
	mov	edi, ebx
	movsd	xmm0, QWORD PTR _y0$[ebp]

; 55   : 		this->value[1] = col_type(x1, y1, z1);
; 56   : 	}

	mov	eax, ebx
	movsd	QWORD PTR $T2[ebp+8], xmm0
	movsd	xmm0, QWORD PTR _z0$[ebp]
	push	6
	movsd	QWORD PTR $T2[ebp+16], xmm0
	movsd	xmm0, QWORD PTR _x1$[ebp]
	pop	ecx
	rep movsd
	movsd	QWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ebx+24]
	movsd	xmm0, QWORD PTR _y1$[ebp]
	lea	esi, DWORD PTR $T1[ebp]
	push	6
	movsd	QWORD PTR $T1[ebp+8], xmm0
	movsd	xmm0, QWORD PTR _z1$[ebp]
	pop	ecx
	movsd	QWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	48					; 00000030H
??0?$tmat2x3@N$00@glm@@QAE@NNNNNN@Z ENDP		; glm::tmat2x3<double,1>::tmat2x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$00@glm@@QAE@N@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
_scalar$ = 8						; size = 8
??0?$tmat2x3@N$00@glm@@QAE@N@Z PROC			; glm::tmat2x3<double,1>::tmat2x3<double,1>, COMDAT
; _this$ = ecx

; 42   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xor	edx, edx
	inc	edx
	xorps	xmm2, xmm2
	push	ebx
	mov	ebx, ecx
	push	esi
	push	edi
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat2x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm2
	movups	XMMWORD PTR [eax-16], xmm2
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat2x3

; 43   : 		this->value[0] = col_type(scalar, 0, 0);

	movsd	xmm1, QWORD PTR _scalar$[ebp]
	lea	esi, DWORD PTR $T2[ebp]
	push	6
	pop	ecx
	movsd	QWORD PTR $T2[ebp], xmm1
	xorps	xmm0, xmm0
	movupd	XMMWORD PTR $T2[ebp+8], xmm0
	mov	edi, ebx

; 44   : 		this->value[1] = col_type(0, scalar, 0);
; 45   : 	}

	mov	eax, ebx
	rep movsd
	push	6
	pop	ecx
	lea	edi, DWORD PTR [ebx+24]
	movsd	QWORD PTR $T1[ebp], xmm2
	lea	esi, DWORD PTR $T1[ebp]
	movsd	QWORD PTR $T1[ebp+8], xmm1
	movsd	QWORD PTR $T1[ebp+16], xmm2
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$tmat2x3@N$00@glm@@QAE@N@Z ENDP			; glm::tmat2x3<double,1>::tmat2x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat2x3@N$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat2x3<double,1>::tmat2x3<double,1>, COMDAT
; _this$ = ecx

; 38   : 	{}

	xor	edx, edx
	lea	eax, DWORD PTR [ecx+16]
	inc	edx
	xorps	xmm0, xmm0
$LL4@tmat2x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm0
	movups	XMMWORD PTR [eax-16], xmm0
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat2x3
	mov	eax, ecx
	ret	4
??0?$tmat2x3@N$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat2x3<double,1>::tmat2x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tmat2x3@N$00@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tmat2x3@N$00@glm@@QAE@ABU01@@Z PROC		; glm::tmat2x3<double,1>::tmat2x3<double,1>, COMDAT
; _this$ = ecx

; 161  : template struct tmat2x3<float64, mediump>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	12					; 0000000cH
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tmat2x3@N$00@glm@@QAE@ABU01@@Z ENDP		; glm::tmat2x3<double,1>::tmat2x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$00@glm@@QAE@XZ
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
??0?$tmat2x3@N$00@glm@@QAE@XZ PROC			; glm::tmat2x3<double,1>::tmat2x3<double,1>, COMDAT
; _this$ = ecx

; 11   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xor	edx, edx
	inc	edx
	xorps	xmm1, xmm1
	push	ebx
	mov	ebx, ecx
	push	esi
	push	edi
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat2x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm1
	movups	XMMWORD PTR [eax-16], xmm1
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat2x3

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0, 0);

	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	lea	esi, DWORD PTR $T2[ebp]
	push	6
	pop	ecx
	movupd	XMMWORD PTR $T2[ebp], xmm0
	mov	edi, ebx

; 14   : 				this->value[1] = col_type(0, 1, 0);
; 15   : #			endif
; 16   : 		}

	mov	eax, ebx
	movaps	xmm0, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	movsd	QWORD PTR $T2[ebp+16], xmm1
	rep movsd
	push	6
	pop	ecx
	lea	edi, DWORD PTR [ebx+24]
	movsd	QWORD PTR $T1[ebp+16], xmm1
	lea	esi, DWORD PTR $T1[ebp]
	movupd	XMMWORD PTR $T1[ebp], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$tmat2x3@N$00@glm@@QAE@XZ ENDP			; glm::tmat2x3<double,1>::tmat2x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??F?$tmat2x3@M$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat2x3@M$00@glm@@QAE?AU01@H@Z PROC		; glm::tmat2x3<float,1>::operator--, COMDAT
; _this$ = ecx

; 274  : 	{

	push	ebp
	mov	ebp, esp

; 275  : 		tmat2x3<T, P> Result(*this);
; 276  : 		--*this;

	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	mov	edx, ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	movups	xmm0, XMMWORD PTR [edx]
	push	6
	pop	ecx
	subps	xmm0, xmm1
	mov	esi, edx
	mov	edi, eax
	rep movsd
	movups	XMMWORD PTR [edx], xmm0
	pop	edi
	movss	xmm0, DWORD PTR [edx+16]
	subss	xmm0, xmm1
	pop	esi
	movss	DWORD PTR [edx+16], xmm0
	movss	xmm0, DWORD PTR [edx+20]
	subss	xmm0, xmm1
	movss	DWORD PTR [edx+20], xmm0

; 277  : 		return Result;
; 278  : 	}

	pop	ebp
	ret	8
??F?$tmat2x3@M$00@glm@@QAE?AU01@H@Z ENDP		; glm::tmat2x3<float,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??E?$tmat2x3@M$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat2x3@M$00@glm@@QAE?AU01@H@Z PROC		; glm::tmat2x3<float,1>::operator++, COMDAT
; _this$ = ecx

; 266  : 	{

	push	ebp
	mov	ebp, esp

; 267  : 		tmat2x3<T, P> Result(*this);
; 268  : 		++*this;

	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	mov	edx, ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	movups	xmm0, XMMWORD PTR [edx]
	push	6
	pop	ecx
	addps	xmm0, xmm1
	mov	esi, edx
	mov	edi, eax
	rep movsd
	movups	XMMWORD PTR [edx], xmm0
	pop	edi
	movss	xmm0, DWORD PTR [edx+16]
	addss	xmm0, xmm1
	pop	esi
	movss	DWORD PTR [edx+16], xmm0
	movss	xmm0, DWORD PTR [edx+20]
	addss	xmm0, xmm1
	movss	DWORD PTR [edx+20], xmm0

; 269  : 		return Result;
; 270  : 	}

	pop	ebp
	ret	8
??E?$tmat2x3@M$00@glm@@QAE?AU01@H@Z ENDP		; glm::tmat2x3<float,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??F?$tmat2x3@M$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat2x3@M$00@glm@@QAEAAU01@XZ PROC			; glm::tmat2x3<float,1>::operator--, COMDAT
; _this$ = ecx

; 259  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 260  : 		--this->value[1];
; 261  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	subss	xmm0, xmm1
	movss	DWORD PTR [ecx+16], xmm0
	movss	xmm0, DWORD PTR [ecx+20]
	subss	xmm0, xmm1
	movss	DWORD PTR [ecx+20], xmm0

; 262  : 	}

	ret	0
??F?$tmat2x3@M$00@glm@@QAEAAU01@XZ ENDP			; glm::tmat2x3<float,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??E?$tmat2x3@M$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat2x3@M$00@glm@@QAEAAU01@XZ PROC			; glm::tmat2x3<float,1>::operator++, COMDAT
; _this$ = ecx

; 251  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 252  : 		++this->value[1];
; 253  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	addss	xmm0, xmm1
	movss	DWORD PTR [ecx+16], xmm0
	movss	xmm0, DWORD PTR [ecx+20]
	addss	xmm0, xmm1
	movss	DWORD PTR [ecx+20], xmm0

; 254  : 	}

	ret	0
??E?$tmat2x3@M$00@glm@@QAEAAU01@XZ ENDP			; glm::tmat2x3<float,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tmat2x3@M$00@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tmat2x3@M$00@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tmat2x3<float,1>::operator=, COMDAT
; _this$ = ecx

; 160  : template struct tmat2x3<float32, mediump>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	6
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tmat2x3@M$00@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tmat2x3<float,1>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??A?$tmat2x3@M$00@glm@@QBEABU?$tvec3@M$00@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat2x3@M$00@glm@@QBEABU?$tvec3@M$00@1@H@Z PROC	; glm::tmat2x3<float,1>::operator[], COMDAT
; _this$ = ecx

; 166  : 	{

	push	ebp
	mov	ebp, esp

; 167  : 		assert(i < this->length());
; 168  : 		return this->value[i];

	imul	eax, DWORD PTR _i$[ebp], 12
	add	eax, ecx

; 169  : 	}

	pop	ebp
	ret	4
??A?$tmat2x3@M$00@glm@@QBEABU?$tvec3@M$00@1@H@Z ENDP	; glm::tmat2x3<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??A?$tmat2x3@M$00@glm@@QAEAAU?$tvec3@M$00@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat2x3@M$00@glm@@QAEAAU?$tvec3@M$00@1@H@Z PROC	; glm::tmat2x3<float,1>::operator[], COMDAT
; _this$ = ecx

; 159  : 	{

	push	ebp
	mov	ebp, esp

; 160  : 		assert(i < this->length());
; 161  : 		return this->value[i];

	imul	eax, DWORD PTR _i$[ebp], 12
	add	eax, ecx

; 162  : 	}

	pop	ebp
	ret	4
??A?$tmat2x3@M$00@glm@@QAEAAU?$tvec3@M$00@1@H@Z ENDP	; glm::tmat2x3<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.hpp
;	COMDAT ?length@?$tmat2x3@M$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat2x3@M$00@glm@@SAHXZ PROC			; glm::tmat2x3<float,1>::length, COMDAT

; 73   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	push	2
	pop	eax
	ret	0
?length@?$tmat2x3@M$00@glm@@SAHXZ ENDP			; glm::tmat2x3<float,1>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$00@glm@@QAE@ABU?$tmat4x3@M$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x3@M$00@glm@@QAE@ABU?$tmat4x3@M$00@1@@Z PROC	; glm::tmat2x3<float,1>::tmat2x3<float,1>, COMDAT
; _this$ = ecx

; 150  : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	lea	eax, DWORD PTR [ecx+8]
	inc	edx
$LL4@tmat2x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat2x3

; 151  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	esi, eax
	mov	edi, ecx
	movsd
	movsd
	movsd

; 152  : 		this->value[1] = m[1];

	lea	esi, DWORD PTR [eax+12]

; 153  : 	}

	mov	eax, ecx
	lea	edi, DWORD PTR [ecx+12]
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tmat2x3@M$00@glm@@QAE@ABU?$tmat4x3@M$00@1@@Z ENDP	; glm::tmat2x3<float,1>::tmat2x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$00@glm@@QAE@ABU?$tmat4x2@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat2x3@M$00@glm@@QAE@ABU?$tmat4x2@M$00@1@@Z PROC	; glm::tmat2x3<float,1>::tmat2x3<float,1>, COMDAT
; _this$ = ecx

; 143  : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	lea	eax, DWORD PTR [ecx+8]
	sub	esp, 12					; 0000000cH
	inc	edx
$LL4@tmat2x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat2x3

; 144  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	and	DWORD PTR $T2[ebp+8], 0
	push	esi
	push	edi
	movss	xmm0, DWORD PTR [eax]
	lea	esi, DWORD PTR $T2[ebp]
	movss	DWORD PTR $T2[ebp], xmm0
	mov	edi, ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movsd
	movsd
	movsd

; 145  : 		this->value[1] = col_type(m[1], 0);

	movss	xmm0, DWORD PTR [eax+8]
	lea	edi, DWORD PTR [ecx+12]
	and	DWORD PTR $T1[ebp+8], 0
	lea	esi, DWORD PTR $T1[ebp]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+12]

; 146  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+4], xmm0
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x3@M$00@glm@@QAE@ABU?$tmat4x2@M$00@1@@Z ENDP	; glm::tmat2x3<float,1>::tmat2x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$00@glm@@QAE@ABU?$tmat3x4@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat2x3@M$00@glm@@QAE@ABU?$tmat3x4@M$00@1@@Z PROC	; glm::tmat2x3<float,1>::tmat2x3<float,1>, COMDAT
; _this$ = ecx

; 136  : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	lea	eax, DWORD PTR [ecx+8]
	sub	esp, 12					; 0000000cH
	inc	edx
$LL4@tmat2x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat2x3

; 137  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T2[ebp]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T2[ebp+8], xmm0
	movsd
	movsd
	movsd

; 138  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [eax+16]
	lea	edi, DWORD PTR [ecx+12]
	movss	DWORD PTR $T1[ebp], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+24]

; 139  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+8], xmm0
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x3@M$00@glm@@QAE@ABU?$tmat3x4@M$00@1@@Z ENDP	; glm::tmat2x3<float,1>::tmat2x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$00@glm@@QAE@ABU?$tmat3x2@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat2x3@M$00@glm@@QAE@ABU?$tmat3x2@M$00@1@@Z PROC	; glm::tmat2x3<float,1>::tmat2x3<float,1>, COMDAT
; _this$ = ecx

; 129  : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	lea	eax, DWORD PTR [ecx+8]
	sub	esp, 12					; 0000000cH
	inc	edx
$LL4@tmat2x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat2x3

; 130  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	and	DWORD PTR $T2[ebp+8], 0
	push	esi
	push	edi
	movss	xmm0, DWORD PTR [eax]
	lea	esi, DWORD PTR $T2[ebp]
	movss	DWORD PTR $T2[ebp], xmm0
	mov	edi, ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movsd
	movsd
	movsd

; 131  : 		this->value[1] = col_type(m[1], 0);

	movss	xmm0, DWORD PTR [eax+8]
	lea	edi, DWORD PTR [ecx+12]
	and	DWORD PTR $T1[ebp+8], 0
	lea	esi, DWORD PTR $T1[ebp]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+12]

; 132  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+4], xmm0
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x3@M$00@glm@@QAE@ABU?$tmat3x2@M$00@1@@Z ENDP	; glm::tmat2x3<float,1>::tmat2x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$00@glm@@QAE@ABU?$tmat2x4@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat2x3@M$00@glm@@QAE@ABU?$tmat2x4@M$00@1@@Z PROC	; glm::tmat2x3<float,1>::tmat2x3<float,1>, COMDAT
; _this$ = ecx

; 122  : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	lea	eax, DWORD PTR [ecx+8]
	sub	esp, 12					; 0000000cH
	inc	edx
$LL4@tmat2x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat2x3

; 123  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T2[ebp]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T2[ebp+8], xmm0
	movsd
	movsd
	movsd

; 124  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [eax+16]
	lea	edi, DWORD PTR [ecx+12]
	movss	DWORD PTR $T1[ebp], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+24]

; 125  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+8], xmm0
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x3@M$00@glm@@QAE@ABU?$tmat2x4@M$00@1@@Z ENDP	; glm::tmat2x3<float,1>::tmat2x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$00@glm@@QAE@ABU?$tmat4x4@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat2x3@M$00@glm@@QAE@ABU?$tmat4x4@M$00@1@@Z PROC	; glm::tmat2x3<float,1>::tmat2x3<float,1>, COMDAT
; _this$ = ecx

; 115  : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	lea	eax, DWORD PTR [ecx+8]
	sub	esp, 12					; 0000000cH
	inc	edx
$LL4@tmat2x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat2x3

; 116  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T2[ebp]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T2[ebp+8], xmm0
	movsd
	movsd
	movsd

; 117  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [eax+16]
	lea	edi, DWORD PTR [ecx+12]
	movss	DWORD PTR $T1[ebp], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+24]

; 118  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+8], xmm0
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x3@M$00@glm@@QAE@ABU?$tmat4x4@M$00@1@@Z ENDP	; glm::tmat2x3<float,1>::tmat2x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$00@glm@@QAE@ABU?$tmat3x3@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat2x3@M$00@glm@@QAE@ABU?$tmat3x3@M$00@1@@Z PROC	; glm::tmat2x3<float,1>::tmat2x3<float,1>, COMDAT
; _this$ = ecx

; 108  : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	lea	eax, DWORD PTR [ecx+8]
	sub	esp, 12					; 0000000cH
	inc	edx
$LL4@tmat2x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat2x3

; 109  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	esi, eax
	lea	edi, DWORD PTR $T2[ebp]
	movsd
	movsd
	movsd
	mov	edi, ecx
	lea	esi, DWORD PTR $T2[ebp]
	movsd
	movsd
	movsd

; 110  : 		this->value[1] = col_type(m[1]);

	lea	esi, DWORD PTR [eax+12]

; 111  : 	}

	mov	eax, ecx
	lea	edi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	lea	edi, DWORD PTR [ecx+12]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x3@M$00@glm@@QAE@ABU?$tmat3x3@M$00@1@@Z ENDP	; glm::tmat2x3<float,1>::tmat2x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$00@glm@@QAE@ABU?$tmat2x2@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat2x3@M$00@glm@@QAE@ABU?$tmat2x2@M$00@1@@Z PROC	; glm::tmat2x3<float,1>::tmat2x3<float,1>, COMDAT
; _this$ = ecx

; 101  : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	lea	eax, DWORD PTR [ecx+8]
	sub	esp, 12					; 0000000cH
	inc	edx
$LL4@tmat2x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat2x3

; 102  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	and	DWORD PTR $T2[ebp+8], 0
	push	esi
	push	edi
	movss	xmm0, DWORD PTR [eax]
	lea	esi, DWORD PTR $T2[ebp]
	movss	DWORD PTR $T2[ebp], xmm0
	mov	edi, ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movsd
	movsd
	movsd

; 103  : 		this->value[1] = col_type(m[1], 0);

	movss	xmm0, DWORD PTR [eax+8]
	lea	edi, DWORD PTR [ecx+12]
	and	DWORD PTR $T1[ebp+8], 0
	lea	esi, DWORD PTR $T1[ebp]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+12]

; 104  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+4], xmm0
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x3@M$00@glm@@QAE@ABU?$tmat2x2@M$00@1@@Z ENDP	; glm::tmat2x3<float,1>::tmat2x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$00@glm@@QAE@ABU?$tvec3@M$00@1@0@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
??0?$tmat2x3@M$00@glm@@QAE@ABU?$tvec3@M$00@1@0@Z PROC	; glm::tmat2x3<float,1>::tmat2x3<float,1>, COMDAT
; _this$ = ecx

; 60   : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	lea	eax, DWORD PTR [ecx+8]
	inc	edx
$LL4@tmat2x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat2x3

; 61   : 		this->value[0] = v0;

	push	esi
	mov	esi, DWORD PTR _v0$[ebp]

; 62   : 		this->value[1] = v1;
; 63   : 	}

	mov	eax, ecx
	push	edi
	mov	edi, ecx
	movsd
	movsd
	movsd
	mov	esi, DWORD PTR _v1$[ebp]
	lea	edi, DWORD PTR [ecx+12]
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	8
??0?$tmat2x3@M$00@glm@@QAE@ABU?$tvec3@M$00@1@0@Z ENDP	; glm::tmat2x3<float,1>::tmat2x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$00@glm@@QAE@MMMMMM@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_z0$ = 16						; size = 4
_x1$ = 20						; size = 4
_y1$ = 24						; size = 4
_z1$ = 28						; size = 4
??0?$tmat2x3@M$00@glm@@QAE@MMMMMM@Z PROC		; glm::tmat2x3<float,1>::tmat2x3<float,1>, COMDAT
; _this$ = ecx

; 53   : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	lea	eax, DWORD PTR [ecx+8]
	sub	esp, 12					; 0000000cH
	inc	edx
$LL4@tmat2x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat2x3

; 54   : 		this->value[0] = col_type(x0, y0, z0);

	movss	xmm0, DWORD PTR _x0$[ebp]

; 55   : 		this->value[1] = col_type(x1, y1, z1);
; 56   : 	}

	mov	eax, ecx
	push	esi
	movss	DWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	movss	xmm0, DWORD PTR _y0$[ebp]
	push	edi
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	edi, ecx
	movss	xmm0, DWORD PTR _z0$[ebp]
	movss	DWORD PTR $T2[ebp+8], xmm0
	movss	xmm0, DWORD PTR _x1$[ebp]
	movsd
	movsd
	movsd
	movss	DWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+12]
	movss	xmm0, DWORD PTR _y1$[ebp]
	lea	esi, DWORD PTR $T1[ebp]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR _z1$[ebp]
	movss	DWORD PTR $T1[ebp+8], xmm0
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
??0?$tmat2x3@M$00@glm@@QAE@MMMMMM@Z ENDP		; glm::tmat2x3<float,1>::tmat2x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$00@glm@@QAE@M@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
_scalar$ = 8						; size = 4
??0?$tmat2x3@M$00@glm@@QAE@M@Z PROC			; glm::tmat2x3<float,1>::tmat2x3<float,1>, COMDAT
; _this$ = ecx

; 42   : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	lea	eax, DWORD PTR [ecx+8]
	sub	esp, 12					; 0000000cH
	inc	edx
$LL4@tmat2x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat2x3

; 43   : 		this->value[0] = col_type(scalar, 0, 0);

	and	DWORD PTR $T2[ebp+4], 0

; 44   : 		this->value[1] = col_type(0, scalar, 0);
; 45   : 	}

	mov	eax, ecx
	and	DWORD PTR $T2[ebp+8], 0
	movss	xmm0, DWORD PTR _scalar$[ebp]
	push	esi
	push	edi
	movss	DWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	mov	edi, ecx
	movsd
	movsd
	movsd
	and	DWORD PTR $T1[ebp], 0
	lea	edi, DWORD PTR [ecx+12]
	and	DWORD PTR $T1[ebp+8], 0
	lea	esi, DWORD PTR $T1[ebp]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x3@M$00@glm@@QAE@M@Z ENDP			; glm::tmat2x3<float,1>::tmat2x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat2x3@M$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat2x3<float,1>::tmat2x3<float,1>, COMDAT
; _this$ = ecx

; 38   : 	{}

	xor	edx, edx
	lea	eax, DWORD PTR [ecx+8]
	inc	edx
$LL4@tmat2x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat2x3
	mov	eax, ecx
	ret	4
??0?$tmat2x3@M$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat2x3<float,1>::tmat2x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tmat2x3@M$00@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tmat2x3@M$00@glm@@QAE@ABU01@@Z PROC		; glm::tmat2x3<float,1>::tmat2x3<float,1>, COMDAT
; _this$ = ecx

; 160  : template struct tmat2x3<float32, mediump>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	6
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tmat2x3@M$00@glm@@QAE@ABU01@@Z ENDP		; glm::tmat2x3<float,1>::tmat2x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$00@glm@@QAE@XZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
??0?$tmat2x3@M$00@glm@@QAE@XZ PROC			; glm::tmat2x3<float,1>::tmat2x3<float,1>, COMDAT
; _this$ = ecx

; 11   : 		{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	lea	eax, DWORD PTR [ecx+8]
	sub	esp, 12					; 0000000cH
	inc	edx
$LL4@tmat2x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat2x3

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0, 0);

	and	DWORD PTR $T2[ebp+4], 0

; 14   : 				this->value[1] = col_type(0, 1, 0);
; 15   : #			endif
; 16   : 		}

	mov	eax, ecx
	and	DWORD PTR $T2[ebp+8], 0
	push	esi
	push	edi
	mov	DWORD PTR $T2[ebp], 1065353216		; 3f800000H
	lea	esi, DWORD PTR $T2[ebp]
	mov	edi, ecx
	movsd
	movsd
	movsd
	and	DWORD PTR $T1[ebp], 0
	lea	edi, DWORD PTR [ecx+12]
	and	DWORD PTR $T1[ebp+8], 0
	lea	esi, DWORD PTR $T1[ebp]
	mov	DWORD PTR $T1[ebp+4], 1065353216	; 3f800000H
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$tmat2x3@M$00@glm@@QAE@XZ ENDP			; glm::tmat2x3<float,1>::tmat2x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??F?$tmat2x3@N$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat2x3@N$01@glm@@QAE?AU01@H@Z PROC		; glm::tmat2x3<double,2>::operator--, COMDAT
; _this$ = ecx

; 274  : 	{

	push	ebp
	mov	ebp, esp

; 275  : 		tmat2x3<T, P> Result(*this);
; 276  : 		--*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	mov	edx, ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	movups	xmm0, XMMWORD PTR [edx]
	push	12					; 0000000cH
	pop	ecx
	subpd	xmm0, xmm1
	mov	esi, edx
	mov	edi, eax
	rep movsd
	movups	XMMWORD PTR [edx], xmm0
	pop	edi
	movups	xmm0, XMMWORD PTR [edx+16]
	pop	esi
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+16], xmm0
	movups	xmm0, XMMWORD PTR [edx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+32], xmm0

; 277  : 		return Result;
; 278  : 	}

	pop	ebp
	ret	8
??F?$tmat2x3@N$01@glm@@QAE?AU01@H@Z ENDP		; glm::tmat2x3<double,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??E?$tmat2x3@N$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat2x3@N$01@glm@@QAE?AU01@H@Z PROC		; glm::tmat2x3<double,2>::operator++, COMDAT
; _this$ = ecx

; 266  : 	{

	push	ebp
	mov	ebp, esp

; 267  : 		tmat2x3<T, P> Result(*this);
; 268  : 		++*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	mov	edx, ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	movups	xmm0, XMMWORD PTR [edx]
	push	12					; 0000000cH
	pop	ecx
	addpd	xmm0, xmm1
	mov	esi, edx
	mov	edi, eax
	rep movsd
	movups	XMMWORD PTR [edx], xmm0
	pop	edi
	movups	xmm0, XMMWORD PTR [edx+16]
	pop	esi
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+16], xmm0
	movups	xmm0, XMMWORD PTR [edx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+32], xmm0

; 269  : 		return Result;
; 270  : 	}

	pop	ebp
	ret	8
??E?$tmat2x3@N$01@glm@@QAE?AU01@H@Z ENDP		; glm::tmat2x3<double,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??F?$tmat2x3@N$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat2x3@N$01@glm@@QAEAAU01@XZ PROC			; glm::tmat2x3<double,2>::operator--, COMDAT
; _this$ = ecx

; 259  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 260  : 		--this->value[1];
; 261  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0

; 262  : 	}

	ret	0
??F?$tmat2x3@N$01@glm@@QAEAAU01@XZ ENDP			; glm::tmat2x3<double,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??E?$tmat2x3@N$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat2x3@N$01@glm@@QAEAAU01@XZ PROC			; glm::tmat2x3<double,2>::operator++, COMDAT
; _this$ = ecx

; 251  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 252  : 		++this->value[1];
; 253  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0

; 254  : 	}

	ret	0
??E?$tmat2x3@N$01@glm@@QAEAAU01@XZ ENDP			; glm::tmat2x3<double,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tmat2x3@N$01@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tmat2x3@N$01@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tmat2x3<double,2>::operator=, COMDAT
; _this$ = ecx

; 158  : template struct tmat2x3<float64, lowp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	12					; 0000000cH
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tmat2x3@N$01@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tmat2x3<double,2>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??A?$tmat2x3@N$01@glm@@QBEABU?$tvec3@N$01@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat2x3@N$01@glm@@QBEABU?$tvec3@N$01@1@H@Z PROC	; glm::tmat2x3<double,2>::operator[], COMDAT
; _this$ = ecx

; 166  : 	{

	push	ebp
	mov	ebp, esp

; 167  : 		assert(i < this->length());
; 168  : 		return this->value[i];

	imul	eax, DWORD PTR _i$[ebp], 24
	add	eax, ecx

; 169  : 	}

	pop	ebp
	ret	4
??A?$tmat2x3@N$01@glm@@QBEABU?$tvec3@N$01@1@H@Z ENDP	; glm::tmat2x3<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??A?$tmat2x3@N$01@glm@@QAEAAU?$tvec3@N$01@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat2x3@N$01@glm@@QAEAAU?$tvec3@N$01@1@H@Z PROC	; glm::tmat2x3<double,2>::operator[], COMDAT
; _this$ = ecx

; 159  : 	{

	push	ebp
	mov	ebp, esp

; 160  : 		assert(i < this->length());
; 161  : 		return this->value[i];

	imul	eax, DWORD PTR _i$[ebp], 24
	add	eax, ecx

; 162  : 	}

	pop	ebp
	ret	4
??A?$tmat2x3@N$01@glm@@QAEAAU?$tvec3@N$01@1@H@Z ENDP	; glm::tmat2x3<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.hpp
;	COMDAT ?length@?$tmat2x3@N$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat2x3@N$01@glm@@SAHXZ PROC			; glm::tmat2x3<double,2>::length, COMDAT

; 73   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	push	2
	pop	eax
	ret	0
?length@?$tmat2x3@N$01@glm@@SAHXZ ENDP			; glm::tmat2x3<double,2>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$01@glm@@QAE@ABU?$tmat4x3@N$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x3@N$01@glm@@QAE@ABU?$tmat4x3@N$01@1@@Z PROC	; glm::tmat2x3<double,2>::tmat2x3<double,2>, COMDAT
; _this$ = ecx

; 150  : 	{

	push	ebp
	mov	ebp, esp
	mov	edx, ecx
	xorps	xmm0, xmm0
	xor	ecx, ecx
	inc	ecx
	lea	eax, DWORD PTR [edx+16]
$LL4@tmat2x3:
	dec	ecx
	movsd	QWORD PTR [eax], xmm0
	movups	XMMWORD PTR [eax-16], xmm0
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat2x3

; 151  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	push	6
	pop	ecx
	mov	esi, eax
	mov	edi, edx
	rep movsd

; 152  : 		this->value[1] = m[1];

	push	6
	pop	ecx
	lea	esi, DWORD PTR [eax+24]

; 153  : 	}

	mov	eax, edx
	lea	edi, DWORD PTR [edx+24]
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tmat2x3@N$01@glm@@QAE@ABU?$tmat4x3@N$01@1@@Z ENDP	; glm::tmat2x3<double,2>::tmat2x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$01@glm@@QAE@ABU?$tmat4x2@N$01@1@@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
_m$ = 8							; size = 4
??0?$tmat2x3@N$01@glm@@QAE@ABU?$tmat4x2@N$01@1@@Z PROC	; glm::tmat2x3<double,2>::tmat2x3<double,2>, COMDAT
; _this$ = ecx

; 143  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xor	edx, edx
	inc	edx
	xorps	xmm1, xmm1
	push	ebx
	mov	ebx, ecx
	push	esi
	push	edi
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat2x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm1
	movups	XMMWORD PTR [eax-16], xmm1
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat2x3

; 144  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T2[ebp]
	push	6
	pop	ecx
	movsd	QWORD PTR $T2[ebp+16], xmm1
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]

; 145  : 		this->value[1] = col_type(m[1], 0);

	push	6
	movups	XMMWORD PTR $T2[ebp], xmm0
	rep movsd
	movups	xmm0, XMMWORD PTR [eax+16]
	pop	ecx
	lea	edi, DWORD PTR [ebx+24]
	movsd	QWORD PTR $T1[ebp+16], xmm1
	lea	esi, DWORD PTR $T1[ebp]

; 146  : 	}

	mov	eax, ebx
	movups	XMMWORD PTR $T1[ebp], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x3@N$01@glm@@QAE@ABU?$tmat4x2@N$01@1@@Z ENDP	; glm::tmat2x3<double,2>::tmat2x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$01@glm@@QAE@ABU?$tmat3x4@N$01@1@@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
_m$ = 8							; size = 4
??0?$tmat2x3@N$01@glm@@QAE@ABU?$tmat3x4@N$01@1@@Z PROC	; glm::tmat2x3<double,2>::tmat2x3<double,2>, COMDAT
; _this$ = ecx

; 136  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xor	edx, edx
	inc	edx
	xorps	xmm0, xmm0
	push	ebx
	mov	ebx, ecx
	push	esi
	push	edi
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat2x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm0
	movups	XMMWORD PTR [eax-16], xmm0
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat2x3

; 137  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T2[ebp]
	push	6
	pop	ecx
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]

; 138  : 		this->value[1] = col_type(m[1]);

	push	6
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR $T2[ebp+16], xmm0
	rep movsd
	movups	xmm0, XMMWORD PTR [eax+32]
	pop	ecx
	lea	edi, DWORD PTR [ebx+24]
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	movsd	xmm0, QWORD PTR [eax+48]

; 139  : 	}

	mov	eax, ebx
	movsd	QWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x3@N$01@glm@@QAE@ABU?$tmat3x4@N$01@1@@Z ENDP	; glm::tmat2x3<double,2>::tmat2x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$01@glm@@QAE@ABU?$tmat3x2@N$01@1@@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
_m$ = 8							; size = 4
??0?$tmat2x3@N$01@glm@@QAE@ABU?$tmat3x2@N$01@1@@Z PROC	; glm::tmat2x3<double,2>::tmat2x3<double,2>, COMDAT
; _this$ = ecx

; 129  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xor	edx, edx
	inc	edx
	xorps	xmm1, xmm1
	push	ebx
	mov	ebx, ecx
	push	esi
	push	edi
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat2x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm1
	movups	XMMWORD PTR [eax-16], xmm1
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat2x3

; 130  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T2[ebp]
	push	6
	pop	ecx
	movsd	QWORD PTR $T2[ebp+16], xmm1
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]

; 131  : 		this->value[1] = col_type(m[1], 0);

	push	6
	movups	XMMWORD PTR $T2[ebp], xmm0
	rep movsd
	movups	xmm0, XMMWORD PTR [eax+16]
	pop	ecx
	lea	edi, DWORD PTR [ebx+24]
	movsd	QWORD PTR $T1[ebp+16], xmm1
	lea	esi, DWORD PTR $T1[ebp]

; 132  : 	}

	mov	eax, ebx
	movups	XMMWORD PTR $T1[ebp], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x3@N$01@glm@@QAE@ABU?$tmat3x2@N$01@1@@Z ENDP	; glm::tmat2x3<double,2>::tmat2x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$01@glm@@QAE@ABU?$tmat2x4@N$01@1@@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
_m$ = 8							; size = 4
??0?$tmat2x3@N$01@glm@@QAE@ABU?$tmat2x4@N$01@1@@Z PROC	; glm::tmat2x3<double,2>::tmat2x3<double,2>, COMDAT
; _this$ = ecx

; 122  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xor	edx, edx
	inc	edx
	xorps	xmm0, xmm0
	push	ebx
	mov	ebx, ecx
	push	esi
	push	edi
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat2x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm0
	movups	XMMWORD PTR [eax-16], xmm0
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat2x3

; 123  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T2[ebp]
	push	6
	pop	ecx
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]

; 124  : 		this->value[1] = col_type(m[1]);

	push	6
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR $T2[ebp+16], xmm0
	rep movsd
	movups	xmm0, XMMWORD PTR [eax+32]
	pop	ecx
	lea	edi, DWORD PTR [ebx+24]
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	movsd	xmm0, QWORD PTR [eax+48]

; 125  : 	}

	mov	eax, ebx
	movsd	QWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x3@N$01@glm@@QAE@ABU?$tmat2x4@N$01@1@@Z ENDP	; glm::tmat2x3<double,2>::tmat2x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$01@glm@@QAE@ABU?$tmat4x4@N$01@1@@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
_m$ = 8							; size = 4
??0?$tmat2x3@N$01@glm@@QAE@ABU?$tmat4x4@N$01@1@@Z PROC	; glm::tmat2x3<double,2>::tmat2x3<double,2>, COMDAT
; _this$ = ecx

; 115  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xor	edx, edx
	inc	edx
	xorps	xmm0, xmm0
	push	ebx
	mov	ebx, ecx
	push	esi
	push	edi
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat2x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm0
	movups	XMMWORD PTR [eax-16], xmm0
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat2x3

; 116  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T2[ebp]
	push	6
	pop	ecx
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]

; 117  : 		this->value[1] = col_type(m[1]);

	push	6
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR $T2[ebp+16], xmm0
	rep movsd
	movups	xmm0, XMMWORD PTR [eax+32]
	pop	ecx
	lea	edi, DWORD PTR [ebx+24]
	movups	XMMWORD PTR $T1[ebp], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	movsd	xmm0, QWORD PTR [eax+48]

; 118  : 	}

	mov	eax, ebx
	movsd	QWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x3@N$01@glm@@QAE@ABU?$tmat4x4@N$01@1@@Z ENDP	; glm::tmat2x3<double,2>::tmat2x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$01@glm@@QAE@ABU?$tmat3x3@N$01@1@@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
_m$ = 8							; size = 4
??0?$tmat2x3@N$01@glm@@QAE@ABU?$tmat3x3@N$01@1@@Z PROC	; glm::tmat2x3<double,2>::tmat2x3<double,2>, COMDAT
; _this$ = ecx

; 108  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xor	edx, edx
	inc	edx
	xorps	xmm0, xmm0
	push	ebx
	mov	ebx, ecx
	push	esi
	push	edi
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat2x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm0
	movups	XMMWORD PTR [eax-16], xmm0
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat2x3

; 109  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	lea	edi, DWORD PTR $T2[ebp]
	push	6
	pop	edx
	mov	esi, eax
	mov	ecx, edx
	rep movsd
	mov	edi, ebx
	lea	esi, DWORD PTR $T2[ebp]
	mov	ecx, edx
	rep movsd

; 110  : 		this->value[1] = col_type(m[1]);

	lea	esi, DWORD PTR [eax+24]
	mov	ecx, edx
	lea	edi, DWORD PTR $T1[ebp]

; 111  : 	}

	mov	eax, ebx
	rep movsd
	lea	edi, DWORD PTR [ebx+24]
	mov	ecx, edx
	lea	esi, DWORD PTR $T1[ebp]
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x3@N$01@glm@@QAE@ABU?$tmat3x3@N$01@1@@Z ENDP	; glm::tmat2x3<double,2>::tmat2x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$01@glm@@QAE@ABU?$tmat2x2@N$01@1@@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
_m$ = 8							; size = 4
??0?$tmat2x3@N$01@glm@@QAE@ABU?$tmat2x2@N$01@1@@Z PROC	; glm::tmat2x3<double,2>::tmat2x3<double,2>, COMDAT
; _this$ = ecx

; 101  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xor	edx, edx
	inc	edx
	xorps	xmm1, xmm1
	push	ebx
	mov	ebx, ecx
	push	esi
	push	edi
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat2x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm1
	movups	XMMWORD PTR [eax-16], xmm1
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat2x3

; 102  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR $T2[ebp]
	push	6
	pop	ecx
	movsd	QWORD PTR $T2[ebp+16], xmm1
	mov	edi, ebx
	movups	xmm0, XMMWORD PTR [eax]

; 103  : 		this->value[1] = col_type(m[1], 0);

	push	6
	movups	XMMWORD PTR $T2[ebp], xmm0
	rep movsd
	movups	xmm0, XMMWORD PTR [eax+16]
	pop	ecx
	lea	edi, DWORD PTR [ebx+24]
	movsd	QWORD PTR $T1[ebp+16], xmm1
	lea	esi, DWORD PTR $T1[ebp]

; 104  : 	}

	mov	eax, ebx
	movups	XMMWORD PTR $T1[ebp], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x3@N$01@glm@@QAE@ABU?$tmat2x2@N$01@1@@Z ENDP	; glm::tmat2x3<double,2>::tmat2x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$01@glm@@QAE@ABU?$tvec3@N$01@1@0@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
??0?$tmat2x3@N$01@glm@@QAE@ABU?$tvec3@N$01@1@0@Z PROC	; glm::tmat2x3<double,2>::tmat2x3<double,2>, COMDAT
; _this$ = ecx

; 60   : 	{

	push	ebp
	mov	ebp, esp
	mov	edx, ecx
	xorps	xmm0, xmm0
	xor	ecx, ecx
	inc	ecx
	lea	eax, DWORD PTR [edx+16]
$LL4@tmat2x3:
	dec	ecx
	movsd	QWORD PTR [eax], xmm0
	movups	XMMWORD PTR [eax-16], xmm0
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat2x3

; 61   : 		this->value[0] = v0;

	push	esi
	mov	esi, DWORD PTR _v0$[ebp]

; 62   : 		this->value[1] = v1;
; 63   : 	}

	mov	eax, edx
	push	edi
	push	6
	pop	ecx
	mov	edi, edx
	rep movsd
	mov	esi, DWORD PTR _v1$[ebp]
	lea	edi, DWORD PTR [edx+24]
	push	6
	pop	ecx
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	8
??0?$tmat2x3@N$01@glm@@QAE@ABU?$tvec3@N$01@1@0@Z ENDP	; glm::tmat2x3<double,2>::tmat2x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$01@glm@@QAE@NNNNNN@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
_x0$ = 8						; size = 8
_y0$ = 16						; size = 8
_z0$ = 24						; size = 8
_x1$ = 32						; size = 8
_y1$ = 40						; size = 8
_z1$ = 48						; size = 8
??0?$tmat2x3@N$01@glm@@QAE@NNNNNN@Z PROC		; glm::tmat2x3<double,2>::tmat2x3<double,2>, COMDAT
; _this$ = ecx

; 53   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xor	edx, edx
	inc	edx
	xorps	xmm0, xmm0
	push	ebx
	mov	ebx, ecx
	push	esi
	push	edi
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat2x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm0
	movups	XMMWORD PTR [eax-16], xmm0
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat2x3

; 54   : 		this->value[0] = col_type(x0, y0, z0);

	movsd	xmm0, QWORD PTR _x0$[ebp]
	lea	esi, DWORD PTR $T2[ebp]
	movsd	QWORD PTR $T2[ebp], xmm0
	mov	edi, ebx
	movsd	xmm0, QWORD PTR _y0$[ebp]

; 55   : 		this->value[1] = col_type(x1, y1, z1);
; 56   : 	}

	mov	eax, ebx
	movsd	QWORD PTR $T2[ebp+8], xmm0
	movsd	xmm0, QWORD PTR _z0$[ebp]
	push	6
	movsd	QWORD PTR $T2[ebp+16], xmm0
	movsd	xmm0, QWORD PTR _x1$[ebp]
	pop	ecx
	rep movsd
	movsd	QWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ebx+24]
	movsd	xmm0, QWORD PTR _y1$[ebp]
	lea	esi, DWORD PTR $T1[ebp]
	push	6
	movsd	QWORD PTR $T1[ebp+8], xmm0
	movsd	xmm0, QWORD PTR _z1$[ebp]
	pop	ecx
	movsd	QWORD PTR $T1[ebp+16], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	48					; 00000030H
??0?$tmat2x3@N$01@glm@@QAE@NNNNNN@Z ENDP		; glm::tmat2x3<double,2>::tmat2x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$01@glm@@QAE@N@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
_scalar$ = 8						; size = 8
??0?$tmat2x3@N$01@glm@@QAE@N@Z PROC			; glm::tmat2x3<double,2>::tmat2x3<double,2>, COMDAT
; _this$ = ecx

; 42   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xor	edx, edx
	inc	edx
	xorps	xmm2, xmm2
	push	ebx
	mov	ebx, ecx
	push	esi
	push	edi
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat2x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm2
	movups	XMMWORD PTR [eax-16], xmm2
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat2x3

; 43   : 		this->value[0] = col_type(scalar, 0, 0);

	movsd	xmm1, QWORD PTR _scalar$[ebp]
	lea	esi, DWORD PTR $T2[ebp]
	push	6
	pop	ecx
	movsd	QWORD PTR $T2[ebp], xmm1
	xorps	xmm0, xmm0
	movupd	XMMWORD PTR $T2[ebp+8], xmm0
	mov	edi, ebx

; 44   : 		this->value[1] = col_type(0, scalar, 0);
; 45   : 	}

	mov	eax, ebx
	rep movsd
	push	6
	pop	ecx
	lea	edi, DWORD PTR [ebx+24]
	movsd	QWORD PTR $T1[ebp], xmm2
	lea	esi, DWORD PTR $T1[ebp]
	movsd	QWORD PTR $T1[ebp+8], xmm1
	movsd	QWORD PTR $T1[ebp+16], xmm2
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$tmat2x3@N$01@glm@@QAE@N@Z ENDP			; glm::tmat2x3<double,2>::tmat2x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat2x3@N$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat2x3<double,2>::tmat2x3<double,2>, COMDAT
; _this$ = ecx

; 38   : 	{}

	xor	edx, edx
	lea	eax, DWORD PTR [ecx+16]
	inc	edx
	xorps	xmm0, xmm0
$LL4@tmat2x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm0
	movups	XMMWORD PTR [eax-16], xmm0
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat2x3
	mov	eax, ecx
	ret	4
??0?$tmat2x3@N$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat2x3<double,2>::tmat2x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tmat2x3@N$01@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tmat2x3@N$01@glm@@QAE@ABU01@@Z PROC		; glm::tmat2x3<double,2>::tmat2x3<double,2>, COMDAT
; _this$ = ecx

; 158  : template struct tmat2x3<float64, lowp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	12					; 0000000cH
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tmat2x3@N$01@glm@@QAE@ABU01@@Z ENDP		; glm::tmat2x3<double,2>::tmat2x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$01@glm@@QAE@XZ
_TEXT	SEGMENT
$T1 = -24						; size = 24
$T2 = -24						; size = 24
??0?$tmat2x3@N$01@glm@@QAE@XZ PROC			; glm::tmat2x3<double,2>::tmat2x3<double,2>, COMDAT
; _this$ = ecx

; 11   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xor	edx, edx
	inc	edx
	xorps	xmm1, xmm1
	push	ebx
	mov	ebx, ecx
	push	esi
	push	edi
	lea	eax, DWORD PTR [ebx+16]
$LL4@tmat2x3:
	dec	edx
	movsd	QWORD PTR [eax], xmm1
	movups	XMMWORD PTR [eax-16], xmm1
	lea	eax, DWORD PTR [eax+24]
	jns	SHORT $LL4@tmat2x3

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0, 0);

	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	lea	esi, DWORD PTR $T2[ebp]
	push	6
	pop	ecx
	movupd	XMMWORD PTR $T2[ebp], xmm0
	mov	edi, ebx

; 14   : 				this->value[1] = col_type(0, 1, 0);
; 15   : #			endif
; 16   : 		}

	mov	eax, ebx
	movaps	xmm0, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	movsd	QWORD PTR $T2[ebp+16], xmm1
	rep movsd
	push	6
	pop	ecx
	lea	edi, DWORD PTR [ebx+24]
	movsd	QWORD PTR $T1[ebp+16], xmm1
	lea	esi, DWORD PTR $T1[ebp]
	movupd	XMMWORD PTR $T1[ebp], xmm0
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$tmat2x3@N$01@glm@@QAE@XZ ENDP			; glm::tmat2x3<double,2>::tmat2x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??F?$tmat2x3@M$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat2x3@M$01@glm@@QAE?AU01@H@Z PROC		; glm::tmat2x3<float,2>::operator--, COMDAT
; _this$ = ecx

; 274  : 	{

	push	ebp
	mov	ebp, esp

; 275  : 		tmat2x3<T, P> Result(*this);
; 276  : 		--*this;

	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	mov	edx, ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	movups	xmm0, XMMWORD PTR [edx]
	push	6
	pop	ecx
	subps	xmm0, xmm1
	mov	esi, edx
	mov	edi, eax
	rep movsd
	movups	XMMWORD PTR [edx], xmm0
	pop	edi
	movss	xmm0, DWORD PTR [edx+16]
	subss	xmm0, xmm1
	pop	esi
	movss	DWORD PTR [edx+16], xmm0
	movss	xmm0, DWORD PTR [edx+20]
	subss	xmm0, xmm1
	movss	DWORD PTR [edx+20], xmm0

; 277  : 		return Result;
; 278  : 	}

	pop	ebp
	ret	8
??F?$tmat2x3@M$01@glm@@QAE?AU01@H@Z ENDP		; glm::tmat2x3<float,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??E?$tmat2x3@M$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat2x3@M$01@glm@@QAE?AU01@H@Z PROC		; glm::tmat2x3<float,2>::operator++, COMDAT
; _this$ = ecx

; 266  : 	{

	push	ebp
	mov	ebp, esp

; 267  : 		tmat2x3<T, P> Result(*this);
; 268  : 		++*this;

	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	mov	edx, ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	movups	xmm0, XMMWORD PTR [edx]
	push	6
	pop	ecx
	addps	xmm0, xmm1
	mov	esi, edx
	mov	edi, eax
	rep movsd
	movups	XMMWORD PTR [edx], xmm0
	pop	edi
	movss	xmm0, DWORD PTR [edx+16]
	addss	xmm0, xmm1
	pop	esi
	movss	DWORD PTR [edx+16], xmm0
	movss	xmm0, DWORD PTR [edx+20]
	addss	xmm0, xmm1
	movss	DWORD PTR [edx+20], xmm0

; 269  : 		return Result;
; 270  : 	}

	pop	ebp
	ret	8
??E?$tmat2x3@M$01@glm@@QAE?AU01@H@Z ENDP		; glm::tmat2x3<float,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??F?$tmat2x3@M$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat2x3@M$01@glm@@QAEAAU01@XZ PROC			; glm::tmat2x3<float,2>::operator--, COMDAT
; _this$ = ecx

; 259  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 260  : 		--this->value[1];
; 261  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	subss	xmm0, xmm1
	movss	DWORD PTR [ecx+16], xmm0
	movss	xmm0, DWORD PTR [ecx+20]
	subss	xmm0, xmm1
	movss	DWORD PTR [ecx+20], xmm0

; 262  : 	}

	ret	0
??F?$tmat2x3@M$01@glm@@QAEAAU01@XZ ENDP			; glm::tmat2x3<float,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??E?$tmat2x3@M$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat2x3@M$01@glm@@QAEAAU01@XZ PROC			; glm::tmat2x3<float,2>::operator++, COMDAT
; _this$ = ecx

; 251  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 252  : 		++this->value[1];
; 253  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	addss	xmm0, xmm1
	movss	DWORD PTR [ecx+16], xmm0
	movss	xmm0, DWORD PTR [ecx+20]
	addss	xmm0, xmm1
	movss	DWORD PTR [ecx+20], xmm0

; 254  : 	}

	ret	0
??E?$tmat2x3@M$01@glm@@QAEAAU01@XZ ENDP			; glm::tmat2x3<float,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tmat2x3@M$01@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tmat2x3@M$01@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tmat2x3<float,2>::operator=, COMDAT
; _this$ = ecx

; 157  : template struct tmat2x3<float32, lowp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	6
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tmat2x3@M$01@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tmat2x3<float,2>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??A?$tmat2x3@M$01@glm@@QBEABU?$tvec3@M$01@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat2x3@M$01@glm@@QBEABU?$tvec3@M$01@1@H@Z PROC	; glm::tmat2x3<float,2>::operator[], COMDAT
; _this$ = ecx

; 166  : 	{

	push	ebp
	mov	ebp, esp

; 167  : 		assert(i < this->length());
; 168  : 		return this->value[i];

	imul	eax, DWORD PTR _i$[ebp], 12
	add	eax, ecx

; 169  : 	}

	pop	ebp
	ret	4
??A?$tmat2x3@M$01@glm@@QBEABU?$tvec3@M$01@1@H@Z ENDP	; glm::tmat2x3<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??A?$tmat2x3@M$01@glm@@QAEAAU?$tvec3@M$01@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat2x3@M$01@glm@@QAEAAU?$tvec3@M$01@1@H@Z PROC	; glm::tmat2x3<float,2>::operator[], COMDAT
; _this$ = ecx

; 159  : 	{

	push	ebp
	mov	ebp, esp

; 160  : 		assert(i < this->length());
; 161  : 		return this->value[i];

	imul	eax, DWORD PTR _i$[ebp], 12
	add	eax, ecx

; 162  : 	}

	pop	ebp
	ret	4
??A?$tmat2x3@M$01@glm@@QAEAAU?$tvec3@M$01@1@H@Z ENDP	; glm::tmat2x3<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.hpp
;	COMDAT ?length@?$tmat2x3@M$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat2x3@M$01@glm@@SAHXZ PROC			; glm::tmat2x3<float,2>::length, COMDAT

; 73   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	push	2
	pop	eax
	ret	0
?length@?$tmat2x3@M$01@glm@@SAHXZ ENDP			; glm::tmat2x3<float,2>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$01@glm@@QAE@ABU?$tmat4x3@M$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x3@M$01@glm@@QAE@ABU?$tmat4x3@M$01@1@@Z PROC	; glm::tmat2x3<float,2>::tmat2x3<float,2>, COMDAT
; _this$ = ecx

; 150  : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	lea	eax, DWORD PTR [ecx+8]
	inc	edx
$LL4@tmat2x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat2x3

; 151  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	esi, eax
	mov	edi, ecx
	movsd
	movsd
	movsd

; 152  : 		this->value[1] = m[1];

	lea	esi, DWORD PTR [eax+12]

; 153  : 	}

	mov	eax, ecx
	lea	edi, DWORD PTR [ecx+12]
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tmat2x3@M$01@glm@@QAE@ABU?$tmat4x3@M$01@1@@Z ENDP	; glm::tmat2x3<float,2>::tmat2x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$01@glm@@QAE@ABU?$tmat4x2@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat2x3@M$01@glm@@QAE@ABU?$tmat4x2@M$01@1@@Z PROC	; glm::tmat2x3<float,2>::tmat2x3<float,2>, COMDAT
; _this$ = ecx

; 143  : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	lea	eax, DWORD PTR [ecx+8]
	sub	esp, 12					; 0000000cH
	inc	edx
$LL4@tmat2x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat2x3

; 144  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	and	DWORD PTR $T2[ebp+8], 0
	push	esi
	push	edi
	movss	xmm0, DWORD PTR [eax]
	lea	esi, DWORD PTR $T2[ebp]
	movss	DWORD PTR $T2[ebp], xmm0
	mov	edi, ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movsd
	movsd
	movsd

; 145  : 		this->value[1] = col_type(m[1], 0);

	movss	xmm0, DWORD PTR [eax+8]
	lea	edi, DWORD PTR [ecx+12]
	and	DWORD PTR $T1[ebp+8], 0
	lea	esi, DWORD PTR $T1[ebp]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+12]

; 146  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+4], xmm0
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x3@M$01@glm@@QAE@ABU?$tmat4x2@M$01@1@@Z ENDP	; glm::tmat2x3<float,2>::tmat2x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$01@glm@@QAE@ABU?$tmat3x4@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat2x3@M$01@glm@@QAE@ABU?$tmat3x4@M$01@1@@Z PROC	; glm::tmat2x3<float,2>::tmat2x3<float,2>, COMDAT
; _this$ = ecx

; 136  : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	lea	eax, DWORD PTR [ecx+8]
	sub	esp, 12					; 0000000cH
	inc	edx
$LL4@tmat2x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat2x3

; 137  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T2[ebp]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T2[ebp+8], xmm0
	movsd
	movsd
	movsd

; 138  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [eax+16]
	lea	edi, DWORD PTR [ecx+12]
	movss	DWORD PTR $T1[ebp], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+24]

; 139  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+8], xmm0
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x3@M$01@glm@@QAE@ABU?$tmat3x4@M$01@1@@Z ENDP	; glm::tmat2x3<float,2>::tmat2x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$01@glm@@QAE@ABU?$tmat3x2@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat2x3@M$01@glm@@QAE@ABU?$tmat3x2@M$01@1@@Z PROC	; glm::tmat2x3<float,2>::tmat2x3<float,2>, COMDAT
; _this$ = ecx

; 129  : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	lea	eax, DWORD PTR [ecx+8]
	sub	esp, 12					; 0000000cH
	inc	edx
$LL4@tmat2x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat2x3

; 130  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	and	DWORD PTR $T2[ebp+8], 0
	push	esi
	push	edi
	movss	xmm0, DWORD PTR [eax]
	lea	esi, DWORD PTR $T2[ebp]
	movss	DWORD PTR $T2[ebp], xmm0
	mov	edi, ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movsd
	movsd
	movsd

; 131  : 		this->value[1] = col_type(m[1], 0);

	movss	xmm0, DWORD PTR [eax+8]
	lea	edi, DWORD PTR [ecx+12]
	and	DWORD PTR $T1[ebp+8], 0
	lea	esi, DWORD PTR $T1[ebp]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+12]

; 132  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+4], xmm0
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x3@M$01@glm@@QAE@ABU?$tmat3x2@M$01@1@@Z ENDP	; glm::tmat2x3<float,2>::tmat2x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$01@glm@@QAE@ABU?$tmat2x4@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat2x3@M$01@glm@@QAE@ABU?$tmat2x4@M$01@1@@Z PROC	; glm::tmat2x3<float,2>::tmat2x3<float,2>, COMDAT
; _this$ = ecx

; 122  : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	lea	eax, DWORD PTR [ecx+8]
	sub	esp, 12					; 0000000cH
	inc	edx
$LL4@tmat2x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat2x3

; 123  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T2[ebp]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T2[ebp+8], xmm0
	movsd
	movsd
	movsd

; 124  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [eax+16]
	lea	edi, DWORD PTR [ecx+12]
	movss	DWORD PTR $T1[ebp], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+24]

; 125  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+8], xmm0
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x3@M$01@glm@@QAE@ABU?$tmat2x4@M$01@1@@Z ENDP	; glm::tmat2x3<float,2>::tmat2x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$01@glm@@QAE@ABU?$tmat4x4@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat2x3@M$01@glm@@QAE@ABU?$tmat4x4@M$01@1@@Z PROC	; glm::tmat2x3<float,2>::tmat2x3<float,2>, COMDAT
; _this$ = ecx

; 115  : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	lea	eax, DWORD PTR [ecx+8]
	sub	esp, 12					; 0000000cH
	inc	edx
$LL4@tmat2x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat2x3

; 116  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T2[ebp]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T2[ebp+8], xmm0
	movsd
	movsd
	movsd

; 117  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [eax+16]
	lea	edi, DWORD PTR [ecx+12]
	movss	DWORD PTR $T1[ebp], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+24]

; 118  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+8], xmm0
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x3@M$01@glm@@QAE@ABU?$tmat4x4@M$01@1@@Z ENDP	; glm::tmat2x3<float,2>::tmat2x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$01@glm@@QAE@ABU?$tmat3x3@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat2x3@M$01@glm@@QAE@ABU?$tmat3x3@M$01@1@@Z PROC	; glm::tmat2x3<float,2>::tmat2x3<float,2>, COMDAT
; _this$ = ecx

; 108  : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	lea	eax, DWORD PTR [ecx+8]
	sub	esp, 12					; 0000000cH
	inc	edx
$LL4@tmat2x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat2x3

; 109  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	esi, eax
	lea	edi, DWORD PTR $T2[ebp]
	movsd
	movsd
	movsd
	mov	edi, ecx
	lea	esi, DWORD PTR $T2[ebp]
	movsd
	movsd
	movsd

; 110  : 		this->value[1] = col_type(m[1]);

	lea	esi, DWORD PTR [eax+12]

; 111  : 	}

	mov	eax, ecx
	lea	edi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	lea	edi, DWORD PTR [ecx+12]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x3@M$01@glm@@QAE@ABU?$tmat3x3@M$01@1@@Z ENDP	; glm::tmat2x3<float,2>::tmat2x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$01@glm@@QAE@ABU?$tmat2x2@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat2x3@M$01@glm@@QAE@ABU?$tmat2x2@M$01@1@@Z PROC	; glm::tmat2x3<float,2>::tmat2x3<float,2>, COMDAT
; _this$ = ecx

; 101  : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	lea	eax, DWORD PTR [ecx+8]
	sub	esp, 12					; 0000000cH
	inc	edx
$LL4@tmat2x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat2x3

; 102  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	and	DWORD PTR $T2[ebp+8], 0
	push	esi
	push	edi
	movss	xmm0, DWORD PTR [eax]
	lea	esi, DWORD PTR $T2[ebp]
	movss	DWORD PTR $T2[ebp], xmm0
	mov	edi, ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movsd
	movsd
	movsd

; 103  : 		this->value[1] = col_type(m[1], 0);

	movss	xmm0, DWORD PTR [eax+8]
	lea	edi, DWORD PTR [ecx+12]
	and	DWORD PTR $T1[ebp+8], 0
	lea	esi, DWORD PTR $T1[ebp]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+12]

; 104  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+4], xmm0
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x3@M$01@glm@@QAE@ABU?$tmat2x2@M$01@1@@Z ENDP	; glm::tmat2x3<float,2>::tmat2x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$01@glm@@QAE@ABU?$tvec3@M$01@1@0@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
??0?$tmat2x3@M$01@glm@@QAE@ABU?$tvec3@M$01@1@0@Z PROC	; glm::tmat2x3<float,2>::tmat2x3<float,2>, COMDAT
; _this$ = ecx

; 60   : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	lea	eax, DWORD PTR [ecx+8]
	inc	edx
$LL4@tmat2x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat2x3

; 61   : 		this->value[0] = v0;

	push	esi
	mov	esi, DWORD PTR _v0$[ebp]

; 62   : 		this->value[1] = v1;
; 63   : 	}

	mov	eax, ecx
	push	edi
	mov	edi, ecx
	movsd
	movsd
	movsd
	mov	esi, DWORD PTR _v1$[ebp]
	lea	edi, DWORD PTR [ecx+12]
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	8
??0?$tmat2x3@M$01@glm@@QAE@ABU?$tvec3@M$01@1@0@Z ENDP	; glm::tmat2x3<float,2>::tmat2x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$01@glm@@QAE@MMMMMM@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_z0$ = 16						; size = 4
_x1$ = 20						; size = 4
_y1$ = 24						; size = 4
_z1$ = 28						; size = 4
??0?$tmat2x3@M$01@glm@@QAE@MMMMMM@Z PROC		; glm::tmat2x3<float,2>::tmat2x3<float,2>, COMDAT
; _this$ = ecx

; 53   : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	lea	eax, DWORD PTR [ecx+8]
	sub	esp, 12					; 0000000cH
	inc	edx
$LL4@tmat2x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat2x3

; 54   : 		this->value[0] = col_type(x0, y0, z0);

	movss	xmm0, DWORD PTR _x0$[ebp]

; 55   : 		this->value[1] = col_type(x1, y1, z1);
; 56   : 	}

	mov	eax, ecx
	push	esi
	movss	DWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	movss	xmm0, DWORD PTR _y0$[ebp]
	push	edi
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	edi, ecx
	movss	xmm0, DWORD PTR _z0$[ebp]
	movss	DWORD PTR $T2[ebp+8], xmm0
	movss	xmm0, DWORD PTR _x1$[ebp]
	movsd
	movsd
	movsd
	movss	DWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+12]
	movss	xmm0, DWORD PTR _y1$[ebp]
	lea	esi, DWORD PTR $T1[ebp]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR _z1$[ebp]
	movss	DWORD PTR $T1[ebp+8], xmm0
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
??0?$tmat2x3@M$01@glm@@QAE@MMMMMM@Z ENDP		; glm::tmat2x3<float,2>::tmat2x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$01@glm@@QAE@M@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
_scalar$ = 8						; size = 4
??0?$tmat2x3@M$01@glm@@QAE@M@Z PROC			; glm::tmat2x3<float,2>::tmat2x3<float,2>, COMDAT
; _this$ = ecx

; 42   : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	lea	eax, DWORD PTR [ecx+8]
	sub	esp, 12					; 0000000cH
	inc	edx
$LL4@tmat2x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat2x3

; 43   : 		this->value[0] = col_type(scalar, 0, 0);

	and	DWORD PTR $T2[ebp+4], 0

; 44   : 		this->value[1] = col_type(0, scalar, 0);
; 45   : 	}

	mov	eax, ecx
	and	DWORD PTR $T2[ebp+8], 0
	movss	xmm0, DWORD PTR _scalar$[ebp]
	push	esi
	push	edi
	movss	DWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	mov	edi, ecx
	movsd
	movsd
	movsd
	and	DWORD PTR $T1[ebp], 0
	lea	edi, DWORD PTR [ecx+12]
	and	DWORD PTR $T1[ebp+8], 0
	lea	esi, DWORD PTR $T1[ebp]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x3@M$01@glm@@QAE@M@Z ENDP			; glm::tmat2x3<float,2>::tmat2x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat2x3@M$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat2x3<float,2>::tmat2x3<float,2>, COMDAT
; _this$ = ecx

; 38   : 	{}

	xor	edx, edx
	lea	eax, DWORD PTR [ecx+8]
	inc	edx
$LL4@tmat2x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat2x3
	mov	eax, ecx
	ret	4
??0?$tmat2x3@M$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat2x3<float,2>::tmat2x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tmat2x3@M$01@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tmat2x3@M$01@glm@@QAE@ABU01@@Z PROC		; glm::tmat2x3<float,2>::tmat2x3<float,2>, COMDAT
; _this$ = ecx

; 157  : template struct tmat2x3<float32, lowp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	6
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tmat2x3@M$01@glm@@QAE@ABU01@@Z ENDP		; glm::tmat2x3<float,2>::tmat2x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$01@glm@@QAE@XZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
??0?$tmat2x3@M$01@glm@@QAE@XZ PROC			; glm::tmat2x3<float,2>::tmat2x3<float,2>, COMDAT
; _this$ = ecx

; 11   : 		{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	lea	eax, DWORD PTR [ecx+8]
	sub	esp, 12					; 0000000cH
	inc	edx
$LL4@tmat2x3:
	and	DWORD PTR [eax-8], 0
	and	DWORD PTR [eax-4], 0
	and	DWORD PTR [eax], 0
	dec	edx
	lea	eax, DWORD PTR [eax+12]
	jns	SHORT $LL4@tmat2x3

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0, 0);

	and	DWORD PTR $T2[ebp+4], 0

; 14   : 				this->value[1] = col_type(0, 1, 0);
; 15   : #			endif
; 16   : 		}

	mov	eax, ecx
	and	DWORD PTR $T2[ebp+8], 0
	push	esi
	push	edi
	mov	DWORD PTR $T2[ebp], 1065353216		; 3f800000H
	lea	esi, DWORD PTR $T2[ebp]
	mov	edi, ecx
	movsd
	movsd
	movsd
	and	DWORD PTR $T1[ebp], 0
	lea	edi, DWORD PTR [ecx+12]
	and	DWORD PTR $T1[ebp+8], 0
	lea	esi, DWORD PTR $T1[ebp]
	mov	DWORD PTR $T1[ebp+4], 1065353216	; 3f800000H
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$tmat2x3@M$01@glm@@QAE@XZ ENDP			; glm::tmat2x3<float,2>::tmat2x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??F?$tmat2x2@N$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat2x2@N$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tmat2x2<double,0>::operator--, COMDAT
; _this$ = ecx

; 288  : 	{

	push	ebp
	mov	ebp, esp

; 289  : 		tmat2x2<T, P> Result(*this);
; 290  : 		--*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	mov	edx, ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	movups	xmm0, XMMWORD PTR [edx]
	push	8
	pop	ecx
	subpd	xmm0, xmm1
	mov	esi, edx
	mov	edi, eax
	rep movsd
	movups	XMMWORD PTR [edx], xmm0
	pop	edi
	movups	xmm0, XMMWORD PTR [edx+16]
	pop	esi
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+16], xmm0

; 291  : 		return Result;
; 292  : 	}

	pop	ebp
	ret	8
??F?$tmat2x2@N$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tmat2x2<double,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??E?$tmat2x2@N$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat2x2@N$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tmat2x2<double,0>::operator++, COMDAT
; _this$ = ecx

; 280  : 	{

	push	ebp
	mov	ebp, esp

; 281  : 		tmat2x2<T, P> Result(*this);
; 282  : 		++*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	mov	edx, ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	movups	xmm0, XMMWORD PTR [edx]
	push	8
	pop	ecx
	addpd	xmm0, xmm1
	mov	esi, edx
	mov	edi, eax
	rep movsd
	movups	XMMWORD PTR [edx], xmm0
	pop	edi
	movups	xmm0, XMMWORD PTR [edx+16]
	pop	esi
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+16], xmm0

; 283  : 		return Result;
; 284  : 	}

	pop	ebp
	ret	8
??E?$tmat2x2@N$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tmat2x2<double,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??F?$tmat2x2@N$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat2x2@N$0A@@glm@@QAEAAU01@XZ PROC		; glm::tmat2x2<double,0>::operator--, COMDAT
; _this$ = ecx

; 273  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 274  : 		--this->value[1];
; 275  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0

; 276  : 	}

	ret	0
??F?$tmat2x2@N$0A@@glm@@QAEAAU01@XZ ENDP		; glm::tmat2x2<double,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??E?$tmat2x2@N$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat2x2@N$0A@@glm@@QAEAAU01@XZ PROC		; glm::tmat2x2<double,0>::operator++, COMDAT
; _this$ = ecx

; 265  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 266  : 		++this->value[1];
; 267  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0

; 268  : 	}

	ret	0
??E?$tmat2x2@N$0A@@glm@@QAEAAU01@XZ ENDP		; glm::tmat2x2<double,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tmat2x2@N$0A@@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tmat2x2@N$0A@@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tmat2x2<double,0>::operator=, COMDAT
; _this$ = ecx

; 154  : template struct tmat2x2<float64, highp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	8
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tmat2x2@N$0A@@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tmat2x2<double,0>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??A?$tmat2x2@N$0A@@glm@@QBEABU?$tvec2@N$0A@@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat2x2@N$0A@@glm@@QBEABU?$tvec2@N$0A@@1@H@Z PROC	; glm::tmat2x2<double,0>::operator[], COMDAT
; _this$ = ecx

; 166  : 	{

	push	ebp
	mov	ebp, esp

; 167  : 		assert(i < this->length());
; 168  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, ecx

; 169  : 	}

	pop	ebp
	ret	4
??A?$tmat2x2@N$0A@@glm@@QBEABU?$tvec2@N$0A@@1@H@Z ENDP	; glm::tmat2x2<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??A?$tmat2x2@N$0A@@glm@@QAEAAU?$tvec2@N$0A@@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat2x2@N$0A@@glm@@QAEAAU?$tvec2@N$0A@@1@H@Z PROC	; glm::tmat2x2<double,0>::operator[], COMDAT
; _this$ = ecx

; 159  : 	{

	push	ebp
	mov	ebp, esp

; 160  : 		assert(i < this->length());
; 161  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, ecx

; 162  : 	}

	pop	ebp
	ret	4
??A?$tmat2x2@N$0A@@glm@@QAEAAU?$tvec2@N$0A@@1@H@Z ENDP	; glm::tmat2x2<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.hpp
;	COMDAT ?length@?$tmat2x2@N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat2x2@N$0A@@glm@@SAHXZ PROC			; glm::tmat2x2<double,0>::length, COMDAT

; 72   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	push	2
	pop	eax
	ret	0
?length@?$tmat2x2@N$0A@@glm@@SAHXZ ENDP			; glm::tmat2x2<double,0>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$0A@@glm@@QAE@ABU?$tmat4x3@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat2x2@N$0A@@glm@@QAE@ABU?$tmat4x3@N$0A@@1@@Z PROC ; glm::tmat2x2<double,0>::tmat2x2<double,0>, COMDAT
; _this$ = ecx

; 150  : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	inc	edx
	xorps	xmm0, xmm0
$LL4@tmat2x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat2x2

; 151  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T2[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 152  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+24]
	lea	edi, DWORD PTR [ecx+16]

; 153  : 	}

	mov	eax, ecx
	lea	esi, DWORD PTR $T1[ebp]
	movups	XMMWORD PTR $T1[ebp], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x2@N$0A@@glm@@QAE@ABU?$tmat4x3@N$0A@@1@@Z ENDP ; glm::tmat2x2<double,0>::tmat2x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$0A@@glm@@QAE@ABU?$tmat3x4@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat2x2@N$0A@@glm@@QAE@ABU?$tmat3x4@N$0A@@1@@Z PROC ; glm::tmat2x2<double,0>::tmat2x2<double,0>, COMDAT
; _this$ = ecx

; 143  : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	inc	edx
	xorps	xmm0, xmm0
$LL4@tmat2x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat2x2

; 144  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T2[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 145  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+32]
	lea	edi, DWORD PTR [ecx+16]

; 146  : 	}

	mov	eax, ecx
	lea	esi, DWORD PTR $T1[ebp]
	movups	XMMWORD PTR $T1[ebp], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x2@N$0A@@glm@@QAE@ABU?$tmat3x4@N$0A@@1@@Z ENDP ; glm::tmat2x2<double,0>::tmat2x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$0A@@glm@@QAE@ABU?$tmat4x2@N$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x2@N$0A@@glm@@QAE@ABU?$tmat4x2@N$0A@@1@@Z PROC ; glm::tmat2x2<double,0>::tmat2x2<double,0>, COMDAT
; _this$ = ecx

; 136  : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	mov	eax, ecx
	inc	edx
	xorps	xmm0, xmm0
$LL4@tmat2x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat2x2

; 137  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	esi, eax
	mov	edi, ecx
	movsd
	movsd
	movsd
	movsd

; 138  : 		this->value[1] = m[1];

	lea	esi, DWORD PTR [eax+16]

; 139  : 	}

	mov	eax, ecx
	lea	edi, DWORD PTR [ecx+16]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tmat2x2@N$0A@@glm@@QAE@ABU?$tmat4x2@N$0A@@1@@Z ENDP ; glm::tmat2x2<double,0>::tmat2x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$0A@@glm@@QAE@ABU?$tmat2x4@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat2x2@N$0A@@glm@@QAE@ABU?$tmat2x4@N$0A@@1@@Z PROC ; glm::tmat2x2<double,0>::tmat2x2<double,0>, COMDAT
; _this$ = ecx

; 129  : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	inc	edx
	xorps	xmm0, xmm0
$LL4@tmat2x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat2x2

; 130  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T2[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 131  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+32]
	lea	edi, DWORD PTR [ecx+16]

; 132  : 	}

	mov	eax, ecx
	lea	esi, DWORD PTR $T1[ebp]
	movups	XMMWORD PTR $T1[ebp], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x2@N$0A@@glm@@QAE@ABU?$tmat2x4@N$0A@@1@@Z ENDP ; glm::tmat2x2<double,0>::tmat2x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$0A@@glm@@QAE@ABU?$tmat3x2@N$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x2@N$0A@@glm@@QAE@ABU?$tmat3x2@N$0A@@1@@Z PROC ; glm::tmat2x2<double,0>::tmat2x2<double,0>, COMDAT
; _this$ = ecx

; 122  : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	mov	eax, ecx
	inc	edx
	xorps	xmm0, xmm0
$LL4@tmat2x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat2x2

; 123  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	esi, eax
	mov	edi, ecx
	movsd
	movsd
	movsd
	movsd

; 124  : 		this->value[1] = m[1];

	lea	esi, DWORD PTR [eax+16]

; 125  : 	}

	mov	eax, ecx
	lea	edi, DWORD PTR [ecx+16]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tmat2x2@N$0A@@glm@@QAE@ABU?$tmat3x2@N$0A@@1@@Z ENDP ; glm::tmat2x2<double,0>::tmat2x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$0A@@glm@@QAE@ABU?$tmat2x3@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat2x2@N$0A@@glm@@QAE@ABU?$tmat2x3@N$0A@@1@@Z PROC ; glm::tmat2x2<double,0>::tmat2x2<double,0>, COMDAT
; _this$ = ecx

; 115  : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	inc	edx
	xorps	xmm0, xmm0
$LL4@tmat2x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat2x2

; 116  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T2[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 117  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+24]
	lea	edi, DWORD PTR [ecx+16]

; 118  : 	}

	mov	eax, ecx
	lea	esi, DWORD PTR $T1[ebp]
	movups	XMMWORD PTR $T1[ebp], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x2@N$0A@@glm@@QAE@ABU?$tmat2x3@N$0A@@1@@Z ENDP ; glm::tmat2x2<double,0>::tmat2x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$0A@@glm@@QAE@ABU?$tmat4x4@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat2x2@N$0A@@glm@@QAE@ABU?$tmat4x4@N$0A@@1@@Z PROC ; glm::tmat2x2<double,0>::tmat2x2<double,0>, COMDAT
; _this$ = ecx

; 108  : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	inc	edx
	xorps	xmm0, xmm0
$LL4@tmat2x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat2x2

; 109  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T2[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 110  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+32]
	lea	edi, DWORD PTR [ecx+16]

; 111  : 	}

	mov	eax, ecx
	lea	esi, DWORD PTR $T1[ebp]
	movups	XMMWORD PTR $T1[ebp], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x2@N$0A@@glm@@QAE@ABU?$tmat4x4@N$0A@@1@@Z ENDP ; glm::tmat2x2<double,0>::tmat2x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$0A@@glm@@QAE@ABU?$tmat3x3@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat2x2@N$0A@@glm@@QAE@ABU?$tmat3x3@N$0A@@1@@Z PROC ; glm::tmat2x2<double,0>::tmat2x2<double,0>, COMDAT
; _this$ = ecx

; 101  : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	inc	edx
	xorps	xmm0, xmm0
$LL4@tmat2x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat2x2

; 102  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T2[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 103  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+24]
	lea	edi, DWORD PTR [ecx+16]

; 104  : 	}

	mov	eax, ecx
	lea	esi, DWORD PTR $T1[ebp]
	movups	XMMWORD PTR $T1[ebp], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x2@N$0A@@glm@@QAE@ABU?$tmat3x3@N$0A@@1@@Z ENDP ; glm::tmat2x2<double,0>::tmat2x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$0A@@glm@@QAE@ABU?$tvec2@N$0A@@1@0@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
??0?$tmat2x2@N$0A@@glm@@QAE@ABU?$tvec2@N$0A@@1@0@Z PROC	; glm::tmat2x2<double,0>::tmat2x2<double,0>, COMDAT
; _this$ = ecx

; 62   : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	mov	eax, ecx
	inc	edx
	xorps	xmm0, xmm0
$LL4@tmat2x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat2x2

; 63   : 		this->value[0] = v0;

	push	esi
	mov	esi, DWORD PTR _v0$[ebp]

; 64   : 		this->value[1] = v1;
; 65   : 	}

	mov	eax, ecx
	push	edi
	mov	edi, ecx
	movsd
	movsd
	movsd
	movsd
	mov	esi, DWORD PTR _v1$[ebp]
	lea	edi, DWORD PTR [ecx+16]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	8
??0?$tmat2x2@N$0A@@glm@@QAE@ABU?$tvec2@N$0A@@1@0@Z ENDP	; glm::tmat2x2<double,0>::tmat2x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$0A@@glm@@QAE@ABN000@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_x1$ = 16						; size = 4
_y1$ = 20						; size = 4
??0?$tmat2x2@N$0A@@glm@@QAE@ABN000@Z PROC		; glm::tmat2x2<double,0>::tmat2x2<double,0>, COMDAT
; _this$ = ecx

; 55   : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	inc	edx
	xorps	xmm0, xmm0
$LL4@tmat2x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat2x2

; 56   : 		this->value[0] = col_type(x0, y0);

	mov	eax, DWORD PTR _x0$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T2[ebp]
	movsd	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR _y0$[ebp]
	movsd	QWORD PTR $T2[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax]

; 57   : 		this->value[1] = col_type(x1, y1);

	mov	eax, DWORD PTR _x1$[ebp]
	movsd	QWORD PTR $T2[ebp+8], xmm0
	movsd
	movsd
	movsd
	movsd
	movsd	xmm0, QWORD PTR [eax]
	lea	edi, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _y1$[ebp]
	lea	esi, DWORD PTR $T1[ebp]
	movsd	QWORD PTR $T1[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax]

; 58   : 	}

	mov	eax, ecx
	movsd	QWORD PTR $T1[ebp+8], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??0?$tmat2x2@N$0A@@glm@@QAE@ABN000@Z ENDP		; glm::tmat2x2<double,0>::tmat2x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$0A@@glm@@QAE@N@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_scalar$ = 8						; size = 8
??0?$tmat2x2@N$0A@@glm@@QAE@N@Z PROC			; glm::tmat2x2<double,0>::tmat2x2<double,0>, COMDAT
; _this$ = ecx

; 44   : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	inc	edx
	xorps	xmm1, xmm1
$LL4@tmat2x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm1
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat2x2

; 45   : 		this->value[0] = col_type(scalar, 0);

	movsd	xmm0, QWORD PTR _scalar$[ebp]

; 46   : 		this->value[1] = col_type(0, scalar);
; 47   : 	}

	mov	eax, ecx
	push	esi
	push	edi
	movsd	QWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	movsd	QWORD PTR $T2[ebp+8], xmm1
	mov	edi, ecx
	movsd
	movsd
	movsd
	movsd
	movsd	QWORD PTR $T1[ebp], xmm1
	lea	edi, DWORD PTR [ecx+16]
	movsd	QWORD PTR $T1[ebp+8], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$tmat2x2@N$0A@@glm@@QAE@N@Z ENDP			; glm::tmat2x2<double,0>::tmat2x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat2x2@N$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat2x2<double,0>::tmat2x2<double,0>, COMDAT
; _this$ = ecx

; 40   : 	{}

	xor	edx, edx
	mov	eax, ecx
	inc	edx
	xorps	xmm0, xmm0
$LL4@tmat2x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat2x2
	mov	eax, ecx
	ret	4
??0?$tmat2x2@N$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat2x2<double,0>::tmat2x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tmat2x2@N$0A@@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tmat2x2@N$0A@@glm@@QAE@ABU01@@Z PROC		; glm::tmat2x2<double,0>::tmat2x2<double,0>, COMDAT
; _this$ = ecx

; 154  : template struct tmat2x2<float64, highp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	8
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tmat2x2@N$0A@@glm@@QAE@ABU01@@Z ENDP		; glm::tmat2x2<double,0>::tmat2x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
??0?$tmat2x2@N$0A@@glm@@QAE@XZ PROC			; glm::tmat2x2<double,0>::tmat2x2<double,0>, COMDAT
; _this$ = ecx

; 13   : 		{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	inc	edx
	xorps	xmm0, xmm0
$LL4@tmat2x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat2x2

; 14   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 15   : 				this->value[0] = col_type(1, 0);
; 16   : 				this->value[1] = col_type(0, 1);
; 17   : #			endif
; 18   : 		}

	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	mov	eax, ecx
	push	esi
	push	edi
	movupd	XMMWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	mov	edi, ecx
	movaps	xmm0, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	movsd
	movsd
	movsd
	movsd
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+16]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$tmat2x2@N$0A@@glm@@QAE@XZ ENDP			; glm::tmat2x2<double,0>::tmat2x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??F?$tmat2x2@M$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat2x2@M$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tmat2x2<float,0>::operator--, COMDAT
; _this$ = ecx

; 288  : 	{

	push	ebp
	mov	ebp, esp

; 289  : 		tmat2x2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 290  : 		--*this;

	movups	xmm0, XMMWORD PTR [ecx]
	push	esi
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	mov	esi, ecx
	push	edi
	mov	edi, eax
	subps	xmm0, xmm1
	movsd
	movsd
	movsd
	movsd
	pop	edi
	movups	XMMWORD PTR [ecx], xmm0
	pop	esi

; 291  : 		return Result;
; 292  : 	}

	pop	ebp
	ret	8
??F?$tmat2x2@M$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tmat2x2<float,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??E?$tmat2x2@M$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat2x2@M$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tmat2x2<float,0>::operator++, COMDAT
; _this$ = ecx

; 280  : 	{

	push	ebp
	mov	ebp, esp

; 281  : 		tmat2x2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 282  : 		++*this;

	movups	xmm0, XMMWORD PTR [ecx]
	push	esi
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	mov	esi, ecx
	push	edi
	mov	edi, eax
	addps	xmm0, xmm1
	movsd
	movsd
	movsd
	movsd
	pop	edi
	movups	XMMWORD PTR [ecx], xmm0
	pop	esi

; 283  : 		return Result;
; 284  : 	}

	pop	ebp
	ret	8
??E?$tmat2x2@M$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tmat2x2<float,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??F?$tmat2x2@M$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat2x2@M$0A@@glm@@QAEAAU01@XZ PROC		; glm::tmat2x2<float,0>::operator--, COMDAT
; _this$ = ecx

; 273  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 274  : 		--this->value[1];
; 275  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0

; 276  : 	}

	ret	0
??F?$tmat2x2@M$0A@@glm@@QAEAAU01@XZ ENDP		; glm::tmat2x2<float,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??E?$tmat2x2@M$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat2x2@M$0A@@glm@@QAEAAU01@XZ PROC		; glm::tmat2x2<float,0>::operator++, COMDAT
; _this$ = ecx

; 265  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 266  : 		++this->value[1];
; 267  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0

; 268  : 	}

	ret	0
??E?$tmat2x2@M$0A@@glm@@QAEAAU01@XZ ENDP		; glm::tmat2x2<float,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tmat2x2@M$0A@@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tmat2x2@M$0A@@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tmat2x2<float,0>::operator=, COMDAT
; _this$ = ecx

; 153  : template struct tmat2x2<float32, highp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	mov	edi, ecx
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tmat2x2@M$0A@@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tmat2x2<float,0>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??A?$tmat2x2@M$0A@@glm@@QBEABU?$tvec2@M$0A@@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat2x2@M$0A@@glm@@QBEABU?$tvec2@M$0A@@1@H@Z PROC	; glm::tmat2x2<float,0>::operator[], COMDAT
; _this$ = ecx

; 166  : 	{

	push	ebp
	mov	ebp, esp

; 167  : 		assert(i < this->length());
; 168  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 169  : 	}

	pop	ebp
	ret	4
??A?$tmat2x2@M$0A@@glm@@QBEABU?$tvec2@M$0A@@1@H@Z ENDP	; glm::tmat2x2<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??A?$tmat2x2@M$0A@@glm@@QAEAAU?$tvec2@M$0A@@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat2x2@M$0A@@glm@@QAEAAU?$tvec2@M$0A@@1@H@Z PROC	; glm::tmat2x2<float,0>::operator[], COMDAT
; _this$ = ecx

; 159  : 	{

	push	ebp
	mov	ebp, esp

; 160  : 		assert(i < this->length());
; 161  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 162  : 	}

	pop	ebp
	ret	4
??A?$tmat2x2@M$0A@@glm@@QAEAAU?$tvec2@M$0A@@1@H@Z ENDP	; glm::tmat2x2<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.hpp
;	COMDAT ?length@?$tmat2x2@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat2x2@M$0A@@glm@@SAHXZ PROC			; glm::tmat2x2<float,0>::length, COMDAT

; 72   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	push	2
	pop	eax
	ret	0
?length@?$tmat2x2@M$0A@@glm@@SAHXZ ENDP			; glm::tmat2x2<float,0>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$0A@@glm@@QAE@ABU?$tmat4x3@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat2x2@M$0A@@glm@@QAE@ABU?$tmat4x3@M$0A@@1@@Z PROC ; glm::tmat2x2<float,0>::tmat2x2<float,0>, COMDAT
; _this$ = ecx

; 150  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	mov	edx, ecx
	xor	ecx, ecx
	mov	eax, edx
	inc	ecx
$LL4@tmat2x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	ecx
	jns	SHORT $LL4@tmat2x2

; 151  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 152  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+12]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+12], eax

; 153  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x2@M$0A@@glm@@QAE@ABU?$tmat4x3@M$0A@@1@@Z ENDP ; glm::tmat2x2<float,0>::tmat2x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$0A@@glm@@QAE@ABU?$tmat3x4@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat2x2@M$0A@@glm@@QAE@ABU?$tmat3x4@M$0A@@1@@Z PROC ; glm::tmat2x2<float,0>::tmat2x2<float,0>, COMDAT
; _this$ = ecx

; 143  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	mov	edx, ecx
	xor	ecx, ecx
	mov	eax, edx
	inc	ecx
$LL4@tmat2x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	ecx
	jns	SHORT $LL4@tmat2x2

; 144  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 145  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+16]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+12], eax

; 146  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x2@M$0A@@glm@@QAE@ABU?$tmat3x4@M$0A@@1@@Z ENDP ; glm::tmat2x2<float,0>::tmat2x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$0A@@glm@@QAE@ABU?$tmat4x2@M$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x2@M$0A@@glm@@QAE@ABU?$tmat4x2@M$0A@@1@@Z PROC ; glm::tmat2x2<float,0>::tmat2x2<float,0>, COMDAT
; _this$ = ecx

; 136  : 	{

	push	ebp
	mov	ebp, esp
	mov	edx, ecx
	xor	ecx, ecx
	mov	eax, edx
	inc	ecx
$LL4@tmat2x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	ecx
	jns	SHORT $LL4@tmat2x2

; 137  : 		this->value[0] = m[0];

	mov	ecx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax

; 138  : 		this->value[1] = m[1];

	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], eax

; 139  : 	}

	mov	eax, edx
	pop	ebp
	ret	4
??0?$tmat2x2@M$0A@@glm@@QAE@ABU?$tmat4x2@M$0A@@1@@Z ENDP ; glm::tmat2x2<float,0>::tmat2x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$0A@@glm@@QAE@ABU?$tmat2x4@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat2x2@M$0A@@glm@@QAE@ABU?$tmat2x4@M$0A@@1@@Z PROC ; glm::tmat2x2<float,0>::tmat2x2<float,0>, COMDAT
; _this$ = ecx

; 129  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	mov	edx, ecx
	xor	ecx, ecx
	mov	eax, edx
	inc	ecx
$LL4@tmat2x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	ecx
	jns	SHORT $LL4@tmat2x2

; 130  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 131  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+16]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+12], eax

; 132  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x2@M$0A@@glm@@QAE@ABU?$tmat2x4@M$0A@@1@@Z ENDP ; glm::tmat2x2<float,0>::tmat2x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$0A@@glm@@QAE@ABU?$tmat3x2@M$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x2@M$0A@@glm@@QAE@ABU?$tmat3x2@M$0A@@1@@Z PROC ; glm::tmat2x2<float,0>::tmat2x2<float,0>, COMDAT
; _this$ = ecx

; 122  : 	{

	push	ebp
	mov	ebp, esp
	mov	edx, ecx
	xor	ecx, ecx
	mov	eax, edx
	inc	ecx
$LL4@tmat2x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	ecx
	jns	SHORT $LL4@tmat2x2

; 123  : 		this->value[0] = m[0];

	mov	ecx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax

; 124  : 		this->value[1] = m[1];

	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], eax

; 125  : 	}

	mov	eax, edx
	pop	ebp
	ret	4
??0?$tmat2x2@M$0A@@glm@@QAE@ABU?$tmat3x2@M$0A@@1@@Z ENDP ; glm::tmat2x2<float,0>::tmat2x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$0A@@glm@@QAE@ABU?$tmat2x3@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat2x2@M$0A@@glm@@QAE@ABU?$tmat2x3@M$0A@@1@@Z PROC ; glm::tmat2x2<float,0>::tmat2x2<float,0>, COMDAT
; _this$ = ecx

; 115  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	mov	edx, ecx
	xor	ecx, ecx
	mov	eax, edx
	inc	ecx
$LL4@tmat2x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	ecx
	jns	SHORT $LL4@tmat2x2

; 116  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 117  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+12]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+12], eax

; 118  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x2@M$0A@@glm@@QAE@ABU?$tmat2x3@M$0A@@1@@Z ENDP ; glm::tmat2x2<float,0>::tmat2x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$0A@@glm@@QAE@ABU?$tmat4x4@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat2x2@M$0A@@glm@@QAE@ABU?$tmat4x4@M$0A@@1@@Z PROC ; glm::tmat2x2<float,0>::tmat2x2<float,0>, COMDAT
; _this$ = ecx

; 108  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	mov	edx, ecx
	xor	ecx, ecx
	mov	eax, edx
	inc	ecx
$LL4@tmat2x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	ecx
	jns	SHORT $LL4@tmat2x2

; 109  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 110  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+16]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+12], eax

; 111  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x2@M$0A@@glm@@QAE@ABU?$tmat4x4@M$0A@@1@@Z ENDP ; glm::tmat2x2<float,0>::tmat2x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$0A@@glm@@QAE@ABU?$tmat3x3@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat2x2@M$0A@@glm@@QAE@ABU?$tmat3x3@M$0A@@1@@Z PROC ; glm::tmat2x2<float,0>::tmat2x2<float,0>, COMDAT
; _this$ = ecx

; 101  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	mov	edx, ecx
	xor	ecx, ecx
	mov	eax, edx
	inc	ecx
$LL4@tmat2x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	ecx
	jns	SHORT $LL4@tmat2x2

; 102  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 103  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+12]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+12], eax

; 104  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x2@M$0A@@glm@@QAE@ABU?$tmat3x3@M$0A@@1@@Z ENDP ; glm::tmat2x2<float,0>::tmat2x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$0A@@glm@@QAE@ABU?$tvec2@M$0A@@1@0@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
??0?$tmat2x2@M$0A@@glm@@QAE@ABU?$tvec2@M$0A@@1@0@Z PROC	; glm::tmat2x2<float,0>::tmat2x2<float,0>, COMDAT
; _this$ = ecx

; 62   : 	{

	push	ebp
	mov	ebp, esp
	mov	edx, ecx
	xor	ecx, ecx
	mov	eax, edx
	inc	ecx
$LL4@tmat2x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	ecx
	jns	SHORT $LL4@tmat2x2

; 63   : 		this->value[0] = v0;

	mov	ecx, DWORD PTR _v0$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]

; 64   : 		this->value[1] = v1;

	mov	ecx, DWORD PTR _v1$[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+12], eax

; 65   : 	}

	mov	eax, edx
	pop	ebp
	ret	8
??0?$tmat2x2@M$0A@@glm@@QAE@ABU?$tvec2@M$0A@@1@0@Z ENDP	; glm::tmat2x2<float,0>::tmat2x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$0A@@glm@@QAE@ABM000@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_x1$ = 16						; size = 4
_y1$ = 20						; size = 4
??0?$tmat2x2@M$0A@@glm@@QAE@ABM000@Z PROC		; glm::tmat2x2<float,0>::tmat2x2<float,0>, COMDAT
; _this$ = ecx

; 55   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	xor	edx, edx
	mov	eax, ecx
	inc	edx
$LL4@tmat2x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	edx
	jns	SHORT $LL4@tmat2x2

; 56   : 		this->value[0] = col_type(x0, y0);

	mov	eax, DWORD PTR _x0$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _y0$[ebp]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [ecx], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [ecx+4], eax

; 57   : 		this->value[1] = col_type(x1, y1);

	mov	eax, DWORD PTR _x1$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _y1$[ebp]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx+8], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [ecx+12], eax

; 58   : 	}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??0?$tmat2x2@M$0A@@glm@@QAE@ABM000@Z ENDP		; glm::tmat2x2<float,0>::tmat2x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$0A@@glm@@QAE@M@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
_scalar$ = 8						; size = 4
??0?$tmat2x2@M$0A@@glm@@QAE@M@Z PROC			; glm::tmat2x2<float,0>::tmat2x2<float,0>, COMDAT
; _this$ = ecx

; 44   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	xor	edx, edx
	mov	eax, ecx
	inc	edx
$LL4@tmat2x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	edx
	jns	SHORT $LL4@tmat2x2

; 45   : 		this->value[0] = col_type(scalar, 0);

	movss	xmm0, DWORD PTR _scalar$[ebp]
	and	DWORD PTR $T2[ebp+4], 0
	movss	DWORD PTR $T2[ebp], xmm0
	mov	eax, DWORD PTR $T2[ebp]

; 46   : 		this->value[1] = col_type(0, scalar);

	and	DWORD PTR $T1[ebp], 0
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx+8], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [ecx+12], eax

; 47   : 	}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x2@M$0A@@glm@@QAE@M@Z ENDP			; glm::tmat2x2<float,0>::tmat2x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat2x2@M$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat2x2<float,0>::tmat2x2<float,0>, COMDAT
; _this$ = ecx

; 40   : 	{}

	xor	edx, edx
	mov	eax, ecx
	inc	edx
$LL4@tmat2x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	edx
	jns	SHORT $LL4@tmat2x2
	mov	eax, ecx
	ret	4
??0?$tmat2x2@M$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat2x2<float,0>::tmat2x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tmat2x2@M$0A@@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tmat2x2@M$0A@@glm@@QAE@ABU01@@Z PROC		; glm::tmat2x2<float,0>::tmat2x2<float,0>, COMDAT
; _this$ = ecx

; 153  : template struct tmat2x2<float32, highp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	mov	edi, ecx
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tmat2x2@M$0A@@glm@@QAE@ABU01@@Z ENDP		; glm::tmat2x2<float,0>::tmat2x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
??0?$tmat2x2@M$0A@@glm@@QAE@XZ PROC			; glm::tmat2x2<float,0>::tmat2x2<float,0>, COMDAT
; _this$ = ecx

; 13   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	xor	edx, edx
	mov	eax, ecx
	inc	edx
$LL4@tmat2x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	edx
	jns	SHORT $LL4@tmat2x2

; 14   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 15   : 				this->value[0] = col_type(1, 0);

	and	DWORD PTR $T2[ebp+4], 0
	mov	DWORD PTR $T2[ebp], 1065353216		; 3f800000H
	mov	eax, DWORD PTR $T2[ebp]

; 16   : 				this->value[1] = col_type(0, 1);

	and	DWORD PTR $T1[ebp], 0
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR $T1[ebp+4], 1065353216	; 3f800000H
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [ecx+12], eax

; 17   : #			endif
; 18   : 		}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$tmat2x2@M$0A@@glm@@QAE@XZ ENDP			; glm::tmat2x2<float,0>::tmat2x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??F?$tmat2x2@N$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat2x2@N$00@glm@@QAE?AU01@H@Z PROC		; glm::tmat2x2<double,1>::operator--, COMDAT
; _this$ = ecx

; 288  : 	{

	push	ebp
	mov	ebp, esp

; 289  : 		tmat2x2<T, P> Result(*this);
; 290  : 		--*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	mov	edx, ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	movups	xmm0, XMMWORD PTR [edx]
	push	8
	pop	ecx
	subpd	xmm0, xmm1
	mov	esi, edx
	mov	edi, eax
	rep movsd
	movups	XMMWORD PTR [edx], xmm0
	pop	edi
	movups	xmm0, XMMWORD PTR [edx+16]
	pop	esi
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+16], xmm0

; 291  : 		return Result;
; 292  : 	}

	pop	ebp
	ret	8
??F?$tmat2x2@N$00@glm@@QAE?AU01@H@Z ENDP		; glm::tmat2x2<double,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??E?$tmat2x2@N$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat2x2@N$00@glm@@QAE?AU01@H@Z PROC		; glm::tmat2x2<double,1>::operator++, COMDAT
; _this$ = ecx

; 280  : 	{

	push	ebp
	mov	ebp, esp

; 281  : 		tmat2x2<T, P> Result(*this);
; 282  : 		++*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	mov	edx, ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	movups	xmm0, XMMWORD PTR [edx]
	push	8
	pop	ecx
	addpd	xmm0, xmm1
	mov	esi, edx
	mov	edi, eax
	rep movsd
	movups	XMMWORD PTR [edx], xmm0
	pop	edi
	movups	xmm0, XMMWORD PTR [edx+16]
	pop	esi
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+16], xmm0

; 283  : 		return Result;
; 284  : 	}

	pop	ebp
	ret	8
??E?$tmat2x2@N$00@glm@@QAE?AU01@H@Z ENDP		; glm::tmat2x2<double,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??F?$tmat2x2@N$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat2x2@N$00@glm@@QAEAAU01@XZ PROC			; glm::tmat2x2<double,1>::operator--, COMDAT
; _this$ = ecx

; 273  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 274  : 		--this->value[1];
; 275  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0

; 276  : 	}

	ret	0
??F?$tmat2x2@N$00@glm@@QAEAAU01@XZ ENDP			; glm::tmat2x2<double,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??E?$tmat2x2@N$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat2x2@N$00@glm@@QAEAAU01@XZ PROC			; glm::tmat2x2<double,1>::operator++, COMDAT
; _this$ = ecx

; 265  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 266  : 		++this->value[1];
; 267  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0

; 268  : 	}

	ret	0
??E?$tmat2x2@N$00@glm@@QAEAAU01@XZ ENDP			; glm::tmat2x2<double,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tmat2x2@N$00@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tmat2x2@N$00@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tmat2x2<double,1>::operator=, COMDAT
; _this$ = ecx

; 151  : template struct tmat2x2<float64, mediump>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	8
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tmat2x2@N$00@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tmat2x2<double,1>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??A?$tmat2x2@N$00@glm@@QBEABU?$tvec2@N$00@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat2x2@N$00@glm@@QBEABU?$tvec2@N$00@1@H@Z PROC	; glm::tmat2x2<double,1>::operator[], COMDAT
; _this$ = ecx

; 166  : 	{

	push	ebp
	mov	ebp, esp

; 167  : 		assert(i < this->length());
; 168  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, ecx

; 169  : 	}

	pop	ebp
	ret	4
??A?$tmat2x2@N$00@glm@@QBEABU?$tvec2@N$00@1@H@Z ENDP	; glm::tmat2x2<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??A?$tmat2x2@N$00@glm@@QAEAAU?$tvec2@N$00@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat2x2@N$00@glm@@QAEAAU?$tvec2@N$00@1@H@Z PROC	; glm::tmat2x2<double,1>::operator[], COMDAT
; _this$ = ecx

; 159  : 	{

	push	ebp
	mov	ebp, esp

; 160  : 		assert(i < this->length());
; 161  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, ecx

; 162  : 	}

	pop	ebp
	ret	4
??A?$tmat2x2@N$00@glm@@QAEAAU?$tvec2@N$00@1@H@Z ENDP	; glm::tmat2x2<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.hpp
;	COMDAT ?length@?$tmat2x2@N$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat2x2@N$00@glm@@SAHXZ PROC			; glm::tmat2x2<double,1>::length, COMDAT

; 72   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	push	2
	pop	eax
	ret	0
?length@?$tmat2x2@N$00@glm@@SAHXZ ENDP			; glm::tmat2x2<double,1>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$00@glm@@QAE@ABU?$tmat4x3@N$00@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat2x2@N$00@glm@@QAE@ABU?$tmat4x3@N$00@1@@Z PROC	; glm::tmat2x2<double,1>::tmat2x2<double,1>, COMDAT
; _this$ = ecx

; 150  : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	inc	edx
	xorps	xmm0, xmm0
$LL4@tmat2x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat2x2

; 151  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T2[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 152  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+24]
	lea	edi, DWORD PTR [ecx+16]

; 153  : 	}

	mov	eax, ecx
	lea	esi, DWORD PTR $T1[ebp]
	movups	XMMWORD PTR $T1[ebp], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x2@N$00@glm@@QAE@ABU?$tmat4x3@N$00@1@@Z ENDP	; glm::tmat2x2<double,1>::tmat2x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$00@glm@@QAE@ABU?$tmat3x4@N$00@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat2x2@N$00@glm@@QAE@ABU?$tmat3x4@N$00@1@@Z PROC	; glm::tmat2x2<double,1>::tmat2x2<double,1>, COMDAT
; _this$ = ecx

; 143  : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	inc	edx
	xorps	xmm0, xmm0
$LL4@tmat2x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat2x2

; 144  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T2[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 145  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+32]
	lea	edi, DWORD PTR [ecx+16]

; 146  : 	}

	mov	eax, ecx
	lea	esi, DWORD PTR $T1[ebp]
	movups	XMMWORD PTR $T1[ebp], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x2@N$00@glm@@QAE@ABU?$tmat3x4@N$00@1@@Z ENDP	; glm::tmat2x2<double,1>::tmat2x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$00@glm@@QAE@ABU?$tmat4x2@N$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x2@N$00@glm@@QAE@ABU?$tmat4x2@N$00@1@@Z PROC	; glm::tmat2x2<double,1>::tmat2x2<double,1>, COMDAT
; _this$ = ecx

; 136  : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	mov	eax, ecx
	inc	edx
	xorps	xmm0, xmm0
$LL4@tmat2x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat2x2

; 137  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	esi, eax
	mov	edi, ecx
	movsd
	movsd
	movsd
	movsd

; 138  : 		this->value[1] = m[1];

	lea	esi, DWORD PTR [eax+16]

; 139  : 	}

	mov	eax, ecx
	lea	edi, DWORD PTR [ecx+16]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tmat2x2@N$00@glm@@QAE@ABU?$tmat4x2@N$00@1@@Z ENDP	; glm::tmat2x2<double,1>::tmat2x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$00@glm@@QAE@ABU?$tmat2x4@N$00@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat2x2@N$00@glm@@QAE@ABU?$tmat2x4@N$00@1@@Z PROC	; glm::tmat2x2<double,1>::tmat2x2<double,1>, COMDAT
; _this$ = ecx

; 129  : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	inc	edx
	xorps	xmm0, xmm0
$LL4@tmat2x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat2x2

; 130  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T2[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 131  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+32]
	lea	edi, DWORD PTR [ecx+16]

; 132  : 	}

	mov	eax, ecx
	lea	esi, DWORD PTR $T1[ebp]
	movups	XMMWORD PTR $T1[ebp], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x2@N$00@glm@@QAE@ABU?$tmat2x4@N$00@1@@Z ENDP	; glm::tmat2x2<double,1>::tmat2x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$00@glm@@QAE@ABU?$tmat3x2@N$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x2@N$00@glm@@QAE@ABU?$tmat3x2@N$00@1@@Z PROC	; glm::tmat2x2<double,1>::tmat2x2<double,1>, COMDAT
; _this$ = ecx

; 122  : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	mov	eax, ecx
	inc	edx
	xorps	xmm0, xmm0
$LL4@tmat2x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat2x2

; 123  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	esi, eax
	mov	edi, ecx
	movsd
	movsd
	movsd
	movsd

; 124  : 		this->value[1] = m[1];

	lea	esi, DWORD PTR [eax+16]

; 125  : 	}

	mov	eax, ecx
	lea	edi, DWORD PTR [ecx+16]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tmat2x2@N$00@glm@@QAE@ABU?$tmat3x2@N$00@1@@Z ENDP	; glm::tmat2x2<double,1>::tmat2x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$00@glm@@QAE@ABU?$tmat2x3@N$00@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat2x2@N$00@glm@@QAE@ABU?$tmat2x3@N$00@1@@Z PROC	; glm::tmat2x2<double,1>::tmat2x2<double,1>, COMDAT
; _this$ = ecx

; 115  : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	inc	edx
	xorps	xmm0, xmm0
$LL4@tmat2x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat2x2

; 116  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T2[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 117  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+24]
	lea	edi, DWORD PTR [ecx+16]

; 118  : 	}

	mov	eax, ecx
	lea	esi, DWORD PTR $T1[ebp]
	movups	XMMWORD PTR $T1[ebp], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x2@N$00@glm@@QAE@ABU?$tmat2x3@N$00@1@@Z ENDP	; glm::tmat2x2<double,1>::tmat2x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$00@glm@@QAE@ABU?$tmat4x4@N$00@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat2x2@N$00@glm@@QAE@ABU?$tmat4x4@N$00@1@@Z PROC	; glm::tmat2x2<double,1>::tmat2x2<double,1>, COMDAT
; _this$ = ecx

; 108  : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	inc	edx
	xorps	xmm0, xmm0
$LL4@tmat2x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat2x2

; 109  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T2[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 110  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+32]
	lea	edi, DWORD PTR [ecx+16]

; 111  : 	}

	mov	eax, ecx
	lea	esi, DWORD PTR $T1[ebp]
	movups	XMMWORD PTR $T1[ebp], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x2@N$00@glm@@QAE@ABU?$tmat4x4@N$00@1@@Z ENDP	; glm::tmat2x2<double,1>::tmat2x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$00@glm@@QAE@ABU?$tmat3x3@N$00@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat2x2@N$00@glm@@QAE@ABU?$tmat3x3@N$00@1@@Z PROC	; glm::tmat2x2<double,1>::tmat2x2<double,1>, COMDAT
; _this$ = ecx

; 101  : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	inc	edx
	xorps	xmm0, xmm0
$LL4@tmat2x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat2x2

; 102  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T2[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 103  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+24]
	lea	edi, DWORD PTR [ecx+16]

; 104  : 	}

	mov	eax, ecx
	lea	esi, DWORD PTR $T1[ebp]
	movups	XMMWORD PTR $T1[ebp], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x2@N$00@glm@@QAE@ABU?$tmat3x3@N$00@1@@Z ENDP	; glm::tmat2x2<double,1>::tmat2x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$00@glm@@QAE@ABU?$tvec2@N$00@1@0@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
??0?$tmat2x2@N$00@glm@@QAE@ABU?$tvec2@N$00@1@0@Z PROC	; glm::tmat2x2<double,1>::tmat2x2<double,1>, COMDAT
; _this$ = ecx

; 62   : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	mov	eax, ecx
	inc	edx
	xorps	xmm0, xmm0
$LL4@tmat2x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat2x2

; 63   : 		this->value[0] = v0;

	push	esi
	mov	esi, DWORD PTR _v0$[ebp]

; 64   : 		this->value[1] = v1;
; 65   : 	}

	mov	eax, ecx
	push	edi
	mov	edi, ecx
	movsd
	movsd
	movsd
	movsd
	mov	esi, DWORD PTR _v1$[ebp]
	lea	edi, DWORD PTR [ecx+16]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	8
??0?$tmat2x2@N$00@glm@@QAE@ABU?$tvec2@N$00@1@0@Z ENDP	; glm::tmat2x2<double,1>::tmat2x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$00@glm@@QAE@ABN000@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_x1$ = 16						; size = 4
_y1$ = 20						; size = 4
??0?$tmat2x2@N$00@glm@@QAE@ABN000@Z PROC		; glm::tmat2x2<double,1>::tmat2x2<double,1>, COMDAT
; _this$ = ecx

; 55   : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	inc	edx
	xorps	xmm0, xmm0
$LL4@tmat2x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat2x2

; 56   : 		this->value[0] = col_type(x0, y0);

	mov	eax, DWORD PTR _x0$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T2[ebp]
	movsd	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR _y0$[ebp]
	movsd	QWORD PTR $T2[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax]

; 57   : 		this->value[1] = col_type(x1, y1);

	mov	eax, DWORD PTR _x1$[ebp]
	movsd	QWORD PTR $T2[ebp+8], xmm0
	movsd
	movsd
	movsd
	movsd
	movsd	xmm0, QWORD PTR [eax]
	lea	edi, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _y1$[ebp]
	lea	esi, DWORD PTR $T1[ebp]
	movsd	QWORD PTR $T1[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax]

; 58   : 	}

	mov	eax, ecx
	movsd	QWORD PTR $T1[ebp+8], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??0?$tmat2x2@N$00@glm@@QAE@ABN000@Z ENDP		; glm::tmat2x2<double,1>::tmat2x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$00@glm@@QAE@N@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_scalar$ = 8						; size = 8
??0?$tmat2x2@N$00@glm@@QAE@N@Z PROC			; glm::tmat2x2<double,1>::tmat2x2<double,1>, COMDAT
; _this$ = ecx

; 44   : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	inc	edx
	xorps	xmm1, xmm1
$LL4@tmat2x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm1
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat2x2

; 45   : 		this->value[0] = col_type(scalar, 0);

	movsd	xmm0, QWORD PTR _scalar$[ebp]

; 46   : 		this->value[1] = col_type(0, scalar);
; 47   : 	}

	mov	eax, ecx
	push	esi
	push	edi
	movsd	QWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	movsd	QWORD PTR $T2[ebp+8], xmm1
	mov	edi, ecx
	movsd
	movsd
	movsd
	movsd
	movsd	QWORD PTR $T1[ebp], xmm1
	lea	edi, DWORD PTR [ecx+16]
	movsd	QWORD PTR $T1[ebp+8], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$tmat2x2@N$00@glm@@QAE@N@Z ENDP			; glm::tmat2x2<double,1>::tmat2x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat2x2@N$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat2x2<double,1>::tmat2x2<double,1>, COMDAT
; _this$ = ecx

; 40   : 	{}

	xor	edx, edx
	mov	eax, ecx
	inc	edx
	xorps	xmm0, xmm0
$LL4@tmat2x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat2x2
	mov	eax, ecx
	ret	4
??0?$tmat2x2@N$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat2x2<double,1>::tmat2x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tmat2x2@N$00@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tmat2x2@N$00@glm@@QAE@ABU01@@Z PROC		; glm::tmat2x2<double,1>::tmat2x2<double,1>, COMDAT
; _this$ = ecx

; 151  : template struct tmat2x2<float64, mediump>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	8
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tmat2x2@N$00@glm@@QAE@ABU01@@Z ENDP		; glm::tmat2x2<double,1>::tmat2x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$00@glm@@QAE@XZ
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
??0?$tmat2x2@N$00@glm@@QAE@XZ PROC			; glm::tmat2x2<double,1>::tmat2x2<double,1>, COMDAT
; _this$ = ecx

; 13   : 		{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	inc	edx
	xorps	xmm0, xmm0
$LL4@tmat2x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat2x2

; 14   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 15   : 				this->value[0] = col_type(1, 0);
; 16   : 				this->value[1] = col_type(0, 1);
; 17   : #			endif
; 18   : 		}

	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	mov	eax, ecx
	push	esi
	push	edi
	movupd	XMMWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	mov	edi, ecx
	movaps	xmm0, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	movsd
	movsd
	movsd
	movsd
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+16]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$tmat2x2@N$00@glm@@QAE@XZ ENDP			; glm::tmat2x2<double,1>::tmat2x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??F?$tmat2x2@M$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat2x2@M$00@glm@@QAE?AU01@H@Z PROC		; glm::tmat2x2<float,1>::operator--, COMDAT
; _this$ = ecx

; 288  : 	{

	push	ebp
	mov	ebp, esp

; 289  : 		tmat2x2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 290  : 		--*this;

	movups	xmm0, XMMWORD PTR [ecx]
	push	esi
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	mov	esi, ecx
	push	edi
	mov	edi, eax
	subps	xmm0, xmm1
	movsd
	movsd
	movsd
	movsd
	pop	edi
	movups	XMMWORD PTR [ecx], xmm0
	pop	esi

; 291  : 		return Result;
; 292  : 	}

	pop	ebp
	ret	8
??F?$tmat2x2@M$00@glm@@QAE?AU01@H@Z ENDP		; glm::tmat2x2<float,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??E?$tmat2x2@M$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat2x2@M$00@glm@@QAE?AU01@H@Z PROC		; glm::tmat2x2<float,1>::operator++, COMDAT
; _this$ = ecx

; 280  : 	{

	push	ebp
	mov	ebp, esp

; 281  : 		tmat2x2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 282  : 		++*this;

	movups	xmm0, XMMWORD PTR [ecx]
	push	esi
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	mov	esi, ecx
	push	edi
	mov	edi, eax
	addps	xmm0, xmm1
	movsd
	movsd
	movsd
	movsd
	pop	edi
	movups	XMMWORD PTR [ecx], xmm0
	pop	esi

; 283  : 		return Result;
; 284  : 	}

	pop	ebp
	ret	8
??E?$tmat2x2@M$00@glm@@QAE?AU01@H@Z ENDP		; glm::tmat2x2<float,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??F?$tmat2x2@M$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat2x2@M$00@glm@@QAEAAU01@XZ PROC			; glm::tmat2x2<float,1>::operator--, COMDAT
; _this$ = ecx

; 273  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 274  : 		--this->value[1];
; 275  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0

; 276  : 	}

	ret	0
??F?$tmat2x2@M$00@glm@@QAEAAU01@XZ ENDP			; glm::tmat2x2<float,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??E?$tmat2x2@M$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat2x2@M$00@glm@@QAEAAU01@XZ PROC			; glm::tmat2x2<float,1>::operator++, COMDAT
; _this$ = ecx

; 265  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 266  : 		++this->value[1];
; 267  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0

; 268  : 	}

	ret	0
??E?$tmat2x2@M$00@glm@@QAEAAU01@XZ ENDP			; glm::tmat2x2<float,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tmat2x2@M$00@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tmat2x2@M$00@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tmat2x2<float,1>::operator=, COMDAT
; _this$ = ecx

; 150  : template struct tmat2x2<float32, mediump>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	mov	edi, ecx
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tmat2x2@M$00@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tmat2x2<float,1>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??A?$tmat2x2@M$00@glm@@QBEABU?$tvec2@M$00@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat2x2@M$00@glm@@QBEABU?$tvec2@M$00@1@H@Z PROC	; glm::tmat2x2<float,1>::operator[], COMDAT
; _this$ = ecx

; 166  : 	{

	push	ebp
	mov	ebp, esp

; 167  : 		assert(i < this->length());
; 168  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 169  : 	}

	pop	ebp
	ret	4
??A?$tmat2x2@M$00@glm@@QBEABU?$tvec2@M$00@1@H@Z ENDP	; glm::tmat2x2<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??A?$tmat2x2@M$00@glm@@QAEAAU?$tvec2@M$00@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat2x2@M$00@glm@@QAEAAU?$tvec2@M$00@1@H@Z PROC	; glm::tmat2x2<float,1>::operator[], COMDAT
; _this$ = ecx

; 159  : 	{

	push	ebp
	mov	ebp, esp

; 160  : 		assert(i < this->length());
; 161  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 162  : 	}

	pop	ebp
	ret	4
??A?$tmat2x2@M$00@glm@@QAEAAU?$tvec2@M$00@1@H@Z ENDP	; glm::tmat2x2<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.hpp
;	COMDAT ?length@?$tmat2x2@M$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat2x2@M$00@glm@@SAHXZ PROC			; glm::tmat2x2<float,1>::length, COMDAT

; 72   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	push	2
	pop	eax
	ret	0
?length@?$tmat2x2@M$00@glm@@SAHXZ ENDP			; glm::tmat2x2<float,1>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$00@glm@@QAE@ABU?$tmat4x3@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat2x2@M$00@glm@@QAE@ABU?$tmat4x3@M$00@1@@Z PROC	; glm::tmat2x2<float,1>::tmat2x2<float,1>, COMDAT
; _this$ = ecx

; 150  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	mov	edx, ecx
	xor	ecx, ecx
	mov	eax, edx
	inc	ecx
$LL4@tmat2x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	ecx
	jns	SHORT $LL4@tmat2x2

; 151  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 152  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+12]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+12], eax

; 153  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x2@M$00@glm@@QAE@ABU?$tmat4x3@M$00@1@@Z ENDP	; glm::tmat2x2<float,1>::tmat2x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$00@glm@@QAE@ABU?$tmat3x4@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat2x2@M$00@glm@@QAE@ABU?$tmat3x4@M$00@1@@Z PROC	; glm::tmat2x2<float,1>::tmat2x2<float,1>, COMDAT
; _this$ = ecx

; 143  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	mov	edx, ecx
	xor	ecx, ecx
	mov	eax, edx
	inc	ecx
$LL4@tmat2x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	ecx
	jns	SHORT $LL4@tmat2x2

; 144  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 145  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+16]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+12], eax

; 146  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x2@M$00@glm@@QAE@ABU?$tmat3x4@M$00@1@@Z ENDP	; glm::tmat2x2<float,1>::tmat2x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$00@glm@@QAE@ABU?$tmat4x2@M$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x2@M$00@glm@@QAE@ABU?$tmat4x2@M$00@1@@Z PROC	; glm::tmat2x2<float,1>::tmat2x2<float,1>, COMDAT
; _this$ = ecx

; 136  : 	{

	push	ebp
	mov	ebp, esp
	mov	edx, ecx
	xor	ecx, ecx
	mov	eax, edx
	inc	ecx
$LL4@tmat2x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	ecx
	jns	SHORT $LL4@tmat2x2

; 137  : 		this->value[0] = m[0];

	mov	ecx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax

; 138  : 		this->value[1] = m[1];

	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], eax

; 139  : 	}

	mov	eax, edx
	pop	ebp
	ret	4
??0?$tmat2x2@M$00@glm@@QAE@ABU?$tmat4x2@M$00@1@@Z ENDP	; glm::tmat2x2<float,1>::tmat2x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$00@glm@@QAE@ABU?$tmat2x4@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat2x2@M$00@glm@@QAE@ABU?$tmat2x4@M$00@1@@Z PROC	; glm::tmat2x2<float,1>::tmat2x2<float,1>, COMDAT
; _this$ = ecx

; 129  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	mov	edx, ecx
	xor	ecx, ecx
	mov	eax, edx
	inc	ecx
$LL4@tmat2x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	ecx
	jns	SHORT $LL4@tmat2x2

; 130  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 131  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+16]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+12], eax

; 132  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x2@M$00@glm@@QAE@ABU?$tmat2x4@M$00@1@@Z ENDP	; glm::tmat2x2<float,1>::tmat2x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$00@glm@@QAE@ABU?$tmat3x2@M$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x2@M$00@glm@@QAE@ABU?$tmat3x2@M$00@1@@Z PROC	; glm::tmat2x2<float,1>::tmat2x2<float,1>, COMDAT
; _this$ = ecx

; 122  : 	{

	push	ebp
	mov	ebp, esp
	mov	edx, ecx
	xor	ecx, ecx
	mov	eax, edx
	inc	ecx
$LL4@tmat2x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	ecx
	jns	SHORT $LL4@tmat2x2

; 123  : 		this->value[0] = m[0];

	mov	ecx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax

; 124  : 		this->value[1] = m[1];

	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], eax

; 125  : 	}

	mov	eax, edx
	pop	ebp
	ret	4
??0?$tmat2x2@M$00@glm@@QAE@ABU?$tmat3x2@M$00@1@@Z ENDP	; glm::tmat2x2<float,1>::tmat2x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$00@glm@@QAE@ABU?$tmat2x3@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat2x2@M$00@glm@@QAE@ABU?$tmat2x3@M$00@1@@Z PROC	; glm::tmat2x2<float,1>::tmat2x2<float,1>, COMDAT
; _this$ = ecx

; 115  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	mov	edx, ecx
	xor	ecx, ecx
	mov	eax, edx
	inc	ecx
$LL4@tmat2x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	ecx
	jns	SHORT $LL4@tmat2x2

; 116  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 117  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+12]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+12], eax

; 118  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x2@M$00@glm@@QAE@ABU?$tmat2x3@M$00@1@@Z ENDP	; glm::tmat2x2<float,1>::tmat2x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$00@glm@@QAE@ABU?$tmat4x4@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat2x2@M$00@glm@@QAE@ABU?$tmat4x4@M$00@1@@Z PROC	; glm::tmat2x2<float,1>::tmat2x2<float,1>, COMDAT
; _this$ = ecx

; 108  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	mov	edx, ecx
	xor	ecx, ecx
	mov	eax, edx
	inc	ecx
$LL4@tmat2x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	ecx
	jns	SHORT $LL4@tmat2x2

; 109  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 110  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+16]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+12], eax

; 111  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x2@M$00@glm@@QAE@ABU?$tmat4x4@M$00@1@@Z ENDP	; glm::tmat2x2<float,1>::tmat2x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$00@glm@@QAE@ABU?$tmat3x3@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat2x2@M$00@glm@@QAE@ABU?$tmat3x3@M$00@1@@Z PROC	; glm::tmat2x2<float,1>::tmat2x2<float,1>, COMDAT
; _this$ = ecx

; 101  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	mov	edx, ecx
	xor	ecx, ecx
	mov	eax, edx
	inc	ecx
$LL4@tmat2x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	ecx
	jns	SHORT $LL4@tmat2x2

; 102  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 103  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+12]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+12], eax

; 104  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x2@M$00@glm@@QAE@ABU?$tmat3x3@M$00@1@@Z ENDP	; glm::tmat2x2<float,1>::tmat2x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$00@glm@@QAE@ABU?$tvec2@M$00@1@0@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
??0?$tmat2x2@M$00@glm@@QAE@ABU?$tvec2@M$00@1@0@Z PROC	; glm::tmat2x2<float,1>::tmat2x2<float,1>, COMDAT
; _this$ = ecx

; 62   : 	{

	push	ebp
	mov	ebp, esp
	mov	edx, ecx
	xor	ecx, ecx
	mov	eax, edx
	inc	ecx
$LL4@tmat2x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	ecx
	jns	SHORT $LL4@tmat2x2

; 63   : 		this->value[0] = v0;

	mov	ecx, DWORD PTR _v0$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]

; 64   : 		this->value[1] = v1;

	mov	ecx, DWORD PTR _v1$[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+12], eax

; 65   : 	}

	mov	eax, edx
	pop	ebp
	ret	8
??0?$tmat2x2@M$00@glm@@QAE@ABU?$tvec2@M$00@1@0@Z ENDP	; glm::tmat2x2<float,1>::tmat2x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$00@glm@@QAE@ABM000@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_x1$ = 16						; size = 4
_y1$ = 20						; size = 4
??0?$tmat2x2@M$00@glm@@QAE@ABM000@Z PROC		; glm::tmat2x2<float,1>::tmat2x2<float,1>, COMDAT
; _this$ = ecx

; 55   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	xor	edx, edx
	mov	eax, ecx
	inc	edx
$LL4@tmat2x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	edx
	jns	SHORT $LL4@tmat2x2

; 56   : 		this->value[0] = col_type(x0, y0);

	mov	eax, DWORD PTR _x0$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _y0$[ebp]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [ecx], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [ecx+4], eax

; 57   : 		this->value[1] = col_type(x1, y1);

	mov	eax, DWORD PTR _x1$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _y1$[ebp]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx+8], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [ecx+12], eax

; 58   : 	}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??0?$tmat2x2@M$00@glm@@QAE@ABM000@Z ENDP		; glm::tmat2x2<float,1>::tmat2x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$00@glm@@QAE@M@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
_scalar$ = 8						; size = 4
??0?$tmat2x2@M$00@glm@@QAE@M@Z PROC			; glm::tmat2x2<float,1>::tmat2x2<float,1>, COMDAT
; _this$ = ecx

; 44   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	xor	edx, edx
	mov	eax, ecx
	inc	edx
$LL4@tmat2x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	edx
	jns	SHORT $LL4@tmat2x2

; 45   : 		this->value[0] = col_type(scalar, 0);

	movss	xmm0, DWORD PTR _scalar$[ebp]
	and	DWORD PTR $T2[ebp+4], 0
	movss	DWORD PTR $T2[ebp], xmm0
	mov	eax, DWORD PTR $T2[ebp]

; 46   : 		this->value[1] = col_type(0, scalar);

	and	DWORD PTR $T1[ebp], 0
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx+8], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [ecx+12], eax

; 47   : 	}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x2@M$00@glm@@QAE@M@Z ENDP			; glm::tmat2x2<float,1>::tmat2x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat2x2@M$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat2x2<float,1>::tmat2x2<float,1>, COMDAT
; _this$ = ecx

; 40   : 	{}

	xor	edx, edx
	mov	eax, ecx
	inc	edx
$LL4@tmat2x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	edx
	jns	SHORT $LL4@tmat2x2
	mov	eax, ecx
	ret	4
??0?$tmat2x2@M$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat2x2<float,1>::tmat2x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tmat2x2@M$00@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tmat2x2@M$00@glm@@QAE@ABU01@@Z PROC		; glm::tmat2x2<float,1>::tmat2x2<float,1>, COMDAT
; _this$ = ecx

; 150  : template struct tmat2x2<float32, mediump>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	mov	edi, ecx
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tmat2x2@M$00@glm@@QAE@ABU01@@Z ENDP		; glm::tmat2x2<float,1>::tmat2x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$00@glm@@QAE@XZ
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
??0?$tmat2x2@M$00@glm@@QAE@XZ PROC			; glm::tmat2x2<float,1>::tmat2x2<float,1>, COMDAT
; _this$ = ecx

; 13   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	xor	edx, edx
	mov	eax, ecx
	inc	edx
$LL4@tmat2x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	edx
	jns	SHORT $LL4@tmat2x2

; 14   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 15   : 				this->value[0] = col_type(1, 0);

	and	DWORD PTR $T2[ebp+4], 0
	mov	DWORD PTR $T2[ebp], 1065353216		; 3f800000H
	mov	eax, DWORD PTR $T2[ebp]

; 16   : 				this->value[1] = col_type(0, 1);

	and	DWORD PTR $T1[ebp], 0
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR $T1[ebp+4], 1065353216	; 3f800000H
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [ecx+12], eax

; 17   : #			endif
; 18   : 		}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$tmat2x2@M$00@glm@@QAE@XZ ENDP			; glm::tmat2x2<float,1>::tmat2x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??F?$tmat2x2@N$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat2x2@N$01@glm@@QAE?AU01@H@Z PROC		; glm::tmat2x2<double,2>::operator--, COMDAT
; _this$ = ecx

; 288  : 	{

	push	ebp
	mov	ebp, esp

; 289  : 		tmat2x2<T, P> Result(*this);
; 290  : 		--*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	mov	edx, ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	movups	xmm0, XMMWORD PTR [edx]
	push	8
	pop	ecx
	subpd	xmm0, xmm1
	mov	esi, edx
	mov	edi, eax
	rep movsd
	movups	XMMWORD PTR [edx], xmm0
	pop	edi
	movups	xmm0, XMMWORD PTR [edx+16]
	pop	esi
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+16], xmm0

; 291  : 		return Result;
; 292  : 	}

	pop	ebp
	ret	8
??F?$tmat2x2@N$01@glm@@QAE?AU01@H@Z ENDP		; glm::tmat2x2<double,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??E?$tmat2x2@N$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat2x2@N$01@glm@@QAE?AU01@H@Z PROC		; glm::tmat2x2<double,2>::operator++, COMDAT
; _this$ = ecx

; 280  : 	{

	push	ebp
	mov	ebp, esp

; 281  : 		tmat2x2<T, P> Result(*this);
; 282  : 		++*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	mov	edx, ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	movups	xmm0, XMMWORD PTR [edx]
	push	8
	pop	ecx
	addpd	xmm0, xmm1
	mov	esi, edx
	mov	edi, eax
	rep movsd
	movups	XMMWORD PTR [edx], xmm0
	pop	edi
	movups	xmm0, XMMWORD PTR [edx+16]
	pop	esi
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+16], xmm0

; 283  : 		return Result;
; 284  : 	}

	pop	ebp
	ret	8
??E?$tmat2x2@N$01@glm@@QAE?AU01@H@Z ENDP		; glm::tmat2x2<double,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??F?$tmat2x2@N$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat2x2@N$01@glm@@QAEAAU01@XZ PROC			; glm::tmat2x2<double,2>::operator--, COMDAT
; _this$ = ecx

; 273  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 274  : 		--this->value[1];
; 275  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0

; 276  : 	}

	ret	0
??F?$tmat2x2@N$01@glm@@QAEAAU01@XZ ENDP			; glm::tmat2x2<double,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??E?$tmat2x2@N$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat2x2@N$01@glm@@QAEAAU01@XZ PROC			; glm::tmat2x2<double,2>::operator++, COMDAT
; _this$ = ecx

; 265  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 266  : 		++this->value[1];
; 267  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0

; 268  : 	}

	ret	0
??E?$tmat2x2@N$01@glm@@QAEAAU01@XZ ENDP			; glm::tmat2x2<double,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tmat2x2@N$01@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tmat2x2@N$01@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tmat2x2<double,2>::operator=, COMDAT
; _this$ = ecx

; 148  : template struct tmat2x2<float64, lowp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	8
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tmat2x2@N$01@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tmat2x2<double,2>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??A?$tmat2x2@N$01@glm@@QBEABU?$tvec2@N$01@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat2x2@N$01@glm@@QBEABU?$tvec2@N$01@1@H@Z PROC	; glm::tmat2x2<double,2>::operator[], COMDAT
; _this$ = ecx

; 166  : 	{

	push	ebp
	mov	ebp, esp

; 167  : 		assert(i < this->length());
; 168  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, ecx

; 169  : 	}

	pop	ebp
	ret	4
??A?$tmat2x2@N$01@glm@@QBEABU?$tvec2@N$01@1@H@Z ENDP	; glm::tmat2x2<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??A?$tmat2x2@N$01@glm@@QAEAAU?$tvec2@N$01@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat2x2@N$01@glm@@QAEAAU?$tvec2@N$01@1@H@Z PROC	; glm::tmat2x2<double,2>::operator[], COMDAT
; _this$ = ecx

; 159  : 	{

	push	ebp
	mov	ebp, esp

; 160  : 		assert(i < this->length());
; 161  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, ecx

; 162  : 	}

	pop	ebp
	ret	4
??A?$tmat2x2@N$01@glm@@QAEAAU?$tvec2@N$01@1@H@Z ENDP	; glm::tmat2x2<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.hpp
;	COMDAT ?length@?$tmat2x2@N$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat2x2@N$01@glm@@SAHXZ PROC			; glm::tmat2x2<double,2>::length, COMDAT

; 72   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	push	2
	pop	eax
	ret	0
?length@?$tmat2x2@N$01@glm@@SAHXZ ENDP			; glm::tmat2x2<double,2>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$01@glm@@QAE@ABU?$tmat4x3@N$01@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat2x2@N$01@glm@@QAE@ABU?$tmat4x3@N$01@1@@Z PROC	; glm::tmat2x2<double,2>::tmat2x2<double,2>, COMDAT
; _this$ = ecx

; 150  : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	inc	edx
	xorps	xmm0, xmm0
$LL4@tmat2x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat2x2

; 151  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T2[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 152  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+24]
	lea	edi, DWORD PTR [ecx+16]

; 153  : 	}

	mov	eax, ecx
	lea	esi, DWORD PTR $T1[ebp]
	movups	XMMWORD PTR $T1[ebp], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x2@N$01@glm@@QAE@ABU?$tmat4x3@N$01@1@@Z ENDP	; glm::tmat2x2<double,2>::tmat2x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$01@glm@@QAE@ABU?$tmat3x4@N$01@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat2x2@N$01@glm@@QAE@ABU?$tmat3x4@N$01@1@@Z PROC	; glm::tmat2x2<double,2>::tmat2x2<double,2>, COMDAT
; _this$ = ecx

; 143  : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	inc	edx
	xorps	xmm0, xmm0
$LL4@tmat2x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat2x2

; 144  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T2[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 145  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+32]
	lea	edi, DWORD PTR [ecx+16]

; 146  : 	}

	mov	eax, ecx
	lea	esi, DWORD PTR $T1[ebp]
	movups	XMMWORD PTR $T1[ebp], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x2@N$01@glm@@QAE@ABU?$tmat3x4@N$01@1@@Z ENDP	; glm::tmat2x2<double,2>::tmat2x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$01@glm@@QAE@ABU?$tmat4x2@N$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x2@N$01@glm@@QAE@ABU?$tmat4x2@N$01@1@@Z PROC	; glm::tmat2x2<double,2>::tmat2x2<double,2>, COMDAT
; _this$ = ecx

; 136  : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	mov	eax, ecx
	inc	edx
	xorps	xmm0, xmm0
$LL4@tmat2x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat2x2

; 137  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	esi, eax
	mov	edi, ecx
	movsd
	movsd
	movsd
	movsd

; 138  : 		this->value[1] = m[1];

	lea	esi, DWORD PTR [eax+16]

; 139  : 	}

	mov	eax, ecx
	lea	edi, DWORD PTR [ecx+16]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tmat2x2@N$01@glm@@QAE@ABU?$tmat4x2@N$01@1@@Z ENDP	; glm::tmat2x2<double,2>::tmat2x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$01@glm@@QAE@ABU?$tmat2x4@N$01@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat2x2@N$01@glm@@QAE@ABU?$tmat2x4@N$01@1@@Z PROC	; glm::tmat2x2<double,2>::tmat2x2<double,2>, COMDAT
; _this$ = ecx

; 129  : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	inc	edx
	xorps	xmm0, xmm0
$LL4@tmat2x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat2x2

; 130  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T2[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 131  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+32]
	lea	edi, DWORD PTR [ecx+16]

; 132  : 	}

	mov	eax, ecx
	lea	esi, DWORD PTR $T1[ebp]
	movups	XMMWORD PTR $T1[ebp], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x2@N$01@glm@@QAE@ABU?$tmat2x4@N$01@1@@Z ENDP	; glm::tmat2x2<double,2>::tmat2x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$01@glm@@QAE@ABU?$tmat3x2@N$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x2@N$01@glm@@QAE@ABU?$tmat3x2@N$01@1@@Z PROC	; glm::tmat2x2<double,2>::tmat2x2<double,2>, COMDAT
; _this$ = ecx

; 122  : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	mov	eax, ecx
	inc	edx
	xorps	xmm0, xmm0
$LL4@tmat2x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat2x2

; 123  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	esi, eax
	mov	edi, ecx
	movsd
	movsd
	movsd
	movsd

; 124  : 		this->value[1] = m[1];

	lea	esi, DWORD PTR [eax+16]

; 125  : 	}

	mov	eax, ecx
	lea	edi, DWORD PTR [ecx+16]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tmat2x2@N$01@glm@@QAE@ABU?$tmat3x2@N$01@1@@Z ENDP	; glm::tmat2x2<double,2>::tmat2x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$01@glm@@QAE@ABU?$tmat2x3@N$01@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat2x2@N$01@glm@@QAE@ABU?$tmat2x3@N$01@1@@Z PROC	; glm::tmat2x2<double,2>::tmat2x2<double,2>, COMDAT
; _this$ = ecx

; 115  : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	inc	edx
	xorps	xmm0, xmm0
$LL4@tmat2x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat2x2

; 116  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T2[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 117  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+24]
	lea	edi, DWORD PTR [ecx+16]

; 118  : 	}

	mov	eax, ecx
	lea	esi, DWORD PTR $T1[ebp]
	movups	XMMWORD PTR $T1[ebp], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x2@N$01@glm@@QAE@ABU?$tmat2x3@N$01@1@@Z ENDP	; glm::tmat2x2<double,2>::tmat2x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$01@glm@@QAE@ABU?$tmat4x4@N$01@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat2x2@N$01@glm@@QAE@ABU?$tmat4x4@N$01@1@@Z PROC	; glm::tmat2x2<double,2>::tmat2x2<double,2>, COMDAT
; _this$ = ecx

; 108  : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	inc	edx
	xorps	xmm0, xmm0
$LL4@tmat2x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat2x2

; 109  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T2[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 110  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+32]
	lea	edi, DWORD PTR [ecx+16]

; 111  : 	}

	mov	eax, ecx
	lea	esi, DWORD PTR $T1[ebp]
	movups	XMMWORD PTR $T1[ebp], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x2@N$01@glm@@QAE@ABU?$tmat4x4@N$01@1@@Z ENDP	; glm::tmat2x2<double,2>::tmat2x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$01@glm@@QAE@ABU?$tmat3x3@N$01@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat2x2@N$01@glm@@QAE@ABU?$tmat3x3@N$01@1@@Z PROC	; glm::tmat2x2<double,2>::tmat2x2<double,2>, COMDAT
; _this$ = ecx

; 101  : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	inc	edx
	xorps	xmm0, xmm0
$LL4@tmat2x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat2x2

; 102  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T2[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR $T2[ebp], xmm0
	movsd
	movsd
	movsd
	movsd

; 103  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+24]
	lea	edi, DWORD PTR [ecx+16]

; 104  : 	}

	mov	eax, ecx
	lea	esi, DWORD PTR $T1[ebp]
	movups	XMMWORD PTR $T1[ebp], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x2@N$01@glm@@QAE@ABU?$tmat3x3@N$01@1@@Z ENDP	; glm::tmat2x2<double,2>::tmat2x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$01@glm@@QAE@ABU?$tvec2@N$01@1@0@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
??0?$tmat2x2@N$01@glm@@QAE@ABU?$tvec2@N$01@1@0@Z PROC	; glm::tmat2x2<double,2>::tmat2x2<double,2>, COMDAT
; _this$ = ecx

; 62   : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	mov	eax, ecx
	inc	edx
	xorps	xmm0, xmm0
$LL4@tmat2x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat2x2

; 63   : 		this->value[0] = v0;

	push	esi
	mov	esi, DWORD PTR _v0$[ebp]

; 64   : 		this->value[1] = v1;
; 65   : 	}

	mov	eax, ecx
	push	edi
	mov	edi, ecx
	movsd
	movsd
	movsd
	movsd
	mov	esi, DWORD PTR _v1$[ebp]
	lea	edi, DWORD PTR [ecx+16]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	8
??0?$tmat2x2@N$01@glm@@QAE@ABU?$tvec2@N$01@1@0@Z ENDP	; glm::tmat2x2<double,2>::tmat2x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$01@glm@@QAE@ABN000@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_x1$ = 16						; size = 4
_y1$ = 20						; size = 4
??0?$tmat2x2@N$01@glm@@QAE@ABN000@Z PROC		; glm::tmat2x2<double,2>::tmat2x2<double,2>, COMDAT
; _this$ = ecx

; 55   : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	inc	edx
	xorps	xmm0, xmm0
$LL4@tmat2x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat2x2

; 56   : 		this->value[0] = col_type(x0, y0);

	mov	eax, DWORD PTR _x0$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR $T2[ebp]
	movsd	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR _y0$[ebp]
	movsd	QWORD PTR $T2[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax]

; 57   : 		this->value[1] = col_type(x1, y1);

	mov	eax, DWORD PTR _x1$[ebp]
	movsd	QWORD PTR $T2[ebp+8], xmm0
	movsd
	movsd
	movsd
	movsd
	movsd	xmm0, QWORD PTR [eax]
	lea	edi, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _y1$[ebp]
	lea	esi, DWORD PTR $T1[ebp]
	movsd	QWORD PTR $T1[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax]

; 58   : 	}

	mov	eax, ecx
	movsd	QWORD PTR $T1[ebp+8], xmm0
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??0?$tmat2x2@N$01@glm@@QAE@ABN000@Z ENDP		; glm::tmat2x2<double,2>::tmat2x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$01@glm@@QAE@N@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_scalar$ = 8						; size = 8
??0?$tmat2x2@N$01@glm@@QAE@N@Z PROC			; glm::tmat2x2<double,2>::tmat2x2<double,2>, COMDAT
; _this$ = ecx

; 44   : 	{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	inc	edx
	xorps	xmm1, xmm1
$LL4@tmat2x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm1
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat2x2

; 45   : 		this->value[0] = col_type(scalar, 0);

	movsd	xmm0, QWORD PTR _scalar$[ebp]

; 46   : 		this->value[1] = col_type(0, scalar);
; 47   : 	}

	mov	eax, ecx
	push	esi
	push	edi
	movsd	QWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	movsd	QWORD PTR $T2[ebp+8], xmm1
	mov	edi, ecx
	movsd
	movsd
	movsd
	movsd
	movsd	QWORD PTR $T1[ebp], xmm1
	lea	edi, DWORD PTR [ecx+16]
	movsd	QWORD PTR $T1[ebp+8], xmm0
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$tmat2x2@N$01@glm@@QAE@N@Z ENDP			; glm::tmat2x2<double,2>::tmat2x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat2x2@N$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat2x2<double,2>::tmat2x2<double,2>, COMDAT
; _this$ = ecx

; 40   : 	{}

	xor	edx, edx
	mov	eax, ecx
	inc	edx
	xorps	xmm0, xmm0
$LL4@tmat2x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat2x2
	mov	eax, ecx
	ret	4
??0?$tmat2x2@N$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat2x2<double,2>::tmat2x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tmat2x2@N$01@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tmat2x2@N$01@glm@@QAE@ABU01@@Z PROC		; glm::tmat2x2<double,2>::tmat2x2<double,2>, COMDAT
; _this$ = ecx

; 148  : template struct tmat2x2<float64, lowp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	8
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tmat2x2@N$01@glm@@QAE@ABU01@@Z ENDP		; glm::tmat2x2<double,2>::tmat2x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$01@glm@@QAE@XZ
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
??0?$tmat2x2@N$01@glm@@QAE@XZ PROC			; glm::tmat2x2<double,2>::tmat2x2<double,2>, COMDAT
; _this$ = ecx

; 13   : 		{

	push	ebp
	mov	ebp, esp
	xor	edx, edx
	sub	esp, 16					; 00000010H
	mov	eax, ecx
	inc	edx
	xorps	xmm0, xmm0
$LL4@tmat2x2:
	dec	edx
	movups	XMMWORD PTR [eax], xmm0
	lea	eax, DWORD PTR [eax+16]
	jns	SHORT $LL4@tmat2x2

; 14   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 15   : 				this->value[0] = col_type(1, 0);
; 16   : 				this->value[1] = col_type(0, 1);
; 17   : #			endif
; 18   : 		}

	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	mov	eax, ecx
	push	esi
	push	edi
	movupd	XMMWORD PTR $T2[ebp], xmm0
	lea	esi, DWORD PTR $T2[ebp]
	mov	edi, ecx
	movaps	xmm0, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	movsd
	movsd
	movsd
	movsd
	movupd	XMMWORD PTR $T1[ebp], xmm0
	lea	edi, DWORD PTR [ecx+16]
	lea	esi, DWORD PTR $T1[ebp]
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$tmat2x2@N$01@glm@@QAE@XZ ENDP			; glm::tmat2x2<double,2>::tmat2x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??F?$tmat2x2@M$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat2x2@M$01@glm@@QAE?AU01@H@Z PROC		; glm::tmat2x2<float,2>::operator--, COMDAT
; _this$ = ecx

; 288  : 	{

	push	ebp
	mov	ebp, esp

; 289  : 		tmat2x2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 290  : 		--*this;

	movups	xmm0, XMMWORD PTR [ecx]
	push	esi
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	mov	esi, ecx
	push	edi
	mov	edi, eax
	subps	xmm0, xmm1
	movsd
	movsd
	movsd
	movsd
	pop	edi
	movups	XMMWORD PTR [ecx], xmm0
	pop	esi

; 291  : 		return Result;
; 292  : 	}

	pop	ebp
	ret	8
??F?$tmat2x2@M$01@glm@@QAE?AU01@H@Z ENDP		; glm::tmat2x2<float,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??E?$tmat2x2@M$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat2x2@M$01@glm@@QAE?AU01@H@Z PROC		; glm::tmat2x2<float,2>::operator++, COMDAT
; _this$ = ecx

; 280  : 	{

	push	ebp
	mov	ebp, esp

; 281  : 		tmat2x2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 282  : 		++*this;

	movups	xmm0, XMMWORD PTR [ecx]
	push	esi
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	mov	esi, ecx
	push	edi
	mov	edi, eax
	addps	xmm0, xmm1
	movsd
	movsd
	movsd
	movsd
	pop	edi
	movups	XMMWORD PTR [ecx], xmm0
	pop	esi

; 283  : 		return Result;
; 284  : 	}

	pop	ebp
	ret	8
??E?$tmat2x2@M$01@glm@@QAE?AU01@H@Z ENDP		; glm::tmat2x2<float,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??F?$tmat2x2@M$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat2x2@M$01@glm@@QAEAAU01@XZ PROC			; glm::tmat2x2<float,2>::operator--, COMDAT
; _this$ = ecx

; 273  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 274  : 		--this->value[1];
; 275  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0

; 276  : 	}

	ret	0
??F?$tmat2x2@M$01@glm@@QAEAAU01@XZ ENDP			; glm::tmat2x2<float,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??E?$tmat2x2@M$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat2x2@M$01@glm@@QAEAAU01@XZ PROC			; glm::tmat2x2<float,2>::operator++, COMDAT
; _this$ = ecx

; 265  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 266  : 		++this->value[1];
; 267  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0

; 268  : 	}

	ret	0
??E?$tmat2x2@M$01@glm@@QAEAAU01@XZ ENDP			; glm::tmat2x2<float,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tmat2x2@M$01@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tmat2x2@M$01@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tmat2x2<float,2>::operator=, COMDAT
; _this$ = ecx

; 147  : template struct tmat2x2<float32, lowp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	mov	edi, ecx
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tmat2x2@M$01@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tmat2x2<float,2>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??A?$tmat2x2@M$01@glm@@QBEABU?$tvec2@M$01@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat2x2@M$01@glm@@QBEABU?$tvec2@M$01@1@H@Z PROC	; glm::tmat2x2<float,2>::operator[], COMDAT
; _this$ = ecx

; 166  : 	{

	push	ebp
	mov	ebp, esp

; 167  : 		assert(i < this->length());
; 168  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 169  : 	}

	pop	ebp
	ret	4
??A?$tmat2x2@M$01@glm@@QBEABU?$tvec2@M$01@1@H@Z ENDP	; glm::tmat2x2<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??A?$tmat2x2@M$01@glm@@QAEAAU?$tvec2@M$01@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat2x2@M$01@glm@@QAEAAU?$tvec2@M$01@1@H@Z PROC	; glm::tmat2x2<float,2>::operator[], COMDAT
; _this$ = ecx

; 159  : 	{

	push	ebp
	mov	ebp, esp

; 160  : 		assert(i < this->length());
; 161  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 162  : 	}

	pop	ebp
	ret	4
??A?$tmat2x2@M$01@glm@@QAEAAU?$tvec2@M$01@1@H@Z ENDP	; glm::tmat2x2<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.hpp
;	COMDAT ?length@?$tmat2x2@M$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat2x2@M$01@glm@@SAHXZ PROC			; glm::tmat2x2<float,2>::length, COMDAT

; 72   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	push	2
	pop	eax
	ret	0
?length@?$tmat2x2@M$01@glm@@SAHXZ ENDP			; glm::tmat2x2<float,2>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$01@glm@@QAE@ABU?$tmat4x3@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat2x2@M$01@glm@@QAE@ABU?$tmat4x3@M$01@1@@Z PROC	; glm::tmat2x2<float,2>::tmat2x2<float,2>, COMDAT
; _this$ = ecx

; 150  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	mov	edx, ecx
	xor	ecx, ecx
	mov	eax, edx
	inc	ecx
$LL4@tmat2x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	ecx
	jns	SHORT $LL4@tmat2x2

; 151  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 152  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+12]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+12], eax

; 153  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x2@M$01@glm@@QAE@ABU?$tmat4x3@M$01@1@@Z ENDP	; glm::tmat2x2<float,2>::tmat2x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$01@glm@@QAE@ABU?$tmat3x4@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat2x2@M$01@glm@@QAE@ABU?$tmat3x4@M$01@1@@Z PROC	; glm::tmat2x2<float,2>::tmat2x2<float,2>, COMDAT
; _this$ = ecx

; 143  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	mov	edx, ecx
	xor	ecx, ecx
	mov	eax, edx
	inc	ecx
$LL4@tmat2x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	ecx
	jns	SHORT $LL4@tmat2x2

; 144  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 145  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+16]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+12], eax

; 146  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x2@M$01@glm@@QAE@ABU?$tmat3x4@M$01@1@@Z ENDP	; glm::tmat2x2<float,2>::tmat2x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$01@glm@@QAE@ABU?$tmat4x2@M$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x2@M$01@glm@@QAE@ABU?$tmat4x2@M$01@1@@Z PROC	; glm::tmat2x2<float,2>::tmat2x2<float,2>, COMDAT
; _this$ = ecx

; 136  : 	{

	push	ebp
	mov	ebp, esp
	mov	edx, ecx
	xor	ecx, ecx
	mov	eax, edx
	inc	ecx
$LL4@tmat2x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	ecx
	jns	SHORT $LL4@tmat2x2

; 137  : 		this->value[0] = m[0];

	mov	ecx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax

; 138  : 		this->value[1] = m[1];

	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], eax

; 139  : 	}

	mov	eax, edx
	pop	ebp
	ret	4
??0?$tmat2x2@M$01@glm@@QAE@ABU?$tmat4x2@M$01@1@@Z ENDP	; glm::tmat2x2<float,2>::tmat2x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$01@glm@@QAE@ABU?$tmat2x4@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat2x2@M$01@glm@@QAE@ABU?$tmat2x4@M$01@1@@Z PROC	; glm::tmat2x2<float,2>::tmat2x2<float,2>, COMDAT
; _this$ = ecx

; 129  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	mov	edx, ecx
	xor	ecx, ecx
	mov	eax, edx
	inc	ecx
$LL4@tmat2x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	ecx
	jns	SHORT $LL4@tmat2x2

; 130  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 131  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+16]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+12], eax

; 132  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x2@M$01@glm@@QAE@ABU?$tmat2x4@M$01@1@@Z ENDP	; glm::tmat2x2<float,2>::tmat2x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$01@glm@@QAE@ABU?$tmat3x2@M$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x2@M$01@glm@@QAE@ABU?$tmat3x2@M$01@1@@Z PROC	; glm::tmat2x2<float,2>::tmat2x2<float,2>, COMDAT
; _this$ = ecx

; 122  : 	{

	push	ebp
	mov	ebp, esp
	mov	edx, ecx
	xor	ecx, ecx
	mov	eax, edx
	inc	ecx
$LL4@tmat2x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	ecx
	jns	SHORT $LL4@tmat2x2

; 123  : 		this->value[0] = m[0];

	mov	ecx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax

; 124  : 		this->value[1] = m[1];

	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], eax

; 125  : 	}

	mov	eax, edx
	pop	ebp
	ret	4
??0?$tmat2x2@M$01@glm@@QAE@ABU?$tmat3x2@M$01@1@@Z ENDP	; glm::tmat2x2<float,2>::tmat2x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$01@glm@@QAE@ABU?$tmat2x3@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat2x2@M$01@glm@@QAE@ABU?$tmat2x3@M$01@1@@Z PROC	; glm::tmat2x2<float,2>::tmat2x2<float,2>, COMDAT
; _this$ = ecx

; 115  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	mov	edx, ecx
	xor	ecx, ecx
	mov	eax, edx
	inc	ecx
$LL4@tmat2x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	ecx
	jns	SHORT $LL4@tmat2x2

; 116  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 117  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+12]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+12], eax

; 118  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x2@M$01@glm@@QAE@ABU?$tmat2x3@M$01@1@@Z ENDP	; glm::tmat2x2<float,2>::tmat2x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$01@glm@@QAE@ABU?$tmat4x4@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat2x2@M$01@glm@@QAE@ABU?$tmat4x4@M$01@1@@Z PROC	; glm::tmat2x2<float,2>::tmat2x2<float,2>, COMDAT
; _this$ = ecx

; 108  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	mov	edx, ecx
	xor	ecx, ecx
	mov	eax, edx
	inc	ecx
$LL4@tmat2x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	ecx
	jns	SHORT $LL4@tmat2x2

; 109  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 110  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+16]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+12], eax

; 111  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x2@M$01@glm@@QAE@ABU?$tmat4x4@M$01@1@@Z ENDP	; glm::tmat2x2<float,2>::tmat2x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$01@glm@@QAE@ABU?$tmat3x3@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat2x2@M$01@glm@@QAE@ABU?$tmat3x3@M$01@1@@Z PROC	; glm::tmat2x2<float,2>::tmat2x2<float,2>, COMDAT
; _this$ = ecx

; 101  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	mov	edx, ecx
	xor	ecx, ecx
	mov	eax, edx
	inc	ecx
$LL4@tmat2x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	ecx
	jns	SHORT $LL4@tmat2x2

; 102  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 103  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+12]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+12], eax

; 104  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x2@M$01@glm@@QAE@ABU?$tmat3x3@M$01@1@@Z ENDP	; glm::tmat2x2<float,2>::tmat2x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$01@glm@@QAE@ABU?$tvec2@M$01@1@0@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
??0?$tmat2x2@M$01@glm@@QAE@ABU?$tvec2@M$01@1@0@Z PROC	; glm::tmat2x2<float,2>::tmat2x2<float,2>, COMDAT
; _this$ = ecx

; 62   : 	{

	push	ebp
	mov	ebp, esp
	mov	edx, ecx
	xor	ecx, ecx
	mov	eax, edx
	inc	ecx
$LL4@tmat2x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	ecx
	jns	SHORT $LL4@tmat2x2

; 63   : 		this->value[0] = v0;

	mov	ecx, DWORD PTR _v0$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]

; 64   : 		this->value[1] = v1;

	mov	ecx, DWORD PTR _v1$[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+12], eax

; 65   : 	}

	mov	eax, edx
	pop	ebp
	ret	8
??0?$tmat2x2@M$01@glm@@QAE@ABU?$tvec2@M$01@1@0@Z ENDP	; glm::tmat2x2<float,2>::tmat2x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$01@glm@@QAE@ABM000@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_x1$ = 16						; size = 4
_y1$ = 20						; size = 4
??0?$tmat2x2@M$01@glm@@QAE@ABM000@Z PROC		; glm::tmat2x2<float,2>::tmat2x2<float,2>, COMDAT
; _this$ = ecx

; 55   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	xor	edx, edx
	mov	eax, ecx
	inc	edx
$LL4@tmat2x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	edx
	jns	SHORT $LL4@tmat2x2

; 56   : 		this->value[0] = col_type(x0, y0);

	mov	eax, DWORD PTR _x0$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _y0$[ebp]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [ecx], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [ecx+4], eax

; 57   : 		this->value[1] = col_type(x1, y1);

	mov	eax, DWORD PTR _x1$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _y1$[ebp]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx+8], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [ecx+12], eax

; 58   : 	}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??0?$tmat2x2@M$01@glm@@QAE@ABM000@Z ENDP		; glm::tmat2x2<float,2>::tmat2x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$01@glm@@QAE@M@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
_scalar$ = 8						; size = 4
??0?$tmat2x2@M$01@glm@@QAE@M@Z PROC			; glm::tmat2x2<float,2>::tmat2x2<float,2>, COMDAT
; _this$ = ecx

; 44   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	xor	edx, edx
	mov	eax, ecx
	inc	edx
$LL4@tmat2x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	edx
	jns	SHORT $LL4@tmat2x2

; 45   : 		this->value[0] = col_type(scalar, 0);

	movss	xmm0, DWORD PTR _scalar$[ebp]
	and	DWORD PTR $T2[ebp+4], 0
	movss	DWORD PTR $T2[ebp], xmm0
	mov	eax, DWORD PTR $T2[ebp]

; 46   : 		this->value[1] = col_type(0, scalar);

	and	DWORD PTR $T1[ebp], 0
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx+8], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [ecx+12], eax

; 47   : 	}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x2@M$01@glm@@QAE@M@Z ENDP			; glm::tmat2x2<float,2>::tmat2x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat2x2@M$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat2x2<float,2>::tmat2x2<float,2>, COMDAT
; _this$ = ecx

; 40   : 	{}

	xor	edx, edx
	mov	eax, ecx
	inc	edx
$LL4@tmat2x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	edx
	jns	SHORT $LL4@tmat2x2
	mov	eax, ecx
	ret	4
??0?$tmat2x2@M$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat2x2<float,2>::tmat2x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tmat2x2@M$01@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tmat2x2@M$01@glm@@QAE@ABU01@@Z PROC		; glm::tmat2x2<float,2>::tmat2x2<float,2>, COMDAT
; _this$ = ecx

; 147  : template struct tmat2x2<float32, lowp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	mov	edi, ecx
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0?$tmat2x2@M$01@glm@@QAE@ABU01@@Z ENDP		; glm::tmat2x2<float,2>::tmat2x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$01@glm@@QAE@XZ
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
??0?$tmat2x2@M$01@glm@@QAE@XZ PROC			; glm::tmat2x2<float,2>::tmat2x2<float,2>, COMDAT
; _this$ = ecx

; 13   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	xor	edx, edx
	mov	eax, ecx
	inc	edx
$LL4@tmat2x2:
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR [eax+8]
	and	DWORD PTR [eax-4], 0
	dec	edx
	jns	SHORT $LL4@tmat2x2

; 14   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 15   : 				this->value[0] = col_type(1, 0);

	and	DWORD PTR $T2[ebp+4], 0
	mov	DWORD PTR $T2[ebp], 1065353216		; 3f800000H
	mov	eax, DWORD PTR $T2[ebp]

; 16   : 				this->value[1] = col_type(0, 1);

	and	DWORD PTR $T1[ebp], 0
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR $T1[ebp+4], 1065353216	; 3f800000H
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [ecx+12], eax

; 17   : #			endif
; 18   : 		}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$tmat2x2@M$01@glm@@QAE@XZ ENDP			; glm::tmat2x2<float,2>::tmat2x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@N$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec4@N$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<double,0>::operator--, COMDAT
; _this$ = ecx

; 482  : 	{

	push	ebp
	mov	ebp, esp

; 483  : 		tvec4<T, P> Result(*this);
; 484  : 		--*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	mov	edx, ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	movups	xmm0, XMMWORD PTR [edx]
	push	8
	pop	ecx
	subpd	xmm0, xmm1
	mov	esi, edx
	mov	edi, eax
	rep movsd
	movups	XMMWORD PTR [edx], xmm0
	pop	edi
	movups	xmm0, XMMWORD PTR [edx+16]
	pop	esi
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+16], xmm0

; 485  : 		return Result;
; 486  : 	}

	pop	ebp
	ret	8
??F?$tvec4@N$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<double,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@N$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec4@N$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<double,0>::operator++, COMDAT
; _this$ = ecx

; 474  : 	{

	push	ebp
	mov	ebp, esp

; 475  : 		tvec4<T, P> Result(*this);
; 476  : 		++*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	mov	edx, ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	movups	xmm0, XMMWORD PTR [edx]
	push	8
	pop	ecx
	addpd	xmm0, xmm1
	mov	esi, edx
	mov	edi, eax
	rep movsd
	movups	XMMWORD PTR [edx], xmm0
	pop	edi
	movups	xmm0, XMMWORD PTR [edx+16]
	pop	esi
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+16], xmm0

; 477  : 		return Result;
; 478  : 	}

	pop	ebp
	ret	8
??E?$tvec4@N$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<double,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@N$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec4@N$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec4<double,0>::operator--, COMDAT
; _this$ = ecx

; 465  : 		--this->x;

	movups	xmm0, XMMWORD PTR [ecx]

; 466  : 		--this->y;
; 467  : 		--this->z;
; 468  : 		--this->w;
; 469  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0

; 470  : 	}

	ret	0
??F?$tvec4@N$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<double,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@N$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec4@N$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec4<double,0>::operator++, COMDAT
; _this$ = ecx

; 455  : 		++this->x;

	movups	xmm0, XMMWORD PTR [ecx]

; 456  : 		++this->y;
; 457  : 		++this->z;
; 458  : 		++this->w;
; 459  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0

; 460  : 	}

	ret	0
??E?$tvec4@N$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<double,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec4@N$0A@@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec4@N$0A@@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec4<double,0>::operator=, COMDAT
; _this$ = ecx

; 144  : template struct tvec4<float64, highp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	8
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tvec4@N$0A@@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec4<double,0>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@N$0A@@glm@@QAE@NNNN@Z
_TEXT	SEGMENT
_a$ = 8							; size = 8
_b$ = 16						; size = 8
_c$ = 24						; size = 8
_d$ = 32						; size = 8
??0?$tvec4@N$0A@@glm@@QAE@NNNN@Z PROC			; glm::tvec4<double,0>::tvec4<double,0>, COMDAT
; _this$ = ecx

; 193  : 	{}

	push	ebp
	mov	ebp, esp
	movsd	xmm0, QWORD PTR _a$[ebp]
	mov	eax, ecx
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR _b$[ebp]
	movsd	QWORD PTR [ecx+8], xmm0
	movsd	xmm0, QWORD PTR _c$[ebp]
	movsd	QWORD PTR [ecx+16], xmm0
	movsd	xmm0, QWORD PTR _d$[ebp]
	movsd	QWORD PTR [ecx+24], xmm0
	pop	ebp
	ret	32					; 00000020H
??0?$tvec4@N$0A@@glm@@QAE@NNNN@Z ENDP			; glm::tvec4<double,0>::tvec4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@N$0A@@glm@@QAE@N@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 8
??0?$tvec4@N$0A@@glm@@QAE@N@Z PROC			; glm::tvec4<double,0>::tvec4<double,0>, COMDAT
; _this$ = ecx

; 188  : 	{}

	push	ebp
	mov	ebp, esp
	movsd	xmm0, QWORD PTR _scalar$[ebp]
	mov	eax, ecx
	unpcklpd xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	pop	ebp
	ret	8
??0?$tvec4@N$0A@@glm@@QAE@N@Z ENDP			; glm::tvec4<double,0>::tvec4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@N$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec4@N$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec4<double,0>::tvec4<double,0>, COMDAT
; _this$ = ecx

; 183  : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec4@N$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec4<double,0>::tvec4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec4@N$0A@@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec4@N$0A@@glm@@QAE@ABU01@@Z PROC			; glm::tvec4<double,0>::tvec4<double,0>, COMDAT
; _this$ = ecx

; 144  : template struct tvec4<float64, highp>;

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ___that$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	QWORD PTR [ecx+8], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	QWORD PTR [ecx+8], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	QWORD PTR [ecx+8], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR [ecx+16], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR [ecx+16], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR [ecx+16], xmm0
	movsd	xmm0, QWORD PTR [eax+24]
	movsd	QWORD PTR [ecx+24], xmm0
	movsd	xmm0, QWORD PTR [eax+24]
	movsd	QWORD PTR [ecx+24], xmm0
	movsd	xmm0, QWORD PTR [eax+24]
	mov	eax, ecx
	movsd	QWORD PTR [ecx+24], xmm0
	pop	ebp
	ret	4
??0?$tvec4@N$0A@@glm@@QAE@ABU01@@Z ENDP			; glm::tvec4<double,0>::tvec4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@N$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec4@N$0A@@glm@@QAE@XZ PROC			; glm::tvec4<double,0>::tvec4<double,0>, COMDAT
; _this$ = ecx

; 163  : 		{}

	xorps	xmm0, xmm0
	mov	eax, ecx
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	ret	0
??0?$tvec4@N$0A@@glm@@QAE@XZ ENDP			; glm::tvec4<double,0>::tvec4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@N$0A@@glm@@QBEABNH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@N$0A@@glm@@QBEABNH@Z PROC			; glm::tvec4<double,0>::operator[], COMDAT
; _this$ = ecx

; 336  : 	{

	push	ebp
	mov	ebp, esp

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 339  : 	}

	pop	ebp
	ret	4
??A?$tvec4@N$0A@@glm@@QBEABNH@Z ENDP			; glm::tvec4<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@N$0A@@glm@@QAEAANH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@N$0A@@glm@@QAEAANH@Z PROC			; glm::tvec4<double,0>::operator[], COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 332  : 	}

	pop	ebp
	ret	4
??A?$tvec4@N$0A@@glm@@QAEAANH@Z ENDP			; glm::tvec4<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@N$0A@@glm@@SAHXZ PROC			; glm::tvec4<double,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	push	4
	pop	eax
	ret	0
?length@?$tvec4@N$0A@@glm@@SAHXZ ENDP			; glm::tvec4<double,0>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@_J$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec4@_J$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tvec4<__int64,0>::operator--, COMDAT
; _this$ = ecx

; 482  : 	{

	push	ebp
	mov	ebp, esp

; 483  : 		tvec4<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, ecx
	push	esi
	push	edi
	push	8
	pop	ecx
	mov	esi, edx
	mov	edi, eax
	rep movsd

; 484  : 		--*this;

	or	ecx, -1
	add	DWORD PTR [edx], ecx
	pop	edi
	adc	DWORD PTR [edx+4], ecx
	add	DWORD PTR [edx+8], ecx
	pop	esi
	adc	DWORD PTR [edx+12], ecx
	add	DWORD PTR [edx+16], ecx
	adc	DWORD PTR [edx+20], ecx
	add	DWORD PTR [edx+24], ecx
	adc	DWORD PTR [edx+28], ecx

; 485  : 		return Result;
; 486  : 	}

	pop	ebp
	ret	8
??F?$tvec4@_J$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tvec4<__int64,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@_J$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec4@_J$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tvec4<__int64,0>::operator++, COMDAT
; _this$ = ecx

; 474  : 	{

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi

; 475  : 		tvec4<T, P> Result(*this);

	mov	edi, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, ecx
	push	8
	pop	ecx
	mov	esi, eax
	rep movsd

; 476  : 		++*this;

	mov	ecx, eax
	call	??E?$tvec4@_J$0A@@glm@@QAEAAU01@XZ	; glm::tvec4<__int64,0>::operator++

; 477  : 		return Result;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi

; 478  : 	}

	pop	ebp
	ret	8
??E?$tvec4@_J$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tvec4<__int64,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@_J$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec4@_J$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec4<__int64,0>::operator--, COMDAT
; _this$ = ecx

; 465  : 		--this->x;

	or	eax, -1
	add	DWORD PTR [ecx], eax
	adc	DWORD PTR [ecx+4], eax

; 466  : 		--this->y;

	add	DWORD PTR [ecx+8], eax
	adc	DWORD PTR [ecx+12], eax

; 467  : 		--this->z;

	add	DWORD PTR [ecx+16], eax
	adc	DWORD PTR [ecx+20], eax

; 468  : 		--this->w;

	add	DWORD PTR [ecx+24], eax
	adc	DWORD PTR [ecx+28], eax

; 469  : 		return *this;

	mov	eax, ecx

; 470  : 	}

	ret	0
??F?$tvec4@_J$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<__int64,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@_J$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec4@_J$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec4<__int64,0>::operator++, COMDAT
; _this$ = ecx

; 455  : 		++this->x;

	xor	edx, edx
	inc	edx
	add	DWORD PTR [ecx], edx
	push	0
	pop	eax
	adc	DWORD PTR [ecx+4], eax

; 456  : 		++this->y;

	add	DWORD PTR [ecx+8], edx
	adc	DWORD PTR [ecx+12], eax

; 457  : 		++this->z;

	add	DWORD PTR [ecx+16], edx
	adc	DWORD PTR [ecx+20], eax

; 458  : 		++this->w;

	add	DWORD PTR [ecx+24], edx
	adc	DWORD PTR [ecx+28], eax

; 459  : 		return *this;

	mov	eax, ecx

; 460  : 	}

	ret	0
??E?$tvec4@_J$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<__int64,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec4@_J$0A@@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec4@_J$0A@@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec4<__int64,0>::operator=, COMDAT
; _this$ = ecx

; 142  : template struct tvec4<int64, highp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	8
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tvec4@_J$0A@@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec4<__int64,0>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_J$0A@@glm@@QAE@_J000@Z
_TEXT	SEGMENT
_a$ = 8							; size = 8
_b$ = 16						; size = 8
_c$ = 24						; size = 8
_d$ = 32						; size = 8
??0?$tvec4@_J$0A@@glm@@QAE@_J000@Z PROC			; glm::tvec4<__int64,0>::tvec4<__int64,0>, COMDAT
; _this$ = ecx

; 193  : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _a$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _b$[ebp+4]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR _c$[ebp+4]
	mov	DWORD PTR [ecx+20], eax
	mov	eax, DWORD PTR _d$[ebp]
	mov	DWORD PTR [ecx+24], eax
	mov	eax, DWORD PTR _d$[ebp+4]
	mov	DWORD PTR [ecx+28], eax
	mov	eax, ecx
	pop	ebp
	ret	32					; 00000020H
??0?$tvec4@_J$0A@@glm@@QAE@_J000@Z ENDP			; glm::tvec4<__int64,0>::tvec4<__int64,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_J$0A@@glm@@QAE@_J@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 8
??0?$tvec4@_J$0A@@glm@@QAE@_J@Z PROC			; glm::tvec4<__int64,0>::tvec4<__int64,0>, COMDAT
; _this$ = ecx

; 188  : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _scalar$[ebp+4]
	mov	edx, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+12], eax
	mov	DWORD PTR [ecx+20], eax
	mov	DWORD PTR [ecx+28], eax
	mov	eax, ecx
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+8], edx
	mov	DWORD PTR [ecx+16], edx
	mov	DWORD PTR [ecx+24], edx
	pop	ebp
	ret	8
??0?$tvec4@_J$0A@@glm@@QAE@_J@Z ENDP			; glm::tvec4<__int64,0>::tvec4<__int64,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_J$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec4@_J$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec4<__int64,0>::tvec4<__int64,0>, COMDAT
; _this$ = ecx

; 183  : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec4@_J$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec4<__int64,0>::tvec4<__int64,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec4@_J$0A@@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec4@_J$0A@@glm@@QAE@ABU01@@Z PROC		; glm::tvec4<__int64,0>::tvec4<__int64,0>, COMDAT
; _this$ = ecx

; 142  : template struct tvec4<int64, highp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx+20], eax
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx+20], eax
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx+20], eax
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR [ecx+24], eax
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR [ecx+28], eax
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR [ecx+24], eax
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR [ecx+28], eax
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR [ecx+24], eax
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR [ecx+28], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec4@_J$0A@@glm@@QAE@ABU01@@Z ENDP		; glm::tvec4<__int64,0>::tvec4<__int64,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_J$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec4@_J$0A@@glm@@QAE@XZ PROC			; glm::tvec4<__int64,0>::tvec4<__int64,0>, COMDAT
; _this$ = ecx

; 163  : 		{}

	xor	eax, eax
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR [ecx+12], eax
	mov	DWORD PTR [ecx+16], eax
	mov	DWORD PTR [ecx+20], eax
	mov	DWORD PTR [ecx+24], eax
	mov	DWORD PTR [ecx+28], eax
	mov	eax, ecx
	ret	0
??0?$tvec4@_J$0A@@glm@@QAE@XZ ENDP			; glm::tvec4<__int64,0>::tvec4<__int64,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@_J$0A@@glm@@QBEAB_JH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@_J$0A@@glm@@QBEAB_JH@Z PROC			; glm::tvec4<__int64,0>::operator[], COMDAT
; _this$ = ecx

; 336  : 	{

	push	ebp
	mov	ebp, esp

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 339  : 	}

	pop	ebp
	ret	4
??A?$tvec4@_J$0A@@glm@@QBEAB_JH@Z ENDP			; glm::tvec4<__int64,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@_J$0A@@glm@@QAEAA_JH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@_J$0A@@glm@@QAEAA_JH@Z PROC			; glm::tvec4<__int64,0>::operator[], COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 332  : 	}

	pop	ebp
	ret	4
??A?$tvec4@_J$0A@@glm@@QAEAA_JH@Z ENDP			; glm::tvec4<__int64,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@_J$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@_J$0A@@glm@@SAHXZ PROC			; glm::tvec4<__int64,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	push	4
	pop	eax
	ret	0
?length@?$tvec4@_J$0A@@glm@@SAHXZ ENDP			; glm::tvec4<__int64,0>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@H$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec4@H$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<int,0>::operator--, COMDAT
; _this$ = ecx

; 482  : 	{

	push	ebp
	mov	ebp, esp

; 483  : 		tvec4<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	mov	esi, ecx
	mov	edi, eax
	movsd
	movsd
	movsd
	movsd

; 484  : 		--*this;

	dec	DWORD PTR [ecx]
	dec	DWORD PTR [ecx+4]
	dec	DWORD PTR [ecx+8]
	dec	DWORD PTR [ecx+12]
	pop	edi
	pop	esi

; 485  : 		return Result;
; 486  : 	}

	pop	ebp
	ret	8
??F?$tvec4@H$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<int,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@H$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec4@H$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<int,0>::operator++, COMDAT
; _this$ = ecx

; 474  : 	{

	push	ebp
	mov	ebp, esp

; 475  : 		tvec4<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	mov	esi, ecx
	mov	edi, eax
	movsd
	movsd
	movsd
	movsd

; 476  : 		++*this;

	inc	DWORD PTR [ecx]
	inc	DWORD PTR [ecx+4]
	inc	DWORD PTR [ecx+8]
	inc	DWORD PTR [ecx+12]
	pop	edi
	pop	esi

; 477  : 		return Result;
; 478  : 	}

	pop	ebp
	ret	8
??E?$tvec4@H$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<int,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@H$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec4@H$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec4<int,0>::operator--, COMDAT
; _this$ = ecx

; 465  : 		--this->x;

	dec	DWORD PTR [ecx]

; 466  : 		--this->y;
; 467  : 		--this->z;
; 468  : 		--this->w;
; 469  : 		return *this;

	mov	eax, ecx
	dec	DWORD PTR [ecx+4]
	dec	DWORD PTR [ecx+8]
	dec	DWORD PTR [ecx+12]

; 470  : 	}

	ret	0
??F?$tvec4@H$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<int,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@H$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec4@H$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec4<int,0>::operator++, COMDAT
; _this$ = ecx

; 455  : 		++this->x;

	inc	DWORD PTR [ecx]

; 456  : 		++this->y;
; 457  : 		++this->z;
; 458  : 		++this->w;
; 459  : 		return *this;

	mov	eax, ecx
	inc	DWORD PTR [ecx+4]
	inc	DWORD PTR [ecx+8]
	inc	DWORD PTR [ecx+12]

; 460  : 	}

	ret	0
??E?$tvec4@H$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<int,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec4@H$0A@@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec4@H$0A@@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec4<int,0>::operator=, COMDAT
; _this$ = ecx

; 141  : template struct tvec4<int32, highp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	mov	edi, ecx
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tvec4@H$0A@@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec4<int,0>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@H$0A@@glm@@QAE@HHHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
_d$ = 20						; size = 4
??0?$tvec4@H$0A@@glm@@QAE@HHHH@Z PROC			; glm::tvec4<int,0>::tvec4<int,0>, COMDAT
; _this$ = ecx

; 193  : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _d$[ebp]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, ecx
	pop	ebp
	ret	16					; 00000010H
??0?$tvec4@H$0A@@glm@@QAE@HHHH@Z ENDP			; glm::tvec4<int,0>::tvec4<int,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@H$0A@@glm@@QAE@H@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 4
??0?$tvec4@H$0A@@glm@@QAE@H@Z PROC			; glm::tvec4<int,0>::tvec4<int,0>, COMDAT
; _this$ = ecx

; 188  : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR [ecx+12], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec4@H$0A@@glm@@QAE@H@Z ENDP			; glm::tvec4<int,0>::tvec4<int,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@H$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec4@H$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec4<int,0>::tvec4<int,0>, COMDAT
; _this$ = ecx

; 183  : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec4@H$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec4<int,0>::tvec4<int,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec4@H$0A@@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec4@H$0A@@glm@@QAE@ABU01@@Z PROC			; glm::tvec4<int,0>::tvec4<int,0>, COMDAT
; _this$ = ecx

; 141  : template struct tvec4<int32, highp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec4@H$0A@@glm@@QAE@ABU01@@Z ENDP			; glm::tvec4<int,0>::tvec4<int,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@H$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec4@H$0A@@glm@@QAE@XZ PROC			; glm::tvec4<int,0>::tvec4<int,0>, COMDAT
; _this$ = ecx

; 163  : 		{}

	xor	eax, eax
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR [ecx+12], eax
	mov	eax, ecx
	ret	0
??0?$tvec4@H$0A@@glm@@QAE@XZ ENDP			; glm::tvec4<int,0>::tvec4<int,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@H$0A@@glm@@QBEABHH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@H$0A@@glm@@QBEABHH@Z PROC			; glm::tvec4<int,0>::operator[], COMDAT
; _this$ = ecx

; 336  : 	{

	push	ebp
	mov	ebp, esp

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 339  : 	}

	pop	ebp
	ret	4
??A?$tvec4@H$0A@@glm@@QBEABHH@Z ENDP			; glm::tvec4<int,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@H$0A@@glm@@QAEAAHH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@H$0A@@glm@@QAEAAHH@Z PROC			; glm::tvec4<int,0>::operator[], COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 332  : 	}

	pop	ebp
	ret	4
??A?$tvec4@H$0A@@glm@@QAEAAHH@Z ENDP			; glm::tvec4<int,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@H$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@H$0A@@glm@@SAHXZ PROC			; glm::tvec4<int,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	push	4
	pop	eax
	ret	0
?length@?$tvec4@H$0A@@glm@@SAHXZ ENDP			; glm::tvec4<int,0>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@F$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec4@F$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<short,0>::operator--, COMDAT
; _this$ = ecx

; 482  : 	{

	push	ebp
	mov	ebp, esp

; 483  : 		tvec4<T, P> Result(*this);

	mov	eax, DWORD PTR [ecx]

; 484  : 		--*this;

	dec	WORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]
	dec	WORD PTR [ecx+2]
	dec	WORD PTR [ecx+4]
	dec	WORD PTR [ecx+6]
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [esi], eax

; 485  : 		return Result;

	mov	eax, esi
	mov	DWORD PTR [esi+4], edx
	pop	esi

; 486  : 	}

	pop	ebp
	ret	8
??F?$tvec4@F$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<short,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@F$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec4@F$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<short,0>::operator++, COMDAT
; _this$ = ecx

; 474  : 	{

	push	ebp
	mov	ebp, esp

; 475  : 		tvec4<T, P> Result(*this);

	mov	eax, DWORD PTR [ecx]

; 476  : 		++*this;

	inc	WORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]
	inc	WORD PTR [ecx+2]
	inc	WORD PTR [ecx+4]
	inc	WORD PTR [ecx+6]
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [esi], eax

; 477  : 		return Result;

	mov	eax, esi
	mov	DWORD PTR [esi+4], edx
	pop	esi

; 478  : 	}

	pop	ebp
	ret	8
??E?$tvec4@F$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<short,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@F$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec4@F$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec4<short,0>::operator--, COMDAT
; _this$ = ecx

; 465  : 		--this->x;

	dec	WORD PTR [ecx]

; 466  : 		--this->y;
; 467  : 		--this->z;
; 468  : 		--this->w;
; 469  : 		return *this;

	mov	eax, ecx
	dec	WORD PTR [ecx+2]
	dec	WORD PTR [ecx+4]
	dec	WORD PTR [ecx+6]

; 470  : 	}

	ret	0
??F?$tvec4@F$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<short,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@F$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec4@F$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec4<short,0>::operator++, COMDAT
; _this$ = ecx

; 455  : 		++this->x;

	inc	WORD PTR [ecx]

; 456  : 		++this->y;
; 457  : 		++this->z;
; 458  : 		++this->w;
; 459  : 		return *this;

	mov	eax, ecx
	inc	WORD PTR [ecx+2]
	inc	WORD PTR [ecx+4]
	inc	WORD PTR [ecx+6]

; 460  : 	}

	ret	0
??E?$tvec4@F$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<short,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec4@F$0A@@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec4@F$0A@@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec4<short,0>::operator=, COMDAT
; _this$ = ecx

; 140  : template struct tvec4<int16, highp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??4?$tvec4@F$0A@@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec4<short,0>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@F$0A@@glm@@QAE@FFFF@Z
_TEXT	SEGMENT
_a$ = 8							; size = 2
_b$ = 12						; size = 2
_c$ = 16						; size = 2
_d$ = 20						; size = 2
??0?$tvec4@F$0A@@glm@@QAE@FFFF@Z PROC			; glm::tvec4<short,0>::tvec4<short,0>, COMDAT
; _this$ = ecx

; 193  : 	{}

	push	ebp
	mov	ebp, esp
	mov	ax, WORD PTR _a$[ebp]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR _b$[ebp]
	mov	WORD PTR [ecx+2], ax
	mov	ax, WORD PTR _c$[ebp]
	mov	WORD PTR [ecx+4], ax
	mov	ax, WORD PTR _d$[ebp]
	mov	WORD PTR [ecx+6], ax
	mov	eax, ecx
	pop	ebp
	ret	16					; 00000010H
??0?$tvec4@F$0A@@glm@@QAE@FFFF@Z ENDP			; glm::tvec4<short,0>::tvec4<short,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@F$0A@@glm@@QAE@F@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 2
??0?$tvec4@F$0A@@glm@@QAE@F@Z PROC			; glm::tvec4<short,0>::tvec4<short,0>, COMDAT
; _this$ = ecx

; 188  : 	{}

	push	ebp
	mov	ebp, esp
	mov	ax, WORD PTR _scalar$[ebp]
	mov	WORD PTR [ecx], ax
	mov	WORD PTR [ecx+2], ax
	mov	WORD PTR [ecx+4], ax
	mov	WORD PTR [ecx+6], ax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec4@F$0A@@glm@@QAE@F@Z ENDP			; glm::tvec4<short,0>::tvec4<short,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@F$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec4@F$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec4<short,0>::tvec4<short,0>, COMDAT
; _this$ = ecx

; 183  : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec4@F$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec4<short,0>::tvec4<short,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec4@F$0A@@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec4@F$0A@@glm@@QAE@ABU01@@Z PROC			; glm::tvec4<short,0>::tvec4<short,0>, COMDAT
; _this$ = ecx

; 140  : template struct tvec4<int16, highp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR [edx+2]
	mov	WORD PTR [ecx+2], ax
	mov	ax, WORD PTR [edx+2]
	mov	WORD PTR [ecx+2], ax
	mov	ax, WORD PTR [edx+2]
	mov	WORD PTR [ecx+2], ax
	mov	ax, WORD PTR [edx+4]
	mov	WORD PTR [ecx+4], ax
	mov	ax, WORD PTR [edx+4]
	mov	WORD PTR [ecx+4], ax
	mov	ax, WORD PTR [edx+4]
	mov	WORD PTR [ecx+4], ax
	mov	ax, WORD PTR [edx+6]
	mov	WORD PTR [ecx+6], ax
	mov	ax, WORD PTR [edx+6]
	mov	WORD PTR [ecx+6], ax
	mov	ax, WORD PTR [edx+6]
	mov	WORD PTR [ecx+6], ax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec4@F$0A@@glm@@QAE@ABU01@@Z ENDP			; glm::tvec4<short,0>::tvec4<short,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@F$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec4@F$0A@@glm@@QAE@XZ PROC			; glm::tvec4<short,0>::tvec4<short,0>, COMDAT
; _this$ = ecx

; 163  : 		{}

	xor	eax, eax
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	ret	0
??0?$tvec4@F$0A@@glm@@QAE@XZ ENDP			; glm::tvec4<short,0>::tvec4<short,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@F$0A@@glm@@QBEABFH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@F$0A@@glm@@QBEABFH@Z PROC			; glm::tvec4<short,0>::operator[], COMDAT
; _this$ = ecx

; 336  : 	{

	push	ebp
	mov	ebp, esp

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 339  : 	}

	pop	ebp
	ret	4
??A?$tvec4@F$0A@@glm@@QBEABFH@Z ENDP			; glm::tvec4<short,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@F$0A@@glm@@QAEAAFH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@F$0A@@glm@@QAEAAFH@Z PROC			; glm::tvec4<short,0>::operator[], COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 332  : 	}

	pop	ebp
	ret	4
??A?$tvec4@F$0A@@glm@@QAEAAFH@Z ENDP			; glm::tvec4<short,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@F$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@F$0A@@glm@@SAHXZ PROC			; glm::tvec4<short,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	push	4
	pop	eax
	ret	0
?length@?$tvec4@F$0A@@glm@@SAHXZ ENDP			; glm::tvec4<short,0>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@_K$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec4@_K$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tvec4<unsigned __int64,0>::operator--, COMDAT
; _this$ = ecx

; 482  : 	{

	push	ebp
	mov	ebp, esp

; 483  : 		tvec4<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, ecx
	push	esi
	push	edi
	push	8
	pop	ecx
	mov	esi, edx
	mov	edi, eax
	rep movsd

; 484  : 		--*this;

	or	ecx, -1
	add	DWORD PTR [edx], ecx
	pop	edi
	adc	DWORD PTR [edx+4], ecx
	add	DWORD PTR [edx+8], ecx
	pop	esi
	adc	DWORD PTR [edx+12], ecx
	add	DWORD PTR [edx+16], ecx
	adc	DWORD PTR [edx+20], ecx
	add	DWORD PTR [edx+24], ecx
	adc	DWORD PTR [edx+28], ecx

; 485  : 		return Result;
; 486  : 	}

	pop	ebp
	ret	8
??F?$tvec4@_K$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tvec4<unsigned __int64,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@_K$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec4@_K$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tvec4<unsigned __int64,0>::operator++, COMDAT
; _this$ = ecx

; 474  : 	{

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi

; 475  : 		tvec4<T, P> Result(*this);

	mov	edi, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, ecx
	push	8
	pop	ecx
	mov	esi, eax
	rep movsd

; 476  : 		++*this;

	mov	ecx, eax
	call	??E?$tvec4@_K$0A@@glm@@QAEAAU01@XZ	; glm::tvec4<unsigned __int64,0>::operator++

; 477  : 		return Result;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi

; 478  : 	}

	pop	ebp
	ret	8
??E?$tvec4@_K$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tvec4<unsigned __int64,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@_K$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec4@_K$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec4<unsigned __int64,0>::operator--, COMDAT
; _this$ = ecx

; 465  : 		--this->x;

	or	eax, -1
	add	DWORD PTR [ecx], eax
	adc	DWORD PTR [ecx+4], eax

; 466  : 		--this->y;

	add	DWORD PTR [ecx+8], eax
	adc	DWORD PTR [ecx+12], eax

; 467  : 		--this->z;

	add	DWORD PTR [ecx+16], eax
	adc	DWORD PTR [ecx+20], eax

; 468  : 		--this->w;

	add	DWORD PTR [ecx+24], eax
	adc	DWORD PTR [ecx+28], eax

; 469  : 		return *this;

	mov	eax, ecx

; 470  : 	}

	ret	0
??F?$tvec4@_K$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<unsigned __int64,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@_K$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec4@_K$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec4<unsigned __int64,0>::operator++, COMDAT
; _this$ = ecx

; 455  : 		++this->x;

	xor	edx, edx
	inc	edx
	add	DWORD PTR [ecx], edx
	push	0
	pop	eax
	adc	DWORD PTR [ecx+4], eax

; 456  : 		++this->y;

	add	DWORD PTR [ecx+8], edx
	adc	DWORD PTR [ecx+12], eax

; 457  : 		++this->z;

	add	DWORD PTR [ecx+16], edx
	adc	DWORD PTR [ecx+20], eax

; 458  : 		++this->w;

	add	DWORD PTR [ecx+24], edx
	adc	DWORD PTR [ecx+28], eax

; 459  : 		return *this;

	mov	eax, ecx

; 460  : 	}

	ret	0
??E?$tvec4@_K$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<unsigned __int64,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec4@_K$0A@@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec4@_K$0A@@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec4<unsigned __int64,0>::operator=, COMDAT
; _this$ = ecx

; 138  : template struct tvec4<uint64, highp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	8
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tvec4@_K$0A@@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec4<unsigned __int64,0>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_K$0A@@glm@@QAE@_K000@Z
_TEXT	SEGMENT
_a$ = 8							; size = 8
_b$ = 16						; size = 8
_c$ = 24						; size = 8
_d$ = 32						; size = 8
??0?$tvec4@_K$0A@@glm@@QAE@_K000@Z PROC			; glm::tvec4<unsigned __int64,0>::tvec4<unsigned __int64,0>, COMDAT
; _this$ = ecx

; 193  : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _a$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _b$[ebp+4]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR _c$[ebp+4]
	mov	DWORD PTR [ecx+20], eax
	mov	eax, DWORD PTR _d$[ebp]
	mov	DWORD PTR [ecx+24], eax
	mov	eax, DWORD PTR _d$[ebp+4]
	mov	DWORD PTR [ecx+28], eax
	mov	eax, ecx
	pop	ebp
	ret	32					; 00000020H
??0?$tvec4@_K$0A@@glm@@QAE@_K000@Z ENDP			; glm::tvec4<unsigned __int64,0>::tvec4<unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_K$0A@@glm@@QAE@_K@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 8
??0?$tvec4@_K$0A@@glm@@QAE@_K@Z PROC			; glm::tvec4<unsigned __int64,0>::tvec4<unsigned __int64,0>, COMDAT
; _this$ = ecx

; 188  : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _scalar$[ebp+4]
	mov	edx, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+12], eax
	mov	DWORD PTR [ecx+20], eax
	mov	DWORD PTR [ecx+28], eax
	mov	eax, ecx
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+8], edx
	mov	DWORD PTR [ecx+16], edx
	mov	DWORD PTR [ecx+24], edx
	pop	ebp
	ret	8
??0?$tvec4@_K$0A@@glm@@QAE@_K@Z ENDP			; glm::tvec4<unsigned __int64,0>::tvec4<unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_K$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec4@_K$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec4<unsigned __int64,0>::tvec4<unsigned __int64,0>, COMDAT
; _this$ = ecx

; 183  : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec4@_K$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec4<unsigned __int64,0>::tvec4<unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec4@_K$0A@@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec4@_K$0A@@glm@@QAE@ABU01@@Z PROC		; glm::tvec4<unsigned __int64,0>::tvec4<unsigned __int64,0>, COMDAT
; _this$ = ecx

; 138  : template struct tvec4<uint64, highp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx+20], eax
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx+20], eax
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx+20], eax
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR [ecx+24], eax
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR [ecx+28], eax
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR [ecx+24], eax
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR [ecx+28], eax
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR [ecx+24], eax
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR [ecx+28], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec4@_K$0A@@glm@@QAE@ABU01@@Z ENDP		; glm::tvec4<unsigned __int64,0>::tvec4<unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_K$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec4@_K$0A@@glm@@QAE@XZ PROC			; glm::tvec4<unsigned __int64,0>::tvec4<unsigned __int64,0>, COMDAT
; _this$ = ecx

; 163  : 		{}

	xor	eax, eax
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR [ecx+12], eax
	mov	DWORD PTR [ecx+16], eax
	mov	DWORD PTR [ecx+20], eax
	mov	DWORD PTR [ecx+24], eax
	mov	DWORD PTR [ecx+28], eax
	mov	eax, ecx
	ret	0
??0?$tvec4@_K$0A@@glm@@QAE@XZ ENDP			; glm::tvec4<unsigned __int64,0>::tvec4<unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@_K$0A@@glm@@QBEAB_KH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@_K$0A@@glm@@QBEAB_KH@Z PROC			; glm::tvec4<unsigned __int64,0>::operator[], COMDAT
; _this$ = ecx

; 336  : 	{

	push	ebp
	mov	ebp, esp

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 339  : 	}

	pop	ebp
	ret	4
??A?$tvec4@_K$0A@@glm@@QBEAB_KH@Z ENDP			; glm::tvec4<unsigned __int64,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@_K$0A@@glm@@QAEAA_KH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@_K$0A@@glm@@QAEAA_KH@Z PROC			; glm::tvec4<unsigned __int64,0>::operator[], COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 332  : 	}

	pop	ebp
	ret	4
??A?$tvec4@_K$0A@@glm@@QAEAA_KH@Z ENDP			; glm::tvec4<unsigned __int64,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@_K$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@_K$0A@@glm@@SAHXZ PROC			; glm::tvec4<unsigned __int64,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	push	4
	pop	eax
	ret	0
?length@?$tvec4@_K$0A@@glm@@SAHXZ ENDP			; glm::tvec4<unsigned __int64,0>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@I$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec4@I$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<unsigned int,0>::operator--, COMDAT
; _this$ = ecx

; 482  : 	{

	push	ebp
	mov	ebp, esp

; 483  : 		tvec4<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	mov	esi, ecx
	mov	edi, eax
	movsd
	movsd
	movsd
	movsd

; 484  : 		--*this;

	dec	DWORD PTR [ecx]
	dec	DWORD PTR [ecx+4]
	dec	DWORD PTR [ecx+8]
	dec	DWORD PTR [ecx+12]
	pop	edi
	pop	esi

; 485  : 		return Result;
; 486  : 	}

	pop	ebp
	ret	8
??F?$tvec4@I$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<unsigned int,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@I$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec4@I$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<unsigned int,0>::operator++, COMDAT
; _this$ = ecx

; 474  : 	{

	push	ebp
	mov	ebp, esp

; 475  : 		tvec4<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	mov	esi, ecx
	mov	edi, eax
	movsd
	movsd
	movsd
	movsd

; 476  : 		++*this;

	inc	DWORD PTR [ecx]
	inc	DWORD PTR [ecx+4]
	inc	DWORD PTR [ecx+8]
	inc	DWORD PTR [ecx+12]
	pop	edi
	pop	esi

; 477  : 		return Result;
; 478  : 	}

	pop	ebp
	ret	8
??E?$tvec4@I$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<unsigned int,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@I$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec4@I$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec4<unsigned int,0>::operator--, COMDAT
; _this$ = ecx

; 465  : 		--this->x;

	dec	DWORD PTR [ecx]

; 466  : 		--this->y;
; 467  : 		--this->z;
; 468  : 		--this->w;
; 469  : 		return *this;

	mov	eax, ecx
	dec	DWORD PTR [ecx+4]
	dec	DWORD PTR [ecx+8]
	dec	DWORD PTR [ecx+12]

; 470  : 	}

	ret	0
??F?$tvec4@I$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<unsigned int,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@I$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec4@I$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec4<unsigned int,0>::operator++, COMDAT
; _this$ = ecx

; 455  : 		++this->x;

	inc	DWORD PTR [ecx]

; 456  : 		++this->y;
; 457  : 		++this->z;
; 458  : 		++this->w;
; 459  : 		return *this;

	mov	eax, ecx
	inc	DWORD PTR [ecx+4]
	inc	DWORD PTR [ecx+8]
	inc	DWORD PTR [ecx+12]

; 460  : 	}

	ret	0
??E?$tvec4@I$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<unsigned int,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec4@I$0A@@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec4@I$0A@@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec4<unsigned int,0>::operator=, COMDAT
; _this$ = ecx

; 137  : template struct tvec4<uint32, highp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	mov	edi, ecx
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tvec4@I$0A@@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec4<unsigned int,0>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@I$0A@@glm@@QAE@IIII@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
_d$ = 20						; size = 4
??0?$tvec4@I$0A@@glm@@QAE@IIII@Z PROC			; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>, COMDAT
; _this$ = ecx

; 193  : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _d$[ebp]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, ecx
	pop	ebp
	ret	16					; 00000010H
??0?$tvec4@I$0A@@glm@@QAE@IIII@Z ENDP			; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@I$0A@@glm@@QAE@I@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 4
??0?$tvec4@I$0A@@glm@@QAE@I@Z PROC			; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>, COMDAT
; _this$ = ecx

; 188  : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR [ecx+12], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec4@I$0A@@glm@@QAE@I@Z ENDP			; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@I$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec4@I$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>, COMDAT
; _this$ = ecx

; 183  : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec4@I$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec4@I$0A@@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec4@I$0A@@glm@@QAE@ABU01@@Z PROC			; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>, COMDAT
; _this$ = ecx

; 137  : template struct tvec4<uint32, highp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec4@I$0A@@glm@@QAE@ABU01@@Z ENDP			; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@I$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec4@I$0A@@glm@@QAE@XZ PROC			; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>, COMDAT
; _this$ = ecx

; 163  : 		{}

	xor	eax, eax
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR [ecx+12], eax
	mov	eax, ecx
	ret	0
??0?$tvec4@I$0A@@glm@@QAE@XZ ENDP			; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@I$0A@@glm@@QBEABIH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@I$0A@@glm@@QBEABIH@Z PROC			; glm::tvec4<unsigned int,0>::operator[], COMDAT
; _this$ = ecx

; 336  : 	{

	push	ebp
	mov	ebp, esp

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 339  : 	}

	pop	ebp
	ret	4
??A?$tvec4@I$0A@@glm@@QBEABIH@Z ENDP			; glm::tvec4<unsigned int,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@I$0A@@glm@@QAEAAIH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@I$0A@@glm@@QAEAAIH@Z PROC			; glm::tvec4<unsigned int,0>::operator[], COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 332  : 	}

	pop	ebp
	ret	4
??A?$tvec4@I$0A@@glm@@QAEAAIH@Z ENDP			; glm::tvec4<unsigned int,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@I$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@I$0A@@glm@@SAHXZ PROC			; glm::tvec4<unsigned int,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	push	4
	pop	eax
	ret	0
?length@?$tvec4@I$0A@@glm@@SAHXZ ENDP			; glm::tvec4<unsigned int,0>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@G$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec4@G$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<unsigned short,0>::operator--, COMDAT
; _this$ = ecx

; 482  : 	{

	push	ebp
	mov	ebp, esp

; 483  : 		tvec4<T, P> Result(*this);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax

; 484  : 		--*this;

	mov	eax, 65535				; 0000ffffH
	add	WORD PTR [ecx], ax
	add	WORD PTR [ecx+2], ax
	add	WORD PTR [ecx+4], ax
	add	WORD PTR [ecx+6], ax

; 485  : 		return Result;

	mov	eax, edx

; 486  : 	}

	pop	ebp
	ret	8
??F?$tvec4@G$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<unsigned short,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@G$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec4@G$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<unsigned short,0>::operator++, COMDAT
; _this$ = ecx

; 474  : 	{

	push	ebp
	mov	ebp, esp

; 475  : 		tvec4<T, P> Result(*this);

	mov	eax, DWORD PTR [ecx]

; 476  : 		++*this;

	inc	WORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]
	inc	WORD PTR [ecx+2]
	inc	WORD PTR [ecx+4]
	inc	WORD PTR [ecx+6]
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [esi], eax

; 477  : 		return Result;

	mov	eax, esi
	mov	DWORD PTR [esi+4], edx
	pop	esi

; 478  : 	}

	pop	ebp
	ret	8
??E?$tvec4@G$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<unsigned short,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@G$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec4@G$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec4<unsigned short,0>::operator--, COMDAT
; _this$ = ecx

; 465  : 		--this->x;

	mov	eax, 65535				; 0000ffffH
	add	WORD PTR [ecx], ax

; 466  : 		--this->y;

	add	WORD PTR [ecx+2], ax

; 467  : 		--this->z;

	add	WORD PTR [ecx+4], ax

; 468  : 		--this->w;

	add	WORD PTR [ecx+6], ax

; 469  : 		return *this;

	mov	eax, ecx

; 470  : 	}

	ret	0
??F?$tvec4@G$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<unsigned short,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@G$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec4@G$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec4<unsigned short,0>::operator++, COMDAT
; _this$ = ecx

; 455  : 		++this->x;

	inc	WORD PTR [ecx]

; 456  : 		++this->y;
; 457  : 		++this->z;
; 458  : 		++this->w;
; 459  : 		return *this;

	mov	eax, ecx
	inc	WORD PTR [ecx+2]
	inc	WORD PTR [ecx+4]
	inc	WORD PTR [ecx+6]

; 460  : 	}

	ret	0
??E?$tvec4@G$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<unsigned short,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec4@G$0A@@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec4@G$0A@@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec4<unsigned short,0>::operator=, COMDAT
; _this$ = ecx

; 136  : template struct tvec4<uint16, highp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??4?$tvec4@G$0A@@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec4<unsigned short,0>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@G$0A@@glm@@QAE@GGGG@Z
_TEXT	SEGMENT
_a$ = 8							; size = 2
_b$ = 12						; size = 2
_c$ = 16						; size = 2
_d$ = 20						; size = 2
??0?$tvec4@G$0A@@glm@@QAE@GGGG@Z PROC			; glm::tvec4<unsigned short,0>::tvec4<unsigned short,0>, COMDAT
; _this$ = ecx

; 193  : 	{}

	push	ebp
	mov	ebp, esp
	mov	ax, WORD PTR _a$[ebp]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR _b$[ebp]
	mov	WORD PTR [ecx+2], ax
	mov	ax, WORD PTR _c$[ebp]
	mov	WORD PTR [ecx+4], ax
	mov	ax, WORD PTR _d$[ebp]
	mov	WORD PTR [ecx+6], ax
	mov	eax, ecx
	pop	ebp
	ret	16					; 00000010H
??0?$tvec4@G$0A@@glm@@QAE@GGGG@Z ENDP			; glm::tvec4<unsigned short,0>::tvec4<unsigned short,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@G$0A@@glm@@QAE@G@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 2
??0?$tvec4@G$0A@@glm@@QAE@G@Z PROC			; glm::tvec4<unsigned short,0>::tvec4<unsigned short,0>, COMDAT
; _this$ = ecx

; 188  : 	{}

	push	ebp
	mov	ebp, esp
	mov	ax, WORD PTR _scalar$[ebp]
	mov	WORD PTR [ecx], ax
	mov	WORD PTR [ecx+2], ax
	mov	WORD PTR [ecx+4], ax
	mov	WORD PTR [ecx+6], ax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec4@G$0A@@glm@@QAE@G@Z ENDP			; glm::tvec4<unsigned short,0>::tvec4<unsigned short,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@G$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec4@G$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec4<unsigned short,0>::tvec4<unsigned short,0>, COMDAT
; _this$ = ecx

; 183  : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec4@G$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec4<unsigned short,0>::tvec4<unsigned short,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec4@G$0A@@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec4@G$0A@@glm@@QAE@ABU01@@Z PROC			; glm::tvec4<unsigned short,0>::tvec4<unsigned short,0>, COMDAT
; _this$ = ecx

; 136  : template struct tvec4<uint16, highp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR [edx+2]
	mov	WORD PTR [ecx+2], ax
	mov	ax, WORD PTR [edx+2]
	mov	WORD PTR [ecx+2], ax
	mov	ax, WORD PTR [edx+2]
	mov	WORD PTR [ecx+2], ax
	mov	ax, WORD PTR [edx+4]
	mov	WORD PTR [ecx+4], ax
	mov	ax, WORD PTR [edx+4]
	mov	WORD PTR [ecx+4], ax
	mov	ax, WORD PTR [edx+4]
	mov	WORD PTR [ecx+4], ax
	mov	ax, WORD PTR [edx+6]
	mov	WORD PTR [ecx+6], ax
	mov	ax, WORD PTR [edx+6]
	mov	WORD PTR [ecx+6], ax
	mov	ax, WORD PTR [edx+6]
	mov	WORD PTR [ecx+6], ax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec4@G$0A@@glm@@QAE@ABU01@@Z ENDP			; glm::tvec4<unsigned short,0>::tvec4<unsigned short,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@G$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec4@G$0A@@glm@@QAE@XZ PROC			; glm::tvec4<unsigned short,0>::tvec4<unsigned short,0>, COMDAT
; _this$ = ecx

; 163  : 		{}

	xor	eax, eax
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	ret	0
??0?$tvec4@G$0A@@glm@@QAE@XZ ENDP			; glm::tvec4<unsigned short,0>::tvec4<unsigned short,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@G$0A@@glm@@QBEABGH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@G$0A@@glm@@QBEABGH@Z PROC			; glm::tvec4<unsigned short,0>::operator[], COMDAT
; _this$ = ecx

; 336  : 	{

	push	ebp
	mov	ebp, esp

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 339  : 	}

	pop	ebp
	ret	4
??A?$tvec4@G$0A@@glm@@QBEABGH@Z ENDP			; glm::tvec4<unsigned short,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@G$0A@@glm@@QAEAAGH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@G$0A@@glm@@QAEAAGH@Z PROC			; glm::tvec4<unsigned short,0>::operator[], COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 332  : 	}

	pop	ebp
	ret	4
??A?$tvec4@G$0A@@glm@@QAEAAGH@Z ENDP			; glm::tvec4<unsigned short,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@G$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@G$0A@@glm@@SAHXZ PROC			; glm::tvec4<unsigned short,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	push	4
	pop	eax
	ret	0
?length@?$tvec4@G$0A@@glm@@SAHXZ ENDP			; glm::tvec4<unsigned short,0>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@N$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec4@N$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<double,1>::operator--, COMDAT
; _this$ = ecx

; 482  : 	{

	push	ebp
	mov	ebp, esp

; 483  : 		tvec4<T, P> Result(*this);
; 484  : 		--*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	mov	edx, ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	movups	xmm0, XMMWORD PTR [edx]
	push	8
	pop	ecx
	subpd	xmm0, xmm1
	mov	esi, edx
	mov	edi, eax
	rep movsd
	movups	XMMWORD PTR [edx], xmm0
	pop	edi
	movups	xmm0, XMMWORD PTR [edx+16]
	pop	esi
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+16], xmm0

; 485  : 		return Result;
; 486  : 	}

	pop	ebp
	ret	8
??F?$tvec4@N$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<double,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@N$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec4@N$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<double,1>::operator++, COMDAT
; _this$ = ecx

; 474  : 	{

	push	ebp
	mov	ebp, esp

; 475  : 		tvec4<T, P> Result(*this);
; 476  : 		++*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	mov	edx, ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	movups	xmm0, XMMWORD PTR [edx]
	push	8
	pop	ecx
	addpd	xmm0, xmm1
	mov	esi, edx
	mov	edi, eax
	rep movsd
	movups	XMMWORD PTR [edx], xmm0
	pop	edi
	movups	xmm0, XMMWORD PTR [edx+16]
	pop	esi
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+16], xmm0

; 477  : 		return Result;
; 478  : 	}

	pop	ebp
	ret	8
??E?$tvec4@N$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<double,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@N$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec4@N$00@glm@@QAEAAU01@XZ PROC			; glm::tvec4<double,1>::operator--, COMDAT
; _this$ = ecx

; 465  : 		--this->x;

	movups	xmm0, XMMWORD PTR [ecx]

; 466  : 		--this->y;
; 467  : 		--this->z;
; 468  : 		--this->w;
; 469  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0

; 470  : 	}

	ret	0
??F?$tvec4@N$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<double,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@N$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec4@N$00@glm@@QAEAAU01@XZ PROC			; glm::tvec4<double,1>::operator++, COMDAT
; _this$ = ecx

; 455  : 		++this->x;

	movups	xmm0, XMMWORD PTR [ecx]

; 456  : 		++this->y;
; 457  : 		++this->z;
; 458  : 		++this->w;
; 459  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0

; 460  : 	}

	ret	0
??E?$tvec4@N$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<double,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec4@N$00@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec4@N$00@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec4<double,1>::operator=, COMDAT
; _this$ = ecx

; 133  : template struct tvec4<float64, mediump>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	8
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tvec4@N$00@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec4<double,1>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@N$00@glm@@QAE@NNNN@Z
_TEXT	SEGMENT
_a$ = 8							; size = 8
_b$ = 16						; size = 8
_c$ = 24						; size = 8
_d$ = 32						; size = 8
??0?$tvec4@N$00@glm@@QAE@NNNN@Z PROC			; glm::tvec4<double,1>::tvec4<double,1>, COMDAT
; _this$ = ecx

; 193  : 	{}

	push	ebp
	mov	ebp, esp
	movsd	xmm0, QWORD PTR _a$[ebp]
	mov	eax, ecx
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR _b$[ebp]
	movsd	QWORD PTR [ecx+8], xmm0
	movsd	xmm0, QWORD PTR _c$[ebp]
	movsd	QWORD PTR [ecx+16], xmm0
	movsd	xmm0, QWORD PTR _d$[ebp]
	movsd	QWORD PTR [ecx+24], xmm0
	pop	ebp
	ret	32					; 00000020H
??0?$tvec4@N$00@glm@@QAE@NNNN@Z ENDP			; glm::tvec4<double,1>::tvec4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@N$00@glm@@QAE@N@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 8
??0?$tvec4@N$00@glm@@QAE@N@Z PROC			; glm::tvec4<double,1>::tvec4<double,1>, COMDAT
; _this$ = ecx

; 188  : 	{}

	push	ebp
	mov	ebp, esp
	movsd	xmm0, QWORD PTR _scalar$[ebp]
	mov	eax, ecx
	unpcklpd xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	pop	ebp
	ret	8
??0?$tvec4@N$00@glm@@QAE@N@Z ENDP			; glm::tvec4<double,1>::tvec4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@N$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec4@N$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec4<double,1>::tvec4<double,1>, COMDAT
; _this$ = ecx

; 183  : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec4@N$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec4<double,1>::tvec4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec4@N$00@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec4@N$00@glm@@QAE@ABU01@@Z PROC			; glm::tvec4<double,1>::tvec4<double,1>, COMDAT
; _this$ = ecx

; 133  : template struct tvec4<float64, mediump>;

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ___that$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	QWORD PTR [ecx+8], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	QWORD PTR [ecx+8], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	QWORD PTR [ecx+8], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR [ecx+16], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR [ecx+16], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR [ecx+16], xmm0
	movsd	xmm0, QWORD PTR [eax+24]
	movsd	QWORD PTR [ecx+24], xmm0
	movsd	xmm0, QWORD PTR [eax+24]
	movsd	QWORD PTR [ecx+24], xmm0
	movsd	xmm0, QWORD PTR [eax+24]
	mov	eax, ecx
	movsd	QWORD PTR [ecx+24], xmm0
	pop	ebp
	ret	4
??0?$tvec4@N$00@glm@@QAE@ABU01@@Z ENDP			; glm::tvec4<double,1>::tvec4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@N$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec4@N$00@glm@@QAE@XZ PROC			; glm::tvec4<double,1>::tvec4<double,1>, COMDAT
; _this$ = ecx

; 163  : 		{}

	xorps	xmm0, xmm0
	mov	eax, ecx
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	ret	0
??0?$tvec4@N$00@glm@@QAE@XZ ENDP			; glm::tvec4<double,1>::tvec4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@N$00@glm@@QBEABNH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@N$00@glm@@QBEABNH@Z PROC			; glm::tvec4<double,1>::operator[], COMDAT
; _this$ = ecx

; 336  : 	{

	push	ebp
	mov	ebp, esp

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 339  : 	}

	pop	ebp
	ret	4
??A?$tvec4@N$00@glm@@QBEABNH@Z ENDP			; glm::tvec4<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@N$00@glm@@QAEAANH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@N$00@glm@@QAEAANH@Z PROC			; glm::tvec4<double,1>::operator[], COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 332  : 	}

	pop	ebp
	ret	4
??A?$tvec4@N$00@glm@@QAEAANH@Z ENDP			; glm::tvec4<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@N$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@N$00@glm@@SAHXZ PROC			; glm::tvec4<double,1>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	push	4
	pop	eax
	ret	0
?length@?$tvec4@N$00@glm@@SAHXZ ENDP			; glm::tvec4<double,1>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@M$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec4@M$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<float,1>::operator--, COMDAT
; _this$ = ecx

; 482  : 	{

	push	ebp
	mov	ebp, esp

; 483  : 		tvec4<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 484  : 		--*this;

	movups	xmm0, XMMWORD PTR [ecx]
	push	esi
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	mov	esi, ecx
	push	edi
	mov	edi, eax
	subps	xmm0, xmm1
	movsd
	movsd
	movsd
	movsd
	pop	edi
	movups	XMMWORD PTR [ecx], xmm0
	pop	esi

; 485  : 		return Result;
; 486  : 	}

	pop	ebp
	ret	8
??F?$tvec4@M$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<float,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@M$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec4@M$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<float,1>::operator++, COMDAT
; _this$ = ecx

; 474  : 	{

	push	ebp
	mov	ebp, esp

; 475  : 		tvec4<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 476  : 		++*this;

	movups	xmm0, XMMWORD PTR [ecx]
	push	esi
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	mov	esi, ecx
	push	edi
	mov	edi, eax
	addps	xmm0, xmm1
	movsd
	movsd
	movsd
	movsd
	pop	edi
	movups	XMMWORD PTR [ecx], xmm0
	pop	esi

; 477  : 		return Result;
; 478  : 	}

	pop	ebp
	ret	8
??E?$tvec4@M$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<float,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@M$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec4@M$00@glm@@QAEAAU01@XZ PROC			; glm::tvec4<float,1>::operator--, COMDAT
; _this$ = ecx

; 465  : 		--this->x;

	movups	xmm0, XMMWORD PTR [ecx]

; 466  : 		--this->y;
; 467  : 		--this->z;
; 468  : 		--this->w;
; 469  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0

; 470  : 	}

	ret	0
??F?$tvec4@M$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<float,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@M$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec4@M$00@glm@@QAEAAU01@XZ PROC			; glm::tvec4<float,1>::operator++, COMDAT
; _this$ = ecx

; 455  : 		++this->x;

	movups	xmm0, XMMWORD PTR [ecx]

; 456  : 		++this->y;
; 457  : 		++this->z;
; 458  : 		++this->w;
; 459  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0

; 460  : 	}

	ret	0
??E?$tvec4@M$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<float,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec4@M$00@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec4@M$00@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec4<float,1>::operator=, COMDAT
; _this$ = ecx

; 132  : template struct tvec4<float32, mediump>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	mov	edi, ecx
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tvec4@M$00@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec4<float,1>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$00@glm@@QAE@MMMM@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
_d$ = 20						; size = 4
??0?$tvec4@M$00@glm@@QAE@MMMM@Z PROC			; glm::tvec4<float,1>::tvec4<float,1>, COMDAT
; _this$ = ecx

; 193  : 	{}

	push	ebp
	mov	ebp, esp
	movss	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR _b$[ebp]
	movss	DWORD PTR [ecx+4], xmm0
	movss	xmm0, DWORD PTR _c$[ebp]
	movss	DWORD PTR [ecx+8], xmm0
	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR [ecx+12], xmm0
	pop	ebp
	ret	16					; 00000010H
??0?$tvec4@M$00@glm@@QAE@MMMM@Z ENDP			; glm::tvec4<float,1>::tvec4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$00@glm@@QAE@M@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 4
??0?$tvec4@M$00@glm@@QAE@M@Z PROC			; glm::tvec4<float,1>::tvec4<float,1>, COMDAT
; _this$ = ecx

; 188  : 	{}

	push	ebp
	mov	ebp, esp
	movss	xmm0, DWORD PTR _scalar$[ebp]
	mov	eax, ecx
	shufps	xmm0, xmm0, 0
	movups	XMMWORD PTR [ecx], xmm0
	pop	ebp
	ret	4
??0?$tvec4@M$00@glm@@QAE@M@Z ENDP			; glm::tvec4<float,1>::tvec4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec4@M$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec4<float,1>::tvec4<float,1>, COMDAT
; _this$ = ecx

; 183  : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec4@M$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec4<float,1>::tvec4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec4@M$00@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec4@M$00@glm@@QAE@ABU01@@Z PROC			; glm::tvec4<float,1>::tvec4<float,1>, COMDAT
; _this$ = ecx

; 132  : template struct tvec4<float32, mediump>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec4@M$00@glm@@QAE@ABU01@@Z ENDP			; glm::tvec4<float,1>::tvec4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec4@M$00@glm@@QAE@XZ PROC			; glm::tvec4<float,1>::tvec4<float,1>, COMDAT
; _this$ = ecx

; 163  : 		{}

	and	DWORD PTR [ecx], 0
	mov	eax, ecx
	and	DWORD PTR [ecx+4], 0
	and	DWORD PTR [ecx+8], 0
	and	DWORD PTR [ecx+12], 0
	ret	0
??0?$tvec4@M$00@glm@@QAE@XZ ENDP			; glm::tvec4<float,1>::tvec4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@M$00@glm@@QBEABMH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@M$00@glm@@QBEABMH@Z PROC			; glm::tvec4<float,1>::operator[], COMDAT
; _this$ = ecx

; 336  : 	{

	push	ebp
	mov	ebp, esp

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 339  : 	}

	pop	ebp
	ret	4
??A?$tvec4@M$00@glm@@QBEABMH@Z ENDP			; glm::tvec4<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@M$00@glm@@QAEAAMH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@M$00@glm@@QAEAAMH@Z PROC			; glm::tvec4<float,1>::operator[], COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 332  : 	}

	pop	ebp
	ret	4
??A?$tvec4@M$00@glm@@QAEAAMH@Z ENDP			; glm::tvec4<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@M$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@M$00@glm@@SAHXZ PROC			; glm::tvec4<float,1>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	push	4
	pop	eax
	ret	0
?length@?$tvec4@M$00@glm@@SAHXZ ENDP			; glm::tvec4<float,1>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@_J$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec4@_J$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<__int64,1>::operator--, COMDAT
; _this$ = ecx

; 482  : 	{

	push	ebp
	mov	ebp, esp

; 483  : 		tvec4<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, ecx
	push	esi
	push	edi
	push	8
	pop	ecx
	mov	esi, edx
	mov	edi, eax
	rep movsd

; 484  : 		--*this;

	or	ecx, -1
	add	DWORD PTR [edx], ecx
	pop	edi
	adc	DWORD PTR [edx+4], ecx
	add	DWORD PTR [edx+8], ecx
	pop	esi
	adc	DWORD PTR [edx+12], ecx
	add	DWORD PTR [edx+16], ecx
	adc	DWORD PTR [edx+20], ecx
	add	DWORD PTR [edx+24], ecx
	adc	DWORD PTR [edx+28], ecx

; 485  : 		return Result;
; 486  : 	}

	pop	ebp
	ret	8
??F?$tvec4@_J$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<__int64,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@_J$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec4@_J$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<__int64,1>::operator++, COMDAT
; _this$ = ecx

; 474  : 	{

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi

; 475  : 		tvec4<T, P> Result(*this);

	mov	edi, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, ecx
	push	8
	pop	ecx
	mov	esi, eax
	rep movsd

; 476  : 		++*this;

	mov	ecx, eax
	call	??E?$tvec4@_J$00@glm@@QAEAAU01@XZ	; glm::tvec4<__int64,1>::operator++

; 477  : 		return Result;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi

; 478  : 	}

	pop	ebp
	ret	8
??E?$tvec4@_J$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<__int64,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@_J$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec4@_J$00@glm@@QAEAAU01@XZ PROC			; glm::tvec4<__int64,1>::operator--, COMDAT
; _this$ = ecx

; 465  : 		--this->x;

	or	eax, -1
	add	DWORD PTR [ecx], eax
	adc	DWORD PTR [ecx+4], eax

; 466  : 		--this->y;

	add	DWORD PTR [ecx+8], eax
	adc	DWORD PTR [ecx+12], eax

; 467  : 		--this->z;

	add	DWORD PTR [ecx+16], eax
	adc	DWORD PTR [ecx+20], eax

; 468  : 		--this->w;

	add	DWORD PTR [ecx+24], eax
	adc	DWORD PTR [ecx+28], eax

; 469  : 		return *this;

	mov	eax, ecx

; 470  : 	}

	ret	0
??F?$tvec4@_J$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<__int64,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@_J$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec4@_J$00@glm@@QAEAAU01@XZ PROC			; glm::tvec4<__int64,1>::operator++, COMDAT
; _this$ = ecx

; 455  : 		++this->x;

	xor	edx, edx
	inc	edx
	add	DWORD PTR [ecx], edx
	push	0
	pop	eax
	adc	DWORD PTR [ecx+4], eax

; 456  : 		++this->y;

	add	DWORD PTR [ecx+8], edx
	adc	DWORD PTR [ecx+12], eax

; 457  : 		++this->z;

	add	DWORD PTR [ecx+16], edx
	adc	DWORD PTR [ecx+20], eax

; 458  : 		++this->w;

	add	DWORD PTR [ecx+24], edx
	adc	DWORD PTR [ecx+28], eax

; 459  : 		return *this;

	mov	eax, ecx

; 460  : 	}

	ret	0
??E?$tvec4@_J$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<__int64,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec4@_J$00@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec4@_J$00@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec4<__int64,1>::operator=, COMDAT
; _this$ = ecx

; 131  : template struct tvec4<int64, mediump>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	8
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tvec4@_J$00@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec4<__int64,1>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_J$00@glm@@QAE@_J000@Z
_TEXT	SEGMENT
_a$ = 8							; size = 8
_b$ = 16						; size = 8
_c$ = 24						; size = 8
_d$ = 32						; size = 8
??0?$tvec4@_J$00@glm@@QAE@_J000@Z PROC			; glm::tvec4<__int64,1>::tvec4<__int64,1>, COMDAT
; _this$ = ecx

; 193  : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _a$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _b$[ebp+4]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR _c$[ebp+4]
	mov	DWORD PTR [ecx+20], eax
	mov	eax, DWORD PTR _d$[ebp]
	mov	DWORD PTR [ecx+24], eax
	mov	eax, DWORD PTR _d$[ebp+4]
	mov	DWORD PTR [ecx+28], eax
	mov	eax, ecx
	pop	ebp
	ret	32					; 00000020H
??0?$tvec4@_J$00@glm@@QAE@_J000@Z ENDP			; glm::tvec4<__int64,1>::tvec4<__int64,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_J$00@glm@@QAE@_J@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 8
??0?$tvec4@_J$00@glm@@QAE@_J@Z PROC			; glm::tvec4<__int64,1>::tvec4<__int64,1>, COMDAT
; _this$ = ecx

; 188  : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _scalar$[ebp+4]
	mov	edx, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+12], eax
	mov	DWORD PTR [ecx+20], eax
	mov	DWORD PTR [ecx+28], eax
	mov	eax, ecx
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+8], edx
	mov	DWORD PTR [ecx+16], edx
	mov	DWORD PTR [ecx+24], edx
	pop	ebp
	ret	8
??0?$tvec4@_J$00@glm@@QAE@_J@Z ENDP			; glm::tvec4<__int64,1>::tvec4<__int64,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_J$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec4@_J$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec4<__int64,1>::tvec4<__int64,1>, COMDAT
; _this$ = ecx

; 183  : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec4@_J$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec4<__int64,1>::tvec4<__int64,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec4@_J$00@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec4@_J$00@glm@@QAE@ABU01@@Z PROC			; glm::tvec4<__int64,1>::tvec4<__int64,1>, COMDAT
; _this$ = ecx

; 131  : template struct tvec4<int64, mediump>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx+20], eax
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx+20], eax
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx+20], eax
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR [ecx+24], eax
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR [ecx+28], eax
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR [ecx+24], eax
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR [ecx+28], eax
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR [ecx+24], eax
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR [ecx+28], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec4@_J$00@glm@@QAE@ABU01@@Z ENDP			; glm::tvec4<__int64,1>::tvec4<__int64,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_J$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec4@_J$00@glm@@QAE@XZ PROC			; glm::tvec4<__int64,1>::tvec4<__int64,1>, COMDAT
; _this$ = ecx

; 163  : 		{}

	xor	eax, eax
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR [ecx+12], eax
	mov	DWORD PTR [ecx+16], eax
	mov	DWORD PTR [ecx+20], eax
	mov	DWORD PTR [ecx+24], eax
	mov	DWORD PTR [ecx+28], eax
	mov	eax, ecx
	ret	0
??0?$tvec4@_J$00@glm@@QAE@XZ ENDP			; glm::tvec4<__int64,1>::tvec4<__int64,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@_J$00@glm@@QBEAB_JH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@_J$00@glm@@QBEAB_JH@Z PROC			; glm::tvec4<__int64,1>::operator[], COMDAT
; _this$ = ecx

; 336  : 	{

	push	ebp
	mov	ebp, esp

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 339  : 	}

	pop	ebp
	ret	4
??A?$tvec4@_J$00@glm@@QBEAB_JH@Z ENDP			; glm::tvec4<__int64,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@_J$00@glm@@QAEAA_JH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@_J$00@glm@@QAEAA_JH@Z PROC			; glm::tvec4<__int64,1>::operator[], COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 332  : 	}

	pop	ebp
	ret	4
??A?$tvec4@_J$00@glm@@QAEAA_JH@Z ENDP			; glm::tvec4<__int64,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@_J$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@_J$00@glm@@SAHXZ PROC			; glm::tvec4<__int64,1>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	push	4
	pop	eax
	ret	0
?length@?$tvec4@_J$00@glm@@SAHXZ ENDP			; glm::tvec4<__int64,1>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@H$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec4@H$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<int,1>::operator--, COMDAT
; _this$ = ecx

; 482  : 	{

	push	ebp
	mov	ebp, esp

; 483  : 		tvec4<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	mov	esi, ecx
	mov	edi, eax
	movsd
	movsd
	movsd
	movsd

; 484  : 		--*this;

	dec	DWORD PTR [ecx]
	dec	DWORD PTR [ecx+4]
	dec	DWORD PTR [ecx+8]
	dec	DWORD PTR [ecx+12]
	pop	edi
	pop	esi

; 485  : 		return Result;
; 486  : 	}

	pop	ebp
	ret	8
??F?$tvec4@H$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<int,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@H$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec4@H$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<int,1>::operator++, COMDAT
; _this$ = ecx

; 474  : 	{

	push	ebp
	mov	ebp, esp

; 475  : 		tvec4<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	mov	esi, ecx
	mov	edi, eax
	movsd
	movsd
	movsd
	movsd

; 476  : 		++*this;

	inc	DWORD PTR [ecx]
	inc	DWORD PTR [ecx+4]
	inc	DWORD PTR [ecx+8]
	inc	DWORD PTR [ecx+12]
	pop	edi
	pop	esi

; 477  : 		return Result;
; 478  : 	}

	pop	ebp
	ret	8
??E?$tvec4@H$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<int,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@H$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec4@H$00@glm@@QAEAAU01@XZ PROC			; glm::tvec4<int,1>::operator--, COMDAT
; _this$ = ecx

; 465  : 		--this->x;

	dec	DWORD PTR [ecx]

; 466  : 		--this->y;
; 467  : 		--this->z;
; 468  : 		--this->w;
; 469  : 		return *this;

	mov	eax, ecx
	dec	DWORD PTR [ecx+4]
	dec	DWORD PTR [ecx+8]
	dec	DWORD PTR [ecx+12]

; 470  : 	}

	ret	0
??F?$tvec4@H$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<int,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@H$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec4@H$00@glm@@QAEAAU01@XZ PROC			; glm::tvec4<int,1>::operator++, COMDAT
; _this$ = ecx

; 455  : 		++this->x;

	inc	DWORD PTR [ecx]

; 456  : 		++this->y;
; 457  : 		++this->z;
; 458  : 		++this->w;
; 459  : 		return *this;

	mov	eax, ecx
	inc	DWORD PTR [ecx+4]
	inc	DWORD PTR [ecx+8]
	inc	DWORD PTR [ecx+12]

; 460  : 	}

	ret	0
??E?$tvec4@H$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<int,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec4@H$00@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec4@H$00@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec4<int,1>::operator=, COMDAT
; _this$ = ecx

; 130  : template struct tvec4<int32, mediump>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	mov	edi, ecx
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tvec4@H$00@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec4<int,1>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@H$00@glm@@QAE@HHHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
_d$ = 20						; size = 4
??0?$tvec4@H$00@glm@@QAE@HHHH@Z PROC			; glm::tvec4<int,1>::tvec4<int,1>, COMDAT
; _this$ = ecx

; 193  : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _d$[ebp]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, ecx
	pop	ebp
	ret	16					; 00000010H
??0?$tvec4@H$00@glm@@QAE@HHHH@Z ENDP			; glm::tvec4<int,1>::tvec4<int,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@H$00@glm@@QAE@H@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 4
??0?$tvec4@H$00@glm@@QAE@H@Z PROC			; glm::tvec4<int,1>::tvec4<int,1>, COMDAT
; _this$ = ecx

; 188  : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR [ecx+12], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec4@H$00@glm@@QAE@H@Z ENDP			; glm::tvec4<int,1>::tvec4<int,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@H$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec4@H$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec4<int,1>::tvec4<int,1>, COMDAT
; _this$ = ecx

; 183  : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec4@H$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec4<int,1>::tvec4<int,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec4@H$00@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec4@H$00@glm@@QAE@ABU01@@Z PROC			; glm::tvec4<int,1>::tvec4<int,1>, COMDAT
; _this$ = ecx

; 130  : template struct tvec4<int32, mediump>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec4@H$00@glm@@QAE@ABU01@@Z ENDP			; glm::tvec4<int,1>::tvec4<int,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@H$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec4@H$00@glm@@QAE@XZ PROC			; glm::tvec4<int,1>::tvec4<int,1>, COMDAT
; _this$ = ecx

; 163  : 		{}

	xor	eax, eax
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR [ecx+12], eax
	mov	eax, ecx
	ret	0
??0?$tvec4@H$00@glm@@QAE@XZ ENDP			; glm::tvec4<int,1>::tvec4<int,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@H$00@glm@@QBEABHH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@H$00@glm@@QBEABHH@Z PROC			; glm::tvec4<int,1>::operator[], COMDAT
; _this$ = ecx

; 336  : 	{

	push	ebp
	mov	ebp, esp

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 339  : 	}

	pop	ebp
	ret	4
??A?$tvec4@H$00@glm@@QBEABHH@Z ENDP			; glm::tvec4<int,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@H$00@glm@@QAEAAHH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@H$00@glm@@QAEAAHH@Z PROC			; glm::tvec4<int,1>::operator[], COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 332  : 	}

	pop	ebp
	ret	4
??A?$tvec4@H$00@glm@@QAEAAHH@Z ENDP			; glm::tvec4<int,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@H$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@H$00@glm@@SAHXZ PROC			; glm::tvec4<int,1>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	push	4
	pop	eax
	ret	0
?length@?$tvec4@H$00@glm@@SAHXZ ENDP			; glm::tvec4<int,1>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@F$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec4@F$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<short,1>::operator--, COMDAT
; _this$ = ecx

; 482  : 	{

	push	ebp
	mov	ebp, esp

; 483  : 		tvec4<T, P> Result(*this);

	mov	eax, DWORD PTR [ecx]

; 484  : 		--*this;

	dec	WORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]
	dec	WORD PTR [ecx+2]
	dec	WORD PTR [ecx+4]
	dec	WORD PTR [ecx+6]
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [esi], eax

; 485  : 		return Result;

	mov	eax, esi
	mov	DWORD PTR [esi+4], edx
	pop	esi

; 486  : 	}

	pop	ebp
	ret	8
??F?$tvec4@F$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<short,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@F$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec4@F$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<short,1>::operator++, COMDAT
; _this$ = ecx

; 474  : 	{

	push	ebp
	mov	ebp, esp

; 475  : 		tvec4<T, P> Result(*this);

	mov	eax, DWORD PTR [ecx]

; 476  : 		++*this;

	inc	WORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]
	inc	WORD PTR [ecx+2]
	inc	WORD PTR [ecx+4]
	inc	WORD PTR [ecx+6]
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [esi], eax

; 477  : 		return Result;

	mov	eax, esi
	mov	DWORD PTR [esi+4], edx
	pop	esi

; 478  : 	}

	pop	ebp
	ret	8
??E?$tvec4@F$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<short,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@F$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec4@F$00@glm@@QAEAAU01@XZ PROC			; glm::tvec4<short,1>::operator--, COMDAT
; _this$ = ecx

; 465  : 		--this->x;

	dec	WORD PTR [ecx]

; 466  : 		--this->y;
; 467  : 		--this->z;
; 468  : 		--this->w;
; 469  : 		return *this;

	mov	eax, ecx
	dec	WORD PTR [ecx+2]
	dec	WORD PTR [ecx+4]
	dec	WORD PTR [ecx+6]

; 470  : 	}

	ret	0
??F?$tvec4@F$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<short,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@F$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec4@F$00@glm@@QAEAAU01@XZ PROC			; glm::tvec4<short,1>::operator++, COMDAT
; _this$ = ecx

; 455  : 		++this->x;

	inc	WORD PTR [ecx]

; 456  : 		++this->y;
; 457  : 		++this->z;
; 458  : 		++this->w;
; 459  : 		return *this;

	mov	eax, ecx
	inc	WORD PTR [ecx+2]
	inc	WORD PTR [ecx+4]
	inc	WORD PTR [ecx+6]

; 460  : 	}

	ret	0
??E?$tvec4@F$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<short,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec4@F$00@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec4@F$00@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec4<short,1>::operator=, COMDAT
; _this$ = ecx

; 129  : template struct tvec4<int16, mediump>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??4?$tvec4@F$00@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec4<short,1>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@F$00@glm@@QAE@FFFF@Z
_TEXT	SEGMENT
_a$ = 8							; size = 2
_b$ = 12						; size = 2
_c$ = 16						; size = 2
_d$ = 20						; size = 2
??0?$tvec4@F$00@glm@@QAE@FFFF@Z PROC			; glm::tvec4<short,1>::tvec4<short,1>, COMDAT
; _this$ = ecx

; 193  : 	{}

	push	ebp
	mov	ebp, esp
	mov	ax, WORD PTR _a$[ebp]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR _b$[ebp]
	mov	WORD PTR [ecx+2], ax
	mov	ax, WORD PTR _c$[ebp]
	mov	WORD PTR [ecx+4], ax
	mov	ax, WORD PTR _d$[ebp]
	mov	WORD PTR [ecx+6], ax
	mov	eax, ecx
	pop	ebp
	ret	16					; 00000010H
??0?$tvec4@F$00@glm@@QAE@FFFF@Z ENDP			; glm::tvec4<short,1>::tvec4<short,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@F$00@glm@@QAE@F@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 2
??0?$tvec4@F$00@glm@@QAE@F@Z PROC			; glm::tvec4<short,1>::tvec4<short,1>, COMDAT
; _this$ = ecx

; 188  : 	{}

	push	ebp
	mov	ebp, esp
	mov	ax, WORD PTR _scalar$[ebp]
	mov	WORD PTR [ecx], ax
	mov	WORD PTR [ecx+2], ax
	mov	WORD PTR [ecx+4], ax
	mov	WORD PTR [ecx+6], ax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec4@F$00@glm@@QAE@F@Z ENDP			; glm::tvec4<short,1>::tvec4<short,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@F$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec4@F$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec4<short,1>::tvec4<short,1>, COMDAT
; _this$ = ecx

; 183  : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec4@F$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec4<short,1>::tvec4<short,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec4@F$00@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec4@F$00@glm@@QAE@ABU01@@Z PROC			; glm::tvec4<short,1>::tvec4<short,1>, COMDAT
; _this$ = ecx

; 129  : template struct tvec4<int16, mediump>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR [edx+2]
	mov	WORD PTR [ecx+2], ax
	mov	ax, WORD PTR [edx+2]
	mov	WORD PTR [ecx+2], ax
	mov	ax, WORD PTR [edx+2]
	mov	WORD PTR [ecx+2], ax
	mov	ax, WORD PTR [edx+4]
	mov	WORD PTR [ecx+4], ax
	mov	ax, WORD PTR [edx+4]
	mov	WORD PTR [ecx+4], ax
	mov	ax, WORD PTR [edx+4]
	mov	WORD PTR [ecx+4], ax
	mov	ax, WORD PTR [edx+6]
	mov	WORD PTR [ecx+6], ax
	mov	ax, WORD PTR [edx+6]
	mov	WORD PTR [ecx+6], ax
	mov	ax, WORD PTR [edx+6]
	mov	WORD PTR [ecx+6], ax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec4@F$00@glm@@QAE@ABU01@@Z ENDP			; glm::tvec4<short,1>::tvec4<short,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@F$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec4@F$00@glm@@QAE@XZ PROC			; glm::tvec4<short,1>::tvec4<short,1>, COMDAT
; _this$ = ecx

; 163  : 		{}

	xor	eax, eax
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	ret	0
??0?$tvec4@F$00@glm@@QAE@XZ ENDP			; glm::tvec4<short,1>::tvec4<short,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@F$00@glm@@QBEABFH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@F$00@glm@@QBEABFH@Z PROC			; glm::tvec4<short,1>::operator[], COMDAT
; _this$ = ecx

; 336  : 	{

	push	ebp
	mov	ebp, esp

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 339  : 	}

	pop	ebp
	ret	4
??A?$tvec4@F$00@glm@@QBEABFH@Z ENDP			; glm::tvec4<short,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@F$00@glm@@QAEAAFH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@F$00@glm@@QAEAAFH@Z PROC			; glm::tvec4<short,1>::operator[], COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 332  : 	}

	pop	ebp
	ret	4
??A?$tvec4@F$00@glm@@QAEAAFH@Z ENDP			; glm::tvec4<short,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@F$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@F$00@glm@@SAHXZ PROC			; glm::tvec4<short,1>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	push	4
	pop	eax
	ret	0
?length@?$tvec4@F$00@glm@@SAHXZ ENDP			; glm::tvec4<short,1>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@C$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec4@C$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<signed char,1>::operator--, COMDAT
; _this$ = ecx

; 482  : 	{

	push	ebp
	mov	ebp, esp

; 483  : 		tvec4<T, P> Result(*this);

	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 484  : 		--*this;

	dec	BYTE PTR [ecx]
	dec	BYTE PTR [ecx+1]
	dec	BYTE PTR [ecx+2]
	dec	BYTE PTR [ecx+3]
	mov	DWORD PTR [eax], edx

; 485  : 		return Result;
; 486  : 	}

	pop	ebp
	ret	8
??F?$tvec4@C$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<signed char,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@C$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec4@C$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<signed char,1>::operator++, COMDAT
; _this$ = ecx

; 474  : 	{

	push	ebp
	mov	ebp, esp

; 475  : 		tvec4<T, P> Result(*this);

	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 476  : 		++*this;

	inc	BYTE PTR [ecx]
	inc	BYTE PTR [ecx+1]
	inc	BYTE PTR [ecx+2]
	inc	BYTE PTR [ecx+3]
	mov	DWORD PTR [eax], edx

; 477  : 		return Result;
; 478  : 	}

	pop	ebp
	ret	8
??E?$tvec4@C$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<signed char,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@C$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec4@C$00@glm@@QAEAAU01@XZ PROC			; glm::tvec4<signed char,1>::operator--, COMDAT
; _this$ = ecx

; 465  : 		--this->x;

	dec	BYTE PTR [ecx]

; 466  : 		--this->y;
; 467  : 		--this->z;
; 468  : 		--this->w;
; 469  : 		return *this;

	mov	eax, ecx
	dec	BYTE PTR [ecx+1]
	dec	BYTE PTR [ecx+2]
	dec	BYTE PTR [ecx+3]

; 470  : 	}

	ret	0
??F?$tvec4@C$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<signed char,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@C$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec4@C$00@glm@@QAEAAU01@XZ PROC			; glm::tvec4<signed char,1>::operator++, COMDAT
; _this$ = ecx

; 455  : 		++this->x;

	inc	BYTE PTR [ecx]

; 456  : 		++this->y;
; 457  : 		++this->z;
; 458  : 		++this->w;
; 459  : 		return *this;

	mov	eax, ecx
	inc	BYTE PTR [ecx+1]
	inc	BYTE PTR [ecx+2]
	inc	BYTE PTR [ecx+3]

; 460  : 	}

	ret	0
??E?$tvec4@C$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<signed char,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec4@C$00@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec4@C$00@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec4<signed char,1>::operator=, COMDAT
; _this$ = ecx

; 128  : template struct tvec4<int8, mediump>;

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??4?$tvec4@C$00@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec4<signed char,1>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@C$00@glm@@QAE@CCCC@Z
_TEXT	SEGMENT
_a$ = 8							; size = 1
_b$ = 12						; size = 1
_c$ = 16						; size = 1
_d$ = 20						; size = 1
??0?$tvec4@C$00@glm@@QAE@CCCC@Z PROC			; glm::tvec4<signed char,1>::tvec4<signed char,1>, COMDAT
; _this$ = ecx

; 193  : 	{}

	push	ebp
	mov	ebp, esp
	mov	al, BYTE PTR _a$[ebp]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR _b$[ebp]
	mov	BYTE PTR [ecx+1], al
	mov	al, BYTE PTR _c$[ebp]
	mov	BYTE PTR [ecx+2], al
	mov	al, BYTE PTR _d$[ebp]
	mov	BYTE PTR [ecx+3], al
	mov	eax, ecx
	pop	ebp
	ret	16					; 00000010H
??0?$tvec4@C$00@glm@@QAE@CCCC@Z ENDP			; glm::tvec4<signed char,1>::tvec4<signed char,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@C$00@glm@@QAE@C@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 1
??0?$tvec4@C$00@glm@@QAE@C@Z PROC			; glm::tvec4<signed char,1>::tvec4<signed char,1>, COMDAT
; _this$ = ecx

; 188  : 	{}

	push	ebp
	mov	ebp, esp
	mov	al, BYTE PTR _scalar$[ebp]
	mov	BYTE PTR [ecx], al
	mov	BYTE PTR [ecx+1], al
	mov	BYTE PTR [ecx+2], al
	mov	BYTE PTR [ecx+3], al
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec4@C$00@glm@@QAE@C@Z ENDP			; glm::tvec4<signed char,1>::tvec4<signed char,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@C$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec4@C$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec4<signed char,1>::tvec4<signed char,1>, COMDAT
; _this$ = ecx

; 183  : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec4@C$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec4<signed char,1>::tvec4<signed char,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec4@C$00@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec4@C$00@glm@@QAE@ABU01@@Z PROC			; glm::tvec4<signed char,1>::tvec4<signed char,1>, COMDAT
; _this$ = ecx

; 128  : template struct tvec4<int8, mediump>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR [edx+1]
	mov	BYTE PTR [ecx+1], al
	mov	al, BYTE PTR [edx+1]
	mov	BYTE PTR [ecx+1], al
	mov	al, BYTE PTR [edx+1]
	mov	BYTE PTR [ecx+1], al
	mov	al, BYTE PTR [edx+2]
	mov	BYTE PTR [ecx+2], al
	mov	al, BYTE PTR [edx+2]
	mov	BYTE PTR [ecx+2], al
	mov	al, BYTE PTR [edx+2]
	mov	BYTE PTR [ecx+2], al
	mov	al, BYTE PTR [edx+3]
	mov	BYTE PTR [ecx+3], al
	mov	al, BYTE PTR [edx+3]
	mov	BYTE PTR [ecx+3], al
	mov	al, BYTE PTR [edx+3]
	mov	BYTE PTR [ecx+3], al
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec4@C$00@glm@@QAE@ABU01@@Z ENDP			; glm::tvec4<signed char,1>::tvec4<signed char,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@C$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec4@C$00@glm@@QAE@XZ PROC			; glm::tvec4<signed char,1>::tvec4<signed char,1>, COMDAT
; _this$ = ecx

; 163  : 		{}

	xor	eax, eax
	mov	DWORD PTR [ecx], eax
	mov	eax, ecx
	ret	0
??0?$tvec4@C$00@glm@@QAE@XZ ENDP			; glm::tvec4<signed char,1>::tvec4<signed char,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@C$00@glm@@QBEABCH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@C$00@glm@@QBEABCH@Z PROC			; glm::tvec4<signed char,1>::operator[], COMDAT
; _this$ = ecx

; 336  : 	{

	push	ebp
	mov	ebp, esp

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 339  : 	}

	pop	ebp
	ret	4
??A?$tvec4@C$00@glm@@QBEABCH@Z ENDP			; glm::tvec4<signed char,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@C$00@glm@@QAEAACH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@C$00@glm@@QAEAACH@Z PROC			; glm::tvec4<signed char,1>::operator[], COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 332  : 	}

	pop	ebp
	ret	4
??A?$tvec4@C$00@glm@@QAEAACH@Z ENDP			; glm::tvec4<signed char,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@C$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@C$00@glm@@SAHXZ PROC			; glm::tvec4<signed char,1>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	push	4
	pop	eax
	ret	0
?length@?$tvec4@C$00@glm@@SAHXZ ENDP			; glm::tvec4<signed char,1>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@_K$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec4@_K$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<unsigned __int64,1>::operator--, COMDAT
; _this$ = ecx

; 482  : 	{

	push	ebp
	mov	ebp, esp

; 483  : 		tvec4<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, ecx
	push	esi
	push	edi
	push	8
	pop	ecx
	mov	esi, edx
	mov	edi, eax
	rep movsd

; 484  : 		--*this;

	or	ecx, -1
	add	DWORD PTR [edx], ecx
	pop	edi
	adc	DWORD PTR [edx+4], ecx
	add	DWORD PTR [edx+8], ecx
	pop	esi
	adc	DWORD PTR [edx+12], ecx
	add	DWORD PTR [edx+16], ecx
	adc	DWORD PTR [edx+20], ecx
	add	DWORD PTR [edx+24], ecx
	adc	DWORD PTR [edx+28], ecx

; 485  : 		return Result;
; 486  : 	}

	pop	ebp
	ret	8
??F?$tvec4@_K$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<unsigned __int64,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@_K$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec4@_K$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<unsigned __int64,1>::operator++, COMDAT
; _this$ = ecx

; 474  : 	{

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi

; 475  : 		tvec4<T, P> Result(*this);

	mov	edi, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, ecx
	push	8
	pop	ecx
	mov	esi, eax
	rep movsd

; 476  : 		++*this;

	mov	ecx, eax
	call	??E?$tvec4@_K$00@glm@@QAEAAU01@XZ	; glm::tvec4<unsigned __int64,1>::operator++

; 477  : 		return Result;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi

; 478  : 	}

	pop	ebp
	ret	8
??E?$tvec4@_K$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<unsigned __int64,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@_K$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec4@_K$00@glm@@QAEAAU01@XZ PROC			; glm::tvec4<unsigned __int64,1>::operator--, COMDAT
; _this$ = ecx

; 465  : 		--this->x;

	or	eax, -1
	add	DWORD PTR [ecx], eax
	adc	DWORD PTR [ecx+4], eax

; 466  : 		--this->y;

	add	DWORD PTR [ecx+8], eax
	adc	DWORD PTR [ecx+12], eax

; 467  : 		--this->z;

	add	DWORD PTR [ecx+16], eax
	adc	DWORD PTR [ecx+20], eax

; 468  : 		--this->w;

	add	DWORD PTR [ecx+24], eax
	adc	DWORD PTR [ecx+28], eax

; 469  : 		return *this;

	mov	eax, ecx

; 470  : 	}

	ret	0
??F?$tvec4@_K$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<unsigned __int64,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@_K$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec4@_K$00@glm@@QAEAAU01@XZ PROC			; glm::tvec4<unsigned __int64,1>::operator++, COMDAT
; _this$ = ecx

; 455  : 		++this->x;

	xor	edx, edx
	inc	edx
	add	DWORD PTR [ecx], edx
	push	0
	pop	eax
	adc	DWORD PTR [ecx+4], eax

; 456  : 		++this->y;

	add	DWORD PTR [ecx+8], edx
	adc	DWORD PTR [ecx+12], eax

; 457  : 		++this->z;

	add	DWORD PTR [ecx+16], edx
	adc	DWORD PTR [ecx+20], eax

; 458  : 		++this->w;

	add	DWORD PTR [ecx+24], edx
	adc	DWORD PTR [ecx+28], eax

; 459  : 		return *this;

	mov	eax, ecx

; 460  : 	}

	ret	0
??E?$tvec4@_K$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<unsigned __int64,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec4@_K$00@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec4@_K$00@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec4<unsigned __int64,1>::operator=, COMDAT
; _this$ = ecx

; 127  : template struct tvec4<uint64, mediump>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	8
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tvec4@_K$00@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec4<unsigned __int64,1>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_K$00@glm@@QAE@_K000@Z
_TEXT	SEGMENT
_a$ = 8							; size = 8
_b$ = 16						; size = 8
_c$ = 24						; size = 8
_d$ = 32						; size = 8
??0?$tvec4@_K$00@glm@@QAE@_K000@Z PROC			; glm::tvec4<unsigned __int64,1>::tvec4<unsigned __int64,1>, COMDAT
; _this$ = ecx

; 193  : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _a$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _b$[ebp+4]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR _c$[ebp+4]
	mov	DWORD PTR [ecx+20], eax
	mov	eax, DWORD PTR _d$[ebp]
	mov	DWORD PTR [ecx+24], eax
	mov	eax, DWORD PTR _d$[ebp+4]
	mov	DWORD PTR [ecx+28], eax
	mov	eax, ecx
	pop	ebp
	ret	32					; 00000020H
??0?$tvec4@_K$00@glm@@QAE@_K000@Z ENDP			; glm::tvec4<unsigned __int64,1>::tvec4<unsigned __int64,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_K$00@glm@@QAE@_K@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 8
??0?$tvec4@_K$00@glm@@QAE@_K@Z PROC			; glm::tvec4<unsigned __int64,1>::tvec4<unsigned __int64,1>, COMDAT
; _this$ = ecx

; 188  : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _scalar$[ebp+4]
	mov	edx, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+12], eax
	mov	DWORD PTR [ecx+20], eax
	mov	DWORD PTR [ecx+28], eax
	mov	eax, ecx
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+8], edx
	mov	DWORD PTR [ecx+16], edx
	mov	DWORD PTR [ecx+24], edx
	pop	ebp
	ret	8
??0?$tvec4@_K$00@glm@@QAE@_K@Z ENDP			; glm::tvec4<unsigned __int64,1>::tvec4<unsigned __int64,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_K$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec4@_K$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec4<unsigned __int64,1>::tvec4<unsigned __int64,1>, COMDAT
; _this$ = ecx

; 183  : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec4@_K$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec4<unsigned __int64,1>::tvec4<unsigned __int64,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec4@_K$00@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec4@_K$00@glm@@QAE@ABU01@@Z PROC			; glm::tvec4<unsigned __int64,1>::tvec4<unsigned __int64,1>, COMDAT
; _this$ = ecx

; 127  : template struct tvec4<uint64, mediump>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx+20], eax
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx+20], eax
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx+20], eax
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR [ecx+24], eax
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR [ecx+28], eax
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR [ecx+24], eax
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR [ecx+28], eax
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR [ecx+24], eax
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR [ecx+28], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec4@_K$00@glm@@QAE@ABU01@@Z ENDP			; glm::tvec4<unsigned __int64,1>::tvec4<unsigned __int64,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_K$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec4@_K$00@glm@@QAE@XZ PROC			; glm::tvec4<unsigned __int64,1>::tvec4<unsigned __int64,1>, COMDAT
; _this$ = ecx

; 163  : 		{}

	xor	eax, eax
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR [ecx+12], eax
	mov	DWORD PTR [ecx+16], eax
	mov	DWORD PTR [ecx+20], eax
	mov	DWORD PTR [ecx+24], eax
	mov	DWORD PTR [ecx+28], eax
	mov	eax, ecx
	ret	0
??0?$tvec4@_K$00@glm@@QAE@XZ ENDP			; glm::tvec4<unsigned __int64,1>::tvec4<unsigned __int64,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@_K$00@glm@@QBEAB_KH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@_K$00@glm@@QBEAB_KH@Z PROC			; glm::tvec4<unsigned __int64,1>::operator[], COMDAT
; _this$ = ecx

; 336  : 	{

	push	ebp
	mov	ebp, esp

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 339  : 	}

	pop	ebp
	ret	4
??A?$tvec4@_K$00@glm@@QBEAB_KH@Z ENDP			; glm::tvec4<unsigned __int64,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@_K$00@glm@@QAEAA_KH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@_K$00@glm@@QAEAA_KH@Z PROC			; glm::tvec4<unsigned __int64,1>::operator[], COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 332  : 	}

	pop	ebp
	ret	4
??A?$tvec4@_K$00@glm@@QAEAA_KH@Z ENDP			; glm::tvec4<unsigned __int64,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@_K$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@_K$00@glm@@SAHXZ PROC			; glm::tvec4<unsigned __int64,1>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	push	4
	pop	eax
	ret	0
?length@?$tvec4@_K$00@glm@@SAHXZ ENDP			; glm::tvec4<unsigned __int64,1>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@I$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec4@I$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<unsigned int,1>::operator--, COMDAT
; _this$ = ecx

; 482  : 	{

	push	ebp
	mov	ebp, esp

; 483  : 		tvec4<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	mov	esi, ecx
	mov	edi, eax
	movsd
	movsd
	movsd
	movsd

; 484  : 		--*this;

	dec	DWORD PTR [ecx]
	dec	DWORD PTR [ecx+4]
	dec	DWORD PTR [ecx+8]
	dec	DWORD PTR [ecx+12]
	pop	edi
	pop	esi

; 485  : 		return Result;
; 486  : 	}

	pop	ebp
	ret	8
??F?$tvec4@I$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<unsigned int,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@I$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec4@I$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<unsigned int,1>::operator++, COMDAT
; _this$ = ecx

; 474  : 	{

	push	ebp
	mov	ebp, esp

; 475  : 		tvec4<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	mov	esi, ecx
	mov	edi, eax
	movsd
	movsd
	movsd
	movsd

; 476  : 		++*this;

	inc	DWORD PTR [ecx]
	inc	DWORD PTR [ecx+4]
	inc	DWORD PTR [ecx+8]
	inc	DWORD PTR [ecx+12]
	pop	edi
	pop	esi

; 477  : 		return Result;
; 478  : 	}

	pop	ebp
	ret	8
??E?$tvec4@I$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<unsigned int,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@I$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec4@I$00@glm@@QAEAAU01@XZ PROC			; glm::tvec4<unsigned int,1>::operator--, COMDAT
; _this$ = ecx

; 465  : 		--this->x;

	dec	DWORD PTR [ecx]

; 466  : 		--this->y;
; 467  : 		--this->z;
; 468  : 		--this->w;
; 469  : 		return *this;

	mov	eax, ecx
	dec	DWORD PTR [ecx+4]
	dec	DWORD PTR [ecx+8]
	dec	DWORD PTR [ecx+12]

; 470  : 	}

	ret	0
??F?$tvec4@I$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<unsigned int,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@I$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec4@I$00@glm@@QAEAAU01@XZ PROC			; glm::tvec4<unsigned int,1>::operator++, COMDAT
; _this$ = ecx

; 455  : 		++this->x;

	inc	DWORD PTR [ecx]

; 456  : 		++this->y;
; 457  : 		++this->z;
; 458  : 		++this->w;
; 459  : 		return *this;

	mov	eax, ecx
	inc	DWORD PTR [ecx+4]
	inc	DWORD PTR [ecx+8]
	inc	DWORD PTR [ecx+12]

; 460  : 	}

	ret	0
??E?$tvec4@I$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<unsigned int,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec4@I$00@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec4@I$00@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec4<unsigned int,1>::operator=, COMDAT
; _this$ = ecx

; 126  : template struct tvec4<uint32, mediump>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	mov	edi, ecx
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tvec4@I$00@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec4<unsigned int,1>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@I$00@glm@@QAE@IIII@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
_d$ = 20						; size = 4
??0?$tvec4@I$00@glm@@QAE@IIII@Z PROC			; glm::tvec4<unsigned int,1>::tvec4<unsigned int,1>, COMDAT
; _this$ = ecx

; 193  : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _d$[ebp]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, ecx
	pop	ebp
	ret	16					; 00000010H
??0?$tvec4@I$00@glm@@QAE@IIII@Z ENDP			; glm::tvec4<unsigned int,1>::tvec4<unsigned int,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@I$00@glm@@QAE@I@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 4
??0?$tvec4@I$00@glm@@QAE@I@Z PROC			; glm::tvec4<unsigned int,1>::tvec4<unsigned int,1>, COMDAT
; _this$ = ecx

; 188  : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR [ecx+12], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec4@I$00@glm@@QAE@I@Z ENDP			; glm::tvec4<unsigned int,1>::tvec4<unsigned int,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@I$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec4@I$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec4<unsigned int,1>::tvec4<unsigned int,1>, COMDAT
; _this$ = ecx

; 183  : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec4@I$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec4<unsigned int,1>::tvec4<unsigned int,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec4@I$00@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec4@I$00@glm@@QAE@ABU01@@Z PROC			; glm::tvec4<unsigned int,1>::tvec4<unsigned int,1>, COMDAT
; _this$ = ecx

; 126  : template struct tvec4<uint32, mediump>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec4@I$00@glm@@QAE@ABU01@@Z ENDP			; glm::tvec4<unsigned int,1>::tvec4<unsigned int,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@I$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec4@I$00@glm@@QAE@XZ PROC			; glm::tvec4<unsigned int,1>::tvec4<unsigned int,1>, COMDAT
; _this$ = ecx

; 163  : 		{}

	xor	eax, eax
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR [ecx+12], eax
	mov	eax, ecx
	ret	0
??0?$tvec4@I$00@glm@@QAE@XZ ENDP			; glm::tvec4<unsigned int,1>::tvec4<unsigned int,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@I$00@glm@@QBEABIH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@I$00@glm@@QBEABIH@Z PROC			; glm::tvec4<unsigned int,1>::operator[], COMDAT
; _this$ = ecx

; 336  : 	{

	push	ebp
	mov	ebp, esp

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 339  : 	}

	pop	ebp
	ret	4
??A?$tvec4@I$00@glm@@QBEABIH@Z ENDP			; glm::tvec4<unsigned int,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@I$00@glm@@QAEAAIH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@I$00@glm@@QAEAAIH@Z PROC			; glm::tvec4<unsigned int,1>::operator[], COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 332  : 	}

	pop	ebp
	ret	4
??A?$tvec4@I$00@glm@@QAEAAIH@Z ENDP			; glm::tvec4<unsigned int,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@I$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@I$00@glm@@SAHXZ PROC			; glm::tvec4<unsigned int,1>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	push	4
	pop	eax
	ret	0
?length@?$tvec4@I$00@glm@@SAHXZ ENDP			; glm::tvec4<unsigned int,1>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@G$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec4@G$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<unsigned short,1>::operator--, COMDAT
; _this$ = ecx

; 482  : 	{

	push	ebp
	mov	ebp, esp

; 483  : 		tvec4<T, P> Result(*this);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax

; 484  : 		--*this;

	mov	eax, 65535				; 0000ffffH
	add	WORD PTR [ecx], ax
	add	WORD PTR [ecx+2], ax
	add	WORD PTR [ecx+4], ax
	add	WORD PTR [ecx+6], ax

; 485  : 		return Result;

	mov	eax, edx

; 486  : 	}

	pop	ebp
	ret	8
??F?$tvec4@G$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<unsigned short,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@G$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec4@G$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<unsigned short,1>::operator++, COMDAT
; _this$ = ecx

; 474  : 	{

	push	ebp
	mov	ebp, esp

; 475  : 		tvec4<T, P> Result(*this);

	mov	eax, DWORD PTR [ecx]

; 476  : 		++*this;

	inc	WORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]
	inc	WORD PTR [ecx+2]
	inc	WORD PTR [ecx+4]
	inc	WORD PTR [ecx+6]
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [esi], eax

; 477  : 		return Result;

	mov	eax, esi
	mov	DWORD PTR [esi+4], edx
	pop	esi

; 478  : 	}

	pop	ebp
	ret	8
??E?$tvec4@G$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<unsigned short,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@G$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec4@G$00@glm@@QAEAAU01@XZ PROC			; glm::tvec4<unsigned short,1>::operator--, COMDAT
; _this$ = ecx

; 465  : 		--this->x;

	mov	eax, 65535				; 0000ffffH
	add	WORD PTR [ecx], ax

; 466  : 		--this->y;

	add	WORD PTR [ecx+2], ax

; 467  : 		--this->z;

	add	WORD PTR [ecx+4], ax

; 468  : 		--this->w;

	add	WORD PTR [ecx+6], ax

; 469  : 		return *this;

	mov	eax, ecx

; 470  : 	}

	ret	0
??F?$tvec4@G$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<unsigned short,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@G$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec4@G$00@glm@@QAEAAU01@XZ PROC			; glm::tvec4<unsigned short,1>::operator++, COMDAT
; _this$ = ecx

; 455  : 		++this->x;

	inc	WORD PTR [ecx]

; 456  : 		++this->y;
; 457  : 		++this->z;
; 458  : 		++this->w;
; 459  : 		return *this;

	mov	eax, ecx
	inc	WORD PTR [ecx+2]
	inc	WORD PTR [ecx+4]
	inc	WORD PTR [ecx+6]

; 460  : 	}

	ret	0
??E?$tvec4@G$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<unsigned short,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec4@G$00@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec4@G$00@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec4<unsigned short,1>::operator=, COMDAT
; _this$ = ecx

; 125  : template struct tvec4<uint16, mediump>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??4?$tvec4@G$00@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec4<unsigned short,1>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@G$00@glm@@QAE@GGGG@Z
_TEXT	SEGMENT
_a$ = 8							; size = 2
_b$ = 12						; size = 2
_c$ = 16						; size = 2
_d$ = 20						; size = 2
??0?$tvec4@G$00@glm@@QAE@GGGG@Z PROC			; glm::tvec4<unsigned short,1>::tvec4<unsigned short,1>, COMDAT
; _this$ = ecx

; 193  : 	{}

	push	ebp
	mov	ebp, esp
	mov	ax, WORD PTR _a$[ebp]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR _b$[ebp]
	mov	WORD PTR [ecx+2], ax
	mov	ax, WORD PTR _c$[ebp]
	mov	WORD PTR [ecx+4], ax
	mov	ax, WORD PTR _d$[ebp]
	mov	WORD PTR [ecx+6], ax
	mov	eax, ecx
	pop	ebp
	ret	16					; 00000010H
??0?$tvec4@G$00@glm@@QAE@GGGG@Z ENDP			; glm::tvec4<unsigned short,1>::tvec4<unsigned short,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@G$00@glm@@QAE@G@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 2
??0?$tvec4@G$00@glm@@QAE@G@Z PROC			; glm::tvec4<unsigned short,1>::tvec4<unsigned short,1>, COMDAT
; _this$ = ecx

; 188  : 	{}

	push	ebp
	mov	ebp, esp
	mov	ax, WORD PTR _scalar$[ebp]
	mov	WORD PTR [ecx], ax
	mov	WORD PTR [ecx+2], ax
	mov	WORD PTR [ecx+4], ax
	mov	WORD PTR [ecx+6], ax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec4@G$00@glm@@QAE@G@Z ENDP			; glm::tvec4<unsigned short,1>::tvec4<unsigned short,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@G$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec4@G$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec4<unsigned short,1>::tvec4<unsigned short,1>, COMDAT
; _this$ = ecx

; 183  : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec4@G$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec4<unsigned short,1>::tvec4<unsigned short,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec4@G$00@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec4@G$00@glm@@QAE@ABU01@@Z PROC			; glm::tvec4<unsigned short,1>::tvec4<unsigned short,1>, COMDAT
; _this$ = ecx

; 125  : template struct tvec4<uint16, mediump>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR [edx+2]
	mov	WORD PTR [ecx+2], ax
	mov	ax, WORD PTR [edx+2]
	mov	WORD PTR [ecx+2], ax
	mov	ax, WORD PTR [edx+2]
	mov	WORD PTR [ecx+2], ax
	mov	ax, WORD PTR [edx+4]
	mov	WORD PTR [ecx+4], ax
	mov	ax, WORD PTR [edx+4]
	mov	WORD PTR [ecx+4], ax
	mov	ax, WORD PTR [edx+4]
	mov	WORD PTR [ecx+4], ax
	mov	ax, WORD PTR [edx+6]
	mov	WORD PTR [ecx+6], ax
	mov	ax, WORD PTR [edx+6]
	mov	WORD PTR [ecx+6], ax
	mov	ax, WORD PTR [edx+6]
	mov	WORD PTR [ecx+6], ax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec4@G$00@glm@@QAE@ABU01@@Z ENDP			; glm::tvec4<unsigned short,1>::tvec4<unsigned short,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@G$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec4@G$00@glm@@QAE@XZ PROC			; glm::tvec4<unsigned short,1>::tvec4<unsigned short,1>, COMDAT
; _this$ = ecx

; 163  : 		{}

	xor	eax, eax
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	ret	0
??0?$tvec4@G$00@glm@@QAE@XZ ENDP			; glm::tvec4<unsigned short,1>::tvec4<unsigned short,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@G$00@glm@@QBEABGH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@G$00@glm@@QBEABGH@Z PROC			; glm::tvec4<unsigned short,1>::operator[], COMDAT
; _this$ = ecx

; 336  : 	{

	push	ebp
	mov	ebp, esp

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 339  : 	}

	pop	ebp
	ret	4
??A?$tvec4@G$00@glm@@QBEABGH@Z ENDP			; glm::tvec4<unsigned short,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@G$00@glm@@QAEAAGH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@G$00@glm@@QAEAAGH@Z PROC			; glm::tvec4<unsigned short,1>::operator[], COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 332  : 	}

	pop	ebp
	ret	4
??A?$tvec4@G$00@glm@@QAEAAGH@Z ENDP			; glm::tvec4<unsigned short,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@G$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@G$00@glm@@SAHXZ PROC			; glm::tvec4<unsigned short,1>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	push	4
	pop	eax
	ret	0
?length@?$tvec4@G$00@glm@@SAHXZ ENDP			; glm::tvec4<unsigned short,1>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@E$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec4@E$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<unsigned char,1>::operator--, COMDAT
; _this$ = ecx

; 482  : 	{

	push	ebp
	mov	ebp, esp

; 483  : 		tvec4<T, P> Result(*this);

	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 484  : 		--*this;

	dec	BYTE PTR [ecx]
	dec	BYTE PTR [ecx+1]
	dec	BYTE PTR [ecx+2]
	dec	BYTE PTR [ecx+3]
	mov	DWORD PTR [eax], edx

; 485  : 		return Result;
; 486  : 	}

	pop	ebp
	ret	8
??F?$tvec4@E$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<unsigned char,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@E$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec4@E$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<unsigned char,1>::operator++, COMDAT
; _this$ = ecx

; 474  : 	{

	push	ebp
	mov	ebp, esp

; 475  : 		tvec4<T, P> Result(*this);

	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 476  : 		++*this;

	inc	BYTE PTR [ecx]
	inc	BYTE PTR [ecx+1]
	inc	BYTE PTR [ecx+2]
	inc	BYTE PTR [ecx+3]
	mov	DWORD PTR [eax], edx

; 477  : 		return Result;
; 478  : 	}

	pop	ebp
	ret	8
??E?$tvec4@E$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<unsigned char,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@E$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec4@E$00@glm@@QAEAAU01@XZ PROC			; glm::tvec4<unsigned char,1>::operator--, COMDAT
; _this$ = ecx

; 465  : 		--this->x;

	dec	BYTE PTR [ecx]

; 466  : 		--this->y;
; 467  : 		--this->z;
; 468  : 		--this->w;
; 469  : 		return *this;

	mov	eax, ecx
	dec	BYTE PTR [ecx+1]
	dec	BYTE PTR [ecx+2]
	dec	BYTE PTR [ecx+3]

; 470  : 	}

	ret	0
??F?$tvec4@E$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<unsigned char,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@E$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec4@E$00@glm@@QAEAAU01@XZ PROC			; glm::tvec4<unsigned char,1>::operator++, COMDAT
; _this$ = ecx

; 455  : 		++this->x;

	inc	BYTE PTR [ecx]

; 456  : 		++this->y;
; 457  : 		++this->z;
; 458  : 		++this->w;
; 459  : 		return *this;

	mov	eax, ecx
	inc	BYTE PTR [ecx+1]
	inc	BYTE PTR [ecx+2]
	inc	BYTE PTR [ecx+3]

; 460  : 	}

	ret	0
??E?$tvec4@E$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<unsigned char,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec4@E$00@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec4@E$00@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec4<unsigned char,1>::operator=, COMDAT
; _this$ = ecx

; 124  : template struct tvec4<uint8, mediump>;

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??4?$tvec4@E$00@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec4<unsigned char,1>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@E$00@glm@@QAE@EEEE@Z
_TEXT	SEGMENT
_a$ = 8							; size = 1
_b$ = 12						; size = 1
_c$ = 16						; size = 1
_d$ = 20						; size = 1
??0?$tvec4@E$00@glm@@QAE@EEEE@Z PROC			; glm::tvec4<unsigned char,1>::tvec4<unsigned char,1>, COMDAT
; _this$ = ecx

; 193  : 	{}

	push	ebp
	mov	ebp, esp
	mov	al, BYTE PTR _a$[ebp]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR _b$[ebp]
	mov	BYTE PTR [ecx+1], al
	mov	al, BYTE PTR _c$[ebp]
	mov	BYTE PTR [ecx+2], al
	mov	al, BYTE PTR _d$[ebp]
	mov	BYTE PTR [ecx+3], al
	mov	eax, ecx
	pop	ebp
	ret	16					; 00000010H
??0?$tvec4@E$00@glm@@QAE@EEEE@Z ENDP			; glm::tvec4<unsigned char,1>::tvec4<unsigned char,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@E$00@glm@@QAE@E@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 1
??0?$tvec4@E$00@glm@@QAE@E@Z PROC			; glm::tvec4<unsigned char,1>::tvec4<unsigned char,1>, COMDAT
; _this$ = ecx

; 188  : 	{}

	push	ebp
	mov	ebp, esp
	mov	al, BYTE PTR _scalar$[ebp]
	mov	BYTE PTR [ecx], al
	mov	BYTE PTR [ecx+1], al
	mov	BYTE PTR [ecx+2], al
	mov	BYTE PTR [ecx+3], al
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec4@E$00@glm@@QAE@E@Z ENDP			; glm::tvec4<unsigned char,1>::tvec4<unsigned char,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@E$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec4@E$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec4<unsigned char,1>::tvec4<unsigned char,1>, COMDAT
; _this$ = ecx

; 183  : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec4@E$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec4<unsigned char,1>::tvec4<unsigned char,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec4@E$00@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec4@E$00@glm@@QAE@ABU01@@Z PROC			; glm::tvec4<unsigned char,1>::tvec4<unsigned char,1>, COMDAT
; _this$ = ecx

; 124  : template struct tvec4<uint8, mediump>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR [edx+1]
	mov	BYTE PTR [ecx+1], al
	mov	al, BYTE PTR [edx+1]
	mov	BYTE PTR [ecx+1], al
	mov	al, BYTE PTR [edx+1]
	mov	BYTE PTR [ecx+1], al
	mov	al, BYTE PTR [edx+2]
	mov	BYTE PTR [ecx+2], al
	mov	al, BYTE PTR [edx+2]
	mov	BYTE PTR [ecx+2], al
	mov	al, BYTE PTR [edx+2]
	mov	BYTE PTR [ecx+2], al
	mov	al, BYTE PTR [edx+3]
	mov	BYTE PTR [ecx+3], al
	mov	al, BYTE PTR [edx+3]
	mov	BYTE PTR [ecx+3], al
	mov	al, BYTE PTR [edx+3]
	mov	BYTE PTR [ecx+3], al
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec4@E$00@glm@@QAE@ABU01@@Z ENDP			; glm::tvec4<unsigned char,1>::tvec4<unsigned char,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@E$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec4@E$00@glm@@QAE@XZ PROC			; glm::tvec4<unsigned char,1>::tvec4<unsigned char,1>, COMDAT
; _this$ = ecx

; 163  : 		{}

	xor	eax, eax
	mov	DWORD PTR [ecx], eax
	mov	eax, ecx
	ret	0
??0?$tvec4@E$00@glm@@QAE@XZ ENDP			; glm::tvec4<unsigned char,1>::tvec4<unsigned char,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@E$00@glm@@QBEABEH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@E$00@glm@@QBEABEH@Z PROC			; glm::tvec4<unsigned char,1>::operator[], COMDAT
; _this$ = ecx

; 336  : 	{

	push	ebp
	mov	ebp, esp

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 339  : 	}

	pop	ebp
	ret	4
??A?$tvec4@E$00@glm@@QBEABEH@Z ENDP			; glm::tvec4<unsigned char,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@E$00@glm@@QAEAAEH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@E$00@glm@@QAEAAEH@Z PROC			; glm::tvec4<unsigned char,1>::operator[], COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 332  : 	}

	pop	ebp
	ret	4
??A?$tvec4@E$00@glm@@QAEAAEH@Z ENDP			; glm::tvec4<unsigned char,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@E$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@E$00@glm@@SAHXZ PROC			; glm::tvec4<unsigned char,1>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	push	4
	pop	eax
	ret	0
?length@?$tvec4@E$00@glm@@SAHXZ ENDP			; glm::tvec4<unsigned char,1>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@N$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec4@N$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<double,2>::operator--, COMDAT
; _this$ = ecx

; 482  : 	{

	push	ebp
	mov	ebp, esp

; 483  : 		tvec4<T, P> Result(*this);
; 484  : 		--*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	mov	edx, ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	movups	xmm0, XMMWORD PTR [edx]
	push	8
	pop	ecx
	subpd	xmm0, xmm1
	mov	esi, edx
	mov	edi, eax
	rep movsd
	movups	XMMWORD PTR [edx], xmm0
	pop	edi
	movups	xmm0, XMMWORD PTR [edx+16]
	pop	esi
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+16], xmm0

; 485  : 		return Result;
; 486  : 	}

	pop	ebp
	ret	8
??F?$tvec4@N$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<double,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@N$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec4@N$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<double,2>::operator++, COMDAT
; _this$ = ecx

; 474  : 	{

	push	ebp
	mov	ebp, esp

; 475  : 		tvec4<T, P> Result(*this);
; 476  : 		++*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	mov	edx, ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	movups	xmm0, XMMWORD PTR [edx]
	push	8
	pop	ecx
	addpd	xmm0, xmm1
	mov	esi, edx
	mov	edi, eax
	rep movsd
	movups	XMMWORD PTR [edx], xmm0
	pop	edi
	movups	xmm0, XMMWORD PTR [edx+16]
	pop	esi
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+16], xmm0

; 477  : 		return Result;
; 478  : 	}

	pop	ebp
	ret	8
??E?$tvec4@N$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<double,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@N$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec4@N$01@glm@@QAEAAU01@XZ PROC			; glm::tvec4<double,2>::operator--, COMDAT
; _this$ = ecx

; 465  : 		--this->x;

	movups	xmm0, XMMWORD PTR [ecx]

; 466  : 		--this->y;
; 467  : 		--this->z;
; 468  : 		--this->w;
; 469  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0

; 470  : 	}

	ret	0
??F?$tvec4@N$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<double,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@N$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec4@N$01@glm@@QAEAAU01@XZ PROC			; glm::tvec4<double,2>::operator++, COMDAT
; _this$ = ecx

; 455  : 		++this->x;

	movups	xmm0, XMMWORD PTR [ecx]

; 456  : 		++this->y;
; 457  : 		++this->z;
; 458  : 		++this->w;
; 459  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0

; 460  : 	}

	ret	0
??E?$tvec4@N$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<double,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec4@N$01@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec4@N$01@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec4<double,2>::operator=, COMDAT
; _this$ = ecx

; 122  : template struct tvec4<float64, lowp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	8
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tvec4@N$01@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec4<double,2>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@N$01@glm@@QAE@NNNN@Z
_TEXT	SEGMENT
_a$ = 8							; size = 8
_b$ = 16						; size = 8
_c$ = 24						; size = 8
_d$ = 32						; size = 8
??0?$tvec4@N$01@glm@@QAE@NNNN@Z PROC			; glm::tvec4<double,2>::tvec4<double,2>, COMDAT
; _this$ = ecx

; 193  : 	{}

	push	ebp
	mov	ebp, esp
	movsd	xmm0, QWORD PTR _a$[ebp]
	mov	eax, ecx
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR _b$[ebp]
	movsd	QWORD PTR [ecx+8], xmm0
	movsd	xmm0, QWORD PTR _c$[ebp]
	movsd	QWORD PTR [ecx+16], xmm0
	movsd	xmm0, QWORD PTR _d$[ebp]
	movsd	QWORD PTR [ecx+24], xmm0
	pop	ebp
	ret	32					; 00000020H
??0?$tvec4@N$01@glm@@QAE@NNNN@Z ENDP			; glm::tvec4<double,2>::tvec4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@N$01@glm@@QAE@N@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 8
??0?$tvec4@N$01@glm@@QAE@N@Z PROC			; glm::tvec4<double,2>::tvec4<double,2>, COMDAT
; _this$ = ecx

; 188  : 	{}

	push	ebp
	mov	ebp, esp
	movsd	xmm0, QWORD PTR _scalar$[ebp]
	mov	eax, ecx
	unpcklpd xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	pop	ebp
	ret	8
??0?$tvec4@N$01@glm@@QAE@N@Z ENDP			; glm::tvec4<double,2>::tvec4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@N$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec4@N$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec4<double,2>::tvec4<double,2>, COMDAT
; _this$ = ecx

; 183  : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec4@N$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec4<double,2>::tvec4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec4@N$01@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec4@N$01@glm@@QAE@ABU01@@Z PROC			; glm::tvec4<double,2>::tvec4<double,2>, COMDAT
; _this$ = ecx

; 122  : template struct tvec4<float64, lowp>;

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ___that$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	QWORD PTR [ecx+8], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	QWORD PTR [ecx+8], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	QWORD PTR [ecx+8], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR [ecx+16], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR [ecx+16], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR [ecx+16], xmm0
	movsd	xmm0, QWORD PTR [eax+24]
	movsd	QWORD PTR [ecx+24], xmm0
	movsd	xmm0, QWORD PTR [eax+24]
	movsd	QWORD PTR [ecx+24], xmm0
	movsd	xmm0, QWORD PTR [eax+24]
	mov	eax, ecx
	movsd	QWORD PTR [ecx+24], xmm0
	pop	ebp
	ret	4
??0?$tvec4@N$01@glm@@QAE@ABU01@@Z ENDP			; glm::tvec4<double,2>::tvec4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@N$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec4@N$01@glm@@QAE@XZ PROC			; glm::tvec4<double,2>::tvec4<double,2>, COMDAT
; _this$ = ecx

; 163  : 		{}

	xorps	xmm0, xmm0
	mov	eax, ecx
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	ret	0
??0?$tvec4@N$01@glm@@QAE@XZ ENDP			; glm::tvec4<double,2>::tvec4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@N$01@glm@@QBEABNH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@N$01@glm@@QBEABNH@Z PROC			; glm::tvec4<double,2>::operator[], COMDAT
; _this$ = ecx

; 336  : 	{

	push	ebp
	mov	ebp, esp

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 339  : 	}

	pop	ebp
	ret	4
??A?$tvec4@N$01@glm@@QBEABNH@Z ENDP			; glm::tvec4<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@N$01@glm@@QAEAANH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@N$01@glm@@QAEAANH@Z PROC			; glm::tvec4<double,2>::operator[], COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 332  : 	}

	pop	ebp
	ret	4
??A?$tvec4@N$01@glm@@QAEAANH@Z ENDP			; glm::tvec4<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@N$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@N$01@glm@@SAHXZ PROC			; glm::tvec4<double,2>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	push	4
	pop	eax
	ret	0
?length@?$tvec4@N$01@glm@@SAHXZ ENDP			; glm::tvec4<double,2>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@M$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec4@M$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<float,2>::operator--, COMDAT
; _this$ = ecx

; 482  : 	{

	push	ebp
	mov	ebp, esp

; 483  : 		tvec4<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 484  : 		--*this;

	movups	xmm0, XMMWORD PTR [ecx]
	push	esi
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	mov	esi, ecx
	push	edi
	mov	edi, eax
	subps	xmm0, xmm1
	movsd
	movsd
	movsd
	movsd
	pop	edi
	movups	XMMWORD PTR [ecx], xmm0
	pop	esi

; 485  : 		return Result;
; 486  : 	}

	pop	ebp
	ret	8
??F?$tvec4@M$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<float,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@M$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec4@M$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<float,2>::operator++, COMDAT
; _this$ = ecx

; 474  : 	{

	push	ebp
	mov	ebp, esp

; 475  : 		tvec4<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 476  : 		++*this;

	movups	xmm0, XMMWORD PTR [ecx]
	push	esi
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	mov	esi, ecx
	push	edi
	mov	edi, eax
	addps	xmm0, xmm1
	movsd
	movsd
	movsd
	movsd
	pop	edi
	movups	XMMWORD PTR [ecx], xmm0
	pop	esi

; 477  : 		return Result;
; 478  : 	}

	pop	ebp
	ret	8
??E?$tvec4@M$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<float,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@M$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec4@M$01@glm@@QAEAAU01@XZ PROC			; glm::tvec4<float,2>::operator--, COMDAT
; _this$ = ecx

; 465  : 		--this->x;

	movups	xmm0, XMMWORD PTR [ecx]

; 466  : 		--this->y;
; 467  : 		--this->z;
; 468  : 		--this->w;
; 469  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0

; 470  : 	}

	ret	0
??F?$tvec4@M$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<float,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@M$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec4@M$01@glm@@QAEAAU01@XZ PROC			; glm::tvec4<float,2>::operator++, COMDAT
; _this$ = ecx

; 455  : 		++this->x;

	movups	xmm0, XMMWORD PTR [ecx]

; 456  : 		++this->y;
; 457  : 		++this->z;
; 458  : 		++this->w;
; 459  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0

; 460  : 	}

	ret	0
??E?$tvec4@M$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<float,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec4@M$01@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec4@M$01@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec4<float,2>::operator=, COMDAT
; _this$ = ecx

; 121  : template struct tvec4<float32, lowp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	mov	edi, ecx
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tvec4@M$01@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec4<float,2>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$01@glm@@QAE@MMMM@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
_d$ = 20						; size = 4
??0?$tvec4@M$01@glm@@QAE@MMMM@Z PROC			; glm::tvec4<float,2>::tvec4<float,2>, COMDAT
; _this$ = ecx

; 193  : 	{}

	push	ebp
	mov	ebp, esp
	movss	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR _b$[ebp]
	movss	DWORD PTR [ecx+4], xmm0
	movss	xmm0, DWORD PTR _c$[ebp]
	movss	DWORD PTR [ecx+8], xmm0
	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR [ecx+12], xmm0
	pop	ebp
	ret	16					; 00000010H
??0?$tvec4@M$01@glm@@QAE@MMMM@Z ENDP			; glm::tvec4<float,2>::tvec4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$01@glm@@QAE@M@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 4
??0?$tvec4@M$01@glm@@QAE@M@Z PROC			; glm::tvec4<float,2>::tvec4<float,2>, COMDAT
; _this$ = ecx

; 188  : 	{}

	push	ebp
	mov	ebp, esp
	movss	xmm0, DWORD PTR _scalar$[ebp]
	mov	eax, ecx
	shufps	xmm0, xmm0, 0
	movups	XMMWORD PTR [ecx], xmm0
	pop	ebp
	ret	4
??0?$tvec4@M$01@glm@@QAE@M@Z ENDP			; glm::tvec4<float,2>::tvec4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec4@M$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec4<float,2>::tvec4<float,2>, COMDAT
; _this$ = ecx

; 183  : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec4@M$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec4<float,2>::tvec4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec4@M$01@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec4@M$01@glm@@QAE@ABU01@@Z PROC			; glm::tvec4<float,2>::tvec4<float,2>, COMDAT
; _this$ = ecx

; 121  : template struct tvec4<float32, lowp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec4@M$01@glm@@QAE@ABU01@@Z ENDP			; glm::tvec4<float,2>::tvec4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec4@M$01@glm@@QAE@XZ PROC			; glm::tvec4<float,2>::tvec4<float,2>, COMDAT
; _this$ = ecx

; 163  : 		{}

	and	DWORD PTR [ecx], 0
	mov	eax, ecx
	and	DWORD PTR [ecx+4], 0
	and	DWORD PTR [ecx+8], 0
	and	DWORD PTR [ecx+12], 0
	ret	0
??0?$tvec4@M$01@glm@@QAE@XZ ENDP			; glm::tvec4<float,2>::tvec4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@M$01@glm@@QBEABMH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@M$01@glm@@QBEABMH@Z PROC			; glm::tvec4<float,2>::operator[], COMDAT
; _this$ = ecx

; 336  : 	{

	push	ebp
	mov	ebp, esp

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 339  : 	}

	pop	ebp
	ret	4
??A?$tvec4@M$01@glm@@QBEABMH@Z ENDP			; glm::tvec4<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@M$01@glm@@QAEAAMH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@M$01@glm@@QAEAAMH@Z PROC			; glm::tvec4<float,2>::operator[], COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 332  : 	}

	pop	ebp
	ret	4
??A?$tvec4@M$01@glm@@QAEAAMH@Z ENDP			; glm::tvec4<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@M$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@M$01@glm@@SAHXZ PROC			; glm::tvec4<float,2>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	push	4
	pop	eax
	ret	0
?length@?$tvec4@M$01@glm@@SAHXZ ENDP			; glm::tvec4<float,2>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@_J$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec4@_J$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<__int64,2>::operator--, COMDAT
; _this$ = ecx

; 482  : 	{

	push	ebp
	mov	ebp, esp

; 483  : 		tvec4<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, ecx
	push	esi
	push	edi
	push	8
	pop	ecx
	mov	esi, edx
	mov	edi, eax
	rep movsd

; 484  : 		--*this;

	or	ecx, -1
	add	DWORD PTR [edx], ecx
	pop	edi
	adc	DWORD PTR [edx+4], ecx
	add	DWORD PTR [edx+8], ecx
	pop	esi
	adc	DWORD PTR [edx+12], ecx
	add	DWORD PTR [edx+16], ecx
	adc	DWORD PTR [edx+20], ecx
	add	DWORD PTR [edx+24], ecx
	adc	DWORD PTR [edx+28], ecx

; 485  : 		return Result;
; 486  : 	}

	pop	ebp
	ret	8
??F?$tvec4@_J$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<__int64,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@_J$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec4@_J$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<__int64,2>::operator++, COMDAT
; _this$ = ecx

; 474  : 	{

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi

; 475  : 		tvec4<T, P> Result(*this);

	mov	edi, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, ecx
	push	8
	pop	ecx
	mov	esi, eax
	rep movsd

; 476  : 		++*this;

	mov	ecx, eax
	call	??E?$tvec4@_J$01@glm@@QAEAAU01@XZ	; glm::tvec4<__int64,2>::operator++

; 477  : 		return Result;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi

; 478  : 	}

	pop	ebp
	ret	8
??E?$tvec4@_J$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<__int64,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@_J$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec4@_J$01@glm@@QAEAAU01@XZ PROC			; glm::tvec4<__int64,2>::operator--, COMDAT
; _this$ = ecx

; 465  : 		--this->x;

	or	eax, -1
	add	DWORD PTR [ecx], eax
	adc	DWORD PTR [ecx+4], eax

; 466  : 		--this->y;

	add	DWORD PTR [ecx+8], eax
	adc	DWORD PTR [ecx+12], eax

; 467  : 		--this->z;

	add	DWORD PTR [ecx+16], eax
	adc	DWORD PTR [ecx+20], eax

; 468  : 		--this->w;

	add	DWORD PTR [ecx+24], eax
	adc	DWORD PTR [ecx+28], eax

; 469  : 		return *this;

	mov	eax, ecx

; 470  : 	}

	ret	0
??F?$tvec4@_J$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<__int64,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@_J$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec4@_J$01@glm@@QAEAAU01@XZ PROC			; glm::tvec4<__int64,2>::operator++, COMDAT
; _this$ = ecx

; 455  : 		++this->x;

	xor	edx, edx
	inc	edx
	add	DWORD PTR [ecx], edx
	push	0
	pop	eax
	adc	DWORD PTR [ecx+4], eax

; 456  : 		++this->y;

	add	DWORD PTR [ecx+8], edx
	adc	DWORD PTR [ecx+12], eax

; 457  : 		++this->z;

	add	DWORD PTR [ecx+16], edx
	adc	DWORD PTR [ecx+20], eax

; 458  : 		++this->w;

	add	DWORD PTR [ecx+24], edx
	adc	DWORD PTR [ecx+28], eax

; 459  : 		return *this;

	mov	eax, ecx

; 460  : 	}

	ret	0
??E?$tvec4@_J$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<__int64,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec4@_J$01@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec4@_J$01@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec4<__int64,2>::operator=, COMDAT
; _this$ = ecx

; 120  : template struct tvec4<int64, lowp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	8
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tvec4@_J$01@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec4<__int64,2>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_J$01@glm@@QAE@_J000@Z
_TEXT	SEGMENT
_a$ = 8							; size = 8
_b$ = 16						; size = 8
_c$ = 24						; size = 8
_d$ = 32						; size = 8
??0?$tvec4@_J$01@glm@@QAE@_J000@Z PROC			; glm::tvec4<__int64,2>::tvec4<__int64,2>, COMDAT
; _this$ = ecx

; 193  : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _a$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _b$[ebp+4]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR _c$[ebp+4]
	mov	DWORD PTR [ecx+20], eax
	mov	eax, DWORD PTR _d$[ebp]
	mov	DWORD PTR [ecx+24], eax
	mov	eax, DWORD PTR _d$[ebp+4]
	mov	DWORD PTR [ecx+28], eax
	mov	eax, ecx
	pop	ebp
	ret	32					; 00000020H
??0?$tvec4@_J$01@glm@@QAE@_J000@Z ENDP			; glm::tvec4<__int64,2>::tvec4<__int64,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_J$01@glm@@QAE@_J@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 8
??0?$tvec4@_J$01@glm@@QAE@_J@Z PROC			; glm::tvec4<__int64,2>::tvec4<__int64,2>, COMDAT
; _this$ = ecx

; 188  : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _scalar$[ebp+4]
	mov	edx, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+12], eax
	mov	DWORD PTR [ecx+20], eax
	mov	DWORD PTR [ecx+28], eax
	mov	eax, ecx
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+8], edx
	mov	DWORD PTR [ecx+16], edx
	mov	DWORD PTR [ecx+24], edx
	pop	ebp
	ret	8
??0?$tvec4@_J$01@glm@@QAE@_J@Z ENDP			; glm::tvec4<__int64,2>::tvec4<__int64,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_J$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec4@_J$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec4<__int64,2>::tvec4<__int64,2>, COMDAT
; _this$ = ecx

; 183  : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec4@_J$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec4<__int64,2>::tvec4<__int64,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec4@_J$01@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec4@_J$01@glm@@QAE@ABU01@@Z PROC			; glm::tvec4<__int64,2>::tvec4<__int64,2>, COMDAT
; _this$ = ecx

; 120  : template struct tvec4<int64, lowp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx+20], eax
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx+20], eax
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx+20], eax
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR [ecx+24], eax
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR [ecx+28], eax
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR [ecx+24], eax
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR [ecx+28], eax
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR [ecx+24], eax
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR [ecx+28], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec4@_J$01@glm@@QAE@ABU01@@Z ENDP			; glm::tvec4<__int64,2>::tvec4<__int64,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_J$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec4@_J$01@glm@@QAE@XZ PROC			; glm::tvec4<__int64,2>::tvec4<__int64,2>, COMDAT
; _this$ = ecx

; 163  : 		{}

	xor	eax, eax
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR [ecx+12], eax
	mov	DWORD PTR [ecx+16], eax
	mov	DWORD PTR [ecx+20], eax
	mov	DWORD PTR [ecx+24], eax
	mov	DWORD PTR [ecx+28], eax
	mov	eax, ecx
	ret	0
??0?$tvec4@_J$01@glm@@QAE@XZ ENDP			; glm::tvec4<__int64,2>::tvec4<__int64,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@_J$01@glm@@QBEAB_JH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@_J$01@glm@@QBEAB_JH@Z PROC			; glm::tvec4<__int64,2>::operator[], COMDAT
; _this$ = ecx

; 336  : 	{

	push	ebp
	mov	ebp, esp

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 339  : 	}

	pop	ebp
	ret	4
??A?$tvec4@_J$01@glm@@QBEAB_JH@Z ENDP			; glm::tvec4<__int64,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@_J$01@glm@@QAEAA_JH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@_J$01@glm@@QAEAA_JH@Z PROC			; glm::tvec4<__int64,2>::operator[], COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 332  : 	}

	pop	ebp
	ret	4
??A?$tvec4@_J$01@glm@@QAEAA_JH@Z ENDP			; glm::tvec4<__int64,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@_J$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@_J$01@glm@@SAHXZ PROC			; glm::tvec4<__int64,2>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	push	4
	pop	eax
	ret	0
?length@?$tvec4@_J$01@glm@@SAHXZ ENDP			; glm::tvec4<__int64,2>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@H$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec4@H$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<int,2>::operator--, COMDAT
; _this$ = ecx

; 482  : 	{

	push	ebp
	mov	ebp, esp

; 483  : 		tvec4<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	mov	esi, ecx
	mov	edi, eax
	movsd
	movsd
	movsd
	movsd

; 484  : 		--*this;

	dec	DWORD PTR [ecx]
	dec	DWORD PTR [ecx+4]
	dec	DWORD PTR [ecx+8]
	dec	DWORD PTR [ecx+12]
	pop	edi
	pop	esi

; 485  : 		return Result;
; 486  : 	}

	pop	ebp
	ret	8
??F?$tvec4@H$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<int,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@H$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec4@H$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<int,2>::operator++, COMDAT
; _this$ = ecx

; 474  : 	{

	push	ebp
	mov	ebp, esp

; 475  : 		tvec4<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	mov	esi, ecx
	mov	edi, eax
	movsd
	movsd
	movsd
	movsd

; 476  : 		++*this;

	inc	DWORD PTR [ecx]
	inc	DWORD PTR [ecx+4]
	inc	DWORD PTR [ecx+8]
	inc	DWORD PTR [ecx+12]
	pop	edi
	pop	esi

; 477  : 		return Result;
; 478  : 	}

	pop	ebp
	ret	8
??E?$tvec4@H$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<int,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@H$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec4@H$01@glm@@QAEAAU01@XZ PROC			; glm::tvec4<int,2>::operator--, COMDAT
; _this$ = ecx

; 465  : 		--this->x;

	dec	DWORD PTR [ecx]

; 466  : 		--this->y;
; 467  : 		--this->z;
; 468  : 		--this->w;
; 469  : 		return *this;

	mov	eax, ecx
	dec	DWORD PTR [ecx+4]
	dec	DWORD PTR [ecx+8]
	dec	DWORD PTR [ecx+12]

; 470  : 	}

	ret	0
??F?$tvec4@H$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<int,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@H$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec4@H$01@glm@@QAEAAU01@XZ PROC			; glm::tvec4<int,2>::operator++, COMDAT
; _this$ = ecx

; 455  : 		++this->x;

	inc	DWORD PTR [ecx]

; 456  : 		++this->y;
; 457  : 		++this->z;
; 458  : 		++this->w;
; 459  : 		return *this;

	mov	eax, ecx
	inc	DWORD PTR [ecx+4]
	inc	DWORD PTR [ecx+8]
	inc	DWORD PTR [ecx+12]

; 460  : 	}

	ret	0
??E?$tvec4@H$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<int,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec4@H$01@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec4@H$01@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec4<int,2>::operator=, COMDAT
; _this$ = ecx

; 119  : template struct tvec4<int32, lowp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	mov	edi, ecx
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tvec4@H$01@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec4<int,2>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@H$01@glm@@QAE@HHHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
_d$ = 20						; size = 4
??0?$tvec4@H$01@glm@@QAE@HHHH@Z PROC			; glm::tvec4<int,2>::tvec4<int,2>, COMDAT
; _this$ = ecx

; 193  : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _d$[ebp]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, ecx
	pop	ebp
	ret	16					; 00000010H
??0?$tvec4@H$01@glm@@QAE@HHHH@Z ENDP			; glm::tvec4<int,2>::tvec4<int,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@H$01@glm@@QAE@H@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 4
??0?$tvec4@H$01@glm@@QAE@H@Z PROC			; glm::tvec4<int,2>::tvec4<int,2>, COMDAT
; _this$ = ecx

; 188  : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR [ecx+12], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec4@H$01@glm@@QAE@H@Z ENDP			; glm::tvec4<int,2>::tvec4<int,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@H$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec4@H$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec4<int,2>::tvec4<int,2>, COMDAT
; _this$ = ecx

; 183  : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec4@H$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec4<int,2>::tvec4<int,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec4@H$01@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec4@H$01@glm@@QAE@ABU01@@Z PROC			; glm::tvec4<int,2>::tvec4<int,2>, COMDAT
; _this$ = ecx

; 119  : template struct tvec4<int32, lowp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec4@H$01@glm@@QAE@ABU01@@Z ENDP			; glm::tvec4<int,2>::tvec4<int,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@H$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec4@H$01@glm@@QAE@XZ PROC			; glm::tvec4<int,2>::tvec4<int,2>, COMDAT
; _this$ = ecx

; 163  : 		{}

	xor	eax, eax
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR [ecx+12], eax
	mov	eax, ecx
	ret	0
??0?$tvec4@H$01@glm@@QAE@XZ ENDP			; glm::tvec4<int,2>::tvec4<int,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@H$01@glm@@QBEABHH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@H$01@glm@@QBEABHH@Z PROC			; glm::tvec4<int,2>::operator[], COMDAT
; _this$ = ecx

; 336  : 	{

	push	ebp
	mov	ebp, esp

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 339  : 	}

	pop	ebp
	ret	4
??A?$tvec4@H$01@glm@@QBEABHH@Z ENDP			; glm::tvec4<int,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@H$01@glm@@QAEAAHH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@H$01@glm@@QAEAAHH@Z PROC			; glm::tvec4<int,2>::operator[], COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 332  : 	}

	pop	ebp
	ret	4
??A?$tvec4@H$01@glm@@QAEAAHH@Z ENDP			; glm::tvec4<int,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@H$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@H$01@glm@@SAHXZ PROC			; glm::tvec4<int,2>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	push	4
	pop	eax
	ret	0
?length@?$tvec4@H$01@glm@@SAHXZ ENDP			; glm::tvec4<int,2>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@F$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec4@F$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<short,2>::operator--, COMDAT
; _this$ = ecx

; 482  : 	{

	push	ebp
	mov	ebp, esp

; 483  : 		tvec4<T, P> Result(*this);

	mov	eax, DWORD PTR [ecx]

; 484  : 		--*this;

	dec	WORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]
	dec	WORD PTR [ecx+2]
	dec	WORD PTR [ecx+4]
	dec	WORD PTR [ecx+6]
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [esi], eax

; 485  : 		return Result;

	mov	eax, esi
	mov	DWORD PTR [esi+4], edx
	pop	esi

; 486  : 	}

	pop	ebp
	ret	8
??F?$tvec4@F$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<short,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@F$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec4@F$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<short,2>::operator++, COMDAT
; _this$ = ecx

; 474  : 	{

	push	ebp
	mov	ebp, esp

; 475  : 		tvec4<T, P> Result(*this);

	mov	eax, DWORD PTR [ecx]

; 476  : 		++*this;

	inc	WORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]
	inc	WORD PTR [ecx+2]
	inc	WORD PTR [ecx+4]
	inc	WORD PTR [ecx+6]
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [esi], eax

; 477  : 		return Result;

	mov	eax, esi
	mov	DWORD PTR [esi+4], edx
	pop	esi

; 478  : 	}

	pop	ebp
	ret	8
??E?$tvec4@F$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<short,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@F$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec4@F$01@glm@@QAEAAU01@XZ PROC			; glm::tvec4<short,2>::operator--, COMDAT
; _this$ = ecx

; 465  : 		--this->x;

	dec	WORD PTR [ecx]

; 466  : 		--this->y;
; 467  : 		--this->z;
; 468  : 		--this->w;
; 469  : 		return *this;

	mov	eax, ecx
	dec	WORD PTR [ecx+2]
	dec	WORD PTR [ecx+4]
	dec	WORD PTR [ecx+6]

; 470  : 	}

	ret	0
??F?$tvec4@F$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<short,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@F$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec4@F$01@glm@@QAEAAU01@XZ PROC			; glm::tvec4<short,2>::operator++, COMDAT
; _this$ = ecx

; 455  : 		++this->x;

	inc	WORD PTR [ecx]

; 456  : 		++this->y;
; 457  : 		++this->z;
; 458  : 		++this->w;
; 459  : 		return *this;

	mov	eax, ecx
	inc	WORD PTR [ecx+2]
	inc	WORD PTR [ecx+4]
	inc	WORD PTR [ecx+6]

; 460  : 	}

	ret	0
??E?$tvec4@F$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<short,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec4@F$01@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec4@F$01@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec4<short,2>::operator=, COMDAT
; _this$ = ecx

; 118  : template struct tvec4<int16, lowp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??4?$tvec4@F$01@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec4<short,2>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@F$01@glm@@QAE@FFFF@Z
_TEXT	SEGMENT
_a$ = 8							; size = 2
_b$ = 12						; size = 2
_c$ = 16						; size = 2
_d$ = 20						; size = 2
??0?$tvec4@F$01@glm@@QAE@FFFF@Z PROC			; glm::tvec4<short,2>::tvec4<short,2>, COMDAT
; _this$ = ecx

; 193  : 	{}

	push	ebp
	mov	ebp, esp
	mov	ax, WORD PTR _a$[ebp]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR _b$[ebp]
	mov	WORD PTR [ecx+2], ax
	mov	ax, WORD PTR _c$[ebp]
	mov	WORD PTR [ecx+4], ax
	mov	ax, WORD PTR _d$[ebp]
	mov	WORD PTR [ecx+6], ax
	mov	eax, ecx
	pop	ebp
	ret	16					; 00000010H
??0?$tvec4@F$01@glm@@QAE@FFFF@Z ENDP			; glm::tvec4<short,2>::tvec4<short,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@F$01@glm@@QAE@F@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 2
??0?$tvec4@F$01@glm@@QAE@F@Z PROC			; glm::tvec4<short,2>::tvec4<short,2>, COMDAT
; _this$ = ecx

; 188  : 	{}

	push	ebp
	mov	ebp, esp
	mov	ax, WORD PTR _scalar$[ebp]
	mov	WORD PTR [ecx], ax
	mov	WORD PTR [ecx+2], ax
	mov	WORD PTR [ecx+4], ax
	mov	WORD PTR [ecx+6], ax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec4@F$01@glm@@QAE@F@Z ENDP			; glm::tvec4<short,2>::tvec4<short,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@F$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec4@F$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec4<short,2>::tvec4<short,2>, COMDAT
; _this$ = ecx

; 183  : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec4@F$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec4<short,2>::tvec4<short,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec4@F$01@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec4@F$01@glm@@QAE@ABU01@@Z PROC			; glm::tvec4<short,2>::tvec4<short,2>, COMDAT
; _this$ = ecx

; 118  : template struct tvec4<int16, lowp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR [edx+2]
	mov	WORD PTR [ecx+2], ax
	mov	ax, WORD PTR [edx+2]
	mov	WORD PTR [ecx+2], ax
	mov	ax, WORD PTR [edx+2]
	mov	WORD PTR [ecx+2], ax
	mov	ax, WORD PTR [edx+4]
	mov	WORD PTR [ecx+4], ax
	mov	ax, WORD PTR [edx+4]
	mov	WORD PTR [ecx+4], ax
	mov	ax, WORD PTR [edx+4]
	mov	WORD PTR [ecx+4], ax
	mov	ax, WORD PTR [edx+6]
	mov	WORD PTR [ecx+6], ax
	mov	ax, WORD PTR [edx+6]
	mov	WORD PTR [ecx+6], ax
	mov	ax, WORD PTR [edx+6]
	mov	WORD PTR [ecx+6], ax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec4@F$01@glm@@QAE@ABU01@@Z ENDP			; glm::tvec4<short,2>::tvec4<short,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@F$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec4@F$01@glm@@QAE@XZ PROC			; glm::tvec4<short,2>::tvec4<short,2>, COMDAT
; _this$ = ecx

; 163  : 		{}

	xor	eax, eax
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	ret	0
??0?$tvec4@F$01@glm@@QAE@XZ ENDP			; glm::tvec4<short,2>::tvec4<short,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@F$01@glm@@QBEABFH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@F$01@glm@@QBEABFH@Z PROC			; glm::tvec4<short,2>::operator[], COMDAT
; _this$ = ecx

; 336  : 	{

	push	ebp
	mov	ebp, esp

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 339  : 	}

	pop	ebp
	ret	4
??A?$tvec4@F$01@glm@@QBEABFH@Z ENDP			; glm::tvec4<short,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@F$01@glm@@QAEAAFH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@F$01@glm@@QAEAAFH@Z PROC			; glm::tvec4<short,2>::operator[], COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 332  : 	}

	pop	ebp
	ret	4
??A?$tvec4@F$01@glm@@QAEAAFH@Z ENDP			; glm::tvec4<short,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@F$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@F$01@glm@@SAHXZ PROC			; glm::tvec4<short,2>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	push	4
	pop	eax
	ret	0
?length@?$tvec4@F$01@glm@@SAHXZ ENDP			; glm::tvec4<short,2>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@C$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec4@C$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<signed char,2>::operator--, COMDAT
; _this$ = ecx

; 482  : 	{

	push	ebp
	mov	ebp, esp

; 483  : 		tvec4<T, P> Result(*this);

	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 484  : 		--*this;

	dec	BYTE PTR [ecx]
	dec	BYTE PTR [ecx+1]
	dec	BYTE PTR [ecx+2]
	dec	BYTE PTR [ecx+3]
	mov	DWORD PTR [eax], edx

; 485  : 		return Result;
; 486  : 	}

	pop	ebp
	ret	8
??F?$tvec4@C$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<signed char,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@C$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec4@C$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<signed char,2>::operator++, COMDAT
; _this$ = ecx

; 474  : 	{

	push	ebp
	mov	ebp, esp

; 475  : 		tvec4<T, P> Result(*this);

	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 476  : 		++*this;

	inc	BYTE PTR [ecx]
	inc	BYTE PTR [ecx+1]
	inc	BYTE PTR [ecx+2]
	inc	BYTE PTR [ecx+3]
	mov	DWORD PTR [eax], edx

; 477  : 		return Result;
; 478  : 	}

	pop	ebp
	ret	8
??E?$tvec4@C$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<signed char,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@C$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec4@C$01@glm@@QAEAAU01@XZ PROC			; glm::tvec4<signed char,2>::operator--, COMDAT
; _this$ = ecx

; 465  : 		--this->x;

	dec	BYTE PTR [ecx]

; 466  : 		--this->y;
; 467  : 		--this->z;
; 468  : 		--this->w;
; 469  : 		return *this;

	mov	eax, ecx
	dec	BYTE PTR [ecx+1]
	dec	BYTE PTR [ecx+2]
	dec	BYTE PTR [ecx+3]

; 470  : 	}

	ret	0
??F?$tvec4@C$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<signed char,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@C$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec4@C$01@glm@@QAEAAU01@XZ PROC			; glm::tvec4<signed char,2>::operator++, COMDAT
; _this$ = ecx

; 455  : 		++this->x;

	inc	BYTE PTR [ecx]

; 456  : 		++this->y;
; 457  : 		++this->z;
; 458  : 		++this->w;
; 459  : 		return *this;

	mov	eax, ecx
	inc	BYTE PTR [ecx+1]
	inc	BYTE PTR [ecx+2]
	inc	BYTE PTR [ecx+3]

; 460  : 	}

	ret	0
??E?$tvec4@C$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<signed char,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec4@C$01@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec4@C$01@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec4<signed char,2>::operator=, COMDAT
; _this$ = ecx

; 117  : template struct tvec4<int8, lowp>;

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??4?$tvec4@C$01@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec4<signed char,2>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@C$01@glm@@QAE@CCCC@Z
_TEXT	SEGMENT
_a$ = 8							; size = 1
_b$ = 12						; size = 1
_c$ = 16						; size = 1
_d$ = 20						; size = 1
??0?$tvec4@C$01@glm@@QAE@CCCC@Z PROC			; glm::tvec4<signed char,2>::tvec4<signed char,2>, COMDAT
; _this$ = ecx

; 193  : 	{}

	push	ebp
	mov	ebp, esp
	mov	al, BYTE PTR _a$[ebp]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR _b$[ebp]
	mov	BYTE PTR [ecx+1], al
	mov	al, BYTE PTR _c$[ebp]
	mov	BYTE PTR [ecx+2], al
	mov	al, BYTE PTR _d$[ebp]
	mov	BYTE PTR [ecx+3], al
	mov	eax, ecx
	pop	ebp
	ret	16					; 00000010H
??0?$tvec4@C$01@glm@@QAE@CCCC@Z ENDP			; glm::tvec4<signed char,2>::tvec4<signed char,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@C$01@glm@@QAE@C@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 1
??0?$tvec4@C$01@glm@@QAE@C@Z PROC			; glm::tvec4<signed char,2>::tvec4<signed char,2>, COMDAT
; _this$ = ecx

; 188  : 	{}

	push	ebp
	mov	ebp, esp
	mov	al, BYTE PTR _scalar$[ebp]
	mov	BYTE PTR [ecx], al
	mov	BYTE PTR [ecx+1], al
	mov	BYTE PTR [ecx+2], al
	mov	BYTE PTR [ecx+3], al
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec4@C$01@glm@@QAE@C@Z ENDP			; glm::tvec4<signed char,2>::tvec4<signed char,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@C$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec4@C$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec4<signed char,2>::tvec4<signed char,2>, COMDAT
; _this$ = ecx

; 183  : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec4@C$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec4<signed char,2>::tvec4<signed char,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec4@C$01@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec4@C$01@glm@@QAE@ABU01@@Z PROC			; glm::tvec4<signed char,2>::tvec4<signed char,2>, COMDAT
; _this$ = ecx

; 117  : template struct tvec4<int8, lowp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR [edx+1]
	mov	BYTE PTR [ecx+1], al
	mov	al, BYTE PTR [edx+1]
	mov	BYTE PTR [ecx+1], al
	mov	al, BYTE PTR [edx+1]
	mov	BYTE PTR [ecx+1], al
	mov	al, BYTE PTR [edx+2]
	mov	BYTE PTR [ecx+2], al
	mov	al, BYTE PTR [edx+2]
	mov	BYTE PTR [ecx+2], al
	mov	al, BYTE PTR [edx+2]
	mov	BYTE PTR [ecx+2], al
	mov	al, BYTE PTR [edx+3]
	mov	BYTE PTR [ecx+3], al
	mov	al, BYTE PTR [edx+3]
	mov	BYTE PTR [ecx+3], al
	mov	al, BYTE PTR [edx+3]
	mov	BYTE PTR [ecx+3], al
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec4@C$01@glm@@QAE@ABU01@@Z ENDP			; glm::tvec4<signed char,2>::tvec4<signed char,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@C$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec4@C$01@glm@@QAE@XZ PROC			; glm::tvec4<signed char,2>::tvec4<signed char,2>, COMDAT
; _this$ = ecx

; 163  : 		{}

	xor	eax, eax
	mov	DWORD PTR [ecx], eax
	mov	eax, ecx
	ret	0
??0?$tvec4@C$01@glm@@QAE@XZ ENDP			; glm::tvec4<signed char,2>::tvec4<signed char,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@C$01@glm@@QBEABCH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@C$01@glm@@QBEABCH@Z PROC			; glm::tvec4<signed char,2>::operator[], COMDAT
; _this$ = ecx

; 336  : 	{

	push	ebp
	mov	ebp, esp

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 339  : 	}

	pop	ebp
	ret	4
??A?$tvec4@C$01@glm@@QBEABCH@Z ENDP			; glm::tvec4<signed char,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@C$01@glm@@QAEAACH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@C$01@glm@@QAEAACH@Z PROC			; glm::tvec4<signed char,2>::operator[], COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 332  : 	}

	pop	ebp
	ret	4
??A?$tvec4@C$01@glm@@QAEAACH@Z ENDP			; glm::tvec4<signed char,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@C$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@C$01@glm@@SAHXZ PROC			; glm::tvec4<signed char,2>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	push	4
	pop	eax
	ret	0
?length@?$tvec4@C$01@glm@@SAHXZ ENDP			; glm::tvec4<signed char,2>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@_K$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec4@_K$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<unsigned __int64,2>::operator--, COMDAT
; _this$ = ecx

; 482  : 	{

	push	ebp
	mov	ebp, esp

; 483  : 		tvec4<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, ecx
	push	esi
	push	edi
	push	8
	pop	ecx
	mov	esi, edx
	mov	edi, eax
	rep movsd

; 484  : 		--*this;

	or	ecx, -1
	add	DWORD PTR [edx], ecx
	pop	edi
	adc	DWORD PTR [edx+4], ecx
	add	DWORD PTR [edx+8], ecx
	pop	esi
	adc	DWORD PTR [edx+12], ecx
	add	DWORD PTR [edx+16], ecx
	adc	DWORD PTR [edx+20], ecx
	add	DWORD PTR [edx+24], ecx
	adc	DWORD PTR [edx+28], ecx

; 485  : 		return Result;
; 486  : 	}

	pop	ebp
	ret	8
??F?$tvec4@_K$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<unsigned __int64,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@_K$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec4@_K$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<unsigned __int64,2>::operator++, COMDAT
; _this$ = ecx

; 474  : 	{

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi

; 475  : 		tvec4<T, P> Result(*this);

	mov	edi, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, ecx
	push	8
	pop	ecx
	mov	esi, eax
	rep movsd

; 476  : 		++*this;

	mov	ecx, eax
	call	??E?$tvec4@_K$01@glm@@QAEAAU01@XZ	; glm::tvec4<unsigned __int64,2>::operator++

; 477  : 		return Result;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi

; 478  : 	}

	pop	ebp
	ret	8
??E?$tvec4@_K$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<unsigned __int64,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@_K$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec4@_K$01@glm@@QAEAAU01@XZ PROC			; glm::tvec4<unsigned __int64,2>::operator--, COMDAT
; _this$ = ecx

; 465  : 		--this->x;

	or	eax, -1
	add	DWORD PTR [ecx], eax
	adc	DWORD PTR [ecx+4], eax

; 466  : 		--this->y;

	add	DWORD PTR [ecx+8], eax
	adc	DWORD PTR [ecx+12], eax

; 467  : 		--this->z;

	add	DWORD PTR [ecx+16], eax
	adc	DWORD PTR [ecx+20], eax

; 468  : 		--this->w;

	add	DWORD PTR [ecx+24], eax
	adc	DWORD PTR [ecx+28], eax

; 469  : 		return *this;

	mov	eax, ecx

; 470  : 	}

	ret	0
??F?$tvec4@_K$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<unsigned __int64,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@_K$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec4@_K$01@glm@@QAEAAU01@XZ PROC			; glm::tvec4<unsigned __int64,2>::operator++, COMDAT
; _this$ = ecx

; 455  : 		++this->x;

	xor	edx, edx
	inc	edx
	add	DWORD PTR [ecx], edx
	push	0
	pop	eax
	adc	DWORD PTR [ecx+4], eax

; 456  : 		++this->y;

	add	DWORD PTR [ecx+8], edx
	adc	DWORD PTR [ecx+12], eax

; 457  : 		++this->z;

	add	DWORD PTR [ecx+16], edx
	adc	DWORD PTR [ecx+20], eax

; 458  : 		++this->w;

	add	DWORD PTR [ecx+24], edx
	adc	DWORD PTR [ecx+28], eax

; 459  : 		return *this;

	mov	eax, ecx

; 460  : 	}

	ret	0
??E?$tvec4@_K$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<unsigned __int64,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec4@_K$01@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec4@_K$01@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec4<unsigned __int64,2>::operator=, COMDAT
; _this$ = ecx

; 116  : template struct tvec4<uint64, lowp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	8
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tvec4@_K$01@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec4<unsigned __int64,2>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_K$01@glm@@QAE@_K000@Z
_TEXT	SEGMENT
_a$ = 8							; size = 8
_b$ = 16						; size = 8
_c$ = 24						; size = 8
_d$ = 32						; size = 8
??0?$tvec4@_K$01@glm@@QAE@_K000@Z PROC			; glm::tvec4<unsigned __int64,2>::tvec4<unsigned __int64,2>, COMDAT
; _this$ = ecx

; 193  : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _a$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _b$[ebp+4]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR _c$[ebp+4]
	mov	DWORD PTR [ecx+20], eax
	mov	eax, DWORD PTR _d$[ebp]
	mov	DWORD PTR [ecx+24], eax
	mov	eax, DWORD PTR _d$[ebp+4]
	mov	DWORD PTR [ecx+28], eax
	mov	eax, ecx
	pop	ebp
	ret	32					; 00000020H
??0?$tvec4@_K$01@glm@@QAE@_K000@Z ENDP			; glm::tvec4<unsigned __int64,2>::tvec4<unsigned __int64,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_K$01@glm@@QAE@_K@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 8
??0?$tvec4@_K$01@glm@@QAE@_K@Z PROC			; glm::tvec4<unsigned __int64,2>::tvec4<unsigned __int64,2>, COMDAT
; _this$ = ecx

; 188  : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _scalar$[ebp+4]
	mov	edx, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+12], eax
	mov	DWORD PTR [ecx+20], eax
	mov	DWORD PTR [ecx+28], eax
	mov	eax, ecx
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+8], edx
	mov	DWORD PTR [ecx+16], edx
	mov	DWORD PTR [ecx+24], edx
	pop	ebp
	ret	8
??0?$tvec4@_K$01@glm@@QAE@_K@Z ENDP			; glm::tvec4<unsigned __int64,2>::tvec4<unsigned __int64,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_K$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec4@_K$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec4<unsigned __int64,2>::tvec4<unsigned __int64,2>, COMDAT
; _this$ = ecx

; 183  : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec4@_K$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec4<unsigned __int64,2>::tvec4<unsigned __int64,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec4@_K$01@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec4@_K$01@glm@@QAE@ABU01@@Z PROC			; glm::tvec4<unsigned __int64,2>::tvec4<unsigned __int64,2>, COMDAT
; _this$ = ecx

; 116  : template struct tvec4<uint64, lowp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx+20], eax
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx+20], eax
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx+20], eax
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR [ecx+24], eax
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR [ecx+28], eax
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR [ecx+24], eax
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR [ecx+28], eax
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR [ecx+24], eax
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR [ecx+28], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec4@_K$01@glm@@QAE@ABU01@@Z ENDP			; glm::tvec4<unsigned __int64,2>::tvec4<unsigned __int64,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_K$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec4@_K$01@glm@@QAE@XZ PROC			; glm::tvec4<unsigned __int64,2>::tvec4<unsigned __int64,2>, COMDAT
; _this$ = ecx

; 163  : 		{}

	xor	eax, eax
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR [ecx+12], eax
	mov	DWORD PTR [ecx+16], eax
	mov	DWORD PTR [ecx+20], eax
	mov	DWORD PTR [ecx+24], eax
	mov	DWORD PTR [ecx+28], eax
	mov	eax, ecx
	ret	0
??0?$tvec4@_K$01@glm@@QAE@XZ ENDP			; glm::tvec4<unsigned __int64,2>::tvec4<unsigned __int64,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@_K$01@glm@@QBEAB_KH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@_K$01@glm@@QBEAB_KH@Z PROC			; glm::tvec4<unsigned __int64,2>::operator[], COMDAT
; _this$ = ecx

; 336  : 	{

	push	ebp
	mov	ebp, esp

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 339  : 	}

	pop	ebp
	ret	4
??A?$tvec4@_K$01@glm@@QBEAB_KH@Z ENDP			; glm::tvec4<unsigned __int64,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@_K$01@glm@@QAEAA_KH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@_K$01@glm@@QAEAA_KH@Z PROC			; glm::tvec4<unsigned __int64,2>::operator[], COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 332  : 	}

	pop	ebp
	ret	4
??A?$tvec4@_K$01@glm@@QAEAA_KH@Z ENDP			; glm::tvec4<unsigned __int64,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@_K$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@_K$01@glm@@SAHXZ PROC			; glm::tvec4<unsigned __int64,2>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	push	4
	pop	eax
	ret	0
?length@?$tvec4@_K$01@glm@@SAHXZ ENDP			; glm::tvec4<unsigned __int64,2>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@I$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec4@I$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<unsigned int,2>::operator--, COMDAT
; _this$ = ecx

; 482  : 	{

	push	ebp
	mov	ebp, esp

; 483  : 		tvec4<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	mov	esi, ecx
	mov	edi, eax
	movsd
	movsd
	movsd
	movsd

; 484  : 		--*this;

	dec	DWORD PTR [ecx]
	dec	DWORD PTR [ecx+4]
	dec	DWORD PTR [ecx+8]
	dec	DWORD PTR [ecx+12]
	pop	edi
	pop	esi

; 485  : 		return Result;
; 486  : 	}

	pop	ebp
	ret	8
??F?$tvec4@I$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<unsigned int,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@I$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec4@I$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<unsigned int,2>::operator++, COMDAT
; _this$ = ecx

; 474  : 	{

	push	ebp
	mov	ebp, esp

; 475  : 		tvec4<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	mov	esi, ecx
	mov	edi, eax
	movsd
	movsd
	movsd
	movsd

; 476  : 		++*this;

	inc	DWORD PTR [ecx]
	inc	DWORD PTR [ecx+4]
	inc	DWORD PTR [ecx+8]
	inc	DWORD PTR [ecx+12]
	pop	edi
	pop	esi

; 477  : 		return Result;
; 478  : 	}

	pop	ebp
	ret	8
??E?$tvec4@I$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<unsigned int,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@I$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec4@I$01@glm@@QAEAAU01@XZ PROC			; glm::tvec4<unsigned int,2>::operator--, COMDAT
; _this$ = ecx

; 465  : 		--this->x;

	dec	DWORD PTR [ecx]

; 466  : 		--this->y;
; 467  : 		--this->z;
; 468  : 		--this->w;
; 469  : 		return *this;

	mov	eax, ecx
	dec	DWORD PTR [ecx+4]
	dec	DWORD PTR [ecx+8]
	dec	DWORD PTR [ecx+12]

; 470  : 	}

	ret	0
??F?$tvec4@I$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<unsigned int,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@I$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec4@I$01@glm@@QAEAAU01@XZ PROC			; glm::tvec4<unsigned int,2>::operator++, COMDAT
; _this$ = ecx

; 455  : 		++this->x;

	inc	DWORD PTR [ecx]

; 456  : 		++this->y;
; 457  : 		++this->z;
; 458  : 		++this->w;
; 459  : 		return *this;

	mov	eax, ecx
	inc	DWORD PTR [ecx+4]
	inc	DWORD PTR [ecx+8]
	inc	DWORD PTR [ecx+12]

; 460  : 	}

	ret	0
??E?$tvec4@I$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<unsigned int,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec4@I$01@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec4@I$01@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec4<unsigned int,2>::operator=, COMDAT
; _this$ = ecx

; 115  : template struct tvec4<uint32, lowp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	mov	edi, ecx
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tvec4@I$01@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec4<unsigned int,2>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@I$01@glm@@QAE@IIII@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
_d$ = 20						; size = 4
??0?$tvec4@I$01@glm@@QAE@IIII@Z PROC			; glm::tvec4<unsigned int,2>::tvec4<unsigned int,2>, COMDAT
; _this$ = ecx

; 193  : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _d$[ebp]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, ecx
	pop	ebp
	ret	16					; 00000010H
??0?$tvec4@I$01@glm@@QAE@IIII@Z ENDP			; glm::tvec4<unsigned int,2>::tvec4<unsigned int,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@I$01@glm@@QAE@I@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 4
??0?$tvec4@I$01@glm@@QAE@I@Z PROC			; glm::tvec4<unsigned int,2>::tvec4<unsigned int,2>, COMDAT
; _this$ = ecx

; 188  : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR [ecx+12], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec4@I$01@glm@@QAE@I@Z ENDP			; glm::tvec4<unsigned int,2>::tvec4<unsigned int,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@I$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec4@I$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec4<unsigned int,2>::tvec4<unsigned int,2>, COMDAT
; _this$ = ecx

; 183  : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec4@I$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec4<unsigned int,2>::tvec4<unsigned int,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec4@I$01@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec4@I$01@glm@@QAE@ABU01@@Z PROC			; glm::tvec4<unsigned int,2>::tvec4<unsigned int,2>, COMDAT
; _this$ = ecx

; 115  : template struct tvec4<uint32, lowp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec4@I$01@glm@@QAE@ABU01@@Z ENDP			; glm::tvec4<unsigned int,2>::tvec4<unsigned int,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@I$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec4@I$01@glm@@QAE@XZ PROC			; glm::tvec4<unsigned int,2>::tvec4<unsigned int,2>, COMDAT
; _this$ = ecx

; 163  : 		{}

	xor	eax, eax
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR [ecx+12], eax
	mov	eax, ecx
	ret	0
??0?$tvec4@I$01@glm@@QAE@XZ ENDP			; glm::tvec4<unsigned int,2>::tvec4<unsigned int,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@I$01@glm@@QBEABIH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@I$01@glm@@QBEABIH@Z PROC			; glm::tvec4<unsigned int,2>::operator[], COMDAT
; _this$ = ecx

; 336  : 	{

	push	ebp
	mov	ebp, esp

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 339  : 	}

	pop	ebp
	ret	4
??A?$tvec4@I$01@glm@@QBEABIH@Z ENDP			; glm::tvec4<unsigned int,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@I$01@glm@@QAEAAIH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@I$01@glm@@QAEAAIH@Z PROC			; glm::tvec4<unsigned int,2>::operator[], COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 332  : 	}

	pop	ebp
	ret	4
??A?$tvec4@I$01@glm@@QAEAAIH@Z ENDP			; glm::tvec4<unsigned int,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@I$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@I$01@glm@@SAHXZ PROC			; glm::tvec4<unsigned int,2>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	push	4
	pop	eax
	ret	0
?length@?$tvec4@I$01@glm@@SAHXZ ENDP			; glm::tvec4<unsigned int,2>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@G$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec4@G$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<unsigned short,2>::operator--, COMDAT
; _this$ = ecx

; 482  : 	{

	push	ebp
	mov	ebp, esp

; 483  : 		tvec4<T, P> Result(*this);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax

; 484  : 		--*this;

	mov	eax, 65535				; 0000ffffH
	add	WORD PTR [ecx], ax
	add	WORD PTR [ecx+2], ax
	add	WORD PTR [ecx+4], ax
	add	WORD PTR [ecx+6], ax

; 485  : 		return Result;

	mov	eax, edx

; 486  : 	}

	pop	ebp
	ret	8
??F?$tvec4@G$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<unsigned short,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@G$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec4@G$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<unsigned short,2>::operator++, COMDAT
; _this$ = ecx

; 474  : 	{

	push	ebp
	mov	ebp, esp

; 475  : 		tvec4<T, P> Result(*this);

	mov	eax, DWORD PTR [ecx]

; 476  : 		++*this;

	inc	WORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]
	inc	WORD PTR [ecx+2]
	inc	WORD PTR [ecx+4]
	inc	WORD PTR [ecx+6]
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [esi], eax

; 477  : 		return Result;

	mov	eax, esi
	mov	DWORD PTR [esi+4], edx
	pop	esi

; 478  : 	}

	pop	ebp
	ret	8
??E?$tvec4@G$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<unsigned short,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@G$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec4@G$01@glm@@QAEAAU01@XZ PROC			; glm::tvec4<unsigned short,2>::operator--, COMDAT
; _this$ = ecx

; 465  : 		--this->x;

	mov	eax, 65535				; 0000ffffH
	add	WORD PTR [ecx], ax

; 466  : 		--this->y;

	add	WORD PTR [ecx+2], ax

; 467  : 		--this->z;

	add	WORD PTR [ecx+4], ax

; 468  : 		--this->w;

	add	WORD PTR [ecx+6], ax

; 469  : 		return *this;

	mov	eax, ecx

; 470  : 	}

	ret	0
??F?$tvec4@G$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<unsigned short,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@G$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec4@G$01@glm@@QAEAAU01@XZ PROC			; glm::tvec4<unsigned short,2>::operator++, COMDAT
; _this$ = ecx

; 455  : 		++this->x;

	inc	WORD PTR [ecx]

; 456  : 		++this->y;
; 457  : 		++this->z;
; 458  : 		++this->w;
; 459  : 		return *this;

	mov	eax, ecx
	inc	WORD PTR [ecx+2]
	inc	WORD PTR [ecx+4]
	inc	WORD PTR [ecx+6]

; 460  : 	}

	ret	0
??E?$tvec4@G$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<unsigned short,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec4@G$01@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec4@G$01@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec4<unsigned short,2>::operator=, COMDAT
; _this$ = ecx

; 114  : template struct tvec4<uint16, lowp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??4?$tvec4@G$01@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec4<unsigned short,2>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@G$01@glm@@QAE@GGGG@Z
_TEXT	SEGMENT
_a$ = 8							; size = 2
_b$ = 12						; size = 2
_c$ = 16						; size = 2
_d$ = 20						; size = 2
??0?$tvec4@G$01@glm@@QAE@GGGG@Z PROC			; glm::tvec4<unsigned short,2>::tvec4<unsigned short,2>, COMDAT
; _this$ = ecx

; 193  : 	{}

	push	ebp
	mov	ebp, esp
	mov	ax, WORD PTR _a$[ebp]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR _b$[ebp]
	mov	WORD PTR [ecx+2], ax
	mov	ax, WORD PTR _c$[ebp]
	mov	WORD PTR [ecx+4], ax
	mov	ax, WORD PTR _d$[ebp]
	mov	WORD PTR [ecx+6], ax
	mov	eax, ecx
	pop	ebp
	ret	16					; 00000010H
??0?$tvec4@G$01@glm@@QAE@GGGG@Z ENDP			; glm::tvec4<unsigned short,2>::tvec4<unsigned short,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@G$01@glm@@QAE@G@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 2
??0?$tvec4@G$01@glm@@QAE@G@Z PROC			; glm::tvec4<unsigned short,2>::tvec4<unsigned short,2>, COMDAT
; _this$ = ecx

; 188  : 	{}

	push	ebp
	mov	ebp, esp
	mov	ax, WORD PTR _scalar$[ebp]
	mov	WORD PTR [ecx], ax
	mov	WORD PTR [ecx+2], ax
	mov	WORD PTR [ecx+4], ax
	mov	WORD PTR [ecx+6], ax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec4@G$01@glm@@QAE@G@Z ENDP			; glm::tvec4<unsigned short,2>::tvec4<unsigned short,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@G$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec4@G$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec4<unsigned short,2>::tvec4<unsigned short,2>, COMDAT
; _this$ = ecx

; 183  : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec4@G$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec4<unsigned short,2>::tvec4<unsigned short,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec4@G$01@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec4@G$01@glm@@QAE@ABU01@@Z PROC			; glm::tvec4<unsigned short,2>::tvec4<unsigned short,2>, COMDAT
; _this$ = ecx

; 114  : template struct tvec4<uint16, lowp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR [edx+2]
	mov	WORD PTR [ecx+2], ax
	mov	ax, WORD PTR [edx+2]
	mov	WORD PTR [ecx+2], ax
	mov	ax, WORD PTR [edx+2]
	mov	WORD PTR [ecx+2], ax
	mov	ax, WORD PTR [edx+4]
	mov	WORD PTR [ecx+4], ax
	mov	ax, WORD PTR [edx+4]
	mov	WORD PTR [ecx+4], ax
	mov	ax, WORD PTR [edx+4]
	mov	WORD PTR [ecx+4], ax
	mov	ax, WORD PTR [edx+6]
	mov	WORD PTR [ecx+6], ax
	mov	ax, WORD PTR [edx+6]
	mov	WORD PTR [ecx+6], ax
	mov	ax, WORD PTR [edx+6]
	mov	WORD PTR [ecx+6], ax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec4@G$01@glm@@QAE@ABU01@@Z ENDP			; glm::tvec4<unsigned short,2>::tvec4<unsigned short,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@G$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec4@G$01@glm@@QAE@XZ PROC			; glm::tvec4<unsigned short,2>::tvec4<unsigned short,2>, COMDAT
; _this$ = ecx

; 163  : 		{}

	xor	eax, eax
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	ret	0
??0?$tvec4@G$01@glm@@QAE@XZ ENDP			; glm::tvec4<unsigned short,2>::tvec4<unsigned short,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@G$01@glm@@QBEABGH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@G$01@glm@@QBEABGH@Z PROC			; glm::tvec4<unsigned short,2>::operator[], COMDAT
; _this$ = ecx

; 336  : 	{

	push	ebp
	mov	ebp, esp

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 339  : 	}

	pop	ebp
	ret	4
??A?$tvec4@G$01@glm@@QBEABGH@Z ENDP			; glm::tvec4<unsigned short,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@G$01@glm@@QAEAAGH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@G$01@glm@@QAEAAGH@Z PROC			; glm::tvec4<unsigned short,2>::operator[], COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 332  : 	}

	pop	ebp
	ret	4
??A?$tvec4@G$01@glm@@QAEAAGH@Z ENDP			; glm::tvec4<unsigned short,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@G$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@G$01@glm@@SAHXZ PROC			; glm::tvec4<unsigned short,2>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	push	4
	pop	eax
	ret	0
?length@?$tvec4@G$01@glm@@SAHXZ ENDP			; glm::tvec4<unsigned short,2>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@E$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec4@E$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<unsigned char,2>::operator--, COMDAT
; _this$ = ecx

; 482  : 	{

	push	ebp
	mov	ebp, esp

; 483  : 		tvec4<T, P> Result(*this);

	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 484  : 		--*this;

	dec	BYTE PTR [ecx]
	dec	BYTE PTR [ecx+1]
	dec	BYTE PTR [ecx+2]
	dec	BYTE PTR [ecx+3]
	mov	DWORD PTR [eax], edx

; 485  : 		return Result;
; 486  : 	}

	pop	ebp
	ret	8
??F?$tvec4@E$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<unsigned char,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@E$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec4@E$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<unsigned char,2>::operator++, COMDAT
; _this$ = ecx

; 474  : 	{

	push	ebp
	mov	ebp, esp

; 475  : 		tvec4<T, P> Result(*this);

	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 476  : 		++*this;

	inc	BYTE PTR [ecx]
	inc	BYTE PTR [ecx+1]
	inc	BYTE PTR [ecx+2]
	inc	BYTE PTR [ecx+3]
	mov	DWORD PTR [eax], edx

; 477  : 		return Result;
; 478  : 	}

	pop	ebp
	ret	8
??E?$tvec4@E$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<unsigned char,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@E$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec4@E$01@glm@@QAEAAU01@XZ PROC			; glm::tvec4<unsigned char,2>::operator--, COMDAT
; _this$ = ecx

; 465  : 		--this->x;

	dec	BYTE PTR [ecx]

; 466  : 		--this->y;
; 467  : 		--this->z;
; 468  : 		--this->w;
; 469  : 		return *this;

	mov	eax, ecx
	dec	BYTE PTR [ecx+1]
	dec	BYTE PTR [ecx+2]
	dec	BYTE PTR [ecx+3]

; 470  : 	}

	ret	0
??F?$tvec4@E$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<unsigned char,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@E$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec4@E$01@glm@@QAEAAU01@XZ PROC			; glm::tvec4<unsigned char,2>::operator++, COMDAT
; _this$ = ecx

; 455  : 		++this->x;

	inc	BYTE PTR [ecx]

; 456  : 		++this->y;
; 457  : 		++this->z;
; 458  : 		++this->w;
; 459  : 		return *this;

	mov	eax, ecx
	inc	BYTE PTR [ecx+1]
	inc	BYTE PTR [ecx+2]
	inc	BYTE PTR [ecx+3]

; 460  : 	}

	ret	0
??E?$tvec4@E$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<unsigned char,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec4@E$01@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec4@E$01@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec4<unsigned char,2>::operator=, COMDAT
; _this$ = ecx

; 113  : template struct tvec4<uint8, lowp>;

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??4?$tvec4@E$01@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec4<unsigned char,2>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@E$01@glm@@QAE@EEEE@Z
_TEXT	SEGMENT
_a$ = 8							; size = 1
_b$ = 12						; size = 1
_c$ = 16						; size = 1
_d$ = 20						; size = 1
??0?$tvec4@E$01@glm@@QAE@EEEE@Z PROC			; glm::tvec4<unsigned char,2>::tvec4<unsigned char,2>, COMDAT
; _this$ = ecx

; 193  : 	{}

	push	ebp
	mov	ebp, esp
	mov	al, BYTE PTR _a$[ebp]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR _b$[ebp]
	mov	BYTE PTR [ecx+1], al
	mov	al, BYTE PTR _c$[ebp]
	mov	BYTE PTR [ecx+2], al
	mov	al, BYTE PTR _d$[ebp]
	mov	BYTE PTR [ecx+3], al
	mov	eax, ecx
	pop	ebp
	ret	16					; 00000010H
??0?$tvec4@E$01@glm@@QAE@EEEE@Z ENDP			; glm::tvec4<unsigned char,2>::tvec4<unsigned char,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@E$01@glm@@QAE@E@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 1
??0?$tvec4@E$01@glm@@QAE@E@Z PROC			; glm::tvec4<unsigned char,2>::tvec4<unsigned char,2>, COMDAT
; _this$ = ecx

; 188  : 	{}

	push	ebp
	mov	ebp, esp
	mov	al, BYTE PTR _scalar$[ebp]
	mov	BYTE PTR [ecx], al
	mov	BYTE PTR [ecx+1], al
	mov	BYTE PTR [ecx+2], al
	mov	BYTE PTR [ecx+3], al
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec4@E$01@glm@@QAE@E@Z ENDP			; glm::tvec4<unsigned char,2>::tvec4<unsigned char,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@E$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec4@E$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec4<unsigned char,2>::tvec4<unsigned char,2>, COMDAT
; _this$ = ecx

; 183  : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec4@E$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec4<unsigned char,2>::tvec4<unsigned char,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec4@E$01@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec4@E$01@glm@@QAE@ABU01@@Z PROC			; glm::tvec4<unsigned char,2>::tvec4<unsigned char,2>, COMDAT
; _this$ = ecx

; 113  : template struct tvec4<uint8, lowp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR [edx+1]
	mov	BYTE PTR [ecx+1], al
	mov	al, BYTE PTR [edx+1]
	mov	BYTE PTR [ecx+1], al
	mov	al, BYTE PTR [edx+1]
	mov	BYTE PTR [ecx+1], al
	mov	al, BYTE PTR [edx+2]
	mov	BYTE PTR [ecx+2], al
	mov	al, BYTE PTR [edx+2]
	mov	BYTE PTR [ecx+2], al
	mov	al, BYTE PTR [edx+2]
	mov	BYTE PTR [ecx+2], al
	mov	al, BYTE PTR [edx+3]
	mov	BYTE PTR [ecx+3], al
	mov	al, BYTE PTR [edx+3]
	mov	BYTE PTR [ecx+3], al
	mov	al, BYTE PTR [edx+3]
	mov	BYTE PTR [ecx+3], al
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec4@E$01@glm@@QAE@ABU01@@Z ENDP			; glm::tvec4<unsigned char,2>::tvec4<unsigned char,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@E$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec4@E$01@glm@@QAE@XZ PROC			; glm::tvec4<unsigned char,2>::tvec4<unsigned char,2>, COMDAT
; _this$ = ecx

; 163  : 		{}

	xor	eax, eax
	mov	DWORD PTR [ecx], eax
	mov	eax, ecx
	ret	0
??0?$tvec4@E$01@glm@@QAE@XZ ENDP			; glm::tvec4<unsigned char,2>::tvec4<unsigned char,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@E$01@glm@@QBEABEH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@E$01@glm@@QBEABEH@Z PROC			; glm::tvec4<unsigned char,2>::operator[], COMDAT
; _this$ = ecx

; 336  : 	{

	push	ebp
	mov	ebp, esp

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 339  : 	}

	pop	ebp
	ret	4
??A?$tvec4@E$01@glm@@QBEABEH@Z ENDP			; glm::tvec4<unsigned char,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@E$01@glm@@QAEAAEH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@E$01@glm@@QAEAAEH@Z PROC			; glm::tvec4<unsigned char,2>::operator[], COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 332  : 	}

	pop	ebp
	ret	4
??A?$tvec4@E$01@glm@@QAEAAEH@Z ENDP			; glm::tvec4<unsigned char,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@E$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@E$01@glm@@SAHXZ PROC			; glm::tvec4<unsigned char,2>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	push	4
	pop	eax
	ret	0
?length@?$tvec4@E$01@glm@@SAHXZ ENDP			; glm::tvec4<unsigned char,2>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@N$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec3@N$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<double,0>::operator--, COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		tvec3<T, P> Result(*this);
; 331  : 		--*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	mov	edx, ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	movups	xmm0, XMMWORD PTR [edx]
	push	6
	pop	ecx
	subpd	xmm0, xmm1
	mov	esi, edx
	mov	edi, eax
	rep movsd
	movups	XMMWORD PTR [edx], xmm0
	pop	edi
	movsd	xmm0, QWORD PTR [edx+16]
	subsd	xmm0, xmm1
	pop	esi
	movsd	QWORD PTR [edx+16], xmm0

; 332  : 		return Result;
; 333  : 	}

	pop	ebp
	ret	8
??F?$tvec3@N$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<double,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@N$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec3@N$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<double,0>::operator++, COMDAT
; _this$ = ecx

; 321  : 	{

	push	ebp
	mov	ebp, esp

; 322  : 		tvec3<T, P> Result(*this);
; 323  : 		++*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	mov	edx, ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	movups	xmm0, XMMWORD PTR [edx]
	push	6
	pop	ecx
	addpd	xmm0, xmm1
	mov	esi, edx
	mov	edi, eax
	rep movsd
	movups	XMMWORD PTR [edx], xmm0
	pop	edi
	movsd	xmm0, QWORD PTR [edx+16]
	addsd	xmm0, xmm1
	pop	esi
	movsd	QWORD PTR [edx+16], xmm0

; 324  : 		return Result;
; 325  : 	}

	pop	ebp
	ret	8
??E?$tvec3@N$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<double,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@N$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec3@N$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec3<double,0>::operator--, COMDAT
; _this$ = ecx

; 313  : 		--this->x;

	movups	xmm0, XMMWORD PTR [ecx]

; 314  : 		--this->y;
; 315  : 		--this->z;
; 316  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [ecx+16]
	subsd	xmm0, xmm1
	movsd	QWORD PTR [ecx+16], xmm0

; 317  : 	}

	ret	0
??F?$tvec3@N$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<double,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@N$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec3@N$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec3<double,0>::operator++, COMDAT
; _this$ = ecx

; 304  : 		++this->x;

	movups	xmm0, XMMWORD PTR [ecx]

; 305  : 		++this->y;
; 306  : 		++this->z;
; 307  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [ecx+16]
	addsd	xmm0, xmm1
	movsd	QWORD PTR [ecx+16], xmm0

; 308  : 	}

	ret	0
??E?$tvec3@N$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<double,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec3@N$0A@@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec3@N$0A@@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec3<double,0>::operator=, COMDAT
; _this$ = ecx

; 110  : template struct tvec3<float64, highp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	6
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tvec3@N$0A@@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec3<double,0>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@N$0A@@glm@@QAE@NNN@Z
_TEXT	SEGMENT
_a$ = 8							; size = 8
_b$ = 16						; size = 8
_c$ = 24						; size = 8
??0?$tvec3@N$0A@@glm@@QAE@NNN@Z PROC			; glm::tvec3<double,0>::tvec3<double,0>, COMDAT
; _this$ = ecx

; 70   : 	{}

	push	ebp
	mov	ebp, esp
	movsd	xmm0, QWORD PTR _a$[ebp]
	mov	eax, ecx
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR _b$[ebp]
	movsd	QWORD PTR [ecx+8], xmm0
	movsd	xmm0, QWORD PTR _c$[ebp]
	movsd	QWORD PTR [ecx+16], xmm0
	pop	ebp
	ret	24					; 00000018H
??0?$tvec3@N$0A@@glm@@QAE@NNN@Z ENDP			; glm::tvec3<double,0>::tvec3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@N$0A@@glm@@QAE@N@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 8
??0?$tvec3@N$0A@@glm@@QAE@N@Z PROC			; glm::tvec3<double,0>::tvec3<double,0>, COMDAT
; _this$ = ecx

; 65   : 	{}

	push	ebp
	mov	ebp, esp
	movsd	xmm0, QWORD PTR _scalar$[ebp]
	mov	eax, ecx
	unpcklpd xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movsd	QWORD PTR [ecx+16], xmm0
	pop	ebp
	ret	8
??0?$tvec3@N$0A@@glm@@QAE@N@Z ENDP			; glm::tvec3<double,0>::tvec3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@N$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec3@N$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec3<double,0>::tvec3<double,0>, COMDAT
; _this$ = ecx

; 60   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec3@N$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec3<double,0>::tvec3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec3@N$0A@@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec3@N$0A@@glm@@QAE@ABU01@@Z PROC			; glm::tvec3<double,0>::tvec3<double,0>, COMDAT
; _this$ = ecx

; 110  : template struct tvec3<float64, highp>;

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ___that$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	QWORD PTR [ecx+8], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	QWORD PTR [ecx+8], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	QWORD PTR [ecx+8], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR [ecx+16], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR [ecx+16], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	mov	eax, ecx
	movsd	QWORD PTR [ecx+16], xmm0
	pop	ebp
	ret	4
??0?$tvec3@N$0A@@glm@@QAE@ABU01@@Z ENDP			; glm::tvec3<double,0>::tvec3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@N$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec3@N$0A@@glm@@QAE@XZ PROC			; glm::tvec3<double,0>::tvec3<double,0>, COMDAT
; _this$ = ecx

; 40   : 		{}

	xorps	xmm0, xmm0
	mov	eax, ecx
	movups	XMMWORD PTR [ecx], xmm0
	movsd	QWORD PTR [ecx+16], xmm0
	ret	0
??0?$tvec3@N$0A@@glm@@QAE@XZ ENDP			; glm::tvec3<double,0>::tvec3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@N$0A@@glm@@QBEABNH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@N$0A@@glm@@QBEABNH@Z PROC			; glm::tvec3<double,0>::operator[], COMDAT
; _this$ = ecx

; 151  : 	{

	push	ebp
	mov	ebp, esp

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 154  : 	}

	pop	ebp
	ret	4
??A?$tvec3@N$0A@@glm@@QBEABNH@Z ENDP			; glm::tvec3<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@N$0A@@glm@@QAEAANH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@N$0A@@glm@@QAEAANH@Z PROC			; glm::tvec3<double,0>::operator[], COMDAT
; _this$ = ecx

; 144  : 	{

	push	ebp
	mov	ebp, esp

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 147  : 	}

	pop	ebp
	ret	4
??A?$tvec3@N$0A@@glm@@QAEAANH@Z ENDP			; glm::tvec3<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@N$0A@@glm@@SAHXZ PROC			; glm::tvec3<double,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	push	3
	pop	eax
	ret	0
?length@?$tvec3@N$0A@@glm@@SAHXZ ENDP			; glm::tvec3<double,0>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@M$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec3@M$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<float,0>::operator--, COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		tvec3<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 331  : 		--*this;

	movss	xmm0, DWORD PTR [ecx]
	movss	xmm1, DWORD PTR __real@3f800000
	push	esi
	push	edi
	mov	esi, ecx
	subss	xmm0, xmm1
	mov	edi, eax
	movsd
	movsd
	movsd
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	subss	xmm0, xmm1
	pop	edi
	pop	esi
	movss	DWORD PTR [ecx+4], xmm0
	movss	xmm0, DWORD PTR [ecx+8]
	subss	xmm0, xmm1
	movss	DWORD PTR [ecx+8], xmm0

; 332  : 		return Result;
; 333  : 	}

	pop	ebp
	ret	8
??F?$tvec3@M$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<float,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@M$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec3@M$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<float,0>::operator++, COMDAT
; _this$ = ecx

; 321  : 	{

	push	ebp
	mov	ebp, esp

; 322  : 		tvec3<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 323  : 		++*this;

	movss	xmm0, DWORD PTR [ecx]
	movss	xmm1, DWORD PTR __real@3f800000
	push	esi
	push	edi
	mov	esi, ecx
	addss	xmm0, xmm1
	mov	edi, eax
	movsd
	movsd
	movsd
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	addss	xmm0, xmm1
	pop	edi
	pop	esi
	movss	DWORD PTR [ecx+4], xmm0
	movss	xmm0, DWORD PTR [ecx+8]
	addss	xmm0, xmm1
	movss	DWORD PTR [ecx+8], xmm0

; 324  : 		return Result;
; 325  : 	}

	pop	ebp
	ret	8
??E?$tvec3@M$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<float,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@M$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec3@M$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec3<float,0>::operator--, COMDAT
; _this$ = ecx

; 313  : 		--this->x;

	movss	xmm0, DWORD PTR [ecx]

; 314  : 		--this->y;
; 315  : 		--this->z;
; 316  : 		return *this;

	mov	eax, ecx
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm0, xmm1
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	subss	xmm0, xmm1
	movss	DWORD PTR [ecx+4], xmm0
	movss	xmm0, DWORD PTR [ecx+8]
	subss	xmm0, xmm1
	movss	DWORD PTR [ecx+8], xmm0

; 317  : 	}

	ret	0
??F?$tvec3@M$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<float,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@M$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec3@M$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec3<float,0>::operator++, COMDAT
; _this$ = ecx

; 304  : 		++this->x;

	movss	xmm0, DWORD PTR [ecx]

; 305  : 		++this->y;
; 306  : 		++this->z;
; 307  : 		return *this;

	mov	eax, ecx
	movss	xmm1, DWORD PTR __real@3f800000
	addss	xmm0, xmm1
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	addss	xmm0, xmm1
	movss	DWORD PTR [ecx+4], xmm0
	movss	xmm0, DWORD PTR [ecx+8]
	addss	xmm0, xmm1
	movss	DWORD PTR [ecx+8], xmm0

; 308  : 	}

	ret	0
??E?$tvec3@M$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<float,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec3@M$0A@@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec3@M$0A@@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec3<float,0>::operator=, COMDAT
; _this$ = ecx

; 109  : template struct tvec3<float32, highp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	mov	edi, ecx
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tvec3@M$0A@@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec3<float,0>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$0A@@glm@@QAE@MMM@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
??0?$tvec3@M$0A@@glm@@QAE@MMM@Z PROC			; glm::tvec3<float,0>::tvec3<float,0>, COMDAT
; _this$ = ecx

; 70   : 	{}

	push	ebp
	mov	ebp, esp
	movss	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR _b$[ebp]
	movss	DWORD PTR [ecx+4], xmm0
	movss	xmm0, DWORD PTR _c$[ebp]
	movss	DWORD PTR [ecx+8], xmm0
	pop	ebp
	ret	12					; 0000000cH
??0?$tvec3@M$0A@@glm@@QAE@MMM@Z ENDP			; glm::tvec3<float,0>::tvec3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$0A@@glm@@QAE@M@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 4
??0?$tvec3@M$0A@@glm@@QAE@M@Z PROC			; glm::tvec3<float,0>::tvec3<float,0>, COMDAT
; _this$ = ecx

; 65   : 	{}

	push	ebp
	mov	ebp, esp
	movss	xmm0, DWORD PTR _scalar$[ebp]
	mov	eax, ecx
	movss	DWORD PTR [ecx], xmm0
	movss	DWORD PTR [ecx+4], xmm0
	movss	DWORD PTR [ecx+8], xmm0
	pop	ebp
	ret	4
??0?$tvec3@M$0A@@glm@@QAE@M@Z ENDP			; glm::tvec3<float,0>::tvec3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec3@M$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec3<float,0>::tvec3<float,0>, COMDAT
; _this$ = ecx

; 60   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec3@M$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec3<float,0>::tvec3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec3@M$0A@@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec3@M$0A@@glm@@QAE@ABU01@@Z PROC			; glm::tvec3<float,0>::tvec3<float,0>, COMDAT
; _this$ = ecx

; 109  : template struct tvec3<float32, highp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec3@M$0A@@glm@@QAE@ABU01@@Z ENDP			; glm::tvec3<float,0>::tvec3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec3@M$0A@@glm@@QAE@XZ PROC			; glm::tvec3<float,0>::tvec3<float,0>, COMDAT
; _this$ = ecx

; 40   : 		{}

	and	DWORD PTR [ecx], 0
	mov	eax, ecx
	and	DWORD PTR [ecx+4], 0
	and	DWORD PTR [ecx+8], 0
	ret	0
??0?$tvec3@M$0A@@glm@@QAE@XZ ENDP			; glm::tvec3<float,0>::tvec3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@M$0A@@glm@@QBEABMH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@M$0A@@glm@@QBEABMH@Z PROC			; glm::tvec3<float,0>::operator[], COMDAT
; _this$ = ecx

; 151  : 	{

	push	ebp
	mov	ebp, esp

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 154  : 	}

	pop	ebp
	ret	4
??A?$tvec3@M$0A@@glm@@QBEABMH@Z ENDP			; glm::tvec3<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@M$0A@@glm@@QAEAAMH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@M$0A@@glm@@QAEAAMH@Z PROC			; glm::tvec3<float,0>::operator[], COMDAT
; _this$ = ecx

; 144  : 	{

	push	ebp
	mov	ebp, esp

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 147  : 	}

	pop	ebp
	ret	4
??A?$tvec3@M$0A@@glm@@QAEAAMH@Z ENDP			; glm::tvec3<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@M$0A@@glm@@SAHXZ PROC			; glm::tvec3<float,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	push	3
	pop	eax
	ret	0
?length@?$tvec3@M$0A@@glm@@SAHXZ ENDP			; glm::tvec3<float,0>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@_J$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec3@_J$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tvec3<__int64,0>::operator--, COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		tvec3<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, ecx
	push	esi
	push	edi
	push	6
	pop	ecx
	mov	esi, edx
	mov	edi, eax
	rep movsd

; 331  : 		--*this;

	or	ecx, -1
	add	DWORD PTR [edx], ecx
	pop	edi
	adc	DWORD PTR [edx+4], ecx
	add	DWORD PTR [edx+8], ecx
	pop	esi
	adc	DWORD PTR [edx+12], ecx
	add	DWORD PTR [edx+16], ecx
	adc	DWORD PTR [edx+20], ecx

; 332  : 		return Result;
; 333  : 	}

	pop	ebp
	ret	8
??F?$tvec3@_J$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tvec3<__int64,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@_J$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec3@_J$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tvec3<__int64,0>::operator++, COMDAT
; _this$ = ecx

; 321  : 	{

	push	ebp
	mov	ebp, esp

; 322  : 		tvec3<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, ecx
	push	esi
	push	edi
	push	6
	pop	ecx
	mov	esi, edx
	mov	edi, eax
	rep movsd

; 323  : 		++*this;

	add	DWORD PTR [edx], 1
	push	0
	pop	ecx
	adc	DWORD PTR [edx+4], ecx
	add	DWORD PTR [edx+8], 1
	pop	edi
	adc	DWORD PTR [edx+12], ecx
	add	DWORD PTR [edx+16], 1
	pop	esi
	adc	DWORD PTR [edx+20], ecx

; 324  : 		return Result;
; 325  : 	}

	pop	ebp
	ret	8
??E?$tvec3@_J$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tvec3<__int64,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@_J$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec3@_J$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec3<__int64,0>::operator--, COMDAT
; _this$ = ecx

; 313  : 		--this->x;

	or	eax, -1
	add	DWORD PTR [ecx], eax
	adc	DWORD PTR [ecx+4], eax

; 314  : 		--this->y;

	add	DWORD PTR [ecx+8], eax
	adc	DWORD PTR [ecx+12], eax

; 315  : 		--this->z;

	add	DWORD PTR [ecx+16], eax
	adc	DWORD PTR [ecx+20], eax

; 316  : 		return *this;

	mov	eax, ecx

; 317  : 	}

	ret	0
??F?$tvec3@_J$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<__int64,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@_J$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec3@_J$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec3<__int64,0>::operator++, COMDAT
; _this$ = ecx

; 304  : 		++this->x;

	add	DWORD PTR [ecx], 1
	push	0
	pop	eax
	adc	DWORD PTR [ecx+4], eax

; 305  : 		++this->y;

	add	DWORD PTR [ecx+8], 1
	adc	DWORD PTR [ecx+12], eax

; 306  : 		++this->z;

	add	DWORD PTR [ecx+16], 1
	adc	DWORD PTR [ecx+20], eax

; 307  : 		return *this;

	mov	eax, ecx

; 308  : 	}

	ret	0
??E?$tvec3@_J$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<__int64,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec3@_J$0A@@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec3@_J$0A@@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec3<__int64,0>::operator=, COMDAT
; _this$ = ecx

; 108  : template struct tvec3<int64, highp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	6
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tvec3@_J$0A@@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec3<__int64,0>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_J$0A@@glm@@QAE@_J00@Z
_TEXT	SEGMENT
_a$ = 8							; size = 8
_b$ = 16						; size = 8
_c$ = 24						; size = 8
??0?$tvec3@_J$0A@@glm@@QAE@_J00@Z PROC			; glm::tvec3<__int64,0>::tvec3<__int64,0>, COMDAT
; _this$ = ecx

; 70   : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _a$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _b$[ebp+4]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR _c$[ebp+4]
	mov	DWORD PTR [ecx+20], eax
	mov	eax, ecx
	pop	ebp
	ret	24					; 00000018H
??0?$tvec3@_J$0A@@glm@@QAE@_J00@Z ENDP			; glm::tvec3<__int64,0>::tvec3<__int64,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_J$0A@@glm@@QAE@_J@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 8
??0?$tvec3@_J$0A@@glm@@QAE@_J@Z PROC			; glm::tvec3<__int64,0>::tvec3<__int64,0>, COMDAT
; _this$ = ecx

; 65   : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _scalar$[ebp+4]
	mov	edx, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+12], eax
	mov	DWORD PTR [ecx+20], eax
	mov	eax, ecx
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+8], edx
	mov	DWORD PTR [ecx+16], edx
	pop	ebp
	ret	8
??0?$tvec3@_J$0A@@glm@@QAE@_J@Z ENDP			; glm::tvec3<__int64,0>::tvec3<__int64,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_J$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec3@_J$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec3<__int64,0>::tvec3<__int64,0>, COMDAT
; _this$ = ecx

; 60   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec3@_J$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec3<__int64,0>::tvec3<__int64,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec3@_J$0A@@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec3@_J$0A@@glm@@QAE@ABU01@@Z PROC		; glm::tvec3<__int64,0>::tvec3<__int64,0>, COMDAT
; _this$ = ecx

; 108  : template struct tvec3<int64, highp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx+20], eax
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx+20], eax
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx+20], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec3@_J$0A@@glm@@QAE@ABU01@@Z ENDP		; glm::tvec3<__int64,0>::tvec3<__int64,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_J$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec3@_J$0A@@glm@@QAE@XZ PROC			; glm::tvec3<__int64,0>::tvec3<__int64,0>, COMDAT
; _this$ = ecx

; 40   : 		{}

	xor	eax, eax
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR [ecx+12], eax
	mov	DWORD PTR [ecx+16], eax
	mov	DWORD PTR [ecx+20], eax
	mov	eax, ecx
	ret	0
??0?$tvec3@_J$0A@@glm@@QAE@XZ ENDP			; glm::tvec3<__int64,0>::tvec3<__int64,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@_J$0A@@glm@@QBEAB_JH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@_J$0A@@glm@@QBEAB_JH@Z PROC			; glm::tvec3<__int64,0>::operator[], COMDAT
; _this$ = ecx

; 151  : 	{

	push	ebp
	mov	ebp, esp

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 154  : 	}

	pop	ebp
	ret	4
??A?$tvec3@_J$0A@@glm@@QBEAB_JH@Z ENDP			; glm::tvec3<__int64,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@_J$0A@@glm@@QAEAA_JH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@_J$0A@@glm@@QAEAA_JH@Z PROC			; glm::tvec3<__int64,0>::operator[], COMDAT
; _this$ = ecx

; 144  : 	{

	push	ebp
	mov	ebp, esp

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 147  : 	}

	pop	ebp
	ret	4
??A?$tvec3@_J$0A@@glm@@QAEAA_JH@Z ENDP			; glm::tvec3<__int64,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@_J$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@_J$0A@@glm@@SAHXZ PROC			; glm::tvec3<__int64,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	push	3
	pop	eax
	ret	0
?length@?$tvec3@_J$0A@@glm@@SAHXZ ENDP			; glm::tvec3<__int64,0>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@H$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec3@H$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<int,0>::operator--, COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		tvec3<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	mov	esi, ecx
	mov	edi, eax
	movsd
	movsd
	movsd

; 331  : 		--*this;

	dec	DWORD PTR [ecx]
	dec	DWORD PTR [ecx+4]
	dec	DWORD PTR [ecx+8]
	pop	edi
	pop	esi

; 332  : 		return Result;
; 333  : 	}

	pop	ebp
	ret	8
??F?$tvec3@H$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<int,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@H$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec3@H$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<int,0>::operator++, COMDAT
; _this$ = ecx

; 321  : 	{

	push	ebp
	mov	ebp, esp

; 322  : 		tvec3<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	mov	esi, ecx
	mov	edi, eax
	movsd
	movsd
	movsd

; 323  : 		++*this;

	inc	DWORD PTR [ecx]
	inc	DWORD PTR [ecx+4]
	inc	DWORD PTR [ecx+8]
	pop	edi
	pop	esi

; 324  : 		return Result;
; 325  : 	}

	pop	ebp
	ret	8
??E?$tvec3@H$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<int,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@H$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec3@H$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec3<int,0>::operator--, COMDAT
; _this$ = ecx

; 313  : 		--this->x;

	dec	DWORD PTR [ecx]

; 314  : 		--this->y;
; 315  : 		--this->z;
; 316  : 		return *this;

	mov	eax, ecx
	dec	DWORD PTR [ecx+4]
	dec	DWORD PTR [ecx+8]

; 317  : 	}

	ret	0
??F?$tvec3@H$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<int,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@H$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec3@H$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec3<int,0>::operator++, COMDAT
; _this$ = ecx

; 304  : 		++this->x;

	inc	DWORD PTR [ecx]

; 305  : 		++this->y;
; 306  : 		++this->z;
; 307  : 		return *this;

	mov	eax, ecx
	inc	DWORD PTR [ecx+4]
	inc	DWORD PTR [ecx+8]

; 308  : 	}

	ret	0
??E?$tvec3@H$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<int,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec3@H$0A@@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec3@H$0A@@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec3<int,0>::operator=, COMDAT
; _this$ = ecx

; 107  : template struct tvec3<int32, highp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	mov	edi, ecx
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tvec3@H$0A@@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec3<int,0>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@H$0A@@glm@@QAE@HHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
??0?$tvec3@H$0A@@glm@@QAE@HHH@Z PROC			; glm::tvec3<int,0>::tvec3<int,0>, COMDAT
; _this$ = ecx

; 70   : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, ecx
	pop	ebp
	ret	12					; 0000000cH
??0?$tvec3@H$0A@@glm@@QAE@HHH@Z ENDP			; glm::tvec3<int,0>::tvec3<int,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@H$0A@@glm@@QAE@H@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 4
??0?$tvec3@H$0A@@glm@@QAE@H@Z PROC			; glm::tvec3<int,0>::tvec3<int,0>, COMDAT
; _this$ = ecx

; 65   : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec3@H$0A@@glm@@QAE@H@Z ENDP			; glm::tvec3<int,0>::tvec3<int,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@H$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec3@H$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec3<int,0>::tvec3<int,0>, COMDAT
; _this$ = ecx

; 60   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec3@H$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec3<int,0>::tvec3<int,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec3@H$0A@@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec3@H$0A@@glm@@QAE@ABU01@@Z PROC			; glm::tvec3<int,0>::tvec3<int,0>, COMDAT
; _this$ = ecx

; 107  : template struct tvec3<int32, highp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec3@H$0A@@glm@@QAE@ABU01@@Z ENDP			; glm::tvec3<int,0>::tvec3<int,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@H$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec3@H$0A@@glm@@QAE@XZ PROC			; glm::tvec3<int,0>::tvec3<int,0>, COMDAT
; _this$ = ecx

; 40   : 		{}

	xor	eax, eax
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], eax
	mov	eax, ecx
	ret	0
??0?$tvec3@H$0A@@glm@@QAE@XZ ENDP			; glm::tvec3<int,0>::tvec3<int,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@H$0A@@glm@@QBEABHH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@H$0A@@glm@@QBEABHH@Z PROC			; glm::tvec3<int,0>::operator[], COMDAT
; _this$ = ecx

; 151  : 	{

	push	ebp
	mov	ebp, esp

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 154  : 	}

	pop	ebp
	ret	4
??A?$tvec3@H$0A@@glm@@QBEABHH@Z ENDP			; glm::tvec3<int,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@H$0A@@glm@@QAEAAHH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@H$0A@@glm@@QAEAAHH@Z PROC			; glm::tvec3<int,0>::operator[], COMDAT
; _this$ = ecx

; 144  : 	{

	push	ebp
	mov	ebp, esp

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 147  : 	}

	pop	ebp
	ret	4
??A?$tvec3@H$0A@@glm@@QAEAAHH@Z ENDP			; glm::tvec3<int,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@H$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@H$0A@@glm@@SAHXZ PROC			; glm::tvec3<int,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	push	3
	pop	eax
	ret	0
?length@?$tvec3@H$0A@@glm@@SAHXZ ENDP			; glm::tvec3<int,0>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@F$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec3@F$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<short,0>::operator--, COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		tvec3<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	dx, WORD PTR [ecx+4]

; 331  : 		--*this;

	dec	WORD PTR [ecx]
	dec	WORD PTR [ecx+2]
	dec	WORD PTR [ecx+4]
	mov	WORD PTR [eax+4], dx

; 332  : 		return Result;
; 333  : 	}

	pop	ebp
	ret	8
??F?$tvec3@F$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<short,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@F$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec3@F$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<short,0>::operator++, COMDAT
; _this$ = ecx

; 321  : 	{

	push	ebp
	mov	ebp, esp

; 322  : 		tvec3<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	dx, WORD PTR [ecx+4]

; 323  : 		++*this;

	inc	WORD PTR [ecx]
	inc	WORD PTR [ecx+2]
	inc	WORD PTR [ecx+4]
	mov	WORD PTR [eax+4], dx

; 324  : 		return Result;
; 325  : 	}

	pop	ebp
	ret	8
??E?$tvec3@F$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<short,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@F$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec3@F$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec3<short,0>::operator--, COMDAT
; _this$ = ecx

; 313  : 		--this->x;

	dec	WORD PTR [ecx]

; 314  : 		--this->y;
; 315  : 		--this->z;
; 316  : 		return *this;

	mov	eax, ecx
	dec	WORD PTR [ecx+2]
	dec	WORD PTR [ecx+4]

; 317  : 	}

	ret	0
??F?$tvec3@F$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<short,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@F$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec3@F$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec3<short,0>::operator++, COMDAT
; _this$ = ecx

; 304  : 		++this->x;

	inc	WORD PTR [ecx]

; 305  : 		++this->y;
; 306  : 		++this->z;
; 307  : 		return *this;

	mov	eax, ecx
	inc	WORD PTR [ecx+2]
	inc	WORD PTR [ecx+4]

; 308  : 	}

	ret	0
??E?$tvec3@F$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<short,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec3@F$0A@@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec3@F$0A@@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec3<short,0>::operator=, COMDAT
; _this$ = ecx

; 106  : template struct tvec3<int16, highp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	ax, WORD PTR [edx+4]
	mov	WORD PTR [ecx+4], ax
	mov	eax, ecx
	pop	ebp
	ret	4
??4?$tvec3@F$0A@@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec3<short,0>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@F$0A@@glm@@QAE@FFF@Z
_TEXT	SEGMENT
_a$ = 8							; size = 2
_b$ = 12						; size = 2
_c$ = 16						; size = 2
??0?$tvec3@F$0A@@glm@@QAE@FFF@Z PROC			; glm::tvec3<short,0>::tvec3<short,0>, COMDAT
; _this$ = ecx

; 70   : 	{}

	push	ebp
	mov	ebp, esp
	mov	ax, WORD PTR _a$[ebp]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR _b$[ebp]
	mov	WORD PTR [ecx+2], ax
	mov	ax, WORD PTR _c$[ebp]
	mov	WORD PTR [ecx+4], ax
	mov	eax, ecx
	pop	ebp
	ret	12					; 0000000cH
??0?$tvec3@F$0A@@glm@@QAE@FFF@Z ENDP			; glm::tvec3<short,0>::tvec3<short,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@F$0A@@glm@@QAE@F@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 2
??0?$tvec3@F$0A@@glm@@QAE@F@Z PROC			; glm::tvec3<short,0>::tvec3<short,0>, COMDAT
; _this$ = ecx

; 65   : 	{}

	push	ebp
	mov	ebp, esp
	mov	ax, WORD PTR _scalar$[ebp]
	mov	WORD PTR [ecx], ax
	mov	WORD PTR [ecx+2], ax
	mov	WORD PTR [ecx+4], ax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec3@F$0A@@glm@@QAE@F@Z ENDP			; glm::tvec3<short,0>::tvec3<short,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@F$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec3@F$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec3<short,0>::tvec3<short,0>, COMDAT
; _this$ = ecx

; 60   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec3@F$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec3<short,0>::tvec3<short,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec3@F$0A@@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec3@F$0A@@glm@@QAE@ABU01@@Z PROC			; glm::tvec3<short,0>::tvec3<short,0>, COMDAT
; _this$ = ecx

; 106  : template struct tvec3<int16, highp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR [edx+2]
	mov	WORD PTR [ecx+2], ax
	mov	ax, WORD PTR [edx+2]
	mov	WORD PTR [ecx+2], ax
	mov	ax, WORD PTR [edx+2]
	mov	WORD PTR [ecx+2], ax
	mov	ax, WORD PTR [edx+4]
	mov	WORD PTR [ecx+4], ax
	mov	ax, WORD PTR [edx+4]
	mov	WORD PTR [ecx+4], ax
	mov	ax, WORD PTR [edx+4]
	mov	WORD PTR [ecx+4], ax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec3@F$0A@@glm@@QAE@ABU01@@Z ENDP			; glm::tvec3<short,0>::tvec3<short,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@F$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec3@F$0A@@glm@@QAE@XZ PROC			; glm::tvec3<short,0>::tvec3<short,0>, COMDAT
; _this$ = ecx

; 40   : 		{}

	xor	eax, eax
	mov	DWORD PTR [ecx], eax
	mov	WORD PTR [ecx+4], ax
	mov	eax, ecx
	ret	0
??0?$tvec3@F$0A@@glm@@QAE@XZ ENDP			; glm::tvec3<short,0>::tvec3<short,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@F$0A@@glm@@QBEABFH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@F$0A@@glm@@QBEABFH@Z PROC			; glm::tvec3<short,0>::operator[], COMDAT
; _this$ = ecx

; 151  : 	{

	push	ebp
	mov	ebp, esp

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 154  : 	}

	pop	ebp
	ret	4
??A?$tvec3@F$0A@@glm@@QBEABFH@Z ENDP			; glm::tvec3<short,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@F$0A@@glm@@QAEAAFH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@F$0A@@glm@@QAEAAFH@Z PROC			; glm::tvec3<short,0>::operator[], COMDAT
; _this$ = ecx

; 144  : 	{

	push	ebp
	mov	ebp, esp

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 147  : 	}

	pop	ebp
	ret	4
??A?$tvec3@F$0A@@glm@@QAEAAFH@Z ENDP			; glm::tvec3<short,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@F$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@F$0A@@glm@@SAHXZ PROC			; glm::tvec3<short,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	push	3
	pop	eax
	ret	0
?length@?$tvec3@F$0A@@glm@@SAHXZ ENDP			; glm::tvec3<short,0>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@C$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec3@C$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<signed char,0>::operator--, COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		tvec3<T, P> Result(*this);

	mov	dx, WORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	WORD PTR [eax], dx
	mov	dl, BYTE PTR [ecx+2]

; 331  : 		--*this;

	dec	BYTE PTR [ecx]
	dec	BYTE PTR [ecx+1]
	dec	BYTE PTR [ecx+2]
	mov	BYTE PTR [eax+2], dl

; 332  : 		return Result;
; 333  : 	}

	pop	ebp
	ret	8
??F?$tvec3@C$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<signed char,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@C$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec3@C$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<signed char,0>::operator++, COMDAT
; _this$ = ecx

; 321  : 	{

	push	ebp
	mov	ebp, esp

; 322  : 		tvec3<T, P> Result(*this);

	mov	dx, WORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	WORD PTR [eax], dx
	mov	dl, BYTE PTR [ecx+2]

; 323  : 		++*this;

	inc	BYTE PTR [ecx]
	inc	BYTE PTR [ecx+1]
	inc	BYTE PTR [ecx+2]
	mov	BYTE PTR [eax+2], dl

; 324  : 		return Result;
; 325  : 	}

	pop	ebp
	ret	8
??E?$tvec3@C$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<signed char,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@C$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec3@C$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec3<signed char,0>::operator--, COMDAT
; _this$ = ecx

; 313  : 		--this->x;

	dec	BYTE PTR [ecx]

; 314  : 		--this->y;
; 315  : 		--this->z;
; 316  : 		return *this;

	mov	eax, ecx
	dec	BYTE PTR [ecx+1]
	dec	BYTE PTR [ecx+2]

; 317  : 	}

	ret	0
??F?$tvec3@C$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<signed char,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@C$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec3@C$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec3<signed char,0>::operator++, COMDAT
; _this$ = ecx

; 304  : 		++this->x;

	inc	BYTE PTR [ecx]

; 305  : 		++this->y;
; 306  : 		++this->z;
; 307  : 		return *this;

	mov	eax, ecx
	inc	BYTE PTR [ecx+1]
	inc	BYTE PTR [ecx+2]

; 308  : 	}

	ret	0
??E?$tvec3@C$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<signed char,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec3@C$0A@@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec3@C$0A@@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec3<signed char,0>::operator=, COMDAT
; _this$ = ecx

; 105  : template struct tvec3<int8, highp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax
	mov	al, BYTE PTR [edx+2]
	mov	BYTE PTR [ecx+2], al
	mov	eax, ecx
	pop	ebp
	ret	4
??4?$tvec3@C$0A@@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec3<signed char,0>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@C$0A@@glm@@QAE@CCC@Z
_TEXT	SEGMENT
_a$ = 8							; size = 1
_b$ = 12						; size = 1
_c$ = 16						; size = 1
??0?$tvec3@C$0A@@glm@@QAE@CCC@Z PROC			; glm::tvec3<signed char,0>::tvec3<signed char,0>, COMDAT
; _this$ = ecx

; 70   : 	{}

	push	ebp
	mov	ebp, esp
	mov	al, BYTE PTR _a$[ebp]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR _b$[ebp]
	mov	BYTE PTR [ecx+1], al
	mov	al, BYTE PTR _c$[ebp]
	mov	BYTE PTR [ecx+2], al
	mov	eax, ecx
	pop	ebp
	ret	12					; 0000000cH
??0?$tvec3@C$0A@@glm@@QAE@CCC@Z ENDP			; glm::tvec3<signed char,0>::tvec3<signed char,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@C$0A@@glm@@QAE@C@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 1
??0?$tvec3@C$0A@@glm@@QAE@C@Z PROC			; glm::tvec3<signed char,0>::tvec3<signed char,0>, COMDAT
; _this$ = ecx

; 65   : 	{}

	push	ebp
	mov	ebp, esp
	mov	al, BYTE PTR _scalar$[ebp]
	mov	BYTE PTR [ecx], al
	mov	BYTE PTR [ecx+1], al
	mov	BYTE PTR [ecx+2], al
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec3@C$0A@@glm@@QAE@C@Z ENDP			; glm::tvec3<signed char,0>::tvec3<signed char,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@C$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec3@C$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec3<signed char,0>::tvec3<signed char,0>, COMDAT
; _this$ = ecx

; 60   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec3@C$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec3<signed char,0>::tvec3<signed char,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec3@C$0A@@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec3@C$0A@@glm@@QAE@ABU01@@Z PROC			; glm::tvec3<signed char,0>::tvec3<signed char,0>, COMDAT
; _this$ = ecx

; 105  : template struct tvec3<int8, highp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR [edx+1]
	mov	BYTE PTR [ecx+1], al
	mov	al, BYTE PTR [edx+1]
	mov	BYTE PTR [ecx+1], al
	mov	al, BYTE PTR [edx+1]
	mov	BYTE PTR [ecx+1], al
	mov	al, BYTE PTR [edx+2]
	mov	BYTE PTR [ecx+2], al
	mov	al, BYTE PTR [edx+2]
	mov	BYTE PTR [ecx+2], al
	mov	al, BYTE PTR [edx+2]
	mov	BYTE PTR [ecx+2], al
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec3@C$0A@@glm@@QAE@ABU01@@Z ENDP			; glm::tvec3<signed char,0>::tvec3<signed char,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@C$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec3@C$0A@@glm@@QAE@XZ PROC			; glm::tvec3<signed char,0>::tvec3<signed char,0>, COMDAT
; _this$ = ecx

; 40   : 		{}

	xor	eax, eax
	mov	WORD PTR [ecx], ax
	mov	BYTE PTR [ecx+2], al
	mov	eax, ecx
	ret	0
??0?$tvec3@C$0A@@glm@@QAE@XZ ENDP			; glm::tvec3<signed char,0>::tvec3<signed char,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@C$0A@@glm@@QBEABCH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@C$0A@@glm@@QBEABCH@Z PROC			; glm::tvec3<signed char,0>::operator[], COMDAT
; _this$ = ecx

; 151  : 	{

	push	ebp
	mov	ebp, esp

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 154  : 	}

	pop	ebp
	ret	4
??A?$tvec3@C$0A@@glm@@QBEABCH@Z ENDP			; glm::tvec3<signed char,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@C$0A@@glm@@QAEAACH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@C$0A@@glm@@QAEAACH@Z PROC			; glm::tvec3<signed char,0>::operator[], COMDAT
; _this$ = ecx

; 144  : 	{

	push	ebp
	mov	ebp, esp

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 147  : 	}

	pop	ebp
	ret	4
??A?$tvec3@C$0A@@glm@@QAEAACH@Z ENDP			; glm::tvec3<signed char,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@C$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@C$0A@@glm@@SAHXZ PROC			; glm::tvec3<signed char,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	push	3
	pop	eax
	ret	0
?length@?$tvec3@C$0A@@glm@@SAHXZ ENDP			; glm::tvec3<signed char,0>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@_K$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec3@_K$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tvec3<unsigned __int64,0>::operator--, COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		tvec3<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, ecx
	push	esi
	push	edi
	push	6
	pop	ecx
	mov	esi, edx
	mov	edi, eax
	rep movsd

; 331  : 		--*this;

	or	ecx, -1
	add	DWORD PTR [edx], ecx
	pop	edi
	adc	DWORD PTR [edx+4], ecx
	add	DWORD PTR [edx+8], ecx
	pop	esi
	adc	DWORD PTR [edx+12], ecx
	add	DWORD PTR [edx+16], ecx
	adc	DWORD PTR [edx+20], ecx

; 332  : 		return Result;
; 333  : 	}

	pop	ebp
	ret	8
??F?$tvec3@_K$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tvec3<unsigned __int64,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@_K$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec3@_K$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tvec3<unsigned __int64,0>::operator++, COMDAT
; _this$ = ecx

; 321  : 	{

	push	ebp
	mov	ebp, esp

; 322  : 		tvec3<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, ecx
	push	esi
	push	edi
	push	6
	pop	ecx
	mov	esi, edx
	mov	edi, eax
	rep movsd

; 323  : 		++*this;

	add	DWORD PTR [edx], 1
	push	0
	pop	ecx
	adc	DWORD PTR [edx+4], ecx
	add	DWORD PTR [edx+8], 1
	pop	edi
	adc	DWORD PTR [edx+12], ecx
	add	DWORD PTR [edx+16], 1
	pop	esi
	adc	DWORD PTR [edx+20], ecx

; 324  : 		return Result;
; 325  : 	}

	pop	ebp
	ret	8
??E?$tvec3@_K$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tvec3<unsigned __int64,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@_K$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec3@_K$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec3<unsigned __int64,0>::operator--, COMDAT
; _this$ = ecx

; 313  : 		--this->x;

	or	eax, -1
	add	DWORD PTR [ecx], eax
	adc	DWORD PTR [ecx+4], eax

; 314  : 		--this->y;

	add	DWORD PTR [ecx+8], eax
	adc	DWORD PTR [ecx+12], eax

; 315  : 		--this->z;

	add	DWORD PTR [ecx+16], eax
	adc	DWORD PTR [ecx+20], eax

; 316  : 		return *this;

	mov	eax, ecx

; 317  : 	}

	ret	0
??F?$tvec3@_K$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<unsigned __int64,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@_K$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec3@_K$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec3<unsigned __int64,0>::operator++, COMDAT
; _this$ = ecx

; 304  : 		++this->x;

	add	DWORD PTR [ecx], 1
	push	0
	pop	eax
	adc	DWORD PTR [ecx+4], eax

; 305  : 		++this->y;

	add	DWORD PTR [ecx+8], 1
	adc	DWORD PTR [ecx+12], eax

; 306  : 		++this->z;

	add	DWORD PTR [ecx+16], 1
	adc	DWORD PTR [ecx+20], eax

; 307  : 		return *this;

	mov	eax, ecx

; 308  : 	}

	ret	0
??E?$tvec3@_K$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<unsigned __int64,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec3@_K$0A@@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec3@_K$0A@@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec3<unsigned __int64,0>::operator=, COMDAT
; _this$ = ecx

; 104  : template struct tvec3<uint64, highp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	6
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tvec3@_K$0A@@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec3<unsigned __int64,0>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_K$0A@@glm@@QAE@_K00@Z
_TEXT	SEGMENT
_a$ = 8							; size = 8
_b$ = 16						; size = 8
_c$ = 24						; size = 8
??0?$tvec3@_K$0A@@glm@@QAE@_K00@Z PROC			; glm::tvec3<unsigned __int64,0>::tvec3<unsigned __int64,0>, COMDAT
; _this$ = ecx

; 70   : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _a$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _b$[ebp+4]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR _c$[ebp+4]
	mov	DWORD PTR [ecx+20], eax
	mov	eax, ecx
	pop	ebp
	ret	24					; 00000018H
??0?$tvec3@_K$0A@@glm@@QAE@_K00@Z ENDP			; glm::tvec3<unsigned __int64,0>::tvec3<unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_K$0A@@glm@@QAE@_K@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 8
??0?$tvec3@_K$0A@@glm@@QAE@_K@Z PROC			; glm::tvec3<unsigned __int64,0>::tvec3<unsigned __int64,0>, COMDAT
; _this$ = ecx

; 65   : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _scalar$[ebp+4]
	mov	edx, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+12], eax
	mov	DWORD PTR [ecx+20], eax
	mov	eax, ecx
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+8], edx
	mov	DWORD PTR [ecx+16], edx
	pop	ebp
	ret	8
??0?$tvec3@_K$0A@@glm@@QAE@_K@Z ENDP			; glm::tvec3<unsigned __int64,0>::tvec3<unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_K$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec3@_K$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec3<unsigned __int64,0>::tvec3<unsigned __int64,0>, COMDAT
; _this$ = ecx

; 60   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec3@_K$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec3<unsigned __int64,0>::tvec3<unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec3@_K$0A@@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec3@_K$0A@@glm@@QAE@ABU01@@Z PROC		; glm::tvec3<unsigned __int64,0>::tvec3<unsigned __int64,0>, COMDAT
; _this$ = ecx

; 104  : template struct tvec3<uint64, highp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx+20], eax
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx+20], eax
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx+20], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec3@_K$0A@@glm@@QAE@ABU01@@Z ENDP		; glm::tvec3<unsigned __int64,0>::tvec3<unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_K$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec3@_K$0A@@glm@@QAE@XZ PROC			; glm::tvec3<unsigned __int64,0>::tvec3<unsigned __int64,0>, COMDAT
; _this$ = ecx

; 40   : 		{}

	xor	eax, eax
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR [ecx+12], eax
	mov	DWORD PTR [ecx+16], eax
	mov	DWORD PTR [ecx+20], eax
	mov	eax, ecx
	ret	0
??0?$tvec3@_K$0A@@glm@@QAE@XZ ENDP			; glm::tvec3<unsigned __int64,0>::tvec3<unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@_K$0A@@glm@@QBEAB_KH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@_K$0A@@glm@@QBEAB_KH@Z PROC			; glm::tvec3<unsigned __int64,0>::operator[], COMDAT
; _this$ = ecx

; 151  : 	{

	push	ebp
	mov	ebp, esp

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 154  : 	}

	pop	ebp
	ret	4
??A?$tvec3@_K$0A@@glm@@QBEAB_KH@Z ENDP			; glm::tvec3<unsigned __int64,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@_K$0A@@glm@@QAEAA_KH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@_K$0A@@glm@@QAEAA_KH@Z PROC			; glm::tvec3<unsigned __int64,0>::operator[], COMDAT
; _this$ = ecx

; 144  : 	{

	push	ebp
	mov	ebp, esp

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 147  : 	}

	pop	ebp
	ret	4
??A?$tvec3@_K$0A@@glm@@QAEAA_KH@Z ENDP			; glm::tvec3<unsigned __int64,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@_K$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@_K$0A@@glm@@SAHXZ PROC			; glm::tvec3<unsigned __int64,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	push	3
	pop	eax
	ret	0
?length@?$tvec3@_K$0A@@glm@@SAHXZ ENDP			; glm::tvec3<unsigned __int64,0>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@I$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec3@I$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<unsigned int,0>::operator--, COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		tvec3<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	mov	esi, ecx
	mov	edi, eax
	movsd
	movsd
	movsd

; 331  : 		--*this;

	dec	DWORD PTR [ecx]
	dec	DWORD PTR [ecx+4]
	dec	DWORD PTR [ecx+8]
	pop	edi
	pop	esi

; 332  : 		return Result;
; 333  : 	}

	pop	ebp
	ret	8
??F?$tvec3@I$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<unsigned int,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@I$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec3@I$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<unsigned int,0>::operator++, COMDAT
; _this$ = ecx

; 321  : 	{

	push	ebp
	mov	ebp, esp

; 322  : 		tvec3<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	mov	esi, ecx
	mov	edi, eax
	movsd
	movsd
	movsd

; 323  : 		++*this;

	inc	DWORD PTR [ecx]
	inc	DWORD PTR [ecx+4]
	inc	DWORD PTR [ecx+8]
	pop	edi
	pop	esi

; 324  : 		return Result;
; 325  : 	}

	pop	ebp
	ret	8
??E?$tvec3@I$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<unsigned int,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@I$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec3@I$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec3<unsigned int,0>::operator--, COMDAT
; _this$ = ecx

; 313  : 		--this->x;

	dec	DWORD PTR [ecx]

; 314  : 		--this->y;
; 315  : 		--this->z;
; 316  : 		return *this;

	mov	eax, ecx
	dec	DWORD PTR [ecx+4]
	dec	DWORD PTR [ecx+8]

; 317  : 	}

	ret	0
??F?$tvec3@I$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<unsigned int,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@I$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec3@I$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec3<unsigned int,0>::operator++, COMDAT
; _this$ = ecx

; 304  : 		++this->x;

	inc	DWORD PTR [ecx]

; 305  : 		++this->y;
; 306  : 		++this->z;
; 307  : 		return *this;

	mov	eax, ecx
	inc	DWORD PTR [ecx+4]
	inc	DWORD PTR [ecx+8]

; 308  : 	}

	ret	0
??E?$tvec3@I$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<unsigned int,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec3@I$0A@@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec3@I$0A@@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec3<unsigned int,0>::operator=, COMDAT
; _this$ = ecx

; 103  : template struct tvec3<uint32, highp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	mov	edi, ecx
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tvec3@I$0A@@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec3<unsigned int,0>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@I$0A@@glm@@QAE@III@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
??0?$tvec3@I$0A@@glm@@QAE@III@Z PROC			; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0>, COMDAT
; _this$ = ecx

; 70   : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, ecx
	pop	ebp
	ret	12					; 0000000cH
??0?$tvec3@I$0A@@glm@@QAE@III@Z ENDP			; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@I$0A@@glm@@QAE@I@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 4
??0?$tvec3@I$0A@@glm@@QAE@I@Z PROC			; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0>, COMDAT
; _this$ = ecx

; 65   : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec3@I$0A@@glm@@QAE@I@Z ENDP			; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@I$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec3@I$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0>, COMDAT
; _this$ = ecx

; 60   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec3@I$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec3@I$0A@@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec3@I$0A@@glm@@QAE@ABU01@@Z PROC			; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0>, COMDAT
; _this$ = ecx

; 103  : template struct tvec3<uint32, highp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec3@I$0A@@glm@@QAE@ABU01@@Z ENDP			; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@I$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec3@I$0A@@glm@@QAE@XZ PROC			; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0>, COMDAT
; _this$ = ecx

; 40   : 		{}

	xor	eax, eax
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], eax
	mov	eax, ecx
	ret	0
??0?$tvec3@I$0A@@glm@@QAE@XZ ENDP			; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@I$0A@@glm@@QBEABIH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@I$0A@@glm@@QBEABIH@Z PROC			; glm::tvec3<unsigned int,0>::operator[], COMDAT
; _this$ = ecx

; 151  : 	{

	push	ebp
	mov	ebp, esp

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 154  : 	}

	pop	ebp
	ret	4
??A?$tvec3@I$0A@@glm@@QBEABIH@Z ENDP			; glm::tvec3<unsigned int,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@I$0A@@glm@@QAEAAIH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@I$0A@@glm@@QAEAAIH@Z PROC			; glm::tvec3<unsigned int,0>::operator[], COMDAT
; _this$ = ecx

; 144  : 	{

	push	ebp
	mov	ebp, esp

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 147  : 	}

	pop	ebp
	ret	4
??A?$tvec3@I$0A@@glm@@QAEAAIH@Z ENDP			; glm::tvec3<unsigned int,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@I$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@I$0A@@glm@@SAHXZ PROC			; glm::tvec3<unsigned int,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	push	3
	pop	eax
	ret	0
?length@?$tvec3@I$0A@@glm@@SAHXZ ENDP			; glm::tvec3<unsigned int,0>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@G$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec3@G$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<unsigned short,0>::operator--, COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		tvec3<T, P> Result(*this);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	ax, WORD PTR [ecx+4]
	mov	WORD PTR [edx+4], ax

; 331  : 		--*this;

	mov	eax, 65535				; 0000ffffH
	add	WORD PTR [ecx], ax
	add	WORD PTR [ecx+2], ax
	add	WORD PTR [ecx+4], ax

; 332  : 		return Result;

	mov	eax, edx

; 333  : 	}

	pop	ebp
	ret	8
??F?$tvec3@G$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<unsigned short,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@G$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec3@G$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<unsigned short,0>::operator++, COMDAT
; _this$ = ecx

; 321  : 	{

	push	ebp
	mov	ebp, esp

; 322  : 		tvec3<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	dx, WORD PTR [ecx+4]

; 323  : 		++*this;

	inc	WORD PTR [ecx]
	inc	WORD PTR [ecx+2]
	inc	WORD PTR [ecx+4]
	mov	WORD PTR [eax+4], dx

; 324  : 		return Result;
; 325  : 	}

	pop	ebp
	ret	8
??E?$tvec3@G$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<unsigned short,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@G$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec3@G$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec3<unsigned short,0>::operator--, COMDAT
; _this$ = ecx

; 313  : 		--this->x;

	mov	eax, 65535				; 0000ffffH
	add	WORD PTR [ecx], ax

; 314  : 		--this->y;

	add	WORD PTR [ecx+2], ax

; 315  : 		--this->z;

	add	WORD PTR [ecx+4], ax

; 316  : 		return *this;

	mov	eax, ecx

; 317  : 	}

	ret	0
??F?$tvec3@G$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<unsigned short,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@G$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec3@G$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec3<unsigned short,0>::operator++, COMDAT
; _this$ = ecx

; 304  : 		++this->x;

	inc	WORD PTR [ecx]

; 305  : 		++this->y;
; 306  : 		++this->z;
; 307  : 		return *this;

	mov	eax, ecx
	inc	WORD PTR [ecx+2]
	inc	WORD PTR [ecx+4]

; 308  : 	}

	ret	0
??E?$tvec3@G$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<unsigned short,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec3@G$0A@@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec3@G$0A@@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec3<unsigned short,0>::operator=, COMDAT
; _this$ = ecx

; 102  : template struct tvec3<uint16, highp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	ax, WORD PTR [edx+4]
	mov	WORD PTR [ecx+4], ax
	mov	eax, ecx
	pop	ebp
	ret	4
??4?$tvec3@G$0A@@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec3<unsigned short,0>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@G$0A@@glm@@QAE@GGG@Z
_TEXT	SEGMENT
_a$ = 8							; size = 2
_b$ = 12						; size = 2
_c$ = 16						; size = 2
??0?$tvec3@G$0A@@glm@@QAE@GGG@Z PROC			; glm::tvec3<unsigned short,0>::tvec3<unsigned short,0>, COMDAT
; _this$ = ecx

; 70   : 	{}

	push	ebp
	mov	ebp, esp
	mov	ax, WORD PTR _a$[ebp]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR _b$[ebp]
	mov	WORD PTR [ecx+2], ax
	mov	ax, WORD PTR _c$[ebp]
	mov	WORD PTR [ecx+4], ax
	mov	eax, ecx
	pop	ebp
	ret	12					; 0000000cH
??0?$tvec3@G$0A@@glm@@QAE@GGG@Z ENDP			; glm::tvec3<unsigned short,0>::tvec3<unsigned short,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@G$0A@@glm@@QAE@G@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 2
??0?$tvec3@G$0A@@glm@@QAE@G@Z PROC			; glm::tvec3<unsigned short,0>::tvec3<unsigned short,0>, COMDAT
; _this$ = ecx

; 65   : 	{}

	push	ebp
	mov	ebp, esp
	mov	ax, WORD PTR _scalar$[ebp]
	mov	WORD PTR [ecx], ax
	mov	WORD PTR [ecx+2], ax
	mov	WORD PTR [ecx+4], ax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec3@G$0A@@glm@@QAE@G@Z ENDP			; glm::tvec3<unsigned short,0>::tvec3<unsigned short,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@G$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec3@G$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec3<unsigned short,0>::tvec3<unsigned short,0>, COMDAT
; _this$ = ecx

; 60   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec3@G$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec3<unsigned short,0>::tvec3<unsigned short,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec3@G$0A@@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec3@G$0A@@glm@@QAE@ABU01@@Z PROC			; glm::tvec3<unsigned short,0>::tvec3<unsigned short,0>, COMDAT
; _this$ = ecx

; 102  : template struct tvec3<uint16, highp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR [edx+2]
	mov	WORD PTR [ecx+2], ax
	mov	ax, WORD PTR [edx+2]
	mov	WORD PTR [ecx+2], ax
	mov	ax, WORD PTR [edx+2]
	mov	WORD PTR [ecx+2], ax
	mov	ax, WORD PTR [edx+4]
	mov	WORD PTR [ecx+4], ax
	mov	ax, WORD PTR [edx+4]
	mov	WORD PTR [ecx+4], ax
	mov	ax, WORD PTR [edx+4]
	mov	WORD PTR [ecx+4], ax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec3@G$0A@@glm@@QAE@ABU01@@Z ENDP			; glm::tvec3<unsigned short,0>::tvec3<unsigned short,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@G$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec3@G$0A@@glm@@QAE@XZ PROC			; glm::tvec3<unsigned short,0>::tvec3<unsigned short,0>, COMDAT
; _this$ = ecx

; 40   : 		{}

	xor	eax, eax
	mov	DWORD PTR [ecx], eax
	mov	WORD PTR [ecx+4], ax
	mov	eax, ecx
	ret	0
??0?$tvec3@G$0A@@glm@@QAE@XZ ENDP			; glm::tvec3<unsigned short,0>::tvec3<unsigned short,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@G$0A@@glm@@QBEABGH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@G$0A@@glm@@QBEABGH@Z PROC			; glm::tvec3<unsigned short,0>::operator[], COMDAT
; _this$ = ecx

; 151  : 	{

	push	ebp
	mov	ebp, esp

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 154  : 	}

	pop	ebp
	ret	4
??A?$tvec3@G$0A@@glm@@QBEABGH@Z ENDP			; glm::tvec3<unsigned short,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@G$0A@@glm@@QAEAAGH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@G$0A@@glm@@QAEAAGH@Z PROC			; glm::tvec3<unsigned short,0>::operator[], COMDAT
; _this$ = ecx

; 144  : 	{

	push	ebp
	mov	ebp, esp

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 147  : 	}

	pop	ebp
	ret	4
??A?$tvec3@G$0A@@glm@@QAEAAGH@Z ENDP			; glm::tvec3<unsigned short,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@G$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@G$0A@@glm@@SAHXZ PROC			; glm::tvec3<unsigned short,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	push	3
	pop	eax
	ret	0
?length@?$tvec3@G$0A@@glm@@SAHXZ ENDP			; glm::tvec3<unsigned short,0>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@E$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec3@E$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<unsigned char,0>::operator--, COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		tvec3<T, P> Result(*this);

	mov	dx, WORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	WORD PTR [eax], dx
	mov	dl, BYTE PTR [ecx+2]

; 331  : 		--*this;

	dec	BYTE PTR [ecx]
	dec	BYTE PTR [ecx+1]
	dec	BYTE PTR [ecx+2]
	mov	BYTE PTR [eax+2], dl

; 332  : 		return Result;
; 333  : 	}

	pop	ebp
	ret	8
??F?$tvec3@E$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<unsigned char,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@E$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec3@E$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<unsigned char,0>::operator++, COMDAT
; _this$ = ecx

; 321  : 	{

	push	ebp
	mov	ebp, esp

; 322  : 		tvec3<T, P> Result(*this);

	mov	dx, WORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	WORD PTR [eax], dx
	mov	dl, BYTE PTR [ecx+2]

; 323  : 		++*this;

	inc	BYTE PTR [ecx]
	inc	BYTE PTR [ecx+1]
	inc	BYTE PTR [ecx+2]
	mov	BYTE PTR [eax+2], dl

; 324  : 		return Result;
; 325  : 	}

	pop	ebp
	ret	8
??E?$tvec3@E$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<unsigned char,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@E$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec3@E$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec3<unsigned char,0>::operator--, COMDAT
; _this$ = ecx

; 313  : 		--this->x;

	dec	BYTE PTR [ecx]

; 314  : 		--this->y;
; 315  : 		--this->z;
; 316  : 		return *this;

	mov	eax, ecx
	dec	BYTE PTR [ecx+1]
	dec	BYTE PTR [ecx+2]

; 317  : 	}

	ret	0
??F?$tvec3@E$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<unsigned char,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@E$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec3@E$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec3<unsigned char,0>::operator++, COMDAT
; _this$ = ecx

; 304  : 		++this->x;

	inc	BYTE PTR [ecx]

; 305  : 		++this->y;
; 306  : 		++this->z;
; 307  : 		return *this;

	mov	eax, ecx
	inc	BYTE PTR [ecx+1]
	inc	BYTE PTR [ecx+2]

; 308  : 	}

	ret	0
??E?$tvec3@E$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<unsigned char,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec3@E$0A@@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec3@E$0A@@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec3<unsigned char,0>::operator=, COMDAT
; _this$ = ecx

; 101  : template struct tvec3<uint8, highp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax
	mov	al, BYTE PTR [edx+2]
	mov	BYTE PTR [ecx+2], al
	mov	eax, ecx
	pop	ebp
	ret	4
??4?$tvec3@E$0A@@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec3<unsigned char,0>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@E$0A@@glm@@QAE@EEE@Z
_TEXT	SEGMENT
_a$ = 8							; size = 1
_b$ = 12						; size = 1
_c$ = 16						; size = 1
??0?$tvec3@E$0A@@glm@@QAE@EEE@Z PROC			; glm::tvec3<unsigned char,0>::tvec3<unsigned char,0>, COMDAT
; _this$ = ecx

; 70   : 	{}

	push	ebp
	mov	ebp, esp
	mov	al, BYTE PTR _a$[ebp]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR _b$[ebp]
	mov	BYTE PTR [ecx+1], al
	mov	al, BYTE PTR _c$[ebp]
	mov	BYTE PTR [ecx+2], al
	mov	eax, ecx
	pop	ebp
	ret	12					; 0000000cH
??0?$tvec3@E$0A@@glm@@QAE@EEE@Z ENDP			; glm::tvec3<unsigned char,0>::tvec3<unsigned char,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@E$0A@@glm@@QAE@E@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 1
??0?$tvec3@E$0A@@glm@@QAE@E@Z PROC			; glm::tvec3<unsigned char,0>::tvec3<unsigned char,0>, COMDAT
; _this$ = ecx

; 65   : 	{}

	push	ebp
	mov	ebp, esp
	mov	al, BYTE PTR _scalar$[ebp]
	mov	BYTE PTR [ecx], al
	mov	BYTE PTR [ecx+1], al
	mov	BYTE PTR [ecx+2], al
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec3@E$0A@@glm@@QAE@E@Z ENDP			; glm::tvec3<unsigned char,0>::tvec3<unsigned char,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@E$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec3@E$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec3<unsigned char,0>::tvec3<unsigned char,0>, COMDAT
; _this$ = ecx

; 60   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec3@E$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec3<unsigned char,0>::tvec3<unsigned char,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec3@E$0A@@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec3@E$0A@@glm@@QAE@ABU01@@Z PROC			; glm::tvec3<unsigned char,0>::tvec3<unsigned char,0>, COMDAT
; _this$ = ecx

; 101  : template struct tvec3<uint8, highp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR [edx+1]
	mov	BYTE PTR [ecx+1], al
	mov	al, BYTE PTR [edx+1]
	mov	BYTE PTR [ecx+1], al
	mov	al, BYTE PTR [edx+1]
	mov	BYTE PTR [ecx+1], al
	mov	al, BYTE PTR [edx+2]
	mov	BYTE PTR [ecx+2], al
	mov	al, BYTE PTR [edx+2]
	mov	BYTE PTR [ecx+2], al
	mov	al, BYTE PTR [edx+2]
	mov	BYTE PTR [ecx+2], al
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec3@E$0A@@glm@@QAE@ABU01@@Z ENDP			; glm::tvec3<unsigned char,0>::tvec3<unsigned char,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@E$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec3@E$0A@@glm@@QAE@XZ PROC			; glm::tvec3<unsigned char,0>::tvec3<unsigned char,0>, COMDAT
; _this$ = ecx

; 40   : 		{}

	xor	eax, eax
	mov	WORD PTR [ecx], ax
	mov	BYTE PTR [ecx+2], al
	mov	eax, ecx
	ret	0
??0?$tvec3@E$0A@@glm@@QAE@XZ ENDP			; glm::tvec3<unsigned char,0>::tvec3<unsigned char,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@E$0A@@glm@@QBEABEH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@E$0A@@glm@@QBEABEH@Z PROC			; glm::tvec3<unsigned char,0>::operator[], COMDAT
; _this$ = ecx

; 151  : 	{

	push	ebp
	mov	ebp, esp

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 154  : 	}

	pop	ebp
	ret	4
??A?$tvec3@E$0A@@glm@@QBEABEH@Z ENDP			; glm::tvec3<unsigned char,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@E$0A@@glm@@QAEAAEH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@E$0A@@glm@@QAEAAEH@Z PROC			; glm::tvec3<unsigned char,0>::operator[], COMDAT
; _this$ = ecx

; 144  : 	{

	push	ebp
	mov	ebp, esp

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 147  : 	}

	pop	ebp
	ret	4
??A?$tvec3@E$0A@@glm@@QAEAAEH@Z ENDP			; glm::tvec3<unsigned char,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@E$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@E$0A@@glm@@SAHXZ PROC			; glm::tvec3<unsigned char,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	push	3
	pop	eax
	ret	0
?length@?$tvec3@E$0A@@glm@@SAHXZ ENDP			; glm::tvec3<unsigned char,0>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@N$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec3@N$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<double,1>::operator--, COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		tvec3<T, P> Result(*this);
; 331  : 		--*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	mov	edx, ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	movups	xmm0, XMMWORD PTR [edx]
	push	6
	pop	ecx
	subpd	xmm0, xmm1
	mov	esi, edx
	mov	edi, eax
	rep movsd
	movups	XMMWORD PTR [edx], xmm0
	pop	edi
	movsd	xmm0, QWORD PTR [edx+16]
	subsd	xmm0, xmm1
	pop	esi
	movsd	QWORD PTR [edx+16], xmm0

; 332  : 		return Result;
; 333  : 	}

	pop	ebp
	ret	8
??F?$tvec3@N$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<double,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@N$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec3@N$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<double,1>::operator++, COMDAT
; _this$ = ecx

; 321  : 	{

	push	ebp
	mov	ebp, esp

; 322  : 		tvec3<T, P> Result(*this);
; 323  : 		++*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	mov	edx, ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	movups	xmm0, XMMWORD PTR [edx]
	push	6
	pop	ecx
	addpd	xmm0, xmm1
	mov	esi, edx
	mov	edi, eax
	rep movsd
	movups	XMMWORD PTR [edx], xmm0
	pop	edi
	movsd	xmm0, QWORD PTR [edx+16]
	addsd	xmm0, xmm1
	pop	esi
	movsd	QWORD PTR [edx+16], xmm0

; 324  : 		return Result;
; 325  : 	}

	pop	ebp
	ret	8
??E?$tvec3@N$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<double,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@N$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec3@N$00@glm@@QAEAAU01@XZ PROC			; glm::tvec3<double,1>::operator--, COMDAT
; _this$ = ecx

; 313  : 		--this->x;

	movups	xmm0, XMMWORD PTR [ecx]

; 314  : 		--this->y;
; 315  : 		--this->z;
; 316  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [ecx+16]
	subsd	xmm0, xmm1
	movsd	QWORD PTR [ecx+16], xmm0

; 317  : 	}

	ret	0
??F?$tvec3@N$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<double,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@N$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec3@N$00@glm@@QAEAAU01@XZ PROC			; glm::tvec3<double,1>::operator++, COMDAT
; _this$ = ecx

; 304  : 		++this->x;

	movups	xmm0, XMMWORD PTR [ecx]

; 305  : 		++this->y;
; 306  : 		++this->z;
; 307  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [ecx+16]
	addsd	xmm0, xmm1
	movsd	QWORD PTR [ecx+16], xmm0

; 308  : 	}

	ret	0
??E?$tvec3@N$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<double,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec3@N$00@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec3@N$00@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec3<double,1>::operator=, COMDAT
; _this$ = ecx

; 99   : template struct tvec3<float64, mediump>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	6
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tvec3@N$00@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec3<double,1>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@N$00@glm@@QAE@NNN@Z
_TEXT	SEGMENT
_a$ = 8							; size = 8
_b$ = 16						; size = 8
_c$ = 24						; size = 8
??0?$tvec3@N$00@glm@@QAE@NNN@Z PROC			; glm::tvec3<double,1>::tvec3<double,1>, COMDAT
; _this$ = ecx

; 70   : 	{}

	push	ebp
	mov	ebp, esp
	movsd	xmm0, QWORD PTR _a$[ebp]
	mov	eax, ecx
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR _b$[ebp]
	movsd	QWORD PTR [ecx+8], xmm0
	movsd	xmm0, QWORD PTR _c$[ebp]
	movsd	QWORD PTR [ecx+16], xmm0
	pop	ebp
	ret	24					; 00000018H
??0?$tvec3@N$00@glm@@QAE@NNN@Z ENDP			; glm::tvec3<double,1>::tvec3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@N$00@glm@@QAE@N@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 8
??0?$tvec3@N$00@glm@@QAE@N@Z PROC			; glm::tvec3<double,1>::tvec3<double,1>, COMDAT
; _this$ = ecx

; 65   : 	{}

	push	ebp
	mov	ebp, esp
	movsd	xmm0, QWORD PTR _scalar$[ebp]
	mov	eax, ecx
	unpcklpd xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movsd	QWORD PTR [ecx+16], xmm0
	pop	ebp
	ret	8
??0?$tvec3@N$00@glm@@QAE@N@Z ENDP			; glm::tvec3<double,1>::tvec3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@N$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec3@N$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec3<double,1>::tvec3<double,1>, COMDAT
; _this$ = ecx

; 60   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec3@N$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec3<double,1>::tvec3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec3@N$00@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec3@N$00@glm@@QAE@ABU01@@Z PROC			; glm::tvec3<double,1>::tvec3<double,1>, COMDAT
; _this$ = ecx

; 99   : template struct tvec3<float64, mediump>;

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ___that$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	QWORD PTR [ecx+8], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	QWORD PTR [ecx+8], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	QWORD PTR [ecx+8], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR [ecx+16], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR [ecx+16], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	mov	eax, ecx
	movsd	QWORD PTR [ecx+16], xmm0
	pop	ebp
	ret	4
??0?$tvec3@N$00@glm@@QAE@ABU01@@Z ENDP			; glm::tvec3<double,1>::tvec3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@N$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec3@N$00@glm@@QAE@XZ PROC			; glm::tvec3<double,1>::tvec3<double,1>, COMDAT
; _this$ = ecx

; 40   : 		{}

	xorps	xmm0, xmm0
	mov	eax, ecx
	movups	XMMWORD PTR [ecx], xmm0
	movsd	QWORD PTR [ecx+16], xmm0
	ret	0
??0?$tvec3@N$00@glm@@QAE@XZ ENDP			; glm::tvec3<double,1>::tvec3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@N$00@glm@@QBEABNH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@N$00@glm@@QBEABNH@Z PROC			; glm::tvec3<double,1>::operator[], COMDAT
; _this$ = ecx

; 151  : 	{

	push	ebp
	mov	ebp, esp

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 154  : 	}

	pop	ebp
	ret	4
??A?$tvec3@N$00@glm@@QBEABNH@Z ENDP			; glm::tvec3<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@N$00@glm@@QAEAANH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@N$00@glm@@QAEAANH@Z PROC			; glm::tvec3<double,1>::operator[], COMDAT
; _this$ = ecx

; 144  : 	{

	push	ebp
	mov	ebp, esp

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 147  : 	}

	pop	ebp
	ret	4
??A?$tvec3@N$00@glm@@QAEAANH@Z ENDP			; glm::tvec3<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@N$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@N$00@glm@@SAHXZ PROC			; glm::tvec3<double,1>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	push	3
	pop	eax
	ret	0
?length@?$tvec3@N$00@glm@@SAHXZ ENDP			; glm::tvec3<double,1>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@M$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec3@M$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<float,1>::operator--, COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		tvec3<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 331  : 		--*this;

	movss	xmm0, DWORD PTR [ecx]
	movss	xmm1, DWORD PTR __real@3f800000
	push	esi
	push	edi
	mov	esi, ecx
	subss	xmm0, xmm1
	mov	edi, eax
	movsd
	movsd
	movsd
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	subss	xmm0, xmm1
	pop	edi
	pop	esi
	movss	DWORD PTR [ecx+4], xmm0
	movss	xmm0, DWORD PTR [ecx+8]
	subss	xmm0, xmm1
	movss	DWORD PTR [ecx+8], xmm0

; 332  : 		return Result;
; 333  : 	}

	pop	ebp
	ret	8
??F?$tvec3@M$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<float,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@M$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec3@M$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<float,1>::operator++, COMDAT
; _this$ = ecx

; 321  : 	{

	push	ebp
	mov	ebp, esp

; 322  : 		tvec3<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 323  : 		++*this;

	movss	xmm0, DWORD PTR [ecx]
	movss	xmm1, DWORD PTR __real@3f800000
	push	esi
	push	edi
	mov	esi, ecx
	addss	xmm0, xmm1
	mov	edi, eax
	movsd
	movsd
	movsd
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	addss	xmm0, xmm1
	pop	edi
	pop	esi
	movss	DWORD PTR [ecx+4], xmm0
	movss	xmm0, DWORD PTR [ecx+8]
	addss	xmm0, xmm1
	movss	DWORD PTR [ecx+8], xmm0

; 324  : 		return Result;
; 325  : 	}

	pop	ebp
	ret	8
??E?$tvec3@M$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<float,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@M$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec3@M$00@glm@@QAEAAU01@XZ PROC			; glm::tvec3<float,1>::operator--, COMDAT
; _this$ = ecx

; 313  : 		--this->x;

	movss	xmm0, DWORD PTR [ecx]

; 314  : 		--this->y;
; 315  : 		--this->z;
; 316  : 		return *this;

	mov	eax, ecx
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm0, xmm1
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	subss	xmm0, xmm1
	movss	DWORD PTR [ecx+4], xmm0
	movss	xmm0, DWORD PTR [ecx+8]
	subss	xmm0, xmm1
	movss	DWORD PTR [ecx+8], xmm0

; 317  : 	}

	ret	0
??F?$tvec3@M$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<float,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@M$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec3@M$00@glm@@QAEAAU01@XZ PROC			; glm::tvec3<float,1>::operator++, COMDAT
; _this$ = ecx

; 304  : 		++this->x;

	movss	xmm0, DWORD PTR [ecx]

; 305  : 		++this->y;
; 306  : 		++this->z;
; 307  : 		return *this;

	mov	eax, ecx
	movss	xmm1, DWORD PTR __real@3f800000
	addss	xmm0, xmm1
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	addss	xmm0, xmm1
	movss	DWORD PTR [ecx+4], xmm0
	movss	xmm0, DWORD PTR [ecx+8]
	addss	xmm0, xmm1
	movss	DWORD PTR [ecx+8], xmm0

; 308  : 	}

	ret	0
??E?$tvec3@M$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<float,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec3@M$00@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec3@M$00@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec3<float,1>::operator=, COMDAT
; _this$ = ecx

; 98   : template struct tvec3<float32, mediump>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	mov	edi, ecx
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tvec3@M$00@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec3<float,1>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$00@glm@@QAE@MMM@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
??0?$tvec3@M$00@glm@@QAE@MMM@Z PROC			; glm::tvec3<float,1>::tvec3<float,1>, COMDAT
; _this$ = ecx

; 70   : 	{}

	push	ebp
	mov	ebp, esp
	movss	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR _b$[ebp]
	movss	DWORD PTR [ecx+4], xmm0
	movss	xmm0, DWORD PTR _c$[ebp]
	movss	DWORD PTR [ecx+8], xmm0
	pop	ebp
	ret	12					; 0000000cH
??0?$tvec3@M$00@glm@@QAE@MMM@Z ENDP			; glm::tvec3<float,1>::tvec3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$00@glm@@QAE@M@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 4
??0?$tvec3@M$00@glm@@QAE@M@Z PROC			; glm::tvec3<float,1>::tvec3<float,1>, COMDAT
; _this$ = ecx

; 65   : 	{}

	push	ebp
	mov	ebp, esp
	movss	xmm0, DWORD PTR _scalar$[ebp]
	mov	eax, ecx
	movss	DWORD PTR [ecx], xmm0
	movss	DWORD PTR [ecx+4], xmm0
	movss	DWORD PTR [ecx+8], xmm0
	pop	ebp
	ret	4
??0?$tvec3@M$00@glm@@QAE@M@Z ENDP			; glm::tvec3<float,1>::tvec3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec3@M$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec3<float,1>::tvec3<float,1>, COMDAT
; _this$ = ecx

; 60   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec3@M$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec3<float,1>::tvec3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec3@M$00@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec3@M$00@glm@@QAE@ABU01@@Z PROC			; glm::tvec3<float,1>::tvec3<float,1>, COMDAT
; _this$ = ecx

; 98   : template struct tvec3<float32, mediump>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec3@M$00@glm@@QAE@ABU01@@Z ENDP			; glm::tvec3<float,1>::tvec3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec3@M$00@glm@@QAE@XZ PROC			; glm::tvec3<float,1>::tvec3<float,1>, COMDAT
; _this$ = ecx

; 40   : 		{}

	and	DWORD PTR [ecx], 0
	mov	eax, ecx
	and	DWORD PTR [ecx+4], 0
	and	DWORD PTR [ecx+8], 0
	ret	0
??0?$tvec3@M$00@glm@@QAE@XZ ENDP			; glm::tvec3<float,1>::tvec3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@M$00@glm@@QBEABMH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@M$00@glm@@QBEABMH@Z PROC			; glm::tvec3<float,1>::operator[], COMDAT
; _this$ = ecx

; 151  : 	{

	push	ebp
	mov	ebp, esp

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 154  : 	}

	pop	ebp
	ret	4
??A?$tvec3@M$00@glm@@QBEABMH@Z ENDP			; glm::tvec3<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@M$00@glm@@QAEAAMH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@M$00@glm@@QAEAAMH@Z PROC			; glm::tvec3<float,1>::operator[], COMDAT
; _this$ = ecx

; 144  : 	{

	push	ebp
	mov	ebp, esp

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 147  : 	}

	pop	ebp
	ret	4
??A?$tvec3@M$00@glm@@QAEAAMH@Z ENDP			; glm::tvec3<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@M$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@M$00@glm@@SAHXZ PROC			; glm::tvec3<float,1>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	push	3
	pop	eax
	ret	0
?length@?$tvec3@M$00@glm@@SAHXZ ENDP			; glm::tvec3<float,1>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@_J$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec3@_J$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<__int64,1>::operator--, COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		tvec3<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, ecx
	push	esi
	push	edi
	push	6
	pop	ecx
	mov	esi, edx
	mov	edi, eax
	rep movsd

; 331  : 		--*this;

	or	ecx, -1
	add	DWORD PTR [edx], ecx
	pop	edi
	adc	DWORD PTR [edx+4], ecx
	add	DWORD PTR [edx+8], ecx
	pop	esi
	adc	DWORD PTR [edx+12], ecx
	add	DWORD PTR [edx+16], ecx
	adc	DWORD PTR [edx+20], ecx

; 332  : 		return Result;
; 333  : 	}

	pop	ebp
	ret	8
??F?$tvec3@_J$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<__int64,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@_J$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec3@_J$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<__int64,1>::operator++, COMDAT
; _this$ = ecx

; 321  : 	{

	push	ebp
	mov	ebp, esp

; 322  : 		tvec3<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, ecx
	push	esi
	push	edi
	push	6
	pop	ecx
	mov	esi, edx
	mov	edi, eax
	rep movsd

; 323  : 		++*this;

	add	DWORD PTR [edx], 1
	push	0
	pop	ecx
	adc	DWORD PTR [edx+4], ecx
	add	DWORD PTR [edx+8], 1
	pop	edi
	adc	DWORD PTR [edx+12], ecx
	add	DWORD PTR [edx+16], 1
	pop	esi
	adc	DWORD PTR [edx+20], ecx

; 324  : 		return Result;
; 325  : 	}

	pop	ebp
	ret	8
??E?$tvec3@_J$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<__int64,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@_J$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec3@_J$00@glm@@QAEAAU01@XZ PROC			; glm::tvec3<__int64,1>::operator--, COMDAT
; _this$ = ecx

; 313  : 		--this->x;

	or	eax, -1
	add	DWORD PTR [ecx], eax
	adc	DWORD PTR [ecx+4], eax

; 314  : 		--this->y;

	add	DWORD PTR [ecx+8], eax
	adc	DWORD PTR [ecx+12], eax

; 315  : 		--this->z;

	add	DWORD PTR [ecx+16], eax
	adc	DWORD PTR [ecx+20], eax

; 316  : 		return *this;

	mov	eax, ecx

; 317  : 	}

	ret	0
??F?$tvec3@_J$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<__int64,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@_J$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec3@_J$00@glm@@QAEAAU01@XZ PROC			; glm::tvec3<__int64,1>::operator++, COMDAT
; _this$ = ecx

; 304  : 		++this->x;

	add	DWORD PTR [ecx], 1
	push	0
	pop	eax
	adc	DWORD PTR [ecx+4], eax

; 305  : 		++this->y;

	add	DWORD PTR [ecx+8], 1
	adc	DWORD PTR [ecx+12], eax

; 306  : 		++this->z;

	add	DWORD PTR [ecx+16], 1
	adc	DWORD PTR [ecx+20], eax

; 307  : 		return *this;

	mov	eax, ecx

; 308  : 	}

	ret	0
??E?$tvec3@_J$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<__int64,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec3@_J$00@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec3@_J$00@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec3<__int64,1>::operator=, COMDAT
; _this$ = ecx

; 97   : template struct tvec3<int64, mediump>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	6
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tvec3@_J$00@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec3<__int64,1>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_J$00@glm@@QAE@_J00@Z
_TEXT	SEGMENT
_a$ = 8							; size = 8
_b$ = 16						; size = 8
_c$ = 24						; size = 8
??0?$tvec3@_J$00@glm@@QAE@_J00@Z PROC			; glm::tvec3<__int64,1>::tvec3<__int64,1>, COMDAT
; _this$ = ecx

; 70   : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _a$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _b$[ebp+4]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR _c$[ebp+4]
	mov	DWORD PTR [ecx+20], eax
	mov	eax, ecx
	pop	ebp
	ret	24					; 00000018H
??0?$tvec3@_J$00@glm@@QAE@_J00@Z ENDP			; glm::tvec3<__int64,1>::tvec3<__int64,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_J$00@glm@@QAE@_J@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 8
??0?$tvec3@_J$00@glm@@QAE@_J@Z PROC			; glm::tvec3<__int64,1>::tvec3<__int64,1>, COMDAT
; _this$ = ecx

; 65   : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _scalar$[ebp+4]
	mov	edx, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+12], eax
	mov	DWORD PTR [ecx+20], eax
	mov	eax, ecx
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+8], edx
	mov	DWORD PTR [ecx+16], edx
	pop	ebp
	ret	8
??0?$tvec3@_J$00@glm@@QAE@_J@Z ENDP			; glm::tvec3<__int64,1>::tvec3<__int64,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_J$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec3@_J$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec3<__int64,1>::tvec3<__int64,1>, COMDAT
; _this$ = ecx

; 60   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec3@_J$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec3<__int64,1>::tvec3<__int64,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec3@_J$00@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec3@_J$00@glm@@QAE@ABU01@@Z PROC			; glm::tvec3<__int64,1>::tvec3<__int64,1>, COMDAT
; _this$ = ecx

; 97   : template struct tvec3<int64, mediump>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx+20], eax
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx+20], eax
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx+20], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec3@_J$00@glm@@QAE@ABU01@@Z ENDP			; glm::tvec3<__int64,1>::tvec3<__int64,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_J$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec3@_J$00@glm@@QAE@XZ PROC			; glm::tvec3<__int64,1>::tvec3<__int64,1>, COMDAT
; _this$ = ecx

; 40   : 		{}

	xor	eax, eax
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR [ecx+12], eax
	mov	DWORD PTR [ecx+16], eax
	mov	DWORD PTR [ecx+20], eax
	mov	eax, ecx
	ret	0
??0?$tvec3@_J$00@glm@@QAE@XZ ENDP			; glm::tvec3<__int64,1>::tvec3<__int64,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@_J$00@glm@@QBEAB_JH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@_J$00@glm@@QBEAB_JH@Z PROC			; glm::tvec3<__int64,1>::operator[], COMDAT
; _this$ = ecx

; 151  : 	{

	push	ebp
	mov	ebp, esp

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 154  : 	}

	pop	ebp
	ret	4
??A?$tvec3@_J$00@glm@@QBEAB_JH@Z ENDP			; glm::tvec3<__int64,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@_J$00@glm@@QAEAA_JH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@_J$00@glm@@QAEAA_JH@Z PROC			; glm::tvec3<__int64,1>::operator[], COMDAT
; _this$ = ecx

; 144  : 	{

	push	ebp
	mov	ebp, esp

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 147  : 	}

	pop	ebp
	ret	4
??A?$tvec3@_J$00@glm@@QAEAA_JH@Z ENDP			; glm::tvec3<__int64,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@_J$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@_J$00@glm@@SAHXZ PROC			; glm::tvec3<__int64,1>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	push	3
	pop	eax
	ret	0
?length@?$tvec3@_J$00@glm@@SAHXZ ENDP			; glm::tvec3<__int64,1>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@H$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec3@H$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<int,1>::operator--, COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		tvec3<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	mov	esi, ecx
	mov	edi, eax
	movsd
	movsd
	movsd

; 331  : 		--*this;

	dec	DWORD PTR [ecx]
	dec	DWORD PTR [ecx+4]
	dec	DWORD PTR [ecx+8]
	pop	edi
	pop	esi

; 332  : 		return Result;
; 333  : 	}

	pop	ebp
	ret	8
??F?$tvec3@H$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<int,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@H$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec3@H$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<int,1>::operator++, COMDAT
; _this$ = ecx

; 321  : 	{

	push	ebp
	mov	ebp, esp

; 322  : 		tvec3<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	mov	esi, ecx
	mov	edi, eax
	movsd
	movsd
	movsd

; 323  : 		++*this;

	inc	DWORD PTR [ecx]
	inc	DWORD PTR [ecx+4]
	inc	DWORD PTR [ecx+8]
	pop	edi
	pop	esi

; 324  : 		return Result;
; 325  : 	}

	pop	ebp
	ret	8
??E?$tvec3@H$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<int,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@H$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec3@H$00@glm@@QAEAAU01@XZ PROC			; glm::tvec3<int,1>::operator--, COMDAT
; _this$ = ecx

; 313  : 		--this->x;

	dec	DWORD PTR [ecx]

; 314  : 		--this->y;
; 315  : 		--this->z;
; 316  : 		return *this;

	mov	eax, ecx
	dec	DWORD PTR [ecx+4]
	dec	DWORD PTR [ecx+8]

; 317  : 	}

	ret	0
??F?$tvec3@H$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<int,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@H$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec3@H$00@glm@@QAEAAU01@XZ PROC			; glm::tvec3<int,1>::operator++, COMDAT
; _this$ = ecx

; 304  : 		++this->x;

	inc	DWORD PTR [ecx]

; 305  : 		++this->y;
; 306  : 		++this->z;
; 307  : 		return *this;

	mov	eax, ecx
	inc	DWORD PTR [ecx+4]
	inc	DWORD PTR [ecx+8]

; 308  : 	}

	ret	0
??E?$tvec3@H$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<int,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec3@H$00@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec3@H$00@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec3<int,1>::operator=, COMDAT
; _this$ = ecx

; 96   : template struct tvec3<int32, mediump>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	mov	edi, ecx
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tvec3@H$00@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec3<int,1>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@H$00@glm@@QAE@HHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
??0?$tvec3@H$00@glm@@QAE@HHH@Z PROC			; glm::tvec3<int,1>::tvec3<int,1>, COMDAT
; _this$ = ecx

; 70   : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, ecx
	pop	ebp
	ret	12					; 0000000cH
??0?$tvec3@H$00@glm@@QAE@HHH@Z ENDP			; glm::tvec3<int,1>::tvec3<int,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@H$00@glm@@QAE@H@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 4
??0?$tvec3@H$00@glm@@QAE@H@Z PROC			; glm::tvec3<int,1>::tvec3<int,1>, COMDAT
; _this$ = ecx

; 65   : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec3@H$00@glm@@QAE@H@Z ENDP			; glm::tvec3<int,1>::tvec3<int,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@H$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec3@H$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec3<int,1>::tvec3<int,1>, COMDAT
; _this$ = ecx

; 60   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec3@H$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec3<int,1>::tvec3<int,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec3@H$00@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec3@H$00@glm@@QAE@ABU01@@Z PROC			; glm::tvec3<int,1>::tvec3<int,1>, COMDAT
; _this$ = ecx

; 96   : template struct tvec3<int32, mediump>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec3@H$00@glm@@QAE@ABU01@@Z ENDP			; glm::tvec3<int,1>::tvec3<int,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@H$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec3@H$00@glm@@QAE@XZ PROC			; glm::tvec3<int,1>::tvec3<int,1>, COMDAT
; _this$ = ecx

; 40   : 		{}

	xor	eax, eax
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], eax
	mov	eax, ecx
	ret	0
??0?$tvec3@H$00@glm@@QAE@XZ ENDP			; glm::tvec3<int,1>::tvec3<int,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@H$00@glm@@QBEABHH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@H$00@glm@@QBEABHH@Z PROC			; glm::tvec3<int,1>::operator[], COMDAT
; _this$ = ecx

; 151  : 	{

	push	ebp
	mov	ebp, esp

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 154  : 	}

	pop	ebp
	ret	4
??A?$tvec3@H$00@glm@@QBEABHH@Z ENDP			; glm::tvec3<int,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@H$00@glm@@QAEAAHH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@H$00@glm@@QAEAAHH@Z PROC			; glm::tvec3<int,1>::operator[], COMDAT
; _this$ = ecx

; 144  : 	{

	push	ebp
	mov	ebp, esp

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 147  : 	}

	pop	ebp
	ret	4
??A?$tvec3@H$00@glm@@QAEAAHH@Z ENDP			; glm::tvec3<int,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@H$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@H$00@glm@@SAHXZ PROC			; glm::tvec3<int,1>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	push	3
	pop	eax
	ret	0
?length@?$tvec3@H$00@glm@@SAHXZ ENDP			; glm::tvec3<int,1>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@F$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec3@F$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<short,1>::operator--, COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		tvec3<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	dx, WORD PTR [ecx+4]

; 331  : 		--*this;

	dec	WORD PTR [ecx]
	dec	WORD PTR [ecx+2]
	dec	WORD PTR [ecx+4]
	mov	WORD PTR [eax+4], dx

; 332  : 		return Result;
; 333  : 	}

	pop	ebp
	ret	8
??F?$tvec3@F$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<short,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@F$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec3@F$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<short,1>::operator++, COMDAT
; _this$ = ecx

; 321  : 	{

	push	ebp
	mov	ebp, esp

; 322  : 		tvec3<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	dx, WORD PTR [ecx+4]

; 323  : 		++*this;

	inc	WORD PTR [ecx]
	inc	WORD PTR [ecx+2]
	inc	WORD PTR [ecx+4]
	mov	WORD PTR [eax+4], dx

; 324  : 		return Result;
; 325  : 	}

	pop	ebp
	ret	8
??E?$tvec3@F$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<short,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@F$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec3@F$00@glm@@QAEAAU01@XZ PROC			; glm::tvec3<short,1>::operator--, COMDAT
; _this$ = ecx

; 313  : 		--this->x;

	dec	WORD PTR [ecx]

; 314  : 		--this->y;
; 315  : 		--this->z;
; 316  : 		return *this;

	mov	eax, ecx
	dec	WORD PTR [ecx+2]
	dec	WORD PTR [ecx+4]

; 317  : 	}

	ret	0
??F?$tvec3@F$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<short,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@F$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec3@F$00@glm@@QAEAAU01@XZ PROC			; glm::tvec3<short,1>::operator++, COMDAT
; _this$ = ecx

; 304  : 		++this->x;

	inc	WORD PTR [ecx]

; 305  : 		++this->y;
; 306  : 		++this->z;
; 307  : 		return *this;

	mov	eax, ecx
	inc	WORD PTR [ecx+2]
	inc	WORD PTR [ecx+4]

; 308  : 	}

	ret	0
??E?$tvec3@F$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<short,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec3@F$00@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec3@F$00@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec3<short,1>::operator=, COMDAT
; _this$ = ecx

; 95   : template struct tvec3<int16, mediump>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	ax, WORD PTR [edx+4]
	mov	WORD PTR [ecx+4], ax
	mov	eax, ecx
	pop	ebp
	ret	4
??4?$tvec3@F$00@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec3<short,1>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@F$00@glm@@QAE@FFF@Z
_TEXT	SEGMENT
_a$ = 8							; size = 2
_b$ = 12						; size = 2
_c$ = 16						; size = 2
??0?$tvec3@F$00@glm@@QAE@FFF@Z PROC			; glm::tvec3<short,1>::tvec3<short,1>, COMDAT
; _this$ = ecx

; 70   : 	{}

	push	ebp
	mov	ebp, esp
	mov	ax, WORD PTR _a$[ebp]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR _b$[ebp]
	mov	WORD PTR [ecx+2], ax
	mov	ax, WORD PTR _c$[ebp]
	mov	WORD PTR [ecx+4], ax
	mov	eax, ecx
	pop	ebp
	ret	12					; 0000000cH
??0?$tvec3@F$00@glm@@QAE@FFF@Z ENDP			; glm::tvec3<short,1>::tvec3<short,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@F$00@glm@@QAE@F@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 2
??0?$tvec3@F$00@glm@@QAE@F@Z PROC			; glm::tvec3<short,1>::tvec3<short,1>, COMDAT
; _this$ = ecx

; 65   : 	{}

	push	ebp
	mov	ebp, esp
	mov	ax, WORD PTR _scalar$[ebp]
	mov	WORD PTR [ecx], ax
	mov	WORD PTR [ecx+2], ax
	mov	WORD PTR [ecx+4], ax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec3@F$00@glm@@QAE@F@Z ENDP			; glm::tvec3<short,1>::tvec3<short,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@F$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec3@F$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec3<short,1>::tvec3<short,1>, COMDAT
; _this$ = ecx

; 60   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec3@F$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec3<short,1>::tvec3<short,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec3@F$00@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec3@F$00@glm@@QAE@ABU01@@Z PROC			; glm::tvec3<short,1>::tvec3<short,1>, COMDAT
; _this$ = ecx

; 95   : template struct tvec3<int16, mediump>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR [edx+2]
	mov	WORD PTR [ecx+2], ax
	mov	ax, WORD PTR [edx+2]
	mov	WORD PTR [ecx+2], ax
	mov	ax, WORD PTR [edx+2]
	mov	WORD PTR [ecx+2], ax
	mov	ax, WORD PTR [edx+4]
	mov	WORD PTR [ecx+4], ax
	mov	ax, WORD PTR [edx+4]
	mov	WORD PTR [ecx+4], ax
	mov	ax, WORD PTR [edx+4]
	mov	WORD PTR [ecx+4], ax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec3@F$00@glm@@QAE@ABU01@@Z ENDP			; glm::tvec3<short,1>::tvec3<short,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@F$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec3@F$00@glm@@QAE@XZ PROC			; glm::tvec3<short,1>::tvec3<short,1>, COMDAT
; _this$ = ecx

; 40   : 		{}

	xor	eax, eax
	mov	DWORD PTR [ecx], eax
	mov	WORD PTR [ecx+4], ax
	mov	eax, ecx
	ret	0
??0?$tvec3@F$00@glm@@QAE@XZ ENDP			; glm::tvec3<short,1>::tvec3<short,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@F$00@glm@@QBEABFH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@F$00@glm@@QBEABFH@Z PROC			; glm::tvec3<short,1>::operator[], COMDAT
; _this$ = ecx

; 151  : 	{

	push	ebp
	mov	ebp, esp

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 154  : 	}

	pop	ebp
	ret	4
??A?$tvec3@F$00@glm@@QBEABFH@Z ENDP			; glm::tvec3<short,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@F$00@glm@@QAEAAFH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@F$00@glm@@QAEAAFH@Z PROC			; glm::tvec3<short,1>::operator[], COMDAT
; _this$ = ecx

; 144  : 	{

	push	ebp
	mov	ebp, esp

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 147  : 	}

	pop	ebp
	ret	4
??A?$tvec3@F$00@glm@@QAEAAFH@Z ENDP			; glm::tvec3<short,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@F$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@F$00@glm@@SAHXZ PROC			; glm::tvec3<short,1>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	push	3
	pop	eax
	ret	0
?length@?$tvec3@F$00@glm@@SAHXZ ENDP			; glm::tvec3<short,1>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@C$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec3@C$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<signed char,1>::operator--, COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		tvec3<T, P> Result(*this);

	mov	dx, WORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	WORD PTR [eax], dx
	mov	dl, BYTE PTR [ecx+2]

; 331  : 		--*this;

	dec	BYTE PTR [ecx]
	dec	BYTE PTR [ecx+1]
	dec	BYTE PTR [ecx+2]
	mov	BYTE PTR [eax+2], dl

; 332  : 		return Result;
; 333  : 	}

	pop	ebp
	ret	8
??F?$tvec3@C$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<signed char,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@C$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec3@C$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<signed char,1>::operator++, COMDAT
; _this$ = ecx

; 321  : 	{

	push	ebp
	mov	ebp, esp

; 322  : 		tvec3<T, P> Result(*this);

	mov	dx, WORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	WORD PTR [eax], dx
	mov	dl, BYTE PTR [ecx+2]

; 323  : 		++*this;

	inc	BYTE PTR [ecx]
	inc	BYTE PTR [ecx+1]
	inc	BYTE PTR [ecx+2]
	mov	BYTE PTR [eax+2], dl

; 324  : 		return Result;
; 325  : 	}

	pop	ebp
	ret	8
??E?$tvec3@C$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<signed char,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@C$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec3@C$00@glm@@QAEAAU01@XZ PROC			; glm::tvec3<signed char,1>::operator--, COMDAT
; _this$ = ecx

; 313  : 		--this->x;

	dec	BYTE PTR [ecx]

; 314  : 		--this->y;
; 315  : 		--this->z;
; 316  : 		return *this;

	mov	eax, ecx
	dec	BYTE PTR [ecx+1]
	dec	BYTE PTR [ecx+2]

; 317  : 	}

	ret	0
??F?$tvec3@C$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<signed char,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@C$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec3@C$00@glm@@QAEAAU01@XZ PROC			; glm::tvec3<signed char,1>::operator++, COMDAT
; _this$ = ecx

; 304  : 		++this->x;

	inc	BYTE PTR [ecx]

; 305  : 		++this->y;
; 306  : 		++this->z;
; 307  : 		return *this;

	mov	eax, ecx
	inc	BYTE PTR [ecx+1]
	inc	BYTE PTR [ecx+2]

; 308  : 	}

	ret	0
??E?$tvec3@C$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<signed char,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec3@C$00@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec3@C$00@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec3<signed char,1>::operator=, COMDAT
; _this$ = ecx

; 94   : template struct tvec3<int8, mediump>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax
	mov	al, BYTE PTR [edx+2]
	mov	BYTE PTR [ecx+2], al
	mov	eax, ecx
	pop	ebp
	ret	4
??4?$tvec3@C$00@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec3<signed char,1>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@C$00@glm@@QAE@CCC@Z
_TEXT	SEGMENT
_a$ = 8							; size = 1
_b$ = 12						; size = 1
_c$ = 16						; size = 1
??0?$tvec3@C$00@glm@@QAE@CCC@Z PROC			; glm::tvec3<signed char,1>::tvec3<signed char,1>, COMDAT
; _this$ = ecx

; 70   : 	{}

	push	ebp
	mov	ebp, esp
	mov	al, BYTE PTR _a$[ebp]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR _b$[ebp]
	mov	BYTE PTR [ecx+1], al
	mov	al, BYTE PTR _c$[ebp]
	mov	BYTE PTR [ecx+2], al
	mov	eax, ecx
	pop	ebp
	ret	12					; 0000000cH
??0?$tvec3@C$00@glm@@QAE@CCC@Z ENDP			; glm::tvec3<signed char,1>::tvec3<signed char,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@C$00@glm@@QAE@C@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 1
??0?$tvec3@C$00@glm@@QAE@C@Z PROC			; glm::tvec3<signed char,1>::tvec3<signed char,1>, COMDAT
; _this$ = ecx

; 65   : 	{}

	push	ebp
	mov	ebp, esp
	mov	al, BYTE PTR _scalar$[ebp]
	mov	BYTE PTR [ecx], al
	mov	BYTE PTR [ecx+1], al
	mov	BYTE PTR [ecx+2], al
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec3@C$00@glm@@QAE@C@Z ENDP			; glm::tvec3<signed char,1>::tvec3<signed char,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@C$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec3@C$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec3<signed char,1>::tvec3<signed char,1>, COMDAT
; _this$ = ecx

; 60   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec3@C$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec3<signed char,1>::tvec3<signed char,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec3@C$00@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec3@C$00@glm@@QAE@ABU01@@Z PROC			; glm::tvec3<signed char,1>::tvec3<signed char,1>, COMDAT
; _this$ = ecx

; 94   : template struct tvec3<int8, mediump>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR [edx+1]
	mov	BYTE PTR [ecx+1], al
	mov	al, BYTE PTR [edx+1]
	mov	BYTE PTR [ecx+1], al
	mov	al, BYTE PTR [edx+1]
	mov	BYTE PTR [ecx+1], al
	mov	al, BYTE PTR [edx+2]
	mov	BYTE PTR [ecx+2], al
	mov	al, BYTE PTR [edx+2]
	mov	BYTE PTR [ecx+2], al
	mov	al, BYTE PTR [edx+2]
	mov	BYTE PTR [ecx+2], al
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec3@C$00@glm@@QAE@ABU01@@Z ENDP			; glm::tvec3<signed char,1>::tvec3<signed char,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@C$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec3@C$00@glm@@QAE@XZ PROC			; glm::tvec3<signed char,1>::tvec3<signed char,1>, COMDAT
; _this$ = ecx

; 40   : 		{}

	xor	eax, eax
	mov	WORD PTR [ecx], ax
	mov	BYTE PTR [ecx+2], al
	mov	eax, ecx
	ret	0
??0?$tvec3@C$00@glm@@QAE@XZ ENDP			; glm::tvec3<signed char,1>::tvec3<signed char,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@C$00@glm@@QBEABCH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@C$00@glm@@QBEABCH@Z PROC			; glm::tvec3<signed char,1>::operator[], COMDAT
; _this$ = ecx

; 151  : 	{

	push	ebp
	mov	ebp, esp

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 154  : 	}

	pop	ebp
	ret	4
??A?$tvec3@C$00@glm@@QBEABCH@Z ENDP			; glm::tvec3<signed char,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@C$00@glm@@QAEAACH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@C$00@glm@@QAEAACH@Z PROC			; glm::tvec3<signed char,1>::operator[], COMDAT
; _this$ = ecx

; 144  : 	{

	push	ebp
	mov	ebp, esp

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 147  : 	}

	pop	ebp
	ret	4
??A?$tvec3@C$00@glm@@QAEAACH@Z ENDP			; glm::tvec3<signed char,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@C$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@C$00@glm@@SAHXZ PROC			; glm::tvec3<signed char,1>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	push	3
	pop	eax
	ret	0
?length@?$tvec3@C$00@glm@@SAHXZ ENDP			; glm::tvec3<signed char,1>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@_K$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec3@_K$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<unsigned __int64,1>::operator--, COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		tvec3<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, ecx
	push	esi
	push	edi
	push	6
	pop	ecx
	mov	esi, edx
	mov	edi, eax
	rep movsd

; 331  : 		--*this;

	or	ecx, -1
	add	DWORD PTR [edx], ecx
	pop	edi
	adc	DWORD PTR [edx+4], ecx
	add	DWORD PTR [edx+8], ecx
	pop	esi
	adc	DWORD PTR [edx+12], ecx
	add	DWORD PTR [edx+16], ecx
	adc	DWORD PTR [edx+20], ecx

; 332  : 		return Result;
; 333  : 	}

	pop	ebp
	ret	8
??F?$tvec3@_K$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<unsigned __int64,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@_K$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec3@_K$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<unsigned __int64,1>::operator++, COMDAT
; _this$ = ecx

; 321  : 	{

	push	ebp
	mov	ebp, esp

; 322  : 		tvec3<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, ecx
	push	esi
	push	edi
	push	6
	pop	ecx
	mov	esi, edx
	mov	edi, eax
	rep movsd

; 323  : 		++*this;

	add	DWORD PTR [edx], 1
	push	0
	pop	ecx
	adc	DWORD PTR [edx+4], ecx
	add	DWORD PTR [edx+8], 1
	pop	edi
	adc	DWORD PTR [edx+12], ecx
	add	DWORD PTR [edx+16], 1
	pop	esi
	adc	DWORD PTR [edx+20], ecx

; 324  : 		return Result;
; 325  : 	}

	pop	ebp
	ret	8
??E?$tvec3@_K$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<unsigned __int64,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@_K$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec3@_K$00@glm@@QAEAAU01@XZ PROC			; glm::tvec3<unsigned __int64,1>::operator--, COMDAT
; _this$ = ecx

; 313  : 		--this->x;

	or	eax, -1
	add	DWORD PTR [ecx], eax
	adc	DWORD PTR [ecx+4], eax

; 314  : 		--this->y;

	add	DWORD PTR [ecx+8], eax
	adc	DWORD PTR [ecx+12], eax

; 315  : 		--this->z;

	add	DWORD PTR [ecx+16], eax
	adc	DWORD PTR [ecx+20], eax

; 316  : 		return *this;

	mov	eax, ecx

; 317  : 	}

	ret	0
??F?$tvec3@_K$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<unsigned __int64,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@_K$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec3@_K$00@glm@@QAEAAU01@XZ PROC			; glm::tvec3<unsigned __int64,1>::operator++, COMDAT
; _this$ = ecx

; 304  : 		++this->x;

	add	DWORD PTR [ecx], 1
	push	0
	pop	eax
	adc	DWORD PTR [ecx+4], eax

; 305  : 		++this->y;

	add	DWORD PTR [ecx+8], 1
	adc	DWORD PTR [ecx+12], eax

; 306  : 		++this->z;

	add	DWORD PTR [ecx+16], 1
	adc	DWORD PTR [ecx+20], eax

; 307  : 		return *this;

	mov	eax, ecx

; 308  : 	}

	ret	0
??E?$tvec3@_K$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<unsigned __int64,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec3@_K$00@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec3@_K$00@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec3<unsigned __int64,1>::operator=, COMDAT
; _this$ = ecx

; 93   : template struct tvec3<uint64, mediump>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	6
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tvec3@_K$00@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec3<unsigned __int64,1>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_K$00@glm@@QAE@_K00@Z
_TEXT	SEGMENT
_a$ = 8							; size = 8
_b$ = 16						; size = 8
_c$ = 24						; size = 8
??0?$tvec3@_K$00@glm@@QAE@_K00@Z PROC			; glm::tvec3<unsigned __int64,1>::tvec3<unsigned __int64,1>, COMDAT
; _this$ = ecx

; 70   : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _a$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _b$[ebp+4]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR _c$[ebp+4]
	mov	DWORD PTR [ecx+20], eax
	mov	eax, ecx
	pop	ebp
	ret	24					; 00000018H
??0?$tvec3@_K$00@glm@@QAE@_K00@Z ENDP			; glm::tvec3<unsigned __int64,1>::tvec3<unsigned __int64,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_K$00@glm@@QAE@_K@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 8
??0?$tvec3@_K$00@glm@@QAE@_K@Z PROC			; glm::tvec3<unsigned __int64,1>::tvec3<unsigned __int64,1>, COMDAT
; _this$ = ecx

; 65   : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _scalar$[ebp+4]
	mov	edx, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+12], eax
	mov	DWORD PTR [ecx+20], eax
	mov	eax, ecx
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+8], edx
	mov	DWORD PTR [ecx+16], edx
	pop	ebp
	ret	8
??0?$tvec3@_K$00@glm@@QAE@_K@Z ENDP			; glm::tvec3<unsigned __int64,1>::tvec3<unsigned __int64,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_K$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec3@_K$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec3<unsigned __int64,1>::tvec3<unsigned __int64,1>, COMDAT
; _this$ = ecx

; 60   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec3@_K$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec3<unsigned __int64,1>::tvec3<unsigned __int64,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec3@_K$00@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec3@_K$00@glm@@QAE@ABU01@@Z PROC			; glm::tvec3<unsigned __int64,1>::tvec3<unsigned __int64,1>, COMDAT
; _this$ = ecx

; 93   : template struct tvec3<uint64, mediump>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx+20], eax
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx+20], eax
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx+20], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec3@_K$00@glm@@QAE@ABU01@@Z ENDP			; glm::tvec3<unsigned __int64,1>::tvec3<unsigned __int64,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_K$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec3@_K$00@glm@@QAE@XZ PROC			; glm::tvec3<unsigned __int64,1>::tvec3<unsigned __int64,1>, COMDAT
; _this$ = ecx

; 40   : 		{}

	xor	eax, eax
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR [ecx+12], eax
	mov	DWORD PTR [ecx+16], eax
	mov	DWORD PTR [ecx+20], eax
	mov	eax, ecx
	ret	0
??0?$tvec3@_K$00@glm@@QAE@XZ ENDP			; glm::tvec3<unsigned __int64,1>::tvec3<unsigned __int64,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@_K$00@glm@@QBEAB_KH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@_K$00@glm@@QBEAB_KH@Z PROC			; glm::tvec3<unsigned __int64,1>::operator[], COMDAT
; _this$ = ecx

; 151  : 	{

	push	ebp
	mov	ebp, esp

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 154  : 	}

	pop	ebp
	ret	4
??A?$tvec3@_K$00@glm@@QBEAB_KH@Z ENDP			; glm::tvec3<unsigned __int64,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@_K$00@glm@@QAEAA_KH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@_K$00@glm@@QAEAA_KH@Z PROC			; glm::tvec3<unsigned __int64,1>::operator[], COMDAT
; _this$ = ecx

; 144  : 	{

	push	ebp
	mov	ebp, esp

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 147  : 	}

	pop	ebp
	ret	4
??A?$tvec3@_K$00@glm@@QAEAA_KH@Z ENDP			; glm::tvec3<unsigned __int64,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@_K$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@_K$00@glm@@SAHXZ PROC			; glm::tvec3<unsigned __int64,1>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	push	3
	pop	eax
	ret	0
?length@?$tvec3@_K$00@glm@@SAHXZ ENDP			; glm::tvec3<unsigned __int64,1>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@I$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec3@I$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<unsigned int,1>::operator--, COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		tvec3<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	mov	esi, ecx
	mov	edi, eax
	movsd
	movsd
	movsd

; 331  : 		--*this;

	dec	DWORD PTR [ecx]
	dec	DWORD PTR [ecx+4]
	dec	DWORD PTR [ecx+8]
	pop	edi
	pop	esi

; 332  : 		return Result;
; 333  : 	}

	pop	ebp
	ret	8
??F?$tvec3@I$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<unsigned int,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@I$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec3@I$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<unsigned int,1>::operator++, COMDAT
; _this$ = ecx

; 321  : 	{

	push	ebp
	mov	ebp, esp

; 322  : 		tvec3<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	mov	esi, ecx
	mov	edi, eax
	movsd
	movsd
	movsd

; 323  : 		++*this;

	inc	DWORD PTR [ecx]
	inc	DWORD PTR [ecx+4]
	inc	DWORD PTR [ecx+8]
	pop	edi
	pop	esi

; 324  : 		return Result;
; 325  : 	}

	pop	ebp
	ret	8
??E?$tvec3@I$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<unsigned int,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@I$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec3@I$00@glm@@QAEAAU01@XZ PROC			; glm::tvec3<unsigned int,1>::operator--, COMDAT
; _this$ = ecx

; 313  : 		--this->x;

	dec	DWORD PTR [ecx]

; 314  : 		--this->y;
; 315  : 		--this->z;
; 316  : 		return *this;

	mov	eax, ecx
	dec	DWORD PTR [ecx+4]
	dec	DWORD PTR [ecx+8]

; 317  : 	}

	ret	0
??F?$tvec3@I$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<unsigned int,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@I$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec3@I$00@glm@@QAEAAU01@XZ PROC			; glm::tvec3<unsigned int,1>::operator++, COMDAT
; _this$ = ecx

; 304  : 		++this->x;

	inc	DWORD PTR [ecx]

; 305  : 		++this->y;
; 306  : 		++this->z;
; 307  : 		return *this;

	mov	eax, ecx
	inc	DWORD PTR [ecx+4]
	inc	DWORD PTR [ecx+8]

; 308  : 	}

	ret	0
??E?$tvec3@I$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<unsigned int,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec3@I$00@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec3@I$00@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec3<unsigned int,1>::operator=, COMDAT
; _this$ = ecx

; 92   : template struct tvec3<uint32, mediump>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	mov	edi, ecx
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tvec3@I$00@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec3<unsigned int,1>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@I$00@glm@@QAE@III@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
??0?$tvec3@I$00@glm@@QAE@III@Z PROC			; glm::tvec3<unsigned int,1>::tvec3<unsigned int,1>, COMDAT
; _this$ = ecx

; 70   : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, ecx
	pop	ebp
	ret	12					; 0000000cH
??0?$tvec3@I$00@glm@@QAE@III@Z ENDP			; glm::tvec3<unsigned int,1>::tvec3<unsigned int,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@I$00@glm@@QAE@I@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 4
??0?$tvec3@I$00@glm@@QAE@I@Z PROC			; glm::tvec3<unsigned int,1>::tvec3<unsigned int,1>, COMDAT
; _this$ = ecx

; 65   : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec3@I$00@glm@@QAE@I@Z ENDP			; glm::tvec3<unsigned int,1>::tvec3<unsigned int,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@I$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec3@I$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec3<unsigned int,1>::tvec3<unsigned int,1>, COMDAT
; _this$ = ecx

; 60   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec3@I$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec3<unsigned int,1>::tvec3<unsigned int,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec3@I$00@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec3@I$00@glm@@QAE@ABU01@@Z PROC			; glm::tvec3<unsigned int,1>::tvec3<unsigned int,1>, COMDAT
; _this$ = ecx

; 92   : template struct tvec3<uint32, mediump>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec3@I$00@glm@@QAE@ABU01@@Z ENDP			; glm::tvec3<unsigned int,1>::tvec3<unsigned int,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@I$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec3@I$00@glm@@QAE@XZ PROC			; glm::tvec3<unsigned int,1>::tvec3<unsigned int,1>, COMDAT
; _this$ = ecx

; 40   : 		{}

	xor	eax, eax
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], eax
	mov	eax, ecx
	ret	0
??0?$tvec3@I$00@glm@@QAE@XZ ENDP			; glm::tvec3<unsigned int,1>::tvec3<unsigned int,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@I$00@glm@@QBEABIH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@I$00@glm@@QBEABIH@Z PROC			; glm::tvec3<unsigned int,1>::operator[], COMDAT
; _this$ = ecx

; 151  : 	{

	push	ebp
	mov	ebp, esp

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 154  : 	}

	pop	ebp
	ret	4
??A?$tvec3@I$00@glm@@QBEABIH@Z ENDP			; glm::tvec3<unsigned int,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@I$00@glm@@QAEAAIH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@I$00@glm@@QAEAAIH@Z PROC			; glm::tvec3<unsigned int,1>::operator[], COMDAT
; _this$ = ecx

; 144  : 	{

	push	ebp
	mov	ebp, esp

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 147  : 	}

	pop	ebp
	ret	4
??A?$tvec3@I$00@glm@@QAEAAIH@Z ENDP			; glm::tvec3<unsigned int,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@I$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@I$00@glm@@SAHXZ PROC			; glm::tvec3<unsigned int,1>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	push	3
	pop	eax
	ret	0
?length@?$tvec3@I$00@glm@@SAHXZ ENDP			; glm::tvec3<unsigned int,1>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@G$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec3@G$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<unsigned short,1>::operator--, COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		tvec3<T, P> Result(*this);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	ax, WORD PTR [ecx+4]
	mov	WORD PTR [edx+4], ax

; 331  : 		--*this;

	mov	eax, 65535				; 0000ffffH
	add	WORD PTR [ecx], ax
	add	WORD PTR [ecx+2], ax
	add	WORD PTR [ecx+4], ax

; 332  : 		return Result;

	mov	eax, edx

; 333  : 	}

	pop	ebp
	ret	8
??F?$tvec3@G$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<unsigned short,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@G$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec3@G$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<unsigned short,1>::operator++, COMDAT
; _this$ = ecx

; 321  : 	{

	push	ebp
	mov	ebp, esp

; 322  : 		tvec3<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	dx, WORD PTR [ecx+4]

; 323  : 		++*this;

	inc	WORD PTR [ecx]
	inc	WORD PTR [ecx+2]
	inc	WORD PTR [ecx+4]
	mov	WORD PTR [eax+4], dx

; 324  : 		return Result;
; 325  : 	}

	pop	ebp
	ret	8
??E?$tvec3@G$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<unsigned short,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@G$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec3@G$00@glm@@QAEAAU01@XZ PROC			; glm::tvec3<unsigned short,1>::operator--, COMDAT
; _this$ = ecx

; 313  : 		--this->x;

	mov	eax, 65535				; 0000ffffH
	add	WORD PTR [ecx], ax

; 314  : 		--this->y;

	add	WORD PTR [ecx+2], ax

; 315  : 		--this->z;

	add	WORD PTR [ecx+4], ax

; 316  : 		return *this;

	mov	eax, ecx

; 317  : 	}

	ret	0
??F?$tvec3@G$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<unsigned short,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@G$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec3@G$00@glm@@QAEAAU01@XZ PROC			; glm::tvec3<unsigned short,1>::operator++, COMDAT
; _this$ = ecx

; 304  : 		++this->x;

	inc	WORD PTR [ecx]

; 305  : 		++this->y;
; 306  : 		++this->z;
; 307  : 		return *this;

	mov	eax, ecx
	inc	WORD PTR [ecx+2]
	inc	WORD PTR [ecx+4]

; 308  : 	}

	ret	0
??E?$tvec3@G$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<unsigned short,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec3@G$00@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec3@G$00@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec3<unsigned short,1>::operator=, COMDAT
; _this$ = ecx

; 91   : template struct tvec3<uint16, mediump>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	ax, WORD PTR [edx+4]
	mov	WORD PTR [ecx+4], ax
	mov	eax, ecx
	pop	ebp
	ret	4
??4?$tvec3@G$00@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec3<unsigned short,1>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@G$00@glm@@QAE@GGG@Z
_TEXT	SEGMENT
_a$ = 8							; size = 2
_b$ = 12						; size = 2
_c$ = 16						; size = 2
??0?$tvec3@G$00@glm@@QAE@GGG@Z PROC			; glm::tvec3<unsigned short,1>::tvec3<unsigned short,1>, COMDAT
; _this$ = ecx

; 70   : 	{}

	push	ebp
	mov	ebp, esp
	mov	ax, WORD PTR _a$[ebp]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR _b$[ebp]
	mov	WORD PTR [ecx+2], ax
	mov	ax, WORD PTR _c$[ebp]
	mov	WORD PTR [ecx+4], ax
	mov	eax, ecx
	pop	ebp
	ret	12					; 0000000cH
??0?$tvec3@G$00@glm@@QAE@GGG@Z ENDP			; glm::tvec3<unsigned short,1>::tvec3<unsigned short,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@G$00@glm@@QAE@G@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 2
??0?$tvec3@G$00@glm@@QAE@G@Z PROC			; glm::tvec3<unsigned short,1>::tvec3<unsigned short,1>, COMDAT
; _this$ = ecx

; 65   : 	{}

	push	ebp
	mov	ebp, esp
	mov	ax, WORD PTR _scalar$[ebp]
	mov	WORD PTR [ecx], ax
	mov	WORD PTR [ecx+2], ax
	mov	WORD PTR [ecx+4], ax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec3@G$00@glm@@QAE@G@Z ENDP			; glm::tvec3<unsigned short,1>::tvec3<unsigned short,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@G$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec3@G$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec3<unsigned short,1>::tvec3<unsigned short,1>, COMDAT
; _this$ = ecx

; 60   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec3@G$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec3<unsigned short,1>::tvec3<unsigned short,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec3@G$00@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec3@G$00@glm@@QAE@ABU01@@Z PROC			; glm::tvec3<unsigned short,1>::tvec3<unsigned short,1>, COMDAT
; _this$ = ecx

; 91   : template struct tvec3<uint16, mediump>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR [edx+2]
	mov	WORD PTR [ecx+2], ax
	mov	ax, WORD PTR [edx+2]
	mov	WORD PTR [ecx+2], ax
	mov	ax, WORD PTR [edx+2]
	mov	WORD PTR [ecx+2], ax
	mov	ax, WORD PTR [edx+4]
	mov	WORD PTR [ecx+4], ax
	mov	ax, WORD PTR [edx+4]
	mov	WORD PTR [ecx+4], ax
	mov	ax, WORD PTR [edx+4]
	mov	WORD PTR [ecx+4], ax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec3@G$00@glm@@QAE@ABU01@@Z ENDP			; glm::tvec3<unsigned short,1>::tvec3<unsigned short,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@G$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec3@G$00@glm@@QAE@XZ PROC			; glm::tvec3<unsigned short,1>::tvec3<unsigned short,1>, COMDAT
; _this$ = ecx

; 40   : 		{}

	xor	eax, eax
	mov	DWORD PTR [ecx], eax
	mov	WORD PTR [ecx+4], ax
	mov	eax, ecx
	ret	0
??0?$tvec3@G$00@glm@@QAE@XZ ENDP			; glm::tvec3<unsigned short,1>::tvec3<unsigned short,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@G$00@glm@@QBEABGH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@G$00@glm@@QBEABGH@Z PROC			; glm::tvec3<unsigned short,1>::operator[], COMDAT
; _this$ = ecx

; 151  : 	{

	push	ebp
	mov	ebp, esp

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 154  : 	}

	pop	ebp
	ret	4
??A?$tvec3@G$00@glm@@QBEABGH@Z ENDP			; glm::tvec3<unsigned short,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@G$00@glm@@QAEAAGH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@G$00@glm@@QAEAAGH@Z PROC			; glm::tvec3<unsigned short,1>::operator[], COMDAT
; _this$ = ecx

; 144  : 	{

	push	ebp
	mov	ebp, esp

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 147  : 	}

	pop	ebp
	ret	4
??A?$tvec3@G$00@glm@@QAEAAGH@Z ENDP			; glm::tvec3<unsigned short,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@G$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@G$00@glm@@SAHXZ PROC			; glm::tvec3<unsigned short,1>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	push	3
	pop	eax
	ret	0
?length@?$tvec3@G$00@glm@@SAHXZ ENDP			; glm::tvec3<unsigned short,1>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@E$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec3@E$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<unsigned char,1>::operator--, COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		tvec3<T, P> Result(*this);

	mov	dx, WORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	WORD PTR [eax], dx
	mov	dl, BYTE PTR [ecx+2]

; 331  : 		--*this;

	dec	BYTE PTR [ecx]
	dec	BYTE PTR [ecx+1]
	dec	BYTE PTR [ecx+2]
	mov	BYTE PTR [eax+2], dl

; 332  : 		return Result;
; 333  : 	}

	pop	ebp
	ret	8
??F?$tvec3@E$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<unsigned char,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@E$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec3@E$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<unsigned char,1>::operator++, COMDAT
; _this$ = ecx

; 321  : 	{

	push	ebp
	mov	ebp, esp

; 322  : 		tvec3<T, P> Result(*this);

	mov	dx, WORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	WORD PTR [eax], dx
	mov	dl, BYTE PTR [ecx+2]

; 323  : 		++*this;

	inc	BYTE PTR [ecx]
	inc	BYTE PTR [ecx+1]
	inc	BYTE PTR [ecx+2]
	mov	BYTE PTR [eax+2], dl

; 324  : 		return Result;
; 325  : 	}

	pop	ebp
	ret	8
??E?$tvec3@E$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<unsigned char,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@E$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec3@E$00@glm@@QAEAAU01@XZ PROC			; glm::tvec3<unsigned char,1>::operator--, COMDAT
; _this$ = ecx

; 313  : 		--this->x;

	dec	BYTE PTR [ecx]

; 314  : 		--this->y;
; 315  : 		--this->z;
; 316  : 		return *this;

	mov	eax, ecx
	dec	BYTE PTR [ecx+1]
	dec	BYTE PTR [ecx+2]

; 317  : 	}

	ret	0
??F?$tvec3@E$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<unsigned char,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@E$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec3@E$00@glm@@QAEAAU01@XZ PROC			; glm::tvec3<unsigned char,1>::operator++, COMDAT
; _this$ = ecx

; 304  : 		++this->x;

	inc	BYTE PTR [ecx]

; 305  : 		++this->y;
; 306  : 		++this->z;
; 307  : 		return *this;

	mov	eax, ecx
	inc	BYTE PTR [ecx+1]
	inc	BYTE PTR [ecx+2]

; 308  : 	}

	ret	0
??E?$tvec3@E$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<unsigned char,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec3@E$00@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec3@E$00@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec3<unsigned char,1>::operator=, COMDAT
; _this$ = ecx

; 90   : template struct tvec3<uint8, mediump>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax
	mov	al, BYTE PTR [edx+2]
	mov	BYTE PTR [ecx+2], al
	mov	eax, ecx
	pop	ebp
	ret	4
??4?$tvec3@E$00@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec3<unsigned char,1>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@E$00@glm@@QAE@EEE@Z
_TEXT	SEGMENT
_a$ = 8							; size = 1
_b$ = 12						; size = 1
_c$ = 16						; size = 1
??0?$tvec3@E$00@glm@@QAE@EEE@Z PROC			; glm::tvec3<unsigned char,1>::tvec3<unsigned char,1>, COMDAT
; _this$ = ecx

; 70   : 	{}

	push	ebp
	mov	ebp, esp
	mov	al, BYTE PTR _a$[ebp]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR _b$[ebp]
	mov	BYTE PTR [ecx+1], al
	mov	al, BYTE PTR _c$[ebp]
	mov	BYTE PTR [ecx+2], al
	mov	eax, ecx
	pop	ebp
	ret	12					; 0000000cH
??0?$tvec3@E$00@glm@@QAE@EEE@Z ENDP			; glm::tvec3<unsigned char,1>::tvec3<unsigned char,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@E$00@glm@@QAE@E@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 1
??0?$tvec3@E$00@glm@@QAE@E@Z PROC			; glm::tvec3<unsigned char,1>::tvec3<unsigned char,1>, COMDAT
; _this$ = ecx

; 65   : 	{}

	push	ebp
	mov	ebp, esp
	mov	al, BYTE PTR _scalar$[ebp]
	mov	BYTE PTR [ecx], al
	mov	BYTE PTR [ecx+1], al
	mov	BYTE PTR [ecx+2], al
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec3@E$00@glm@@QAE@E@Z ENDP			; glm::tvec3<unsigned char,1>::tvec3<unsigned char,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@E$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec3@E$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec3<unsigned char,1>::tvec3<unsigned char,1>, COMDAT
; _this$ = ecx

; 60   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec3@E$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec3<unsigned char,1>::tvec3<unsigned char,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec3@E$00@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec3@E$00@glm@@QAE@ABU01@@Z PROC			; glm::tvec3<unsigned char,1>::tvec3<unsigned char,1>, COMDAT
; _this$ = ecx

; 90   : template struct tvec3<uint8, mediump>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR [edx+1]
	mov	BYTE PTR [ecx+1], al
	mov	al, BYTE PTR [edx+1]
	mov	BYTE PTR [ecx+1], al
	mov	al, BYTE PTR [edx+1]
	mov	BYTE PTR [ecx+1], al
	mov	al, BYTE PTR [edx+2]
	mov	BYTE PTR [ecx+2], al
	mov	al, BYTE PTR [edx+2]
	mov	BYTE PTR [ecx+2], al
	mov	al, BYTE PTR [edx+2]
	mov	BYTE PTR [ecx+2], al
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec3@E$00@glm@@QAE@ABU01@@Z ENDP			; glm::tvec3<unsigned char,1>::tvec3<unsigned char,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@E$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec3@E$00@glm@@QAE@XZ PROC			; glm::tvec3<unsigned char,1>::tvec3<unsigned char,1>, COMDAT
; _this$ = ecx

; 40   : 		{}

	xor	eax, eax
	mov	WORD PTR [ecx], ax
	mov	BYTE PTR [ecx+2], al
	mov	eax, ecx
	ret	0
??0?$tvec3@E$00@glm@@QAE@XZ ENDP			; glm::tvec3<unsigned char,1>::tvec3<unsigned char,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@E$00@glm@@QBEABEH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@E$00@glm@@QBEABEH@Z PROC			; glm::tvec3<unsigned char,1>::operator[], COMDAT
; _this$ = ecx

; 151  : 	{

	push	ebp
	mov	ebp, esp

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 154  : 	}

	pop	ebp
	ret	4
??A?$tvec3@E$00@glm@@QBEABEH@Z ENDP			; glm::tvec3<unsigned char,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@E$00@glm@@QAEAAEH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@E$00@glm@@QAEAAEH@Z PROC			; glm::tvec3<unsigned char,1>::operator[], COMDAT
; _this$ = ecx

; 144  : 	{

	push	ebp
	mov	ebp, esp

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 147  : 	}

	pop	ebp
	ret	4
??A?$tvec3@E$00@glm@@QAEAAEH@Z ENDP			; glm::tvec3<unsigned char,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@E$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@E$00@glm@@SAHXZ PROC			; glm::tvec3<unsigned char,1>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	push	3
	pop	eax
	ret	0
?length@?$tvec3@E$00@glm@@SAHXZ ENDP			; glm::tvec3<unsigned char,1>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@N$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec3@N$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<double,2>::operator--, COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		tvec3<T, P> Result(*this);
; 331  : 		--*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	mov	edx, ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	movups	xmm0, XMMWORD PTR [edx]
	push	6
	pop	ecx
	subpd	xmm0, xmm1
	mov	esi, edx
	mov	edi, eax
	rep movsd
	movups	XMMWORD PTR [edx], xmm0
	pop	edi
	movsd	xmm0, QWORD PTR [edx+16]
	subsd	xmm0, xmm1
	pop	esi
	movsd	QWORD PTR [edx+16], xmm0

; 332  : 		return Result;
; 333  : 	}

	pop	ebp
	ret	8
??F?$tvec3@N$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<double,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@N$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec3@N$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<double,2>::operator++, COMDAT
; _this$ = ecx

; 321  : 	{

	push	ebp
	mov	ebp, esp

; 322  : 		tvec3<T, P> Result(*this);
; 323  : 		++*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	mov	edx, ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	movups	xmm0, XMMWORD PTR [edx]
	push	6
	pop	ecx
	addpd	xmm0, xmm1
	mov	esi, edx
	mov	edi, eax
	rep movsd
	movups	XMMWORD PTR [edx], xmm0
	pop	edi
	movsd	xmm0, QWORD PTR [edx+16]
	addsd	xmm0, xmm1
	pop	esi
	movsd	QWORD PTR [edx+16], xmm0

; 324  : 		return Result;
; 325  : 	}

	pop	ebp
	ret	8
??E?$tvec3@N$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<double,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@N$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec3@N$01@glm@@QAEAAU01@XZ PROC			; glm::tvec3<double,2>::operator--, COMDAT
; _this$ = ecx

; 313  : 		--this->x;

	movups	xmm0, XMMWORD PTR [ecx]

; 314  : 		--this->y;
; 315  : 		--this->z;
; 316  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [ecx+16]
	subsd	xmm0, xmm1
	movsd	QWORD PTR [ecx+16], xmm0

; 317  : 	}

	ret	0
??F?$tvec3@N$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<double,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@N$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec3@N$01@glm@@QAEAAU01@XZ PROC			; glm::tvec3<double,2>::operator++, COMDAT
; _this$ = ecx

; 304  : 		++this->x;

	movups	xmm0, XMMWORD PTR [ecx]

; 305  : 		++this->y;
; 306  : 		++this->z;
; 307  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [ecx+16]
	addsd	xmm0, xmm1
	movsd	QWORD PTR [ecx+16], xmm0

; 308  : 	}

	ret	0
??E?$tvec3@N$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<double,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec3@N$01@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec3@N$01@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec3<double,2>::operator=, COMDAT
; _this$ = ecx

; 88   : template struct tvec3<float64, lowp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	6
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tvec3@N$01@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec3<double,2>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@N$01@glm@@QAE@NNN@Z
_TEXT	SEGMENT
_a$ = 8							; size = 8
_b$ = 16						; size = 8
_c$ = 24						; size = 8
??0?$tvec3@N$01@glm@@QAE@NNN@Z PROC			; glm::tvec3<double,2>::tvec3<double,2>, COMDAT
; _this$ = ecx

; 70   : 	{}

	push	ebp
	mov	ebp, esp
	movsd	xmm0, QWORD PTR _a$[ebp]
	mov	eax, ecx
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR _b$[ebp]
	movsd	QWORD PTR [ecx+8], xmm0
	movsd	xmm0, QWORD PTR _c$[ebp]
	movsd	QWORD PTR [ecx+16], xmm0
	pop	ebp
	ret	24					; 00000018H
??0?$tvec3@N$01@glm@@QAE@NNN@Z ENDP			; glm::tvec3<double,2>::tvec3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@N$01@glm@@QAE@N@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 8
??0?$tvec3@N$01@glm@@QAE@N@Z PROC			; glm::tvec3<double,2>::tvec3<double,2>, COMDAT
; _this$ = ecx

; 65   : 	{}

	push	ebp
	mov	ebp, esp
	movsd	xmm0, QWORD PTR _scalar$[ebp]
	mov	eax, ecx
	unpcklpd xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movsd	QWORD PTR [ecx+16], xmm0
	pop	ebp
	ret	8
??0?$tvec3@N$01@glm@@QAE@N@Z ENDP			; glm::tvec3<double,2>::tvec3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@N$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec3@N$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec3<double,2>::tvec3<double,2>, COMDAT
; _this$ = ecx

; 60   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec3@N$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec3<double,2>::tvec3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec3@N$01@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec3@N$01@glm@@QAE@ABU01@@Z PROC			; glm::tvec3<double,2>::tvec3<double,2>, COMDAT
; _this$ = ecx

; 88   : template struct tvec3<float64, lowp>;

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ___that$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	QWORD PTR [ecx+8], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	QWORD PTR [ecx+8], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	QWORD PTR [ecx+8], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR [ecx+16], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR [ecx+16], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	mov	eax, ecx
	movsd	QWORD PTR [ecx+16], xmm0
	pop	ebp
	ret	4
??0?$tvec3@N$01@glm@@QAE@ABU01@@Z ENDP			; glm::tvec3<double,2>::tvec3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@N$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec3@N$01@glm@@QAE@XZ PROC			; glm::tvec3<double,2>::tvec3<double,2>, COMDAT
; _this$ = ecx

; 40   : 		{}

	xorps	xmm0, xmm0
	mov	eax, ecx
	movups	XMMWORD PTR [ecx], xmm0
	movsd	QWORD PTR [ecx+16], xmm0
	ret	0
??0?$tvec3@N$01@glm@@QAE@XZ ENDP			; glm::tvec3<double,2>::tvec3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@N$01@glm@@QBEABNH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@N$01@glm@@QBEABNH@Z PROC			; glm::tvec3<double,2>::operator[], COMDAT
; _this$ = ecx

; 151  : 	{

	push	ebp
	mov	ebp, esp

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 154  : 	}

	pop	ebp
	ret	4
??A?$tvec3@N$01@glm@@QBEABNH@Z ENDP			; glm::tvec3<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@N$01@glm@@QAEAANH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@N$01@glm@@QAEAANH@Z PROC			; glm::tvec3<double,2>::operator[], COMDAT
; _this$ = ecx

; 144  : 	{

	push	ebp
	mov	ebp, esp

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 147  : 	}

	pop	ebp
	ret	4
??A?$tvec3@N$01@glm@@QAEAANH@Z ENDP			; glm::tvec3<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@N$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@N$01@glm@@SAHXZ PROC			; glm::tvec3<double,2>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	push	3
	pop	eax
	ret	0
?length@?$tvec3@N$01@glm@@SAHXZ ENDP			; glm::tvec3<double,2>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@M$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec3@M$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<float,2>::operator--, COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		tvec3<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 331  : 		--*this;

	movss	xmm0, DWORD PTR [ecx]
	movss	xmm1, DWORD PTR __real@3f800000
	push	esi
	push	edi
	mov	esi, ecx
	subss	xmm0, xmm1
	mov	edi, eax
	movsd
	movsd
	movsd
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	subss	xmm0, xmm1
	pop	edi
	pop	esi
	movss	DWORD PTR [ecx+4], xmm0
	movss	xmm0, DWORD PTR [ecx+8]
	subss	xmm0, xmm1
	movss	DWORD PTR [ecx+8], xmm0

; 332  : 		return Result;
; 333  : 	}

	pop	ebp
	ret	8
??F?$tvec3@M$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<float,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@M$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec3@M$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<float,2>::operator++, COMDAT
; _this$ = ecx

; 321  : 	{

	push	ebp
	mov	ebp, esp

; 322  : 		tvec3<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 323  : 		++*this;

	movss	xmm0, DWORD PTR [ecx]
	movss	xmm1, DWORD PTR __real@3f800000
	push	esi
	push	edi
	mov	esi, ecx
	addss	xmm0, xmm1
	mov	edi, eax
	movsd
	movsd
	movsd
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	addss	xmm0, xmm1
	pop	edi
	pop	esi
	movss	DWORD PTR [ecx+4], xmm0
	movss	xmm0, DWORD PTR [ecx+8]
	addss	xmm0, xmm1
	movss	DWORD PTR [ecx+8], xmm0

; 324  : 		return Result;
; 325  : 	}

	pop	ebp
	ret	8
??E?$tvec3@M$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<float,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@M$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec3@M$01@glm@@QAEAAU01@XZ PROC			; glm::tvec3<float,2>::operator--, COMDAT
; _this$ = ecx

; 313  : 		--this->x;

	movss	xmm0, DWORD PTR [ecx]

; 314  : 		--this->y;
; 315  : 		--this->z;
; 316  : 		return *this;

	mov	eax, ecx
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm0, xmm1
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	subss	xmm0, xmm1
	movss	DWORD PTR [ecx+4], xmm0
	movss	xmm0, DWORD PTR [ecx+8]
	subss	xmm0, xmm1
	movss	DWORD PTR [ecx+8], xmm0

; 317  : 	}

	ret	0
??F?$tvec3@M$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<float,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@M$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec3@M$01@glm@@QAEAAU01@XZ PROC			; glm::tvec3<float,2>::operator++, COMDAT
; _this$ = ecx

; 304  : 		++this->x;

	movss	xmm0, DWORD PTR [ecx]

; 305  : 		++this->y;
; 306  : 		++this->z;
; 307  : 		return *this;

	mov	eax, ecx
	movss	xmm1, DWORD PTR __real@3f800000
	addss	xmm0, xmm1
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	addss	xmm0, xmm1
	movss	DWORD PTR [ecx+4], xmm0
	movss	xmm0, DWORD PTR [ecx+8]
	addss	xmm0, xmm1
	movss	DWORD PTR [ecx+8], xmm0

; 308  : 	}

	ret	0
??E?$tvec3@M$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<float,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec3@M$01@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec3@M$01@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec3<float,2>::operator=, COMDAT
; _this$ = ecx

; 87   : template struct tvec3<float32, lowp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	mov	edi, ecx
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tvec3@M$01@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec3<float,2>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$01@glm@@QAE@MMM@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
??0?$tvec3@M$01@glm@@QAE@MMM@Z PROC			; glm::tvec3<float,2>::tvec3<float,2>, COMDAT
; _this$ = ecx

; 70   : 	{}

	push	ebp
	mov	ebp, esp
	movss	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR _b$[ebp]
	movss	DWORD PTR [ecx+4], xmm0
	movss	xmm0, DWORD PTR _c$[ebp]
	movss	DWORD PTR [ecx+8], xmm0
	pop	ebp
	ret	12					; 0000000cH
??0?$tvec3@M$01@glm@@QAE@MMM@Z ENDP			; glm::tvec3<float,2>::tvec3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$01@glm@@QAE@M@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 4
??0?$tvec3@M$01@glm@@QAE@M@Z PROC			; glm::tvec3<float,2>::tvec3<float,2>, COMDAT
; _this$ = ecx

; 65   : 	{}

	push	ebp
	mov	ebp, esp
	movss	xmm0, DWORD PTR _scalar$[ebp]
	mov	eax, ecx
	movss	DWORD PTR [ecx], xmm0
	movss	DWORD PTR [ecx+4], xmm0
	movss	DWORD PTR [ecx+8], xmm0
	pop	ebp
	ret	4
??0?$tvec3@M$01@glm@@QAE@M@Z ENDP			; glm::tvec3<float,2>::tvec3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec3@M$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec3<float,2>::tvec3<float,2>, COMDAT
; _this$ = ecx

; 60   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec3@M$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec3<float,2>::tvec3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec3@M$01@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec3@M$01@glm@@QAE@ABU01@@Z PROC			; glm::tvec3<float,2>::tvec3<float,2>, COMDAT
; _this$ = ecx

; 87   : template struct tvec3<float32, lowp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec3@M$01@glm@@QAE@ABU01@@Z ENDP			; glm::tvec3<float,2>::tvec3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec3@M$01@glm@@QAE@XZ PROC			; glm::tvec3<float,2>::tvec3<float,2>, COMDAT
; _this$ = ecx

; 40   : 		{}

	and	DWORD PTR [ecx], 0
	mov	eax, ecx
	and	DWORD PTR [ecx+4], 0
	and	DWORD PTR [ecx+8], 0
	ret	0
??0?$tvec3@M$01@glm@@QAE@XZ ENDP			; glm::tvec3<float,2>::tvec3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@M$01@glm@@QBEABMH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@M$01@glm@@QBEABMH@Z PROC			; glm::tvec3<float,2>::operator[], COMDAT
; _this$ = ecx

; 151  : 	{

	push	ebp
	mov	ebp, esp

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 154  : 	}

	pop	ebp
	ret	4
??A?$tvec3@M$01@glm@@QBEABMH@Z ENDP			; glm::tvec3<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@M$01@glm@@QAEAAMH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@M$01@glm@@QAEAAMH@Z PROC			; glm::tvec3<float,2>::operator[], COMDAT
; _this$ = ecx

; 144  : 	{

	push	ebp
	mov	ebp, esp

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 147  : 	}

	pop	ebp
	ret	4
??A?$tvec3@M$01@glm@@QAEAAMH@Z ENDP			; glm::tvec3<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@M$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@M$01@glm@@SAHXZ PROC			; glm::tvec3<float,2>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	push	3
	pop	eax
	ret	0
?length@?$tvec3@M$01@glm@@SAHXZ ENDP			; glm::tvec3<float,2>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@_J$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec3@_J$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<__int64,2>::operator--, COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		tvec3<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, ecx
	push	esi
	push	edi
	push	6
	pop	ecx
	mov	esi, edx
	mov	edi, eax
	rep movsd

; 331  : 		--*this;

	or	ecx, -1
	add	DWORD PTR [edx], ecx
	pop	edi
	adc	DWORD PTR [edx+4], ecx
	add	DWORD PTR [edx+8], ecx
	pop	esi
	adc	DWORD PTR [edx+12], ecx
	add	DWORD PTR [edx+16], ecx
	adc	DWORD PTR [edx+20], ecx

; 332  : 		return Result;
; 333  : 	}

	pop	ebp
	ret	8
??F?$tvec3@_J$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<__int64,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@_J$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec3@_J$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<__int64,2>::operator++, COMDAT
; _this$ = ecx

; 321  : 	{

	push	ebp
	mov	ebp, esp

; 322  : 		tvec3<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, ecx
	push	esi
	push	edi
	push	6
	pop	ecx
	mov	esi, edx
	mov	edi, eax
	rep movsd

; 323  : 		++*this;

	add	DWORD PTR [edx], 1
	push	0
	pop	ecx
	adc	DWORD PTR [edx+4], ecx
	add	DWORD PTR [edx+8], 1
	pop	edi
	adc	DWORD PTR [edx+12], ecx
	add	DWORD PTR [edx+16], 1
	pop	esi
	adc	DWORD PTR [edx+20], ecx

; 324  : 		return Result;
; 325  : 	}

	pop	ebp
	ret	8
??E?$tvec3@_J$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<__int64,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@_J$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec3@_J$01@glm@@QAEAAU01@XZ PROC			; glm::tvec3<__int64,2>::operator--, COMDAT
; _this$ = ecx

; 313  : 		--this->x;

	or	eax, -1
	add	DWORD PTR [ecx], eax
	adc	DWORD PTR [ecx+4], eax

; 314  : 		--this->y;

	add	DWORD PTR [ecx+8], eax
	adc	DWORD PTR [ecx+12], eax

; 315  : 		--this->z;

	add	DWORD PTR [ecx+16], eax
	adc	DWORD PTR [ecx+20], eax

; 316  : 		return *this;

	mov	eax, ecx

; 317  : 	}

	ret	0
??F?$tvec3@_J$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<__int64,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@_J$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec3@_J$01@glm@@QAEAAU01@XZ PROC			; glm::tvec3<__int64,2>::operator++, COMDAT
; _this$ = ecx

; 304  : 		++this->x;

	add	DWORD PTR [ecx], 1
	push	0
	pop	eax
	adc	DWORD PTR [ecx+4], eax

; 305  : 		++this->y;

	add	DWORD PTR [ecx+8], 1
	adc	DWORD PTR [ecx+12], eax

; 306  : 		++this->z;

	add	DWORD PTR [ecx+16], 1
	adc	DWORD PTR [ecx+20], eax

; 307  : 		return *this;

	mov	eax, ecx

; 308  : 	}

	ret	0
??E?$tvec3@_J$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<__int64,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec3@_J$01@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec3@_J$01@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec3<__int64,2>::operator=, COMDAT
; _this$ = ecx

; 86   : template struct tvec3<int64, lowp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	6
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tvec3@_J$01@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec3<__int64,2>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_J$01@glm@@QAE@_J00@Z
_TEXT	SEGMENT
_a$ = 8							; size = 8
_b$ = 16						; size = 8
_c$ = 24						; size = 8
??0?$tvec3@_J$01@glm@@QAE@_J00@Z PROC			; glm::tvec3<__int64,2>::tvec3<__int64,2>, COMDAT
; _this$ = ecx

; 70   : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _a$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _b$[ebp+4]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR _c$[ebp+4]
	mov	DWORD PTR [ecx+20], eax
	mov	eax, ecx
	pop	ebp
	ret	24					; 00000018H
??0?$tvec3@_J$01@glm@@QAE@_J00@Z ENDP			; glm::tvec3<__int64,2>::tvec3<__int64,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_J$01@glm@@QAE@_J@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 8
??0?$tvec3@_J$01@glm@@QAE@_J@Z PROC			; glm::tvec3<__int64,2>::tvec3<__int64,2>, COMDAT
; _this$ = ecx

; 65   : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _scalar$[ebp+4]
	mov	edx, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+12], eax
	mov	DWORD PTR [ecx+20], eax
	mov	eax, ecx
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+8], edx
	mov	DWORD PTR [ecx+16], edx
	pop	ebp
	ret	8
??0?$tvec3@_J$01@glm@@QAE@_J@Z ENDP			; glm::tvec3<__int64,2>::tvec3<__int64,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_J$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec3@_J$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec3<__int64,2>::tvec3<__int64,2>, COMDAT
; _this$ = ecx

; 60   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec3@_J$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec3<__int64,2>::tvec3<__int64,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec3@_J$01@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec3@_J$01@glm@@QAE@ABU01@@Z PROC			; glm::tvec3<__int64,2>::tvec3<__int64,2>, COMDAT
; _this$ = ecx

; 86   : template struct tvec3<int64, lowp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx+20], eax
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx+20], eax
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx+20], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec3@_J$01@glm@@QAE@ABU01@@Z ENDP			; glm::tvec3<__int64,2>::tvec3<__int64,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_J$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec3@_J$01@glm@@QAE@XZ PROC			; glm::tvec3<__int64,2>::tvec3<__int64,2>, COMDAT
; _this$ = ecx

; 40   : 		{}

	xor	eax, eax
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR [ecx+12], eax
	mov	DWORD PTR [ecx+16], eax
	mov	DWORD PTR [ecx+20], eax
	mov	eax, ecx
	ret	0
??0?$tvec3@_J$01@glm@@QAE@XZ ENDP			; glm::tvec3<__int64,2>::tvec3<__int64,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@_J$01@glm@@QBEAB_JH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@_J$01@glm@@QBEAB_JH@Z PROC			; glm::tvec3<__int64,2>::operator[], COMDAT
; _this$ = ecx

; 151  : 	{

	push	ebp
	mov	ebp, esp

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 154  : 	}

	pop	ebp
	ret	4
??A?$tvec3@_J$01@glm@@QBEAB_JH@Z ENDP			; glm::tvec3<__int64,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@_J$01@glm@@QAEAA_JH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@_J$01@glm@@QAEAA_JH@Z PROC			; glm::tvec3<__int64,2>::operator[], COMDAT
; _this$ = ecx

; 144  : 	{

	push	ebp
	mov	ebp, esp

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 147  : 	}

	pop	ebp
	ret	4
??A?$tvec3@_J$01@glm@@QAEAA_JH@Z ENDP			; glm::tvec3<__int64,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@_J$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@_J$01@glm@@SAHXZ PROC			; glm::tvec3<__int64,2>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	push	3
	pop	eax
	ret	0
?length@?$tvec3@_J$01@glm@@SAHXZ ENDP			; glm::tvec3<__int64,2>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@H$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec3@H$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<int,2>::operator--, COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		tvec3<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	mov	esi, ecx
	mov	edi, eax
	movsd
	movsd
	movsd

; 331  : 		--*this;

	dec	DWORD PTR [ecx]
	dec	DWORD PTR [ecx+4]
	dec	DWORD PTR [ecx+8]
	pop	edi
	pop	esi

; 332  : 		return Result;
; 333  : 	}

	pop	ebp
	ret	8
??F?$tvec3@H$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<int,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@H$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec3@H$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<int,2>::operator++, COMDAT
; _this$ = ecx

; 321  : 	{

	push	ebp
	mov	ebp, esp

; 322  : 		tvec3<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	mov	esi, ecx
	mov	edi, eax
	movsd
	movsd
	movsd

; 323  : 		++*this;

	inc	DWORD PTR [ecx]
	inc	DWORD PTR [ecx+4]
	inc	DWORD PTR [ecx+8]
	pop	edi
	pop	esi

; 324  : 		return Result;
; 325  : 	}

	pop	ebp
	ret	8
??E?$tvec3@H$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<int,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@H$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec3@H$01@glm@@QAEAAU01@XZ PROC			; glm::tvec3<int,2>::operator--, COMDAT
; _this$ = ecx

; 313  : 		--this->x;

	dec	DWORD PTR [ecx]

; 314  : 		--this->y;
; 315  : 		--this->z;
; 316  : 		return *this;

	mov	eax, ecx
	dec	DWORD PTR [ecx+4]
	dec	DWORD PTR [ecx+8]

; 317  : 	}

	ret	0
??F?$tvec3@H$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<int,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@H$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec3@H$01@glm@@QAEAAU01@XZ PROC			; glm::tvec3<int,2>::operator++, COMDAT
; _this$ = ecx

; 304  : 		++this->x;

	inc	DWORD PTR [ecx]

; 305  : 		++this->y;
; 306  : 		++this->z;
; 307  : 		return *this;

	mov	eax, ecx
	inc	DWORD PTR [ecx+4]
	inc	DWORD PTR [ecx+8]

; 308  : 	}

	ret	0
??E?$tvec3@H$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<int,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec3@H$01@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec3@H$01@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec3<int,2>::operator=, COMDAT
; _this$ = ecx

; 85   : template struct tvec3<int32, lowp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	mov	edi, ecx
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tvec3@H$01@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec3<int,2>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@H$01@glm@@QAE@HHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
??0?$tvec3@H$01@glm@@QAE@HHH@Z PROC			; glm::tvec3<int,2>::tvec3<int,2>, COMDAT
; _this$ = ecx

; 70   : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, ecx
	pop	ebp
	ret	12					; 0000000cH
??0?$tvec3@H$01@glm@@QAE@HHH@Z ENDP			; glm::tvec3<int,2>::tvec3<int,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@H$01@glm@@QAE@H@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 4
??0?$tvec3@H$01@glm@@QAE@H@Z PROC			; glm::tvec3<int,2>::tvec3<int,2>, COMDAT
; _this$ = ecx

; 65   : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec3@H$01@glm@@QAE@H@Z ENDP			; glm::tvec3<int,2>::tvec3<int,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@H$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec3@H$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec3<int,2>::tvec3<int,2>, COMDAT
; _this$ = ecx

; 60   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec3@H$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec3<int,2>::tvec3<int,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec3@H$01@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec3@H$01@glm@@QAE@ABU01@@Z PROC			; glm::tvec3<int,2>::tvec3<int,2>, COMDAT
; _this$ = ecx

; 85   : template struct tvec3<int32, lowp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec3@H$01@glm@@QAE@ABU01@@Z ENDP			; glm::tvec3<int,2>::tvec3<int,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@H$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec3@H$01@glm@@QAE@XZ PROC			; glm::tvec3<int,2>::tvec3<int,2>, COMDAT
; _this$ = ecx

; 40   : 		{}

	xor	eax, eax
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], eax
	mov	eax, ecx
	ret	0
??0?$tvec3@H$01@glm@@QAE@XZ ENDP			; glm::tvec3<int,2>::tvec3<int,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@H$01@glm@@QBEABHH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@H$01@glm@@QBEABHH@Z PROC			; glm::tvec3<int,2>::operator[], COMDAT
; _this$ = ecx

; 151  : 	{

	push	ebp
	mov	ebp, esp

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 154  : 	}

	pop	ebp
	ret	4
??A?$tvec3@H$01@glm@@QBEABHH@Z ENDP			; glm::tvec3<int,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@H$01@glm@@QAEAAHH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@H$01@glm@@QAEAAHH@Z PROC			; glm::tvec3<int,2>::operator[], COMDAT
; _this$ = ecx

; 144  : 	{

	push	ebp
	mov	ebp, esp

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 147  : 	}

	pop	ebp
	ret	4
??A?$tvec3@H$01@glm@@QAEAAHH@Z ENDP			; glm::tvec3<int,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@H$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@H$01@glm@@SAHXZ PROC			; glm::tvec3<int,2>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	push	3
	pop	eax
	ret	0
?length@?$tvec3@H$01@glm@@SAHXZ ENDP			; glm::tvec3<int,2>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@F$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec3@F$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<short,2>::operator--, COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		tvec3<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	dx, WORD PTR [ecx+4]

; 331  : 		--*this;

	dec	WORD PTR [ecx]
	dec	WORD PTR [ecx+2]
	dec	WORD PTR [ecx+4]
	mov	WORD PTR [eax+4], dx

; 332  : 		return Result;
; 333  : 	}

	pop	ebp
	ret	8
??F?$tvec3@F$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<short,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@F$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec3@F$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<short,2>::operator++, COMDAT
; _this$ = ecx

; 321  : 	{

	push	ebp
	mov	ebp, esp

; 322  : 		tvec3<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	dx, WORD PTR [ecx+4]

; 323  : 		++*this;

	inc	WORD PTR [ecx]
	inc	WORD PTR [ecx+2]
	inc	WORD PTR [ecx+4]
	mov	WORD PTR [eax+4], dx

; 324  : 		return Result;
; 325  : 	}

	pop	ebp
	ret	8
??E?$tvec3@F$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<short,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@F$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec3@F$01@glm@@QAEAAU01@XZ PROC			; glm::tvec3<short,2>::operator--, COMDAT
; _this$ = ecx

; 313  : 		--this->x;

	dec	WORD PTR [ecx]

; 314  : 		--this->y;
; 315  : 		--this->z;
; 316  : 		return *this;

	mov	eax, ecx
	dec	WORD PTR [ecx+2]
	dec	WORD PTR [ecx+4]

; 317  : 	}

	ret	0
??F?$tvec3@F$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<short,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@F$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec3@F$01@glm@@QAEAAU01@XZ PROC			; glm::tvec3<short,2>::operator++, COMDAT
; _this$ = ecx

; 304  : 		++this->x;

	inc	WORD PTR [ecx]

; 305  : 		++this->y;
; 306  : 		++this->z;
; 307  : 		return *this;

	mov	eax, ecx
	inc	WORD PTR [ecx+2]
	inc	WORD PTR [ecx+4]

; 308  : 	}

	ret	0
??E?$tvec3@F$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<short,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec3@F$01@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec3@F$01@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec3<short,2>::operator=, COMDAT
; _this$ = ecx

; 84   : template struct tvec3<int16, lowp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	ax, WORD PTR [edx+4]
	mov	WORD PTR [ecx+4], ax
	mov	eax, ecx
	pop	ebp
	ret	4
??4?$tvec3@F$01@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec3<short,2>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@F$01@glm@@QAE@FFF@Z
_TEXT	SEGMENT
_a$ = 8							; size = 2
_b$ = 12						; size = 2
_c$ = 16						; size = 2
??0?$tvec3@F$01@glm@@QAE@FFF@Z PROC			; glm::tvec3<short,2>::tvec3<short,2>, COMDAT
; _this$ = ecx

; 70   : 	{}

	push	ebp
	mov	ebp, esp
	mov	ax, WORD PTR _a$[ebp]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR _b$[ebp]
	mov	WORD PTR [ecx+2], ax
	mov	ax, WORD PTR _c$[ebp]
	mov	WORD PTR [ecx+4], ax
	mov	eax, ecx
	pop	ebp
	ret	12					; 0000000cH
??0?$tvec3@F$01@glm@@QAE@FFF@Z ENDP			; glm::tvec3<short,2>::tvec3<short,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@F$01@glm@@QAE@F@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 2
??0?$tvec3@F$01@glm@@QAE@F@Z PROC			; glm::tvec3<short,2>::tvec3<short,2>, COMDAT
; _this$ = ecx

; 65   : 	{}

	push	ebp
	mov	ebp, esp
	mov	ax, WORD PTR _scalar$[ebp]
	mov	WORD PTR [ecx], ax
	mov	WORD PTR [ecx+2], ax
	mov	WORD PTR [ecx+4], ax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec3@F$01@glm@@QAE@F@Z ENDP			; glm::tvec3<short,2>::tvec3<short,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@F$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec3@F$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec3<short,2>::tvec3<short,2>, COMDAT
; _this$ = ecx

; 60   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec3@F$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec3<short,2>::tvec3<short,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec3@F$01@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec3@F$01@glm@@QAE@ABU01@@Z PROC			; glm::tvec3<short,2>::tvec3<short,2>, COMDAT
; _this$ = ecx

; 84   : template struct tvec3<int16, lowp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR [edx+2]
	mov	WORD PTR [ecx+2], ax
	mov	ax, WORD PTR [edx+2]
	mov	WORD PTR [ecx+2], ax
	mov	ax, WORD PTR [edx+2]
	mov	WORD PTR [ecx+2], ax
	mov	ax, WORD PTR [edx+4]
	mov	WORD PTR [ecx+4], ax
	mov	ax, WORD PTR [edx+4]
	mov	WORD PTR [ecx+4], ax
	mov	ax, WORD PTR [edx+4]
	mov	WORD PTR [ecx+4], ax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec3@F$01@glm@@QAE@ABU01@@Z ENDP			; glm::tvec3<short,2>::tvec3<short,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@F$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec3@F$01@glm@@QAE@XZ PROC			; glm::tvec3<short,2>::tvec3<short,2>, COMDAT
; _this$ = ecx

; 40   : 		{}

	xor	eax, eax
	mov	DWORD PTR [ecx], eax
	mov	WORD PTR [ecx+4], ax
	mov	eax, ecx
	ret	0
??0?$tvec3@F$01@glm@@QAE@XZ ENDP			; glm::tvec3<short,2>::tvec3<short,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@F$01@glm@@QBEABFH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@F$01@glm@@QBEABFH@Z PROC			; glm::tvec3<short,2>::operator[], COMDAT
; _this$ = ecx

; 151  : 	{

	push	ebp
	mov	ebp, esp

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 154  : 	}

	pop	ebp
	ret	4
??A?$tvec3@F$01@glm@@QBEABFH@Z ENDP			; glm::tvec3<short,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@F$01@glm@@QAEAAFH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@F$01@glm@@QAEAAFH@Z PROC			; glm::tvec3<short,2>::operator[], COMDAT
; _this$ = ecx

; 144  : 	{

	push	ebp
	mov	ebp, esp

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 147  : 	}

	pop	ebp
	ret	4
??A?$tvec3@F$01@glm@@QAEAAFH@Z ENDP			; glm::tvec3<short,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@F$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@F$01@glm@@SAHXZ PROC			; glm::tvec3<short,2>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	push	3
	pop	eax
	ret	0
?length@?$tvec3@F$01@glm@@SAHXZ ENDP			; glm::tvec3<short,2>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@C$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec3@C$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<signed char,2>::operator--, COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		tvec3<T, P> Result(*this);

	mov	dx, WORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	WORD PTR [eax], dx
	mov	dl, BYTE PTR [ecx+2]

; 331  : 		--*this;

	dec	BYTE PTR [ecx]
	dec	BYTE PTR [ecx+1]
	dec	BYTE PTR [ecx+2]
	mov	BYTE PTR [eax+2], dl

; 332  : 		return Result;
; 333  : 	}

	pop	ebp
	ret	8
??F?$tvec3@C$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<signed char,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@C$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec3@C$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<signed char,2>::operator++, COMDAT
; _this$ = ecx

; 321  : 	{

	push	ebp
	mov	ebp, esp

; 322  : 		tvec3<T, P> Result(*this);

	mov	dx, WORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	WORD PTR [eax], dx
	mov	dl, BYTE PTR [ecx+2]

; 323  : 		++*this;

	inc	BYTE PTR [ecx]
	inc	BYTE PTR [ecx+1]
	inc	BYTE PTR [ecx+2]
	mov	BYTE PTR [eax+2], dl

; 324  : 		return Result;
; 325  : 	}

	pop	ebp
	ret	8
??E?$tvec3@C$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<signed char,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@C$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec3@C$01@glm@@QAEAAU01@XZ PROC			; glm::tvec3<signed char,2>::operator--, COMDAT
; _this$ = ecx

; 313  : 		--this->x;

	dec	BYTE PTR [ecx]

; 314  : 		--this->y;
; 315  : 		--this->z;
; 316  : 		return *this;

	mov	eax, ecx
	dec	BYTE PTR [ecx+1]
	dec	BYTE PTR [ecx+2]

; 317  : 	}

	ret	0
??F?$tvec3@C$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<signed char,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@C$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec3@C$01@glm@@QAEAAU01@XZ PROC			; glm::tvec3<signed char,2>::operator++, COMDAT
; _this$ = ecx

; 304  : 		++this->x;

	inc	BYTE PTR [ecx]

; 305  : 		++this->y;
; 306  : 		++this->z;
; 307  : 		return *this;

	mov	eax, ecx
	inc	BYTE PTR [ecx+1]
	inc	BYTE PTR [ecx+2]

; 308  : 	}

	ret	0
??E?$tvec3@C$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<signed char,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec3@C$01@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec3@C$01@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec3<signed char,2>::operator=, COMDAT
; _this$ = ecx

; 83   : template struct tvec3<int8, lowp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax
	mov	al, BYTE PTR [edx+2]
	mov	BYTE PTR [ecx+2], al
	mov	eax, ecx
	pop	ebp
	ret	4
??4?$tvec3@C$01@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec3<signed char,2>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@C$01@glm@@QAE@CCC@Z
_TEXT	SEGMENT
_a$ = 8							; size = 1
_b$ = 12						; size = 1
_c$ = 16						; size = 1
??0?$tvec3@C$01@glm@@QAE@CCC@Z PROC			; glm::tvec3<signed char,2>::tvec3<signed char,2>, COMDAT
; _this$ = ecx

; 70   : 	{}

	push	ebp
	mov	ebp, esp
	mov	al, BYTE PTR _a$[ebp]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR _b$[ebp]
	mov	BYTE PTR [ecx+1], al
	mov	al, BYTE PTR _c$[ebp]
	mov	BYTE PTR [ecx+2], al
	mov	eax, ecx
	pop	ebp
	ret	12					; 0000000cH
??0?$tvec3@C$01@glm@@QAE@CCC@Z ENDP			; glm::tvec3<signed char,2>::tvec3<signed char,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@C$01@glm@@QAE@C@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 1
??0?$tvec3@C$01@glm@@QAE@C@Z PROC			; glm::tvec3<signed char,2>::tvec3<signed char,2>, COMDAT
; _this$ = ecx

; 65   : 	{}

	push	ebp
	mov	ebp, esp
	mov	al, BYTE PTR _scalar$[ebp]
	mov	BYTE PTR [ecx], al
	mov	BYTE PTR [ecx+1], al
	mov	BYTE PTR [ecx+2], al
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec3@C$01@glm@@QAE@C@Z ENDP			; glm::tvec3<signed char,2>::tvec3<signed char,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@C$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec3@C$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec3<signed char,2>::tvec3<signed char,2>, COMDAT
; _this$ = ecx

; 60   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec3@C$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec3<signed char,2>::tvec3<signed char,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec3@C$01@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec3@C$01@glm@@QAE@ABU01@@Z PROC			; glm::tvec3<signed char,2>::tvec3<signed char,2>, COMDAT
; _this$ = ecx

; 83   : template struct tvec3<int8, lowp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR [edx+1]
	mov	BYTE PTR [ecx+1], al
	mov	al, BYTE PTR [edx+1]
	mov	BYTE PTR [ecx+1], al
	mov	al, BYTE PTR [edx+1]
	mov	BYTE PTR [ecx+1], al
	mov	al, BYTE PTR [edx+2]
	mov	BYTE PTR [ecx+2], al
	mov	al, BYTE PTR [edx+2]
	mov	BYTE PTR [ecx+2], al
	mov	al, BYTE PTR [edx+2]
	mov	BYTE PTR [ecx+2], al
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec3@C$01@glm@@QAE@ABU01@@Z ENDP			; glm::tvec3<signed char,2>::tvec3<signed char,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@C$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec3@C$01@glm@@QAE@XZ PROC			; glm::tvec3<signed char,2>::tvec3<signed char,2>, COMDAT
; _this$ = ecx

; 40   : 		{}

	xor	eax, eax
	mov	WORD PTR [ecx], ax
	mov	BYTE PTR [ecx+2], al
	mov	eax, ecx
	ret	0
??0?$tvec3@C$01@glm@@QAE@XZ ENDP			; glm::tvec3<signed char,2>::tvec3<signed char,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@C$01@glm@@QBEABCH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@C$01@glm@@QBEABCH@Z PROC			; glm::tvec3<signed char,2>::operator[], COMDAT
; _this$ = ecx

; 151  : 	{

	push	ebp
	mov	ebp, esp

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 154  : 	}

	pop	ebp
	ret	4
??A?$tvec3@C$01@glm@@QBEABCH@Z ENDP			; glm::tvec3<signed char,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@C$01@glm@@QAEAACH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@C$01@glm@@QAEAACH@Z PROC			; glm::tvec3<signed char,2>::operator[], COMDAT
; _this$ = ecx

; 144  : 	{

	push	ebp
	mov	ebp, esp

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 147  : 	}

	pop	ebp
	ret	4
??A?$tvec3@C$01@glm@@QAEAACH@Z ENDP			; glm::tvec3<signed char,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@C$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@C$01@glm@@SAHXZ PROC			; glm::tvec3<signed char,2>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	push	3
	pop	eax
	ret	0
?length@?$tvec3@C$01@glm@@SAHXZ ENDP			; glm::tvec3<signed char,2>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@_K$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec3@_K$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<unsigned __int64,2>::operator--, COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		tvec3<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, ecx
	push	esi
	push	edi
	push	6
	pop	ecx
	mov	esi, edx
	mov	edi, eax
	rep movsd

; 331  : 		--*this;

	or	ecx, -1
	add	DWORD PTR [edx], ecx
	pop	edi
	adc	DWORD PTR [edx+4], ecx
	add	DWORD PTR [edx+8], ecx
	pop	esi
	adc	DWORD PTR [edx+12], ecx
	add	DWORD PTR [edx+16], ecx
	adc	DWORD PTR [edx+20], ecx

; 332  : 		return Result;
; 333  : 	}

	pop	ebp
	ret	8
??F?$tvec3@_K$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<unsigned __int64,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@_K$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec3@_K$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<unsigned __int64,2>::operator++, COMDAT
; _this$ = ecx

; 321  : 	{

	push	ebp
	mov	ebp, esp

; 322  : 		tvec3<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, ecx
	push	esi
	push	edi
	push	6
	pop	ecx
	mov	esi, edx
	mov	edi, eax
	rep movsd

; 323  : 		++*this;

	add	DWORD PTR [edx], 1
	push	0
	pop	ecx
	adc	DWORD PTR [edx+4], ecx
	add	DWORD PTR [edx+8], 1
	pop	edi
	adc	DWORD PTR [edx+12], ecx
	add	DWORD PTR [edx+16], 1
	pop	esi
	adc	DWORD PTR [edx+20], ecx

; 324  : 		return Result;
; 325  : 	}

	pop	ebp
	ret	8
??E?$tvec3@_K$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<unsigned __int64,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@_K$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec3@_K$01@glm@@QAEAAU01@XZ PROC			; glm::tvec3<unsigned __int64,2>::operator--, COMDAT
; _this$ = ecx

; 313  : 		--this->x;

	or	eax, -1
	add	DWORD PTR [ecx], eax
	adc	DWORD PTR [ecx+4], eax

; 314  : 		--this->y;

	add	DWORD PTR [ecx+8], eax
	adc	DWORD PTR [ecx+12], eax

; 315  : 		--this->z;

	add	DWORD PTR [ecx+16], eax
	adc	DWORD PTR [ecx+20], eax

; 316  : 		return *this;

	mov	eax, ecx

; 317  : 	}

	ret	0
??F?$tvec3@_K$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<unsigned __int64,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@_K$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec3@_K$01@glm@@QAEAAU01@XZ PROC			; glm::tvec3<unsigned __int64,2>::operator++, COMDAT
; _this$ = ecx

; 304  : 		++this->x;

	add	DWORD PTR [ecx], 1
	push	0
	pop	eax
	adc	DWORD PTR [ecx+4], eax

; 305  : 		++this->y;

	add	DWORD PTR [ecx+8], 1
	adc	DWORD PTR [ecx+12], eax

; 306  : 		++this->z;

	add	DWORD PTR [ecx+16], 1
	adc	DWORD PTR [ecx+20], eax

; 307  : 		return *this;

	mov	eax, ecx

; 308  : 	}

	ret	0
??E?$tvec3@_K$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<unsigned __int64,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec3@_K$01@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec3@_K$01@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec3<unsigned __int64,2>::operator=, COMDAT
; _this$ = ecx

; 82   : template struct tvec3<uint64, lowp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	push	6
	pop	ecx
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tvec3@_K$01@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec3<unsigned __int64,2>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_K$01@glm@@QAE@_K00@Z
_TEXT	SEGMENT
_a$ = 8							; size = 8
_b$ = 16						; size = 8
_c$ = 24						; size = 8
??0?$tvec3@_K$01@glm@@QAE@_K00@Z PROC			; glm::tvec3<unsigned __int64,2>::tvec3<unsigned __int64,2>, COMDAT
; _this$ = ecx

; 70   : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _a$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _b$[ebp+4]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR _c$[ebp+4]
	mov	DWORD PTR [ecx+20], eax
	mov	eax, ecx
	pop	ebp
	ret	24					; 00000018H
??0?$tvec3@_K$01@glm@@QAE@_K00@Z ENDP			; glm::tvec3<unsigned __int64,2>::tvec3<unsigned __int64,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_K$01@glm@@QAE@_K@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 8
??0?$tvec3@_K$01@glm@@QAE@_K@Z PROC			; glm::tvec3<unsigned __int64,2>::tvec3<unsigned __int64,2>, COMDAT
; _this$ = ecx

; 65   : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _scalar$[ebp+4]
	mov	edx, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+12], eax
	mov	DWORD PTR [ecx+20], eax
	mov	eax, ecx
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+8], edx
	mov	DWORD PTR [ecx+16], edx
	pop	ebp
	ret	8
??0?$tvec3@_K$01@glm@@QAE@_K@Z ENDP			; glm::tvec3<unsigned __int64,2>::tvec3<unsigned __int64,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_K$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec3@_K$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec3<unsigned __int64,2>::tvec3<unsigned __int64,2>, COMDAT
; _this$ = ecx

; 60   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec3@_K$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec3<unsigned __int64,2>::tvec3<unsigned __int64,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec3@_K$01@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec3@_K$01@glm@@QAE@ABU01@@Z PROC			; glm::tvec3<unsigned __int64,2>::tvec3<unsigned __int64,2>, COMDAT
; _this$ = ecx

; 82   : template struct tvec3<uint64, lowp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx+20], eax
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx+20], eax
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx+20], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec3@_K$01@glm@@QAE@ABU01@@Z ENDP			; glm::tvec3<unsigned __int64,2>::tvec3<unsigned __int64,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_K$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec3@_K$01@glm@@QAE@XZ PROC			; glm::tvec3<unsigned __int64,2>::tvec3<unsigned __int64,2>, COMDAT
; _this$ = ecx

; 40   : 		{}

	xor	eax, eax
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR [ecx+12], eax
	mov	DWORD PTR [ecx+16], eax
	mov	DWORD PTR [ecx+20], eax
	mov	eax, ecx
	ret	0
??0?$tvec3@_K$01@glm@@QAE@XZ ENDP			; glm::tvec3<unsigned __int64,2>::tvec3<unsigned __int64,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@_K$01@glm@@QBEAB_KH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@_K$01@glm@@QBEAB_KH@Z PROC			; glm::tvec3<unsigned __int64,2>::operator[], COMDAT
; _this$ = ecx

; 151  : 	{

	push	ebp
	mov	ebp, esp

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 154  : 	}

	pop	ebp
	ret	4
??A?$tvec3@_K$01@glm@@QBEAB_KH@Z ENDP			; glm::tvec3<unsigned __int64,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@_K$01@glm@@QAEAA_KH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@_K$01@glm@@QAEAA_KH@Z PROC			; glm::tvec3<unsigned __int64,2>::operator[], COMDAT
; _this$ = ecx

; 144  : 	{

	push	ebp
	mov	ebp, esp

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 147  : 	}

	pop	ebp
	ret	4
??A?$tvec3@_K$01@glm@@QAEAA_KH@Z ENDP			; glm::tvec3<unsigned __int64,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@_K$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@_K$01@glm@@SAHXZ PROC			; glm::tvec3<unsigned __int64,2>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	push	3
	pop	eax
	ret	0
?length@?$tvec3@_K$01@glm@@SAHXZ ENDP			; glm::tvec3<unsigned __int64,2>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@I$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec3@I$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<unsigned int,2>::operator--, COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		tvec3<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	mov	esi, ecx
	mov	edi, eax
	movsd
	movsd
	movsd

; 331  : 		--*this;

	dec	DWORD PTR [ecx]
	dec	DWORD PTR [ecx+4]
	dec	DWORD PTR [ecx+8]
	pop	edi
	pop	esi

; 332  : 		return Result;
; 333  : 	}

	pop	ebp
	ret	8
??F?$tvec3@I$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<unsigned int,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@I$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec3@I$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<unsigned int,2>::operator++, COMDAT
; _this$ = ecx

; 321  : 	{

	push	ebp
	mov	ebp, esp

; 322  : 		tvec3<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	mov	esi, ecx
	mov	edi, eax
	movsd
	movsd
	movsd

; 323  : 		++*this;

	inc	DWORD PTR [ecx]
	inc	DWORD PTR [ecx+4]
	inc	DWORD PTR [ecx+8]
	pop	edi
	pop	esi

; 324  : 		return Result;
; 325  : 	}

	pop	ebp
	ret	8
??E?$tvec3@I$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<unsigned int,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@I$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec3@I$01@glm@@QAEAAU01@XZ PROC			; glm::tvec3<unsigned int,2>::operator--, COMDAT
; _this$ = ecx

; 313  : 		--this->x;

	dec	DWORD PTR [ecx]

; 314  : 		--this->y;
; 315  : 		--this->z;
; 316  : 		return *this;

	mov	eax, ecx
	dec	DWORD PTR [ecx+4]
	dec	DWORD PTR [ecx+8]

; 317  : 	}

	ret	0
??F?$tvec3@I$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<unsigned int,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@I$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec3@I$01@glm@@QAEAAU01@XZ PROC			; glm::tvec3<unsigned int,2>::operator++, COMDAT
; _this$ = ecx

; 304  : 		++this->x;

	inc	DWORD PTR [ecx]

; 305  : 		++this->y;
; 306  : 		++this->z;
; 307  : 		return *this;

	mov	eax, ecx
	inc	DWORD PTR [ecx+4]
	inc	DWORD PTR [ecx+8]

; 308  : 	}

	ret	0
??E?$tvec3@I$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<unsigned int,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec3@I$01@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec3@I$01@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec3<unsigned int,2>::operator=, COMDAT
; _this$ = ecx

; 81   : template struct tvec3<uint32, lowp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	mov	edi, ecx
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tvec3@I$01@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec3<unsigned int,2>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@I$01@glm@@QAE@III@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
??0?$tvec3@I$01@glm@@QAE@III@Z PROC			; glm::tvec3<unsigned int,2>::tvec3<unsigned int,2>, COMDAT
; _this$ = ecx

; 70   : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, ecx
	pop	ebp
	ret	12					; 0000000cH
??0?$tvec3@I$01@glm@@QAE@III@Z ENDP			; glm::tvec3<unsigned int,2>::tvec3<unsigned int,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@I$01@glm@@QAE@I@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 4
??0?$tvec3@I$01@glm@@QAE@I@Z PROC			; glm::tvec3<unsigned int,2>::tvec3<unsigned int,2>, COMDAT
; _this$ = ecx

; 65   : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec3@I$01@glm@@QAE@I@Z ENDP			; glm::tvec3<unsigned int,2>::tvec3<unsigned int,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@I$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec3@I$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec3<unsigned int,2>::tvec3<unsigned int,2>, COMDAT
; _this$ = ecx

; 60   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec3@I$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec3<unsigned int,2>::tvec3<unsigned int,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec3@I$01@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec3@I$01@glm@@QAE@ABU01@@Z PROC			; glm::tvec3<unsigned int,2>::tvec3<unsigned int,2>, COMDAT
; _this$ = ecx

; 81   : template struct tvec3<uint32, lowp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec3@I$01@glm@@QAE@ABU01@@Z ENDP			; glm::tvec3<unsigned int,2>::tvec3<unsigned int,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@I$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec3@I$01@glm@@QAE@XZ PROC			; glm::tvec3<unsigned int,2>::tvec3<unsigned int,2>, COMDAT
; _this$ = ecx

; 40   : 		{}

	xor	eax, eax
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], eax
	mov	eax, ecx
	ret	0
??0?$tvec3@I$01@glm@@QAE@XZ ENDP			; glm::tvec3<unsigned int,2>::tvec3<unsigned int,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@I$01@glm@@QBEABIH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@I$01@glm@@QBEABIH@Z PROC			; glm::tvec3<unsigned int,2>::operator[], COMDAT
; _this$ = ecx

; 151  : 	{

	push	ebp
	mov	ebp, esp

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 154  : 	}

	pop	ebp
	ret	4
??A?$tvec3@I$01@glm@@QBEABIH@Z ENDP			; glm::tvec3<unsigned int,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@I$01@glm@@QAEAAIH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@I$01@glm@@QAEAAIH@Z PROC			; glm::tvec3<unsigned int,2>::operator[], COMDAT
; _this$ = ecx

; 144  : 	{

	push	ebp
	mov	ebp, esp

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 147  : 	}

	pop	ebp
	ret	4
??A?$tvec3@I$01@glm@@QAEAAIH@Z ENDP			; glm::tvec3<unsigned int,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@I$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@I$01@glm@@SAHXZ PROC			; glm::tvec3<unsigned int,2>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	push	3
	pop	eax
	ret	0
?length@?$tvec3@I$01@glm@@SAHXZ ENDP			; glm::tvec3<unsigned int,2>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@G$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec3@G$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<unsigned short,2>::operator--, COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		tvec3<T, P> Result(*this);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	ax, WORD PTR [ecx+4]
	mov	WORD PTR [edx+4], ax

; 331  : 		--*this;

	mov	eax, 65535				; 0000ffffH
	add	WORD PTR [ecx], ax
	add	WORD PTR [ecx+2], ax
	add	WORD PTR [ecx+4], ax

; 332  : 		return Result;

	mov	eax, edx

; 333  : 	}

	pop	ebp
	ret	8
??F?$tvec3@G$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<unsigned short,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@G$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec3@G$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<unsigned short,2>::operator++, COMDAT
; _this$ = ecx

; 321  : 	{

	push	ebp
	mov	ebp, esp

; 322  : 		tvec3<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	dx, WORD PTR [ecx+4]

; 323  : 		++*this;

	inc	WORD PTR [ecx]
	inc	WORD PTR [ecx+2]
	inc	WORD PTR [ecx+4]
	mov	WORD PTR [eax+4], dx

; 324  : 		return Result;
; 325  : 	}

	pop	ebp
	ret	8
??E?$tvec3@G$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<unsigned short,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@G$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec3@G$01@glm@@QAEAAU01@XZ PROC			; glm::tvec3<unsigned short,2>::operator--, COMDAT
; _this$ = ecx

; 313  : 		--this->x;

	mov	eax, 65535				; 0000ffffH
	add	WORD PTR [ecx], ax

; 314  : 		--this->y;

	add	WORD PTR [ecx+2], ax

; 315  : 		--this->z;

	add	WORD PTR [ecx+4], ax

; 316  : 		return *this;

	mov	eax, ecx

; 317  : 	}

	ret	0
??F?$tvec3@G$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<unsigned short,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@G$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec3@G$01@glm@@QAEAAU01@XZ PROC			; glm::tvec3<unsigned short,2>::operator++, COMDAT
; _this$ = ecx

; 304  : 		++this->x;

	inc	WORD PTR [ecx]

; 305  : 		++this->y;
; 306  : 		++this->z;
; 307  : 		return *this;

	mov	eax, ecx
	inc	WORD PTR [ecx+2]
	inc	WORD PTR [ecx+4]

; 308  : 	}

	ret	0
??E?$tvec3@G$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<unsigned short,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec3@G$01@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec3@G$01@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec3<unsigned short,2>::operator=, COMDAT
; _this$ = ecx

; 80   : template struct tvec3<uint16, lowp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	ax, WORD PTR [edx+4]
	mov	WORD PTR [ecx+4], ax
	mov	eax, ecx
	pop	ebp
	ret	4
??4?$tvec3@G$01@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec3<unsigned short,2>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@G$01@glm@@QAE@GGG@Z
_TEXT	SEGMENT
_a$ = 8							; size = 2
_b$ = 12						; size = 2
_c$ = 16						; size = 2
??0?$tvec3@G$01@glm@@QAE@GGG@Z PROC			; glm::tvec3<unsigned short,2>::tvec3<unsigned short,2>, COMDAT
; _this$ = ecx

; 70   : 	{}

	push	ebp
	mov	ebp, esp
	mov	ax, WORD PTR _a$[ebp]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR _b$[ebp]
	mov	WORD PTR [ecx+2], ax
	mov	ax, WORD PTR _c$[ebp]
	mov	WORD PTR [ecx+4], ax
	mov	eax, ecx
	pop	ebp
	ret	12					; 0000000cH
??0?$tvec3@G$01@glm@@QAE@GGG@Z ENDP			; glm::tvec3<unsigned short,2>::tvec3<unsigned short,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@G$01@glm@@QAE@G@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 2
??0?$tvec3@G$01@glm@@QAE@G@Z PROC			; glm::tvec3<unsigned short,2>::tvec3<unsigned short,2>, COMDAT
; _this$ = ecx

; 65   : 	{}

	push	ebp
	mov	ebp, esp
	mov	ax, WORD PTR _scalar$[ebp]
	mov	WORD PTR [ecx], ax
	mov	WORD PTR [ecx+2], ax
	mov	WORD PTR [ecx+4], ax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec3@G$01@glm@@QAE@G@Z ENDP			; glm::tvec3<unsigned short,2>::tvec3<unsigned short,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@G$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec3@G$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec3<unsigned short,2>::tvec3<unsigned short,2>, COMDAT
; _this$ = ecx

; 60   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec3@G$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec3<unsigned short,2>::tvec3<unsigned short,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec3@G$01@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec3@G$01@glm@@QAE@ABU01@@Z PROC			; glm::tvec3<unsigned short,2>::tvec3<unsigned short,2>, COMDAT
; _this$ = ecx

; 80   : template struct tvec3<uint16, lowp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR [edx+2]
	mov	WORD PTR [ecx+2], ax
	mov	ax, WORD PTR [edx+2]
	mov	WORD PTR [ecx+2], ax
	mov	ax, WORD PTR [edx+2]
	mov	WORD PTR [ecx+2], ax
	mov	ax, WORD PTR [edx+4]
	mov	WORD PTR [ecx+4], ax
	mov	ax, WORD PTR [edx+4]
	mov	WORD PTR [ecx+4], ax
	mov	ax, WORD PTR [edx+4]
	mov	WORD PTR [ecx+4], ax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec3@G$01@glm@@QAE@ABU01@@Z ENDP			; glm::tvec3<unsigned short,2>::tvec3<unsigned short,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@G$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec3@G$01@glm@@QAE@XZ PROC			; glm::tvec3<unsigned short,2>::tvec3<unsigned short,2>, COMDAT
; _this$ = ecx

; 40   : 		{}

	xor	eax, eax
	mov	DWORD PTR [ecx], eax
	mov	WORD PTR [ecx+4], ax
	mov	eax, ecx
	ret	0
??0?$tvec3@G$01@glm@@QAE@XZ ENDP			; glm::tvec3<unsigned short,2>::tvec3<unsigned short,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@G$01@glm@@QBEABGH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@G$01@glm@@QBEABGH@Z PROC			; glm::tvec3<unsigned short,2>::operator[], COMDAT
; _this$ = ecx

; 151  : 	{

	push	ebp
	mov	ebp, esp

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 154  : 	}

	pop	ebp
	ret	4
??A?$tvec3@G$01@glm@@QBEABGH@Z ENDP			; glm::tvec3<unsigned short,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@G$01@glm@@QAEAAGH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@G$01@glm@@QAEAAGH@Z PROC			; glm::tvec3<unsigned short,2>::operator[], COMDAT
; _this$ = ecx

; 144  : 	{

	push	ebp
	mov	ebp, esp

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 147  : 	}

	pop	ebp
	ret	4
??A?$tvec3@G$01@glm@@QAEAAGH@Z ENDP			; glm::tvec3<unsigned short,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@G$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@G$01@glm@@SAHXZ PROC			; glm::tvec3<unsigned short,2>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	push	3
	pop	eax
	ret	0
?length@?$tvec3@G$01@glm@@SAHXZ ENDP			; glm::tvec3<unsigned short,2>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@E$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec3@E$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<unsigned char,2>::operator--, COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		tvec3<T, P> Result(*this);

	mov	dx, WORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	WORD PTR [eax], dx
	mov	dl, BYTE PTR [ecx+2]

; 331  : 		--*this;

	dec	BYTE PTR [ecx]
	dec	BYTE PTR [ecx+1]
	dec	BYTE PTR [ecx+2]
	mov	BYTE PTR [eax+2], dl

; 332  : 		return Result;
; 333  : 	}

	pop	ebp
	ret	8
??F?$tvec3@E$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<unsigned char,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@E$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec3@E$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<unsigned char,2>::operator++, COMDAT
; _this$ = ecx

; 321  : 	{

	push	ebp
	mov	ebp, esp

; 322  : 		tvec3<T, P> Result(*this);

	mov	dx, WORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	WORD PTR [eax], dx
	mov	dl, BYTE PTR [ecx+2]

; 323  : 		++*this;

	inc	BYTE PTR [ecx]
	inc	BYTE PTR [ecx+1]
	inc	BYTE PTR [ecx+2]
	mov	BYTE PTR [eax+2], dl

; 324  : 		return Result;
; 325  : 	}

	pop	ebp
	ret	8
??E?$tvec3@E$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<unsigned char,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@E$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec3@E$01@glm@@QAEAAU01@XZ PROC			; glm::tvec3<unsigned char,2>::operator--, COMDAT
; _this$ = ecx

; 313  : 		--this->x;

	dec	BYTE PTR [ecx]

; 314  : 		--this->y;
; 315  : 		--this->z;
; 316  : 		return *this;

	mov	eax, ecx
	dec	BYTE PTR [ecx+1]
	dec	BYTE PTR [ecx+2]

; 317  : 	}

	ret	0
??F?$tvec3@E$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<unsigned char,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@E$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec3@E$01@glm@@QAEAAU01@XZ PROC			; glm::tvec3<unsigned char,2>::operator++, COMDAT
; _this$ = ecx

; 304  : 		++this->x;

	inc	BYTE PTR [ecx]

; 305  : 		++this->y;
; 306  : 		++this->z;
; 307  : 		return *this;

	mov	eax, ecx
	inc	BYTE PTR [ecx+1]
	inc	BYTE PTR [ecx+2]

; 308  : 	}

	ret	0
??E?$tvec3@E$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<unsigned char,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec3@E$01@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec3@E$01@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec3<unsigned char,2>::operator=, COMDAT
; _this$ = ecx

; 79   : template struct tvec3<uint8, lowp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax
	mov	al, BYTE PTR [edx+2]
	mov	BYTE PTR [ecx+2], al
	mov	eax, ecx
	pop	ebp
	ret	4
??4?$tvec3@E$01@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec3<unsigned char,2>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@E$01@glm@@QAE@EEE@Z
_TEXT	SEGMENT
_a$ = 8							; size = 1
_b$ = 12						; size = 1
_c$ = 16						; size = 1
??0?$tvec3@E$01@glm@@QAE@EEE@Z PROC			; glm::tvec3<unsigned char,2>::tvec3<unsigned char,2>, COMDAT
; _this$ = ecx

; 70   : 	{}

	push	ebp
	mov	ebp, esp
	mov	al, BYTE PTR _a$[ebp]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR _b$[ebp]
	mov	BYTE PTR [ecx+1], al
	mov	al, BYTE PTR _c$[ebp]
	mov	BYTE PTR [ecx+2], al
	mov	eax, ecx
	pop	ebp
	ret	12					; 0000000cH
??0?$tvec3@E$01@glm@@QAE@EEE@Z ENDP			; glm::tvec3<unsigned char,2>::tvec3<unsigned char,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@E$01@glm@@QAE@E@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 1
??0?$tvec3@E$01@glm@@QAE@E@Z PROC			; glm::tvec3<unsigned char,2>::tvec3<unsigned char,2>, COMDAT
; _this$ = ecx

; 65   : 	{}

	push	ebp
	mov	ebp, esp
	mov	al, BYTE PTR _scalar$[ebp]
	mov	BYTE PTR [ecx], al
	mov	BYTE PTR [ecx+1], al
	mov	BYTE PTR [ecx+2], al
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec3@E$01@glm@@QAE@E@Z ENDP			; glm::tvec3<unsigned char,2>::tvec3<unsigned char,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@E$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec3@E$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec3<unsigned char,2>::tvec3<unsigned char,2>, COMDAT
; _this$ = ecx

; 60   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec3@E$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec3<unsigned char,2>::tvec3<unsigned char,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec3@E$01@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec3@E$01@glm@@QAE@ABU01@@Z PROC			; glm::tvec3<unsigned char,2>::tvec3<unsigned char,2>, COMDAT
; _this$ = ecx

; 79   : template struct tvec3<uint8, lowp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR [edx+1]
	mov	BYTE PTR [ecx+1], al
	mov	al, BYTE PTR [edx+1]
	mov	BYTE PTR [ecx+1], al
	mov	al, BYTE PTR [edx+1]
	mov	BYTE PTR [ecx+1], al
	mov	al, BYTE PTR [edx+2]
	mov	BYTE PTR [ecx+2], al
	mov	al, BYTE PTR [edx+2]
	mov	BYTE PTR [ecx+2], al
	mov	al, BYTE PTR [edx+2]
	mov	BYTE PTR [ecx+2], al
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec3@E$01@glm@@QAE@ABU01@@Z ENDP			; glm::tvec3<unsigned char,2>::tvec3<unsigned char,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@E$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec3@E$01@glm@@QAE@XZ PROC			; glm::tvec3<unsigned char,2>::tvec3<unsigned char,2>, COMDAT
; _this$ = ecx

; 40   : 		{}

	xor	eax, eax
	mov	WORD PTR [ecx], ax
	mov	BYTE PTR [ecx+2], al
	mov	eax, ecx
	ret	0
??0?$tvec3@E$01@glm@@QAE@XZ ENDP			; glm::tvec3<unsigned char,2>::tvec3<unsigned char,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@E$01@glm@@QBEABEH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@E$01@glm@@QBEABEH@Z PROC			; glm::tvec3<unsigned char,2>::operator[], COMDAT
; _this$ = ecx

; 151  : 	{

	push	ebp
	mov	ebp, esp

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 154  : 	}

	pop	ebp
	ret	4
??A?$tvec3@E$01@glm@@QBEABEH@Z ENDP			; glm::tvec3<unsigned char,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@E$01@glm@@QAEAAEH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@E$01@glm@@QAEAAEH@Z PROC			; glm::tvec3<unsigned char,2>::operator[], COMDAT
; _this$ = ecx

; 144  : 	{

	push	ebp
	mov	ebp, esp

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 147  : 	}

	pop	ebp
	ret	4
??A?$tvec3@E$01@glm@@QAEAAEH@Z ENDP			; glm::tvec3<unsigned char,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@E$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@E$01@glm@@SAHXZ PROC			; glm::tvec3<unsigned char,2>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	push	3
	pop	eax
	ret	0
?length@?$tvec3@E$01@glm@@SAHXZ ENDP			; glm::tvec3<unsigned char,2>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@N$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec2@N$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<double,0>::operator--, COMDAT
; _this$ = ecx

; 271  : 	{

	push	ebp
	mov	ebp, esp

; 272  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 273  : 		--*this;

	movups	xmm0, XMMWORD PTR [ecx]
	push	esi
	push	edi
	subpd	xmm0, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	mov	esi, ecx
	mov	edi, eax
	movsd
	movsd
	movsd
	movsd
	pop	edi
	movups	XMMWORD PTR [ecx], xmm0
	pop	esi

; 274  : 		return Result;
; 275  : 	}

	pop	ebp
	ret	8
??F?$tvec2@N$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<double,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@N$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec2@N$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<double,0>::operator++, COMDAT
; _this$ = ecx

; 263  : 	{

	push	ebp
	mov	ebp, esp

; 264  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 265  : 		++*this;

	movups	xmm0, XMMWORD PTR [ecx]
	push	esi
	push	edi
	addpd	xmm0, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	mov	esi, ecx
	mov	edi, eax
	movsd
	movsd
	movsd
	movsd
	pop	edi
	movups	XMMWORD PTR [ecx], xmm0
	pop	esi

; 266  : 		return Result;
; 267  : 	}

	pop	ebp
	ret	8
??E?$tvec2@N$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<double,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@N$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec2@N$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec2<double,0>::operator--, COMDAT
; _this$ = ecx

; 256  : 		--this->x;

	movups	xmm0, XMMWORD PTR [ecx]

; 257  : 		--this->y;
; 258  : 		return *this;

	mov	eax, ecx
	subpd	xmm0, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [ecx], xmm0

; 259  : 	}

	ret	0
??F?$tvec2@N$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<double,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@N$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec2@N$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec2<double,0>::operator++, COMDAT
; _this$ = ecx

; 248  : 		++this->x;

	movups	xmm0, XMMWORD PTR [ecx]

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	eax, ecx
	addpd	xmm0, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [ecx], xmm0

; 251  : 	}

	ret	0
??E?$tvec2@N$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<double,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec2@N$0A@@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec2@N$0A@@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec2<double,0>::operator=, COMDAT
; _this$ = ecx

; 76   : template struct tvec2<float64, highp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	mov	edi, ecx
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tvec2@N$0A@@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec2<double,0>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@N$0A@@glm@@QAE@NN@Z
_TEXT	SEGMENT
_s1$ = 8						; size = 8
_s2$ = 16						; size = 8
??0?$tvec2@N$0A@@glm@@QAE@NN@Z PROC			; glm::tvec2<double,0>::tvec2<double,0>, COMDAT
; _this$ = ecx

; 57   : 	{}

	push	ebp
	mov	ebp, esp
	movsd	xmm0, QWORD PTR _s1$[ebp]
	mov	eax, ecx
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR _s2$[ebp]
	movsd	QWORD PTR [ecx+8], xmm0
	pop	ebp
	ret	16					; 00000010H
??0?$tvec2@N$0A@@glm@@QAE@NN@Z ENDP			; glm::tvec2<double,0>::tvec2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@N$0A@@glm@@QAE@N@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 8
??0?$tvec2@N$0A@@glm@@QAE@N@Z PROC			; glm::tvec2<double,0>::tvec2<double,0>, COMDAT
; _this$ = ecx

; 52   : 	{}

	push	ebp
	mov	ebp, esp
	movsd	xmm0, QWORD PTR _scalar$[ebp]
	mov	eax, ecx
	unpcklpd xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	pop	ebp
	ret	8
??0?$tvec2@N$0A@@glm@@QAE@N@Z ENDP			; glm::tvec2<double,0>::tvec2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@N$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec2@N$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec2<double,0>::tvec2<double,0>, COMDAT
; _this$ = ecx

; 47   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec2@N$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec2<double,0>::tvec2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec2@N$0A@@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec2@N$0A@@glm@@QAE@ABU01@@Z PROC			; glm::tvec2<double,0>::tvec2<double,0>, COMDAT
; _this$ = ecx

; 76   : template struct tvec2<float64, highp>;

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ___that$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	QWORD PTR [ecx+8], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	QWORD PTR [ecx+8], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	mov	eax, ecx
	movsd	QWORD PTR [ecx+8], xmm0
	pop	ebp
	ret	4
??0?$tvec2@N$0A@@glm@@QAE@ABU01@@Z ENDP			; glm::tvec2<double,0>::tvec2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@N$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec2@N$0A@@glm@@QAE@XZ PROC			; glm::tvec2<double,0>::tvec2<double,0>, COMDAT
; _this$ = ecx

; 27   : 		{}

	xorps	xmm0, xmm0
	mov	eax, ecx
	movups	XMMWORD PTR [ecx], xmm0
	ret	0
??0?$tvec2@N$0A@@glm@@QAE@XZ ENDP			; glm::tvec2<double,0>::tvec2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@N$0A@@glm@@QBEABNH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@N$0A@@glm@@QBEABNH@Z PROC			; glm::tvec2<double,0>::operator[], COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 112  : 	}

	pop	ebp
	ret	4
??A?$tvec2@N$0A@@glm@@QBEABNH@Z ENDP			; glm::tvec2<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@N$0A@@glm@@QAEAANH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@N$0A@@glm@@QAEAANH@Z PROC			; glm::tvec2<double,0>::operator[], COMDAT
; _this$ = ecx

; 102  : 	{

	push	ebp
	mov	ebp, esp

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 105  : 	}

	pop	ebp
	ret	4
??A?$tvec2@N$0A@@glm@@QAEAANH@Z ENDP			; glm::tvec2<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@N$0A@@glm@@SAHXZ PROC			; glm::tvec2<double,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	push	2
	pop	eax
	ret	0
?length@?$tvec2@N$0A@@glm@@SAHXZ ENDP			; glm::tvec2<double,0>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@_J$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec2@_J$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tvec2<__int64,0>::operator--, COMDAT
; _this$ = ecx

; 271  : 	{

	push	ebp
	mov	ebp, esp

; 272  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 273  : 		--*this;

	or	edx, -1
	push	esi
	push	edi
	mov	esi, ecx
	mov	edi, eax
	movsd
	movsd
	movsd
	movsd
	add	DWORD PTR [ecx], edx
	pop	edi
	adc	DWORD PTR [ecx+4], edx
	add	DWORD PTR [ecx+8], edx
	pop	esi
	adc	DWORD PTR [ecx+12], edx

; 274  : 		return Result;
; 275  : 	}

	pop	ebp
	ret	8
??F?$tvec2@_J$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tvec2<__int64,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@_J$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec2@_J$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tvec2<__int64,0>::operator++, COMDAT
; _this$ = ecx

; 263  : 	{

	push	ebp
	mov	ebp, esp

; 264  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	mov	esi, ecx
	mov	edi, eax
	movsd
	movsd
	movsd
	movsd

; 265  : 		++*this;

	add	DWORD PTR [ecx], 1
	pop	edi
	adc	DWORD PTR [ecx+4], 0
	add	DWORD PTR [ecx+8], 1
	pop	esi
	adc	DWORD PTR [ecx+12], 0

; 266  : 		return Result;
; 267  : 	}

	pop	ebp
	ret	8
??E?$tvec2@_J$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tvec2<__int64,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@_J$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec2@_J$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec2<__int64,0>::operator--, COMDAT
; _this$ = ecx

; 256  : 		--this->x;

	or	eax, -1
	add	DWORD PTR [ecx], eax
	adc	DWORD PTR [ecx+4], eax

; 257  : 		--this->y;

	add	DWORD PTR [ecx+8], eax
	adc	DWORD PTR [ecx+12], eax

; 258  : 		return *this;

	mov	eax, ecx

; 259  : 	}

	ret	0
??F?$tvec2@_J$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<__int64,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@_J$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec2@_J$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec2<__int64,0>::operator++, COMDAT
; _this$ = ecx

; 248  : 		++this->x;

	add	DWORD PTR [ecx], 1

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	eax, ecx
	adc	DWORD PTR [ecx+4], 0
	add	DWORD PTR [ecx+8], 1
	adc	DWORD PTR [ecx+12], 0

; 251  : 	}

	ret	0
??E?$tvec2@_J$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<__int64,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec2@_J$0A@@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec2@_J$0A@@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec2<__int64,0>::operator=, COMDAT
; _this$ = ecx

; 74   : template struct tvec2<int64, highp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	mov	edi, ecx
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tvec2@_J$0A@@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec2<__int64,0>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_J$0A@@glm@@QAE@_J0@Z
_TEXT	SEGMENT
_s1$ = 8						; size = 8
_s2$ = 16						; size = 8
??0?$tvec2@_J$0A@@glm@@QAE@_J0@Z PROC			; glm::tvec2<__int64,0>::tvec2<__int64,0>, COMDAT
; _this$ = ecx

; 57   : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _s1$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _s1$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _s2$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _s2$[ebp+4]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, ecx
	pop	ebp
	ret	16					; 00000010H
??0?$tvec2@_J$0A@@glm@@QAE@_J0@Z ENDP			; glm::tvec2<__int64,0>::tvec2<__int64,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_J$0A@@glm@@QAE@_J@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 8
??0?$tvec2@_J$0A@@glm@@QAE@_J@Z PROC			; glm::tvec2<__int64,0>::tvec2<__int64,0>, COMDAT
; _this$ = ecx

; 52   : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _scalar$[ebp+4]
	mov	edx, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+12], eax
	mov	eax, ecx
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+8], edx
	pop	ebp
	ret	8
??0?$tvec2@_J$0A@@glm@@QAE@_J@Z ENDP			; glm::tvec2<__int64,0>::tvec2<__int64,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_J$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec2@_J$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec2<__int64,0>::tvec2<__int64,0>, COMDAT
; _this$ = ecx

; 47   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec2@_J$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec2<__int64,0>::tvec2<__int64,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec2@_J$0A@@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec2@_J$0A@@glm@@QAE@ABU01@@Z PROC		; glm::tvec2<__int64,0>::tvec2<__int64,0>, COMDAT
; _this$ = ecx

; 74   : template struct tvec2<int64, highp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec2@_J$0A@@glm@@QAE@ABU01@@Z ENDP		; glm::tvec2<__int64,0>::tvec2<__int64,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_J$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec2@_J$0A@@glm@@QAE@XZ PROC			; glm::tvec2<__int64,0>::tvec2<__int64,0>, COMDAT
; _this$ = ecx

; 27   : 		{}

	xor	eax, eax
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR [ecx+12], eax
	mov	eax, ecx
	ret	0
??0?$tvec2@_J$0A@@glm@@QAE@XZ ENDP			; glm::tvec2<__int64,0>::tvec2<__int64,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@_J$0A@@glm@@QBEAB_JH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@_J$0A@@glm@@QBEAB_JH@Z PROC			; glm::tvec2<__int64,0>::operator[], COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 112  : 	}

	pop	ebp
	ret	4
??A?$tvec2@_J$0A@@glm@@QBEAB_JH@Z ENDP			; glm::tvec2<__int64,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@_J$0A@@glm@@QAEAA_JH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@_J$0A@@glm@@QAEAA_JH@Z PROC			; glm::tvec2<__int64,0>::operator[], COMDAT
; _this$ = ecx

; 102  : 	{

	push	ebp
	mov	ebp, esp

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 105  : 	}

	pop	ebp
	ret	4
??A?$tvec2@_J$0A@@glm@@QAEAA_JH@Z ENDP			; glm::tvec2<__int64,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@_J$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@_J$0A@@glm@@SAHXZ PROC			; glm::tvec2<__int64,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	push	2
	pop	eax
	ret	0
?length@?$tvec2@_J$0A@@glm@@SAHXZ ENDP			; glm::tvec2<__int64,0>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@H$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec2@H$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<int,0>::operator--, COMDAT
; _this$ = ecx

; 271  : 	{

	push	ebp
	mov	ebp, esp

; 272  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]

; 273  : 		--*this;

	dec	DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	dec	DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 274  : 		return Result;
; 275  : 	}

	pop	ebp
	ret	8
??F?$tvec2@H$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<int,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@H$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec2@H$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<int,0>::operator++, COMDAT
; _this$ = ecx

; 263  : 	{

	push	ebp
	mov	ebp, esp

; 264  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]

; 265  : 		++*this;

	inc	DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	inc	DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 266  : 		return Result;
; 267  : 	}

	pop	ebp
	ret	8
??E?$tvec2@H$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<int,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@H$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec2@H$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec2<int,0>::operator--, COMDAT
; _this$ = ecx

; 256  : 		--this->x;

	dec	DWORD PTR [ecx]

; 257  : 		--this->y;
; 258  : 		return *this;

	mov	eax, ecx
	dec	DWORD PTR [ecx+4]

; 259  : 	}

	ret	0
??F?$tvec2@H$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<int,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@H$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec2@H$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec2<int,0>::operator++, COMDAT
; _this$ = ecx

; 248  : 		++this->x;

	inc	DWORD PTR [ecx]

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	eax, ecx
	inc	DWORD PTR [ecx+4]

; 251  : 	}

	ret	0
??E?$tvec2@H$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<int,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec2@H$0A@@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec2@H$0A@@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec2<int,0>::operator=, COMDAT
; _this$ = ecx

; 73   : template struct tvec2<int32, highp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??4?$tvec2@H$0A@@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec2<int,0>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@H$0A@@glm@@QAE@HH@Z
_TEXT	SEGMENT
_s1$ = 8						; size = 4
_s2$ = 12						; size = 4
??0?$tvec2@H$0A@@glm@@QAE@HH@Z PROC			; glm::tvec2<int,0>::tvec2<int,0>, COMDAT
; _this$ = ecx

; 57   : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _s1$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _s2$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	pop	ebp
	ret	8
??0?$tvec2@H$0A@@glm@@QAE@HH@Z ENDP			; glm::tvec2<int,0>::tvec2<int,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@H$0A@@glm@@QAE@H@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 4
??0?$tvec2@H$0A@@glm@@QAE@H@Z PROC			; glm::tvec2<int,0>::tvec2<int,0>, COMDAT
; _this$ = ecx

; 52   : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec2@H$0A@@glm@@QAE@H@Z ENDP			; glm::tvec2<int,0>::tvec2<int,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@H$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec2@H$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec2<int,0>::tvec2<int,0>, COMDAT
; _this$ = ecx

; 47   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec2@H$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec2<int,0>::tvec2<int,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec2@H$0A@@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec2@H$0A@@glm@@QAE@ABU01@@Z PROC			; glm::tvec2<int,0>::tvec2<int,0>, COMDAT
; _this$ = ecx

; 73   : template struct tvec2<int32, highp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec2@H$0A@@glm@@QAE@ABU01@@Z ENDP			; glm::tvec2<int,0>::tvec2<int,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@H$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec2@H$0A@@glm@@QAE@XZ PROC			; glm::tvec2<int,0>::tvec2<int,0>, COMDAT
; _this$ = ecx

; 27   : 		{}

	and	DWORD PTR [ecx], 0
	mov	eax, ecx
	and	DWORD PTR [ecx+4], 0
	ret	0
??0?$tvec2@H$0A@@glm@@QAE@XZ ENDP			; glm::tvec2<int,0>::tvec2<int,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@H$0A@@glm@@QBEABHH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@H$0A@@glm@@QBEABHH@Z PROC			; glm::tvec2<int,0>::operator[], COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 112  : 	}

	pop	ebp
	ret	4
??A?$tvec2@H$0A@@glm@@QBEABHH@Z ENDP			; glm::tvec2<int,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@H$0A@@glm@@QAEAAHH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@H$0A@@glm@@QAEAAHH@Z PROC			; glm::tvec2<int,0>::operator[], COMDAT
; _this$ = ecx

; 102  : 	{

	push	ebp
	mov	ebp, esp

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 105  : 	}

	pop	ebp
	ret	4
??A?$tvec2@H$0A@@glm@@QAEAAHH@Z ENDP			; glm::tvec2<int,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@H$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@H$0A@@glm@@SAHXZ PROC			; glm::tvec2<int,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	push	2
	pop	eax
	ret	0
?length@?$tvec2@H$0A@@glm@@SAHXZ ENDP			; glm::tvec2<int,0>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@C$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec2@C$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<signed char,0>::operator--, COMDAT
; _this$ = ecx

; 271  : 	{

	push	ebp
	mov	ebp, esp

; 272  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	dx, WORD PTR [ecx]

; 273  : 		--*this;

	dec	BYTE PTR [ecx]
	dec	BYTE PTR [ecx+1]
	mov	WORD PTR [eax], dx

; 274  : 		return Result;
; 275  : 	}

	pop	ebp
	ret	8
??F?$tvec2@C$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<signed char,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@C$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec2@C$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<signed char,0>::operator++, COMDAT
; _this$ = ecx

; 263  : 	{

	push	ebp
	mov	ebp, esp

; 264  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	dx, WORD PTR [ecx]

; 265  : 		++*this;

	inc	BYTE PTR [ecx]
	inc	BYTE PTR [ecx+1]
	mov	WORD PTR [eax], dx

; 266  : 		return Result;
; 267  : 	}

	pop	ebp
	ret	8
??E?$tvec2@C$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<signed char,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@C$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec2@C$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec2<signed char,0>::operator--, COMDAT
; _this$ = ecx

; 256  : 		--this->x;

	dec	BYTE PTR [ecx]

; 257  : 		--this->y;
; 258  : 		return *this;

	mov	eax, ecx
	dec	BYTE PTR [ecx+1]

; 259  : 	}

	ret	0
??F?$tvec2@C$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<signed char,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@C$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec2@C$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec2<signed char,0>::operator++, COMDAT
; _this$ = ecx

; 248  : 		++this->x;

	inc	BYTE PTR [ecx]

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	eax, ecx
	inc	BYTE PTR [ecx+1]

; 251  : 	}

	ret	0
??E?$tvec2@C$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<signed char,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec2@C$0A@@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec2@C$0A@@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec2<signed char,0>::operator=, COMDAT
; _this$ = ecx

; 71   : template struct tvec2<int8, highp>;

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ax, WORD PTR [eax]
	mov	WORD PTR [ecx], ax
	mov	eax, ecx
	pop	ebp
	ret	4
??4?$tvec2@C$0A@@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec2<signed char,0>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@C$0A@@glm@@QAE@CC@Z
_TEXT	SEGMENT
_s1$ = 8						; size = 1
_s2$ = 12						; size = 1
??0?$tvec2@C$0A@@glm@@QAE@CC@Z PROC			; glm::tvec2<signed char,0>::tvec2<signed char,0>, COMDAT
; _this$ = ecx

; 57   : 	{}

	push	ebp
	mov	ebp, esp
	mov	al, BYTE PTR _s1$[ebp]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR _s2$[ebp]
	mov	BYTE PTR [ecx+1], al
	mov	eax, ecx
	pop	ebp
	ret	8
??0?$tvec2@C$0A@@glm@@QAE@CC@Z ENDP			; glm::tvec2<signed char,0>::tvec2<signed char,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@C$0A@@glm@@QAE@C@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 1
??0?$tvec2@C$0A@@glm@@QAE@C@Z PROC			; glm::tvec2<signed char,0>::tvec2<signed char,0>, COMDAT
; _this$ = ecx

; 52   : 	{}

	push	ebp
	mov	ebp, esp
	mov	al, BYTE PTR _scalar$[ebp]
	mov	BYTE PTR [ecx], al
	mov	BYTE PTR [ecx+1], al
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec2@C$0A@@glm@@QAE@C@Z ENDP			; glm::tvec2<signed char,0>::tvec2<signed char,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@C$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec2@C$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec2<signed char,0>::tvec2<signed char,0>, COMDAT
; _this$ = ecx

; 47   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec2@C$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec2<signed char,0>::tvec2<signed char,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec2@C$0A@@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec2@C$0A@@glm@@QAE@ABU01@@Z PROC			; glm::tvec2<signed char,0>::tvec2<signed char,0>, COMDAT
; _this$ = ecx

; 71   : template struct tvec2<int8, highp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR [edx+1]
	mov	BYTE PTR [ecx+1], al
	mov	al, BYTE PTR [edx+1]
	mov	BYTE PTR [ecx+1], al
	mov	al, BYTE PTR [edx+1]
	mov	BYTE PTR [ecx+1], al
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec2@C$0A@@glm@@QAE@ABU01@@Z ENDP			; glm::tvec2<signed char,0>::tvec2<signed char,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@C$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec2@C$0A@@glm@@QAE@XZ PROC			; glm::tvec2<signed char,0>::tvec2<signed char,0>, COMDAT
; _this$ = ecx

; 27   : 		{}

	mov	WORD PTR [ecx], 0
	mov	eax, ecx
	ret	0
??0?$tvec2@C$0A@@glm@@QAE@XZ ENDP			; glm::tvec2<signed char,0>::tvec2<signed char,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@C$0A@@glm@@QBEABCH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@C$0A@@glm@@QBEABCH@Z PROC			; glm::tvec2<signed char,0>::operator[], COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 112  : 	}

	pop	ebp
	ret	4
??A?$tvec2@C$0A@@glm@@QBEABCH@Z ENDP			; glm::tvec2<signed char,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@C$0A@@glm@@QAEAACH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@C$0A@@glm@@QAEAACH@Z PROC			; glm::tvec2<signed char,0>::operator[], COMDAT
; _this$ = ecx

; 102  : 	{

	push	ebp
	mov	ebp, esp

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 105  : 	}

	pop	ebp
	ret	4
??A?$tvec2@C$0A@@glm@@QAEAACH@Z ENDP			; glm::tvec2<signed char,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@C$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@C$0A@@glm@@SAHXZ PROC			; glm::tvec2<signed char,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	push	2
	pop	eax
	ret	0
?length@?$tvec2@C$0A@@glm@@SAHXZ ENDP			; glm::tvec2<signed char,0>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@_K$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec2@_K$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tvec2<unsigned __int64,0>::operator--, COMDAT
; _this$ = ecx

; 271  : 	{

	push	ebp
	mov	ebp, esp

; 272  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 273  : 		--*this;

	or	edx, -1
	push	esi
	push	edi
	mov	esi, ecx
	mov	edi, eax
	movsd
	movsd
	movsd
	movsd
	add	DWORD PTR [ecx], edx
	pop	edi
	adc	DWORD PTR [ecx+4], edx
	add	DWORD PTR [ecx+8], edx
	pop	esi
	adc	DWORD PTR [ecx+12], edx

; 274  : 		return Result;
; 275  : 	}

	pop	ebp
	ret	8
??F?$tvec2@_K$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tvec2<unsigned __int64,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@_K$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec2@_K$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tvec2<unsigned __int64,0>::operator++, COMDAT
; _this$ = ecx

; 263  : 	{

	push	ebp
	mov	ebp, esp

; 264  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	mov	esi, ecx
	mov	edi, eax
	movsd
	movsd
	movsd
	movsd

; 265  : 		++*this;

	add	DWORD PTR [ecx], 1
	pop	edi
	adc	DWORD PTR [ecx+4], 0
	add	DWORD PTR [ecx+8], 1
	pop	esi
	adc	DWORD PTR [ecx+12], 0

; 266  : 		return Result;
; 267  : 	}

	pop	ebp
	ret	8
??E?$tvec2@_K$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tvec2<unsigned __int64,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@_K$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec2@_K$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec2<unsigned __int64,0>::operator--, COMDAT
; _this$ = ecx

; 256  : 		--this->x;

	or	eax, -1
	add	DWORD PTR [ecx], eax
	adc	DWORD PTR [ecx+4], eax

; 257  : 		--this->y;

	add	DWORD PTR [ecx+8], eax
	adc	DWORD PTR [ecx+12], eax

; 258  : 		return *this;

	mov	eax, ecx

; 259  : 	}

	ret	0
??F?$tvec2@_K$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<unsigned __int64,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@_K$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec2@_K$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec2<unsigned __int64,0>::operator++, COMDAT
; _this$ = ecx

; 248  : 		++this->x;

	add	DWORD PTR [ecx], 1

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	eax, ecx
	adc	DWORD PTR [ecx+4], 0
	add	DWORD PTR [ecx+8], 1
	adc	DWORD PTR [ecx+12], 0

; 251  : 	}

	ret	0
??E?$tvec2@_K$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<unsigned __int64,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec2@_K$0A@@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec2@_K$0A@@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec2<unsigned __int64,0>::operator=, COMDAT
; _this$ = ecx

; 70   : template struct tvec2<uint64, highp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	mov	edi, ecx
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tvec2@_K$0A@@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec2<unsigned __int64,0>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_K$0A@@glm@@QAE@_K0@Z
_TEXT	SEGMENT
_s1$ = 8						; size = 8
_s2$ = 16						; size = 8
??0?$tvec2@_K$0A@@glm@@QAE@_K0@Z PROC			; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0>, COMDAT
; _this$ = ecx

; 57   : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _s1$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _s1$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _s2$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _s2$[ebp+4]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, ecx
	pop	ebp
	ret	16					; 00000010H
??0?$tvec2@_K$0A@@glm@@QAE@_K0@Z ENDP			; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_K$0A@@glm@@QAE@_K@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 8
??0?$tvec2@_K$0A@@glm@@QAE@_K@Z PROC			; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0>, COMDAT
; _this$ = ecx

; 52   : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _scalar$[ebp+4]
	mov	edx, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+12], eax
	mov	eax, ecx
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+8], edx
	pop	ebp
	ret	8
??0?$tvec2@_K$0A@@glm@@QAE@_K@Z ENDP			; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_K$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec2@_K$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0>, COMDAT
; _this$ = ecx

; 47   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec2@_K$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec2@_K$0A@@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec2@_K$0A@@glm@@QAE@ABU01@@Z PROC		; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0>, COMDAT
; _this$ = ecx

; 70   : template struct tvec2<uint64, highp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec2@_K$0A@@glm@@QAE@ABU01@@Z ENDP		; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_K$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec2@_K$0A@@glm@@QAE@XZ PROC			; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0>, COMDAT
; _this$ = ecx

; 27   : 		{}

	xor	eax, eax
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR [ecx+12], eax
	mov	eax, ecx
	ret	0
??0?$tvec2@_K$0A@@glm@@QAE@XZ ENDP			; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@_K$0A@@glm@@QBEAB_KH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@_K$0A@@glm@@QBEAB_KH@Z PROC			; glm::tvec2<unsigned __int64,0>::operator[], COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 112  : 	}

	pop	ebp
	ret	4
??A?$tvec2@_K$0A@@glm@@QBEAB_KH@Z ENDP			; glm::tvec2<unsigned __int64,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@_K$0A@@glm@@QAEAA_KH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@_K$0A@@glm@@QAEAA_KH@Z PROC			; glm::tvec2<unsigned __int64,0>::operator[], COMDAT
; _this$ = ecx

; 102  : 	{

	push	ebp
	mov	ebp, esp

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 105  : 	}

	pop	ebp
	ret	4
??A?$tvec2@_K$0A@@glm@@QAEAA_KH@Z ENDP			; glm::tvec2<unsigned __int64,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@_K$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@_K$0A@@glm@@SAHXZ PROC			; glm::tvec2<unsigned __int64,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	push	2
	pop	eax
	ret	0
?length@?$tvec2@_K$0A@@glm@@SAHXZ ENDP			; glm::tvec2<unsigned __int64,0>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@E$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec2@E$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<unsigned char,0>::operator--, COMDAT
; _this$ = ecx

; 271  : 	{

	push	ebp
	mov	ebp, esp

; 272  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	dx, WORD PTR [ecx]

; 273  : 		--*this;

	dec	BYTE PTR [ecx]
	dec	BYTE PTR [ecx+1]
	mov	WORD PTR [eax], dx

; 274  : 		return Result;
; 275  : 	}

	pop	ebp
	ret	8
??F?$tvec2@E$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<unsigned char,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@E$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec2@E$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<unsigned char,0>::operator++, COMDAT
; _this$ = ecx

; 263  : 	{

	push	ebp
	mov	ebp, esp

; 264  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	dx, WORD PTR [ecx]

; 265  : 		++*this;

	inc	BYTE PTR [ecx]
	inc	BYTE PTR [ecx+1]
	mov	WORD PTR [eax], dx

; 266  : 		return Result;
; 267  : 	}

	pop	ebp
	ret	8
??E?$tvec2@E$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<unsigned char,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@E$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec2@E$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec2<unsigned char,0>::operator--, COMDAT
; _this$ = ecx

; 256  : 		--this->x;

	dec	BYTE PTR [ecx]

; 257  : 		--this->y;
; 258  : 		return *this;

	mov	eax, ecx
	dec	BYTE PTR [ecx+1]

; 259  : 	}

	ret	0
??F?$tvec2@E$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<unsigned char,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@E$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec2@E$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec2<unsigned char,0>::operator++, COMDAT
; _this$ = ecx

; 248  : 		++this->x;

	inc	BYTE PTR [ecx]

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	eax, ecx
	inc	BYTE PTR [ecx+1]

; 251  : 	}

	ret	0
??E?$tvec2@E$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<unsigned char,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec2@E$0A@@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec2@E$0A@@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec2<unsigned char,0>::operator=, COMDAT
; _this$ = ecx

; 67   : template struct tvec2<uint8, highp>;

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ax, WORD PTR [eax]
	mov	WORD PTR [ecx], ax
	mov	eax, ecx
	pop	ebp
	ret	4
??4?$tvec2@E$0A@@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec2<unsigned char,0>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@E$0A@@glm@@QAE@EE@Z
_TEXT	SEGMENT
_s1$ = 8						; size = 1
_s2$ = 12						; size = 1
??0?$tvec2@E$0A@@glm@@QAE@EE@Z PROC			; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0>, COMDAT
; _this$ = ecx

; 57   : 	{}

	push	ebp
	mov	ebp, esp
	mov	al, BYTE PTR _s1$[ebp]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR _s2$[ebp]
	mov	BYTE PTR [ecx+1], al
	mov	eax, ecx
	pop	ebp
	ret	8
??0?$tvec2@E$0A@@glm@@QAE@EE@Z ENDP			; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@E$0A@@glm@@QAE@E@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 1
??0?$tvec2@E$0A@@glm@@QAE@E@Z PROC			; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0>, COMDAT
; _this$ = ecx

; 52   : 	{}

	push	ebp
	mov	ebp, esp
	mov	al, BYTE PTR _scalar$[ebp]
	mov	BYTE PTR [ecx], al
	mov	BYTE PTR [ecx+1], al
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec2@E$0A@@glm@@QAE@E@Z ENDP			; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@E$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec2@E$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0>, COMDAT
; _this$ = ecx

; 47   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec2@E$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec2@E$0A@@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec2@E$0A@@glm@@QAE@ABU01@@Z PROC			; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0>, COMDAT
; _this$ = ecx

; 67   : template struct tvec2<uint8, highp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR [edx+1]
	mov	BYTE PTR [ecx+1], al
	mov	al, BYTE PTR [edx+1]
	mov	BYTE PTR [ecx+1], al
	mov	al, BYTE PTR [edx+1]
	mov	BYTE PTR [ecx+1], al
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec2@E$0A@@glm@@QAE@ABU01@@Z ENDP			; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@E$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec2@E$0A@@glm@@QAE@XZ PROC			; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0>, COMDAT
; _this$ = ecx

; 27   : 		{}

	mov	WORD PTR [ecx], 0
	mov	eax, ecx
	ret	0
??0?$tvec2@E$0A@@glm@@QAE@XZ ENDP			; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@E$0A@@glm@@QBEABEH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@E$0A@@glm@@QBEABEH@Z PROC			; glm::tvec2<unsigned char,0>::operator[], COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 112  : 	}

	pop	ebp
	ret	4
??A?$tvec2@E$0A@@glm@@QBEABEH@Z ENDP			; glm::tvec2<unsigned char,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@E$0A@@glm@@QAEAAEH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@E$0A@@glm@@QAEAAEH@Z PROC			; glm::tvec2<unsigned char,0>::operator[], COMDAT
; _this$ = ecx

; 102  : 	{

	push	ebp
	mov	ebp, esp

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 105  : 	}

	pop	ebp
	ret	4
??A?$tvec2@E$0A@@glm@@QAEAAEH@Z ENDP			; glm::tvec2<unsigned char,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@E$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@E$0A@@glm@@SAHXZ PROC			; glm::tvec2<unsigned char,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	push	2
	pop	eax
	ret	0
?length@?$tvec2@E$0A@@glm@@SAHXZ ENDP			; glm::tvec2<unsigned char,0>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@N$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec2@N$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<double,1>::operator--, COMDAT
; _this$ = ecx

; 271  : 	{

	push	ebp
	mov	ebp, esp

; 272  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 273  : 		--*this;

	movups	xmm0, XMMWORD PTR [ecx]
	push	esi
	push	edi
	subpd	xmm0, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	mov	esi, ecx
	mov	edi, eax
	movsd
	movsd
	movsd
	movsd
	pop	edi
	movups	XMMWORD PTR [ecx], xmm0
	pop	esi

; 274  : 		return Result;
; 275  : 	}

	pop	ebp
	ret	8
??F?$tvec2@N$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<double,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@N$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec2@N$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<double,1>::operator++, COMDAT
; _this$ = ecx

; 263  : 	{

	push	ebp
	mov	ebp, esp

; 264  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 265  : 		++*this;

	movups	xmm0, XMMWORD PTR [ecx]
	push	esi
	push	edi
	addpd	xmm0, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	mov	esi, ecx
	mov	edi, eax
	movsd
	movsd
	movsd
	movsd
	pop	edi
	movups	XMMWORD PTR [ecx], xmm0
	pop	esi

; 266  : 		return Result;
; 267  : 	}

	pop	ebp
	ret	8
??E?$tvec2@N$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<double,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@N$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec2@N$00@glm@@QAEAAU01@XZ PROC			; glm::tvec2<double,1>::operator--, COMDAT
; _this$ = ecx

; 256  : 		--this->x;

	movups	xmm0, XMMWORD PTR [ecx]

; 257  : 		--this->y;
; 258  : 		return *this;

	mov	eax, ecx
	subpd	xmm0, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [ecx], xmm0

; 259  : 	}

	ret	0
??F?$tvec2@N$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<double,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@N$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec2@N$00@glm@@QAEAAU01@XZ PROC			; glm::tvec2<double,1>::operator++, COMDAT
; _this$ = ecx

; 248  : 		++this->x;

	movups	xmm0, XMMWORD PTR [ecx]

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	eax, ecx
	addpd	xmm0, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [ecx], xmm0

; 251  : 	}

	ret	0
??E?$tvec2@N$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<double,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec2@N$00@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec2@N$00@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec2<double,1>::operator=, COMDAT
; _this$ = ecx

; 65   : template struct tvec2<float64, mediump>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	mov	edi, ecx
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tvec2@N$00@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec2<double,1>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@N$00@glm@@QAE@NN@Z
_TEXT	SEGMENT
_s1$ = 8						; size = 8
_s2$ = 16						; size = 8
??0?$tvec2@N$00@glm@@QAE@NN@Z PROC			; glm::tvec2<double,1>::tvec2<double,1>, COMDAT
; _this$ = ecx

; 57   : 	{}

	push	ebp
	mov	ebp, esp
	movsd	xmm0, QWORD PTR _s1$[ebp]
	mov	eax, ecx
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR _s2$[ebp]
	movsd	QWORD PTR [ecx+8], xmm0
	pop	ebp
	ret	16					; 00000010H
??0?$tvec2@N$00@glm@@QAE@NN@Z ENDP			; glm::tvec2<double,1>::tvec2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@N$00@glm@@QAE@N@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 8
??0?$tvec2@N$00@glm@@QAE@N@Z PROC			; glm::tvec2<double,1>::tvec2<double,1>, COMDAT
; _this$ = ecx

; 52   : 	{}

	push	ebp
	mov	ebp, esp
	movsd	xmm0, QWORD PTR _scalar$[ebp]
	mov	eax, ecx
	unpcklpd xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	pop	ebp
	ret	8
??0?$tvec2@N$00@glm@@QAE@N@Z ENDP			; glm::tvec2<double,1>::tvec2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@N$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec2@N$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec2<double,1>::tvec2<double,1>, COMDAT
; _this$ = ecx

; 47   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec2@N$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec2<double,1>::tvec2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec2@N$00@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec2@N$00@glm@@QAE@ABU01@@Z PROC			; glm::tvec2<double,1>::tvec2<double,1>, COMDAT
; _this$ = ecx

; 65   : template struct tvec2<float64, mediump>;

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ___that$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	QWORD PTR [ecx+8], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	QWORD PTR [ecx+8], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	mov	eax, ecx
	movsd	QWORD PTR [ecx+8], xmm0
	pop	ebp
	ret	4
??0?$tvec2@N$00@glm@@QAE@ABU01@@Z ENDP			; glm::tvec2<double,1>::tvec2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@N$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec2@N$00@glm@@QAE@XZ PROC			; glm::tvec2<double,1>::tvec2<double,1>, COMDAT
; _this$ = ecx

; 27   : 		{}

	xorps	xmm0, xmm0
	mov	eax, ecx
	movups	XMMWORD PTR [ecx], xmm0
	ret	0
??0?$tvec2@N$00@glm@@QAE@XZ ENDP			; glm::tvec2<double,1>::tvec2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@N$00@glm@@QBEABNH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@N$00@glm@@QBEABNH@Z PROC			; glm::tvec2<double,1>::operator[], COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 112  : 	}

	pop	ebp
	ret	4
??A?$tvec2@N$00@glm@@QBEABNH@Z ENDP			; glm::tvec2<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@N$00@glm@@QAEAANH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@N$00@glm@@QAEAANH@Z PROC			; glm::tvec2<double,1>::operator[], COMDAT
; _this$ = ecx

; 102  : 	{

	push	ebp
	mov	ebp, esp

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 105  : 	}

	pop	ebp
	ret	4
??A?$tvec2@N$00@glm@@QAEAANH@Z ENDP			; glm::tvec2<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@N$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@N$00@glm@@SAHXZ PROC			; glm::tvec2<double,1>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	push	2
	pop	eax
	ret	0
?length@?$tvec2@N$00@glm@@SAHXZ ENDP			; glm::tvec2<double,1>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@M$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec2@M$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<float,1>::operator--, COMDAT
; _this$ = ecx

; 271  : 	{

	push	ebp
	mov	ebp, esp

; 272  : 		tvec2<T, P> Result(*this);
; 273  : 		--*this;

	movss	xmm0, DWORD PTR [ecx]
	subss	xmm0, DWORD PTR __real@3f800000
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	subss	xmm0, DWORD PTR __real@3f800000
	mov	DWORD PTR [esi], eax

; 274  : 		return Result;

	mov	eax, esi
	mov	DWORD PTR [esi+4], edx
	pop	esi
	movss	DWORD PTR [ecx+4], xmm0

; 275  : 	}

	pop	ebp
	ret	8
??F?$tvec2@M$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<float,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@M$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec2@M$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<float,1>::operator++, COMDAT
; _this$ = ecx

; 263  : 	{

	push	ebp
	mov	ebp, esp

; 264  : 		tvec2<T, P> Result(*this);
; 265  : 		++*this;

	movss	xmm0, DWORD PTR [ecx]
	addss	xmm0, DWORD PTR __real@3f800000
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	addss	xmm0, DWORD PTR __real@3f800000
	mov	DWORD PTR [esi], eax

; 266  : 		return Result;

	mov	eax, esi
	mov	DWORD PTR [esi+4], edx
	pop	esi
	movss	DWORD PTR [ecx+4], xmm0

; 267  : 	}

	pop	ebp
	ret	8
??E?$tvec2@M$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<float,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@M$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec2@M$00@glm@@QAEAAU01@XZ PROC			; glm::tvec2<float,1>::operator--, COMDAT
; _this$ = ecx

; 256  : 		--this->x;

	movss	xmm0, DWORD PTR [ecx]

; 257  : 		--this->y;
; 258  : 		return *this;

	mov	eax, ecx
	subss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	subss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx+4], xmm0

; 259  : 	}

	ret	0
??F?$tvec2@M$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<float,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@M$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec2@M$00@glm@@QAEAAU01@XZ PROC			; glm::tvec2<float,1>::operator++, COMDAT
; _this$ = ecx

; 248  : 		++this->x;

	movss	xmm0, DWORD PTR [ecx]

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	eax, ecx
	addss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	addss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx+4], xmm0

; 251  : 	}

	ret	0
??E?$tvec2@M$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<float,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec2@M$00@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec2@M$00@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec2<float,1>::operator=, COMDAT
; _this$ = ecx

; 64   : template struct tvec2<float32, mediump>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??4?$tvec2@M$00@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec2<float,1>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@M$00@glm@@QAE@MM@Z
_TEXT	SEGMENT
_s1$ = 8						; size = 4
_s2$ = 12						; size = 4
??0?$tvec2@M$00@glm@@QAE@MM@Z PROC			; glm::tvec2<float,1>::tvec2<float,1>, COMDAT
; _this$ = ecx

; 57   : 	{}

	push	ebp
	mov	ebp, esp
	movss	xmm0, DWORD PTR _s1$[ebp]
	mov	eax, ecx
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR _s2$[ebp]
	movss	DWORD PTR [ecx+4], xmm0
	pop	ebp
	ret	8
??0?$tvec2@M$00@glm@@QAE@MM@Z ENDP			; glm::tvec2<float,1>::tvec2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@M$00@glm@@QAE@M@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 4
??0?$tvec2@M$00@glm@@QAE@M@Z PROC			; glm::tvec2<float,1>::tvec2<float,1>, COMDAT
; _this$ = ecx

; 52   : 	{}

	push	ebp
	mov	ebp, esp
	movss	xmm0, DWORD PTR _scalar$[ebp]
	mov	eax, ecx
	movss	DWORD PTR [ecx], xmm0
	movss	DWORD PTR [ecx+4], xmm0
	pop	ebp
	ret	4
??0?$tvec2@M$00@glm@@QAE@M@Z ENDP			; glm::tvec2<float,1>::tvec2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@M$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec2@M$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec2<float,1>::tvec2<float,1>, COMDAT
; _this$ = ecx

; 47   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec2@M$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec2<float,1>::tvec2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec2@M$00@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec2@M$00@glm@@QAE@ABU01@@Z PROC			; glm::tvec2<float,1>::tvec2<float,1>, COMDAT
; _this$ = ecx

; 64   : template struct tvec2<float32, mediump>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec2@M$00@glm@@QAE@ABU01@@Z ENDP			; glm::tvec2<float,1>::tvec2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@M$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec2@M$00@glm@@QAE@XZ PROC			; glm::tvec2<float,1>::tvec2<float,1>, COMDAT
; _this$ = ecx

; 27   : 		{}

	and	DWORD PTR [ecx], 0
	mov	eax, ecx
	and	DWORD PTR [ecx+4], 0
	ret	0
??0?$tvec2@M$00@glm@@QAE@XZ ENDP			; glm::tvec2<float,1>::tvec2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@M$00@glm@@QBEABMH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@M$00@glm@@QBEABMH@Z PROC			; glm::tvec2<float,1>::operator[], COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 112  : 	}

	pop	ebp
	ret	4
??A?$tvec2@M$00@glm@@QBEABMH@Z ENDP			; glm::tvec2<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@M$00@glm@@QAEAAMH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@M$00@glm@@QAEAAMH@Z PROC			; glm::tvec2<float,1>::operator[], COMDAT
; _this$ = ecx

; 102  : 	{

	push	ebp
	mov	ebp, esp

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 105  : 	}

	pop	ebp
	ret	4
??A?$tvec2@M$00@glm@@QAEAAMH@Z ENDP			; glm::tvec2<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@M$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@M$00@glm@@SAHXZ PROC			; glm::tvec2<float,1>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	push	2
	pop	eax
	ret	0
?length@?$tvec2@M$00@glm@@SAHXZ ENDP			; glm::tvec2<float,1>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@_J$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec2@_J$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<__int64,1>::operator--, COMDAT
; _this$ = ecx

; 271  : 	{

	push	ebp
	mov	ebp, esp

; 272  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 273  : 		--*this;

	or	edx, -1
	push	esi
	push	edi
	mov	esi, ecx
	mov	edi, eax
	movsd
	movsd
	movsd
	movsd
	add	DWORD PTR [ecx], edx
	pop	edi
	adc	DWORD PTR [ecx+4], edx
	add	DWORD PTR [ecx+8], edx
	pop	esi
	adc	DWORD PTR [ecx+12], edx

; 274  : 		return Result;
; 275  : 	}

	pop	ebp
	ret	8
??F?$tvec2@_J$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<__int64,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@_J$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec2@_J$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<__int64,1>::operator++, COMDAT
; _this$ = ecx

; 263  : 	{

	push	ebp
	mov	ebp, esp

; 264  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	mov	esi, ecx
	mov	edi, eax
	movsd
	movsd
	movsd
	movsd

; 265  : 		++*this;

	add	DWORD PTR [ecx], 1
	pop	edi
	adc	DWORD PTR [ecx+4], 0
	add	DWORD PTR [ecx+8], 1
	pop	esi
	adc	DWORD PTR [ecx+12], 0

; 266  : 		return Result;
; 267  : 	}

	pop	ebp
	ret	8
??E?$tvec2@_J$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<__int64,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@_J$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec2@_J$00@glm@@QAEAAU01@XZ PROC			; glm::tvec2<__int64,1>::operator--, COMDAT
; _this$ = ecx

; 256  : 		--this->x;

	or	eax, -1
	add	DWORD PTR [ecx], eax
	adc	DWORD PTR [ecx+4], eax

; 257  : 		--this->y;

	add	DWORD PTR [ecx+8], eax
	adc	DWORD PTR [ecx+12], eax

; 258  : 		return *this;

	mov	eax, ecx

; 259  : 	}

	ret	0
??F?$tvec2@_J$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<__int64,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@_J$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec2@_J$00@glm@@QAEAAU01@XZ PROC			; glm::tvec2<__int64,1>::operator++, COMDAT
; _this$ = ecx

; 248  : 		++this->x;

	add	DWORD PTR [ecx], 1

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	eax, ecx
	adc	DWORD PTR [ecx+4], 0
	add	DWORD PTR [ecx+8], 1
	adc	DWORD PTR [ecx+12], 0

; 251  : 	}

	ret	0
??E?$tvec2@_J$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<__int64,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec2@_J$00@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec2@_J$00@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec2<__int64,1>::operator=, COMDAT
; _this$ = ecx

; 63   : template struct tvec2<int64, mediump>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	mov	edi, ecx
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tvec2@_J$00@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec2<__int64,1>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_J$00@glm@@QAE@_J0@Z
_TEXT	SEGMENT
_s1$ = 8						; size = 8
_s2$ = 16						; size = 8
??0?$tvec2@_J$00@glm@@QAE@_J0@Z PROC			; glm::tvec2<__int64,1>::tvec2<__int64,1>, COMDAT
; _this$ = ecx

; 57   : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _s1$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _s1$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _s2$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _s2$[ebp+4]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, ecx
	pop	ebp
	ret	16					; 00000010H
??0?$tvec2@_J$00@glm@@QAE@_J0@Z ENDP			; glm::tvec2<__int64,1>::tvec2<__int64,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_J$00@glm@@QAE@_J@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 8
??0?$tvec2@_J$00@glm@@QAE@_J@Z PROC			; glm::tvec2<__int64,1>::tvec2<__int64,1>, COMDAT
; _this$ = ecx

; 52   : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _scalar$[ebp+4]
	mov	edx, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+12], eax
	mov	eax, ecx
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+8], edx
	pop	ebp
	ret	8
??0?$tvec2@_J$00@glm@@QAE@_J@Z ENDP			; glm::tvec2<__int64,1>::tvec2<__int64,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_J$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec2@_J$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec2<__int64,1>::tvec2<__int64,1>, COMDAT
; _this$ = ecx

; 47   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec2@_J$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec2<__int64,1>::tvec2<__int64,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec2@_J$00@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec2@_J$00@glm@@QAE@ABU01@@Z PROC			; glm::tvec2<__int64,1>::tvec2<__int64,1>, COMDAT
; _this$ = ecx

; 63   : template struct tvec2<int64, mediump>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec2@_J$00@glm@@QAE@ABU01@@Z ENDP			; glm::tvec2<__int64,1>::tvec2<__int64,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_J$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec2@_J$00@glm@@QAE@XZ PROC			; glm::tvec2<__int64,1>::tvec2<__int64,1>, COMDAT
; _this$ = ecx

; 27   : 		{}

	xor	eax, eax
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR [ecx+12], eax
	mov	eax, ecx
	ret	0
??0?$tvec2@_J$00@glm@@QAE@XZ ENDP			; glm::tvec2<__int64,1>::tvec2<__int64,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@_J$00@glm@@QBEAB_JH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@_J$00@glm@@QBEAB_JH@Z PROC			; glm::tvec2<__int64,1>::operator[], COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 112  : 	}

	pop	ebp
	ret	4
??A?$tvec2@_J$00@glm@@QBEAB_JH@Z ENDP			; glm::tvec2<__int64,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@_J$00@glm@@QAEAA_JH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@_J$00@glm@@QAEAA_JH@Z PROC			; glm::tvec2<__int64,1>::operator[], COMDAT
; _this$ = ecx

; 102  : 	{

	push	ebp
	mov	ebp, esp

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 105  : 	}

	pop	ebp
	ret	4
??A?$tvec2@_J$00@glm@@QAEAA_JH@Z ENDP			; glm::tvec2<__int64,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@_J$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@_J$00@glm@@SAHXZ PROC			; glm::tvec2<__int64,1>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	push	2
	pop	eax
	ret	0
?length@?$tvec2@_J$00@glm@@SAHXZ ENDP			; glm::tvec2<__int64,1>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@H$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec2@H$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<int,1>::operator--, COMDAT
; _this$ = ecx

; 271  : 	{

	push	ebp
	mov	ebp, esp

; 272  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]

; 273  : 		--*this;

	dec	DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	dec	DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 274  : 		return Result;
; 275  : 	}

	pop	ebp
	ret	8
??F?$tvec2@H$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<int,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@H$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec2@H$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<int,1>::operator++, COMDAT
; _this$ = ecx

; 263  : 	{

	push	ebp
	mov	ebp, esp

; 264  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]

; 265  : 		++*this;

	inc	DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	inc	DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 266  : 		return Result;
; 267  : 	}

	pop	ebp
	ret	8
??E?$tvec2@H$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<int,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@H$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec2@H$00@glm@@QAEAAU01@XZ PROC			; glm::tvec2<int,1>::operator--, COMDAT
; _this$ = ecx

; 256  : 		--this->x;

	dec	DWORD PTR [ecx]

; 257  : 		--this->y;
; 258  : 		return *this;

	mov	eax, ecx
	dec	DWORD PTR [ecx+4]

; 259  : 	}

	ret	0
??F?$tvec2@H$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<int,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@H$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec2@H$00@glm@@QAEAAU01@XZ PROC			; glm::tvec2<int,1>::operator++, COMDAT
; _this$ = ecx

; 248  : 		++this->x;

	inc	DWORD PTR [ecx]

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	eax, ecx
	inc	DWORD PTR [ecx+4]

; 251  : 	}

	ret	0
??E?$tvec2@H$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<int,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec2@H$00@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec2@H$00@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec2<int,1>::operator=, COMDAT
; _this$ = ecx

; 62   : template struct tvec2<int32, mediump>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??4?$tvec2@H$00@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec2<int,1>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@H$00@glm@@QAE@HH@Z
_TEXT	SEGMENT
_s1$ = 8						; size = 4
_s2$ = 12						; size = 4
??0?$tvec2@H$00@glm@@QAE@HH@Z PROC			; glm::tvec2<int,1>::tvec2<int,1>, COMDAT
; _this$ = ecx

; 57   : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _s1$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _s2$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	pop	ebp
	ret	8
??0?$tvec2@H$00@glm@@QAE@HH@Z ENDP			; glm::tvec2<int,1>::tvec2<int,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@H$00@glm@@QAE@H@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 4
??0?$tvec2@H$00@glm@@QAE@H@Z PROC			; glm::tvec2<int,1>::tvec2<int,1>, COMDAT
; _this$ = ecx

; 52   : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec2@H$00@glm@@QAE@H@Z ENDP			; glm::tvec2<int,1>::tvec2<int,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@H$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec2@H$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec2<int,1>::tvec2<int,1>, COMDAT
; _this$ = ecx

; 47   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec2@H$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec2<int,1>::tvec2<int,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec2@H$00@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec2@H$00@glm@@QAE@ABU01@@Z PROC			; glm::tvec2<int,1>::tvec2<int,1>, COMDAT
; _this$ = ecx

; 62   : template struct tvec2<int32, mediump>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec2@H$00@glm@@QAE@ABU01@@Z ENDP			; glm::tvec2<int,1>::tvec2<int,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@H$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec2@H$00@glm@@QAE@XZ PROC			; glm::tvec2<int,1>::tvec2<int,1>, COMDAT
; _this$ = ecx

; 27   : 		{}

	and	DWORD PTR [ecx], 0
	mov	eax, ecx
	and	DWORD PTR [ecx+4], 0
	ret	0
??0?$tvec2@H$00@glm@@QAE@XZ ENDP			; glm::tvec2<int,1>::tvec2<int,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@H$00@glm@@QBEABHH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@H$00@glm@@QBEABHH@Z PROC			; glm::tvec2<int,1>::operator[], COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 112  : 	}

	pop	ebp
	ret	4
??A?$tvec2@H$00@glm@@QBEABHH@Z ENDP			; glm::tvec2<int,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@H$00@glm@@QAEAAHH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@H$00@glm@@QAEAAHH@Z PROC			; glm::tvec2<int,1>::operator[], COMDAT
; _this$ = ecx

; 102  : 	{

	push	ebp
	mov	ebp, esp

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 105  : 	}

	pop	ebp
	ret	4
??A?$tvec2@H$00@glm@@QAEAAHH@Z ENDP			; glm::tvec2<int,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@H$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@H$00@glm@@SAHXZ PROC			; glm::tvec2<int,1>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	push	2
	pop	eax
	ret	0
?length@?$tvec2@H$00@glm@@SAHXZ ENDP			; glm::tvec2<int,1>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@F$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec2@F$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<short,1>::operator--, COMDAT
; _this$ = ecx

; 271  : 	{

	push	ebp
	mov	ebp, esp

; 272  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]

; 273  : 		--*this;

	dec	WORD PTR [ecx]
	dec	WORD PTR [ecx+2]
	mov	DWORD PTR [eax], edx

; 274  : 		return Result;
; 275  : 	}

	pop	ebp
	ret	8
??F?$tvec2@F$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<short,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@F$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec2@F$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<short,1>::operator++, COMDAT
; _this$ = ecx

; 263  : 	{

	push	ebp
	mov	ebp, esp

; 264  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]

; 265  : 		++*this;

	inc	WORD PTR [ecx]
	inc	WORD PTR [ecx+2]
	mov	DWORD PTR [eax], edx

; 266  : 		return Result;
; 267  : 	}

	pop	ebp
	ret	8
??E?$tvec2@F$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<short,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@F$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec2@F$00@glm@@QAEAAU01@XZ PROC			; glm::tvec2<short,1>::operator--, COMDAT
; _this$ = ecx

; 256  : 		--this->x;

	dec	WORD PTR [ecx]

; 257  : 		--this->y;
; 258  : 		return *this;

	mov	eax, ecx
	dec	WORD PTR [ecx+2]

; 259  : 	}

	ret	0
??F?$tvec2@F$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<short,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@F$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec2@F$00@glm@@QAEAAU01@XZ PROC			; glm::tvec2<short,1>::operator++, COMDAT
; _this$ = ecx

; 248  : 		++this->x;

	inc	WORD PTR [ecx]

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	eax, ecx
	inc	WORD PTR [ecx+2]

; 251  : 	}

	ret	0
??E?$tvec2@F$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<short,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec2@F$00@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec2@F$00@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec2<short,1>::operator=, COMDAT
; _this$ = ecx

; 61   : template struct tvec2<int16, mediump>;

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??4?$tvec2@F$00@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec2<short,1>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@F$00@glm@@QAE@FF@Z
_TEXT	SEGMENT
_s1$ = 8						; size = 2
_s2$ = 12						; size = 2
??0?$tvec2@F$00@glm@@QAE@FF@Z PROC			; glm::tvec2<short,1>::tvec2<short,1>, COMDAT
; _this$ = ecx

; 57   : 	{}

	push	ebp
	mov	ebp, esp
	mov	ax, WORD PTR _s1$[ebp]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR _s2$[ebp]
	mov	WORD PTR [ecx+2], ax
	mov	eax, ecx
	pop	ebp
	ret	8
??0?$tvec2@F$00@glm@@QAE@FF@Z ENDP			; glm::tvec2<short,1>::tvec2<short,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@F$00@glm@@QAE@F@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 2
??0?$tvec2@F$00@glm@@QAE@F@Z PROC			; glm::tvec2<short,1>::tvec2<short,1>, COMDAT
; _this$ = ecx

; 52   : 	{}

	push	ebp
	mov	ebp, esp
	mov	ax, WORD PTR _scalar$[ebp]
	mov	WORD PTR [ecx], ax
	mov	WORD PTR [ecx+2], ax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec2@F$00@glm@@QAE@F@Z ENDP			; glm::tvec2<short,1>::tvec2<short,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@F$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec2@F$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec2<short,1>::tvec2<short,1>, COMDAT
; _this$ = ecx

; 47   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec2@F$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec2<short,1>::tvec2<short,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec2@F$00@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec2@F$00@glm@@QAE@ABU01@@Z PROC			; glm::tvec2<short,1>::tvec2<short,1>, COMDAT
; _this$ = ecx

; 61   : template struct tvec2<int16, mediump>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR [edx+2]
	mov	WORD PTR [ecx+2], ax
	mov	ax, WORD PTR [edx+2]
	mov	WORD PTR [ecx+2], ax
	mov	ax, WORD PTR [edx+2]
	mov	WORD PTR [ecx+2], ax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec2@F$00@glm@@QAE@ABU01@@Z ENDP			; glm::tvec2<short,1>::tvec2<short,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@F$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec2@F$00@glm@@QAE@XZ PROC			; glm::tvec2<short,1>::tvec2<short,1>, COMDAT
; _this$ = ecx

; 27   : 		{}

	xor	eax, eax
	mov	DWORD PTR [ecx], eax
	mov	eax, ecx
	ret	0
??0?$tvec2@F$00@glm@@QAE@XZ ENDP			; glm::tvec2<short,1>::tvec2<short,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@F$00@glm@@QBEABFH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@F$00@glm@@QBEABFH@Z PROC			; glm::tvec2<short,1>::operator[], COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 112  : 	}

	pop	ebp
	ret	4
??A?$tvec2@F$00@glm@@QBEABFH@Z ENDP			; glm::tvec2<short,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@F$00@glm@@QAEAAFH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@F$00@glm@@QAEAAFH@Z PROC			; glm::tvec2<short,1>::operator[], COMDAT
; _this$ = ecx

; 102  : 	{

	push	ebp
	mov	ebp, esp

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 105  : 	}

	pop	ebp
	ret	4
??A?$tvec2@F$00@glm@@QAEAAFH@Z ENDP			; glm::tvec2<short,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@F$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@F$00@glm@@SAHXZ PROC			; glm::tvec2<short,1>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	push	2
	pop	eax
	ret	0
?length@?$tvec2@F$00@glm@@SAHXZ ENDP			; glm::tvec2<short,1>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@C$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec2@C$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<signed char,1>::operator--, COMDAT
; _this$ = ecx

; 271  : 	{

	push	ebp
	mov	ebp, esp

; 272  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	dx, WORD PTR [ecx]

; 273  : 		--*this;

	dec	BYTE PTR [ecx]
	dec	BYTE PTR [ecx+1]
	mov	WORD PTR [eax], dx

; 274  : 		return Result;
; 275  : 	}

	pop	ebp
	ret	8
??F?$tvec2@C$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<signed char,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@C$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec2@C$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<signed char,1>::operator++, COMDAT
; _this$ = ecx

; 263  : 	{

	push	ebp
	mov	ebp, esp

; 264  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	dx, WORD PTR [ecx]

; 265  : 		++*this;

	inc	BYTE PTR [ecx]
	inc	BYTE PTR [ecx+1]
	mov	WORD PTR [eax], dx

; 266  : 		return Result;
; 267  : 	}

	pop	ebp
	ret	8
??E?$tvec2@C$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<signed char,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@C$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec2@C$00@glm@@QAEAAU01@XZ PROC			; glm::tvec2<signed char,1>::operator--, COMDAT
; _this$ = ecx

; 256  : 		--this->x;

	dec	BYTE PTR [ecx]

; 257  : 		--this->y;
; 258  : 		return *this;

	mov	eax, ecx
	dec	BYTE PTR [ecx+1]

; 259  : 	}

	ret	0
??F?$tvec2@C$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<signed char,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@C$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec2@C$00@glm@@QAEAAU01@XZ PROC			; glm::tvec2<signed char,1>::operator++, COMDAT
; _this$ = ecx

; 248  : 		++this->x;

	inc	BYTE PTR [ecx]

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	eax, ecx
	inc	BYTE PTR [ecx+1]

; 251  : 	}

	ret	0
??E?$tvec2@C$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<signed char,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec2@C$00@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec2@C$00@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec2<signed char,1>::operator=, COMDAT
; _this$ = ecx

; 60   : template struct tvec2<int8, mediump>;

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ax, WORD PTR [eax]
	mov	WORD PTR [ecx], ax
	mov	eax, ecx
	pop	ebp
	ret	4
??4?$tvec2@C$00@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec2<signed char,1>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@C$00@glm@@QAE@CC@Z
_TEXT	SEGMENT
_s1$ = 8						; size = 1
_s2$ = 12						; size = 1
??0?$tvec2@C$00@glm@@QAE@CC@Z PROC			; glm::tvec2<signed char,1>::tvec2<signed char,1>, COMDAT
; _this$ = ecx

; 57   : 	{}

	push	ebp
	mov	ebp, esp
	mov	al, BYTE PTR _s1$[ebp]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR _s2$[ebp]
	mov	BYTE PTR [ecx+1], al
	mov	eax, ecx
	pop	ebp
	ret	8
??0?$tvec2@C$00@glm@@QAE@CC@Z ENDP			; glm::tvec2<signed char,1>::tvec2<signed char,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@C$00@glm@@QAE@C@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 1
??0?$tvec2@C$00@glm@@QAE@C@Z PROC			; glm::tvec2<signed char,1>::tvec2<signed char,1>, COMDAT
; _this$ = ecx

; 52   : 	{}

	push	ebp
	mov	ebp, esp
	mov	al, BYTE PTR _scalar$[ebp]
	mov	BYTE PTR [ecx], al
	mov	BYTE PTR [ecx+1], al
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec2@C$00@glm@@QAE@C@Z ENDP			; glm::tvec2<signed char,1>::tvec2<signed char,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@C$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec2@C$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec2<signed char,1>::tvec2<signed char,1>, COMDAT
; _this$ = ecx

; 47   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec2@C$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec2<signed char,1>::tvec2<signed char,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec2@C$00@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec2@C$00@glm@@QAE@ABU01@@Z PROC			; glm::tvec2<signed char,1>::tvec2<signed char,1>, COMDAT
; _this$ = ecx

; 60   : template struct tvec2<int8, mediump>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR [edx+1]
	mov	BYTE PTR [ecx+1], al
	mov	al, BYTE PTR [edx+1]
	mov	BYTE PTR [ecx+1], al
	mov	al, BYTE PTR [edx+1]
	mov	BYTE PTR [ecx+1], al
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec2@C$00@glm@@QAE@ABU01@@Z ENDP			; glm::tvec2<signed char,1>::tvec2<signed char,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@C$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec2@C$00@glm@@QAE@XZ PROC			; glm::tvec2<signed char,1>::tvec2<signed char,1>, COMDAT
; _this$ = ecx

; 27   : 		{}

	mov	WORD PTR [ecx], 0
	mov	eax, ecx
	ret	0
??0?$tvec2@C$00@glm@@QAE@XZ ENDP			; glm::tvec2<signed char,1>::tvec2<signed char,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@C$00@glm@@QBEABCH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@C$00@glm@@QBEABCH@Z PROC			; glm::tvec2<signed char,1>::operator[], COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 112  : 	}

	pop	ebp
	ret	4
??A?$tvec2@C$00@glm@@QBEABCH@Z ENDP			; glm::tvec2<signed char,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@C$00@glm@@QAEAACH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@C$00@glm@@QAEAACH@Z PROC			; glm::tvec2<signed char,1>::operator[], COMDAT
; _this$ = ecx

; 102  : 	{

	push	ebp
	mov	ebp, esp

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 105  : 	}

	pop	ebp
	ret	4
??A?$tvec2@C$00@glm@@QAEAACH@Z ENDP			; glm::tvec2<signed char,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@C$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@C$00@glm@@SAHXZ PROC			; glm::tvec2<signed char,1>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	push	2
	pop	eax
	ret	0
?length@?$tvec2@C$00@glm@@SAHXZ ENDP			; glm::tvec2<signed char,1>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@_K$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec2@_K$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<unsigned __int64,1>::operator--, COMDAT
; _this$ = ecx

; 271  : 	{

	push	ebp
	mov	ebp, esp

; 272  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 273  : 		--*this;

	or	edx, -1
	push	esi
	push	edi
	mov	esi, ecx
	mov	edi, eax
	movsd
	movsd
	movsd
	movsd
	add	DWORD PTR [ecx], edx
	pop	edi
	adc	DWORD PTR [ecx+4], edx
	add	DWORD PTR [ecx+8], edx
	pop	esi
	adc	DWORD PTR [ecx+12], edx

; 274  : 		return Result;
; 275  : 	}

	pop	ebp
	ret	8
??F?$tvec2@_K$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<unsigned __int64,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@_K$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec2@_K$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<unsigned __int64,1>::operator++, COMDAT
; _this$ = ecx

; 263  : 	{

	push	ebp
	mov	ebp, esp

; 264  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	mov	esi, ecx
	mov	edi, eax
	movsd
	movsd
	movsd
	movsd

; 265  : 		++*this;

	add	DWORD PTR [ecx], 1
	pop	edi
	adc	DWORD PTR [ecx+4], 0
	add	DWORD PTR [ecx+8], 1
	pop	esi
	adc	DWORD PTR [ecx+12], 0

; 266  : 		return Result;
; 267  : 	}

	pop	ebp
	ret	8
??E?$tvec2@_K$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<unsigned __int64,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@_K$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec2@_K$00@glm@@QAEAAU01@XZ PROC			; glm::tvec2<unsigned __int64,1>::operator--, COMDAT
; _this$ = ecx

; 256  : 		--this->x;

	or	eax, -1
	add	DWORD PTR [ecx], eax
	adc	DWORD PTR [ecx+4], eax

; 257  : 		--this->y;

	add	DWORD PTR [ecx+8], eax
	adc	DWORD PTR [ecx+12], eax

; 258  : 		return *this;

	mov	eax, ecx

; 259  : 	}

	ret	0
??F?$tvec2@_K$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<unsigned __int64,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@_K$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec2@_K$00@glm@@QAEAAU01@XZ PROC			; glm::tvec2<unsigned __int64,1>::operator++, COMDAT
; _this$ = ecx

; 248  : 		++this->x;

	add	DWORD PTR [ecx], 1

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	eax, ecx
	adc	DWORD PTR [ecx+4], 0
	add	DWORD PTR [ecx+8], 1
	adc	DWORD PTR [ecx+12], 0

; 251  : 	}

	ret	0
??E?$tvec2@_K$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<unsigned __int64,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec2@_K$00@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec2@_K$00@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec2<unsigned __int64,1>::operator=, COMDAT
; _this$ = ecx

; 59   : template struct tvec2<uint64, mediump>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	mov	edi, ecx
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tvec2@_K$00@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec2<unsigned __int64,1>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_K$00@glm@@QAE@_K0@Z
_TEXT	SEGMENT
_s1$ = 8						; size = 8
_s2$ = 16						; size = 8
??0?$tvec2@_K$00@glm@@QAE@_K0@Z PROC			; glm::tvec2<unsigned __int64,1>::tvec2<unsigned __int64,1>, COMDAT
; _this$ = ecx

; 57   : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _s1$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _s1$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _s2$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _s2$[ebp+4]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, ecx
	pop	ebp
	ret	16					; 00000010H
??0?$tvec2@_K$00@glm@@QAE@_K0@Z ENDP			; glm::tvec2<unsigned __int64,1>::tvec2<unsigned __int64,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_K$00@glm@@QAE@_K@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 8
??0?$tvec2@_K$00@glm@@QAE@_K@Z PROC			; glm::tvec2<unsigned __int64,1>::tvec2<unsigned __int64,1>, COMDAT
; _this$ = ecx

; 52   : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _scalar$[ebp+4]
	mov	edx, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+12], eax
	mov	eax, ecx
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+8], edx
	pop	ebp
	ret	8
??0?$tvec2@_K$00@glm@@QAE@_K@Z ENDP			; glm::tvec2<unsigned __int64,1>::tvec2<unsigned __int64,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_K$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec2@_K$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec2<unsigned __int64,1>::tvec2<unsigned __int64,1>, COMDAT
; _this$ = ecx

; 47   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec2@_K$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec2<unsigned __int64,1>::tvec2<unsigned __int64,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec2@_K$00@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec2@_K$00@glm@@QAE@ABU01@@Z PROC			; glm::tvec2<unsigned __int64,1>::tvec2<unsigned __int64,1>, COMDAT
; _this$ = ecx

; 59   : template struct tvec2<uint64, mediump>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec2@_K$00@glm@@QAE@ABU01@@Z ENDP			; glm::tvec2<unsigned __int64,1>::tvec2<unsigned __int64,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_K$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec2@_K$00@glm@@QAE@XZ PROC			; glm::tvec2<unsigned __int64,1>::tvec2<unsigned __int64,1>, COMDAT
; _this$ = ecx

; 27   : 		{}

	xor	eax, eax
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR [ecx+12], eax
	mov	eax, ecx
	ret	0
??0?$tvec2@_K$00@glm@@QAE@XZ ENDP			; glm::tvec2<unsigned __int64,1>::tvec2<unsigned __int64,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@_K$00@glm@@QBEAB_KH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@_K$00@glm@@QBEAB_KH@Z PROC			; glm::tvec2<unsigned __int64,1>::operator[], COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 112  : 	}

	pop	ebp
	ret	4
??A?$tvec2@_K$00@glm@@QBEAB_KH@Z ENDP			; glm::tvec2<unsigned __int64,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@_K$00@glm@@QAEAA_KH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@_K$00@glm@@QAEAA_KH@Z PROC			; glm::tvec2<unsigned __int64,1>::operator[], COMDAT
; _this$ = ecx

; 102  : 	{

	push	ebp
	mov	ebp, esp

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 105  : 	}

	pop	ebp
	ret	4
??A?$tvec2@_K$00@glm@@QAEAA_KH@Z ENDP			; glm::tvec2<unsigned __int64,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@_K$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@_K$00@glm@@SAHXZ PROC			; glm::tvec2<unsigned __int64,1>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	push	2
	pop	eax
	ret	0
?length@?$tvec2@_K$00@glm@@SAHXZ ENDP			; glm::tvec2<unsigned __int64,1>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@I$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec2@I$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<unsigned int,1>::operator--, COMDAT
; _this$ = ecx

; 271  : 	{

	push	ebp
	mov	ebp, esp

; 272  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]

; 273  : 		--*this;

	dec	DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	dec	DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 274  : 		return Result;
; 275  : 	}

	pop	ebp
	ret	8
??F?$tvec2@I$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<unsigned int,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@I$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec2@I$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<unsigned int,1>::operator++, COMDAT
; _this$ = ecx

; 263  : 	{

	push	ebp
	mov	ebp, esp

; 264  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]

; 265  : 		++*this;

	inc	DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	inc	DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 266  : 		return Result;
; 267  : 	}

	pop	ebp
	ret	8
??E?$tvec2@I$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<unsigned int,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@I$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec2@I$00@glm@@QAEAAU01@XZ PROC			; glm::tvec2<unsigned int,1>::operator--, COMDAT
; _this$ = ecx

; 256  : 		--this->x;

	dec	DWORD PTR [ecx]

; 257  : 		--this->y;
; 258  : 		return *this;

	mov	eax, ecx
	dec	DWORD PTR [ecx+4]

; 259  : 	}

	ret	0
??F?$tvec2@I$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<unsigned int,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@I$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec2@I$00@glm@@QAEAAU01@XZ PROC			; glm::tvec2<unsigned int,1>::operator++, COMDAT
; _this$ = ecx

; 248  : 		++this->x;

	inc	DWORD PTR [ecx]

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	eax, ecx
	inc	DWORD PTR [ecx+4]

; 251  : 	}

	ret	0
??E?$tvec2@I$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<unsigned int,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec2@I$00@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec2@I$00@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec2<unsigned int,1>::operator=, COMDAT
; _this$ = ecx

; 58   : template struct tvec2<uint32, mediump>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??4?$tvec2@I$00@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec2<unsigned int,1>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@I$00@glm@@QAE@II@Z
_TEXT	SEGMENT
_s1$ = 8						; size = 4
_s2$ = 12						; size = 4
??0?$tvec2@I$00@glm@@QAE@II@Z PROC			; glm::tvec2<unsigned int,1>::tvec2<unsigned int,1>, COMDAT
; _this$ = ecx

; 57   : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _s1$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _s2$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	pop	ebp
	ret	8
??0?$tvec2@I$00@glm@@QAE@II@Z ENDP			; glm::tvec2<unsigned int,1>::tvec2<unsigned int,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@I$00@glm@@QAE@I@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 4
??0?$tvec2@I$00@glm@@QAE@I@Z PROC			; glm::tvec2<unsigned int,1>::tvec2<unsigned int,1>, COMDAT
; _this$ = ecx

; 52   : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec2@I$00@glm@@QAE@I@Z ENDP			; glm::tvec2<unsigned int,1>::tvec2<unsigned int,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@I$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec2@I$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec2<unsigned int,1>::tvec2<unsigned int,1>, COMDAT
; _this$ = ecx

; 47   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec2@I$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec2<unsigned int,1>::tvec2<unsigned int,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec2@I$00@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec2@I$00@glm@@QAE@ABU01@@Z PROC			; glm::tvec2<unsigned int,1>::tvec2<unsigned int,1>, COMDAT
; _this$ = ecx

; 58   : template struct tvec2<uint32, mediump>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec2@I$00@glm@@QAE@ABU01@@Z ENDP			; glm::tvec2<unsigned int,1>::tvec2<unsigned int,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@I$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec2@I$00@glm@@QAE@XZ PROC			; glm::tvec2<unsigned int,1>::tvec2<unsigned int,1>, COMDAT
; _this$ = ecx

; 27   : 		{}

	and	DWORD PTR [ecx], 0
	mov	eax, ecx
	and	DWORD PTR [ecx+4], 0
	ret	0
??0?$tvec2@I$00@glm@@QAE@XZ ENDP			; glm::tvec2<unsigned int,1>::tvec2<unsigned int,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@I$00@glm@@QBEABIH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@I$00@glm@@QBEABIH@Z PROC			; glm::tvec2<unsigned int,1>::operator[], COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 112  : 	}

	pop	ebp
	ret	4
??A?$tvec2@I$00@glm@@QBEABIH@Z ENDP			; glm::tvec2<unsigned int,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@I$00@glm@@QAEAAIH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@I$00@glm@@QAEAAIH@Z PROC			; glm::tvec2<unsigned int,1>::operator[], COMDAT
; _this$ = ecx

; 102  : 	{

	push	ebp
	mov	ebp, esp

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 105  : 	}

	pop	ebp
	ret	4
??A?$tvec2@I$00@glm@@QAEAAIH@Z ENDP			; glm::tvec2<unsigned int,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@I$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@I$00@glm@@SAHXZ PROC			; glm::tvec2<unsigned int,1>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	push	2
	pop	eax
	ret	0
?length@?$tvec2@I$00@glm@@SAHXZ ENDP			; glm::tvec2<unsigned int,1>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@G$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec2@G$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<unsigned short,1>::operator--, COMDAT
; _this$ = ecx

; 271  : 	{

	push	ebp
	mov	ebp, esp

; 272  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 273  : 		--*this;

	mov	edx, 65535				; 0000ffffH
	add	WORD PTR [ecx], dx
	add	WORD PTR [ecx+2], dx

; 274  : 		return Result;
; 275  : 	}

	pop	ebp
	ret	8
??F?$tvec2@G$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<unsigned short,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@G$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec2@G$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<unsigned short,1>::operator++, COMDAT
; _this$ = ecx

; 263  : 	{

	push	ebp
	mov	ebp, esp

; 264  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]

; 265  : 		++*this;

	inc	WORD PTR [ecx]
	inc	WORD PTR [ecx+2]
	mov	DWORD PTR [eax], edx

; 266  : 		return Result;
; 267  : 	}

	pop	ebp
	ret	8
??E?$tvec2@G$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<unsigned short,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@G$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec2@G$00@glm@@QAEAAU01@XZ PROC			; glm::tvec2<unsigned short,1>::operator--, COMDAT
; _this$ = ecx

; 256  : 		--this->x;

	mov	eax, 65535				; 0000ffffH
	add	WORD PTR [ecx], ax

; 257  : 		--this->y;

	add	WORD PTR [ecx+2], ax

; 258  : 		return *this;

	mov	eax, ecx

; 259  : 	}

	ret	0
??F?$tvec2@G$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<unsigned short,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@G$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec2@G$00@glm@@QAEAAU01@XZ PROC			; glm::tvec2<unsigned short,1>::operator++, COMDAT
; _this$ = ecx

; 248  : 		++this->x;

	inc	WORD PTR [ecx]

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	eax, ecx
	inc	WORD PTR [ecx+2]

; 251  : 	}

	ret	0
??E?$tvec2@G$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<unsigned short,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec2@G$00@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec2@G$00@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec2<unsigned short,1>::operator=, COMDAT
; _this$ = ecx

; 57   : template struct tvec2<uint16, mediump>;

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??4?$tvec2@G$00@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec2<unsigned short,1>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@G$00@glm@@QAE@GG@Z
_TEXT	SEGMENT
_s1$ = 8						; size = 2
_s2$ = 12						; size = 2
??0?$tvec2@G$00@glm@@QAE@GG@Z PROC			; glm::tvec2<unsigned short,1>::tvec2<unsigned short,1>, COMDAT
; _this$ = ecx

; 57   : 	{}

	push	ebp
	mov	ebp, esp
	mov	ax, WORD PTR _s1$[ebp]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR _s2$[ebp]
	mov	WORD PTR [ecx+2], ax
	mov	eax, ecx
	pop	ebp
	ret	8
??0?$tvec2@G$00@glm@@QAE@GG@Z ENDP			; glm::tvec2<unsigned short,1>::tvec2<unsigned short,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@G$00@glm@@QAE@G@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 2
??0?$tvec2@G$00@glm@@QAE@G@Z PROC			; glm::tvec2<unsigned short,1>::tvec2<unsigned short,1>, COMDAT
; _this$ = ecx

; 52   : 	{}

	push	ebp
	mov	ebp, esp
	mov	ax, WORD PTR _scalar$[ebp]
	mov	WORD PTR [ecx], ax
	mov	WORD PTR [ecx+2], ax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec2@G$00@glm@@QAE@G@Z ENDP			; glm::tvec2<unsigned short,1>::tvec2<unsigned short,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@G$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec2@G$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec2<unsigned short,1>::tvec2<unsigned short,1>, COMDAT
; _this$ = ecx

; 47   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec2@G$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec2<unsigned short,1>::tvec2<unsigned short,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec2@G$00@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec2@G$00@glm@@QAE@ABU01@@Z PROC			; glm::tvec2<unsigned short,1>::tvec2<unsigned short,1>, COMDAT
; _this$ = ecx

; 57   : template struct tvec2<uint16, mediump>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR [edx+2]
	mov	WORD PTR [ecx+2], ax
	mov	ax, WORD PTR [edx+2]
	mov	WORD PTR [ecx+2], ax
	mov	ax, WORD PTR [edx+2]
	mov	WORD PTR [ecx+2], ax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec2@G$00@glm@@QAE@ABU01@@Z ENDP			; glm::tvec2<unsigned short,1>::tvec2<unsigned short,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@G$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec2@G$00@glm@@QAE@XZ PROC			; glm::tvec2<unsigned short,1>::tvec2<unsigned short,1>, COMDAT
; _this$ = ecx

; 27   : 		{}

	xor	eax, eax
	mov	DWORD PTR [ecx], eax
	mov	eax, ecx
	ret	0
??0?$tvec2@G$00@glm@@QAE@XZ ENDP			; glm::tvec2<unsigned short,1>::tvec2<unsigned short,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@G$00@glm@@QBEABGH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@G$00@glm@@QBEABGH@Z PROC			; glm::tvec2<unsigned short,1>::operator[], COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 112  : 	}

	pop	ebp
	ret	4
??A?$tvec2@G$00@glm@@QBEABGH@Z ENDP			; glm::tvec2<unsigned short,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@G$00@glm@@QAEAAGH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@G$00@glm@@QAEAAGH@Z PROC			; glm::tvec2<unsigned short,1>::operator[], COMDAT
; _this$ = ecx

; 102  : 	{

	push	ebp
	mov	ebp, esp

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 105  : 	}

	pop	ebp
	ret	4
??A?$tvec2@G$00@glm@@QAEAAGH@Z ENDP			; glm::tvec2<unsigned short,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@G$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@G$00@glm@@SAHXZ PROC			; glm::tvec2<unsigned short,1>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	push	2
	pop	eax
	ret	0
?length@?$tvec2@G$00@glm@@SAHXZ ENDP			; glm::tvec2<unsigned short,1>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@E$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec2@E$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<unsigned char,1>::operator--, COMDAT
; _this$ = ecx

; 271  : 	{

	push	ebp
	mov	ebp, esp

; 272  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	dx, WORD PTR [ecx]

; 273  : 		--*this;

	dec	BYTE PTR [ecx]
	dec	BYTE PTR [ecx+1]
	mov	WORD PTR [eax], dx

; 274  : 		return Result;
; 275  : 	}

	pop	ebp
	ret	8
??F?$tvec2@E$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<unsigned char,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@E$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec2@E$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<unsigned char,1>::operator++, COMDAT
; _this$ = ecx

; 263  : 	{

	push	ebp
	mov	ebp, esp

; 264  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	dx, WORD PTR [ecx]

; 265  : 		++*this;

	inc	BYTE PTR [ecx]
	inc	BYTE PTR [ecx+1]
	mov	WORD PTR [eax], dx

; 266  : 		return Result;
; 267  : 	}

	pop	ebp
	ret	8
??E?$tvec2@E$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<unsigned char,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@E$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec2@E$00@glm@@QAEAAU01@XZ PROC			; glm::tvec2<unsigned char,1>::operator--, COMDAT
; _this$ = ecx

; 256  : 		--this->x;

	dec	BYTE PTR [ecx]

; 257  : 		--this->y;
; 258  : 		return *this;

	mov	eax, ecx
	dec	BYTE PTR [ecx+1]

; 259  : 	}

	ret	0
??F?$tvec2@E$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<unsigned char,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@E$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec2@E$00@glm@@QAEAAU01@XZ PROC			; glm::tvec2<unsigned char,1>::operator++, COMDAT
; _this$ = ecx

; 248  : 		++this->x;

	inc	BYTE PTR [ecx]

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	eax, ecx
	inc	BYTE PTR [ecx+1]

; 251  : 	}

	ret	0
??E?$tvec2@E$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<unsigned char,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec2@E$00@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec2@E$00@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec2<unsigned char,1>::operator=, COMDAT
; _this$ = ecx

; 56   : template struct tvec2<uint8, mediump>;

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ax, WORD PTR [eax]
	mov	WORD PTR [ecx], ax
	mov	eax, ecx
	pop	ebp
	ret	4
??4?$tvec2@E$00@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec2<unsigned char,1>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@E$00@glm@@QAE@EE@Z
_TEXT	SEGMENT
_s1$ = 8						; size = 1
_s2$ = 12						; size = 1
??0?$tvec2@E$00@glm@@QAE@EE@Z PROC			; glm::tvec2<unsigned char,1>::tvec2<unsigned char,1>, COMDAT
; _this$ = ecx

; 57   : 	{}

	push	ebp
	mov	ebp, esp
	mov	al, BYTE PTR _s1$[ebp]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR _s2$[ebp]
	mov	BYTE PTR [ecx+1], al
	mov	eax, ecx
	pop	ebp
	ret	8
??0?$tvec2@E$00@glm@@QAE@EE@Z ENDP			; glm::tvec2<unsigned char,1>::tvec2<unsigned char,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@E$00@glm@@QAE@E@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 1
??0?$tvec2@E$00@glm@@QAE@E@Z PROC			; glm::tvec2<unsigned char,1>::tvec2<unsigned char,1>, COMDAT
; _this$ = ecx

; 52   : 	{}

	push	ebp
	mov	ebp, esp
	mov	al, BYTE PTR _scalar$[ebp]
	mov	BYTE PTR [ecx], al
	mov	BYTE PTR [ecx+1], al
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec2@E$00@glm@@QAE@E@Z ENDP			; glm::tvec2<unsigned char,1>::tvec2<unsigned char,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@E$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec2@E$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec2<unsigned char,1>::tvec2<unsigned char,1>, COMDAT
; _this$ = ecx

; 47   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec2@E$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec2<unsigned char,1>::tvec2<unsigned char,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec2@E$00@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec2@E$00@glm@@QAE@ABU01@@Z PROC			; glm::tvec2<unsigned char,1>::tvec2<unsigned char,1>, COMDAT
; _this$ = ecx

; 56   : template struct tvec2<uint8, mediump>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR [edx+1]
	mov	BYTE PTR [ecx+1], al
	mov	al, BYTE PTR [edx+1]
	mov	BYTE PTR [ecx+1], al
	mov	al, BYTE PTR [edx+1]
	mov	BYTE PTR [ecx+1], al
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec2@E$00@glm@@QAE@ABU01@@Z ENDP			; glm::tvec2<unsigned char,1>::tvec2<unsigned char,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@E$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec2@E$00@glm@@QAE@XZ PROC			; glm::tvec2<unsigned char,1>::tvec2<unsigned char,1>, COMDAT
; _this$ = ecx

; 27   : 		{}

	mov	WORD PTR [ecx], 0
	mov	eax, ecx
	ret	0
??0?$tvec2@E$00@glm@@QAE@XZ ENDP			; glm::tvec2<unsigned char,1>::tvec2<unsigned char,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@E$00@glm@@QBEABEH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@E$00@glm@@QBEABEH@Z PROC			; glm::tvec2<unsigned char,1>::operator[], COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 112  : 	}

	pop	ebp
	ret	4
??A?$tvec2@E$00@glm@@QBEABEH@Z ENDP			; glm::tvec2<unsigned char,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@E$00@glm@@QAEAAEH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@E$00@glm@@QAEAAEH@Z PROC			; glm::tvec2<unsigned char,1>::operator[], COMDAT
; _this$ = ecx

; 102  : 	{

	push	ebp
	mov	ebp, esp

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 105  : 	}

	pop	ebp
	ret	4
??A?$tvec2@E$00@glm@@QAEAAEH@Z ENDP			; glm::tvec2<unsigned char,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@E$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@E$00@glm@@SAHXZ PROC			; glm::tvec2<unsigned char,1>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	push	2
	pop	eax
	ret	0
?length@?$tvec2@E$00@glm@@SAHXZ ENDP			; glm::tvec2<unsigned char,1>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@N$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec2@N$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<double,2>::operator--, COMDAT
; _this$ = ecx

; 271  : 	{

	push	ebp
	mov	ebp, esp

; 272  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 273  : 		--*this;

	movups	xmm0, XMMWORD PTR [ecx]
	push	esi
	push	edi
	subpd	xmm0, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	mov	esi, ecx
	mov	edi, eax
	movsd
	movsd
	movsd
	movsd
	pop	edi
	movups	XMMWORD PTR [ecx], xmm0
	pop	esi

; 274  : 		return Result;
; 275  : 	}

	pop	ebp
	ret	8
??F?$tvec2@N$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<double,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@N$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec2@N$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<double,2>::operator++, COMDAT
; _this$ = ecx

; 263  : 	{

	push	ebp
	mov	ebp, esp

; 264  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 265  : 		++*this;

	movups	xmm0, XMMWORD PTR [ecx]
	push	esi
	push	edi
	addpd	xmm0, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	mov	esi, ecx
	mov	edi, eax
	movsd
	movsd
	movsd
	movsd
	pop	edi
	movups	XMMWORD PTR [ecx], xmm0
	pop	esi

; 266  : 		return Result;
; 267  : 	}

	pop	ebp
	ret	8
??E?$tvec2@N$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<double,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@N$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec2@N$01@glm@@QAEAAU01@XZ PROC			; glm::tvec2<double,2>::operator--, COMDAT
; _this$ = ecx

; 256  : 		--this->x;

	movups	xmm0, XMMWORD PTR [ecx]

; 257  : 		--this->y;
; 258  : 		return *this;

	mov	eax, ecx
	subpd	xmm0, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [ecx], xmm0

; 259  : 	}

	ret	0
??F?$tvec2@N$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<double,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@N$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec2@N$01@glm@@QAEAAU01@XZ PROC			; glm::tvec2<double,2>::operator++, COMDAT
; _this$ = ecx

; 248  : 		++this->x;

	movups	xmm0, XMMWORD PTR [ecx]

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	eax, ecx
	addpd	xmm0, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [ecx], xmm0

; 251  : 	}

	ret	0
??E?$tvec2@N$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<double,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec2@N$01@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec2@N$01@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec2<double,2>::operator=, COMDAT
; _this$ = ecx

; 54   : template struct tvec2<float64, lowp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	mov	edi, ecx
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tvec2@N$01@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec2<double,2>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@N$01@glm@@QAE@NN@Z
_TEXT	SEGMENT
_s1$ = 8						; size = 8
_s2$ = 16						; size = 8
??0?$tvec2@N$01@glm@@QAE@NN@Z PROC			; glm::tvec2<double,2>::tvec2<double,2>, COMDAT
; _this$ = ecx

; 57   : 	{}

	push	ebp
	mov	ebp, esp
	movsd	xmm0, QWORD PTR _s1$[ebp]
	mov	eax, ecx
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR _s2$[ebp]
	movsd	QWORD PTR [ecx+8], xmm0
	pop	ebp
	ret	16					; 00000010H
??0?$tvec2@N$01@glm@@QAE@NN@Z ENDP			; glm::tvec2<double,2>::tvec2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@N$01@glm@@QAE@N@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 8
??0?$tvec2@N$01@glm@@QAE@N@Z PROC			; glm::tvec2<double,2>::tvec2<double,2>, COMDAT
; _this$ = ecx

; 52   : 	{}

	push	ebp
	mov	ebp, esp
	movsd	xmm0, QWORD PTR _scalar$[ebp]
	mov	eax, ecx
	unpcklpd xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	pop	ebp
	ret	8
??0?$tvec2@N$01@glm@@QAE@N@Z ENDP			; glm::tvec2<double,2>::tvec2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@N$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec2@N$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec2<double,2>::tvec2<double,2>, COMDAT
; _this$ = ecx

; 47   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec2@N$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec2<double,2>::tvec2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec2@N$01@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec2@N$01@glm@@QAE@ABU01@@Z PROC			; glm::tvec2<double,2>::tvec2<double,2>, COMDAT
; _this$ = ecx

; 54   : template struct tvec2<float64, lowp>;

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ___that$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	QWORD PTR [ecx+8], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	QWORD PTR [ecx+8], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	mov	eax, ecx
	movsd	QWORD PTR [ecx+8], xmm0
	pop	ebp
	ret	4
??0?$tvec2@N$01@glm@@QAE@ABU01@@Z ENDP			; glm::tvec2<double,2>::tvec2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@N$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec2@N$01@glm@@QAE@XZ PROC			; glm::tvec2<double,2>::tvec2<double,2>, COMDAT
; _this$ = ecx

; 27   : 		{}

	xorps	xmm0, xmm0
	mov	eax, ecx
	movups	XMMWORD PTR [ecx], xmm0
	ret	0
??0?$tvec2@N$01@glm@@QAE@XZ ENDP			; glm::tvec2<double,2>::tvec2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@N$01@glm@@QBEABNH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@N$01@glm@@QBEABNH@Z PROC			; glm::tvec2<double,2>::operator[], COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 112  : 	}

	pop	ebp
	ret	4
??A?$tvec2@N$01@glm@@QBEABNH@Z ENDP			; glm::tvec2<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@N$01@glm@@QAEAANH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@N$01@glm@@QAEAANH@Z PROC			; glm::tvec2<double,2>::operator[], COMDAT
; _this$ = ecx

; 102  : 	{

	push	ebp
	mov	ebp, esp

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 105  : 	}

	pop	ebp
	ret	4
??A?$tvec2@N$01@glm@@QAEAANH@Z ENDP			; glm::tvec2<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@N$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@N$01@glm@@SAHXZ PROC			; glm::tvec2<double,2>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	push	2
	pop	eax
	ret	0
?length@?$tvec2@N$01@glm@@SAHXZ ENDP			; glm::tvec2<double,2>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@M$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec2@M$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<float,2>::operator--, COMDAT
; _this$ = ecx

; 271  : 	{

	push	ebp
	mov	ebp, esp

; 272  : 		tvec2<T, P> Result(*this);
; 273  : 		--*this;

	movss	xmm0, DWORD PTR [ecx]
	subss	xmm0, DWORD PTR __real@3f800000
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	subss	xmm0, DWORD PTR __real@3f800000
	mov	DWORD PTR [esi], eax

; 274  : 		return Result;

	mov	eax, esi
	mov	DWORD PTR [esi+4], edx
	pop	esi
	movss	DWORD PTR [ecx+4], xmm0

; 275  : 	}

	pop	ebp
	ret	8
??F?$tvec2@M$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<float,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@M$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec2@M$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<float,2>::operator++, COMDAT
; _this$ = ecx

; 263  : 	{

	push	ebp
	mov	ebp, esp

; 264  : 		tvec2<T, P> Result(*this);
; 265  : 		++*this;

	movss	xmm0, DWORD PTR [ecx]
	addss	xmm0, DWORD PTR __real@3f800000
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	addss	xmm0, DWORD PTR __real@3f800000
	mov	DWORD PTR [esi], eax

; 266  : 		return Result;

	mov	eax, esi
	mov	DWORD PTR [esi+4], edx
	pop	esi
	movss	DWORD PTR [ecx+4], xmm0

; 267  : 	}

	pop	ebp
	ret	8
??E?$tvec2@M$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<float,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@M$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec2@M$01@glm@@QAEAAU01@XZ PROC			; glm::tvec2<float,2>::operator--, COMDAT
; _this$ = ecx

; 256  : 		--this->x;

	movss	xmm0, DWORD PTR [ecx]

; 257  : 		--this->y;
; 258  : 		return *this;

	mov	eax, ecx
	subss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	subss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx+4], xmm0

; 259  : 	}

	ret	0
??F?$tvec2@M$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<float,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@M$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec2@M$01@glm@@QAEAAU01@XZ PROC			; glm::tvec2<float,2>::operator++, COMDAT
; _this$ = ecx

; 248  : 		++this->x;

	movss	xmm0, DWORD PTR [ecx]

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	eax, ecx
	addss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	addss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx+4], xmm0

; 251  : 	}

	ret	0
??E?$tvec2@M$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<float,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec2@M$01@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec2@M$01@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec2<float,2>::operator=, COMDAT
; _this$ = ecx

; 53   : template struct tvec2<float32, lowp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??4?$tvec2@M$01@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec2<float,2>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@M$01@glm@@QAE@MM@Z
_TEXT	SEGMENT
_s1$ = 8						; size = 4
_s2$ = 12						; size = 4
??0?$tvec2@M$01@glm@@QAE@MM@Z PROC			; glm::tvec2<float,2>::tvec2<float,2>, COMDAT
; _this$ = ecx

; 57   : 	{}

	push	ebp
	mov	ebp, esp
	movss	xmm0, DWORD PTR _s1$[ebp]
	mov	eax, ecx
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR _s2$[ebp]
	movss	DWORD PTR [ecx+4], xmm0
	pop	ebp
	ret	8
??0?$tvec2@M$01@glm@@QAE@MM@Z ENDP			; glm::tvec2<float,2>::tvec2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@M$01@glm@@QAE@M@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 4
??0?$tvec2@M$01@glm@@QAE@M@Z PROC			; glm::tvec2<float,2>::tvec2<float,2>, COMDAT
; _this$ = ecx

; 52   : 	{}

	push	ebp
	mov	ebp, esp
	movss	xmm0, DWORD PTR _scalar$[ebp]
	mov	eax, ecx
	movss	DWORD PTR [ecx], xmm0
	movss	DWORD PTR [ecx+4], xmm0
	pop	ebp
	ret	4
??0?$tvec2@M$01@glm@@QAE@M@Z ENDP			; glm::tvec2<float,2>::tvec2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@M$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec2@M$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec2<float,2>::tvec2<float,2>, COMDAT
; _this$ = ecx

; 47   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec2@M$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec2<float,2>::tvec2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec2@M$01@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec2@M$01@glm@@QAE@ABU01@@Z PROC			; glm::tvec2<float,2>::tvec2<float,2>, COMDAT
; _this$ = ecx

; 53   : template struct tvec2<float32, lowp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec2@M$01@glm@@QAE@ABU01@@Z ENDP			; glm::tvec2<float,2>::tvec2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@M$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec2@M$01@glm@@QAE@XZ PROC			; glm::tvec2<float,2>::tvec2<float,2>, COMDAT
; _this$ = ecx

; 27   : 		{}

	and	DWORD PTR [ecx], 0
	mov	eax, ecx
	and	DWORD PTR [ecx+4], 0
	ret	0
??0?$tvec2@M$01@glm@@QAE@XZ ENDP			; glm::tvec2<float,2>::tvec2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@M$01@glm@@QBEABMH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@M$01@glm@@QBEABMH@Z PROC			; glm::tvec2<float,2>::operator[], COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 112  : 	}

	pop	ebp
	ret	4
??A?$tvec2@M$01@glm@@QBEABMH@Z ENDP			; glm::tvec2<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@M$01@glm@@QAEAAMH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@M$01@glm@@QAEAAMH@Z PROC			; glm::tvec2<float,2>::operator[], COMDAT
; _this$ = ecx

; 102  : 	{

	push	ebp
	mov	ebp, esp

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 105  : 	}

	pop	ebp
	ret	4
??A?$tvec2@M$01@glm@@QAEAAMH@Z ENDP			; glm::tvec2<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@M$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@M$01@glm@@SAHXZ PROC			; glm::tvec2<float,2>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	push	2
	pop	eax
	ret	0
?length@?$tvec2@M$01@glm@@SAHXZ ENDP			; glm::tvec2<float,2>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@_J$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec2@_J$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<__int64,2>::operator--, COMDAT
; _this$ = ecx

; 271  : 	{

	push	ebp
	mov	ebp, esp

; 272  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 273  : 		--*this;

	or	edx, -1
	push	esi
	push	edi
	mov	esi, ecx
	mov	edi, eax
	movsd
	movsd
	movsd
	movsd
	add	DWORD PTR [ecx], edx
	pop	edi
	adc	DWORD PTR [ecx+4], edx
	add	DWORD PTR [ecx+8], edx
	pop	esi
	adc	DWORD PTR [ecx+12], edx

; 274  : 		return Result;
; 275  : 	}

	pop	ebp
	ret	8
??F?$tvec2@_J$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<__int64,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@_J$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec2@_J$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<__int64,2>::operator++, COMDAT
; _this$ = ecx

; 263  : 	{

	push	ebp
	mov	ebp, esp

; 264  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	mov	esi, ecx
	mov	edi, eax
	movsd
	movsd
	movsd
	movsd

; 265  : 		++*this;

	add	DWORD PTR [ecx], 1
	pop	edi
	adc	DWORD PTR [ecx+4], 0
	add	DWORD PTR [ecx+8], 1
	pop	esi
	adc	DWORD PTR [ecx+12], 0

; 266  : 		return Result;
; 267  : 	}

	pop	ebp
	ret	8
??E?$tvec2@_J$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<__int64,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@_J$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec2@_J$01@glm@@QAEAAU01@XZ PROC			; glm::tvec2<__int64,2>::operator--, COMDAT
; _this$ = ecx

; 256  : 		--this->x;

	or	eax, -1
	add	DWORD PTR [ecx], eax
	adc	DWORD PTR [ecx+4], eax

; 257  : 		--this->y;

	add	DWORD PTR [ecx+8], eax
	adc	DWORD PTR [ecx+12], eax

; 258  : 		return *this;

	mov	eax, ecx

; 259  : 	}

	ret	0
??F?$tvec2@_J$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<__int64,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@_J$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec2@_J$01@glm@@QAEAAU01@XZ PROC			; glm::tvec2<__int64,2>::operator++, COMDAT
; _this$ = ecx

; 248  : 		++this->x;

	add	DWORD PTR [ecx], 1

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	eax, ecx
	adc	DWORD PTR [ecx+4], 0
	add	DWORD PTR [ecx+8], 1
	adc	DWORD PTR [ecx+12], 0

; 251  : 	}

	ret	0
??E?$tvec2@_J$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<__int64,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec2@_J$01@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec2@_J$01@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec2<__int64,2>::operator=, COMDAT
; _this$ = ecx

; 52   : template struct tvec2<int64, lowp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	mov	edi, ecx
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tvec2@_J$01@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec2<__int64,2>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_J$01@glm@@QAE@_J0@Z
_TEXT	SEGMENT
_s1$ = 8						; size = 8
_s2$ = 16						; size = 8
??0?$tvec2@_J$01@glm@@QAE@_J0@Z PROC			; glm::tvec2<__int64,2>::tvec2<__int64,2>, COMDAT
; _this$ = ecx

; 57   : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _s1$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _s1$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _s2$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _s2$[ebp+4]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, ecx
	pop	ebp
	ret	16					; 00000010H
??0?$tvec2@_J$01@glm@@QAE@_J0@Z ENDP			; glm::tvec2<__int64,2>::tvec2<__int64,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_J$01@glm@@QAE@_J@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 8
??0?$tvec2@_J$01@glm@@QAE@_J@Z PROC			; glm::tvec2<__int64,2>::tvec2<__int64,2>, COMDAT
; _this$ = ecx

; 52   : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _scalar$[ebp+4]
	mov	edx, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+12], eax
	mov	eax, ecx
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+8], edx
	pop	ebp
	ret	8
??0?$tvec2@_J$01@glm@@QAE@_J@Z ENDP			; glm::tvec2<__int64,2>::tvec2<__int64,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_J$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec2@_J$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec2<__int64,2>::tvec2<__int64,2>, COMDAT
; _this$ = ecx

; 47   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec2@_J$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec2<__int64,2>::tvec2<__int64,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec2@_J$01@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec2@_J$01@glm@@QAE@ABU01@@Z PROC			; glm::tvec2<__int64,2>::tvec2<__int64,2>, COMDAT
; _this$ = ecx

; 52   : template struct tvec2<int64, lowp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec2@_J$01@glm@@QAE@ABU01@@Z ENDP			; glm::tvec2<__int64,2>::tvec2<__int64,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_J$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec2@_J$01@glm@@QAE@XZ PROC			; glm::tvec2<__int64,2>::tvec2<__int64,2>, COMDAT
; _this$ = ecx

; 27   : 		{}

	xor	eax, eax
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR [ecx+12], eax
	mov	eax, ecx
	ret	0
??0?$tvec2@_J$01@glm@@QAE@XZ ENDP			; glm::tvec2<__int64,2>::tvec2<__int64,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@_J$01@glm@@QBEAB_JH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@_J$01@glm@@QBEAB_JH@Z PROC			; glm::tvec2<__int64,2>::operator[], COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 112  : 	}

	pop	ebp
	ret	4
??A?$tvec2@_J$01@glm@@QBEAB_JH@Z ENDP			; glm::tvec2<__int64,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@_J$01@glm@@QAEAA_JH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@_J$01@glm@@QAEAA_JH@Z PROC			; glm::tvec2<__int64,2>::operator[], COMDAT
; _this$ = ecx

; 102  : 	{

	push	ebp
	mov	ebp, esp

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 105  : 	}

	pop	ebp
	ret	4
??A?$tvec2@_J$01@glm@@QAEAA_JH@Z ENDP			; glm::tvec2<__int64,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@_J$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@_J$01@glm@@SAHXZ PROC			; glm::tvec2<__int64,2>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	push	2
	pop	eax
	ret	0
?length@?$tvec2@_J$01@glm@@SAHXZ ENDP			; glm::tvec2<__int64,2>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@H$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec2@H$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<int,2>::operator--, COMDAT
; _this$ = ecx

; 271  : 	{

	push	ebp
	mov	ebp, esp

; 272  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]

; 273  : 		--*this;

	dec	DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	dec	DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 274  : 		return Result;
; 275  : 	}

	pop	ebp
	ret	8
??F?$tvec2@H$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<int,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@H$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec2@H$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<int,2>::operator++, COMDAT
; _this$ = ecx

; 263  : 	{

	push	ebp
	mov	ebp, esp

; 264  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]

; 265  : 		++*this;

	inc	DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	inc	DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 266  : 		return Result;
; 267  : 	}

	pop	ebp
	ret	8
??E?$tvec2@H$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<int,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@H$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec2@H$01@glm@@QAEAAU01@XZ PROC			; glm::tvec2<int,2>::operator--, COMDAT
; _this$ = ecx

; 256  : 		--this->x;

	dec	DWORD PTR [ecx]

; 257  : 		--this->y;
; 258  : 		return *this;

	mov	eax, ecx
	dec	DWORD PTR [ecx+4]

; 259  : 	}

	ret	0
??F?$tvec2@H$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<int,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@H$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec2@H$01@glm@@QAEAAU01@XZ PROC			; glm::tvec2<int,2>::operator++, COMDAT
; _this$ = ecx

; 248  : 		++this->x;

	inc	DWORD PTR [ecx]

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	eax, ecx
	inc	DWORD PTR [ecx+4]

; 251  : 	}

	ret	0
??E?$tvec2@H$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<int,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec2@H$01@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec2@H$01@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec2<int,2>::operator=, COMDAT
; _this$ = ecx

; 51   : template struct tvec2<int32, lowp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??4?$tvec2@H$01@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec2<int,2>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@H$01@glm@@QAE@HH@Z
_TEXT	SEGMENT
_s1$ = 8						; size = 4
_s2$ = 12						; size = 4
??0?$tvec2@H$01@glm@@QAE@HH@Z PROC			; glm::tvec2<int,2>::tvec2<int,2>, COMDAT
; _this$ = ecx

; 57   : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _s1$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _s2$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	pop	ebp
	ret	8
??0?$tvec2@H$01@glm@@QAE@HH@Z ENDP			; glm::tvec2<int,2>::tvec2<int,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@H$01@glm@@QAE@H@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 4
??0?$tvec2@H$01@glm@@QAE@H@Z PROC			; glm::tvec2<int,2>::tvec2<int,2>, COMDAT
; _this$ = ecx

; 52   : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec2@H$01@glm@@QAE@H@Z ENDP			; glm::tvec2<int,2>::tvec2<int,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@H$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec2@H$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec2<int,2>::tvec2<int,2>, COMDAT
; _this$ = ecx

; 47   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec2@H$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec2<int,2>::tvec2<int,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec2@H$01@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec2@H$01@glm@@QAE@ABU01@@Z PROC			; glm::tvec2<int,2>::tvec2<int,2>, COMDAT
; _this$ = ecx

; 51   : template struct tvec2<int32, lowp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec2@H$01@glm@@QAE@ABU01@@Z ENDP			; glm::tvec2<int,2>::tvec2<int,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@H$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec2@H$01@glm@@QAE@XZ PROC			; glm::tvec2<int,2>::tvec2<int,2>, COMDAT
; _this$ = ecx

; 27   : 		{}

	and	DWORD PTR [ecx], 0
	mov	eax, ecx
	and	DWORD PTR [ecx+4], 0
	ret	0
??0?$tvec2@H$01@glm@@QAE@XZ ENDP			; glm::tvec2<int,2>::tvec2<int,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@H$01@glm@@QBEABHH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@H$01@glm@@QBEABHH@Z PROC			; glm::tvec2<int,2>::operator[], COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 112  : 	}

	pop	ebp
	ret	4
??A?$tvec2@H$01@glm@@QBEABHH@Z ENDP			; glm::tvec2<int,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@H$01@glm@@QAEAAHH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@H$01@glm@@QAEAAHH@Z PROC			; glm::tvec2<int,2>::operator[], COMDAT
; _this$ = ecx

; 102  : 	{

	push	ebp
	mov	ebp, esp

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 105  : 	}

	pop	ebp
	ret	4
??A?$tvec2@H$01@glm@@QAEAAHH@Z ENDP			; glm::tvec2<int,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@H$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@H$01@glm@@SAHXZ PROC			; glm::tvec2<int,2>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	push	2
	pop	eax
	ret	0
?length@?$tvec2@H$01@glm@@SAHXZ ENDP			; glm::tvec2<int,2>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@F$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec2@F$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<short,2>::operator--, COMDAT
; _this$ = ecx

; 271  : 	{

	push	ebp
	mov	ebp, esp

; 272  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]

; 273  : 		--*this;

	dec	WORD PTR [ecx]
	dec	WORD PTR [ecx+2]
	mov	DWORD PTR [eax], edx

; 274  : 		return Result;
; 275  : 	}

	pop	ebp
	ret	8
??F?$tvec2@F$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<short,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@F$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec2@F$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<short,2>::operator++, COMDAT
; _this$ = ecx

; 263  : 	{

	push	ebp
	mov	ebp, esp

; 264  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]

; 265  : 		++*this;

	inc	WORD PTR [ecx]
	inc	WORD PTR [ecx+2]
	mov	DWORD PTR [eax], edx

; 266  : 		return Result;
; 267  : 	}

	pop	ebp
	ret	8
??E?$tvec2@F$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<short,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@F$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec2@F$01@glm@@QAEAAU01@XZ PROC			; glm::tvec2<short,2>::operator--, COMDAT
; _this$ = ecx

; 256  : 		--this->x;

	dec	WORD PTR [ecx]

; 257  : 		--this->y;
; 258  : 		return *this;

	mov	eax, ecx
	dec	WORD PTR [ecx+2]

; 259  : 	}

	ret	0
??F?$tvec2@F$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<short,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@F$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec2@F$01@glm@@QAEAAU01@XZ PROC			; glm::tvec2<short,2>::operator++, COMDAT
; _this$ = ecx

; 248  : 		++this->x;

	inc	WORD PTR [ecx]

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	eax, ecx
	inc	WORD PTR [ecx+2]

; 251  : 	}

	ret	0
??E?$tvec2@F$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<short,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec2@F$01@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec2@F$01@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec2<short,2>::operator=, COMDAT
; _this$ = ecx

; 50   : template struct tvec2<int16, lowp>;

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??4?$tvec2@F$01@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec2<short,2>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@F$01@glm@@QAE@FF@Z
_TEXT	SEGMENT
_s1$ = 8						; size = 2
_s2$ = 12						; size = 2
??0?$tvec2@F$01@glm@@QAE@FF@Z PROC			; glm::tvec2<short,2>::tvec2<short,2>, COMDAT
; _this$ = ecx

; 57   : 	{}

	push	ebp
	mov	ebp, esp
	mov	ax, WORD PTR _s1$[ebp]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR _s2$[ebp]
	mov	WORD PTR [ecx+2], ax
	mov	eax, ecx
	pop	ebp
	ret	8
??0?$tvec2@F$01@glm@@QAE@FF@Z ENDP			; glm::tvec2<short,2>::tvec2<short,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@F$01@glm@@QAE@F@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 2
??0?$tvec2@F$01@glm@@QAE@F@Z PROC			; glm::tvec2<short,2>::tvec2<short,2>, COMDAT
; _this$ = ecx

; 52   : 	{}

	push	ebp
	mov	ebp, esp
	mov	ax, WORD PTR _scalar$[ebp]
	mov	WORD PTR [ecx], ax
	mov	WORD PTR [ecx+2], ax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec2@F$01@glm@@QAE@F@Z ENDP			; glm::tvec2<short,2>::tvec2<short,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@F$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec2@F$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec2<short,2>::tvec2<short,2>, COMDAT
; _this$ = ecx

; 47   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec2@F$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec2<short,2>::tvec2<short,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec2@F$01@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec2@F$01@glm@@QAE@ABU01@@Z PROC			; glm::tvec2<short,2>::tvec2<short,2>, COMDAT
; _this$ = ecx

; 50   : template struct tvec2<int16, lowp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR [edx+2]
	mov	WORD PTR [ecx+2], ax
	mov	ax, WORD PTR [edx+2]
	mov	WORD PTR [ecx+2], ax
	mov	ax, WORD PTR [edx+2]
	mov	WORD PTR [ecx+2], ax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec2@F$01@glm@@QAE@ABU01@@Z ENDP			; glm::tvec2<short,2>::tvec2<short,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@F$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec2@F$01@glm@@QAE@XZ PROC			; glm::tvec2<short,2>::tvec2<short,2>, COMDAT
; _this$ = ecx

; 27   : 		{}

	xor	eax, eax
	mov	DWORD PTR [ecx], eax
	mov	eax, ecx
	ret	0
??0?$tvec2@F$01@glm@@QAE@XZ ENDP			; glm::tvec2<short,2>::tvec2<short,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@F$01@glm@@QBEABFH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@F$01@glm@@QBEABFH@Z PROC			; glm::tvec2<short,2>::operator[], COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 112  : 	}

	pop	ebp
	ret	4
??A?$tvec2@F$01@glm@@QBEABFH@Z ENDP			; glm::tvec2<short,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@F$01@glm@@QAEAAFH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@F$01@glm@@QAEAAFH@Z PROC			; glm::tvec2<short,2>::operator[], COMDAT
; _this$ = ecx

; 102  : 	{

	push	ebp
	mov	ebp, esp

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 105  : 	}

	pop	ebp
	ret	4
??A?$tvec2@F$01@glm@@QAEAAFH@Z ENDP			; glm::tvec2<short,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@F$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@F$01@glm@@SAHXZ PROC			; glm::tvec2<short,2>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	push	2
	pop	eax
	ret	0
?length@?$tvec2@F$01@glm@@SAHXZ ENDP			; glm::tvec2<short,2>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@C$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec2@C$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<signed char,2>::operator--, COMDAT
; _this$ = ecx

; 271  : 	{

	push	ebp
	mov	ebp, esp

; 272  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	dx, WORD PTR [ecx]

; 273  : 		--*this;

	dec	BYTE PTR [ecx]
	dec	BYTE PTR [ecx+1]
	mov	WORD PTR [eax], dx

; 274  : 		return Result;
; 275  : 	}

	pop	ebp
	ret	8
??F?$tvec2@C$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<signed char,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@C$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec2@C$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<signed char,2>::operator++, COMDAT
; _this$ = ecx

; 263  : 	{

	push	ebp
	mov	ebp, esp

; 264  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	dx, WORD PTR [ecx]

; 265  : 		++*this;

	inc	BYTE PTR [ecx]
	inc	BYTE PTR [ecx+1]
	mov	WORD PTR [eax], dx

; 266  : 		return Result;
; 267  : 	}

	pop	ebp
	ret	8
??E?$tvec2@C$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<signed char,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@C$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec2@C$01@glm@@QAEAAU01@XZ PROC			; glm::tvec2<signed char,2>::operator--, COMDAT
; _this$ = ecx

; 256  : 		--this->x;

	dec	BYTE PTR [ecx]

; 257  : 		--this->y;
; 258  : 		return *this;

	mov	eax, ecx
	dec	BYTE PTR [ecx+1]

; 259  : 	}

	ret	0
??F?$tvec2@C$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<signed char,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@C$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec2@C$01@glm@@QAEAAU01@XZ PROC			; glm::tvec2<signed char,2>::operator++, COMDAT
; _this$ = ecx

; 248  : 		++this->x;

	inc	BYTE PTR [ecx]

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	eax, ecx
	inc	BYTE PTR [ecx+1]

; 251  : 	}

	ret	0
??E?$tvec2@C$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<signed char,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec2@C$01@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec2@C$01@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec2<signed char,2>::operator=, COMDAT
; _this$ = ecx

; 49   : template struct tvec2<int8, lowp>;

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ax, WORD PTR [eax]
	mov	WORD PTR [ecx], ax
	mov	eax, ecx
	pop	ebp
	ret	4
??4?$tvec2@C$01@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec2<signed char,2>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@C$01@glm@@QAE@CC@Z
_TEXT	SEGMENT
_s1$ = 8						; size = 1
_s2$ = 12						; size = 1
??0?$tvec2@C$01@glm@@QAE@CC@Z PROC			; glm::tvec2<signed char,2>::tvec2<signed char,2>, COMDAT
; _this$ = ecx

; 57   : 	{}

	push	ebp
	mov	ebp, esp
	mov	al, BYTE PTR _s1$[ebp]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR _s2$[ebp]
	mov	BYTE PTR [ecx+1], al
	mov	eax, ecx
	pop	ebp
	ret	8
??0?$tvec2@C$01@glm@@QAE@CC@Z ENDP			; glm::tvec2<signed char,2>::tvec2<signed char,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@C$01@glm@@QAE@C@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 1
??0?$tvec2@C$01@glm@@QAE@C@Z PROC			; glm::tvec2<signed char,2>::tvec2<signed char,2>, COMDAT
; _this$ = ecx

; 52   : 	{}

	push	ebp
	mov	ebp, esp
	mov	al, BYTE PTR _scalar$[ebp]
	mov	BYTE PTR [ecx], al
	mov	BYTE PTR [ecx+1], al
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec2@C$01@glm@@QAE@C@Z ENDP			; glm::tvec2<signed char,2>::tvec2<signed char,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@C$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec2@C$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec2<signed char,2>::tvec2<signed char,2>, COMDAT
; _this$ = ecx

; 47   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec2@C$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec2<signed char,2>::tvec2<signed char,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec2@C$01@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec2@C$01@glm@@QAE@ABU01@@Z PROC			; glm::tvec2<signed char,2>::tvec2<signed char,2>, COMDAT
; _this$ = ecx

; 49   : template struct tvec2<int8, lowp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR [edx+1]
	mov	BYTE PTR [ecx+1], al
	mov	al, BYTE PTR [edx+1]
	mov	BYTE PTR [ecx+1], al
	mov	al, BYTE PTR [edx+1]
	mov	BYTE PTR [ecx+1], al
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec2@C$01@glm@@QAE@ABU01@@Z ENDP			; glm::tvec2<signed char,2>::tvec2<signed char,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@C$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec2@C$01@glm@@QAE@XZ PROC			; glm::tvec2<signed char,2>::tvec2<signed char,2>, COMDAT
; _this$ = ecx

; 27   : 		{}

	mov	WORD PTR [ecx], 0
	mov	eax, ecx
	ret	0
??0?$tvec2@C$01@glm@@QAE@XZ ENDP			; glm::tvec2<signed char,2>::tvec2<signed char,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@C$01@glm@@QBEABCH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@C$01@glm@@QBEABCH@Z PROC			; glm::tvec2<signed char,2>::operator[], COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 112  : 	}

	pop	ebp
	ret	4
??A?$tvec2@C$01@glm@@QBEABCH@Z ENDP			; glm::tvec2<signed char,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@C$01@glm@@QAEAACH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@C$01@glm@@QAEAACH@Z PROC			; glm::tvec2<signed char,2>::operator[], COMDAT
; _this$ = ecx

; 102  : 	{

	push	ebp
	mov	ebp, esp

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 105  : 	}

	pop	ebp
	ret	4
??A?$tvec2@C$01@glm@@QAEAACH@Z ENDP			; glm::tvec2<signed char,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@C$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@C$01@glm@@SAHXZ PROC			; glm::tvec2<signed char,2>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	push	2
	pop	eax
	ret	0
?length@?$tvec2@C$01@glm@@SAHXZ ENDP			; glm::tvec2<signed char,2>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@_K$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec2@_K$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<unsigned __int64,2>::operator--, COMDAT
; _this$ = ecx

; 271  : 	{

	push	ebp
	mov	ebp, esp

; 272  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 273  : 		--*this;

	or	edx, -1
	push	esi
	push	edi
	mov	esi, ecx
	mov	edi, eax
	movsd
	movsd
	movsd
	movsd
	add	DWORD PTR [ecx], edx
	pop	edi
	adc	DWORD PTR [ecx+4], edx
	add	DWORD PTR [ecx+8], edx
	pop	esi
	adc	DWORD PTR [ecx+12], edx

; 274  : 		return Result;
; 275  : 	}

	pop	ebp
	ret	8
??F?$tvec2@_K$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<unsigned __int64,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@_K$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec2@_K$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<unsigned __int64,2>::operator++, COMDAT
; _this$ = ecx

; 263  : 	{

	push	ebp
	mov	ebp, esp

; 264  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	push	edi
	mov	esi, ecx
	mov	edi, eax
	movsd
	movsd
	movsd
	movsd

; 265  : 		++*this;

	add	DWORD PTR [ecx], 1
	pop	edi
	adc	DWORD PTR [ecx+4], 0
	add	DWORD PTR [ecx+8], 1
	pop	esi
	adc	DWORD PTR [ecx+12], 0

; 266  : 		return Result;
; 267  : 	}

	pop	ebp
	ret	8
??E?$tvec2@_K$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<unsigned __int64,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@_K$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec2@_K$01@glm@@QAEAAU01@XZ PROC			; glm::tvec2<unsigned __int64,2>::operator--, COMDAT
; _this$ = ecx

; 256  : 		--this->x;

	or	eax, -1
	add	DWORD PTR [ecx], eax
	adc	DWORD PTR [ecx+4], eax

; 257  : 		--this->y;

	add	DWORD PTR [ecx+8], eax
	adc	DWORD PTR [ecx+12], eax

; 258  : 		return *this;

	mov	eax, ecx

; 259  : 	}

	ret	0
??F?$tvec2@_K$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<unsigned __int64,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@_K$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec2@_K$01@glm@@QAEAAU01@XZ PROC			; glm::tvec2<unsigned __int64,2>::operator++, COMDAT
; _this$ = ecx

; 248  : 		++this->x;

	add	DWORD PTR [ecx], 1

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	eax, ecx
	adc	DWORD PTR [ecx+4], 0
	add	DWORD PTR [ecx+8], 1
	adc	DWORD PTR [ecx+12], 0

; 251  : 	}

	ret	0
??E?$tvec2@_K$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<unsigned __int64,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec2@_K$01@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec2@_K$01@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec2<unsigned __int64,2>::operator=, COMDAT
; _this$ = ecx

; 48   : template struct tvec2<uint64, lowp>;

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	mov	edi, ecx
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tvec2@_K$01@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec2<unsigned __int64,2>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_K$01@glm@@QAE@_K0@Z
_TEXT	SEGMENT
_s1$ = 8						; size = 8
_s2$ = 16						; size = 8
??0?$tvec2@_K$01@glm@@QAE@_K0@Z PROC			; glm::tvec2<unsigned __int64,2>::tvec2<unsigned __int64,2>, COMDAT
; _this$ = ecx

; 57   : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _s1$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _s1$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _s2$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _s2$[ebp+4]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, ecx
	pop	ebp
	ret	16					; 00000010H
??0?$tvec2@_K$01@glm@@QAE@_K0@Z ENDP			; glm::tvec2<unsigned __int64,2>::tvec2<unsigned __int64,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_K$01@glm@@QAE@_K@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 8
??0?$tvec2@_K$01@glm@@QAE@_K@Z PROC			; glm::tvec2<unsigned __int64,2>::tvec2<unsigned __int64,2>, COMDAT
; _this$ = ecx

; 52   : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _scalar$[ebp+4]
	mov	edx, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+12], eax
	mov	eax, ecx
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+8], edx
	pop	ebp
	ret	8
??0?$tvec2@_K$01@glm@@QAE@_K@Z ENDP			; glm::tvec2<unsigned __int64,2>::tvec2<unsigned __int64,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_K$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec2@_K$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec2<unsigned __int64,2>::tvec2<unsigned __int64,2>, COMDAT
; _this$ = ecx

; 47   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec2@_K$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec2<unsigned __int64,2>::tvec2<unsigned __int64,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec2@_K$01@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec2@_K$01@glm@@QAE@ABU01@@Z PROC			; glm::tvec2<unsigned __int64,2>::tvec2<unsigned __int64,2>, COMDAT
; _this$ = ecx

; 48   : template struct tvec2<uint64, lowp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec2@_K$01@glm@@QAE@ABU01@@Z ENDP			; glm::tvec2<unsigned __int64,2>::tvec2<unsigned __int64,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_K$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec2@_K$01@glm@@QAE@XZ PROC			; glm::tvec2<unsigned __int64,2>::tvec2<unsigned __int64,2>, COMDAT
; _this$ = ecx

; 27   : 		{}

	xor	eax, eax
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR [ecx+12], eax
	mov	eax, ecx
	ret	0
??0?$tvec2@_K$01@glm@@QAE@XZ ENDP			; glm::tvec2<unsigned __int64,2>::tvec2<unsigned __int64,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@_K$01@glm@@QBEAB_KH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@_K$01@glm@@QBEAB_KH@Z PROC			; glm::tvec2<unsigned __int64,2>::operator[], COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 112  : 	}

	pop	ebp
	ret	4
??A?$tvec2@_K$01@glm@@QBEAB_KH@Z ENDP			; glm::tvec2<unsigned __int64,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@_K$01@glm@@QAEAA_KH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@_K$01@glm@@QAEAA_KH@Z PROC			; glm::tvec2<unsigned __int64,2>::operator[], COMDAT
; _this$ = ecx

; 102  : 	{

	push	ebp
	mov	ebp, esp

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 105  : 	}

	pop	ebp
	ret	4
??A?$tvec2@_K$01@glm@@QAEAA_KH@Z ENDP			; glm::tvec2<unsigned __int64,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@_K$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@_K$01@glm@@SAHXZ PROC			; glm::tvec2<unsigned __int64,2>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	push	2
	pop	eax
	ret	0
?length@?$tvec2@_K$01@glm@@SAHXZ ENDP			; glm::tvec2<unsigned __int64,2>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@I$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec2@I$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<unsigned int,2>::operator--, COMDAT
; _this$ = ecx

; 271  : 	{

	push	ebp
	mov	ebp, esp

; 272  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]

; 273  : 		--*this;

	dec	DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	dec	DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 274  : 		return Result;
; 275  : 	}

	pop	ebp
	ret	8
??F?$tvec2@I$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<unsigned int,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@I$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec2@I$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<unsigned int,2>::operator++, COMDAT
; _this$ = ecx

; 263  : 	{

	push	ebp
	mov	ebp, esp

; 264  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]

; 265  : 		++*this;

	inc	DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	inc	DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 266  : 		return Result;
; 267  : 	}

	pop	ebp
	ret	8
??E?$tvec2@I$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<unsigned int,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@I$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec2@I$01@glm@@QAEAAU01@XZ PROC			; glm::tvec2<unsigned int,2>::operator--, COMDAT
; _this$ = ecx

; 256  : 		--this->x;

	dec	DWORD PTR [ecx]

; 257  : 		--this->y;
; 258  : 		return *this;

	mov	eax, ecx
	dec	DWORD PTR [ecx+4]

; 259  : 	}

	ret	0
??F?$tvec2@I$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<unsigned int,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@I$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec2@I$01@glm@@QAEAAU01@XZ PROC			; glm::tvec2<unsigned int,2>::operator++, COMDAT
; _this$ = ecx

; 248  : 		++this->x;

	inc	DWORD PTR [ecx]

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	eax, ecx
	inc	DWORD PTR [ecx+4]

; 251  : 	}

	ret	0
??E?$tvec2@I$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<unsigned int,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec2@I$01@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec2@I$01@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec2<unsigned int,2>::operator=, COMDAT
; _this$ = ecx

; 47   : template struct tvec2<uint32, lowp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??4?$tvec2@I$01@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec2<unsigned int,2>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@I$01@glm@@QAE@II@Z
_TEXT	SEGMENT
_s1$ = 8						; size = 4
_s2$ = 12						; size = 4
??0?$tvec2@I$01@glm@@QAE@II@Z PROC			; glm::tvec2<unsigned int,2>::tvec2<unsigned int,2>, COMDAT
; _this$ = ecx

; 57   : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _s1$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _s2$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	pop	ebp
	ret	8
??0?$tvec2@I$01@glm@@QAE@II@Z ENDP			; glm::tvec2<unsigned int,2>::tvec2<unsigned int,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@I$01@glm@@QAE@I@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 4
??0?$tvec2@I$01@glm@@QAE@I@Z PROC			; glm::tvec2<unsigned int,2>::tvec2<unsigned int,2>, COMDAT
; _this$ = ecx

; 52   : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec2@I$01@glm@@QAE@I@Z ENDP			; glm::tvec2<unsigned int,2>::tvec2<unsigned int,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@I$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec2@I$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec2<unsigned int,2>::tvec2<unsigned int,2>, COMDAT
; _this$ = ecx

; 47   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec2@I$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec2<unsigned int,2>::tvec2<unsigned int,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec2@I$01@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec2@I$01@glm@@QAE@ABU01@@Z PROC			; glm::tvec2<unsigned int,2>::tvec2<unsigned int,2>, COMDAT
; _this$ = ecx

; 47   : template struct tvec2<uint32, lowp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec2@I$01@glm@@QAE@ABU01@@Z ENDP			; glm::tvec2<unsigned int,2>::tvec2<unsigned int,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@I$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec2@I$01@glm@@QAE@XZ PROC			; glm::tvec2<unsigned int,2>::tvec2<unsigned int,2>, COMDAT
; _this$ = ecx

; 27   : 		{}

	and	DWORD PTR [ecx], 0
	mov	eax, ecx
	and	DWORD PTR [ecx+4], 0
	ret	0
??0?$tvec2@I$01@glm@@QAE@XZ ENDP			; glm::tvec2<unsigned int,2>::tvec2<unsigned int,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@I$01@glm@@QBEABIH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@I$01@glm@@QBEABIH@Z PROC			; glm::tvec2<unsigned int,2>::operator[], COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 112  : 	}

	pop	ebp
	ret	4
??A?$tvec2@I$01@glm@@QBEABIH@Z ENDP			; glm::tvec2<unsigned int,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@I$01@glm@@QAEAAIH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@I$01@glm@@QAEAAIH@Z PROC			; glm::tvec2<unsigned int,2>::operator[], COMDAT
; _this$ = ecx

; 102  : 	{

	push	ebp
	mov	ebp, esp

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 105  : 	}

	pop	ebp
	ret	4
??A?$tvec2@I$01@glm@@QAEAAIH@Z ENDP			; glm::tvec2<unsigned int,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@I$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@I$01@glm@@SAHXZ PROC			; glm::tvec2<unsigned int,2>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	push	2
	pop	eax
	ret	0
?length@?$tvec2@I$01@glm@@SAHXZ ENDP			; glm::tvec2<unsigned int,2>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@G$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec2@G$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<unsigned short,2>::operator--, COMDAT
; _this$ = ecx

; 271  : 	{

	push	ebp
	mov	ebp, esp

; 272  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 273  : 		--*this;

	mov	edx, 65535				; 0000ffffH
	add	WORD PTR [ecx], dx
	add	WORD PTR [ecx+2], dx

; 274  : 		return Result;
; 275  : 	}

	pop	ebp
	ret	8
??F?$tvec2@G$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<unsigned short,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@G$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec2@G$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<unsigned short,2>::operator++, COMDAT
; _this$ = ecx

; 263  : 	{

	push	ebp
	mov	ebp, esp

; 264  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]

; 265  : 		++*this;

	inc	WORD PTR [ecx]
	inc	WORD PTR [ecx+2]
	mov	DWORD PTR [eax], edx

; 266  : 		return Result;
; 267  : 	}

	pop	ebp
	ret	8
??E?$tvec2@G$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<unsigned short,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@G$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec2@G$01@glm@@QAEAAU01@XZ PROC			; glm::tvec2<unsigned short,2>::operator--, COMDAT
; _this$ = ecx

; 256  : 		--this->x;

	mov	eax, 65535				; 0000ffffH
	add	WORD PTR [ecx], ax

; 257  : 		--this->y;

	add	WORD PTR [ecx+2], ax

; 258  : 		return *this;

	mov	eax, ecx

; 259  : 	}

	ret	0
??F?$tvec2@G$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<unsigned short,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@G$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec2@G$01@glm@@QAEAAU01@XZ PROC			; glm::tvec2<unsigned short,2>::operator++, COMDAT
; _this$ = ecx

; 248  : 		++this->x;

	inc	WORD PTR [ecx]

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	eax, ecx
	inc	WORD PTR [ecx+2]

; 251  : 	}

	ret	0
??E?$tvec2@G$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<unsigned short,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec2@G$01@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec2@G$01@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec2<unsigned short,2>::operator=, COMDAT
; _this$ = ecx

; 46   : template struct tvec2<uint16, lowp>;

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??4?$tvec2@G$01@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec2<unsigned short,2>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@G$01@glm@@QAE@GG@Z
_TEXT	SEGMENT
_s1$ = 8						; size = 2
_s2$ = 12						; size = 2
??0?$tvec2@G$01@glm@@QAE@GG@Z PROC			; glm::tvec2<unsigned short,2>::tvec2<unsigned short,2>, COMDAT
; _this$ = ecx

; 57   : 	{}

	push	ebp
	mov	ebp, esp
	mov	ax, WORD PTR _s1$[ebp]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR _s2$[ebp]
	mov	WORD PTR [ecx+2], ax
	mov	eax, ecx
	pop	ebp
	ret	8
??0?$tvec2@G$01@glm@@QAE@GG@Z ENDP			; glm::tvec2<unsigned short,2>::tvec2<unsigned short,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@G$01@glm@@QAE@G@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 2
??0?$tvec2@G$01@glm@@QAE@G@Z PROC			; glm::tvec2<unsigned short,2>::tvec2<unsigned short,2>, COMDAT
; _this$ = ecx

; 52   : 	{}

	push	ebp
	mov	ebp, esp
	mov	ax, WORD PTR _scalar$[ebp]
	mov	WORD PTR [ecx], ax
	mov	WORD PTR [ecx+2], ax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec2@G$01@glm@@QAE@G@Z ENDP			; glm::tvec2<unsigned short,2>::tvec2<unsigned short,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@G$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec2@G$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec2<unsigned short,2>::tvec2<unsigned short,2>, COMDAT
; _this$ = ecx

; 47   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec2@G$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec2<unsigned short,2>::tvec2<unsigned short,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec2@G$01@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec2@G$01@glm@@QAE@ABU01@@Z PROC			; glm::tvec2<unsigned short,2>::tvec2<unsigned short,2>, COMDAT
; _this$ = ecx

; 46   : template struct tvec2<uint16, lowp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR [edx+2]
	mov	WORD PTR [ecx+2], ax
	mov	ax, WORD PTR [edx+2]
	mov	WORD PTR [ecx+2], ax
	mov	ax, WORD PTR [edx+2]
	mov	WORD PTR [ecx+2], ax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec2@G$01@glm@@QAE@ABU01@@Z ENDP			; glm::tvec2<unsigned short,2>::tvec2<unsigned short,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@G$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec2@G$01@glm@@QAE@XZ PROC			; glm::tvec2<unsigned short,2>::tvec2<unsigned short,2>, COMDAT
; _this$ = ecx

; 27   : 		{}

	xor	eax, eax
	mov	DWORD PTR [ecx], eax
	mov	eax, ecx
	ret	0
??0?$tvec2@G$01@glm@@QAE@XZ ENDP			; glm::tvec2<unsigned short,2>::tvec2<unsigned short,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@G$01@glm@@QBEABGH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@G$01@glm@@QBEABGH@Z PROC			; glm::tvec2<unsigned short,2>::operator[], COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 112  : 	}

	pop	ebp
	ret	4
??A?$tvec2@G$01@glm@@QBEABGH@Z ENDP			; glm::tvec2<unsigned short,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@G$01@glm@@QAEAAGH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@G$01@glm@@QAEAAGH@Z PROC			; glm::tvec2<unsigned short,2>::operator[], COMDAT
; _this$ = ecx

; 102  : 	{

	push	ebp
	mov	ebp, esp

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 105  : 	}

	pop	ebp
	ret	4
??A?$tvec2@G$01@glm@@QAEAAGH@Z ENDP			; glm::tvec2<unsigned short,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@G$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@G$01@glm@@SAHXZ PROC			; glm::tvec2<unsigned short,2>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	push	2
	pop	eax
	ret	0
?length@?$tvec2@G$01@glm@@SAHXZ ENDP			; glm::tvec2<unsigned short,2>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@E$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec2@E$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<unsigned char,2>::operator--, COMDAT
; _this$ = ecx

; 271  : 	{

	push	ebp
	mov	ebp, esp

; 272  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	dx, WORD PTR [ecx]

; 273  : 		--*this;

	dec	BYTE PTR [ecx]
	dec	BYTE PTR [ecx+1]
	mov	WORD PTR [eax], dx

; 274  : 		return Result;
; 275  : 	}

	pop	ebp
	ret	8
??F?$tvec2@E$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<unsigned char,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@E$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec2@E$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<unsigned char,2>::operator++, COMDAT
; _this$ = ecx

; 263  : 	{

	push	ebp
	mov	ebp, esp

; 264  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	dx, WORD PTR [ecx]

; 265  : 		++*this;

	inc	BYTE PTR [ecx]
	inc	BYTE PTR [ecx+1]
	mov	WORD PTR [eax], dx

; 266  : 		return Result;
; 267  : 	}

	pop	ebp
	ret	8
??E?$tvec2@E$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<unsigned char,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@E$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec2@E$01@glm@@QAEAAU01@XZ PROC			; glm::tvec2<unsigned char,2>::operator--, COMDAT
; _this$ = ecx

; 256  : 		--this->x;

	dec	BYTE PTR [ecx]

; 257  : 		--this->y;
; 258  : 		return *this;

	mov	eax, ecx
	dec	BYTE PTR [ecx+1]

; 259  : 	}

	ret	0
??F?$tvec2@E$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<unsigned char,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@E$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec2@E$01@glm@@QAEAAU01@XZ PROC			; glm::tvec2<unsigned char,2>::operator++, COMDAT
; _this$ = ecx

; 248  : 		++this->x;

	inc	BYTE PTR [ecx]

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	eax, ecx
	inc	BYTE PTR [ecx+1]

; 251  : 	}

	ret	0
??E?$tvec2@E$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<unsigned char,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec2@E$01@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec2@E$01@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec2<unsigned char,2>::operator=, COMDAT
; _this$ = ecx

; 45   : template struct tvec2<uint8, lowp>;

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ax, WORD PTR [eax]
	mov	WORD PTR [ecx], ax
	mov	eax, ecx
	pop	ebp
	ret	4
??4?$tvec2@E$01@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec2<unsigned char,2>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@E$01@glm@@QAE@EE@Z
_TEXT	SEGMENT
_s1$ = 8						; size = 1
_s2$ = 12						; size = 1
??0?$tvec2@E$01@glm@@QAE@EE@Z PROC			; glm::tvec2<unsigned char,2>::tvec2<unsigned char,2>, COMDAT
; _this$ = ecx

; 57   : 	{}

	push	ebp
	mov	ebp, esp
	mov	al, BYTE PTR _s1$[ebp]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR _s2$[ebp]
	mov	BYTE PTR [ecx+1], al
	mov	eax, ecx
	pop	ebp
	ret	8
??0?$tvec2@E$01@glm@@QAE@EE@Z ENDP			; glm::tvec2<unsigned char,2>::tvec2<unsigned char,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@E$01@glm@@QAE@E@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 1
??0?$tvec2@E$01@glm@@QAE@E@Z PROC			; glm::tvec2<unsigned char,2>::tvec2<unsigned char,2>, COMDAT
; _this$ = ecx

; 52   : 	{}

	push	ebp
	mov	ebp, esp
	mov	al, BYTE PTR _scalar$[ebp]
	mov	BYTE PTR [ecx], al
	mov	BYTE PTR [ecx+1], al
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec2@E$01@glm@@QAE@E@Z ENDP			; glm::tvec2<unsigned char,2>::tvec2<unsigned char,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@E$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec2@E$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec2<unsigned char,2>::tvec2<unsigned char,2>, COMDAT
; _this$ = ecx

; 47   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec2@E$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec2<unsigned char,2>::tvec2<unsigned char,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec2@E$01@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec2@E$01@glm@@QAE@ABU01@@Z PROC			; glm::tvec2<unsigned char,2>::tvec2<unsigned char,2>, COMDAT
; _this$ = ecx

; 45   : template struct tvec2<uint8, lowp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR [edx+1]
	mov	BYTE PTR [ecx+1], al
	mov	al, BYTE PTR [edx+1]
	mov	BYTE PTR [ecx+1], al
	mov	al, BYTE PTR [edx+1]
	mov	BYTE PTR [ecx+1], al
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec2@E$01@glm@@QAE@ABU01@@Z ENDP			; glm::tvec2<unsigned char,2>::tvec2<unsigned char,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@E$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec2@E$01@glm@@QAE@XZ PROC			; glm::tvec2<unsigned char,2>::tvec2<unsigned char,2>, COMDAT
; _this$ = ecx

; 27   : 		{}

	mov	WORD PTR [ecx], 0
	mov	eax, ecx
	ret	0
??0?$tvec2@E$01@glm@@QAE@XZ ENDP			; glm::tvec2<unsigned char,2>::tvec2<unsigned char,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@E$01@glm@@QBEABEH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@E$01@glm@@QBEABEH@Z PROC			; glm::tvec2<unsigned char,2>::operator[], COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 112  : 	}

	pop	ebp
	ret	4
??A?$tvec2@E$01@glm@@QBEABEH@Z ENDP			; glm::tvec2<unsigned char,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@E$01@glm@@QAEAAEH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@E$01@glm@@QAEAAEH@Z PROC			; glm::tvec2<unsigned char,2>::operator[], COMDAT
; _this$ = ecx

; 102  : 	{

	push	ebp
	mov	ebp, esp

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 105  : 	}

	pop	ebp
	ret	4
??A?$tvec2@E$01@glm@@QAEAAEH@Z ENDP			; glm::tvec2<unsigned char,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@E$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@E$01@glm@@SAHXZ PROC			; glm::tvec2<unsigned char,2>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	push	2
	pop	eax
	ret	0
?length@?$tvec2@E$01@glm@@SAHXZ ENDP			; glm::tvec2<unsigned char,2>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@N$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec1@N$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<double,0>::operator--, COMDAT
; _this$ = ecx

; 192  : 	{

	push	ebp
	mov	ebp, esp

; 193  : 		tvec1<T, P> Result(*this);
; 194  : 		--*this;

	movsd	xmm0, QWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	subsd	xmm0, QWORD PTR __real@3ff0000000000000
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	movsd	QWORD PTR [ecx], xmm0

; 195  : 		return Result;
; 196  : 	}

	pop	ebp
	ret	8
??F?$tvec1@N$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<double,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@N$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec1@N$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<double,0>::operator++, COMDAT
; _this$ = ecx

; 184  : 	{

	push	ebp
	mov	ebp, esp

; 185  : 		tvec1<T, P> Result(*this);
; 186  : 		++*this;

	movsd	xmm0, QWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	addsd	xmm0, QWORD PTR __real@3ff0000000000000
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	movsd	QWORD PTR [ecx], xmm0

; 187  : 		return Result;
; 188  : 	}

	pop	ebp
	ret	8
??E?$tvec1@N$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<double,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@N$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec1@N$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec1<double,0>::operator--, COMDAT
; _this$ = ecx

; 178  : 		--this->x;

	movsd	xmm0, QWORD PTR [ecx]

; 179  : 		return *this;

	mov	eax, ecx
	subsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR [ecx], xmm0

; 180  : 	}

	ret	0
??F?$tvec1@N$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<double,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@N$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec1@N$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec1<double,0>::operator++, COMDAT
; _this$ = ecx

; 171  : 		++this->x;

	movsd	xmm0, QWORD PTR [ecx]

; 172  : 		return *this;

	mov	eax, ecx
	addsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR [ecx], xmm0

; 173  : 	}

	ret	0
??E?$tvec1@N$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<double,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec1@N$0A@@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec1@N$0A@@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec1<double,0>::operator=, COMDAT
; _this$ = ecx

; 42   : template struct tvec1<float64, highp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??4?$tvec1@N$0A@@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec1<double,0>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@N$0A@@glm@@QAE@N@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 8
??0?$tvec1@N$0A@@glm@@QAE@N@Z PROC			; glm::tvec1<double,0>::tvec1<double,0>, COMDAT
; _this$ = ecx

; 39   : 	{}

	push	ebp
	mov	ebp, esp
	movsd	xmm0, QWORD PTR _scalar$[ebp]
	mov	eax, ecx
	movsd	QWORD PTR [ecx], xmm0
	pop	ebp
	ret	8
??0?$tvec1@N$0A@@glm@@QAE@N@Z ENDP			; glm::tvec1<double,0>::tvec1<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@N$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec1@N$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec1<double,0>::tvec1<double,0>, COMDAT
; _this$ = ecx

; 34   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec1@N$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec1<double,0>::tvec1<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec1@N$0A@@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec1@N$0A@@glm@@QAE@ABU01@@Z PROC			; glm::tvec1<double,0>::tvec1<double,0>, COMDAT
; _this$ = ecx

; 42   : template struct tvec1<float64, highp>;

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ___that$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [eax]
	mov	eax, ecx
	movsd	QWORD PTR [ecx], xmm0
	pop	ebp
	ret	4
??0?$tvec1@N$0A@@glm@@QAE@ABU01@@Z ENDP			; glm::tvec1<double,0>::tvec1<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@N$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec1@N$0A@@glm@@QAE@XZ PROC			; glm::tvec1<double,0>::tvec1<double,0>, COMDAT
; _this$ = ecx

; 14   : 		{}

	xorps	xmm0, xmm0
	mov	eax, ecx
	movsd	QWORD PTR [ecx], xmm0
	ret	0
??0?$tvec1@N$0A@@glm@@QAE@XZ ENDP			; glm::tvec1<double,0>::tvec1<double,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@N$0A@@glm@@QBEABNH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@N$0A@@glm@@QBEABNH@Z PROC			; glm::tvec1<double,0>::operator[], COMDAT
; _this$ = ecx

; 78   : 	{

	push	ebp
	mov	ebp, esp

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 81   : 	}

	pop	ebp
	ret	4
??A?$tvec1@N$0A@@glm@@QBEABNH@Z ENDP			; glm::tvec1<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@N$0A@@glm@@QAEAANH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@N$0A@@glm@@QAEAANH@Z PROC			; glm::tvec1<double,0>::operator[], COMDAT
; _this$ = ecx

; 71   : 	{

	push	ebp
	mov	ebp, esp

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 74   : 	}

	pop	ebp
	ret	4
??A?$tvec1@N$0A@@glm@@QAEAANH@Z ENDP			; glm::tvec1<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@N$0A@@glm@@SAHXZ PROC			; glm::tvec1<double,0>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	xor	eax, eax
	inc	eax
	ret	0
?length@?$tvec1@N$0A@@glm@@SAHXZ ENDP			; glm::tvec1<double,0>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@M$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec1@M$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<float,0>::operator--, COMDAT
; _this$ = ecx

; 192  : 	{

	push	ebp
	mov	ebp, esp

; 193  : 		tvec1<T, P> Result(*this);
; 194  : 		--*this;

	movss	xmm0, DWORD PTR [ecx]
	subss	xmm0, DWORD PTR __real@3f800000
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	movss	DWORD PTR [ecx], xmm0

; 195  : 		return Result;
; 196  : 	}

	pop	ebp
	ret	8
??F?$tvec1@M$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<float,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@M$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec1@M$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<float,0>::operator++, COMDAT
; _this$ = ecx

; 184  : 	{

	push	ebp
	mov	ebp, esp

; 185  : 		tvec1<T, P> Result(*this);
; 186  : 		++*this;

	movss	xmm0, DWORD PTR [ecx]
	addss	xmm0, DWORD PTR __real@3f800000
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	movss	DWORD PTR [ecx], xmm0

; 187  : 		return Result;
; 188  : 	}

	pop	ebp
	ret	8
??E?$tvec1@M$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<float,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@M$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec1@M$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec1<float,0>::operator--, COMDAT
; _this$ = ecx

; 178  : 		--this->x;

	movss	xmm0, DWORD PTR [ecx]

; 179  : 		return *this;

	mov	eax, ecx
	subss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx], xmm0

; 180  : 	}

	ret	0
??F?$tvec1@M$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<float,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@M$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec1@M$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec1<float,0>::operator++, COMDAT
; _this$ = ecx

; 171  : 		++this->x;

	movss	xmm0, DWORD PTR [ecx]

; 172  : 		return *this;

	mov	eax, ecx
	addss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx], xmm0

; 173  : 	}

	ret	0
??E?$tvec1@M$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<float,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec1@M$0A@@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec1@M$0A@@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec1<float,0>::operator=, COMDAT
; _this$ = ecx

; 41   : template struct tvec1<float32, highp>;

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??4?$tvec1@M$0A@@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec1<float,0>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@M$0A@@glm@@QAE@M@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 4
??0?$tvec1@M$0A@@glm@@QAE@M@Z PROC			; glm::tvec1<float,0>::tvec1<float,0>, COMDAT
; _this$ = ecx

; 39   : 	{}

	push	ebp
	mov	ebp, esp
	movss	xmm0, DWORD PTR _scalar$[ebp]
	mov	eax, ecx
	movss	DWORD PTR [ecx], xmm0
	pop	ebp
	ret	4
??0?$tvec1@M$0A@@glm@@QAE@M@Z ENDP			; glm::tvec1<float,0>::tvec1<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@M$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec1@M$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec1<float,0>::tvec1<float,0>, COMDAT
; _this$ = ecx

; 34   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec1@M$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec1<float,0>::tvec1<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec1@M$0A@@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec1@M$0A@@glm@@QAE@ABU01@@Z PROC			; glm::tvec1<float,0>::tvec1<float,0>, COMDAT
; _this$ = ecx

; 41   : template struct tvec1<float32, highp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec1@M$0A@@glm@@QAE@ABU01@@Z ENDP			; glm::tvec1<float,0>::tvec1<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@M$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec1@M$0A@@glm@@QAE@XZ PROC			; glm::tvec1<float,0>::tvec1<float,0>, COMDAT
; _this$ = ecx

; 14   : 		{}

	and	DWORD PTR [ecx], 0
	mov	eax, ecx
	ret	0
??0?$tvec1@M$0A@@glm@@QAE@XZ ENDP			; glm::tvec1<float,0>::tvec1<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@M$0A@@glm@@QBEABMH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@M$0A@@glm@@QBEABMH@Z PROC			; glm::tvec1<float,0>::operator[], COMDAT
; _this$ = ecx

; 78   : 	{

	push	ebp
	mov	ebp, esp

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 81   : 	}

	pop	ebp
	ret	4
??A?$tvec1@M$0A@@glm@@QBEABMH@Z ENDP			; glm::tvec1<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@M$0A@@glm@@QAEAAMH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@M$0A@@glm@@QAEAAMH@Z PROC			; glm::tvec1<float,0>::operator[], COMDAT
; _this$ = ecx

; 71   : 	{

	push	ebp
	mov	ebp, esp

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 74   : 	}

	pop	ebp
	ret	4
??A?$tvec1@M$0A@@glm@@QAEAAMH@Z ENDP			; glm::tvec1<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@M$0A@@glm@@SAHXZ PROC			; glm::tvec1<float,0>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	xor	eax, eax
	inc	eax
	ret	0
?length@?$tvec1@M$0A@@glm@@SAHXZ ENDP			; glm::tvec1<float,0>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@_J$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec1@_J$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tvec1<__int64,0>::operator--, COMDAT
; _this$ = ecx

; 192  : 	{

	push	ebp
	mov	ebp, esp

; 193  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]

; 194  : 		--*this;

	add	DWORD PTR [ecx], -1
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	adc	DWORD PTR [ecx+4], -1
	mov	DWORD PTR [eax+4], edx

; 195  : 		return Result;
; 196  : 	}

	pop	ebp
	ret	8
??F?$tvec1@_J$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tvec1<__int64,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@_J$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec1@_J$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tvec1<__int64,0>::operator++, COMDAT
; _this$ = ecx

; 184  : 	{

	push	ebp
	mov	ebp, esp

; 185  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]

; 186  : 		++*this;

	add	DWORD PTR [ecx], 1
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	adc	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [eax+4], edx

; 187  : 		return Result;
; 188  : 	}

	pop	ebp
	ret	8
??E?$tvec1@_J$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tvec1<__int64,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@_J$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec1@_J$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec1<__int64,0>::operator--, COMDAT
; _this$ = ecx

; 178  : 		--this->x;

	add	DWORD PTR [ecx], -1

; 179  : 		return *this;

	mov	eax, ecx
	adc	DWORD PTR [ecx+4], -1

; 180  : 	}

	ret	0
??F?$tvec1@_J$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<__int64,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@_J$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec1@_J$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec1<__int64,0>::operator++, COMDAT
; _this$ = ecx

; 171  : 		++this->x;

	add	DWORD PTR [ecx], 1

; 172  : 		return *this;

	mov	eax, ecx
	adc	DWORD PTR [ecx+4], 0

; 173  : 	}

	ret	0
??E?$tvec1@_J$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<__int64,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec1@_J$0A@@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec1@_J$0A@@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec1<__int64,0>::operator=, COMDAT
; _this$ = ecx

; 40   : template struct tvec1<int64, highp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??4?$tvec1@_J$0A@@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec1<__int64,0>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@_J$0A@@glm@@QAE@_J@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 8
??0?$tvec1@_J$0A@@glm@@QAE@_J@Z PROC			; glm::tvec1<__int64,0>::tvec1<__int64,0>, COMDAT
; _this$ = ecx

; 39   : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _scalar$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	pop	ebp
	ret	8
??0?$tvec1@_J$0A@@glm@@QAE@_J@Z ENDP			; glm::tvec1<__int64,0>::tvec1<__int64,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@_J$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec1@_J$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec1<__int64,0>::tvec1<__int64,0>, COMDAT
; _this$ = ecx

; 34   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec1@_J$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec1<__int64,0>::tvec1<__int64,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec1@_J$0A@@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec1@_J$0A@@glm@@QAE@ABU01@@Z PROC		; glm::tvec1<__int64,0>::tvec1<__int64,0>, COMDAT
; _this$ = ecx

; 40   : template struct tvec1<int64, highp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec1@_J$0A@@glm@@QAE@ABU01@@Z ENDP		; glm::tvec1<__int64,0>::tvec1<__int64,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@_J$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec1@_J$0A@@glm@@QAE@XZ PROC			; glm::tvec1<__int64,0>::tvec1<__int64,0>, COMDAT
; _this$ = ecx

; 14   : 		{}

	and	DWORD PTR [ecx], 0
	mov	eax, ecx
	and	DWORD PTR [ecx+4], 0
	ret	0
??0?$tvec1@_J$0A@@glm@@QAE@XZ ENDP			; glm::tvec1<__int64,0>::tvec1<__int64,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@_J$0A@@glm@@QBEAB_JH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@_J$0A@@glm@@QBEAB_JH@Z PROC			; glm::tvec1<__int64,0>::operator[], COMDAT
; _this$ = ecx

; 78   : 	{

	push	ebp
	mov	ebp, esp

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 81   : 	}

	pop	ebp
	ret	4
??A?$tvec1@_J$0A@@glm@@QBEAB_JH@Z ENDP			; glm::tvec1<__int64,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@_J$0A@@glm@@QAEAA_JH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@_J$0A@@glm@@QAEAA_JH@Z PROC			; glm::tvec1<__int64,0>::operator[], COMDAT
; _this$ = ecx

; 71   : 	{

	push	ebp
	mov	ebp, esp

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 74   : 	}

	pop	ebp
	ret	4
??A?$tvec1@_J$0A@@glm@@QAEAA_JH@Z ENDP			; glm::tvec1<__int64,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@_J$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@_J$0A@@glm@@SAHXZ PROC			; glm::tvec1<__int64,0>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	xor	eax, eax
	inc	eax
	ret	0
?length@?$tvec1@_J$0A@@glm@@SAHXZ ENDP			; glm::tvec1<__int64,0>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@H$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec1@H$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<int,0>::operator--, COMDAT
; _this$ = ecx

; 192  : 	{

	push	ebp
	mov	ebp, esp

; 193  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 194  : 		--*this;

	dec	edx
	mov	DWORD PTR [ecx], edx

; 195  : 		return Result;
; 196  : 	}

	pop	ebp
	ret	8
??F?$tvec1@H$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<int,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@H$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec1@H$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<int,0>::operator++, COMDAT
; _this$ = ecx

; 184  : 	{

	push	ebp
	mov	ebp, esp

; 185  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 186  : 		++*this;

	inc	edx
	mov	DWORD PTR [ecx], edx

; 187  : 		return Result;
; 188  : 	}

	pop	ebp
	ret	8
??E?$tvec1@H$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<int,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@H$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec1@H$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec1<int,0>::operator--, COMDAT
; _this$ = ecx

; 178  : 		--this->x;

	dec	DWORD PTR [ecx]

; 179  : 		return *this;

	mov	eax, ecx

; 180  : 	}

	ret	0
??F?$tvec1@H$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<int,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@H$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec1@H$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec1<int,0>::operator++, COMDAT
; _this$ = ecx

; 171  : 		++this->x;

	inc	DWORD PTR [ecx]

; 172  : 		return *this;

	mov	eax, ecx

; 173  : 	}

	ret	0
??E?$tvec1@H$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<int,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec1@H$0A@@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec1@H$0A@@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec1<int,0>::operator=, COMDAT
; _this$ = ecx

; 39   : template struct tvec1<int32, highp>;

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??4?$tvec1@H$0A@@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec1<int,0>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@H$0A@@glm@@QAE@H@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 4
??0?$tvec1@H$0A@@glm@@QAE@H@Z PROC			; glm::tvec1<int,0>::tvec1<int,0>, COMDAT
; _this$ = ecx

; 39   : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec1@H$0A@@glm@@QAE@H@Z ENDP			; glm::tvec1<int,0>::tvec1<int,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@H$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec1@H$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec1<int,0>::tvec1<int,0>, COMDAT
; _this$ = ecx

; 34   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec1@H$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec1<int,0>::tvec1<int,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec1@H$0A@@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec1@H$0A@@glm@@QAE@ABU01@@Z PROC			; glm::tvec1<int,0>::tvec1<int,0>, COMDAT
; _this$ = ecx

; 39   : template struct tvec1<int32, highp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec1@H$0A@@glm@@QAE@ABU01@@Z ENDP			; glm::tvec1<int,0>::tvec1<int,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@H$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec1@H$0A@@glm@@QAE@XZ PROC			; glm::tvec1<int,0>::tvec1<int,0>, COMDAT
; _this$ = ecx

; 14   : 		{}

	and	DWORD PTR [ecx], 0
	mov	eax, ecx
	ret	0
??0?$tvec1@H$0A@@glm@@QAE@XZ ENDP			; glm::tvec1<int,0>::tvec1<int,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@H$0A@@glm@@QBEABHH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@H$0A@@glm@@QBEABHH@Z PROC			; glm::tvec1<int,0>::operator[], COMDAT
; _this$ = ecx

; 78   : 	{

	push	ebp
	mov	ebp, esp

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 81   : 	}

	pop	ebp
	ret	4
??A?$tvec1@H$0A@@glm@@QBEABHH@Z ENDP			; glm::tvec1<int,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@H$0A@@glm@@QAEAAHH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@H$0A@@glm@@QAEAAHH@Z PROC			; glm::tvec1<int,0>::operator[], COMDAT
; _this$ = ecx

; 71   : 	{

	push	ebp
	mov	ebp, esp

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 74   : 	}

	pop	ebp
	ret	4
??A?$tvec1@H$0A@@glm@@QAEAAHH@Z ENDP			; glm::tvec1<int,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@H$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@H$0A@@glm@@SAHXZ PROC			; glm::tvec1<int,0>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	xor	eax, eax
	inc	eax
	ret	0
?length@?$tvec1@H$0A@@glm@@SAHXZ ENDP			; glm::tvec1<int,0>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@F$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec1@F$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<short,0>::operator--, COMDAT
; _this$ = ecx

; 192  : 	{

	push	ebp
	mov	ebp, esp

; 193  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movzx	edx, WORD PTR [ecx]
	mov	WORD PTR [eax], dx

; 194  : 		--*this;

	dec	edx
	mov	WORD PTR [ecx], dx

; 195  : 		return Result;
; 196  : 	}

	pop	ebp
	ret	8
??F?$tvec1@F$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<short,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@F$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec1@F$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<short,0>::operator++, COMDAT
; _this$ = ecx

; 184  : 	{

	push	ebp
	mov	ebp, esp

; 185  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movzx	edx, WORD PTR [ecx]
	mov	WORD PTR [eax], dx

; 186  : 		++*this;

	inc	edx
	mov	WORD PTR [ecx], dx

; 187  : 		return Result;
; 188  : 	}

	pop	ebp
	ret	8
??E?$tvec1@F$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<short,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@F$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec1@F$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec1<short,0>::operator--, COMDAT
; _this$ = ecx

; 178  : 		--this->x;

	dec	WORD PTR [ecx]

; 179  : 		return *this;

	mov	eax, ecx

; 180  : 	}

	ret	0
??F?$tvec1@F$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<short,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@F$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec1@F$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec1<short,0>::operator++, COMDAT
; _this$ = ecx

; 171  : 		++this->x;

	inc	WORD PTR [ecx]

; 172  : 		return *this;

	mov	eax, ecx

; 173  : 	}

	ret	0
??E?$tvec1@F$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<short,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec1@F$0A@@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec1@F$0A@@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec1<short,0>::operator=, COMDAT
; _this$ = ecx

; 38   : template struct tvec1<int16, highp>;

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ax, WORD PTR [eax]
	mov	WORD PTR [ecx], ax
	mov	eax, ecx
	pop	ebp
	ret	4
??4?$tvec1@F$0A@@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec1<short,0>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@F$0A@@glm@@QAE@F@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 2
??0?$tvec1@F$0A@@glm@@QAE@F@Z PROC			; glm::tvec1<short,0>::tvec1<short,0>, COMDAT
; _this$ = ecx

; 39   : 	{}

	push	ebp
	mov	ebp, esp
	mov	ax, WORD PTR _scalar$[ebp]
	mov	WORD PTR [ecx], ax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec1@F$0A@@glm@@QAE@F@Z ENDP			; glm::tvec1<short,0>::tvec1<short,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@F$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec1@F$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec1<short,0>::tvec1<short,0>, COMDAT
; _this$ = ecx

; 34   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec1@F$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec1<short,0>::tvec1<short,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec1@F$0A@@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec1@F$0A@@glm@@QAE@ABU01@@Z PROC			; glm::tvec1<short,0>::tvec1<short,0>, COMDAT
; _this$ = ecx

; 38   : template struct tvec1<int16, highp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec1@F$0A@@glm@@QAE@ABU01@@Z ENDP			; glm::tvec1<short,0>::tvec1<short,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@F$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec1@F$0A@@glm@@QAE@XZ PROC			; glm::tvec1<short,0>::tvec1<short,0>, COMDAT
; _this$ = ecx

; 14   : 		{}

	xor	eax, eax
	mov	WORD PTR [ecx], ax
	mov	eax, ecx
	ret	0
??0?$tvec1@F$0A@@glm@@QAE@XZ ENDP			; glm::tvec1<short,0>::tvec1<short,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@F$0A@@glm@@QBEABFH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@F$0A@@glm@@QBEABFH@Z PROC			; glm::tvec1<short,0>::operator[], COMDAT
; _this$ = ecx

; 78   : 	{

	push	ebp
	mov	ebp, esp

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 81   : 	}

	pop	ebp
	ret	4
??A?$tvec1@F$0A@@glm@@QBEABFH@Z ENDP			; glm::tvec1<short,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@F$0A@@glm@@QAEAAFH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@F$0A@@glm@@QAEAAFH@Z PROC			; glm::tvec1<short,0>::operator[], COMDAT
; _this$ = ecx

; 71   : 	{

	push	ebp
	mov	ebp, esp

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 74   : 	}

	pop	ebp
	ret	4
??A?$tvec1@F$0A@@glm@@QAEAAFH@Z ENDP			; glm::tvec1<short,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@F$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@F$0A@@glm@@SAHXZ PROC			; glm::tvec1<short,0>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	xor	eax, eax
	inc	eax
	ret	0
?length@?$tvec1@F$0A@@glm@@SAHXZ ENDP			; glm::tvec1<short,0>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@C$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec1@C$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<signed char,0>::operator--, COMDAT
; _this$ = ecx

; 192  : 	{

	push	ebp
	mov	ebp, esp

; 193  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 194  : 		--*this;

	dec	dl
	mov	BYTE PTR [ecx], dl

; 195  : 		return Result;
; 196  : 	}

	pop	ebp
	ret	8
??F?$tvec1@C$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<signed char,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@C$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec1@C$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<signed char,0>::operator++, COMDAT
; _this$ = ecx

; 184  : 	{

	push	ebp
	mov	ebp, esp

; 185  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 186  : 		++*this;

	inc	dl
	mov	BYTE PTR [ecx], dl

; 187  : 		return Result;
; 188  : 	}

	pop	ebp
	ret	8
??E?$tvec1@C$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<signed char,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@C$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec1@C$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec1<signed char,0>::operator--, COMDAT
; _this$ = ecx

; 178  : 		--this->x;

	dec	BYTE PTR [ecx]

; 179  : 		return *this;

	mov	eax, ecx

; 180  : 	}

	ret	0
??F?$tvec1@C$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<signed char,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@C$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec1@C$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec1<signed char,0>::operator++, COMDAT
; _this$ = ecx

; 171  : 		++this->x;

	inc	BYTE PTR [ecx]

; 172  : 		return *this;

	mov	eax, ecx

; 173  : 	}

	ret	0
??E?$tvec1@C$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<signed char,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec1@C$0A@@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec1@C$0A@@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec1<signed char,0>::operator=, COMDAT
; _this$ = ecx

; 37   : template struct tvec1<int8, highp>;

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [eax]
	mov	BYTE PTR [ecx], al
	mov	eax, ecx
	pop	ebp
	ret	4
??4?$tvec1@C$0A@@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec1<signed char,0>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@C$0A@@glm@@QAE@C@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 1
??0?$tvec1@C$0A@@glm@@QAE@C@Z PROC			; glm::tvec1<signed char,0>::tvec1<signed char,0>, COMDAT
; _this$ = ecx

; 39   : 	{}

	push	ebp
	mov	ebp, esp
	mov	al, BYTE PTR _scalar$[ebp]
	mov	BYTE PTR [ecx], al
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec1@C$0A@@glm@@QAE@C@Z ENDP			; glm::tvec1<signed char,0>::tvec1<signed char,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@C$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec1@C$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec1<signed char,0>::tvec1<signed char,0>, COMDAT
; _this$ = ecx

; 34   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec1@C$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec1<signed char,0>::tvec1<signed char,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec1@C$0A@@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec1@C$0A@@glm@@QAE@ABU01@@Z PROC			; glm::tvec1<signed char,0>::tvec1<signed char,0>, COMDAT
; _this$ = ecx

; 37   : template struct tvec1<int8, highp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec1@C$0A@@glm@@QAE@ABU01@@Z ENDP			; glm::tvec1<signed char,0>::tvec1<signed char,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@C$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec1@C$0A@@glm@@QAE@XZ PROC			; glm::tvec1<signed char,0>::tvec1<signed char,0>, COMDAT
; _this$ = ecx

; 14   : 		{}

	mov	BYTE PTR [ecx], 0
	mov	eax, ecx
	ret	0
??0?$tvec1@C$0A@@glm@@QAE@XZ ENDP			; glm::tvec1<signed char,0>::tvec1<signed char,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@C$0A@@glm@@QBEABCH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@C$0A@@glm@@QBEABCH@Z PROC			; glm::tvec1<signed char,0>::operator[], COMDAT
; _this$ = ecx

; 78   : 	{

	push	ebp
	mov	ebp, esp

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 81   : 	}

	pop	ebp
	ret	4
??A?$tvec1@C$0A@@glm@@QBEABCH@Z ENDP			; glm::tvec1<signed char,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@C$0A@@glm@@QAEAACH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@C$0A@@glm@@QAEAACH@Z PROC			; glm::tvec1<signed char,0>::operator[], COMDAT
; _this$ = ecx

; 71   : 	{

	push	ebp
	mov	ebp, esp

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 74   : 	}

	pop	ebp
	ret	4
??A?$tvec1@C$0A@@glm@@QAEAACH@Z ENDP			; glm::tvec1<signed char,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@C$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@C$0A@@glm@@SAHXZ PROC			; glm::tvec1<signed char,0>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	xor	eax, eax
	inc	eax
	ret	0
?length@?$tvec1@C$0A@@glm@@SAHXZ ENDP			; glm::tvec1<signed char,0>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@_K$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec1@_K$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tvec1<unsigned __int64,0>::operator--, COMDAT
; _this$ = ecx

; 192  : 	{

	push	ebp
	mov	ebp, esp

; 193  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]

; 194  : 		--*this;

	add	DWORD PTR [ecx], -1
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	adc	DWORD PTR [ecx+4], -1
	mov	DWORD PTR [eax+4], edx

; 195  : 		return Result;
; 196  : 	}

	pop	ebp
	ret	8
??F?$tvec1@_K$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tvec1<unsigned __int64,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@_K$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec1@_K$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tvec1<unsigned __int64,0>::operator++, COMDAT
; _this$ = ecx

; 184  : 	{

	push	ebp
	mov	ebp, esp

; 185  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]

; 186  : 		++*this;

	add	DWORD PTR [ecx], 1
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	adc	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [eax+4], edx

; 187  : 		return Result;
; 188  : 	}

	pop	ebp
	ret	8
??E?$tvec1@_K$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tvec1<unsigned __int64,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@_K$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec1@_K$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec1<unsigned __int64,0>::operator--, COMDAT
; _this$ = ecx

; 178  : 		--this->x;

	add	DWORD PTR [ecx], -1

; 179  : 		return *this;

	mov	eax, ecx
	adc	DWORD PTR [ecx+4], -1

; 180  : 	}

	ret	0
??F?$tvec1@_K$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<unsigned __int64,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@_K$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec1@_K$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec1<unsigned __int64,0>::operator++, COMDAT
; _this$ = ecx

; 171  : 		++this->x;

	add	DWORD PTR [ecx], 1

; 172  : 		return *this;

	mov	eax, ecx
	adc	DWORD PTR [ecx+4], 0

; 173  : 	}

	ret	0
??E?$tvec1@_K$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<unsigned __int64,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec1@_K$0A@@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec1@_K$0A@@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec1<unsigned __int64,0>::operator=, COMDAT
; _this$ = ecx

; 36   : template struct tvec1<uint64, highp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??4?$tvec1@_K$0A@@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec1<unsigned __int64,0>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@_K$0A@@glm@@QAE@_K@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 8
??0?$tvec1@_K$0A@@glm@@QAE@_K@Z PROC			; glm::tvec1<unsigned __int64,0>::tvec1<unsigned __int64,0>, COMDAT
; _this$ = ecx

; 39   : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _scalar$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	pop	ebp
	ret	8
??0?$tvec1@_K$0A@@glm@@QAE@_K@Z ENDP			; glm::tvec1<unsigned __int64,0>::tvec1<unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@_K$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec1@_K$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec1<unsigned __int64,0>::tvec1<unsigned __int64,0>, COMDAT
; _this$ = ecx

; 34   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec1@_K$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec1<unsigned __int64,0>::tvec1<unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec1@_K$0A@@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec1@_K$0A@@glm@@QAE@ABU01@@Z PROC		; glm::tvec1<unsigned __int64,0>::tvec1<unsigned __int64,0>, COMDAT
; _this$ = ecx

; 36   : template struct tvec1<uint64, highp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec1@_K$0A@@glm@@QAE@ABU01@@Z ENDP		; glm::tvec1<unsigned __int64,0>::tvec1<unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@_K$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec1@_K$0A@@glm@@QAE@XZ PROC			; glm::tvec1<unsigned __int64,0>::tvec1<unsigned __int64,0>, COMDAT
; _this$ = ecx

; 14   : 		{}

	and	DWORD PTR [ecx], 0
	mov	eax, ecx
	and	DWORD PTR [ecx+4], 0
	ret	0
??0?$tvec1@_K$0A@@glm@@QAE@XZ ENDP			; glm::tvec1<unsigned __int64,0>::tvec1<unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@_K$0A@@glm@@QBEAB_KH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@_K$0A@@glm@@QBEAB_KH@Z PROC			; glm::tvec1<unsigned __int64,0>::operator[], COMDAT
; _this$ = ecx

; 78   : 	{

	push	ebp
	mov	ebp, esp

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 81   : 	}

	pop	ebp
	ret	4
??A?$tvec1@_K$0A@@glm@@QBEAB_KH@Z ENDP			; glm::tvec1<unsigned __int64,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@_K$0A@@glm@@QAEAA_KH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@_K$0A@@glm@@QAEAA_KH@Z PROC			; glm::tvec1<unsigned __int64,0>::operator[], COMDAT
; _this$ = ecx

; 71   : 	{

	push	ebp
	mov	ebp, esp

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 74   : 	}

	pop	ebp
	ret	4
??A?$tvec1@_K$0A@@glm@@QAEAA_KH@Z ENDP			; glm::tvec1<unsigned __int64,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@_K$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@_K$0A@@glm@@SAHXZ PROC			; glm::tvec1<unsigned __int64,0>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	xor	eax, eax
	inc	eax
	ret	0
?length@?$tvec1@_K$0A@@glm@@SAHXZ ENDP			; glm::tvec1<unsigned __int64,0>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@I$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec1@I$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<unsigned int,0>::operator--, COMDAT
; _this$ = ecx

; 192  : 	{

	push	ebp
	mov	ebp, esp

; 193  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 194  : 		--*this;

	dec	edx
	mov	DWORD PTR [ecx], edx

; 195  : 		return Result;
; 196  : 	}

	pop	ebp
	ret	8
??F?$tvec1@I$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<unsigned int,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@I$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec1@I$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<unsigned int,0>::operator++, COMDAT
; _this$ = ecx

; 184  : 	{

	push	ebp
	mov	ebp, esp

; 185  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 186  : 		++*this;

	inc	edx
	mov	DWORD PTR [ecx], edx

; 187  : 		return Result;
; 188  : 	}

	pop	ebp
	ret	8
??E?$tvec1@I$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<unsigned int,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@I$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec1@I$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec1<unsigned int,0>::operator--, COMDAT
; _this$ = ecx

; 178  : 		--this->x;

	dec	DWORD PTR [ecx]

; 179  : 		return *this;

	mov	eax, ecx

; 180  : 	}

	ret	0
??F?$tvec1@I$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<unsigned int,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@I$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec1@I$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec1<unsigned int,0>::operator++, COMDAT
; _this$ = ecx

; 171  : 		++this->x;

	inc	DWORD PTR [ecx]

; 172  : 		return *this;

	mov	eax, ecx

; 173  : 	}

	ret	0
??E?$tvec1@I$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<unsigned int,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec1@I$0A@@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec1@I$0A@@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec1<unsigned int,0>::operator=, COMDAT
; _this$ = ecx

; 35   : template struct tvec1<uint32, highp>;

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??4?$tvec1@I$0A@@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec1<unsigned int,0>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@I$0A@@glm@@QAE@I@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 4
??0?$tvec1@I$0A@@glm@@QAE@I@Z PROC			; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>, COMDAT
; _this$ = ecx

; 39   : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec1@I$0A@@glm@@QAE@I@Z ENDP			; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@I$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec1@I$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>, COMDAT
; _this$ = ecx

; 34   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec1@I$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec1@I$0A@@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec1@I$0A@@glm@@QAE@ABU01@@Z PROC			; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>, COMDAT
; _this$ = ecx

; 35   : template struct tvec1<uint32, highp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec1@I$0A@@glm@@QAE@ABU01@@Z ENDP			; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@I$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec1@I$0A@@glm@@QAE@XZ PROC			; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>, COMDAT
; _this$ = ecx

; 14   : 		{}

	and	DWORD PTR [ecx], 0
	mov	eax, ecx
	ret	0
??0?$tvec1@I$0A@@glm@@QAE@XZ ENDP			; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@I$0A@@glm@@QBEABIH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@I$0A@@glm@@QBEABIH@Z PROC			; glm::tvec1<unsigned int,0>::operator[], COMDAT
; _this$ = ecx

; 78   : 	{

	push	ebp
	mov	ebp, esp

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 81   : 	}

	pop	ebp
	ret	4
??A?$tvec1@I$0A@@glm@@QBEABIH@Z ENDP			; glm::tvec1<unsigned int,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@I$0A@@glm@@QAEAAIH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@I$0A@@glm@@QAEAAIH@Z PROC			; glm::tvec1<unsigned int,0>::operator[], COMDAT
; _this$ = ecx

; 71   : 	{

	push	ebp
	mov	ebp, esp

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 74   : 	}

	pop	ebp
	ret	4
??A?$tvec1@I$0A@@glm@@QAEAAIH@Z ENDP			; glm::tvec1<unsigned int,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@I$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@I$0A@@glm@@SAHXZ PROC			; glm::tvec1<unsigned int,0>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	xor	eax, eax
	inc	eax
	ret	0
?length@?$tvec1@I$0A@@glm@@SAHXZ ENDP			; glm::tvec1<unsigned int,0>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@G$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec1@G$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<unsigned short,0>::operator--, COMDAT
; _this$ = ecx

; 192  : 	{

	push	ebp
	mov	ebp, esp

; 193  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movzx	edx, WORD PTR [ecx]
	mov	WORD PTR [eax], dx

; 194  : 		--*this;

	dec	edx
	mov	WORD PTR [ecx], dx

; 195  : 		return Result;
; 196  : 	}

	pop	ebp
	ret	8
??F?$tvec1@G$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<unsigned short,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@G$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec1@G$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<unsigned short,0>::operator++, COMDAT
; _this$ = ecx

; 184  : 	{

	push	ebp
	mov	ebp, esp

; 185  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movzx	edx, WORD PTR [ecx]
	mov	WORD PTR [eax], dx

; 186  : 		++*this;

	inc	edx
	mov	WORD PTR [ecx], dx

; 187  : 		return Result;
; 188  : 	}

	pop	ebp
	ret	8
??E?$tvec1@G$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<unsigned short,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@G$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec1@G$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec1<unsigned short,0>::operator--, COMDAT
; _this$ = ecx

; 178  : 		--this->x;

	mov	eax, 65535				; 0000ffffH
	add	WORD PTR [ecx], ax

; 179  : 		return *this;

	mov	eax, ecx

; 180  : 	}

	ret	0
??F?$tvec1@G$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<unsigned short,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@G$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec1@G$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec1<unsigned short,0>::operator++, COMDAT
; _this$ = ecx

; 171  : 		++this->x;

	inc	WORD PTR [ecx]

; 172  : 		return *this;

	mov	eax, ecx

; 173  : 	}

	ret	0
??E?$tvec1@G$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<unsigned short,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec1@G$0A@@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec1@G$0A@@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec1<unsigned short,0>::operator=, COMDAT
; _this$ = ecx

; 34   : template struct tvec1<uint16, highp>;

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ax, WORD PTR [eax]
	mov	WORD PTR [ecx], ax
	mov	eax, ecx
	pop	ebp
	ret	4
??4?$tvec1@G$0A@@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec1<unsigned short,0>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@G$0A@@glm@@QAE@G@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 2
??0?$tvec1@G$0A@@glm@@QAE@G@Z PROC			; glm::tvec1<unsigned short,0>::tvec1<unsigned short,0>, COMDAT
; _this$ = ecx

; 39   : 	{}

	push	ebp
	mov	ebp, esp
	mov	ax, WORD PTR _scalar$[ebp]
	mov	WORD PTR [ecx], ax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec1@G$0A@@glm@@QAE@G@Z ENDP			; glm::tvec1<unsigned short,0>::tvec1<unsigned short,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@G$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec1@G$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec1<unsigned short,0>::tvec1<unsigned short,0>, COMDAT
; _this$ = ecx

; 34   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec1@G$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec1<unsigned short,0>::tvec1<unsigned short,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec1@G$0A@@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec1@G$0A@@glm@@QAE@ABU01@@Z PROC			; glm::tvec1<unsigned short,0>::tvec1<unsigned short,0>, COMDAT
; _this$ = ecx

; 34   : template struct tvec1<uint16, highp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec1@G$0A@@glm@@QAE@ABU01@@Z ENDP			; glm::tvec1<unsigned short,0>::tvec1<unsigned short,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@G$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec1@G$0A@@glm@@QAE@XZ PROC			; glm::tvec1<unsigned short,0>::tvec1<unsigned short,0>, COMDAT
; _this$ = ecx

; 14   : 		{}

	xor	eax, eax
	mov	WORD PTR [ecx], ax
	mov	eax, ecx
	ret	0
??0?$tvec1@G$0A@@glm@@QAE@XZ ENDP			; glm::tvec1<unsigned short,0>::tvec1<unsigned short,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@G$0A@@glm@@QBEABGH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@G$0A@@glm@@QBEABGH@Z PROC			; glm::tvec1<unsigned short,0>::operator[], COMDAT
; _this$ = ecx

; 78   : 	{

	push	ebp
	mov	ebp, esp

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 81   : 	}

	pop	ebp
	ret	4
??A?$tvec1@G$0A@@glm@@QBEABGH@Z ENDP			; glm::tvec1<unsigned short,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@G$0A@@glm@@QAEAAGH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@G$0A@@glm@@QAEAAGH@Z PROC			; glm::tvec1<unsigned short,0>::operator[], COMDAT
; _this$ = ecx

; 71   : 	{

	push	ebp
	mov	ebp, esp

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 74   : 	}

	pop	ebp
	ret	4
??A?$tvec1@G$0A@@glm@@QAEAAGH@Z ENDP			; glm::tvec1<unsigned short,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@G$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@G$0A@@glm@@SAHXZ PROC			; glm::tvec1<unsigned short,0>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	xor	eax, eax
	inc	eax
	ret	0
?length@?$tvec1@G$0A@@glm@@SAHXZ ENDP			; glm::tvec1<unsigned short,0>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@E$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec1@E$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<unsigned char,0>::operator--, COMDAT
; _this$ = ecx

; 192  : 	{

	push	ebp
	mov	ebp, esp

; 193  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 194  : 		--*this;

	dec	dl
	mov	BYTE PTR [ecx], dl

; 195  : 		return Result;
; 196  : 	}

	pop	ebp
	ret	8
??F?$tvec1@E$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<unsigned char,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@E$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec1@E$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<unsigned char,0>::operator++, COMDAT
; _this$ = ecx

; 184  : 	{

	push	ebp
	mov	ebp, esp

; 185  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 186  : 		++*this;

	inc	dl
	mov	BYTE PTR [ecx], dl

; 187  : 		return Result;
; 188  : 	}

	pop	ebp
	ret	8
??E?$tvec1@E$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<unsigned char,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@E$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec1@E$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec1<unsigned char,0>::operator--, COMDAT
; _this$ = ecx

; 178  : 		--this->x;

	dec	BYTE PTR [ecx]

; 179  : 		return *this;

	mov	eax, ecx

; 180  : 	}

	ret	0
??F?$tvec1@E$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<unsigned char,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@E$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec1@E$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec1<unsigned char,0>::operator++, COMDAT
; _this$ = ecx

; 171  : 		++this->x;

	inc	BYTE PTR [ecx]

; 172  : 		return *this;

	mov	eax, ecx

; 173  : 	}

	ret	0
??E?$tvec1@E$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<unsigned char,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec1@E$0A@@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec1@E$0A@@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec1<unsigned char,0>::operator=, COMDAT
; _this$ = ecx

; 33   : template struct tvec1<uint8, highp>;

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [eax]
	mov	BYTE PTR [ecx], al
	mov	eax, ecx
	pop	ebp
	ret	4
??4?$tvec1@E$0A@@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec1<unsigned char,0>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@E$0A@@glm@@QAE@E@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 1
??0?$tvec1@E$0A@@glm@@QAE@E@Z PROC			; glm::tvec1<unsigned char,0>::tvec1<unsigned char,0>, COMDAT
; _this$ = ecx

; 39   : 	{}

	push	ebp
	mov	ebp, esp
	mov	al, BYTE PTR _scalar$[ebp]
	mov	BYTE PTR [ecx], al
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec1@E$0A@@glm@@QAE@E@Z ENDP			; glm::tvec1<unsigned char,0>::tvec1<unsigned char,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@E$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec1@E$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec1<unsigned char,0>::tvec1<unsigned char,0>, COMDAT
; _this$ = ecx

; 34   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec1@E$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec1<unsigned char,0>::tvec1<unsigned char,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec1@E$0A@@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec1@E$0A@@glm@@QAE@ABU01@@Z PROC			; glm::tvec1<unsigned char,0>::tvec1<unsigned char,0>, COMDAT
; _this$ = ecx

; 33   : template struct tvec1<uint8, highp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec1@E$0A@@glm@@QAE@ABU01@@Z ENDP			; glm::tvec1<unsigned char,0>::tvec1<unsigned char,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@E$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec1@E$0A@@glm@@QAE@XZ PROC			; glm::tvec1<unsigned char,0>::tvec1<unsigned char,0>, COMDAT
; _this$ = ecx

; 14   : 		{}

	mov	BYTE PTR [ecx], 0
	mov	eax, ecx
	ret	0
??0?$tvec1@E$0A@@glm@@QAE@XZ ENDP			; glm::tvec1<unsigned char,0>::tvec1<unsigned char,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@E$0A@@glm@@QBEABEH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@E$0A@@glm@@QBEABEH@Z PROC			; glm::tvec1<unsigned char,0>::operator[], COMDAT
; _this$ = ecx

; 78   : 	{

	push	ebp
	mov	ebp, esp

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 81   : 	}

	pop	ebp
	ret	4
??A?$tvec1@E$0A@@glm@@QBEABEH@Z ENDP			; glm::tvec1<unsigned char,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@E$0A@@glm@@QAEAAEH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@E$0A@@glm@@QAEAAEH@Z PROC			; glm::tvec1<unsigned char,0>::operator[], COMDAT
; _this$ = ecx

; 71   : 	{

	push	ebp
	mov	ebp, esp

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 74   : 	}

	pop	ebp
	ret	4
??A?$tvec1@E$0A@@glm@@QAEAAEH@Z ENDP			; glm::tvec1<unsigned char,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@E$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@E$0A@@glm@@SAHXZ PROC			; glm::tvec1<unsigned char,0>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	xor	eax, eax
	inc	eax
	ret	0
?length@?$tvec1@E$0A@@glm@@SAHXZ ENDP			; glm::tvec1<unsigned char,0>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@N$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec1@N$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<double,1>::operator--, COMDAT
; _this$ = ecx

; 192  : 	{

	push	ebp
	mov	ebp, esp

; 193  : 		tvec1<T, P> Result(*this);
; 194  : 		--*this;

	movsd	xmm0, QWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	subsd	xmm0, QWORD PTR __real@3ff0000000000000
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	movsd	QWORD PTR [ecx], xmm0

; 195  : 		return Result;
; 196  : 	}

	pop	ebp
	ret	8
??F?$tvec1@N$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<double,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@N$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec1@N$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<double,1>::operator++, COMDAT
; _this$ = ecx

; 184  : 	{

	push	ebp
	mov	ebp, esp

; 185  : 		tvec1<T, P> Result(*this);
; 186  : 		++*this;

	movsd	xmm0, QWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	addsd	xmm0, QWORD PTR __real@3ff0000000000000
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	movsd	QWORD PTR [ecx], xmm0

; 187  : 		return Result;
; 188  : 	}

	pop	ebp
	ret	8
??E?$tvec1@N$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<double,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@N$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec1@N$00@glm@@QAEAAU01@XZ PROC			; glm::tvec1<double,1>::operator--, COMDAT
; _this$ = ecx

; 178  : 		--this->x;

	movsd	xmm0, QWORD PTR [ecx]

; 179  : 		return *this;

	mov	eax, ecx
	subsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR [ecx], xmm0

; 180  : 	}

	ret	0
??F?$tvec1@N$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<double,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@N$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec1@N$00@glm@@QAEAAU01@XZ PROC			; glm::tvec1<double,1>::operator++, COMDAT
; _this$ = ecx

; 171  : 		++this->x;

	movsd	xmm0, QWORD PTR [ecx]

; 172  : 		return *this;

	mov	eax, ecx
	addsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR [ecx], xmm0

; 173  : 	}

	ret	0
??E?$tvec1@N$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<double,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec1@N$00@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec1@N$00@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec1<double,1>::operator=, COMDAT
; _this$ = ecx

; 31   : template struct tvec1<float64, mediump>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??4?$tvec1@N$00@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec1<double,1>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@N$00@glm@@QAE@N@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 8
??0?$tvec1@N$00@glm@@QAE@N@Z PROC			; glm::tvec1<double,1>::tvec1<double,1>, COMDAT
; _this$ = ecx

; 39   : 	{}

	push	ebp
	mov	ebp, esp
	movsd	xmm0, QWORD PTR _scalar$[ebp]
	mov	eax, ecx
	movsd	QWORD PTR [ecx], xmm0
	pop	ebp
	ret	8
??0?$tvec1@N$00@glm@@QAE@N@Z ENDP			; glm::tvec1<double,1>::tvec1<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@N$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec1@N$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec1<double,1>::tvec1<double,1>, COMDAT
; _this$ = ecx

; 34   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec1@N$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec1<double,1>::tvec1<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec1@N$00@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec1@N$00@glm@@QAE@ABU01@@Z PROC			; glm::tvec1<double,1>::tvec1<double,1>, COMDAT
; _this$ = ecx

; 31   : template struct tvec1<float64, mediump>;

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ___that$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [eax]
	mov	eax, ecx
	movsd	QWORD PTR [ecx], xmm0
	pop	ebp
	ret	4
??0?$tvec1@N$00@glm@@QAE@ABU01@@Z ENDP			; glm::tvec1<double,1>::tvec1<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@N$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec1@N$00@glm@@QAE@XZ PROC			; glm::tvec1<double,1>::tvec1<double,1>, COMDAT
; _this$ = ecx

; 14   : 		{}

	xorps	xmm0, xmm0
	mov	eax, ecx
	movsd	QWORD PTR [ecx], xmm0
	ret	0
??0?$tvec1@N$00@glm@@QAE@XZ ENDP			; glm::tvec1<double,1>::tvec1<double,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@N$00@glm@@QBEABNH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@N$00@glm@@QBEABNH@Z PROC			; glm::tvec1<double,1>::operator[], COMDAT
; _this$ = ecx

; 78   : 	{

	push	ebp
	mov	ebp, esp

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 81   : 	}

	pop	ebp
	ret	4
??A?$tvec1@N$00@glm@@QBEABNH@Z ENDP			; glm::tvec1<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@N$00@glm@@QAEAANH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@N$00@glm@@QAEAANH@Z PROC			; glm::tvec1<double,1>::operator[], COMDAT
; _this$ = ecx

; 71   : 	{

	push	ebp
	mov	ebp, esp

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 74   : 	}

	pop	ebp
	ret	4
??A?$tvec1@N$00@glm@@QAEAANH@Z ENDP			; glm::tvec1<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@N$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@N$00@glm@@SAHXZ PROC			; glm::tvec1<double,1>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	xor	eax, eax
	inc	eax
	ret	0
?length@?$tvec1@N$00@glm@@SAHXZ ENDP			; glm::tvec1<double,1>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@M$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec1@M$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<float,1>::operator--, COMDAT
; _this$ = ecx

; 192  : 	{

	push	ebp
	mov	ebp, esp

; 193  : 		tvec1<T, P> Result(*this);
; 194  : 		--*this;

	movss	xmm0, DWORD PTR [ecx]
	subss	xmm0, DWORD PTR __real@3f800000
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	movss	DWORD PTR [ecx], xmm0

; 195  : 		return Result;
; 196  : 	}

	pop	ebp
	ret	8
??F?$tvec1@M$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<float,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@M$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec1@M$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<float,1>::operator++, COMDAT
; _this$ = ecx

; 184  : 	{

	push	ebp
	mov	ebp, esp

; 185  : 		tvec1<T, P> Result(*this);
; 186  : 		++*this;

	movss	xmm0, DWORD PTR [ecx]
	addss	xmm0, DWORD PTR __real@3f800000
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	movss	DWORD PTR [ecx], xmm0

; 187  : 		return Result;
; 188  : 	}

	pop	ebp
	ret	8
??E?$tvec1@M$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<float,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@M$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec1@M$00@glm@@QAEAAU01@XZ PROC			; glm::tvec1<float,1>::operator--, COMDAT
; _this$ = ecx

; 178  : 		--this->x;

	movss	xmm0, DWORD PTR [ecx]

; 179  : 		return *this;

	mov	eax, ecx
	subss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx], xmm0

; 180  : 	}

	ret	0
??F?$tvec1@M$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<float,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@M$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec1@M$00@glm@@QAEAAU01@XZ PROC			; glm::tvec1<float,1>::operator++, COMDAT
; _this$ = ecx

; 171  : 		++this->x;

	movss	xmm0, DWORD PTR [ecx]

; 172  : 		return *this;

	mov	eax, ecx
	addss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx], xmm0

; 173  : 	}

	ret	0
??E?$tvec1@M$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<float,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec1@M$00@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec1@M$00@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec1<float,1>::operator=, COMDAT
; _this$ = ecx

; 30   : template struct tvec1<float32, mediump>;

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??4?$tvec1@M$00@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec1<float,1>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@M$00@glm@@QAE@M@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 4
??0?$tvec1@M$00@glm@@QAE@M@Z PROC			; glm::tvec1<float,1>::tvec1<float,1>, COMDAT
; _this$ = ecx

; 39   : 	{}

	push	ebp
	mov	ebp, esp
	movss	xmm0, DWORD PTR _scalar$[ebp]
	mov	eax, ecx
	movss	DWORD PTR [ecx], xmm0
	pop	ebp
	ret	4
??0?$tvec1@M$00@glm@@QAE@M@Z ENDP			; glm::tvec1<float,1>::tvec1<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@M$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec1@M$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec1<float,1>::tvec1<float,1>, COMDAT
; _this$ = ecx

; 34   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec1@M$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec1<float,1>::tvec1<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec1@M$00@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec1@M$00@glm@@QAE@ABU01@@Z PROC			; glm::tvec1<float,1>::tvec1<float,1>, COMDAT
; _this$ = ecx

; 30   : template struct tvec1<float32, mediump>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec1@M$00@glm@@QAE@ABU01@@Z ENDP			; glm::tvec1<float,1>::tvec1<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@M$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec1@M$00@glm@@QAE@XZ PROC			; glm::tvec1<float,1>::tvec1<float,1>, COMDAT
; _this$ = ecx

; 14   : 		{}

	and	DWORD PTR [ecx], 0
	mov	eax, ecx
	ret	0
??0?$tvec1@M$00@glm@@QAE@XZ ENDP			; glm::tvec1<float,1>::tvec1<float,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@M$00@glm@@QBEABMH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@M$00@glm@@QBEABMH@Z PROC			; glm::tvec1<float,1>::operator[], COMDAT
; _this$ = ecx

; 78   : 	{

	push	ebp
	mov	ebp, esp

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 81   : 	}

	pop	ebp
	ret	4
??A?$tvec1@M$00@glm@@QBEABMH@Z ENDP			; glm::tvec1<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@M$00@glm@@QAEAAMH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@M$00@glm@@QAEAAMH@Z PROC			; glm::tvec1<float,1>::operator[], COMDAT
; _this$ = ecx

; 71   : 	{

	push	ebp
	mov	ebp, esp

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 74   : 	}

	pop	ebp
	ret	4
??A?$tvec1@M$00@glm@@QAEAAMH@Z ENDP			; glm::tvec1<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@M$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@M$00@glm@@SAHXZ PROC			; glm::tvec1<float,1>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	xor	eax, eax
	inc	eax
	ret	0
?length@?$tvec1@M$00@glm@@SAHXZ ENDP			; glm::tvec1<float,1>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@_J$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec1@_J$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<__int64,1>::operator--, COMDAT
; _this$ = ecx

; 192  : 	{

	push	ebp
	mov	ebp, esp

; 193  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]

; 194  : 		--*this;

	add	DWORD PTR [ecx], -1
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	adc	DWORD PTR [ecx+4], -1
	mov	DWORD PTR [eax+4], edx

; 195  : 		return Result;
; 196  : 	}

	pop	ebp
	ret	8
??F?$tvec1@_J$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<__int64,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@_J$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec1@_J$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<__int64,1>::operator++, COMDAT
; _this$ = ecx

; 184  : 	{

	push	ebp
	mov	ebp, esp

; 185  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]

; 186  : 		++*this;

	add	DWORD PTR [ecx], 1
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	adc	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [eax+4], edx

; 187  : 		return Result;
; 188  : 	}

	pop	ebp
	ret	8
??E?$tvec1@_J$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<__int64,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@_J$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec1@_J$00@glm@@QAEAAU01@XZ PROC			; glm::tvec1<__int64,1>::operator--, COMDAT
; _this$ = ecx

; 178  : 		--this->x;

	add	DWORD PTR [ecx], -1

; 179  : 		return *this;

	mov	eax, ecx
	adc	DWORD PTR [ecx+4], -1

; 180  : 	}

	ret	0
??F?$tvec1@_J$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<__int64,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@_J$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec1@_J$00@glm@@QAEAAU01@XZ PROC			; glm::tvec1<__int64,1>::operator++, COMDAT
; _this$ = ecx

; 171  : 		++this->x;

	add	DWORD PTR [ecx], 1

; 172  : 		return *this;

	mov	eax, ecx
	adc	DWORD PTR [ecx+4], 0

; 173  : 	}

	ret	0
??E?$tvec1@_J$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<__int64,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec1@_J$00@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec1@_J$00@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec1<__int64,1>::operator=, COMDAT
; _this$ = ecx

; 29   : template struct tvec1<int64, mediump>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??4?$tvec1@_J$00@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec1<__int64,1>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@_J$00@glm@@QAE@_J@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 8
??0?$tvec1@_J$00@glm@@QAE@_J@Z PROC			; glm::tvec1<__int64,1>::tvec1<__int64,1>, COMDAT
; _this$ = ecx

; 39   : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _scalar$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	pop	ebp
	ret	8
??0?$tvec1@_J$00@glm@@QAE@_J@Z ENDP			; glm::tvec1<__int64,1>::tvec1<__int64,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@_J$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec1@_J$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec1<__int64,1>::tvec1<__int64,1>, COMDAT
; _this$ = ecx

; 34   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec1@_J$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec1<__int64,1>::tvec1<__int64,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec1@_J$00@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec1@_J$00@glm@@QAE@ABU01@@Z PROC			; glm::tvec1<__int64,1>::tvec1<__int64,1>, COMDAT
; _this$ = ecx

; 29   : template struct tvec1<int64, mediump>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec1@_J$00@glm@@QAE@ABU01@@Z ENDP			; glm::tvec1<__int64,1>::tvec1<__int64,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@_J$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec1@_J$00@glm@@QAE@XZ PROC			; glm::tvec1<__int64,1>::tvec1<__int64,1>, COMDAT
; _this$ = ecx

; 14   : 		{}

	and	DWORD PTR [ecx], 0
	mov	eax, ecx
	and	DWORD PTR [ecx+4], 0
	ret	0
??0?$tvec1@_J$00@glm@@QAE@XZ ENDP			; glm::tvec1<__int64,1>::tvec1<__int64,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@_J$00@glm@@QBEAB_JH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@_J$00@glm@@QBEAB_JH@Z PROC			; glm::tvec1<__int64,1>::operator[], COMDAT
; _this$ = ecx

; 78   : 	{

	push	ebp
	mov	ebp, esp

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 81   : 	}

	pop	ebp
	ret	4
??A?$tvec1@_J$00@glm@@QBEAB_JH@Z ENDP			; glm::tvec1<__int64,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@_J$00@glm@@QAEAA_JH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@_J$00@glm@@QAEAA_JH@Z PROC			; glm::tvec1<__int64,1>::operator[], COMDAT
; _this$ = ecx

; 71   : 	{

	push	ebp
	mov	ebp, esp

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 74   : 	}

	pop	ebp
	ret	4
??A?$tvec1@_J$00@glm@@QAEAA_JH@Z ENDP			; glm::tvec1<__int64,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@_J$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@_J$00@glm@@SAHXZ PROC			; glm::tvec1<__int64,1>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	xor	eax, eax
	inc	eax
	ret	0
?length@?$tvec1@_J$00@glm@@SAHXZ ENDP			; glm::tvec1<__int64,1>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@H$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec1@H$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<int,1>::operator--, COMDAT
; _this$ = ecx

; 192  : 	{

	push	ebp
	mov	ebp, esp

; 193  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 194  : 		--*this;

	dec	edx
	mov	DWORD PTR [ecx], edx

; 195  : 		return Result;
; 196  : 	}

	pop	ebp
	ret	8
??F?$tvec1@H$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<int,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@H$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec1@H$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<int,1>::operator++, COMDAT
; _this$ = ecx

; 184  : 	{

	push	ebp
	mov	ebp, esp

; 185  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 186  : 		++*this;

	inc	edx
	mov	DWORD PTR [ecx], edx

; 187  : 		return Result;
; 188  : 	}

	pop	ebp
	ret	8
??E?$tvec1@H$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<int,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@H$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec1@H$00@glm@@QAEAAU01@XZ PROC			; glm::tvec1<int,1>::operator--, COMDAT
; _this$ = ecx

; 178  : 		--this->x;

	dec	DWORD PTR [ecx]

; 179  : 		return *this;

	mov	eax, ecx

; 180  : 	}

	ret	0
??F?$tvec1@H$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<int,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@H$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec1@H$00@glm@@QAEAAU01@XZ PROC			; glm::tvec1<int,1>::operator++, COMDAT
; _this$ = ecx

; 171  : 		++this->x;

	inc	DWORD PTR [ecx]

; 172  : 		return *this;

	mov	eax, ecx

; 173  : 	}

	ret	0
??E?$tvec1@H$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<int,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec1@H$00@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec1@H$00@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec1<int,1>::operator=, COMDAT
; _this$ = ecx

; 28   : template struct tvec1<int32, mediump>;

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??4?$tvec1@H$00@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec1<int,1>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@H$00@glm@@QAE@H@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 4
??0?$tvec1@H$00@glm@@QAE@H@Z PROC			; glm::tvec1<int,1>::tvec1<int,1>, COMDAT
; _this$ = ecx

; 39   : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec1@H$00@glm@@QAE@H@Z ENDP			; glm::tvec1<int,1>::tvec1<int,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@H$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec1@H$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec1<int,1>::tvec1<int,1>, COMDAT
; _this$ = ecx

; 34   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec1@H$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec1<int,1>::tvec1<int,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec1@H$00@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec1@H$00@glm@@QAE@ABU01@@Z PROC			; glm::tvec1<int,1>::tvec1<int,1>, COMDAT
; _this$ = ecx

; 28   : template struct tvec1<int32, mediump>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec1@H$00@glm@@QAE@ABU01@@Z ENDP			; glm::tvec1<int,1>::tvec1<int,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@H$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec1@H$00@glm@@QAE@XZ PROC			; glm::tvec1<int,1>::tvec1<int,1>, COMDAT
; _this$ = ecx

; 14   : 		{}

	and	DWORD PTR [ecx], 0
	mov	eax, ecx
	ret	0
??0?$tvec1@H$00@glm@@QAE@XZ ENDP			; glm::tvec1<int,1>::tvec1<int,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@H$00@glm@@QBEABHH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@H$00@glm@@QBEABHH@Z PROC			; glm::tvec1<int,1>::operator[], COMDAT
; _this$ = ecx

; 78   : 	{

	push	ebp
	mov	ebp, esp

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 81   : 	}

	pop	ebp
	ret	4
??A?$tvec1@H$00@glm@@QBEABHH@Z ENDP			; glm::tvec1<int,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@H$00@glm@@QAEAAHH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@H$00@glm@@QAEAAHH@Z PROC			; glm::tvec1<int,1>::operator[], COMDAT
; _this$ = ecx

; 71   : 	{

	push	ebp
	mov	ebp, esp

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 74   : 	}

	pop	ebp
	ret	4
??A?$tvec1@H$00@glm@@QAEAAHH@Z ENDP			; glm::tvec1<int,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@H$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@H$00@glm@@SAHXZ PROC			; glm::tvec1<int,1>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	xor	eax, eax
	inc	eax
	ret	0
?length@?$tvec1@H$00@glm@@SAHXZ ENDP			; glm::tvec1<int,1>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@F$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec1@F$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<short,1>::operator--, COMDAT
; _this$ = ecx

; 192  : 	{

	push	ebp
	mov	ebp, esp

; 193  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movzx	edx, WORD PTR [ecx]
	mov	WORD PTR [eax], dx

; 194  : 		--*this;

	dec	edx
	mov	WORD PTR [ecx], dx

; 195  : 		return Result;
; 196  : 	}

	pop	ebp
	ret	8
??F?$tvec1@F$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<short,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@F$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec1@F$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<short,1>::operator++, COMDAT
; _this$ = ecx

; 184  : 	{

	push	ebp
	mov	ebp, esp

; 185  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movzx	edx, WORD PTR [ecx]
	mov	WORD PTR [eax], dx

; 186  : 		++*this;

	inc	edx
	mov	WORD PTR [ecx], dx

; 187  : 		return Result;
; 188  : 	}

	pop	ebp
	ret	8
??E?$tvec1@F$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<short,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@F$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec1@F$00@glm@@QAEAAU01@XZ PROC			; glm::tvec1<short,1>::operator--, COMDAT
; _this$ = ecx

; 178  : 		--this->x;

	dec	WORD PTR [ecx]

; 179  : 		return *this;

	mov	eax, ecx

; 180  : 	}

	ret	0
??F?$tvec1@F$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<short,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@F$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec1@F$00@glm@@QAEAAU01@XZ PROC			; glm::tvec1<short,1>::operator++, COMDAT
; _this$ = ecx

; 171  : 		++this->x;

	inc	WORD PTR [ecx]

; 172  : 		return *this;

	mov	eax, ecx

; 173  : 	}

	ret	0
??E?$tvec1@F$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<short,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec1@F$00@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec1@F$00@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec1<short,1>::operator=, COMDAT
; _this$ = ecx

; 27   : template struct tvec1<int16, mediump>;

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ax, WORD PTR [eax]
	mov	WORD PTR [ecx], ax
	mov	eax, ecx
	pop	ebp
	ret	4
??4?$tvec1@F$00@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec1<short,1>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@F$00@glm@@QAE@F@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 2
??0?$tvec1@F$00@glm@@QAE@F@Z PROC			; glm::tvec1<short,1>::tvec1<short,1>, COMDAT
; _this$ = ecx

; 39   : 	{}

	push	ebp
	mov	ebp, esp
	mov	ax, WORD PTR _scalar$[ebp]
	mov	WORD PTR [ecx], ax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec1@F$00@glm@@QAE@F@Z ENDP			; glm::tvec1<short,1>::tvec1<short,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@F$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec1@F$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec1<short,1>::tvec1<short,1>, COMDAT
; _this$ = ecx

; 34   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec1@F$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec1<short,1>::tvec1<short,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec1@F$00@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec1@F$00@glm@@QAE@ABU01@@Z PROC			; glm::tvec1<short,1>::tvec1<short,1>, COMDAT
; _this$ = ecx

; 27   : template struct tvec1<int16, mediump>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec1@F$00@glm@@QAE@ABU01@@Z ENDP			; glm::tvec1<short,1>::tvec1<short,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@F$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec1@F$00@glm@@QAE@XZ PROC			; glm::tvec1<short,1>::tvec1<short,1>, COMDAT
; _this$ = ecx

; 14   : 		{}

	xor	eax, eax
	mov	WORD PTR [ecx], ax
	mov	eax, ecx
	ret	0
??0?$tvec1@F$00@glm@@QAE@XZ ENDP			; glm::tvec1<short,1>::tvec1<short,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@F$00@glm@@QBEABFH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@F$00@glm@@QBEABFH@Z PROC			; glm::tvec1<short,1>::operator[], COMDAT
; _this$ = ecx

; 78   : 	{

	push	ebp
	mov	ebp, esp

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 81   : 	}

	pop	ebp
	ret	4
??A?$tvec1@F$00@glm@@QBEABFH@Z ENDP			; glm::tvec1<short,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@F$00@glm@@QAEAAFH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@F$00@glm@@QAEAAFH@Z PROC			; glm::tvec1<short,1>::operator[], COMDAT
; _this$ = ecx

; 71   : 	{

	push	ebp
	mov	ebp, esp

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 74   : 	}

	pop	ebp
	ret	4
??A?$tvec1@F$00@glm@@QAEAAFH@Z ENDP			; glm::tvec1<short,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@F$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@F$00@glm@@SAHXZ PROC			; glm::tvec1<short,1>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	xor	eax, eax
	inc	eax
	ret	0
?length@?$tvec1@F$00@glm@@SAHXZ ENDP			; glm::tvec1<short,1>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@C$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec1@C$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<signed char,1>::operator--, COMDAT
; _this$ = ecx

; 192  : 	{

	push	ebp
	mov	ebp, esp

; 193  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 194  : 		--*this;

	dec	dl
	mov	BYTE PTR [ecx], dl

; 195  : 		return Result;
; 196  : 	}

	pop	ebp
	ret	8
??F?$tvec1@C$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<signed char,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@C$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec1@C$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<signed char,1>::operator++, COMDAT
; _this$ = ecx

; 184  : 	{

	push	ebp
	mov	ebp, esp

; 185  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 186  : 		++*this;

	inc	dl
	mov	BYTE PTR [ecx], dl

; 187  : 		return Result;
; 188  : 	}

	pop	ebp
	ret	8
??E?$tvec1@C$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<signed char,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@C$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec1@C$00@glm@@QAEAAU01@XZ PROC			; glm::tvec1<signed char,1>::operator--, COMDAT
; _this$ = ecx

; 178  : 		--this->x;

	dec	BYTE PTR [ecx]

; 179  : 		return *this;

	mov	eax, ecx

; 180  : 	}

	ret	0
??F?$tvec1@C$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<signed char,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@C$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec1@C$00@glm@@QAEAAU01@XZ PROC			; glm::tvec1<signed char,1>::operator++, COMDAT
; _this$ = ecx

; 171  : 		++this->x;

	inc	BYTE PTR [ecx]

; 172  : 		return *this;

	mov	eax, ecx

; 173  : 	}

	ret	0
??E?$tvec1@C$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<signed char,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec1@C$00@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec1@C$00@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec1<signed char,1>::operator=, COMDAT
; _this$ = ecx

; 26   : template struct tvec1<int8, mediump>;

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [eax]
	mov	BYTE PTR [ecx], al
	mov	eax, ecx
	pop	ebp
	ret	4
??4?$tvec1@C$00@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec1<signed char,1>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@C$00@glm@@QAE@C@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 1
??0?$tvec1@C$00@glm@@QAE@C@Z PROC			; glm::tvec1<signed char,1>::tvec1<signed char,1>, COMDAT
; _this$ = ecx

; 39   : 	{}

	push	ebp
	mov	ebp, esp
	mov	al, BYTE PTR _scalar$[ebp]
	mov	BYTE PTR [ecx], al
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec1@C$00@glm@@QAE@C@Z ENDP			; glm::tvec1<signed char,1>::tvec1<signed char,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@C$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec1@C$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec1<signed char,1>::tvec1<signed char,1>, COMDAT
; _this$ = ecx

; 34   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec1@C$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec1<signed char,1>::tvec1<signed char,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec1@C$00@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec1@C$00@glm@@QAE@ABU01@@Z PROC			; glm::tvec1<signed char,1>::tvec1<signed char,1>, COMDAT
; _this$ = ecx

; 26   : template struct tvec1<int8, mediump>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec1@C$00@glm@@QAE@ABU01@@Z ENDP			; glm::tvec1<signed char,1>::tvec1<signed char,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@C$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec1@C$00@glm@@QAE@XZ PROC			; glm::tvec1<signed char,1>::tvec1<signed char,1>, COMDAT
; _this$ = ecx

; 14   : 		{}

	mov	BYTE PTR [ecx], 0
	mov	eax, ecx
	ret	0
??0?$tvec1@C$00@glm@@QAE@XZ ENDP			; glm::tvec1<signed char,1>::tvec1<signed char,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@C$00@glm@@QBEABCH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@C$00@glm@@QBEABCH@Z PROC			; glm::tvec1<signed char,1>::operator[], COMDAT
; _this$ = ecx

; 78   : 	{

	push	ebp
	mov	ebp, esp

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 81   : 	}

	pop	ebp
	ret	4
??A?$tvec1@C$00@glm@@QBEABCH@Z ENDP			; glm::tvec1<signed char,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@C$00@glm@@QAEAACH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@C$00@glm@@QAEAACH@Z PROC			; glm::tvec1<signed char,1>::operator[], COMDAT
; _this$ = ecx

; 71   : 	{

	push	ebp
	mov	ebp, esp

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 74   : 	}

	pop	ebp
	ret	4
??A?$tvec1@C$00@glm@@QAEAACH@Z ENDP			; glm::tvec1<signed char,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@C$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@C$00@glm@@SAHXZ PROC			; glm::tvec1<signed char,1>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	xor	eax, eax
	inc	eax
	ret	0
?length@?$tvec1@C$00@glm@@SAHXZ ENDP			; glm::tvec1<signed char,1>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@_K$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec1@_K$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<unsigned __int64,1>::operator--, COMDAT
; _this$ = ecx

; 192  : 	{

	push	ebp
	mov	ebp, esp

; 193  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]

; 194  : 		--*this;

	add	DWORD PTR [ecx], -1
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	adc	DWORD PTR [ecx+4], -1
	mov	DWORD PTR [eax+4], edx

; 195  : 		return Result;
; 196  : 	}

	pop	ebp
	ret	8
??F?$tvec1@_K$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<unsigned __int64,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@_K$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec1@_K$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<unsigned __int64,1>::operator++, COMDAT
; _this$ = ecx

; 184  : 	{

	push	ebp
	mov	ebp, esp

; 185  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]

; 186  : 		++*this;

	add	DWORD PTR [ecx], 1
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	adc	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [eax+4], edx

; 187  : 		return Result;
; 188  : 	}

	pop	ebp
	ret	8
??E?$tvec1@_K$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<unsigned __int64,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@_K$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec1@_K$00@glm@@QAEAAU01@XZ PROC			; glm::tvec1<unsigned __int64,1>::operator--, COMDAT
; _this$ = ecx

; 178  : 		--this->x;

	add	DWORD PTR [ecx], -1

; 179  : 		return *this;

	mov	eax, ecx
	adc	DWORD PTR [ecx+4], -1

; 180  : 	}

	ret	0
??F?$tvec1@_K$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<unsigned __int64,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@_K$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec1@_K$00@glm@@QAEAAU01@XZ PROC			; glm::tvec1<unsigned __int64,1>::operator++, COMDAT
; _this$ = ecx

; 171  : 		++this->x;

	add	DWORD PTR [ecx], 1

; 172  : 		return *this;

	mov	eax, ecx
	adc	DWORD PTR [ecx+4], 0

; 173  : 	}

	ret	0
??E?$tvec1@_K$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<unsigned __int64,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec1@_K$00@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec1@_K$00@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec1<unsigned __int64,1>::operator=, COMDAT
; _this$ = ecx

; 25   : template struct tvec1<uint64, mediump>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??4?$tvec1@_K$00@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec1<unsigned __int64,1>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@_K$00@glm@@QAE@_K@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 8
??0?$tvec1@_K$00@glm@@QAE@_K@Z PROC			; glm::tvec1<unsigned __int64,1>::tvec1<unsigned __int64,1>, COMDAT
; _this$ = ecx

; 39   : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _scalar$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	pop	ebp
	ret	8
??0?$tvec1@_K$00@glm@@QAE@_K@Z ENDP			; glm::tvec1<unsigned __int64,1>::tvec1<unsigned __int64,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@_K$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec1@_K$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec1<unsigned __int64,1>::tvec1<unsigned __int64,1>, COMDAT
; _this$ = ecx

; 34   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec1@_K$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec1<unsigned __int64,1>::tvec1<unsigned __int64,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec1@_K$00@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec1@_K$00@glm@@QAE@ABU01@@Z PROC			; glm::tvec1<unsigned __int64,1>::tvec1<unsigned __int64,1>, COMDAT
; _this$ = ecx

; 25   : template struct tvec1<uint64, mediump>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec1@_K$00@glm@@QAE@ABU01@@Z ENDP			; glm::tvec1<unsigned __int64,1>::tvec1<unsigned __int64,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@_K$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec1@_K$00@glm@@QAE@XZ PROC			; glm::tvec1<unsigned __int64,1>::tvec1<unsigned __int64,1>, COMDAT
; _this$ = ecx

; 14   : 		{}

	and	DWORD PTR [ecx], 0
	mov	eax, ecx
	and	DWORD PTR [ecx+4], 0
	ret	0
??0?$tvec1@_K$00@glm@@QAE@XZ ENDP			; glm::tvec1<unsigned __int64,1>::tvec1<unsigned __int64,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@_K$00@glm@@QBEAB_KH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@_K$00@glm@@QBEAB_KH@Z PROC			; glm::tvec1<unsigned __int64,1>::operator[], COMDAT
; _this$ = ecx

; 78   : 	{

	push	ebp
	mov	ebp, esp

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 81   : 	}

	pop	ebp
	ret	4
??A?$tvec1@_K$00@glm@@QBEAB_KH@Z ENDP			; glm::tvec1<unsigned __int64,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@_K$00@glm@@QAEAA_KH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@_K$00@glm@@QAEAA_KH@Z PROC			; glm::tvec1<unsigned __int64,1>::operator[], COMDAT
; _this$ = ecx

; 71   : 	{

	push	ebp
	mov	ebp, esp

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 74   : 	}

	pop	ebp
	ret	4
??A?$tvec1@_K$00@glm@@QAEAA_KH@Z ENDP			; glm::tvec1<unsigned __int64,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@_K$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@_K$00@glm@@SAHXZ PROC			; glm::tvec1<unsigned __int64,1>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	xor	eax, eax
	inc	eax
	ret	0
?length@?$tvec1@_K$00@glm@@SAHXZ ENDP			; glm::tvec1<unsigned __int64,1>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@I$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec1@I$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<unsigned int,1>::operator--, COMDAT
; _this$ = ecx

; 192  : 	{

	push	ebp
	mov	ebp, esp

; 193  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 194  : 		--*this;

	dec	edx
	mov	DWORD PTR [ecx], edx

; 195  : 		return Result;
; 196  : 	}

	pop	ebp
	ret	8
??F?$tvec1@I$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<unsigned int,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@I$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec1@I$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<unsigned int,1>::operator++, COMDAT
; _this$ = ecx

; 184  : 	{

	push	ebp
	mov	ebp, esp

; 185  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 186  : 		++*this;

	inc	edx
	mov	DWORD PTR [ecx], edx

; 187  : 		return Result;
; 188  : 	}

	pop	ebp
	ret	8
??E?$tvec1@I$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<unsigned int,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@I$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec1@I$00@glm@@QAEAAU01@XZ PROC			; glm::tvec1<unsigned int,1>::operator--, COMDAT
; _this$ = ecx

; 178  : 		--this->x;

	dec	DWORD PTR [ecx]

; 179  : 		return *this;

	mov	eax, ecx

; 180  : 	}

	ret	0
??F?$tvec1@I$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<unsigned int,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@I$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec1@I$00@glm@@QAEAAU01@XZ PROC			; glm::tvec1<unsigned int,1>::operator++, COMDAT
; _this$ = ecx

; 171  : 		++this->x;

	inc	DWORD PTR [ecx]

; 172  : 		return *this;

	mov	eax, ecx

; 173  : 	}

	ret	0
??E?$tvec1@I$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<unsigned int,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec1@I$00@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec1@I$00@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec1<unsigned int,1>::operator=, COMDAT
; _this$ = ecx

; 24   : template struct tvec1<uint32, mediump>;

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??4?$tvec1@I$00@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec1<unsigned int,1>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@I$00@glm@@QAE@I@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 4
??0?$tvec1@I$00@glm@@QAE@I@Z PROC			; glm::tvec1<unsigned int,1>::tvec1<unsigned int,1>, COMDAT
; _this$ = ecx

; 39   : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec1@I$00@glm@@QAE@I@Z ENDP			; glm::tvec1<unsigned int,1>::tvec1<unsigned int,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@I$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec1@I$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec1<unsigned int,1>::tvec1<unsigned int,1>, COMDAT
; _this$ = ecx

; 34   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec1@I$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec1<unsigned int,1>::tvec1<unsigned int,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec1@I$00@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec1@I$00@glm@@QAE@ABU01@@Z PROC			; glm::tvec1<unsigned int,1>::tvec1<unsigned int,1>, COMDAT
; _this$ = ecx

; 24   : template struct tvec1<uint32, mediump>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec1@I$00@glm@@QAE@ABU01@@Z ENDP			; glm::tvec1<unsigned int,1>::tvec1<unsigned int,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@I$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec1@I$00@glm@@QAE@XZ PROC			; glm::tvec1<unsigned int,1>::tvec1<unsigned int,1>, COMDAT
; _this$ = ecx

; 14   : 		{}

	and	DWORD PTR [ecx], 0
	mov	eax, ecx
	ret	0
??0?$tvec1@I$00@glm@@QAE@XZ ENDP			; glm::tvec1<unsigned int,1>::tvec1<unsigned int,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@I$00@glm@@QBEABIH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@I$00@glm@@QBEABIH@Z PROC			; glm::tvec1<unsigned int,1>::operator[], COMDAT
; _this$ = ecx

; 78   : 	{

	push	ebp
	mov	ebp, esp

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 81   : 	}

	pop	ebp
	ret	4
??A?$tvec1@I$00@glm@@QBEABIH@Z ENDP			; glm::tvec1<unsigned int,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@I$00@glm@@QAEAAIH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@I$00@glm@@QAEAAIH@Z PROC			; glm::tvec1<unsigned int,1>::operator[], COMDAT
; _this$ = ecx

; 71   : 	{

	push	ebp
	mov	ebp, esp

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 74   : 	}

	pop	ebp
	ret	4
??A?$tvec1@I$00@glm@@QAEAAIH@Z ENDP			; glm::tvec1<unsigned int,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@I$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@I$00@glm@@SAHXZ PROC			; glm::tvec1<unsigned int,1>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	xor	eax, eax
	inc	eax
	ret	0
?length@?$tvec1@I$00@glm@@SAHXZ ENDP			; glm::tvec1<unsigned int,1>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@G$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec1@G$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<unsigned short,1>::operator--, COMDAT
; _this$ = ecx

; 192  : 	{

	push	ebp
	mov	ebp, esp

; 193  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movzx	edx, WORD PTR [ecx]
	mov	WORD PTR [eax], dx

; 194  : 		--*this;

	dec	edx
	mov	WORD PTR [ecx], dx

; 195  : 		return Result;
; 196  : 	}

	pop	ebp
	ret	8
??F?$tvec1@G$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<unsigned short,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@G$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec1@G$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<unsigned short,1>::operator++, COMDAT
; _this$ = ecx

; 184  : 	{

	push	ebp
	mov	ebp, esp

; 185  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movzx	edx, WORD PTR [ecx]
	mov	WORD PTR [eax], dx

; 186  : 		++*this;

	inc	edx
	mov	WORD PTR [ecx], dx

; 187  : 		return Result;
; 188  : 	}

	pop	ebp
	ret	8
??E?$tvec1@G$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<unsigned short,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@G$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec1@G$00@glm@@QAEAAU01@XZ PROC			; glm::tvec1<unsigned short,1>::operator--, COMDAT
; _this$ = ecx

; 178  : 		--this->x;

	mov	eax, 65535				; 0000ffffH
	add	WORD PTR [ecx], ax

; 179  : 		return *this;

	mov	eax, ecx

; 180  : 	}

	ret	0
??F?$tvec1@G$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<unsigned short,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@G$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec1@G$00@glm@@QAEAAU01@XZ PROC			; glm::tvec1<unsigned short,1>::operator++, COMDAT
; _this$ = ecx

; 171  : 		++this->x;

	inc	WORD PTR [ecx]

; 172  : 		return *this;

	mov	eax, ecx

; 173  : 	}

	ret	0
??E?$tvec1@G$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<unsigned short,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec1@G$00@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec1@G$00@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec1<unsigned short,1>::operator=, COMDAT
; _this$ = ecx

; 23   : template struct tvec1<uint16, mediump>;

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ax, WORD PTR [eax]
	mov	WORD PTR [ecx], ax
	mov	eax, ecx
	pop	ebp
	ret	4
??4?$tvec1@G$00@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec1<unsigned short,1>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@G$00@glm@@QAE@G@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 2
??0?$tvec1@G$00@glm@@QAE@G@Z PROC			; glm::tvec1<unsigned short,1>::tvec1<unsigned short,1>, COMDAT
; _this$ = ecx

; 39   : 	{}

	push	ebp
	mov	ebp, esp
	mov	ax, WORD PTR _scalar$[ebp]
	mov	WORD PTR [ecx], ax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec1@G$00@glm@@QAE@G@Z ENDP			; glm::tvec1<unsigned short,1>::tvec1<unsigned short,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@G$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec1@G$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec1<unsigned short,1>::tvec1<unsigned short,1>, COMDAT
; _this$ = ecx

; 34   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec1@G$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec1<unsigned short,1>::tvec1<unsigned short,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec1@G$00@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec1@G$00@glm@@QAE@ABU01@@Z PROC			; glm::tvec1<unsigned short,1>::tvec1<unsigned short,1>, COMDAT
; _this$ = ecx

; 23   : template struct tvec1<uint16, mediump>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec1@G$00@glm@@QAE@ABU01@@Z ENDP			; glm::tvec1<unsigned short,1>::tvec1<unsigned short,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@G$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec1@G$00@glm@@QAE@XZ PROC			; glm::tvec1<unsigned short,1>::tvec1<unsigned short,1>, COMDAT
; _this$ = ecx

; 14   : 		{}

	xor	eax, eax
	mov	WORD PTR [ecx], ax
	mov	eax, ecx
	ret	0
??0?$tvec1@G$00@glm@@QAE@XZ ENDP			; glm::tvec1<unsigned short,1>::tvec1<unsigned short,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@G$00@glm@@QBEABGH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@G$00@glm@@QBEABGH@Z PROC			; glm::tvec1<unsigned short,1>::operator[], COMDAT
; _this$ = ecx

; 78   : 	{

	push	ebp
	mov	ebp, esp

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 81   : 	}

	pop	ebp
	ret	4
??A?$tvec1@G$00@glm@@QBEABGH@Z ENDP			; glm::tvec1<unsigned short,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@G$00@glm@@QAEAAGH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@G$00@glm@@QAEAAGH@Z PROC			; glm::tvec1<unsigned short,1>::operator[], COMDAT
; _this$ = ecx

; 71   : 	{

	push	ebp
	mov	ebp, esp

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 74   : 	}

	pop	ebp
	ret	4
??A?$tvec1@G$00@glm@@QAEAAGH@Z ENDP			; glm::tvec1<unsigned short,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@G$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@G$00@glm@@SAHXZ PROC			; glm::tvec1<unsigned short,1>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	xor	eax, eax
	inc	eax
	ret	0
?length@?$tvec1@G$00@glm@@SAHXZ ENDP			; glm::tvec1<unsigned short,1>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@E$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec1@E$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<unsigned char,1>::operator--, COMDAT
; _this$ = ecx

; 192  : 	{

	push	ebp
	mov	ebp, esp

; 193  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 194  : 		--*this;

	dec	dl
	mov	BYTE PTR [ecx], dl

; 195  : 		return Result;
; 196  : 	}

	pop	ebp
	ret	8
??F?$tvec1@E$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<unsigned char,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@E$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec1@E$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<unsigned char,1>::operator++, COMDAT
; _this$ = ecx

; 184  : 	{

	push	ebp
	mov	ebp, esp

; 185  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 186  : 		++*this;

	inc	dl
	mov	BYTE PTR [ecx], dl

; 187  : 		return Result;
; 188  : 	}

	pop	ebp
	ret	8
??E?$tvec1@E$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<unsigned char,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@E$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec1@E$00@glm@@QAEAAU01@XZ PROC			; glm::tvec1<unsigned char,1>::operator--, COMDAT
; _this$ = ecx

; 178  : 		--this->x;

	dec	BYTE PTR [ecx]

; 179  : 		return *this;

	mov	eax, ecx

; 180  : 	}

	ret	0
??F?$tvec1@E$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<unsigned char,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@E$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec1@E$00@glm@@QAEAAU01@XZ PROC			; glm::tvec1<unsigned char,1>::operator++, COMDAT
; _this$ = ecx

; 171  : 		++this->x;

	inc	BYTE PTR [ecx]

; 172  : 		return *this;

	mov	eax, ecx

; 173  : 	}

	ret	0
??E?$tvec1@E$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<unsigned char,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec1@E$00@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec1@E$00@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec1<unsigned char,1>::operator=, COMDAT
; _this$ = ecx

; 22   : template struct tvec1<uint8, mediump>;

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [eax]
	mov	BYTE PTR [ecx], al
	mov	eax, ecx
	pop	ebp
	ret	4
??4?$tvec1@E$00@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec1<unsigned char,1>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@E$00@glm@@QAE@E@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 1
??0?$tvec1@E$00@glm@@QAE@E@Z PROC			; glm::tvec1<unsigned char,1>::tvec1<unsigned char,1>, COMDAT
; _this$ = ecx

; 39   : 	{}

	push	ebp
	mov	ebp, esp
	mov	al, BYTE PTR _scalar$[ebp]
	mov	BYTE PTR [ecx], al
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec1@E$00@glm@@QAE@E@Z ENDP			; glm::tvec1<unsigned char,1>::tvec1<unsigned char,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@E$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec1@E$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec1<unsigned char,1>::tvec1<unsigned char,1>, COMDAT
; _this$ = ecx

; 34   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec1@E$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec1<unsigned char,1>::tvec1<unsigned char,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec1@E$00@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec1@E$00@glm@@QAE@ABU01@@Z PROC			; glm::tvec1<unsigned char,1>::tvec1<unsigned char,1>, COMDAT
; _this$ = ecx

; 22   : template struct tvec1<uint8, mediump>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec1@E$00@glm@@QAE@ABU01@@Z ENDP			; glm::tvec1<unsigned char,1>::tvec1<unsigned char,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@E$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec1@E$00@glm@@QAE@XZ PROC			; glm::tvec1<unsigned char,1>::tvec1<unsigned char,1>, COMDAT
; _this$ = ecx

; 14   : 		{}

	mov	BYTE PTR [ecx], 0
	mov	eax, ecx
	ret	0
??0?$tvec1@E$00@glm@@QAE@XZ ENDP			; glm::tvec1<unsigned char,1>::tvec1<unsigned char,1>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@E$00@glm@@QBEABEH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@E$00@glm@@QBEABEH@Z PROC			; glm::tvec1<unsigned char,1>::operator[], COMDAT
; _this$ = ecx

; 78   : 	{

	push	ebp
	mov	ebp, esp

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 81   : 	}

	pop	ebp
	ret	4
??A?$tvec1@E$00@glm@@QBEABEH@Z ENDP			; glm::tvec1<unsigned char,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@E$00@glm@@QAEAAEH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@E$00@glm@@QAEAAEH@Z PROC			; glm::tvec1<unsigned char,1>::operator[], COMDAT
; _this$ = ecx

; 71   : 	{

	push	ebp
	mov	ebp, esp

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 74   : 	}

	pop	ebp
	ret	4
??A?$tvec1@E$00@glm@@QAEAAEH@Z ENDP			; glm::tvec1<unsigned char,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@E$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@E$00@glm@@SAHXZ PROC			; glm::tvec1<unsigned char,1>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	xor	eax, eax
	inc	eax
	ret	0
?length@?$tvec1@E$00@glm@@SAHXZ ENDP			; glm::tvec1<unsigned char,1>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@N$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec1@N$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<double,2>::operator--, COMDAT
; _this$ = ecx

; 192  : 	{

	push	ebp
	mov	ebp, esp

; 193  : 		tvec1<T, P> Result(*this);
; 194  : 		--*this;

	movsd	xmm0, QWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	subsd	xmm0, QWORD PTR __real@3ff0000000000000
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	movsd	QWORD PTR [ecx], xmm0

; 195  : 		return Result;
; 196  : 	}

	pop	ebp
	ret	8
??F?$tvec1@N$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<double,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@N$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec1@N$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<double,2>::operator++, COMDAT
; _this$ = ecx

; 184  : 	{

	push	ebp
	mov	ebp, esp

; 185  : 		tvec1<T, P> Result(*this);
; 186  : 		++*this;

	movsd	xmm0, QWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	addsd	xmm0, QWORD PTR __real@3ff0000000000000
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	movsd	QWORD PTR [ecx], xmm0

; 187  : 		return Result;
; 188  : 	}

	pop	ebp
	ret	8
??E?$tvec1@N$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<double,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@N$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec1@N$01@glm@@QAEAAU01@XZ PROC			; glm::tvec1<double,2>::operator--, COMDAT
; _this$ = ecx

; 178  : 		--this->x;

	movsd	xmm0, QWORD PTR [ecx]

; 179  : 		return *this;

	mov	eax, ecx
	subsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR [ecx], xmm0

; 180  : 	}

	ret	0
??F?$tvec1@N$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<double,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@N$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec1@N$01@glm@@QAEAAU01@XZ PROC			; glm::tvec1<double,2>::operator++, COMDAT
; _this$ = ecx

; 171  : 		++this->x;

	movsd	xmm0, QWORD PTR [ecx]

; 172  : 		return *this;

	mov	eax, ecx
	addsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR [ecx], xmm0

; 173  : 	}

	ret	0
??E?$tvec1@N$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<double,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec1@N$01@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec1@N$01@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec1<double,2>::operator=, COMDAT
; _this$ = ecx

; 20   : template struct tvec1<float64, lowp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??4?$tvec1@N$01@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec1<double,2>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@N$01@glm@@QAE@N@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 8
??0?$tvec1@N$01@glm@@QAE@N@Z PROC			; glm::tvec1<double,2>::tvec1<double,2>, COMDAT
; _this$ = ecx

; 39   : 	{}

	push	ebp
	mov	ebp, esp
	movsd	xmm0, QWORD PTR _scalar$[ebp]
	mov	eax, ecx
	movsd	QWORD PTR [ecx], xmm0
	pop	ebp
	ret	8
??0?$tvec1@N$01@glm@@QAE@N@Z ENDP			; glm::tvec1<double,2>::tvec1<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@N$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec1@N$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec1<double,2>::tvec1<double,2>, COMDAT
; _this$ = ecx

; 34   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec1@N$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec1<double,2>::tvec1<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec1@N$01@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec1@N$01@glm@@QAE@ABU01@@Z PROC			; glm::tvec1<double,2>::tvec1<double,2>, COMDAT
; _this$ = ecx

; 20   : template struct tvec1<float64, lowp>;

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ___that$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [eax]
	mov	eax, ecx
	movsd	QWORD PTR [ecx], xmm0
	pop	ebp
	ret	4
??0?$tvec1@N$01@glm@@QAE@ABU01@@Z ENDP			; glm::tvec1<double,2>::tvec1<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@N$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec1@N$01@glm@@QAE@XZ PROC			; glm::tvec1<double,2>::tvec1<double,2>, COMDAT
; _this$ = ecx

; 14   : 		{}

	xorps	xmm0, xmm0
	mov	eax, ecx
	movsd	QWORD PTR [ecx], xmm0
	ret	0
??0?$tvec1@N$01@glm@@QAE@XZ ENDP			; glm::tvec1<double,2>::tvec1<double,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@N$01@glm@@QBEABNH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@N$01@glm@@QBEABNH@Z PROC			; glm::tvec1<double,2>::operator[], COMDAT
; _this$ = ecx

; 78   : 	{

	push	ebp
	mov	ebp, esp

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 81   : 	}

	pop	ebp
	ret	4
??A?$tvec1@N$01@glm@@QBEABNH@Z ENDP			; glm::tvec1<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@N$01@glm@@QAEAANH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@N$01@glm@@QAEAANH@Z PROC			; glm::tvec1<double,2>::operator[], COMDAT
; _this$ = ecx

; 71   : 	{

	push	ebp
	mov	ebp, esp

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 74   : 	}

	pop	ebp
	ret	4
??A?$tvec1@N$01@glm@@QAEAANH@Z ENDP			; glm::tvec1<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@N$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@N$01@glm@@SAHXZ PROC			; glm::tvec1<double,2>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	xor	eax, eax
	inc	eax
	ret	0
?length@?$tvec1@N$01@glm@@SAHXZ ENDP			; glm::tvec1<double,2>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@M$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec1@M$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<float,2>::operator--, COMDAT
; _this$ = ecx

; 192  : 	{

	push	ebp
	mov	ebp, esp

; 193  : 		tvec1<T, P> Result(*this);
; 194  : 		--*this;

	movss	xmm0, DWORD PTR [ecx]
	subss	xmm0, DWORD PTR __real@3f800000
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	movss	DWORD PTR [ecx], xmm0

; 195  : 		return Result;
; 196  : 	}

	pop	ebp
	ret	8
??F?$tvec1@M$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<float,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@M$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec1@M$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<float,2>::operator++, COMDAT
; _this$ = ecx

; 184  : 	{

	push	ebp
	mov	ebp, esp

; 185  : 		tvec1<T, P> Result(*this);
; 186  : 		++*this;

	movss	xmm0, DWORD PTR [ecx]
	addss	xmm0, DWORD PTR __real@3f800000
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	movss	DWORD PTR [ecx], xmm0

; 187  : 		return Result;
; 188  : 	}

	pop	ebp
	ret	8
??E?$tvec1@M$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<float,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@M$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec1@M$01@glm@@QAEAAU01@XZ PROC			; glm::tvec1<float,2>::operator--, COMDAT
; _this$ = ecx

; 178  : 		--this->x;

	movss	xmm0, DWORD PTR [ecx]

; 179  : 		return *this;

	mov	eax, ecx
	subss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx], xmm0

; 180  : 	}

	ret	0
??F?$tvec1@M$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<float,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@M$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec1@M$01@glm@@QAEAAU01@XZ PROC			; glm::tvec1<float,2>::operator++, COMDAT
; _this$ = ecx

; 171  : 		++this->x;

	movss	xmm0, DWORD PTR [ecx]

; 172  : 		return *this;

	mov	eax, ecx
	addss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx], xmm0

; 173  : 	}

	ret	0
??E?$tvec1@M$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<float,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec1@M$01@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec1@M$01@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec1<float,2>::operator=, COMDAT
; _this$ = ecx

; 19   : template struct tvec1<float32, lowp>;

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??4?$tvec1@M$01@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec1<float,2>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@M$01@glm@@QAE@M@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 4
??0?$tvec1@M$01@glm@@QAE@M@Z PROC			; glm::tvec1<float,2>::tvec1<float,2>, COMDAT
; _this$ = ecx

; 39   : 	{}

	push	ebp
	mov	ebp, esp
	movss	xmm0, DWORD PTR _scalar$[ebp]
	mov	eax, ecx
	movss	DWORD PTR [ecx], xmm0
	pop	ebp
	ret	4
??0?$tvec1@M$01@glm@@QAE@M@Z ENDP			; glm::tvec1<float,2>::tvec1<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@M$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec1@M$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec1<float,2>::tvec1<float,2>, COMDAT
; _this$ = ecx

; 34   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec1@M$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec1<float,2>::tvec1<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec1@M$01@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec1@M$01@glm@@QAE@ABU01@@Z PROC			; glm::tvec1<float,2>::tvec1<float,2>, COMDAT
; _this$ = ecx

; 19   : template struct tvec1<float32, lowp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec1@M$01@glm@@QAE@ABU01@@Z ENDP			; glm::tvec1<float,2>::tvec1<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@M$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec1@M$01@glm@@QAE@XZ PROC			; glm::tvec1<float,2>::tvec1<float,2>, COMDAT
; _this$ = ecx

; 14   : 		{}

	and	DWORD PTR [ecx], 0
	mov	eax, ecx
	ret	0
??0?$tvec1@M$01@glm@@QAE@XZ ENDP			; glm::tvec1<float,2>::tvec1<float,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@M$01@glm@@QBEABMH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@M$01@glm@@QBEABMH@Z PROC			; glm::tvec1<float,2>::operator[], COMDAT
; _this$ = ecx

; 78   : 	{

	push	ebp
	mov	ebp, esp

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 81   : 	}

	pop	ebp
	ret	4
??A?$tvec1@M$01@glm@@QBEABMH@Z ENDP			; glm::tvec1<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@M$01@glm@@QAEAAMH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@M$01@glm@@QAEAAMH@Z PROC			; glm::tvec1<float,2>::operator[], COMDAT
; _this$ = ecx

; 71   : 	{

	push	ebp
	mov	ebp, esp

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 74   : 	}

	pop	ebp
	ret	4
??A?$tvec1@M$01@glm@@QAEAAMH@Z ENDP			; glm::tvec1<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@M$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@M$01@glm@@SAHXZ PROC			; glm::tvec1<float,2>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	xor	eax, eax
	inc	eax
	ret	0
?length@?$tvec1@M$01@glm@@SAHXZ ENDP			; glm::tvec1<float,2>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@_J$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec1@_J$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<__int64,2>::operator--, COMDAT
; _this$ = ecx

; 192  : 	{

	push	ebp
	mov	ebp, esp

; 193  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]

; 194  : 		--*this;

	add	DWORD PTR [ecx], -1
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	adc	DWORD PTR [ecx+4], -1
	mov	DWORD PTR [eax+4], edx

; 195  : 		return Result;
; 196  : 	}

	pop	ebp
	ret	8
??F?$tvec1@_J$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<__int64,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@_J$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec1@_J$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<__int64,2>::operator++, COMDAT
; _this$ = ecx

; 184  : 	{

	push	ebp
	mov	ebp, esp

; 185  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]

; 186  : 		++*this;

	add	DWORD PTR [ecx], 1
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	adc	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [eax+4], edx

; 187  : 		return Result;
; 188  : 	}

	pop	ebp
	ret	8
??E?$tvec1@_J$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<__int64,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@_J$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec1@_J$01@glm@@QAEAAU01@XZ PROC			; glm::tvec1<__int64,2>::operator--, COMDAT
; _this$ = ecx

; 178  : 		--this->x;

	add	DWORD PTR [ecx], -1

; 179  : 		return *this;

	mov	eax, ecx
	adc	DWORD PTR [ecx+4], -1

; 180  : 	}

	ret	0
??F?$tvec1@_J$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<__int64,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@_J$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec1@_J$01@glm@@QAEAAU01@XZ PROC			; glm::tvec1<__int64,2>::operator++, COMDAT
; _this$ = ecx

; 171  : 		++this->x;

	add	DWORD PTR [ecx], 1

; 172  : 		return *this;

	mov	eax, ecx
	adc	DWORD PTR [ecx+4], 0

; 173  : 	}

	ret	0
??E?$tvec1@_J$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<__int64,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec1@_J$01@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec1@_J$01@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec1<__int64,2>::operator=, COMDAT
; _this$ = ecx

; 18   : template struct tvec1<int64, lowp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??4?$tvec1@_J$01@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec1<__int64,2>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@_J$01@glm@@QAE@_J@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 8
??0?$tvec1@_J$01@glm@@QAE@_J@Z PROC			; glm::tvec1<__int64,2>::tvec1<__int64,2>, COMDAT
; _this$ = ecx

; 39   : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _scalar$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	pop	ebp
	ret	8
??0?$tvec1@_J$01@glm@@QAE@_J@Z ENDP			; glm::tvec1<__int64,2>::tvec1<__int64,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@_J$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec1@_J$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec1<__int64,2>::tvec1<__int64,2>, COMDAT
; _this$ = ecx

; 34   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec1@_J$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec1<__int64,2>::tvec1<__int64,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec1@_J$01@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec1@_J$01@glm@@QAE@ABU01@@Z PROC			; glm::tvec1<__int64,2>::tvec1<__int64,2>, COMDAT
; _this$ = ecx

; 18   : template struct tvec1<int64, lowp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec1@_J$01@glm@@QAE@ABU01@@Z ENDP			; glm::tvec1<__int64,2>::tvec1<__int64,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@_J$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec1@_J$01@glm@@QAE@XZ PROC			; glm::tvec1<__int64,2>::tvec1<__int64,2>, COMDAT
; _this$ = ecx

; 14   : 		{}

	and	DWORD PTR [ecx], 0
	mov	eax, ecx
	and	DWORD PTR [ecx+4], 0
	ret	0
??0?$tvec1@_J$01@glm@@QAE@XZ ENDP			; glm::tvec1<__int64,2>::tvec1<__int64,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@_J$01@glm@@QBEAB_JH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@_J$01@glm@@QBEAB_JH@Z PROC			; glm::tvec1<__int64,2>::operator[], COMDAT
; _this$ = ecx

; 78   : 	{

	push	ebp
	mov	ebp, esp

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 81   : 	}

	pop	ebp
	ret	4
??A?$tvec1@_J$01@glm@@QBEAB_JH@Z ENDP			; glm::tvec1<__int64,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@_J$01@glm@@QAEAA_JH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@_J$01@glm@@QAEAA_JH@Z PROC			; glm::tvec1<__int64,2>::operator[], COMDAT
; _this$ = ecx

; 71   : 	{

	push	ebp
	mov	ebp, esp

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 74   : 	}

	pop	ebp
	ret	4
??A?$tvec1@_J$01@glm@@QAEAA_JH@Z ENDP			; glm::tvec1<__int64,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@_J$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@_J$01@glm@@SAHXZ PROC			; glm::tvec1<__int64,2>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	xor	eax, eax
	inc	eax
	ret	0
?length@?$tvec1@_J$01@glm@@SAHXZ ENDP			; glm::tvec1<__int64,2>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@H$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec1@H$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<int,2>::operator--, COMDAT
; _this$ = ecx

; 192  : 	{

	push	ebp
	mov	ebp, esp

; 193  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 194  : 		--*this;

	dec	edx
	mov	DWORD PTR [ecx], edx

; 195  : 		return Result;
; 196  : 	}

	pop	ebp
	ret	8
??F?$tvec1@H$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<int,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@H$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec1@H$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<int,2>::operator++, COMDAT
; _this$ = ecx

; 184  : 	{

	push	ebp
	mov	ebp, esp

; 185  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 186  : 		++*this;

	inc	edx
	mov	DWORD PTR [ecx], edx

; 187  : 		return Result;
; 188  : 	}

	pop	ebp
	ret	8
??E?$tvec1@H$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<int,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@H$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec1@H$01@glm@@QAEAAU01@XZ PROC			; glm::tvec1<int,2>::operator--, COMDAT
; _this$ = ecx

; 178  : 		--this->x;

	dec	DWORD PTR [ecx]

; 179  : 		return *this;

	mov	eax, ecx

; 180  : 	}

	ret	0
??F?$tvec1@H$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<int,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@H$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec1@H$01@glm@@QAEAAU01@XZ PROC			; glm::tvec1<int,2>::operator++, COMDAT
; _this$ = ecx

; 171  : 		++this->x;

	inc	DWORD PTR [ecx]

; 172  : 		return *this;

	mov	eax, ecx

; 173  : 	}

	ret	0
??E?$tvec1@H$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<int,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec1@H$01@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec1@H$01@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec1<int,2>::operator=, COMDAT
; _this$ = ecx

; 17   : template struct tvec1<int32, lowp>;

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??4?$tvec1@H$01@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec1<int,2>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@H$01@glm@@QAE@H@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 4
??0?$tvec1@H$01@glm@@QAE@H@Z PROC			; glm::tvec1<int,2>::tvec1<int,2>, COMDAT
; _this$ = ecx

; 39   : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec1@H$01@glm@@QAE@H@Z ENDP			; glm::tvec1<int,2>::tvec1<int,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@H$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec1@H$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec1<int,2>::tvec1<int,2>, COMDAT
; _this$ = ecx

; 34   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec1@H$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec1<int,2>::tvec1<int,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec1@H$01@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec1@H$01@glm@@QAE@ABU01@@Z PROC			; glm::tvec1<int,2>::tvec1<int,2>, COMDAT
; _this$ = ecx

; 17   : template struct tvec1<int32, lowp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec1@H$01@glm@@QAE@ABU01@@Z ENDP			; glm::tvec1<int,2>::tvec1<int,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@H$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec1@H$01@glm@@QAE@XZ PROC			; glm::tvec1<int,2>::tvec1<int,2>, COMDAT
; _this$ = ecx

; 14   : 		{}

	and	DWORD PTR [ecx], 0
	mov	eax, ecx
	ret	0
??0?$tvec1@H$01@glm@@QAE@XZ ENDP			; glm::tvec1<int,2>::tvec1<int,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@H$01@glm@@QBEABHH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@H$01@glm@@QBEABHH@Z PROC			; glm::tvec1<int,2>::operator[], COMDAT
; _this$ = ecx

; 78   : 	{

	push	ebp
	mov	ebp, esp

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 81   : 	}

	pop	ebp
	ret	4
??A?$tvec1@H$01@glm@@QBEABHH@Z ENDP			; glm::tvec1<int,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@H$01@glm@@QAEAAHH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@H$01@glm@@QAEAAHH@Z PROC			; glm::tvec1<int,2>::operator[], COMDAT
; _this$ = ecx

; 71   : 	{

	push	ebp
	mov	ebp, esp

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 74   : 	}

	pop	ebp
	ret	4
??A?$tvec1@H$01@glm@@QAEAAHH@Z ENDP			; glm::tvec1<int,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@H$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@H$01@glm@@SAHXZ PROC			; glm::tvec1<int,2>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	xor	eax, eax
	inc	eax
	ret	0
?length@?$tvec1@H$01@glm@@SAHXZ ENDP			; glm::tvec1<int,2>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@F$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec1@F$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<short,2>::operator--, COMDAT
; _this$ = ecx

; 192  : 	{

	push	ebp
	mov	ebp, esp

; 193  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movzx	edx, WORD PTR [ecx]
	mov	WORD PTR [eax], dx

; 194  : 		--*this;

	dec	edx
	mov	WORD PTR [ecx], dx

; 195  : 		return Result;
; 196  : 	}

	pop	ebp
	ret	8
??F?$tvec1@F$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<short,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@F$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec1@F$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<short,2>::operator++, COMDAT
; _this$ = ecx

; 184  : 	{

	push	ebp
	mov	ebp, esp

; 185  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movzx	edx, WORD PTR [ecx]
	mov	WORD PTR [eax], dx

; 186  : 		++*this;

	inc	edx
	mov	WORD PTR [ecx], dx

; 187  : 		return Result;
; 188  : 	}

	pop	ebp
	ret	8
??E?$tvec1@F$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<short,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@F$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec1@F$01@glm@@QAEAAU01@XZ PROC			; glm::tvec1<short,2>::operator--, COMDAT
; _this$ = ecx

; 178  : 		--this->x;

	dec	WORD PTR [ecx]

; 179  : 		return *this;

	mov	eax, ecx

; 180  : 	}

	ret	0
??F?$tvec1@F$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<short,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@F$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec1@F$01@glm@@QAEAAU01@XZ PROC			; glm::tvec1<short,2>::operator++, COMDAT
; _this$ = ecx

; 171  : 		++this->x;

	inc	WORD PTR [ecx]

; 172  : 		return *this;

	mov	eax, ecx

; 173  : 	}

	ret	0
??E?$tvec1@F$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<short,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec1@F$01@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec1@F$01@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec1<short,2>::operator=, COMDAT
; _this$ = ecx

; 16   : template struct tvec1<int16, lowp>;

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ax, WORD PTR [eax]
	mov	WORD PTR [ecx], ax
	mov	eax, ecx
	pop	ebp
	ret	4
??4?$tvec1@F$01@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec1<short,2>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@F$01@glm@@QAE@F@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 2
??0?$tvec1@F$01@glm@@QAE@F@Z PROC			; glm::tvec1<short,2>::tvec1<short,2>, COMDAT
; _this$ = ecx

; 39   : 	{}

	push	ebp
	mov	ebp, esp
	mov	ax, WORD PTR _scalar$[ebp]
	mov	WORD PTR [ecx], ax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec1@F$01@glm@@QAE@F@Z ENDP			; glm::tvec1<short,2>::tvec1<short,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@F$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec1@F$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec1<short,2>::tvec1<short,2>, COMDAT
; _this$ = ecx

; 34   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec1@F$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec1<short,2>::tvec1<short,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec1@F$01@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec1@F$01@glm@@QAE@ABU01@@Z PROC			; glm::tvec1<short,2>::tvec1<short,2>, COMDAT
; _this$ = ecx

; 16   : template struct tvec1<int16, lowp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec1@F$01@glm@@QAE@ABU01@@Z ENDP			; glm::tvec1<short,2>::tvec1<short,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@F$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec1@F$01@glm@@QAE@XZ PROC			; glm::tvec1<short,2>::tvec1<short,2>, COMDAT
; _this$ = ecx

; 14   : 		{}

	xor	eax, eax
	mov	WORD PTR [ecx], ax
	mov	eax, ecx
	ret	0
??0?$tvec1@F$01@glm@@QAE@XZ ENDP			; glm::tvec1<short,2>::tvec1<short,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@F$01@glm@@QBEABFH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@F$01@glm@@QBEABFH@Z PROC			; glm::tvec1<short,2>::operator[], COMDAT
; _this$ = ecx

; 78   : 	{

	push	ebp
	mov	ebp, esp

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 81   : 	}

	pop	ebp
	ret	4
??A?$tvec1@F$01@glm@@QBEABFH@Z ENDP			; glm::tvec1<short,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@F$01@glm@@QAEAAFH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@F$01@glm@@QAEAAFH@Z PROC			; glm::tvec1<short,2>::operator[], COMDAT
; _this$ = ecx

; 71   : 	{

	push	ebp
	mov	ebp, esp

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 74   : 	}

	pop	ebp
	ret	4
??A?$tvec1@F$01@glm@@QAEAAFH@Z ENDP			; glm::tvec1<short,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@F$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@F$01@glm@@SAHXZ PROC			; glm::tvec1<short,2>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	xor	eax, eax
	inc	eax
	ret	0
?length@?$tvec1@F$01@glm@@SAHXZ ENDP			; glm::tvec1<short,2>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@C$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec1@C$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<signed char,2>::operator--, COMDAT
; _this$ = ecx

; 192  : 	{

	push	ebp
	mov	ebp, esp

; 193  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 194  : 		--*this;

	dec	dl
	mov	BYTE PTR [ecx], dl

; 195  : 		return Result;
; 196  : 	}

	pop	ebp
	ret	8
??F?$tvec1@C$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<signed char,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@C$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec1@C$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<signed char,2>::operator++, COMDAT
; _this$ = ecx

; 184  : 	{

	push	ebp
	mov	ebp, esp

; 185  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 186  : 		++*this;

	inc	dl
	mov	BYTE PTR [ecx], dl

; 187  : 		return Result;
; 188  : 	}

	pop	ebp
	ret	8
??E?$tvec1@C$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<signed char,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@C$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec1@C$01@glm@@QAEAAU01@XZ PROC			; glm::tvec1<signed char,2>::operator--, COMDAT
; _this$ = ecx

; 178  : 		--this->x;

	dec	BYTE PTR [ecx]

; 179  : 		return *this;

	mov	eax, ecx

; 180  : 	}

	ret	0
??F?$tvec1@C$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<signed char,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@C$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec1@C$01@glm@@QAEAAU01@XZ PROC			; glm::tvec1<signed char,2>::operator++, COMDAT
; _this$ = ecx

; 171  : 		++this->x;

	inc	BYTE PTR [ecx]

; 172  : 		return *this;

	mov	eax, ecx

; 173  : 	}

	ret	0
??E?$tvec1@C$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<signed char,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec1@C$01@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec1@C$01@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec1<signed char,2>::operator=, COMDAT
; _this$ = ecx

; 15   : template struct tvec1<int8, lowp>;

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [eax]
	mov	BYTE PTR [ecx], al
	mov	eax, ecx
	pop	ebp
	ret	4
??4?$tvec1@C$01@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec1<signed char,2>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@C$01@glm@@QAE@C@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 1
??0?$tvec1@C$01@glm@@QAE@C@Z PROC			; glm::tvec1<signed char,2>::tvec1<signed char,2>, COMDAT
; _this$ = ecx

; 39   : 	{}

	push	ebp
	mov	ebp, esp
	mov	al, BYTE PTR _scalar$[ebp]
	mov	BYTE PTR [ecx], al
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec1@C$01@glm@@QAE@C@Z ENDP			; glm::tvec1<signed char,2>::tvec1<signed char,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@C$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec1@C$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec1<signed char,2>::tvec1<signed char,2>, COMDAT
; _this$ = ecx

; 34   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec1@C$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec1<signed char,2>::tvec1<signed char,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec1@C$01@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec1@C$01@glm@@QAE@ABU01@@Z PROC			; glm::tvec1<signed char,2>::tvec1<signed char,2>, COMDAT
; _this$ = ecx

; 15   : template struct tvec1<int8, lowp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec1@C$01@glm@@QAE@ABU01@@Z ENDP			; glm::tvec1<signed char,2>::tvec1<signed char,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@C$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec1@C$01@glm@@QAE@XZ PROC			; glm::tvec1<signed char,2>::tvec1<signed char,2>, COMDAT
; _this$ = ecx

; 14   : 		{}

	mov	BYTE PTR [ecx], 0
	mov	eax, ecx
	ret	0
??0?$tvec1@C$01@glm@@QAE@XZ ENDP			; glm::tvec1<signed char,2>::tvec1<signed char,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@C$01@glm@@QBEABCH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@C$01@glm@@QBEABCH@Z PROC			; glm::tvec1<signed char,2>::operator[], COMDAT
; _this$ = ecx

; 78   : 	{

	push	ebp
	mov	ebp, esp

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 81   : 	}

	pop	ebp
	ret	4
??A?$tvec1@C$01@glm@@QBEABCH@Z ENDP			; glm::tvec1<signed char,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@C$01@glm@@QAEAACH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@C$01@glm@@QAEAACH@Z PROC			; glm::tvec1<signed char,2>::operator[], COMDAT
; _this$ = ecx

; 71   : 	{

	push	ebp
	mov	ebp, esp

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 74   : 	}

	pop	ebp
	ret	4
??A?$tvec1@C$01@glm@@QAEAACH@Z ENDP			; glm::tvec1<signed char,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@C$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@C$01@glm@@SAHXZ PROC			; glm::tvec1<signed char,2>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	xor	eax, eax
	inc	eax
	ret	0
?length@?$tvec1@C$01@glm@@SAHXZ ENDP			; glm::tvec1<signed char,2>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@_K$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec1@_K$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<unsigned __int64,2>::operator--, COMDAT
; _this$ = ecx

; 192  : 	{

	push	ebp
	mov	ebp, esp

; 193  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]

; 194  : 		--*this;

	add	DWORD PTR [ecx], -1
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	adc	DWORD PTR [ecx+4], -1
	mov	DWORD PTR [eax+4], edx

; 195  : 		return Result;
; 196  : 	}

	pop	ebp
	ret	8
??F?$tvec1@_K$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<unsigned __int64,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@_K$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec1@_K$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<unsigned __int64,2>::operator++, COMDAT
; _this$ = ecx

; 184  : 	{

	push	ebp
	mov	ebp, esp

; 185  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]

; 186  : 		++*this;

	add	DWORD PTR [ecx], 1
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	adc	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [eax+4], edx

; 187  : 		return Result;
; 188  : 	}

	pop	ebp
	ret	8
??E?$tvec1@_K$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<unsigned __int64,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@_K$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec1@_K$01@glm@@QAEAAU01@XZ PROC			; glm::tvec1<unsigned __int64,2>::operator--, COMDAT
; _this$ = ecx

; 178  : 		--this->x;

	add	DWORD PTR [ecx], -1

; 179  : 		return *this;

	mov	eax, ecx
	adc	DWORD PTR [ecx+4], -1

; 180  : 	}

	ret	0
??F?$tvec1@_K$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<unsigned __int64,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@_K$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec1@_K$01@glm@@QAEAAU01@XZ PROC			; glm::tvec1<unsigned __int64,2>::operator++, COMDAT
; _this$ = ecx

; 171  : 		++this->x;

	add	DWORD PTR [ecx], 1

; 172  : 		return *this;

	mov	eax, ecx
	adc	DWORD PTR [ecx+4], 0

; 173  : 	}

	ret	0
??E?$tvec1@_K$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<unsigned __int64,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec1@_K$01@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec1@_K$01@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec1<unsigned __int64,2>::operator=, COMDAT
; _this$ = ecx

; 14   : template struct tvec1<uint64, lowp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??4?$tvec1@_K$01@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec1<unsigned __int64,2>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@_K$01@glm@@QAE@_K@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 8
??0?$tvec1@_K$01@glm@@QAE@_K@Z PROC			; glm::tvec1<unsigned __int64,2>::tvec1<unsigned __int64,2>, COMDAT
; _this$ = ecx

; 39   : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _scalar$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	pop	ebp
	ret	8
??0?$tvec1@_K$01@glm@@QAE@_K@Z ENDP			; glm::tvec1<unsigned __int64,2>::tvec1<unsigned __int64,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@_K$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec1@_K$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec1<unsigned __int64,2>::tvec1<unsigned __int64,2>, COMDAT
; _this$ = ecx

; 34   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec1@_K$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec1<unsigned __int64,2>::tvec1<unsigned __int64,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec1@_K$01@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec1@_K$01@glm@@QAE@ABU01@@Z PROC			; glm::tvec1<unsigned __int64,2>::tvec1<unsigned __int64,2>, COMDAT
; _this$ = ecx

; 14   : template struct tvec1<uint64, lowp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec1@_K$01@glm@@QAE@ABU01@@Z ENDP			; glm::tvec1<unsigned __int64,2>::tvec1<unsigned __int64,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@_K$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec1@_K$01@glm@@QAE@XZ PROC			; glm::tvec1<unsigned __int64,2>::tvec1<unsigned __int64,2>, COMDAT
; _this$ = ecx

; 14   : 		{}

	and	DWORD PTR [ecx], 0
	mov	eax, ecx
	and	DWORD PTR [ecx+4], 0
	ret	0
??0?$tvec1@_K$01@glm@@QAE@XZ ENDP			; glm::tvec1<unsigned __int64,2>::tvec1<unsigned __int64,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@_K$01@glm@@QBEAB_KH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@_K$01@glm@@QBEAB_KH@Z PROC			; glm::tvec1<unsigned __int64,2>::operator[], COMDAT
; _this$ = ecx

; 78   : 	{

	push	ebp
	mov	ebp, esp

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 81   : 	}

	pop	ebp
	ret	4
??A?$tvec1@_K$01@glm@@QBEAB_KH@Z ENDP			; glm::tvec1<unsigned __int64,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@_K$01@glm@@QAEAA_KH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@_K$01@glm@@QAEAA_KH@Z PROC			; glm::tvec1<unsigned __int64,2>::operator[], COMDAT
; _this$ = ecx

; 71   : 	{

	push	ebp
	mov	ebp, esp

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 74   : 	}

	pop	ebp
	ret	4
??A?$tvec1@_K$01@glm@@QAEAA_KH@Z ENDP			; glm::tvec1<unsigned __int64,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@_K$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@_K$01@glm@@SAHXZ PROC			; glm::tvec1<unsigned __int64,2>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	xor	eax, eax
	inc	eax
	ret	0
?length@?$tvec1@_K$01@glm@@SAHXZ ENDP			; glm::tvec1<unsigned __int64,2>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@I$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec1@I$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<unsigned int,2>::operator--, COMDAT
; _this$ = ecx

; 192  : 	{

	push	ebp
	mov	ebp, esp

; 193  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 194  : 		--*this;

	dec	edx
	mov	DWORD PTR [ecx], edx

; 195  : 		return Result;
; 196  : 	}

	pop	ebp
	ret	8
??F?$tvec1@I$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<unsigned int,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@I$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec1@I$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<unsigned int,2>::operator++, COMDAT
; _this$ = ecx

; 184  : 	{

	push	ebp
	mov	ebp, esp

; 185  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 186  : 		++*this;

	inc	edx
	mov	DWORD PTR [ecx], edx

; 187  : 		return Result;
; 188  : 	}

	pop	ebp
	ret	8
??E?$tvec1@I$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<unsigned int,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@I$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec1@I$01@glm@@QAEAAU01@XZ PROC			; glm::tvec1<unsigned int,2>::operator--, COMDAT
; _this$ = ecx

; 178  : 		--this->x;

	dec	DWORD PTR [ecx]

; 179  : 		return *this;

	mov	eax, ecx

; 180  : 	}

	ret	0
??F?$tvec1@I$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<unsigned int,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@I$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec1@I$01@glm@@QAEAAU01@XZ PROC			; glm::tvec1<unsigned int,2>::operator++, COMDAT
; _this$ = ecx

; 171  : 		++this->x;

	inc	DWORD PTR [ecx]

; 172  : 		return *this;

	mov	eax, ecx

; 173  : 	}

	ret	0
??E?$tvec1@I$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<unsigned int,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec1@I$01@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec1@I$01@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec1<unsigned int,2>::operator=, COMDAT
; _this$ = ecx

; 13   : template struct tvec1<uint32, lowp>;

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??4?$tvec1@I$01@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec1<unsigned int,2>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@I$01@glm@@QAE@I@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 4
??0?$tvec1@I$01@glm@@QAE@I@Z PROC			; glm::tvec1<unsigned int,2>::tvec1<unsigned int,2>, COMDAT
; _this$ = ecx

; 39   : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec1@I$01@glm@@QAE@I@Z ENDP			; glm::tvec1<unsigned int,2>::tvec1<unsigned int,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@I$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec1@I$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec1<unsigned int,2>::tvec1<unsigned int,2>, COMDAT
; _this$ = ecx

; 34   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec1@I$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec1<unsigned int,2>::tvec1<unsigned int,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec1@I$01@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec1@I$01@glm@@QAE@ABU01@@Z PROC			; glm::tvec1<unsigned int,2>::tvec1<unsigned int,2>, COMDAT
; _this$ = ecx

; 13   : template struct tvec1<uint32, lowp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec1@I$01@glm@@QAE@ABU01@@Z ENDP			; glm::tvec1<unsigned int,2>::tvec1<unsigned int,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@I$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec1@I$01@glm@@QAE@XZ PROC			; glm::tvec1<unsigned int,2>::tvec1<unsigned int,2>, COMDAT
; _this$ = ecx

; 14   : 		{}

	and	DWORD PTR [ecx], 0
	mov	eax, ecx
	ret	0
??0?$tvec1@I$01@glm@@QAE@XZ ENDP			; glm::tvec1<unsigned int,2>::tvec1<unsigned int,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@I$01@glm@@QBEABIH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@I$01@glm@@QBEABIH@Z PROC			; glm::tvec1<unsigned int,2>::operator[], COMDAT
; _this$ = ecx

; 78   : 	{

	push	ebp
	mov	ebp, esp

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 81   : 	}

	pop	ebp
	ret	4
??A?$tvec1@I$01@glm@@QBEABIH@Z ENDP			; glm::tvec1<unsigned int,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@I$01@glm@@QAEAAIH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@I$01@glm@@QAEAAIH@Z PROC			; glm::tvec1<unsigned int,2>::operator[], COMDAT
; _this$ = ecx

; 71   : 	{

	push	ebp
	mov	ebp, esp

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 74   : 	}

	pop	ebp
	ret	4
??A?$tvec1@I$01@glm@@QAEAAIH@Z ENDP			; glm::tvec1<unsigned int,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@I$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@I$01@glm@@SAHXZ PROC			; glm::tvec1<unsigned int,2>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	xor	eax, eax
	inc	eax
	ret	0
?length@?$tvec1@I$01@glm@@SAHXZ ENDP			; glm::tvec1<unsigned int,2>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@G$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec1@G$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<unsigned short,2>::operator--, COMDAT
; _this$ = ecx

; 192  : 	{

	push	ebp
	mov	ebp, esp

; 193  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movzx	edx, WORD PTR [ecx]
	mov	WORD PTR [eax], dx

; 194  : 		--*this;

	dec	edx
	mov	WORD PTR [ecx], dx

; 195  : 		return Result;
; 196  : 	}

	pop	ebp
	ret	8
??F?$tvec1@G$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<unsigned short,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@G$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec1@G$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<unsigned short,2>::operator++, COMDAT
; _this$ = ecx

; 184  : 	{

	push	ebp
	mov	ebp, esp

; 185  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movzx	edx, WORD PTR [ecx]
	mov	WORD PTR [eax], dx

; 186  : 		++*this;

	inc	edx
	mov	WORD PTR [ecx], dx

; 187  : 		return Result;
; 188  : 	}

	pop	ebp
	ret	8
??E?$tvec1@G$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<unsigned short,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@G$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec1@G$01@glm@@QAEAAU01@XZ PROC			; glm::tvec1<unsigned short,2>::operator--, COMDAT
; _this$ = ecx

; 178  : 		--this->x;

	mov	eax, 65535				; 0000ffffH
	add	WORD PTR [ecx], ax

; 179  : 		return *this;

	mov	eax, ecx

; 180  : 	}

	ret	0
??F?$tvec1@G$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<unsigned short,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@G$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec1@G$01@glm@@QAEAAU01@XZ PROC			; glm::tvec1<unsigned short,2>::operator++, COMDAT
; _this$ = ecx

; 171  : 		++this->x;

	inc	WORD PTR [ecx]

; 172  : 		return *this;

	mov	eax, ecx

; 173  : 	}

	ret	0
??E?$tvec1@G$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<unsigned short,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec1@G$01@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec1@G$01@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec1<unsigned short,2>::operator=, COMDAT
; _this$ = ecx

; 12   : template struct tvec1<uint16, lowp>;

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ax, WORD PTR [eax]
	mov	WORD PTR [ecx], ax
	mov	eax, ecx
	pop	ebp
	ret	4
??4?$tvec1@G$01@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec1<unsigned short,2>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@G$01@glm@@QAE@G@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 2
??0?$tvec1@G$01@glm@@QAE@G@Z PROC			; glm::tvec1<unsigned short,2>::tvec1<unsigned short,2>, COMDAT
; _this$ = ecx

; 39   : 	{}

	push	ebp
	mov	ebp, esp
	mov	ax, WORD PTR _scalar$[ebp]
	mov	WORD PTR [ecx], ax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec1@G$01@glm@@QAE@G@Z ENDP			; glm::tvec1<unsigned short,2>::tvec1<unsigned short,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@G$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec1@G$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec1<unsigned short,2>::tvec1<unsigned short,2>, COMDAT
; _this$ = ecx

; 34   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec1@G$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec1<unsigned short,2>::tvec1<unsigned short,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec1@G$01@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec1@G$01@glm@@QAE@ABU01@@Z PROC			; glm::tvec1<unsigned short,2>::tvec1<unsigned short,2>, COMDAT
; _this$ = ecx

; 12   : template struct tvec1<uint16, lowp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec1@G$01@glm@@QAE@ABU01@@Z ENDP			; glm::tvec1<unsigned short,2>::tvec1<unsigned short,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@G$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec1@G$01@glm@@QAE@XZ PROC			; glm::tvec1<unsigned short,2>::tvec1<unsigned short,2>, COMDAT
; _this$ = ecx

; 14   : 		{}

	xor	eax, eax
	mov	WORD PTR [ecx], ax
	mov	eax, ecx
	ret	0
??0?$tvec1@G$01@glm@@QAE@XZ ENDP			; glm::tvec1<unsigned short,2>::tvec1<unsigned short,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@G$01@glm@@QBEABGH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@G$01@glm@@QBEABGH@Z PROC			; glm::tvec1<unsigned short,2>::operator[], COMDAT
; _this$ = ecx

; 78   : 	{

	push	ebp
	mov	ebp, esp

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 81   : 	}

	pop	ebp
	ret	4
??A?$tvec1@G$01@glm@@QBEABGH@Z ENDP			; glm::tvec1<unsigned short,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@G$01@glm@@QAEAAGH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@G$01@glm@@QAEAAGH@Z PROC			; glm::tvec1<unsigned short,2>::operator[], COMDAT
; _this$ = ecx

; 71   : 	{

	push	ebp
	mov	ebp, esp

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 74   : 	}

	pop	ebp
	ret	4
??A?$tvec1@G$01@glm@@QAEAAGH@Z ENDP			; glm::tvec1<unsigned short,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@G$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@G$01@glm@@SAHXZ PROC			; glm::tvec1<unsigned short,2>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	xor	eax, eax
	inc	eax
	ret	0
?length@?$tvec1@G$01@glm@@SAHXZ ENDP			; glm::tvec1<unsigned short,2>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@E$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec1@E$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<unsigned char,2>::operator--, COMDAT
; _this$ = ecx

; 192  : 	{

	push	ebp
	mov	ebp, esp

; 193  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 194  : 		--*this;

	dec	dl
	mov	BYTE PTR [ecx], dl

; 195  : 		return Result;
; 196  : 	}

	pop	ebp
	ret	8
??F?$tvec1@E$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<unsigned char,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@E$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec1@E$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<unsigned char,2>::operator++, COMDAT
; _this$ = ecx

; 184  : 	{

	push	ebp
	mov	ebp, esp

; 185  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 186  : 		++*this;

	inc	dl
	mov	BYTE PTR [ecx], dl

; 187  : 		return Result;
; 188  : 	}

	pop	ebp
	ret	8
??E?$tvec1@E$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<unsigned char,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@E$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec1@E$01@glm@@QAEAAU01@XZ PROC			; glm::tvec1<unsigned char,2>::operator--, COMDAT
; _this$ = ecx

; 178  : 		--this->x;

	dec	BYTE PTR [ecx]

; 179  : 		return *this;

	mov	eax, ecx

; 180  : 	}

	ret	0
??F?$tvec1@E$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<unsigned char,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@E$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec1@E$01@glm@@QAEAAU01@XZ PROC			; glm::tvec1<unsigned char,2>::operator++, COMDAT
; _this$ = ecx

; 171  : 		++this->x;

	inc	BYTE PTR [ecx]

; 172  : 		return *this;

	mov	eax, ecx

; 173  : 	}

	ret	0
??E?$tvec1@E$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<unsigned char,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??4?$tvec1@E$01@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec1@E$01@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec1<unsigned char,2>::operator=, COMDAT
; _this$ = ecx

; 11   : template struct tvec1<uint8, lowp>;

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [eax]
	mov	BYTE PTR [ecx], al
	mov	eax, ecx
	pop	ebp
	ret	4
??4?$tvec1@E$01@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec1<unsigned char,2>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@E$01@glm@@QAE@E@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 1
??0?$tvec1@E$01@glm@@QAE@E@Z PROC			; glm::tvec1<unsigned char,2>::tvec1<unsigned char,2>, COMDAT
; _this$ = ecx

; 39   : 	{}

	push	ebp
	mov	ebp, esp
	mov	al, BYTE PTR _scalar$[ebp]
	mov	BYTE PTR [ecx], al
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec1@E$01@glm@@QAE@E@Z ENDP			; glm::tvec1<unsigned char,2>::tvec1<unsigned char,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@E$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec1@E$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec1<unsigned char,2>::tvec1<unsigned char,2>, COMDAT
; _this$ = ecx

; 34   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec1@E$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec1<unsigned char,2>::tvec1<unsigned char,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\glm.cpp
;	COMDAT ??0?$tvec1@E$01@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec1@E$01@glm@@QAE@ABU01@@Z PROC			; glm::tvec1<unsigned char,2>::tvec1<unsigned char,2>, COMDAT
; _this$ = ecx

; 11   : template struct tvec1<uint8, lowp>;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec1@E$01@glm@@QAE@ABU01@@Z ENDP			; glm::tvec1<unsigned char,2>::tvec1<unsigned char,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@E$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec1@E$01@glm@@QAE@XZ PROC			; glm::tvec1<unsigned char,2>::tvec1<unsigned char,2>, COMDAT
; _this$ = ecx

; 14   : 		{}

	mov	BYTE PTR [ecx], 0
	mov	eax, ecx
	ret	0
??0?$tvec1@E$01@glm@@QAE@XZ ENDP			; glm::tvec1<unsigned char,2>::tvec1<unsigned char,2>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@E$01@glm@@QBEABEH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@E$01@glm@@QBEABEH@Z PROC			; glm::tvec1<unsigned char,2>::operator[], COMDAT
; _this$ = ecx

; 78   : 	{

	push	ebp
	mov	ebp, esp

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 81   : 	}

	pop	ebp
	ret	4
??A?$tvec1@E$01@glm@@QBEABEH@Z ENDP			; glm::tvec1<unsigned char,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@E$01@glm@@QAEAAEH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@E$01@glm@@QAEAAEH@Z PROC			; glm::tvec1<unsigned char,2>::operator[], COMDAT
; _this$ = ecx

; 71   : 	{

	push	ebp
	mov	ebp, esp

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 74   : 	}

	pop	ebp
	ret	4
??A?$tvec1@E$01@glm@@QAEAAEH@Z ENDP			; glm::tvec1<unsigned char,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@E$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@E$01@glm@@SAHXZ PROC			; glm::tvec1<unsigned char,2>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	xor	eax, eax
	inc	eax
	ret	0
?length@?$tvec1@E$01@glm@@SAHXZ ENDP			; glm::tvec1<unsigned char,2>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@I$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec2@I$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<unsigned int,0>::operator--, COMDAT
; _this$ = ecx

; 271  : 	{

	push	ebp
	mov	ebp, esp

; 272  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]

; 273  : 		--*this;

	dec	DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	dec	DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 274  : 		return Result;
; 275  : 	}

	pop	ebp
	ret	8
??F?$tvec2@I$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<unsigned int,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@I$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec2@I$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<unsigned int,0>::operator++, COMDAT
; _this$ = ecx

; 263  : 	{

	push	ebp
	mov	ebp, esp

; 264  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]

; 265  : 		++*this;

	inc	DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	inc	DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 266  : 		return Result;
; 267  : 	}

	pop	ebp
	ret	8
??E?$tvec2@I$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<unsigned int,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@I$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec2@I$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec2<unsigned int,0>::operator--, COMDAT
; _this$ = ecx

; 256  : 		--this->x;

	dec	DWORD PTR [ecx]

; 257  : 		--this->y;
; 258  : 		return *this;

	mov	eax, ecx
	dec	DWORD PTR [ecx+4]

; 259  : 	}

	ret	0
??F?$tvec2@I$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<unsigned int,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@I$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec2@I$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec2<unsigned int,0>::operator++, COMDAT
; _this$ = ecx

; 248  : 		++this->x;

	inc	DWORD PTR [ecx]

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	eax, ecx
	inc	DWORD PTR [ecx+4]

; 251  : 	}

	ret	0
??E?$tvec2@I$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<unsigned int,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\func_packing.inl
;	COMDAT ??4?$tvec2@I$0A@@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec2@I$0A@@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec2<unsigned int,0>::operator=, COMDAT
; _this$ = ecx

; 142  : 	}

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??4?$tvec2@I$0A@@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec2<unsigned int,0>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@I$0A@@glm@@QAE@II@Z
_TEXT	SEGMENT
_s1$ = 8						; size = 4
_s2$ = 12						; size = 4
??0?$tvec2@I$0A@@glm@@QAE@II@Z PROC			; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>, COMDAT
; _this$ = ecx

; 57   : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _s1$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _s2$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	pop	ebp
	ret	8
??0?$tvec2@I$0A@@glm@@QAE@II@Z ENDP			; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@I$0A@@glm@@QAE@I@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 4
??0?$tvec2@I$0A@@glm@@QAE@I@Z PROC			; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>, COMDAT
; _this$ = ecx

; 52   : 	{}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec2@I$0A@@glm@@QAE@I@Z ENDP			; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@I$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec2@I$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>, COMDAT
; _this$ = ecx

; 47   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec2@I$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\func_packing.inl
;	COMDAT ??0?$tvec2@I$0A@@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec2@I$0A@@glm@@QAE@ABU01@@Z PROC			; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>, COMDAT
; _this$ = ecx

; 142  : 	}

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec2@I$0A@@glm@@QAE@ABU01@@Z ENDP			; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@I$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec2@I$0A@@glm@@QAE@XZ PROC			; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>, COMDAT
; _this$ = ecx

; 27   : 		{}

	and	DWORD PTR [ecx], 0
	mov	eax, ecx
	and	DWORD PTR [ecx+4], 0
	ret	0
??0?$tvec2@I$0A@@glm@@QAE@XZ ENDP			; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@I$0A@@glm@@QBEABIH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@I$0A@@glm@@QBEABIH@Z PROC			; glm::tvec2<unsigned int,0>::operator[], COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 112  : 	}

	pop	ebp
	ret	4
??A?$tvec2@I$0A@@glm@@QBEABIH@Z ENDP			; glm::tvec2<unsigned int,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@I$0A@@glm@@QAEAAIH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@I$0A@@glm@@QAEAAIH@Z PROC			; glm::tvec2<unsigned int,0>::operator[], COMDAT
; _this$ = ecx

; 102  : 	{

	push	ebp
	mov	ebp, esp

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 105  : 	}

	pop	ebp
	ret	4
??A?$tvec2@I$0A@@glm@@QAEAAIH@Z ENDP			; glm::tvec2<unsigned int,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@I$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@I$0A@@glm@@SAHXZ PROC			; glm::tvec2<unsigned int,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	push	2
	pop	eax
	ret	0
?length@?$tvec2@I$0A@@glm@@SAHXZ ENDP			; glm::tvec2<unsigned int,0>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@C$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec4@C$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<signed char,0>::operator--, COMDAT
; _this$ = ecx

; 482  : 	{

	push	ebp
	mov	ebp, esp

; 483  : 		tvec4<T, P> Result(*this);

	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 484  : 		--*this;

	dec	BYTE PTR [ecx]
	dec	BYTE PTR [ecx+1]
	dec	BYTE PTR [ecx+2]
	dec	BYTE PTR [ecx+3]
	mov	DWORD PTR [eax], edx

; 485  : 		return Result;
; 486  : 	}

	pop	ebp
	ret	8
??F?$tvec4@C$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<signed char,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@C$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec4@C$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<signed char,0>::operator++, COMDAT
; _this$ = ecx

; 474  : 	{

	push	ebp
	mov	ebp, esp

; 475  : 		tvec4<T, P> Result(*this);

	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 476  : 		++*this;

	inc	BYTE PTR [ecx]
	inc	BYTE PTR [ecx+1]
	inc	BYTE PTR [ecx+2]
	inc	BYTE PTR [ecx+3]
	mov	DWORD PTR [eax], edx

; 477  : 		return Result;
; 478  : 	}

	pop	ebp
	ret	8
??E?$tvec4@C$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<signed char,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@C$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec4@C$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec4<signed char,0>::operator--, COMDAT
; _this$ = ecx

; 465  : 		--this->x;

	dec	BYTE PTR [ecx]

; 466  : 		--this->y;
; 467  : 		--this->z;
; 468  : 		--this->w;
; 469  : 		return *this;

	mov	eax, ecx
	dec	BYTE PTR [ecx+1]
	dec	BYTE PTR [ecx+2]
	dec	BYTE PTR [ecx+3]

; 470  : 	}

	ret	0
??F?$tvec4@C$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<signed char,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@C$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec4@C$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec4<signed char,0>::operator++, COMDAT
; _this$ = ecx

; 455  : 		++this->x;

	inc	BYTE PTR [ecx]

; 456  : 		++this->y;
; 457  : 		++this->z;
; 458  : 		++this->w;
; 459  : 		return *this;

	mov	eax, ecx
	inc	BYTE PTR [ecx+1]
	inc	BYTE PTR [ecx+2]
	inc	BYTE PTR [ecx+3]

; 460  : 	}

	ret	0
??E?$tvec4@C$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<signed char,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\func_packing.inl
;	COMDAT ??4?$tvec4@C$0A@@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec4@C$0A@@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec4<signed char,0>::operator=, COMDAT
; _this$ = ecx

; 115  : 	}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??4?$tvec4@C$0A@@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec4<signed char,0>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@C$0A@@glm@@QAE@CCCC@Z
_TEXT	SEGMENT
_a$ = 8							; size = 1
_b$ = 12						; size = 1
_c$ = 16						; size = 1
_d$ = 20						; size = 1
??0?$tvec4@C$0A@@glm@@QAE@CCCC@Z PROC			; glm::tvec4<signed char,0>::tvec4<signed char,0>, COMDAT
; _this$ = ecx

; 193  : 	{}

	push	ebp
	mov	ebp, esp
	mov	al, BYTE PTR _a$[ebp]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR _b$[ebp]
	mov	BYTE PTR [ecx+1], al
	mov	al, BYTE PTR _c$[ebp]
	mov	BYTE PTR [ecx+2], al
	mov	al, BYTE PTR _d$[ebp]
	mov	BYTE PTR [ecx+3], al
	mov	eax, ecx
	pop	ebp
	ret	16					; 00000010H
??0?$tvec4@C$0A@@glm@@QAE@CCCC@Z ENDP			; glm::tvec4<signed char,0>::tvec4<signed char,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@C$0A@@glm@@QAE@C@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 1
??0?$tvec4@C$0A@@glm@@QAE@C@Z PROC			; glm::tvec4<signed char,0>::tvec4<signed char,0>, COMDAT
; _this$ = ecx

; 188  : 	{}

	push	ebp
	mov	ebp, esp
	mov	al, BYTE PTR _scalar$[ebp]
	mov	BYTE PTR [ecx], al
	mov	BYTE PTR [ecx+1], al
	mov	BYTE PTR [ecx+2], al
	mov	BYTE PTR [ecx+3], al
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec4@C$0A@@glm@@QAE@C@Z ENDP			; glm::tvec4<signed char,0>::tvec4<signed char,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@C$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec4@C$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec4<signed char,0>::tvec4<signed char,0>, COMDAT
; _this$ = ecx

; 183  : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec4@C$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec4<signed char,0>::tvec4<signed char,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\func_packing.inl
;	COMDAT ??0?$tvec4@C$0A@@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec4@C$0A@@glm@@QAE@ABU01@@Z PROC			; glm::tvec4<signed char,0>::tvec4<signed char,0>, COMDAT
; _this$ = ecx

; 115  : 	}

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR [edx+1]
	mov	BYTE PTR [ecx+1], al
	mov	al, BYTE PTR [edx+1]
	mov	BYTE PTR [ecx+1], al
	mov	al, BYTE PTR [edx+1]
	mov	BYTE PTR [ecx+1], al
	mov	al, BYTE PTR [edx+2]
	mov	BYTE PTR [ecx+2], al
	mov	al, BYTE PTR [edx+2]
	mov	BYTE PTR [ecx+2], al
	mov	al, BYTE PTR [edx+2]
	mov	BYTE PTR [ecx+2], al
	mov	al, BYTE PTR [edx+3]
	mov	BYTE PTR [ecx+3], al
	mov	al, BYTE PTR [edx+3]
	mov	BYTE PTR [ecx+3], al
	mov	al, BYTE PTR [edx+3]
	mov	BYTE PTR [ecx+3], al
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec4@C$0A@@glm@@QAE@ABU01@@Z ENDP			; glm::tvec4<signed char,0>::tvec4<signed char,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@C$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec4@C$0A@@glm@@QAE@XZ PROC			; glm::tvec4<signed char,0>::tvec4<signed char,0>, COMDAT
; _this$ = ecx

; 163  : 		{}

	xor	eax, eax
	mov	DWORD PTR [ecx], eax
	mov	eax, ecx
	ret	0
??0?$tvec4@C$0A@@glm@@QAE@XZ ENDP			; glm::tvec4<signed char,0>::tvec4<signed char,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@C$0A@@glm@@QBEABCH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@C$0A@@glm@@QBEABCH@Z PROC			; glm::tvec4<signed char,0>::operator[], COMDAT
; _this$ = ecx

; 336  : 	{

	push	ebp
	mov	ebp, esp

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 339  : 	}

	pop	ebp
	ret	4
??A?$tvec4@C$0A@@glm@@QBEABCH@Z ENDP			; glm::tvec4<signed char,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@C$0A@@glm@@QAEAACH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@C$0A@@glm@@QAEAACH@Z PROC			; glm::tvec4<signed char,0>::operator[], COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 332  : 	}

	pop	ebp
	ret	4
??A?$tvec4@C$0A@@glm@@QAEAACH@Z ENDP			; glm::tvec4<signed char,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@C$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@C$0A@@glm@@SAHXZ PROC			; glm::tvec4<signed char,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	push	4
	pop	eax
	ret	0
?length@?$tvec4@C$0A@@glm@@SAHXZ ENDP			; glm::tvec4<signed char,0>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@E$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec4@E$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<unsigned char,0>::operator--, COMDAT
; _this$ = ecx

; 482  : 	{

	push	ebp
	mov	ebp, esp

; 483  : 		tvec4<T, P> Result(*this);

	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 484  : 		--*this;

	dec	BYTE PTR [ecx]
	dec	BYTE PTR [ecx+1]
	dec	BYTE PTR [ecx+2]
	dec	BYTE PTR [ecx+3]
	mov	DWORD PTR [eax], edx

; 485  : 		return Result;
; 486  : 	}

	pop	ebp
	ret	8
??F?$tvec4@E$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<unsigned char,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@E$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec4@E$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<unsigned char,0>::operator++, COMDAT
; _this$ = ecx

; 474  : 	{

	push	ebp
	mov	ebp, esp

; 475  : 		tvec4<T, P> Result(*this);

	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 476  : 		++*this;

	inc	BYTE PTR [ecx]
	inc	BYTE PTR [ecx+1]
	inc	BYTE PTR [ecx+2]
	inc	BYTE PTR [ecx+3]
	mov	DWORD PTR [eax], edx

; 477  : 		return Result;
; 478  : 	}

	pop	ebp
	ret	8
??E?$tvec4@E$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<unsigned char,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@E$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec4@E$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec4<unsigned char,0>::operator--, COMDAT
; _this$ = ecx

; 465  : 		--this->x;

	dec	BYTE PTR [ecx]

; 466  : 		--this->y;
; 467  : 		--this->z;
; 468  : 		--this->w;
; 469  : 		return *this;

	mov	eax, ecx
	dec	BYTE PTR [ecx+1]
	dec	BYTE PTR [ecx+2]
	dec	BYTE PTR [ecx+3]

; 470  : 	}

	ret	0
??F?$tvec4@E$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<unsigned char,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@E$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec4@E$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec4<unsigned char,0>::operator++, COMDAT
; _this$ = ecx

; 455  : 		++this->x;

	inc	BYTE PTR [ecx]

; 456  : 		++this->y;
; 457  : 		++this->z;
; 458  : 		++this->w;
; 459  : 		return *this;

	mov	eax, ecx
	inc	BYTE PTR [ecx+1]
	inc	BYTE PTR [ecx+2]
	inc	BYTE PTR [ecx+3]

; 460  : 	}

	ret	0
??E?$tvec4@E$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<unsigned char,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\func_packing.inl
;	COMDAT ??4?$tvec4@E$0A@@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec4@E$0A@@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec4<unsigned char,0>::operator=, COMDAT
; _this$ = ecx

; 84   : 	}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??4?$tvec4@E$0A@@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec4<unsigned char,0>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@E$0A@@glm@@QAE@EEEE@Z
_TEXT	SEGMENT
_a$ = 8							; size = 1
_b$ = 12						; size = 1
_c$ = 16						; size = 1
_d$ = 20						; size = 1
??0?$tvec4@E$0A@@glm@@QAE@EEEE@Z PROC			; glm::tvec4<unsigned char,0>::tvec4<unsigned char,0>, COMDAT
; _this$ = ecx

; 193  : 	{}

	push	ebp
	mov	ebp, esp
	mov	al, BYTE PTR _a$[ebp]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR _b$[ebp]
	mov	BYTE PTR [ecx+1], al
	mov	al, BYTE PTR _c$[ebp]
	mov	BYTE PTR [ecx+2], al
	mov	al, BYTE PTR _d$[ebp]
	mov	BYTE PTR [ecx+3], al
	mov	eax, ecx
	pop	ebp
	ret	16					; 00000010H
??0?$tvec4@E$0A@@glm@@QAE@EEEE@Z ENDP			; glm::tvec4<unsigned char,0>::tvec4<unsigned char,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@E$0A@@glm@@QAE@E@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 1
??0?$tvec4@E$0A@@glm@@QAE@E@Z PROC			; glm::tvec4<unsigned char,0>::tvec4<unsigned char,0>, COMDAT
; _this$ = ecx

; 188  : 	{}

	push	ebp
	mov	ebp, esp
	mov	al, BYTE PTR _scalar$[ebp]
	mov	BYTE PTR [ecx], al
	mov	BYTE PTR [ecx+1], al
	mov	BYTE PTR [ecx+2], al
	mov	BYTE PTR [ecx+3], al
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec4@E$0A@@glm@@QAE@E@Z ENDP			; glm::tvec4<unsigned char,0>::tvec4<unsigned char,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@E$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec4@E$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec4<unsigned char,0>::tvec4<unsigned char,0>, COMDAT
; _this$ = ecx

; 183  : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec4@E$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec4<unsigned char,0>::tvec4<unsigned char,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\func_packing.inl
;	COMDAT ??0?$tvec4@E$0A@@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec4@E$0A@@glm@@QAE@ABU01@@Z PROC			; glm::tvec4<unsigned char,0>::tvec4<unsigned char,0>, COMDAT
; _this$ = ecx

; 84   : 	}

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR [edx+1]
	mov	BYTE PTR [ecx+1], al
	mov	al, BYTE PTR [edx+1]
	mov	BYTE PTR [ecx+1], al
	mov	al, BYTE PTR [edx+1]
	mov	BYTE PTR [ecx+1], al
	mov	al, BYTE PTR [edx+2]
	mov	BYTE PTR [ecx+2], al
	mov	al, BYTE PTR [edx+2]
	mov	BYTE PTR [ecx+2], al
	mov	al, BYTE PTR [edx+2]
	mov	BYTE PTR [ecx+2], al
	mov	al, BYTE PTR [edx+3]
	mov	BYTE PTR [ecx+3], al
	mov	al, BYTE PTR [edx+3]
	mov	BYTE PTR [ecx+3], al
	mov	al, BYTE PTR [edx+3]
	mov	BYTE PTR [ecx+3], al
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec4@E$0A@@glm@@QAE@ABU01@@Z ENDP			; glm::tvec4<unsigned char,0>::tvec4<unsigned char,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@E$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec4@E$0A@@glm@@QAE@XZ PROC			; glm::tvec4<unsigned char,0>::tvec4<unsigned char,0>, COMDAT
; _this$ = ecx

; 163  : 		{}

	xor	eax, eax
	mov	DWORD PTR [ecx], eax
	mov	eax, ecx
	ret	0
??0?$tvec4@E$0A@@glm@@QAE@XZ ENDP			; glm::tvec4<unsigned char,0>::tvec4<unsigned char,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@E$0A@@glm@@QBEABEH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@E$0A@@glm@@QBEABEH@Z PROC			; glm::tvec4<unsigned char,0>::operator[], COMDAT
; _this$ = ecx

; 336  : 	{

	push	ebp
	mov	ebp, esp

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 339  : 	}

	pop	ebp
	ret	4
??A?$tvec4@E$0A@@glm@@QBEABEH@Z ENDP			; glm::tvec4<unsigned char,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@E$0A@@glm@@QAEAAEH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@E$0A@@glm@@QAEAAEH@Z PROC			; glm::tvec4<unsigned char,0>::operator[], COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 332  : 	}

	pop	ebp
	ret	4
??A?$tvec4@E$0A@@glm@@QAEAAEH@Z ENDP			; glm::tvec4<unsigned char,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@E$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@E$0A@@glm@@SAHXZ PROC			; glm::tvec4<unsigned char,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	push	4
	pop	eax
	ret	0
?length@?$tvec4@E$0A@@glm@@SAHXZ ENDP			; glm::tvec4<unsigned char,0>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@M$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec4@M$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<float,0>::operator--, COMDAT
; _this$ = ecx

; 482  : 	{

	push	ebp
	mov	ebp, esp

; 483  : 		tvec4<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 484  : 		--*this;

	movups	xmm0, XMMWORD PTR [ecx]
	push	esi
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	mov	esi, ecx
	push	edi
	mov	edi, eax
	subps	xmm0, xmm1
	movsd
	movsd
	movsd
	movsd
	pop	edi
	movups	XMMWORD PTR [ecx], xmm0
	pop	esi

; 485  : 		return Result;
; 486  : 	}

	pop	ebp
	ret	8
??F?$tvec4@M$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<float,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@M$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec4@M$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<float,0>::operator++, COMDAT
; _this$ = ecx

; 474  : 	{

	push	ebp
	mov	ebp, esp

; 475  : 		tvec4<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 476  : 		++*this;

	movups	xmm0, XMMWORD PTR [ecx]
	push	esi
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	mov	esi, ecx
	push	edi
	mov	edi, eax
	addps	xmm0, xmm1
	movsd
	movsd
	movsd
	movsd
	pop	edi
	movups	XMMWORD PTR [ecx], xmm0
	pop	esi

; 477  : 		return Result;
; 478  : 	}

	pop	ebp
	ret	8
??E?$tvec4@M$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<float,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@M$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec4@M$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec4<float,0>::operator--, COMDAT
; _this$ = ecx

; 465  : 		--this->x;

	movups	xmm0, XMMWORD PTR [ecx]

; 466  : 		--this->y;
; 467  : 		--this->z;
; 468  : 		--this->w;
; 469  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0

; 470  : 	}

	ret	0
??F?$tvec4@M$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<float,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@M$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec4@M$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec4<float,0>::operator++, COMDAT
; _this$ = ecx

; 455  : 		++this->x;

	movups	xmm0, XMMWORD PTR [ecx]

; 456  : 		++this->y;
; 457  : 		++this->z;
; 458  : 		++this->w;
; 459  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0

; 460  : 	}

	ret	0
??E?$tvec4@M$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<float,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\func_packing.inl
;	COMDAT ??4?$tvec4@M$0A@@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec4@M$0A@@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec4<float,0>::operator=, COMDAT
; _this$ = ecx

; 84   : 	}

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	push	edi
	mov	edi, ecx
	movsd
	movsd
	movsd
	movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$tvec4@M$0A@@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec4<float,0>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$0A@@glm@@QAE@MMMM@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
_d$ = 20						; size = 4
??0?$tvec4@M$0A@@glm@@QAE@MMMM@Z PROC			; glm::tvec4<float,0>::tvec4<float,0>, COMDAT
; _this$ = ecx

; 193  : 	{}

	push	ebp
	mov	ebp, esp
	movss	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR _b$[ebp]
	movss	DWORD PTR [ecx+4], xmm0
	movss	xmm0, DWORD PTR _c$[ebp]
	movss	DWORD PTR [ecx+8], xmm0
	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR [ecx+12], xmm0
	pop	ebp
	ret	16					; 00000010H
??0?$tvec4@M$0A@@glm@@QAE@MMMM@Z ENDP			; glm::tvec4<float,0>::tvec4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$0A@@glm@@QAE@M@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 4
??0?$tvec4@M$0A@@glm@@QAE@M@Z PROC			; glm::tvec4<float,0>::tvec4<float,0>, COMDAT
; _this$ = ecx

; 188  : 	{}

	push	ebp
	mov	ebp, esp
	movss	xmm0, DWORD PTR _scalar$[ebp]
	mov	eax, ecx
	shufps	xmm0, xmm0, 0
	movups	XMMWORD PTR [ecx], xmm0
	pop	ebp
	ret	4
??0?$tvec4@M$0A@@glm@@QAE@M@Z ENDP			; glm::tvec4<float,0>::tvec4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec4@M$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec4<float,0>::tvec4<float,0>, COMDAT
; _this$ = ecx

; 183  : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec4@M$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec4<float,0>::tvec4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\func_packing.inl
;	COMDAT ??0?$tvec4@M$0A@@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec4@M$0A@@glm@@QAE@ABU01@@Z PROC			; glm::tvec4<float,0>::tvec4<float,0>, COMDAT
; _this$ = ecx

; 84   : 	}

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec4@M$0A@@glm@@QAE@ABU01@@Z ENDP			; glm::tvec4<float,0>::tvec4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec4@M$0A@@glm@@QAE@XZ PROC			; glm::tvec4<float,0>::tvec4<float,0>, COMDAT
; _this$ = ecx

; 163  : 		{}

	and	DWORD PTR [ecx], 0
	mov	eax, ecx
	and	DWORD PTR [ecx+4], 0
	and	DWORD PTR [ecx+8], 0
	and	DWORD PTR [ecx+12], 0
	ret	0
??0?$tvec4@M$0A@@glm@@QAE@XZ ENDP			; glm::tvec4<float,0>::tvec4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@M$0A@@glm@@QBEABMH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@M$0A@@glm@@QBEABMH@Z PROC			; glm::tvec4<float,0>::operator[], COMDAT
; _this$ = ecx

; 336  : 	{

	push	ebp
	mov	ebp, esp

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 339  : 	}

	pop	ebp
	ret	4
??A?$tvec4@M$0A@@glm@@QBEABMH@Z ENDP			; glm::tvec4<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@M$0A@@glm@@QAEAAMH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@M$0A@@glm@@QAEAAMH@Z PROC			; glm::tvec4<float,0>::operator[], COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 332  : 	}

	pop	ebp
	ret	4
??A?$tvec4@M$0A@@glm@@QAEAAMH@Z ENDP			; glm::tvec4<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@M$0A@@glm@@SAHXZ PROC			; glm::tvec4<float,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	push	4
	pop	eax
	ret	0
?length@?$tvec4@M$0A@@glm@@SAHXZ ENDP			; glm::tvec4<float,0>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@F$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec2@F$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<short,0>::operator--, COMDAT
; _this$ = ecx

; 271  : 	{

	push	ebp
	mov	ebp, esp

; 272  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]

; 273  : 		--*this;

	dec	WORD PTR [ecx]
	dec	WORD PTR [ecx+2]
	mov	DWORD PTR [eax], edx

; 274  : 		return Result;
; 275  : 	}

	pop	ebp
	ret	8
??F?$tvec2@F$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<short,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@F$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec2@F$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<short,0>::operator++, COMDAT
; _this$ = ecx

; 263  : 	{

	push	ebp
	mov	ebp, esp

; 264  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]

; 265  : 		++*this;

	inc	WORD PTR [ecx]
	inc	WORD PTR [ecx+2]
	mov	DWORD PTR [eax], edx

; 266  : 		return Result;
; 267  : 	}

	pop	ebp
	ret	8
??E?$tvec2@F$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<short,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@F$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec2@F$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec2<short,0>::operator--, COMDAT
; _this$ = ecx

; 256  : 		--this->x;

	dec	WORD PTR [ecx]

; 257  : 		--this->y;
; 258  : 		return *this;

	mov	eax, ecx
	dec	WORD PTR [ecx+2]

; 259  : 	}

	ret	0
??F?$tvec2@F$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<short,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@F$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec2@F$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec2<short,0>::operator++, COMDAT
; _this$ = ecx

; 248  : 		++this->x;

	inc	WORD PTR [ecx]

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	eax, ecx
	inc	WORD PTR [ecx+2]

; 251  : 	}

	ret	0
??E?$tvec2@F$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<short,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\func_packing.inl
;	COMDAT ??4?$tvec2@F$0A@@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec2@F$0A@@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec2<short,0>::operator=, COMDAT
; _this$ = ecx

; 53   : 	}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??4?$tvec2@F$0A@@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec2<short,0>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@F$0A@@glm@@QAE@FF@Z
_TEXT	SEGMENT
_s1$ = 8						; size = 2
_s2$ = 12						; size = 2
??0?$tvec2@F$0A@@glm@@QAE@FF@Z PROC			; glm::tvec2<short,0>::tvec2<short,0>, COMDAT
; _this$ = ecx

; 57   : 	{}

	push	ebp
	mov	ebp, esp
	mov	ax, WORD PTR _s1$[ebp]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR _s2$[ebp]
	mov	WORD PTR [ecx+2], ax
	mov	eax, ecx
	pop	ebp
	ret	8
??0?$tvec2@F$0A@@glm@@QAE@FF@Z ENDP			; glm::tvec2<short,0>::tvec2<short,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@F$0A@@glm@@QAE@F@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 2
??0?$tvec2@F$0A@@glm@@QAE@F@Z PROC			; glm::tvec2<short,0>::tvec2<short,0>, COMDAT
; _this$ = ecx

; 52   : 	{}

	push	ebp
	mov	ebp, esp
	mov	ax, WORD PTR _scalar$[ebp]
	mov	WORD PTR [ecx], ax
	mov	WORD PTR [ecx+2], ax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec2@F$0A@@glm@@QAE@F@Z ENDP			; glm::tvec2<short,0>::tvec2<short,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@F$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec2@F$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec2<short,0>::tvec2<short,0>, COMDAT
; _this$ = ecx

; 47   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec2@F$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec2<short,0>::tvec2<short,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\func_packing.inl
;	COMDAT ??0?$tvec2@F$0A@@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec2@F$0A@@glm@@QAE@ABU01@@Z PROC			; glm::tvec2<short,0>::tvec2<short,0>, COMDAT
; _this$ = ecx

; 53   : 	}

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR [edx+2]
	mov	WORD PTR [ecx+2], ax
	mov	ax, WORD PTR [edx+2]
	mov	WORD PTR [ecx+2], ax
	mov	ax, WORD PTR [edx+2]
	mov	WORD PTR [ecx+2], ax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec2@F$0A@@glm@@QAE@ABU01@@Z ENDP			; glm::tvec2<short,0>::tvec2<short,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@F$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec2@F$0A@@glm@@QAE@XZ PROC			; glm::tvec2<short,0>::tvec2<short,0>, COMDAT
; _this$ = ecx

; 27   : 		{}

	xor	eax, eax
	mov	DWORD PTR [ecx], eax
	mov	eax, ecx
	ret	0
??0?$tvec2@F$0A@@glm@@QAE@XZ ENDP			; glm::tvec2<short,0>::tvec2<short,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@F$0A@@glm@@QBEABFH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@F$0A@@glm@@QBEABFH@Z PROC			; glm::tvec2<short,0>::operator[], COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 112  : 	}

	pop	ebp
	ret	4
??A?$tvec2@F$0A@@glm@@QBEABFH@Z ENDP			; glm::tvec2<short,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@F$0A@@glm@@QAEAAFH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@F$0A@@glm@@QAEAAFH@Z PROC			; glm::tvec2<short,0>::operator[], COMDAT
; _this$ = ecx

; 102  : 	{

	push	ebp
	mov	ebp, esp

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 105  : 	}

	pop	ebp
	ret	4
??A?$tvec2@F$0A@@glm@@QAEAAFH@Z ENDP			; glm::tvec2<short,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@F$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@F$0A@@glm@@SAHXZ PROC			; glm::tvec2<short,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	push	2
	pop	eax
	ret	0
?length@?$tvec2@F$0A@@glm@@SAHXZ ENDP			; glm::tvec2<short,0>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@G$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec2@G$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<unsigned short,0>::operator--, COMDAT
; _this$ = ecx

; 271  : 	{

	push	ebp
	mov	ebp, esp

; 272  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 273  : 		--*this;

	mov	edx, 65535				; 0000ffffH
	add	WORD PTR [ecx], dx
	add	WORD PTR [ecx+2], dx

; 274  : 		return Result;
; 275  : 	}

	pop	ebp
	ret	8
??F?$tvec2@G$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<unsigned short,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@G$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec2@G$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<unsigned short,0>::operator++, COMDAT
; _this$ = ecx

; 263  : 	{

	push	ebp
	mov	ebp, esp

; 264  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]

; 265  : 		++*this;

	inc	WORD PTR [ecx]
	inc	WORD PTR [ecx+2]
	mov	DWORD PTR [eax], edx

; 266  : 		return Result;
; 267  : 	}

	pop	ebp
	ret	8
??E?$tvec2@G$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<unsigned short,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@G$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec2@G$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec2<unsigned short,0>::operator--, COMDAT
; _this$ = ecx

; 256  : 		--this->x;

	mov	eax, 65535				; 0000ffffH
	add	WORD PTR [ecx], ax

; 257  : 		--this->y;

	add	WORD PTR [ecx+2], ax

; 258  : 		return *this;

	mov	eax, ecx

; 259  : 	}

	ret	0
??F?$tvec2@G$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<unsigned short,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@G$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec2@G$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec2<unsigned short,0>::operator++, COMDAT
; _this$ = ecx

; 248  : 		++this->x;

	inc	WORD PTR [ecx]

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	eax, ecx
	inc	WORD PTR [ecx+2]

; 251  : 	}

	ret	0
??E?$tvec2@G$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<unsigned short,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\func_packing.inl
;	COMDAT ??4?$tvec2@G$0A@@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec2@G$0A@@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec2<unsigned short,0>::operator=, COMDAT
; _this$ = ecx

; 24   : 	}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??4?$tvec2@G$0A@@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec2<unsigned short,0>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@G$0A@@glm@@QAE@GG@Z
_TEXT	SEGMENT
_s1$ = 8						; size = 2
_s2$ = 12						; size = 2
??0?$tvec2@G$0A@@glm@@QAE@GG@Z PROC			; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0>, COMDAT
; _this$ = ecx

; 57   : 	{}

	push	ebp
	mov	ebp, esp
	mov	ax, WORD PTR _s1$[ebp]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR _s2$[ebp]
	mov	WORD PTR [ecx+2], ax
	mov	eax, ecx
	pop	ebp
	ret	8
??0?$tvec2@G$0A@@glm@@QAE@GG@Z ENDP			; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@G$0A@@glm@@QAE@G@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 2
??0?$tvec2@G$0A@@glm@@QAE@G@Z PROC			; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0>, COMDAT
; _this$ = ecx

; 52   : 	{}

	push	ebp
	mov	ebp, esp
	mov	ax, WORD PTR _scalar$[ebp]
	mov	WORD PTR [ecx], ax
	mov	WORD PTR [ecx+2], ax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec2@G$0A@@glm@@QAE@G@Z ENDP			; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@G$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec2@G$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0>, COMDAT
; _this$ = ecx

; 47   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec2@G$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\func_packing.inl
;	COMDAT ??0?$tvec2@G$0A@@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec2@G$0A@@glm@@QAE@ABU01@@Z PROC			; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0>, COMDAT
; _this$ = ecx

; 24   : 	}

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR [edx+2]
	mov	WORD PTR [ecx+2], ax
	mov	ax, WORD PTR [edx+2]
	mov	WORD PTR [ecx+2], ax
	mov	ax, WORD PTR [edx+2]
	mov	WORD PTR [ecx+2], ax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec2@G$0A@@glm@@QAE@ABU01@@Z ENDP			; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@G$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec2@G$0A@@glm@@QAE@XZ PROC			; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0>, COMDAT
; _this$ = ecx

; 27   : 		{}

	xor	eax, eax
	mov	DWORD PTR [ecx], eax
	mov	eax, ecx
	ret	0
??0?$tvec2@G$0A@@glm@@QAE@XZ ENDP			; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@G$0A@@glm@@QBEABGH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@G$0A@@glm@@QBEABGH@Z PROC			; glm::tvec2<unsigned short,0>::operator[], COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 112  : 	}

	pop	ebp
	ret	4
??A?$tvec2@G$0A@@glm@@QBEABGH@Z ENDP			; glm::tvec2<unsigned short,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@G$0A@@glm@@QAEAAGH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@G$0A@@glm@@QAEAAGH@Z PROC			; glm::tvec2<unsigned short,0>::operator[], COMDAT
; _this$ = ecx

; 102  : 	{

	push	ebp
	mov	ebp, esp

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 105  : 	}

	pop	ebp
	ret	4
??A?$tvec2@G$0A@@glm@@QAEAAGH@Z ENDP			; glm::tvec2<unsigned short,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@G$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@G$0A@@glm@@SAHXZ PROC			; glm::tvec2<unsigned short,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	push	2
	pop	eax
	ret	0
?length@?$tvec2@G$0A@@glm@@SAHXZ ENDP			; glm::tvec2<unsigned short,0>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@M$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec2@M$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<float,0>::operator--, COMDAT
; _this$ = ecx

; 271  : 	{

	push	ebp
	mov	ebp, esp

; 272  : 		tvec2<T, P> Result(*this);
; 273  : 		--*this;

	movss	xmm0, DWORD PTR [ecx]
	subss	xmm0, DWORD PTR __real@3f800000
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	subss	xmm0, DWORD PTR __real@3f800000
	mov	DWORD PTR [esi], eax

; 274  : 		return Result;

	mov	eax, esi
	mov	DWORD PTR [esi+4], edx
	pop	esi
	movss	DWORD PTR [ecx+4], xmm0

; 275  : 	}

	pop	ebp
	ret	8
??F?$tvec2@M$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<float,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@M$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec2@M$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<float,0>::operator++, COMDAT
; _this$ = ecx

; 263  : 	{

	push	ebp
	mov	ebp, esp

; 264  : 		tvec2<T, P> Result(*this);
; 265  : 		++*this;

	movss	xmm0, DWORD PTR [ecx]
	addss	xmm0, DWORD PTR __real@3f800000
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	addss	xmm0, DWORD PTR __real@3f800000
	mov	DWORD PTR [esi], eax

; 266  : 		return Result;

	mov	eax, esi
	mov	DWORD PTR [esi+4], edx
	pop	esi
	movss	DWORD PTR [ecx+4], xmm0

; 267  : 	}

	pop	ebp
	ret	8
??E?$tvec2@M$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<float,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@M$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec2@M$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec2<float,0>::operator--, COMDAT
; _this$ = ecx

; 256  : 		--this->x;

	movss	xmm0, DWORD PTR [ecx]

; 257  : 		--this->y;
; 258  : 		return *this;

	mov	eax, ecx
	subss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	subss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx+4], xmm0

; 259  : 	}

	ret	0
??F?$tvec2@M$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<float,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@M$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec2@M$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec2<float,0>::operator++, COMDAT
; _this$ = ecx

; 248  : 		++this->x;

	movss	xmm0, DWORD PTR [ecx]

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	eax, ecx
	addss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	addss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx+4], xmm0

; 251  : 	}

	ret	0
??E?$tvec2@M$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<float,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\func_packing.inl
;	COMDAT ??4?$tvec2@M$0A@@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$tvec2@M$0A@@glm@@QAEAAU01@ABU01@@Z PROC		; glm::tvec2<float,0>::operator=, COMDAT
; _this$ = ecx

; 24   : 	}

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??4?$tvec2@M$0A@@glm@@QAEAAU01@ABU01@@Z ENDP		; glm::tvec2<float,0>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@M$0A@@glm@@QAE@MM@Z
_TEXT	SEGMENT
_s1$ = 8						; size = 4
_s2$ = 12						; size = 4
??0?$tvec2@M$0A@@glm@@QAE@MM@Z PROC			; glm::tvec2<float,0>::tvec2<float,0>, COMDAT
; _this$ = ecx

; 57   : 	{}

	push	ebp
	mov	ebp, esp
	movss	xmm0, DWORD PTR _s1$[ebp]
	mov	eax, ecx
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR _s2$[ebp]
	movss	DWORD PTR [ecx+4], xmm0
	pop	ebp
	ret	8
??0?$tvec2@M$0A@@glm@@QAE@MM@Z ENDP			; glm::tvec2<float,0>::tvec2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@M$0A@@glm@@QAE@M@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 4
??0?$tvec2@M$0A@@glm@@QAE@M@Z PROC			; glm::tvec2<float,0>::tvec2<float,0>, COMDAT
; _this$ = ecx

; 52   : 	{}

	push	ebp
	mov	ebp, esp
	movss	xmm0, DWORD PTR _scalar$[ebp]
	mov	eax, ecx
	movss	DWORD PTR [ecx], xmm0
	movss	DWORD PTR [ecx+4], xmm0
	pop	ebp
	ret	4
??0?$tvec2@M$0A@@glm@@QAE@M@Z ENDP			; glm::tvec2<float,0>::tvec2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@M$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec2@M$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec2<float,0>::tvec2<float,0>, COMDAT
; _this$ = ecx

; 47   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec2@M$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec2<float,0>::tvec2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\func_packing.inl
;	COMDAT ??0?$tvec2@M$0A@@glm@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tvec2@M$0A@@glm@@QAE@ABU01@@Z PROC			; glm::tvec2<float,0>::tvec2<float,0>, COMDAT
; _this$ = ecx

; 24   : 	}

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec2@M$0A@@glm@@QAE@ABU01@@Z ENDP			; glm::tvec2<float,0>::tvec2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@M$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec2@M$0A@@glm@@QAE@XZ PROC			; glm::tvec2<float,0>::tvec2<float,0>, COMDAT
; _this$ = ecx

; 27   : 		{}

	and	DWORD PTR [ecx], 0
	mov	eax, ecx
	and	DWORD PTR [ecx+4], 0
	ret	0
??0?$tvec2@M$0A@@glm@@QAE@XZ ENDP			; glm::tvec2<float,0>::tvec2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@M$0A@@glm@@QBEABMH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@M$0A@@glm@@QBEABMH@Z PROC			; glm::tvec2<float,0>::operator[], COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 112  : 	}

	pop	ebp
	ret	4
??A?$tvec2@M$0A@@glm@@QBEABMH@Z ENDP			; glm::tvec2<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@M$0A@@glm@@QAEAAMH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@M$0A@@glm@@QAEAAMH@Z PROC			; glm::tvec2<float,0>::operator[], COMDAT
; _this$ = ecx

; 102  : 	{

	push	ebp
	mov	ebp, esp

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 105  : 	}

	pop	ebp
	ret	4
??A?$tvec2@M$0A@@glm@@QAEAAMH@Z ENDP			; glm::tvec2<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\user\desktop\glm-0.9.8.5\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@M$0A@@glm@@SAHXZ PROC			; glm::tvec2<float,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	push	2
	pop	eax
	ret	0
?length@?$tvec2@M$0A@@glm@@SAHXZ ENDP			; glm::tvec2<float,0>::length
_TEXT	ENDS
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT
tv64 = 8						; size = 4
__X$ = 8						; size = 4
?sqrt@@YAMM@Z PROC					; sqrt, COMDAT

; 1136 :         {return (sqrtf(_X)); }

	push	ebp
	mov	ebp, esp
	movss	xmm0, DWORD PTR __X$[ebp]
	cvtps2pd xmm0, xmm0
	push	ecx
	push	ecx
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	fstp	DWORD PTR tv64[ebp]
	fld	DWORD PTR tv64[ebp]
	pop	ecx
	pop	ecx
	pop	ebp
	ret	0
?sqrt@@YAMM@Z ENDP					; sqrt
_TEXT	ENDS
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
;	COMDAT ?sin@@YAMM@Z
_TEXT	SEGMENT
tv64 = 8						; size = 4
__X$ = 8						; size = 4
?sin@@YAMM@Z PROC					; sin, COMDAT

; 1132 :         {return (sinf(_X)); }

	push	ebp
	mov	ebp, esp
	movss	xmm0, DWORD PTR __X$[ebp]
	cvtps2pd xmm0, xmm0
	push	ecx
	push	ecx
	movsd	QWORD PTR [esp], xmm0
	call	_sin
	fstp	DWORD PTR tv64[ebp]
	fld	DWORD PTR tv64[ebp]
	pop	ecx
	pop	ecx
	pop	ebp
	ret	0
?sin@@YAMM@Z ENDP					; sin
_TEXT	ENDS
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
;	COMDAT ?cos@@YAMM@Z
_TEXT	SEGMENT
tv64 = 8						; size = 4
__X$ = 8						; size = 4
?cos@@YAMM@Z PROC					; cos, COMDAT

; 1052 :         {return (cosf(_X)); }

	push	ebp
	mov	ebp, esp
	movss	xmm0, DWORD PTR __X$[ebp]
	cvtps2pd xmm0, xmm0
	push	ecx
	push	ecx
	movsd	QWORD PTR [esp], xmm0
	call	_cos
	fstp	DWORD PTR tv64[ebp]
	fld	DWORD PTR tv64[ebp]
	pop	ecx
	pop	ecx
	pop	ebp
	ret	0
?cos@@YAMM@Z ENDP					; cos
_TEXT	ENDS
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv72 = 8						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 774  : {

	push	ebp
	mov	ebp, esp
	movss	xmm0, DWORD PTR __X$[ebp]

; 775  :     return (float)sqrt(_X);

	cvtps2pd xmm0, xmm0
	push	ecx
	push	ecx
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	fstp	DWORD PTR tv72[ebp]
	fld	DWORD PTR tv72[ebp]
	pop	ecx
	pop	ecx

; 776  : }

	pop	ebp
	ret	0
_sqrtf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
;	COMDAT _sinf
_TEXT	SEGMENT
tv72 = 8						; size = 4
__X$ = 8						; size = 4
_sinf	PROC						; COMDAT

; 764  : {

	push	ebp
	mov	ebp, esp
	movss	xmm0, DWORD PTR __X$[ebp]

; 765  :     return (float)sin(_X);

	cvtps2pd xmm0, xmm0
	push	ecx
	push	ecx
	movsd	QWORD PTR [esp], xmm0
	call	_sin
	fstp	DWORD PTR tv72[ebp]
	fld	DWORD PTR tv72[ebp]
	pop	ecx
	pop	ecx

; 766  : }

	pop	ebp
	ret	0
_sinf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
;	COMDAT _cosf
_TEXT	SEGMENT
tv72 = 8						; size = 4
__X$ = 8						; size = 4
_cosf	PROC						; COMDAT

; 663  : {

	push	ebp
	mov	ebp, esp
	movss	xmm0, DWORD PTR __X$[ebp]

; 664  :     return (float)cos(_X);

	cvtps2pd xmm0, xmm0
	push	ecx
	push	ecx
	movsd	QWORD PTR [esp], xmm0
	call	_cos
	fstp	DWORD PTR tv72[ebp]
	fld	DWORD PTR tv72[ebp]
	pop	ecx
	pop	ecx

; 665  : }

	pop	ebp
	ret	0
_cosf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
;	COMDAT _hypot
_TEXT	SEGMENT
__X$ = 8						; size = 8
__Y$ = 16						; size = 8
_hypot	PROC						; COMDAT

; 556  : {

	push	ebp
	mov	ebp, esp

; 557  :     return _hypot(_X, _Y);

	movsd	xmm0, QWORD PTR __Y$[ebp]
	sub	esp, 16					; 00000010H
	movsd	QWORD PTR [esp+8], xmm0
	movsd	xmm0, QWORD PTR __X$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	DWORD PTR __imp___hypot
	add	esp, 16					; 00000010H

; 558  : }

	pop	ebp
	ret	0
_hypot	ENDP
_TEXT	ENDS
; Function compile flags: /Ogsp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___n$[ebp]
	dec	esi
	js	SHORT $LN1@vector
	push	edi
	mov	edi, DWORD PTR ___t$[ebp]
$LL2@vector:
	mov	ecx, edi
	call	DWORD PTR ___f$[ebp]
	add	edi, DWORD PTR ___s$[ebp]
	dec	esi
	jns	SHORT $LL2@vector
	pop	edi
$LN1@vector:
	pop	esi
	pop	ebp
	ret	16					; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
